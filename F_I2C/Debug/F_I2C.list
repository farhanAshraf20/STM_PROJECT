
F_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015be8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001274  08015d78  08015d78  00025d78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016fec  08016fec  00030c4c  2**0
                  CONTENTS
  4 .ARM          00000008  08016fec  08016fec  00026fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016ff4  08016ff4  00030c4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016ff4  08016ff4  00026ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016ff8  08016ff8  00026ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000c4c  20000000  08016ffc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020ac  20000c4c  08017c48  00030c4c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002cf8  08017c48  00032cf8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030c4c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000348a6  00000000  00000000  00030c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005def  00000000  00000000  00065522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002098  00000000  00000000  0006b318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e00  00000000  00000000  0006d3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ed83  00000000  00000000  0006f1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a854  00000000  00000000  0009df33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001066ad  00000000  00000000  000c8787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001cee34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000098bc  00000000  00000000  001cee88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000c4c 	.word	0x20000c4c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015d60 	.word	0x08015d60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000c50 	.word	0x20000c50
 80001cc:	08015d60 	.word	0x08015d60

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <M24SR_UpdateCrc>:
  * @brief  This function updates the CRC 
  * @param  None
  * @retval None
  */
static uint16_t M24SR_UpdateCrc (uint8_t ch, uint16_t *lpwCrc)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	6039      	str	r1, [r7, #0]
 8000eaa:	71fb      	strb	r3, [r7, #7]
  ch = (ch^(uint8_t)((*lpwCrc) & 0x00FF));
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	4053      	eors	r3, r2
 8000eb6:	71fb      	strb	r3, [r7, #7]
  ch = (ch^(ch<<4));
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	011b      	lsls	r3, r3, #4
 8000ebc:	b25a      	sxtb	r2, r3
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	4053      	eors	r3, r2
 8000ec4:	b25b      	sxtb	r3, r3
 8000ec6:	71fb      	strb	r3, [r7, #7]
  *lpwCrc = (*lpwCrc >> 8)^((uint16_t)ch << 8)^((uint16_t)ch<<3)^((uint16_t)ch>>4);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	0a1b      	lsrs	r3, r3, #8
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	b21a      	sxth	r2, r3
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	021b      	lsls	r3, r3, #8
 8000ed6:	b21b      	sxth	r3, r3
 8000ed8:	4053      	eors	r3, r2
 8000eda:	b21a      	sxth	r2, r3
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	00db      	lsls	r3, r3, #3
 8000ee0:	b21b      	sxth	r3, r3
 8000ee2:	4053      	eors	r3, r2
 8000ee4:	b21a      	sxth	r2, r3
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	091b      	lsrs	r3, r3, #4
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	b21b      	sxth	r3, r3
 8000eee:	4053      	eors	r3, r2
 8000ef0:	b21b      	sxth	r3, r3
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	801a      	strh	r2, [r3, #0]
  
  return(*lpwCrc);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	881b      	ldrh	r3, [r3, #0]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <M24SR_ComputeCrc>:
  * @param  Data : pointer on the data used to compute the CRC16
  * @param  Length : number of byte of the data
  * @retval CRC16 
  */
static uint16_t M24SR_ComputeCrc(uint8_t *Data, uint8_t Length)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	460b      	mov	r3, r1
 8000f12:	70fb      	strb	r3, [r7, #3]
  uint8_t chBlock;
  uint16_t wCrc;
  
  wCrc = 0x6363; /* ITU-V.41 */
 8000f14:	f246 3363 	movw	r3, #25443	; 0x6363
 8000f18:	81bb      	strh	r3, [r7, #12]
  
  do {
    chBlock = *Data++;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	1c5a      	adds	r2, r3, #1
 8000f1e:	607a      	str	r2, [r7, #4]
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	73fb      	strb	r3, [r7, #15]
    M24SR_UpdateCrc(chBlock, &wCrc);
 8000f24:	f107 020c 	add.w	r2, r7, #12
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ffb7 	bl	8000ea0 <M24SR_UpdateCrc>
  } while (--Length);
 8000f32:	78fb      	ldrb	r3, [r7, #3]
 8000f34:	3b01      	subs	r3, #1
 8000f36:	70fb      	strb	r3, [r7, #3]
 8000f38:	78fb      	ldrb	r3, [r7, #3]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d1ed      	bne.n	8000f1a <M24SR_ComputeCrc+0x12>
  
  return wCrc ;
 8000f3e:	89bb      	ldrh	r3, [r7, #12]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <M24SR_IsCorrectCRC16Residue>:
* @param    Length     :   Number of bits of DataIn
* @retval   Status (SW1&SW2)    :   CRC16 residue is correct  
* @retval   M24SR_ERROR_CRC    :  CRC16 residue is false
*/
static uint16_t M24SR_IsCorrectCRC16Residue (uint8_t *DataIn,uint8_t Length)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	70fb      	strb	r3, [r7, #3]
  uint16_t ResCRC=0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	81fb      	strh	r3, [r7, #14]
  
  /* check the CRC16 Residue */
  if (Length !=0)
 8000f58:	78fb      	ldrb	r3, [r7, #3]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d006      	beq.n	8000f6c <M24SR_IsCorrectCRC16Residue+0x24>
    ResCRC= M24SR_ComputeCrc (DataIn, Length);
 8000f5e:	78fb      	ldrb	r3, [r7, #3]
 8000f60:	4619      	mov	r1, r3
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff ffd0 	bl	8000f08 <M24SR_ComputeCrc>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	81fb      	strh	r3, [r7, #14]
  
  if ( ResCRC == 0x0000)
 8000f6c:	89fb      	ldrh	r3, [r7, #14]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d110      	bne.n	8000f94 <M24SR_IsCorrectCRC16Residue+0x4c>
  {
    /* Good CRC, but error status from M24SR */
    return( ((DataIn[Length-UB_STATUS_OFFSET]<<8) & 0xFF00) | (DataIn[Length-LB_STATUS_OFFSET] & 0x00FF) ); 
 8000f72:	78fb      	ldrb	r3, [r7, #3]
 8000f74:	3b04      	subs	r3, #4
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	021b      	lsls	r3, r3, #8
 8000f7e:	b21a      	sxth	r2, r3
 8000f80:	78fb      	ldrb	r3, [r7, #3]
 8000f82:	3b03      	subs	r3, #3
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	440b      	add	r3, r1
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	b21b      	sxth	r3, r3
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	e018      	b.n	8000fc6 <M24SR_IsCorrectCRC16Residue+0x7e>
  }
  else
  {
    ResCRC=0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	81fb      	strh	r3, [r7, #14]
    ResCRC= M24SR_ComputeCrc (DataIn, 5);
 8000f98:	2105      	movs	r1, #5
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff ffb4 	bl	8000f08 <M24SR_ComputeCrc>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	81fb      	strh	r3, [r7, #14]
    if ( ResCRC != 0x0000)
 8000fa4:	89fb      	ldrh	r3, [r7, #14]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <M24SR_IsCorrectCRC16Residue+0x66>
    {
      /* Bad CRC */
      return M24SR_ERROR_CRC;
 8000faa:	2312      	movs	r3, #18
 8000fac:	e00b      	b.n	8000fc6 <M24SR_IsCorrectCRC16Residue+0x7e>
    }
    else
    {
      /* Good CRC, but error status from M24SR */
      return( ((DataIn[1]<<8) & 0xFF00) | (DataIn[2] & 0x00FF) ); 
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	b21a      	sxth	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3302      	adds	r3, #2
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	b21b      	sxth	r3, r3
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	b29b      	uxth	r3, r3
    }
  }  
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <M24SR_BuildIBlockCommand>:
  * @param     CommandStructure : structure that contain the structure of the command (if the different field are presnet or not 
  * @param     NbByte : number of byte of the command
  * @param     pCommand : pointer of the command created
  */
static void M24SR_BuildIBlockCommand ( uint16_t CommandStructure, C_APDU Command, uint16_t *NbByte , uint8_t *pCommand)
{
 8000fd0:	b084      	sub	sp, #16
 8000fd2:	b590      	push	{r4, r7, lr}
 8000fd4:	b085      	sub	sp, #20
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4604      	mov	r4, r0
 8000fda:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000fde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	80fb      	strh	r3, [r7, #6]
  uint16_t  uCRC16; 
  static uint8_t BlockNumber = 0x01;
  
  (*NbByte) = 0;
 8000fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fe8:	2200      	movs	r2, #0
 8000fea:	801a      	strh	r2, [r3, #0]
  
  /* add the PCD byte */
  if ((CommandStructure & M24SR_PCB_NEEDED) !=0)
 8000fec:	88fb      	ldrh	r3, [r7, #6]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d018      	beq.n	8001028 <M24SR_BuildIBlockCommand+0x58>
  {
    /* toggle the block number */
    BlockNumber = TOGGLE ( BlockNumber );
 8000ff6:	4b6c      	ldr	r3, [pc, #432]	; (80011a8 <M24SR_BuildIBlockCommand+0x1d8>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	bf0c      	ite	eq
 8000ffe:	2301      	moveq	r3, #1
 8001000:	2300      	movne	r3, #0
 8001002:	b2db      	uxtb	r3, r3
 8001004:	461a      	mov	r2, r3
 8001006:	4b68      	ldr	r3, [pc, #416]	; (80011a8 <M24SR_BuildIBlockCommand+0x1d8>)
 8001008:	701a      	strb	r2, [r3, #0]
    /* Add the I block byte */
    pCommand[(*NbByte)++] = 0x02 |  BlockNumber; 
 800100a:	4b67      	ldr	r3, [pc, #412]	; (80011a8 <M24SR_BuildIBlockCommand+0x1d8>)
 800100c:	781a      	ldrb	r2, [r3, #0]
 800100e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	1c59      	adds	r1, r3, #1
 8001014:	b288      	uxth	r0, r1
 8001016:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001018:	8008      	strh	r0, [r1, #0]
 800101a:	4619      	mov	r1, r3
 800101c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800101e:	440b      	add	r3, r1
 8001020:	f042 0202 	orr.w	r2, r2, #2
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	701a      	strb	r2, [r3, #0]
  }
  
  /* add the DID byte */
  if ((BlockNumber & M24SR_DID_NEEDED) !=0)
 8001028:	4b5f      	ldr	r3, [pc, #380]	; (80011a8 <M24SR_BuildIBlockCommand+0x1d8>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	f003 0308 	and.w	r3, r3, #8
 8001030:	2b00      	cmp	r3, #0
 8001032:	d00b      	beq.n	800104c <M24SR_BuildIBlockCommand+0x7c>
  {
    /* Add the I block byte */
    pCommand[(*NbByte)++] = uDIDbyte; 
 8001034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	1c5a      	adds	r2, r3, #1
 800103a:	b291      	uxth	r1, r2
 800103c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800103e:	8011      	strh	r1, [r2, #0]
 8001040:	461a      	mov	r2, r3
 8001042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001044:	4413      	add	r3, r2
 8001046:	4a59      	ldr	r2, [pc, #356]	; (80011ac <M24SR_BuildIBlockCommand+0x1dc>)
 8001048:	7812      	ldrb	r2, [r2, #0]
 800104a:	701a      	strb	r2, [r3, #0]
  }
  
  /* add the Class byte */
  if ((CommandStructure & M24SR_CLA_NEEDED) !=0)
 800104c:	88fb      	ldrh	r3, [r7, #6]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d00b      	beq.n	800106e <M24SR_BuildIBlockCommand+0x9e>
  {
    pCommand[(*NbByte)++] = Command.Header.CLA ;
 8001056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001058:	881b      	ldrh	r3, [r3, #0]
 800105a:	1c5a      	adds	r2, r3, #1
 800105c:	b291      	uxth	r1, r2
 800105e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001060:	8011      	strh	r1, [r2, #0]
 8001062:	461a      	mov	r2, r3
 8001064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001066:	4413      	add	r3, r2
 8001068:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800106c:	701a      	strb	r2, [r3, #0]
  }
  /* add the instruction byte byte */
  if ( (CommandStructure & M24SR_INS_NEEDED) !=0)
 800106e:	88fb      	ldrh	r3, [r7, #6]
 8001070:	f003 0304 	and.w	r3, r3, #4
 8001074:	2b00      	cmp	r3, #0
 8001076:	d00b      	beq.n	8001090 <M24SR_BuildIBlockCommand+0xc0>
  {
    pCommand[(*NbByte)++] = Command.Header.INS ;
 8001078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	1c5a      	adds	r2, r3, #1
 800107e:	b291      	uxth	r1, r2
 8001080:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001082:	8011      	strh	r1, [r2, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001088:	4413      	add	r3, r2
 800108a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800108e:	701a      	strb	r2, [r3, #0]
  }
  /* add the Selection Mode byte */
  if ((CommandStructure & M24SR_P1_NEEDED) !=0)
 8001090:	88fb      	ldrh	r3, [r7, #6]
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	2b00      	cmp	r3, #0
 8001098:	d00b      	beq.n	80010b2 <M24SR_BuildIBlockCommand+0xe2>
  {
    pCommand[(*NbByte)++] = Command.Header.P1 ;
 800109a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	1c5a      	adds	r2, r3, #1
 80010a0:	b291      	uxth	r1, r2
 80010a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010a4:	8011      	strh	r1, [r2, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010aa:	4413      	add	r3, r2
 80010ac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80010b0:	701a      	strb	r2, [r3, #0]
  }
  /* add the Selection Mode byte */
  if ((CommandStructure & M24SR_P2_NEEDED) !=0)
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	f003 0310 	and.w	r3, r3, #16
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d00b      	beq.n	80010d4 <M24SR_BuildIBlockCommand+0x104>
  {
    pCommand[(*NbByte)++] = Command.Header.P2 ;
 80010bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	1c5a      	adds	r2, r3, #1
 80010c2:	b291      	uxth	r1, r2
 80010c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010c6:	8011      	strh	r1, [r2, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010cc:	4413      	add	r3, r2
 80010ce:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80010d2:	701a      	strb	r2, [r3, #0]
  }
  /* add Data field lengthbyte */
  if ((CommandStructure & M24SR_LC_NEEDED) !=0)
 80010d4:	88fb      	ldrh	r3, [r7, #6]
 80010d6:	f003 0320 	and.w	r3, r3, #32
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d00b      	beq.n	80010f6 <M24SR_BuildIBlockCommand+0x126>
  {
    pCommand[(*NbByte)++] = Command.Body.LC ;
 80010de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	1c5a      	adds	r2, r3, #1
 80010e4:	b291      	uxth	r1, r2
 80010e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010e8:	8011      	strh	r1, [r2, #0]
 80010ea:	461a      	mov	r2, r3
 80010ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010ee:	4413      	add	r3, r2
 80010f0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80010f4:	701a      	strb	r2, [r3, #0]
  }
  /* add Data field  */
  if ((CommandStructure & M24SR_DATA_NEEDED) !=0)
 80010f6:	88fb      	ldrh	r3, [r7, #6]
 80010f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d013      	beq.n	8001128 <M24SR_BuildIBlockCommand+0x158>
  {
    memcpy(&(pCommand[(*NbByte)]) ,Command.Body.pData,Command.Body.LC ) ;
 8001100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001108:	4413      	add	r3, r2
 800110a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800110c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001110:	4618      	mov	r0, r3
 8001112:	f011 fedd 	bl	8012ed0 <memcpy>
    (*NbByte) += Command.Body.LC ;
 8001116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001118:	881a      	ldrh	r2, [r3, #0]
 800111a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800111e:	b29b      	uxth	r3, r3
 8001120:	4413      	add	r3, r2
 8001122:	b29a      	uxth	r2, r3
 8001124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001126:	801a      	strh	r2, [r3, #0]
  }
  /* add Le field  */
  if ((CommandStructure & M24SR_LE_NEEDED) !=0)
 8001128:	88fb      	ldrh	r3, [r7, #6]
 800112a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800112e:	2b00      	cmp	r3, #0
 8001130:	d00b      	beq.n	800114a <M24SR_BuildIBlockCommand+0x17a>
  {
    pCommand[(*NbByte)++] = Command.Body.LE ;
 8001132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001134:	881b      	ldrh	r3, [r3, #0]
 8001136:	1c5a      	adds	r2, r3, #1
 8001138:	b291      	uxth	r1, r2
 800113a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800113c:	8011      	strh	r1, [r2, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001142:	4413      	add	r3, r2
 8001144:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001148:	701a      	strb	r2, [r3, #0]
  }
  /* add CRC field  */
  if ((CommandStructure & M24SR_CRC_NEEDED) !=0)
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001150:	2b00      	cmp	r3, #0
 8001152:	d022      	beq.n	800119a <M24SR_BuildIBlockCommand+0x1ca>
  {
    uCRC16 = M24SR_ComputeCrc (pCommand,(uint8_t) (*NbByte));
 8001154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	4619      	mov	r1, r3
 800115c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800115e:	f7ff fed3 	bl	8000f08 <M24SR_ComputeCrc>
 8001162:	4603      	mov	r3, r0
 8001164:	81fb      	strh	r3, [r7, #14]
    /* append the CRC16 */
    pCommand [(*NbByte)++] = GETLSB  (uCRC16 ) ;
 8001166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	1c5a      	adds	r2, r3, #1
 800116c:	b291      	uxth	r1, r2
 800116e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001170:	8011      	strh	r1, [r2, #0]
 8001172:	461a      	mov	r2, r3
 8001174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001176:	4413      	add	r3, r2
 8001178:	89fa      	ldrh	r2, [r7, #14]
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	701a      	strb	r2, [r3, #0]
    pCommand [(*NbByte)++] = GETMSB  (uCRC16 ) ;  
 800117e:	89fb      	ldrh	r3, [r7, #14]
 8001180:	0a1b      	lsrs	r3, r3, #8
 8001182:	b299      	uxth	r1, r3
 8001184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	1c5a      	adds	r2, r3, #1
 800118a:	b290      	uxth	r0, r2
 800118c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800118e:	8010      	strh	r0, [r2, #0]
 8001190:	461a      	mov	r2, r3
 8001192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001194:	4413      	add	r3, r2
 8001196:	b2ca      	uxtb	r2, r1
 8001198:	701a      	strb	r2, [r3, #0]
  } 
}
 800119a:	bf00      	nop
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80011a4:	b004      	add	sp, #16
 80011a6:	4770      	bx	lr
 80011a8:	20000001 	.word	0x20000001
 80011ac:	20000d77 	.word	0x20000d77

080011b0 <IsSBlock>:
* @param    pBuffer    :  pointer of the data
* @retval   M24SR_STATUS_SUCCESS  :  the data is a S-Block
* @retval   M24SR_ERROR_DEFAULT    :  the data is not a S-Block
*/
static uint16_t IsSBlock (uint8_t *pBuffer)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  
  if ((pBuffer[M24SR_OFFSET_PCB] & M24SR_MASK_BLOCK) == M24SR_MASK_SBLOCK)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80011c0:	2bc0      	cmp	r3, #192	; 0xc0
 80011c2:	d101      	bne.n	80011c8 <IsSBlock+0x18>
  {
    return M24SR_STATUS_SUCCESS;
 80011c4:	2300      	movs	r3, #0
 80011c6:	e000      	b.n	80011ca <IsSBlock+0x1a>
  }
  else 
  {  
    return M24SR_ERROR_DEFAULT;
 80011c8:	2310      	movs	r3, #16
  }
  
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <M24SR_FWTExtension>:
  * @param  FWTbyte : FWT value
  * @retval Status (SW1&SW2) : Status of the operation to complete.
  * @retval M24SR_ERROR_TIMEOUT : The I2C timeout occured.
  */
static uint16_t M24SR_FWTExtension (uint16_t DeviceAddr, uint8_t FWTbyte)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b086      	sub	sp, #24
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4603      	mov	r3, r0
 80011de:	460a      	mov	r2, r1
 80011e0:	80fb      	strh	r3, [r7, #6]
 80011e2:	4613      	mov	r3, r2
 80011e4:	717b      	strb	r3, [r7, #5]
  uint8_t   pBuffer[M24SR_STATUSRESPONSE_NBBYTE];
  uint16_t  status ; 
  uint16_t  NthByte = 0,
 80011e6:	2300      	movs	r3, #0
 80011e8:	82fb      	strh	r3, [r7, #22]
  uCRC16;
  
  /* create the response */
  pBuffer[NthByte++] = 0xF2 ;  
 80011ea:	8afb      	ldrh	r3, [r7, #22]
 80011ec:	1c5a      	adds	r2, r3, #1
 80011ee:	82fa      	strh	r2, [r7, #22]
 80011f0:	f107 0218 	add.w	r2, r7, #24
 80011f4:	4413      	add	r3, r2
 80011f6:	22f2      	movs	r2, #242	; 0xf2
 80011f8:	f803 2c0c 	strb.w	r2, [r3, #-12]
  pBuffer[NthByte++] = FWTbyte ;
 80011fc:	8afb      	ldrh	r3, [r7, #22]
 80011fe:	1c5a      	adds	r2, r3, #1
 8001200:	82fa      	strh	r2, [r7, #22]
 8001202:	f107 0218 	add.w	r2, r7, #24
 8001206:	4413      	add	r3, r2
 8001208:	797a      	ldrb	r2, [r7, #5]
 800120a:	f803 2c0c 	strb.w	r2, [r3, #-12]
  /* compute the CRC */
  uCRC16 = M24SR_ComputeCrc (pBuffer,0x02);
 800120e:	f107 030c 	add.w	r3, r7, #12
 8001212:	2102      	movs	r1, #2
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fe77 	bl	8000f08 <M24SR_ComputeCrc>
 800121a:	4603      	mov	r3, r0
 800121c:	82bb      	strh	r3, [r7, #20]
  /* append the CRC16 */
  pBuffer [NthByte++] = GETLSB  (uCRC16 ) ;
 800121e:	8afb      	ldrh	r3, [r7, #22]
 8001220:	1c5a      	adds	r2, r3, #1
 8001222:	82fa      	strh	r2, [r7, #22]
 8001224:	8aba      	ldrh	r2, [r7, #20]
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	f107 0118 	add.w	r1, r7, #24
 800122c:	440b      	add	r3, r1
 800122e:	f803 2c0c 	strb.w	r2, [r3, #-12]
  pBuffer [NthByte++]=   GETMSB  (uCRC16 ) ;  
 8001232:	8abb      	ldrh	r3, [r7, #20]
 8001234:	0a1b      	lsrs	r3, r3, #8
 8001236:	b29a      	uxth	r2, r3
 8001238:	8afb      	ldrh	r3, [r7, #22]
 800123a:	1c59      	adds	r1, r3, #1
 800123c:	82f9      	strh	r1, [r7, #22]
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	f107 0118 	add.w	r1, r7, #24
 8001244:	440b      	add	r3, r1
 8001246:	f803 2c0c 	strb.w	r2, [r3, #-12]
  
  /* send the request */ 
  status = NFC_IO_WriteMultiple(DeviceAddr, pBuffer, NthByte);
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	b2db      	uxtb	r3, r3
 800124e:	8afa      	ldrh	r2, [r7, #22]
 8001250:	f107 010c 	add.w	r1, r7, #12
 8001254:	4618      	mov	r0, r3
 8001256:	f006 fc17 	bl	8007a88 <NFC_IO_WriteMultiple>
 800125a:	4603      	mov	r3, r0
 800125c:	827b      	strh	r3, [r7, #18]
  if (status != NFC_IO_STATUS_SUCCESS)
 800125e:	8a7b      	ldrh	r3, [r7, #18]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <M24SR_FWTExtension+0x92>
  {
    return M24SR_ERROR_TIMEOUT;
 8001264:	2311      	movs	r3, #17
 8001266:	e020      	b.n	80012aa <M24SR_FWTExtension+0xd4>
  } 
  status = M24SR_IsAnswerReady (DeviceAddr);
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	4618      	mov	r0, r3
 800126c:	f000 fd28 	bl	8001cc0 <M24SR_IsAnswerReady>
 8001270:	4603      	mov	r3, r0
 8001272:	827b      	strh	r3, [r7, #18]
  if (status != M24SR_STATUS_SUCCESS)
 8001274:	8a7b      	ldrh	r3, [r7, #18]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <M24SR_FWTExtension+0xa8>
  {
    return status;
 800127a:	8a7b      	ldrh	r3, [r7, #18]
 800127c:	e015      	b.n	80012aa <M24SR_FWTExtension+0xd4>
  } 
  /* read the response */ 
  if ( NFC_IO_ReadMultiple (DeviceAddr , pBuffer,  M24SR_STATUSRESPONSE_NBBYTE) != NFC_IO_STATUS_SUCCESS)
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	f107 010c 	add.w	r1, r7, #12
 8001286:	2205      	movs	r2, #5
 8001288:	4618      	mov	r0, r3
 800128a:	f006 fbd3 	bl	8007a34 <NFC_IO_ReadMultiple>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <M24SR_FWTExtension+0xc2>
  {
    return M24SR_ERROR_TIMEOUT;
 8001294:	2311      	movs	r3, #17
 8001296:	e008      	b.n	80012aa <M24SR_FWTExtension+0xd4>
  } 
  
  status = M24SR_IsCorrectCRC16Residue (pBuffer, M24SR_STATUSRESPONSE_NBBYTE); 
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	2105      	movs	r1, #5
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fe52 	bl	8000f48 <M24SR_IsCorrectCRC16Residue>
 80012a4:	4603      	mov	r3, r0
 80012a6:	827b      	strh	r3, [r7, #18]
  return status;
 80012a8:	8a7b      	ldrh	r3, [r7, #18]
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <M24SR_Init>:
  * @param  DeviceAddr: I2C address of the device
  * @param  GpoMode: M24SR_GPO_POLLING / M24SR_GPO_SYNCHRO / M24SR_GPO_INTERRUPT 
  * @retval None 
  */
void M24SR_Init(uint16_t DeviceAddr, uint8_t GpoMode)
{    
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	460a      	mov	r2, r1
 80012be:	80fb      	strh	r3, [r7, #6]
 80012c0:	4613      	mov	r3, r2
 80012c2:	717b      	strb	r3, [r7, #5]
  uGpoMode = GpoMode;  /* Global variable initialization */
 80012c4:	4a1f      	ldr	r2, [pc, #124]	; (8001344 <M24SR_Init+0x90>)
 80012c6:	797b      	ldrb	r3, [r7, #5]
 80012c8:	7013      	strb	r3, [r2, #0]

  if(uGpoMode == M24SR_GPO_INTERRUPT)
 80012ca:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <M24SR_Init+0x90>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d103      	bne.n	80012da <M24SR_Init+0x26>
  {  
     NFC_IO_Init(0x1);
 80012d2:	2001      	movs	r0, #1
 80012d4:	f006 fb5a 	bl	800798c <NFC_IO_Init>
 80012d8:	e002      	b.n	80012e0 <M24SR_Init+0x2c>
  }
  else
  {
     NFC_IO_Init(0x0);
 80012da:	2000      	movs	r0, #0
 80012dc:	f006 fb56 	bl	800798c <NFC_IO_Init>
  } 

  /* build the command */
  Command.Header.CLA = 0x00;
 80012e0:	4b19      	ldr	r3, [pc, #100]	; (8001348 <M24SR_Init+0x94>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
  Command.Header.INS = 0x00;
 80012e6:	4b18      	ldr	r3, [pc, #96]	; (8001348 <M24SR_Init+0x94>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	705a      	strb	r2, [r3, #1]
  /* copy the offset */
  Command.Header.P1 = 0x00 ;
 80012ec:	4b16      	ldr	r3, [pc, #88]	; (8001348 <M24SR_Init+0x94>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	709a      	strb	r2, [r3, #2]
  Command.Header.P2 = 0x00 ;
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <M24SR_Init+0x94>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	70da      	strb	r2, [r3, #3]
  /* copy the number of byte of the data field */
  Command.Body.LC = 0x00 ;
 80012f8:	4b13      	ldr	r3, [pc, #76]	; (8001348 <M24SR_Init+0x94>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	711a      	strb	r2, [r3, #4]
  /* copy the number of byte to read */
  Command.Body.LE = 0x00 ;
 80012fe:	4b12      	ldr	r3, [pc, #72]	; (8001348 <M24SR_Init+0x94>)
 8001300:	2200      	movs	r2, #0
 8001302:	731a      	strb	r2, [r3, #12]
  Command.Body.pData = DataBuffer; 
 8001304:	4b10      	ldr	r3, [pc, #64]	; (8001348 <M24SR_Init+0x94>)
 8001306:	4a11      	ldr	r2, [pc, #68]	; (800134c <M24SR_Init+0x98>)
 8001308:	609a      	str	r2, [r3, #8]
  
  if((uGpoMode == M24SR_GPO_SYNCHRO) || (uGpoMode == M24SR_GPO_INTERRUPT))
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <M24SR_Init+0x90>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d003      	beq.n	800131a <M24SR_Init+0x66>
 8001312:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <M24SR_Init+0x90>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b02      	cmp	r3, #2
 8001318:	d110      	bne.n	800133c <M24SR_Init+0x88>
  {
    if( M24SR_KillSession(DeviceAddr) == M24SR_ACTION_COMPLETED)
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	4618      	mov	r0, r3
 800131e:	f000 f850 	bl	80013c2 <M24SR_KillSession>
 8001322:	4603      	mov	r3, r0
 8001324:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8001328:	d108      	bne.n	800133c <M24SR_Init+0x88>
    {
      M24SR_ManageI2CGPO(DeviceAddr, I2C_ANSWER_READY);
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	2103      	movs	r1, #3
 800132e:	4618      	mov	r0, r3
 8001330:	f000 fc66 	bl	8001c00 <M24SR_ManageI2CGPO>
      M24SR_Deselect (DeviceAddr);
 8001334:	88fb      	ldrh	r3, [r7, #6]
 8001336:	4618      	mov	r0, r3
 8001338:	f000 f868 	bl	800140c <M24SR_Deselect>
    } 
  }
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000d78 	.word	0x20000d78
 8001348:	20000c68 	.word	0x20000c68
 800134c:	20000c78 	.word	0x20000c78

08001350 <M24SR_GPO_Callback>:
/**
  * @brief  This function initialize the M24SR device
  * @retval None 
  */
void M24SR_GPO_Callback( void )
{    
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  if( uSynchroMode == M24SR_INTERRUPT_GPO)
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <M24SR_GPO_Callback+0x1c>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b04      	cmp	r3, #4
 800135a:	d105      	bne.n	8001368 <M24SR_GPO_Callback+0x18>
  {
	printf("in M24SR_GPO_Callback\n\n");
 800135c:	4804      	ldr	r0, [pc, #16]	; (8001370 <M24SR_GPO_Callback+0x20>)
 800135e:	f012 fabd 	bl	80138dc <puts>
    GPO_Low = 1;
 8001362:	4b04      	ldr	r3, [pc, #16]	; (8001374 <M24SR_GPO_Callback+0x24>)
 8001364:	2201      	movs	r2, #1
 8001366:	701a      	strb	r2, [r3, #0]
  }
}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000000 	.word	0x20000000
 8001370:	08015d78 	.word	0x08015d78
 8001374:	20000d79 	.word	0x20000d79

08001378 <M24SR_GetSession>:
  * @param  DeviceAddr: I2C address of the device
  * @retval M24SR_ACTION_COMPLETED : the function is succesful.
  * @retval Status (SW1&SW2) : if operation does not complete.
  */
uint16_t M24SR_GetSession (uint16_t DeviceAddr)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	80fb      	strh	r3, [r7, #6]
  uint8_t Buffer = M24SR_OPENSESSION;
 8001382:	2326      	movs	r3, #38	; 0x26
 8001384:	73fb      	strb	r3, [r7, #15]
  
  if (NFC_IO_WriteMultiple(DeviceAddr, &Buffer, 0x01 ) != NFC_IO_STATUS_SUCCESS)
 8001386:	88fb      	ldrh	r3, [r7, #6]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	f107 010f 	add.w	r1, r7, #15
 800138e:	2201      	movs	r2, #1
 8001390:	4618      	mov	r0, r3
 8001392:	f006 fb79 	bl	8007a88 <NFC_IO_WriteMultiple>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <M24SR_GetSession+0x28>
  {
    return M24SR_ERROR_TIMEOUT;
 800139c:	2311      	movs	r3, #17
 800139e:	e00c      	b.n	80013ba <M24SR_GetSession+0x42>
  }  
  /* Insure no access will be done just after open session */  
  /* The only way here is to poll I2C to know when M24SR is ready */
  /* GPO can not be use with GetSession command */
  if (NFC_IO_IsDeviceReady(DeviceAddr, NFC_IO_TRIALS) != NFC_IO_STATUS_SUCCESS)
 80013a0:	88fb      	ldrh	r3, [r7, #6]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2101      	movs	r1, #1
 80013a6:	4618      	mov	r0, r3
 80013a8:	f006 fb98 	bl	8007adc <NFC_IO_IsDeviceReady>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <M24SR_GetSession+0x3e>
  {
    return M24SR_ERROR_TIMEOUT;
 80013b2:	2311      	movs	r3, #17
 80013b4:	e001      	b.n	80013ba <M24SR_GetSession+0x42>
  } 
  
  return M24SR_ACTION_COMPLETED;
 80013b6:	f44f 4310 	mov.w	r3, #36864	; 0x9000
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <M24SR_KillSession>:
  * @param  DeviceAddr: I2C address of the device
  * @retval M24SR_ACTION_COMPLETED : the function is succesful. 
  * @retval M24SR_ERROR_TIMEOUT : The I2C timeout occured.
  */
uint16_t M24SR_KillSession (uint16_t DeviceAddr)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b084      	sub	sp, #16
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	4603      	mov	r3, r0
 80013ca:	80fb      	strh	r3, [r7, #6]
  uint8_t pBuffer[] = {M24SR_KILLSESSION};
 80013cc:	2352      	movs	r3, #82	; 0x52
 80013ce:	733b      	strb	r3, [r7, #12]
  
  if (NFC_IO_WriteMultiple(DeviceAddr, pBuffer, 0x01) != NFC_IO_STATUS_SUCCESS)
 80013d0:	88fb      	ldrh	r3, [r7, #6]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	f107 010c 	add.w	r1, r7, #12
 80013d8:	2201      	movs	r2, #1
 80013da:	4618      	mov	r0, r3
 80013dc:	f006 fb54 	bl	8007a88 <NFC_IO_WriteMultiple>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <M24SR_KillSession+0x28>
  {
    return M24SR_ERROR_TIMEOUT;
 80013e6:	2311      	movs	r3, #17
 80013e8:	e00c      	b.n	8001404 <M24SR_KillSession+0x42>
  }   
  /* Insure no access will be done just after open session */  
  /* The only way here is to poll I2C to know when M24SR is ready */
  /* GPO can not be use with KillSession command */ 
  if (NFC_IO_IsDeviceReady(DeviceAddr, NFC_IO_TRIALS) != NFC_IO_STATUS_SUCCESS)
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2101      	movs	r1, #1
 80013f0:	4618      	mov	r0, r3
 80013f2:	f006 fb73 	bl	8007adc <NFC_IO_IsDeviceReady>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <M24SR_KillSession+0x3e>
  {
    return M24SR_ERROR_TIMEOUT;
 80013fc:	2311      	movs	r3, #17
 80013fe:	e001      	b.n	8001404 <M24SR_KillSession+0x42>
  }    
  return M24SR_ACTION_COMPLETED;
 8001400:	f44f 4310 	mov.w	r3, #36864	; 0x9000
}
 8001404:	4618      	mov	r0, r3
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <M24SR_Deselect>:
  * @param  DeviceAddr: I2C address of the device
  * @retval M24SR_ACTION_COMPLETED : the function is succesful. 
  * @retval M24SR_ERROR_TIMEOUT : The I2C timeout occured. 
  */
uint16_t M24SR_Deselect (uint16_t DeviceAddr)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	80fb      	strh	r3, [r7, #6]
  uint8_t   pBuffer[] = {0xC2,0xE0,0xB4} ;
 8001416:	4a1a      	ldr	r2, [pc, #104]	; (8001480 <M24SR_Deselect+0x74>)
 8001418:	f107 0308 	add.w	r3, r7, #8
 800141c:	6812      	ldr	r2, [r2, #0]
 800141e:	4611      	mov	r1, r2
 8001420:	8019      	strh	r1, [r3, #0]
 8001422:	3302      	adds	r3, #2
 8001424:	0c12      	lsrs	r2, r2, #16
 8001426:	701a      	strb	r2, [r3, #0]
  uint16_t  status ; 
  
  /* send the request */ 
  if (NFC_IO_WriteMultiple(DeviceAddr, pBuffer, M24SR_DESELECTREQUEST_NBBYTE) != NFC_IO_STATUS_SUCCESS)
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	b2db      	uxtb	r3, r3
 800142c:	f107 0108 	add.w	r1, r7, #8
 8001430:	2203      	movs	r2, #3
 8001432:	4618      	mov	r0, r3
 8001434:	f006 fb28 	bl	8007a88 <NFC_IO_WriteMultiple>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <M24SR_Deselect+0x36>
  {
    return M24SR_ERROR_TIMEOUT;
 800143e:	2311      	movs	r3, #17
 8001440:	e019      	b.n	8001476 <M24SR_Deselect+0x6a>
  }    
  status = M24SR_IsAnswerReady (DeviceAddr);
 8001442:	88fb      	ldrh	r3, [r7, #6]
 8001444:	4618      	mov	r0, r3
 8001446:	f000 fc3b 	bl	8001cc0 <M24SR_IsAnswerReady>
 800144a:	4603      	mov	r3, r0
 800144c:	81fb      	strh	r3, [r7, #14]
  if (status != M24SR_STATUS_SUCCESS)
 800144e:	89fb      	ldrh	r3, [r7, #14]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <M24SR_Deselect+0x4c>
  {
    return status;
 8001454:	89fb      	ldrh	r3, [r7, #14]
 8001456:	e00e      	b.n	8001476 <M24SR_Deselect+0x6a>
  }  
  /* flush the M24SR buffer */ 
  if (NFC_IO_ReadMultiple (DeviceAddr , pBuffer,  M24SR_DESELECTREQUEST_NBBYTE) != NFC_IO_STATUS_SUCCESS)
 8001458:	88fb      	ldrh	r3, [r7, #6]
 800145a:	b2db      	uxtb	r3, r3
 800145c:	f107 0108 	add.w	r1, r7, #8
 8001460:	2203      	movs	r2, #3
 8001462:	4618      	mov	r0, r3
 8001464:	f006 fae6 	bl	8007a34 <NFC_IO_ReadMultiple>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <M24SR_Deselect+0x66>
  {
    return M24SR_ERROR_TIMEOUT;
 800146e:	2311      	movs	r3, #17
 8001470:	e001      	b.n	8001476 <M24SR_Deselect+0x6a>
  }  
  
  return M24SR_ACTION_COMPLETED;
 8001472:	f44f 4310 	mov.w	r3, #36864	; 0x9000
}
 8001476:	4618      	mov	r0, r3
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	08015d90 	.word	0x08015d90

08001484 <M24SR_SelectApplication>:
  * @param  DeviceAddr: I2C address of the device
  * @retval M24SR_ACTION_COMPLETED : the function is succesful. 
  * @retval M24SR_ERROR_TIMEOUT : The I2C timeout occured.
  */
uint16_t M24SR_SelectApplication (uint16_t DeviceAddr)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08c      	sub	sp, #48	; 0x30
 8001488:	af04      	add	r7, sp, #16
 800148a:	4603      	mov	r3, r0
 800148c:	80fb      	strh	r3, [r7, #6]
  uint8_t   *pBuffer = uM24SRbuffer ,
 800148e:	4b38      	ldr	r3, [pc, #224]	; (8001570 <M24SR_SelectApplication+0xec>)
 8001490:	61fb      	str	r3, [r7, #28]
  NbByteToRead = M24SR_STATUSRESPONSE_NBBYTE;
 8001492:	2305      	movs	r3, #5
 8001494:	76fb      	strb	r3, [r7, #27]
  uint8_t    uLc = 0x07,
 8001496:	2307      	movs	r3, #7
 8001498:	76bb      	strb	r3, [r7, #26]
  pData[] = {0xD2,0x76,0x00,0x00,0x85,0x01,0x01},
 800149a:	4a36      	ldr	r2, [pc, #216]	; (8001574 <M24SR_SelectApplication+0xf0>)
 800149c:	f107 030c 	add.w	r3, r7, #12
 80014a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014a4:	6018      	str	r0, [r3, #0]
 80014a6:	3304      	adds	r3, #4
 80014a8:	8019      	strh	r1, [r3, #0]
 80014aa:	3302      	adds	r3, #2
 80014ac:	0c0a      	lsrs	r2, r1, #16
 80014ae:	701a      	strb	r2, [r3, #0]
  uLe = 0x00;
 80014b0:	2300      	movs	r3, #0
 80014b2:	767b      	strb	r3, [r7, #25]
  uint16_t  status ; 
  uint16_t  uP1P2 =0x0400,
 80014b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014b8:	82fb      	strh	r3, [r7, #22]
  NbByte;
  
  /* build the command */
  Command.Header.CLA = C_APDU_CLA_DEFAULT;
 80014ba:	4b2f      	ldr	r3, [pc, #188]	; (8001578 <M24SR_SelectApplication+0xf4>)
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]
  Command.Header.INS = C_APDU_SELECT_FILE;
 80014c0:	4b2d      	ldr	r3, [pc, #180]	; (8001578 <M24SR_SelectApplication+0xf4>)
 80014c2:	22a4      	movs	r2, #164	; 0xa4
 80014c4:	705a      	strb	r2, [r3, #1]
  /* copy the offset */
  Command.Header.P1 = GETMSB  (uP1P2 ) ;
 80014c6:	8afb      	ldrh	r3, [r7, #22]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4b2a      	ldr	r3, [pc, #168]	; (8001578 <M24SR_SelectApplication+0xf4>)
 80014d0:	709a      	strb	r2, [r3, #2]
  Command.Header.P2 = GETLSB  (uP1P2 ) ;
 80014d2:	8afb      	ldrh	r3, [r7, #22]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4b28      	ldr	r3, [pc, #160]	; (8001578 <M24SR_SelectApplication+0xf4>)
 80014d8:	70da      	strb	r2, [r3, #3]
  /* copy the number of byte of the data field */
  Command.Body.LC = uLc ;
 80014da:	4a27      	ldr	r2, [pc, #156]	; (8001578 <M24SR_SelectApplication+0xf4>)
 80014dc:	7ebb      	ldrb	r3, [r7, #26]
 80014de:	7113      	strb	r3, [r2, #4]
  /* copy the data */
  memcpy(Command.Body.pData, pData, uLc);
 80014e0:	4b25      	ldr	r3, [pc, #148]	; (8001578 <M24SR_SelectApplication+0xf4>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	7eba      	ldrb	r2, [r7, #26]
 80014e6:	f107 010c 	add.w	r1, r7, #12
 80014ea:	4618      	mov	r0, r3
 80014ec:	f011 fcf0 	bl	8012ed0 <memcpy>
  /* copy the number of byte to read */
  Command.Body.LE = uLe ;
 80014f0:	4a21      	ldr	r2, [pc, #132]	; (8001578 <M24SR_SelectApplication+0xf4>)
 80014f2:	7e7b      	ldrb	r3, [r7, #25]
 80014f4:	7313      	strb	r3, [r2, #12]
  /* build the I�C command */
  M24SR_BuildIBlockCommand ( M24SR_CMDSTRUCT_SELECTAPPLICATION,  Command, &NbByte , pBuffer);
 80014f6:	4b20      	ldr	r3, [pc, #128]	; (8001578 <M24SR_SelectApplication+0xf4>)
 80014f8:	69fa      	ldr	r2, [r7, #28]
 80014fa:	9202      	str	r2, [sp, #8]
 80014fc:	f107 020a 	add.w	r2, r7, #10
 8001500:	9201      	str	r2, [sp, #4]
 8001502:	68da      	ldr	r2, [r3, #12]
 8001504:	9200      	str	r2, [sp, #0]
 8001506:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001508:	f240 10ff 	movw	r0, #511	; 0x1ff
 800150c:	f7ff fd60 	bl	8000fd0 <M24SR_BuildIBlockCommand>
  
  /* send the request */ 
  if (NFC_IO_WriteMultiple(DeviceAddr, pBuffer, NbByte) != NFC_IO_STATUS_SUCCESS)
 8001510:	88fb      	ldrh	r3, [r7, #6]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	897a      	ldrh	r2, [r7, #10]
 8001516:	69f9      	ldr	r1, [r7, #28]
 8001518:	4618      	mov	r0, r3
 800151a:	f006 fab5 	bl	8007a88 <NFC_IO_WriteMultiple>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <M24SR_SelectApplication+0xa4>
  {
    return M24SR_ERROR_TIMEOUT;
 8001524:	2311      	movs	r3, #17
 8001526:	e01f      	b.n	8001568 <M24SR_SelectApplication+0xe4>
  } 
  status = M24SR_IsAnswerReady (DeviceAddr);
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	4618      	mov	r0, r3
 800152c:	f000 fbc8 	bl	8001cc0 <M24SR_IsAnswerReady>
 8001530:	4603      	mov	r3, r0
 8001532:	82bb      	strh	r3, [r7, #20]
  if (status != M24SR_STATUS_SUCCESS)
 8001534:	8abb      	ldrh	r3, [r7, #20]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <M24SR_SelectApplication+0xba>
  {
    return status;
 800153a:	8abb      	ldrh	r3, [r7, #20]
 800153c:	e014      	b.n	8001568 <M24SR_SelectApplication+0xe4>
  }  
  /* read the response */ 
  if (NFC_IO_ReadMultiple (DeviceAddr , pBuffer,  NbByteToRead) != NFC_IO_STATUS_SUCCESS)
 800153e:	88fb      	ldrh	r3, [r7, #6]
 8001540:	b2db      	uxtb	r3, r3
 8001542:	7efa      	ldrb	r2, [r7, #27]
 8001544:	b292      	uxth	r2, r2
 8001546:	69f9      	ldr	r1, [r7, #28]
 8001548:	4618      	mov	r0, r3
 800154a:	f006 fa73 	bl	8007a34 <NFC_IO_ReadMultiple>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <M24SR_SelectApplication+0xd4>
  {
    return M24SR_ERROR_TIMEOUT;
 8001554:	2311      	movs	r3, #17
 8001556:	e007      	b.n	8001568 <M24SR_SelectApplication+0xe4>
  }   
  status = M24SR_IsCorrectCRC16Residue (pBuffer,NbByteToRead); 
 8001558:	7efb      	ldrb	r3, [r7, #27]
 800155a:	4619      	mov	r1, r3
 800155c:	69f8      	ldr	r0, [r7, #28]
 800155e:	f7ff fcf3 	bl	8000f48 <M24SR_IsCorrectCRC16Residue>
 8001562:	4603      	mov	r3, r0
 8001564:	82bb      	strh	r3, [r7, #20]
  return status;
 8001566:	8abb      	ldrh	r3, [r7, #20]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3720      	adds	r7, #32
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20001938 	.word	0x20001938
 8001574:	08015d94 	.word	0x08015d94
 8001578:	20000c68 	.word	0x20000c68

0800157c <M24SR_SelectCCfile>:
  * @retval M24SR_ACTION_COMPLETED : the function is succesful. 
  * @retval M24SR_ERROR_TIMEOUT : The I2C timeout occured.
  * @retval Status (SW1&SW2) : if operation does not complete for another reason.
  */
uint16_t M24SR_SelectCCfile (uint16_t DeviceAddr)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af04      	add	r7, sp, #16
 8001582:	4603      	mov	r3, r0
 8001584:	80fb      	strh	r3, [r7, #6]
  uint8_t   *pBuffer = uM24SRbuffer ,
 8001586:	4b34      	ldr	r3, [pc, #208]	; (8001658 <M24SR_SelectCCfile+0xdc>)
 8001588:	617b      	str	r3, [r7, #20]
  NbByteToRead = M24SR_STATUSRESPONSE_NBBYTE;
 800158a:	2305      	movs	r3, #5
 800158c:	74fb      	strb	r3, [r7, #19]
  uint8_t    uLc = 0x02;
 800158e:	2302      	movs	r3, #2
 8001590:	74bb      	strb	r3, [r7, #18]
  uint16_t  status ; 
  uint16_t  uP1P2 =0x000C,
 8001592:	230c      	movs	r3, #12
 8001594:	823b      	strh	r3, [r7, #16]
  uNbFileId =CC_FILE_ID,
 8001596:	f24e 1303 	movw	r3, #57603	; 0xe103
 800159a:	81fb      	strh	r3, [r7, #14]
  NbByte;
  
  /* build the command */
  Command.Header.CLA = C_APDU_CLA_DEFAULT;
 800159c:	4b2f      	ldr	r3, [pc, #188]	; (800165c <M24SR_SelectCCfile+0xe0>)
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
  Command.Header.INS = C_APDU_SELECT_FILE;
 80015a2:	4b2e      	ldr	r3, [pc, #184]	; (800165c <M24SR_SelectCCfile+0xe0>)
 80015a4:	22a4      	movs	r2, #164	; 0xa4
 80015a6:	705a      	strb	r2, [r3, #1]
  /* copy the offset */
  Command.Header.P1 = GETMSB  (uP1P2 ) ;
 80015a8:	8a3b      	ldrh	r3, [r7, #16]
 80015aa:	0a1b      	lsrs	r3, r3, #8
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	4b2a      	ldr	r3, [pc, #168]	; (800165c <M24SR_SelectCCfile+0xe0>)
 80015b2:	709a      	strb	r2, [r3, #2]
  Command.Header.P2 = GETLSB  (uP1P2 ) ;
 80015b4:	8a3b      	ldrh	r3, [r7, #16]
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	4b28      	ldr	r3, [pc, #160]	; (800165c <M24SR_SelectCCfile+0xe0>)
 80015ba:	70da      	strb	r2, [r3, #3]
  /* copy the number of byte of the data field */
  Command.Body.LC = uLc ;
 80015bc:	4a27      	ldr	r2, [pc, #156]	; (800165c <M24SR_SelectCCfile+0xe0>)
 80015be:	7cbb      	ldrb	r3, [r7, #18]
 80015c0:	7113      	strb	r3, [r2, #4]
  /* copy the File Id */
  Command.Body.pData[0] = GETMSB  (uNbFileId ) ;
 80015c2:	89fb      	ldrh	r3, [r7, #14]
 80015c4:	0a1b      	lsrs	r3, r3, #8
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	4b24      	ldr	r3, [pc, #144]	; (800165c <M24SR_SelectCCfile+0xe0>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	701a      	strb	r2, [r3, #0]
  Command.Body.pData[1] = GETLSB  (uNbFileId ) ;
 80015d0:	4b22      	ldr	r3, [pc, #136]	; (800165c <M24SR_SelectCCfile+0xe0>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	3301      	adds	r3, #1
 80015d6:	89fa      	ldrh	r2, [r7, #14]
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	701a      	strb	r2, [r3, #0]
  /* build the I�C command */
  M24SR_BuildIBlockCommand ( M24SR_CMDSTRUCT_SELECTCCFILE,  Command, &NbByte , pBuffer);
 80015dc:	4b1f      	ldr	r3, [pc, #124]	; (800165c <M24SR_SelectCCfile+0xe0>)
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	9202      	str	r2, [sp, #8]
 80015e2:	f107 020a 	add.w	r2, r7, #10
 80015e6:	9201      	str	r2, [sp, #4]
 80015e8:	68da      	ldr	r2, [r3, #12]
 80015ea:	9200      	str	r2, [sp, #0]
 80015ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015ee:	f240 107f 	movw	r0, #383	; 0x17f
 80015f2:	f7ff fced 	bl	8000fd0 <M24SR_BuildIBlockCommand>
  
  /* send the request */ 
  if (NFC_IO_WriteMultiple(DeviceAddr, pBuffer, NbByte) != NFC_IO_STATUS_SUCCESS)
 80015f6:	88fb      	ldrh	r3, [r7, #6]
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	897a      	ldrh	r2, [r7, #10]
 80015fc:	6979      	ldr	r1, [r7, #20]
 80015fe:	4618      	mov	r0, r3
 8001600:	f006 fa42 	bl	8007a88 <NFC_IO_WriteMultiple>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <M24SR_SelectCCfile+0x92>
  {
    return M24SR_ERROR_TIMEOUT;
 800160a:	2311      	movs	r3, #17
 800160c:	e01f      	b.n	800164e <M24SR_SelectCCfile+0xd2>
  } 
  status = M24SR_IsAnswerReady (DeviceAddr);
 800160e:	88fb      	ldrh	r3, [r7, #6]
 8001610:	4618      	mov	r0, r3
 8001612:	f000 fb55 	bl	8001cc0 <M24SR_IsAnswerReady>
 8001616:	4603      	mov	r3, r0
 8001618:	81bb      	strh	r3, [r7, #12]
  if (status != M24SR_STATUS_SUCCESS)
 800161a:	89bb      	ldrh	r3, [r7, #12]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <M24SR_SelectCCfile+0xa8>
  {
    return status;
 8001620:	89bb      	ldrh	r3, [r7, #12]
 8001622:	e014      	b.n	800164e <M24SR_SelectCCfile+0xd2>
  } 
  /* read the response */ 
  if (NFC_IO_ReadMultiple (DeviceAddr , pBuffer,  NbByteToRead) != NFC_IO_STATUS_SUCCESS)
 8001624:	88fb      	ldrh	r3, [r7, #6]
 8001626:	b2db      	uxtb	r3, r3
 8001628:	7cfa      	ldrb	r2, [r7, #19]
 800162a:	b292      	uxth	r2, r2
 800162c:	6979      	ldr	r1, [r7, #20]
 800162e:	4618      	mov	r0, r3
 8001630:	f006 fa00 	bl	8007a34 <NFC_IO_ReadMultiple>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <M24SR_SelectCCfile+0xc2>
  {
    return M24SR_ERROR_TIMEOUT;
 800163a:	2311      	movs	r3, #17
 800163c:	e007      	b.n	800164e <M24SR_SelectCCfile+0xd2>
  } 
  
  status = M24SR_IsCorrectCRC16Residue (pBuffer,NbByteToRead); 
 800163e:	7cfb      	ldrb	r3, [r7, #19]
 8001640:	4619      	mov	r1, r3
 8001642:	6978      	ldr	r0, [r7, #20]
 8001644:	f7ff fc80 	bl	8000f48 <M24SR_IsCorrectCRC16Residue>
 8001648:	4603      	mov	r3, r0
 800164a:	81bb      	strh	r3, [r7, #12]
  return status; 
 800164c:	89bb      	ldrh	r3, [r7, #12]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20001938 	.word	0x20001938
 800165c:	20000c68 	.word	0x20000c68

08001660 <M24SR_SelectSystemfile>:
  * @param  DeviceAddr: I2C address of the device
  * @retval Status (SW1&SW2) : Status of the operation to complete.
  * @retval M24SR_ERROR_TIMEOUT : The I2C timeout occured.
  */
uint16_t M24SR_SelectSystemfile (uint16_t DeviceAddr)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08a      	sub	sp, #40	; 0x28
 8001664:	af04      	add	r7, sp, #16
 8001666:	4603      	mov	r3, r0
 8001668:	80fb      	strh	r3, [r7, #6]
  uint8_t   *pBuffer = uM24SRbuffer ,
 800166a:	4b34      	ldr	r3, [pc, #208]	; (800173c <M24SR_SelectSystemfile+0xdc>)
 800166c:	617b      	str	r3, [r7, #20]
  NbByteToRead = M24SR_STATUSRESPONSE_NBBYTE;
 800166e:	2305      	movs	r3, #5
 8001670:	74fb      	strb	r3, [r7, #19]
  uint8_t    uLc = 0x02;
 8001672:	2302      	movs	r3, #2
 8001674:	74bb      	strb	r3, [r7, #18]
  uint16_t  status ; 
  uint16_t  uP1P2 =0x000C,
 8001676:	230c      	movs	r3, #12
 8001678:	823b      	strh	r3, [r7, #16]
  uNbFileId =SYSTEM_FILE_ID,
 800167a:	f24e 1301 	movw	r3, #57601	; 0xe101
 800167e:	81fb      	strh	r3, [r7, #14]
  NbByte;
  
  /* build the command */
  Command.Header.CLA = C_APDU_CLA_DEFAULT;
 8001680:	4b2f      	ldr	r3, [pc, #188]	; (8001740 <M24SR_SelectSystemfile+0xe0>)
 8001682:	2200      	movs	r2, #0
 8001684:	701a      	strb	r2, [r3, #0]
  Command.Header.INS = C_APDU_SELECT_FILE;
 8001686:	4b2e      	ldr	r3, [pc, #184]	; (8001740 <M24SR_SelectSystemfile+0xe0>)
 8001688:	22a4      	movs	r2, #164	; 0xa4
 800168a:	705a      	strb	r2, [r3, #1]
  /* copy the offset */
  Command.Header.P1 = GETMSB  (uP1P2 ) ;
 800168c:	8a3b      	ldrh	r3, [r7, #16]
 800168e:	0a1b      	lsrs	r3, r3, #8
 8001690:	b29b      	uxth	r3, r3
 8001692:	b2da      	uxtb	r2, r3
 8001694:	4b2a      	ldr	r3, [pc, #168]	; (8001740 <M24SR_SelectSystemfile+0xe0>)
 8001696:	709a      	strb	r2, [r3, #2]
  Command.Header.P2 = GETLSB  (uP1P2 ) ;
 8001698:	8a3b      	ldrh	r3, [r7, #16]
 800169a:	b2da      	uxtb	r2, r3
 800169c:	4b28      	ldr	r3, [pc, #160]	; (8001740 <M24SR_SelectSystemfile+0xe0>)
 800169e:	70da      	strb	r2, [r3, #3]
  /* copy the number of byte of the data field */
  Command.Body.LC = uLc ;
 80016a0:	4a27      	ldr	r2, [pc, #156]	; (8001740 <M24SR_SelectSystemfile+0xe0>)
 80016a2:	7cbb      	ldrb	r3, [r7, #18]
 80016a4:	7113      	strb	r3, [r2, #4]
  /* copy the File Id */
  Command.Body.pData[0] = GETMSB  (uNbFileId ) ;
 80016a6:	89fb      	ldrh	r3, [r7, #14]
 80016a8:	0a1b      	lsrs	r3, r3, #8
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	4b24      	ldr	r3, [pc, #144]	; (8001740 <M24SR_SelectSystemfile+0xe0>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	701a      	strb	r2, [r3, #0]
  Command.Body.pData[1] = GETLSB  (uNbFileId ) ;
 80016b4:	4b22      	ldr	r3, [pc, #136]	; (8001740 <M24SR_SelectSystemfile+0xe0>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	3301      	adds	r3, #1
 80016ba:	89fa      	ldrh	r2, [r7, #14]
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	701a      	strb	r2, [r3, #0]
  /* build the I�C command */
  M24SR_BuildIBlockCommand ( M24SR_CMDSTRUCT_SELECTCCFILE,  Command, &NbByte , pBuffer);
 80016c0:	4b1f      	ldr	r3, [pc, #124]	; (8001740 <M24SR_SelectSystemfile+0xe0>)
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	9202      	str	r2, [sp, #8]
 80016c6:	f107 020a 	add.w	r2, r7, #10
 80016ca:	9201      	str	r2, [sp, #4]
 80016cc:	68da      	ldr	r2, [r3, #12]
 80016ce:	9200      	str	r2, [sp, #0]
 80016d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016d2:	f240 107f 	movw	r0, #383	; 0x17f
 80016d6:	f7ff fc7b 	bl	8000fd0 <M24SR_BuildIBlockCommand>
  
  /* send the request */ 
  if (NFC_IO_WriteMultiple(DeviceAddr, pBuffer, NbByte) != NFC_IO_STATUS_SUCCESS)
 80016da:	88fb      	ldrh	r3, [r7, #6]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	897a      	ldrh	r2, [r7, #10]
 80016e0:	6979      	ldr	r1, [r7, #20]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f006 f9d0 	bl	8007a88 <NFC_IO_WriteMultiple>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <M24SR_SelectSystemfile+0x92>
  {
    return M24SR_ERROR_TIMEOUT;
 80016ee:	2311      	movs	r3, #17
 80016f0:	e01f      	b.n	8001732 <M24SR_SelectSystemfile+0xd2>
  } 
  status = M24SR_IsAnswerReady (DeviceAddr);
 80016f2:	88fb      	ldrh	r3, [r7, #6]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 fae3 	bl	8001cc0 <M24SR_IsAnswerReady>
 80016fa:	4603      	mov	r3, r0
 80016fc:	81bb      	strh	r3, [r7, #12]
  if (status != M24SR_STATUS_SUCCESS)
 80016fe:	89bb      	ldrh	r3, [r7, #12]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <M24SR_SelectSystemfile+0xa8>
  {
    return status;
 8001704:	89bb      	ldrh	r3, [r7, #12]
 8001706:	e014      	b.n	8001732 <M24SR_SelectSystemfile+0xd2>
  } 
  /* read the response */ 
  if (NFC_IO_ReadMultiple (DeviceAddr , pBuffer,  NbByteToRead) != NFC_IO_STATUS_SUCCESS)
 8001708:	88fb      	ldrh	r3, [r7, #6]
 800170a:	b2db      	uxtb	r3, r3
 800170c:	7cfa      	ldrb	r2, [r7, #19]
 800170e:	b292      	uxth	r2, r2
 8001710:	6979      	ldr	r1, [r7, #20]
 8001712:	4618      	mov	r0, r3
 8001714:	f006 f98e 	bl	8007a34 <NFC_IO_ReadMultiple>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <M24SR_SelectSystemfile+0xc2>
  {
    return M24SR_ERROR_TIMEOUT;
 800171e:	2311      	movs	r3, #17
 8001720:	e007      	b.n	8001732 <M24SR_SelectSystemfile+0xd2>
  } 
  
  status = M24SR_IsCorrectCRC16Residue (pBuffer,NbByteToRead); 
 8001722:	7cfb      	ldrb	r3, [r7, #19]
 8001724:	4619      	mov	r1, r3
 8001726:	6978      	ldr	r0, [r7, #20]
 8001728:	f7ff fc0e 	bl	8000f48 <M24SR_IsCorrectCRC16Residue>
 800172c:	4603      	mov	r3, r0
 800172e:	81bb      	strh	r3, [r7, #12]
  return status;
 8001730:	89bb      	ldrh	r3, [r7, #12]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20001938 	.word	0x20001938
 8001740:	20000c68 	.word	0x20000c68

08001744 <M24SR_SelectNDEFfile>:
  * @param  NDEFfileId: NDEF identification to select NDEF in M24SR
  * @retval Status (SW1&SW2) : Status of the operation to complete.
  * @retval M24SR_ERROR_TIMEOUT : The I2C timeout occured.
  */
uint16_t M24SR_SelectNDEFfile (uint16_t DeviceAddr, uint16_t NDEFfileId)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08a      	sub	sp, #40	; 0x28
 8001748:	af04      	add	r7, sp, #16
 800174a:	4603      	mov	r3, r0
 800174c:	460a      	mov	r2, r1
 800174e:	80fb      	strh	r3, [r7, #6]
 8001750:	4613      	mov	r3, r2
 8001752:	80bb      	strh	r3, [r7, #4]
  uint8_t   *pBuffer = uM24SRbuffer ,
 8001754:	4b32      	ldr	r3, [pc, #200]	; (8001820 <M24SR_SelectNDEFfile+0xdc>)
 8001756:	617b      	str	r3, [r7, #20]
  NbByteToRead = M24SR_STATUSRESPONSE_NBBYTE;
 8001758:	2305      	movs	r3, #5
 800175a:	74fb      	strb	r3, [r7, #19]
  uint8_t    uLc = 0x02;
 800175c:	2302      	movs	r3, #2
 800175e:	74bb      	strb	r3, [r7, #18]
  uint16_t  status ; 
  uint16_t  uP1P2 =0x000C,
 8001760:	230c      	movs	r3, #12
 8001762:	823b      	strh	r3, [r7, #16]
  NbByte;
  
  /* build the command */
  Command.Header.CLA = C_APDU_CLA_DEFAULT;
 8001764:	4b2f      	ldr	r3, [pc, #188]	; (8001824 <M24SR_SelectNDEFfile+0xe0>)
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
  Command.Header.INS = C_APDU_SELECT_FILE;
 800176a:	4b2e      	ldr	r3, [pc, #184]	; (8001824 <M24SR_SelectNDEFfile+0xe0>)
 800176c:	22a4      	movs	r2, #164	; 0xa4
 800176e:	705a      	strb	r2, [r3, #1]
  /* copy the offset */
  Command.Header.P1 = GETMSB  (uP1P2 ) ;
 8001770:	8a3b      	ldrh	r3, [r7, #16]
 8001772:	0a1b      	lsrs	r3, r3, #8
 8001774:	b29b      	uxth	r3, r3
 8001776:	b2da      	uxtb	r2, r3
 8001778:	4b2a      	ldr	r3, [pc, #168]	; (8001824 <M24SR_SelectNDEFfile+0xe0>)
 800177a:	709a      	strb	r2, [r3, #2]
  Command.Header.P2 = GETLSB  (uP1P2 ) ;
 800177c:	8a3b      	ldrh	r3, [r7, #16]
 800177e:	b2da      	uxtb	r2, r3
 8001780:	4b28      	ldr	r3, [pc, #160]	; (8001824 <M24SR_SelectNDEFfile+0xe0>)
 8001782:	70da      	strb	r2, [r3, #3]
  /* copy the number of byte of the data field */
  Command.Body.LC = uLc ;
 8001784:	4a27      	ldr	r2, [pc, #156]	; (8001824 <M24SR_SelectNDEFfile+0xe0>)
 8001786:	7cbb      	ldrb	r3, [r7, #18]
 8001788:	7113      	strb	r3, [r2, #4]
  /* copy the offset */
  Command.Body.pData[0] = GETMSB  (NDEFfileId ) ;
 800178a:	88bb      	ldrh	r3, [r7, #4]
 800178c:	0a1b      	lsrs	r3, r3, #8
 800178e:	b29a      	uxth	r2, r3
 8001790:	4b24      	ldr	r3, [pc, #144]	; (8001824 <M24SR_SelectNDEFfile+0xe0>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	b2d2      	uxtb	r2, r2
 8001796:	701a      	strb	r2, [r3, #0]
  Command.Body.pData[1] = GETLSB  (NDEFfileId ) ;
 8001798:	4b22      	ldr	r3, [pc, #136]	; (8001824 <M24SR_SelectNDEFfile+0xe0>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	3301      	adds	r3, #1
 800179e:	88ba      	ldrh	r2, [r7, #4]
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	701a      	strb	r2, [r3, #0]
  /* build the I�C command */
  M24SR_BuildIBlockCommand ( M24SR_CMDSTRUCT_SELECTNDEFFILE,  Command, &NbByte , pBuffer);
 80017a4:	4b1f      	ldr	r3, [pc, #124]	; (8001824 <M24SR_SelectNDEFfile+0xe0>)
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	9202      	str	r2, [sp, #8]
 80017aa:	f107 020c 	add.w	r2, r7, #12
 80017ae:	9201      	str	r2, [sp, #4]
 80017b0:	68da      	ldr	r2, [r3, #12]
 80017b2:	9200      	str	r2, [sp, #0]
 80017b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017b6:	f240 107f 	movw	r0, #383	; 0x17f
 80017ba:	f7ff fc09 	bl	8000fd0 <M24SR_BuildIBlockCommand>
  
  /* send the request */ 
  if (NFC_IO_WriteMultiple(DeviceAddr, pBuffer, NbByte) != NFC_IO_STATUS_SUCCESS)
 80017be:	88fb      	ldrh	r3, [r7, #6]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	89ba      	ldrh	r2, [r7, #12]
 80017c4:	6979      	ldr	r1, [r7, #20]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f006 f95e 	bl	8007a88 <NFC_IO_WriteMultiple>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <M24SR_SelectNDEFfile+0x92>
  {
    return M24SR_ERROR_TIMEOUT;
 80017d2:	2311      	movs	r3, #17
 80017d4:	e01f      	b.n	8001816 <M24SR_SelectNDEFfile+0xd2>
  } 
  status = M24SR_IsAnswerReady (DeviceAddr);
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 fa71 	bl	8001cc0 <M24SR_IsAnswerReady>
 80017de:	4603      	mov	r3, r0
 80017e0:	81fb      	strh	r3, [r7, #14]
  if (status != M24SR_STATUS_SUCCESS)
 80017e2:	89fb      	ldrh	r3, [r7, #14]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <M24SR_SelectNDEFfile+0xa8>
  {
    return status;
 80017e8:	89fb      	ldrh	r3, [r7, #14]
 80017ea:	e014      	b.n	8001816 <M24SR_SelectNDEFfile+0xd2>
  } 
  /* read the response */ 
  if (NFC_IO_ReadMultiple (DeviceAddr , pBuffer,  NbByteToRead) != NFC_IO_STATUS_SUCCESS)
 80017ec:	88fb      	ldrh	r3, [r7, #6]
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	7cfa      	ldrb	r2, [r7, #19]
 80017f2:	b292      	uxth	r2, r2
 80017f4:	6979      	ldr	r1, [r7, #20]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f006 f91c 	bl	8007a34 <NFC_IO_ReadMultiple>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <M24SR_SelectNDEFfile+0xc2>
  {
    return M24SR_ERROR_TIMEOUT;
 8001802:	2311      	movs	r3, #17
 8001804:	e007      	b.n	8001816 <M24SR_SelectNDEFfile+0xd2>
  } 
  
  status = M24SR_IsCorrectCRC16Residue (pBuffer,NbByteToRead); 
 8001806:	7cfb      	ldrb	r3, [r7, #19]
 8001808:	4619      	mov	r1, r3
 800180a:	6978      	ldr	r0, [r7, #20]
 800180c:	f7ff fb9c 	bl	8000f48 <M24SR_IsCorrectCRC16Residue>
 8001810:	4603      	mov	r3, r0
 8001812:	81fb      	strh	r3, [r7, #14]
  return status;
 8001814:	89fb      	ldrh	r3, [r7, #14]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20001938 	.word	0x20001938
 8001824:	20000c68 	.word	0x20000c68

08001828 <M24SR_ReadBinary>:
  * @param  pBufferRead : pointer of the buffer read from the M24SR device
  * @retval Status (SW1&SW2) : Status of the operation to complete.
  * @retval M24SR_ERROR_TIMEOUT : The I2C timeout occured.
  */
uint16_t M24SR_ReadBinary (uint16_t DeviceAddr, uint16_t Offset ,uint8_t NbByteToRead , uint8_t *pBufferRead)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	; 0x28
 800182c:	af04      	add	r7, sp, #16
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	4603      	mov	r3, r0
 8001832:	81fb      	strh	r3, [r7, #14]
 8001834:	460b      	mov	r3, r1
 8001836:	81bb      	strh	r3, [r7, #12]
 8001838:	4613      	mov	r3, r2
 800183a:	72fb      	strb	r3, [r7, #11]
  uint8_t   *pBuffer = uM24SRbuffer ;
 800183c:	4b30      	ldr	r3, [pc, #192]	; (8001900 <M24SR_ReadBinary+0xd8>)
 800183e:	617b      	str	r3, [r7, #20]
  uint16_t  status ; 
  uint16_t  NbByte;
  
  /* build the command */
  Command.Header.CLA = C_APDU_CLA_DEFAULT;
 8001840:	4b30      	ldr	r3, [pc, #192]	; (8001904 <M24SR_ReadBinary+0xdc>)
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]
  Command.Header.INS = C_APDU_READ_BINARY;
 8001846:	4b2f      	ldr	r3, [pc, #188]	; (8001904 <M24SR_ReadBinary+0xdc>)
 8001848:	22b0      	movs	r2, #176	; 0xb0
 800184a:	705a      	strb	r2, [r3, #1]
  /* copy the offset */
  Command.Header.P1 = GETMSB  (Offset ) ;
 800184c:	89bb      	ldrh	r3, [r7, #12]
 800184e:	0a1b      	lsrs	r3, r3, #8
 8001850:	b29b      	uxth	r3, r3
 8001852:	b2da      	uxtb	r2, r3
 8001854:	4b2b      	ldr	r3, [pc, #172]	; (8001904 <M24SR_ReadBinary+0xdc>)
 8001856:	709a      	strb	r2, [r3, #2]
  Command.Header.P2 = GETLSB  (Offset ) ;
 8001858:	89bb      	ldrh	r3, [r7, #12]
 800185a:	b2da      	uxtb	r2, r3
 800185c:	4b29      	ldr	r3, [pc, #164]	; (8001904 <M24SR_ReadBinary+0xdc>)
 800185e:	70da      	strb	r2, [r3, #3]
  /* copy the number of byte to read */
  Command.Body.LE = NbByteToRead ;
 8001860:	4a28      	ldr	r2, [pc, #160]	; (8001904 <M24SR_ReadBinary+0xdc>)
 8001862:	7afb      	ldrb	r3, [r7, #11]
 8001864:	7313      	strb	r3, [r2, #12]
  
  M24SR_BuildIBlockCommand ( M24SR_CMDSTRUCT_READBINARY,  Command, &NbByte , pBuffer);
 8001866:	4b27      	ldr	r3, [pc, #156]	; (8001904 <M24SR_ReadBinary+0xdc>)
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	9202      	str	r2, [sp, #8]
 800186c:	f107 0210 	add.w	r2, r7, #16
 8001870:	9201      	str	r2, [sp, #4]
 8001872:	68da      	ldr	r2, [r3, #12]
 8001874:	9200      	str	r2, [sp, #0]
 8001876:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001878:	f240 109f 	movw	r0, #415	; 0x19f
 800187c:	f7ff fba8 	bl	8000fd0 <M24SR_BuildIBlockCommand>
  
  status = NFC_IO_WriteMultiple(DeviceAddr, pBuffer, NbByte);
 8001880:	89fb      	ldrh	r3, [r7, #14]
 8001882:	b2db      	uxtb	r3, r3
 8001884:	8a3a      	ldrh	r2, [r7, #16]
 8001886:	6979      	ldr	r1, [r7, #20]
 8001888:	4618      	mov	r0, r3
 800188a:	f006 f8fd 	bl	8007a88 <NFC_IO_WriteMultiple>
 800188e:	4603      	mov	r3, r0
 8001890:	827b      	strh	r3, [r7, #18]
  if (status != NFC_IO_STATUS_SUCCESS)
 8001892:	8a7b      	ldrh	r3, [r7, #18]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <M24SR_ReadBinary+0x74>
  {
    return M24SR_ERROR_TIMEOUT;
 8001898:	2311      	movs	r3, #17
 800189a:	e02c      	b.n	80018f6 <M24SR_ReadBinary+0xce>
  } 
  status = M24SR_IsAnswerReady (DeviceAddr);
 800189c:	89fb      	ldrh	r3, [r7, #14]
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 fa0e 	bl	8001cc0 <M24SR_IsAnswerReady>
 80018a4:	4603      	mov	r3, r0
 80018a6:	827b      	strh	r3, [r7, #18]
  if (status != M24SR_STATUS_SUCCESS)
 80018a8:	8a7b      	ldrh	r3, [r7, #18]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <M24SR_ReadBinary+0x8a>
  {
    return status;
 80018ae:	8a7b      	ldrh	r3, [r7, #18]
 80018b0:	e021      	b.n	80018f6 <M24SR_ReadBinary+0xce>
  } 
  status = NFC_IO_ReadMultiple (DeviceAddr , pBuffer,  NbByteToRead + M24SR_STATUSRESPONSE_NBBYTE);
 80018b2:	89fb      	ldrh	r3, [r7, #14]
 80018b4:	b2d8      	uxtb	r0, r3
 80018b6:	7afb      	ldrb	r3, [r7, #11]
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	3305      	adds	r3, #5
 80018bc:	b29b      	uxth	r3, r3
 80018be:	461a      	mov	r2, r3
 80018c0:	6979      	ldr	r1, [r7, #20]
 80018c2:	f006 f8b7 	bl	8007a34 <NFC_IO_ReadMultiple>
 80018c6:	4603      	mov	r3, r0
 80018c8:	827b      	strh	r3, [r7, #18]
  if (status != NFC_IO_STATUS_SUCCESS)
 80018ca:	8a7b      	ldrh	r3, [r7, #18]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <M24SR_ReadBinary+0xac>
  {
    return M24SR_ERROR_TIMEOUT;
 80018d0:	2311      	movs	r3, #17
 80018d2:	e010      	b.n	80018f6 <M24SR_ReadBinary+0xce>
  } 
  
  status = M24SR_IsCorrectCRC16Residue (pBuffer,NbByteToRead+ M24SR_STATUSRESPONSE_NBBYTE); 
 80018d4:	7afb      	ldrb	r3, [r7, #11]
 80018d6:	3305      	adds	r3, #5
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	4619      	mov	r1, r3
 80018dc:	6978      	ldr	r0, [r7, #20]
 80018de:	f7ff fb33 	bl	8000f48 <M24SR_IsCorrectCRC16Residue>
 80018e2:	4603      	mov	r3, r0
 80018e4:	827b      	strh	r3, [r7, #18]
  /* retrieve the data without SW1 & SW2 as provided as return value of the function */
  memcpy(pBufferRead ,&pBuffer[1],NbByteToRead);
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	3301      	adds	r3, #1
 80018ea:	7afa      	ldrb	r2, [r7, #11]
 80018ec:	4619      	mov	r1, r3
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f011 faee 	bl	8012ed0 <memcpy>
  return status;
 80018f4:	8a7b      	ldrh	r3, [r7, #18]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20001938 	.word	0x20001938
 8001904:	20000c68 	.word	0x20000c68

08001908 <M24SR_STReadBinary>:
  * @param  pBufferRead : pointer of the buffer read from the M24SR device
  * @retval Status (SW1&SW2) : Status of the operation to complete.
  * @retval M24SR_ERROR_TIMEOUT : The I2C timeout occured. 
  */
uint16_t M24SR_STReadBinary (uint16_t DeviceAddr, uint16_t Offset, uint8_t NbByteToRead, uint8_t *pBufferRead)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08a      	sub	sp, #40	; 0x28
 800190c:	af04      	add	r7, sp, #16
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	4603      	mov	r3, r0
 8001912:	81fb      	strh	r3, [r7, #14]
 8001914:	460b      	mov	r3, r1
 8001916:	81bb      	strh	r3, [r7, #12]
 8001918:	4613      	mov	r3, r2
 800191a:	72fb      	strb	r3, [r7, #11]
  uint8_t   *pBuffer = uM24SRbuffer ;
 800191c:	4b30      	ldr	r3, [pc, #192]	; (80019e0 <M24SR_STReadBinary+0xd8>)
 800191e:	617b      	str	r3, [r7, #20]
  uint16_t  status ; 
  uint16_t  NbByte;
  
  /* build the command */
  Command.Header.CLA = C_APDU_CLA_ST;
 8001920:	4b30      	ldr	r3, [pc, #192]	; (80019e4 <M24SR_STReadBinary+0xdc>)
 8001922:	22a2      	movs	r2, #162	; 0xa2
 8001924:	701a      	strb	r2, [r3, #0]
  Command.Header.INS = C_APDU_READ_BINARY;
 8001926:	4b2f      	ldr	r3, [pc, #188]	; (80019e4 <M24SR_STReadBinary+0xdc>)
 8001928:	22b0      	movs	r2, #176	; 0xb0
 800192a:	705a      	strb	r2, [r3, #1]
  /* copy the offset */
  Command.Header.P1 = GETMSB  (Offset ) ;
 800192c:	89bb      	ldrh	r3, [r7, #12]
 800192e:	0a1b      	lsrs	r3, r3, #8
 8001930:	b29b      	uxth	r3, r3
 8001932:	b2da      	uxtb	r2, r3
 8001934:	4b2b      	ldr	r3, [pc, #172]	; (80019e4 <M24SR_STReadBinary+0xdc>)
 8001936:	709a      	strb	r2, [r3, #2]
  Command.Header.P2 = GETLSB  (Offset ) ;
 8001938:	89bb      	ldrh	r3, [r7, #12]
 800193a:	b2da      	uxtb	r2, r3
 800193c:	4b29      	ldr	r3, [pc, #164]	; (80019e4 <M24SR_STReadBinary+0xdc>)
 800193e:	70da      	strb	r2, [r3, #3]
  /* copy the number of byte to read */
  Command.Body.LE = NbByteToRead ;
 8001940:	4a28      	ldr	r2, [pc, #160]	; (80019e4 <M24SR_STReadBinary+0xdc>)
 8001942:	7afb      	ldrb	r3, [r7, #11]
 8001944:	7313      	strb	r3, [r2, #12]
  
  M24SR_BuildIBlockCommand ( M24SR_CMDSTRUCT_READBINARY,  Command, &NbByte , pBuffer);
 8001946:	4b27      	ldr	r3, [pc, #156]	; (80019e4 <M24SR_STReadBinary+0xdc>)
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	9202      	str	r2, [sp, #8]
 800194c:	f107 0210 	add.w	r2, r7, #16
 8001950:	9201      	str	r2, [sp, #4]
 8001952:	68da      	ldr	r2, [r3, #12]
 8001954:	9200      	str	r2, [sp, #0]
 8001956:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001958:	f240 109f 	movw	r0, #415	; 0x19f
 800195c:	f7ff fb38 	bl	8000fd0 <M24SR_BuildIBlockCommand>
  
  status =  NFC_IO_WriteMultiple(DeviceAddr, pBuffer, NbByte);
 8001960:	89fb      	ldrh	r3, [r7, #14]
 8001962:	b2db      	uxtb	r3, r3
 8001964:	8a3a      	ldrh	r2, [r7, #16]
 8001966:	6979      	ldr	r1, [r7, #20]
 8001968:	4618      	mov	r0, r3
 800196a:	f006 f88d 	bl	8007a88 <NFC_IO_WriteMultiple>
 800196e:	4603      	mov	r3, r0
 8001970:	827b      	strh	r3, [r7, #18]
  if (status != NFC_IO_STATUS_SUCCESS)
 8001972:	8a7b      	ldrh	r3, [r7, #18]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <M24SR_STReadBinary+0x74>
  {
    return M24SR_ERROR_TIMEOUT;
 8001978:	2311      	movs	r3, #17
 800197a:	e02c      	b.n	80019d6 <M24SR_STReadBinary+0xce>
  } 
  status = M24SR_IsAnswerReady (DeviceAddr);
 800197c:	89fb      	ldrh	r3, [r7, #14]
 800197e:	4618      	mov	r0, r3
 8001980:	f000 f99e 	bl	8001cc0 <M24SR_IsAnswerReady>
 8001984:	4603      	mov	r3, r0
 8001986:	827b      	strh	r3, [r7, #18]
  if (status != M24SR_STATUS_SUCCESS)
 8001988:	8a7b      	ldrh	r3, [r7, #18]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <M24SR_STReadBinary+0x8a>
  {
    return status;
 800198e:	8a7b      	ldrh	r3, [r7, #18]
 8001990:	e021      	b.n	80019d6 <M24SR_STReadBinary+0xce>
  } 
  status = NFC_IO_ReadMultiple (DeviceAddr , pBuffer,  NbByteToRead + M24SR_STATUSRESPONSE_NBBYTE);
 8001992:	89fb      	ldrh	r3, [r7, #14]
 8001994:	b2d8      	uxtb	r0, r3
 8001996:	7afb      	ldrb	r3, [r7, #11]
 8001998:	b29b      	uxth	r3, r3
 800199a:	3305      	adds	r3, #5
 800199c:	b29b      	uxth	r3, r3
 800199e:	461a      	mov	r2, r3
 80019a0:	6979      	ldr	r1, [r7, #20]
 80019a2:	f006 f847 	bl	8007a34 <NFC_IO_ReadMultiple>
 80019a6:	4603      	mov	r3, r0
 80019a8:	827b      	strh	r3, [r7, #18]
  if (status != NFC_IO_STATUS_SUCCESS)
 80019aa:	8a7b      	ldrh	r3, [r7, #18]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <M24SR_STReadBinary+0xac>
  {
    return M24SR_ERROR_TIMEOUT;
 80019b0:	2311      	movs	r3, #17
 80019b2:	e010      	b.n	80019d6 <M24SR_STReadBinary+0xce>
  } 
  
  status = M24SR_IsCorrectCRC16Residue (pBuffer,NbByteToRead+ M24SR_STATUSRESPONSE_NBBYTE); 
 80019b4:	7afb      	ldrb	r3, [r7, #11]
 80019b6:	3305      	adds	r3, #5
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	4619      	mov	r1, r3
 80019bc:	6978      	ldr	r0, [r7, #20]
 80019be:	f7ff fac3 	bl	8000f48 <M24SR_IsCorrectCRC16Residue>
 80019c2:	4603      	mov	r3, r0
 80019c4:	827b      	strh	r3, [r7, #18]
  /* retrieve the data without SW1 & SW2 as provided as return value of the function */
  memcpy(pBufferRead ,&pBuffer[1],NbByteToRead);
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	3301      	adds	r3, #1
 80019ca:	7afa      	ldrb	r2, [r7, #11]
 80019cc:	4619      	mov	r1, r3
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f011 fa7e 	bl	8012ed0 <memcpy>
  return status;
 80019d4:	8a7b      	ldrh	r3, [r7, #18]
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20001938 	.word	0x20001938
 80019e4:	20000c68 	.word	0x20000c68

080019e8 <M24SR_UpdateBinary>:
  * @param  pBufferRead : pointer of the buffer read from the M24SR device
  * @retval Status (SW1&SW2) : Status of the operation to complete.
  * @retval M24SR_ERROR_TIMEOUT : The I2C timeout occured.
  */
uint16_t M24SR_UpdateBinary (uint16_t DeviceAddr, uint16_t Offset ,uint8_t NbByteToWrite,uint8_t *pDataToWrite)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08c      	sub	sp, #48	; 0x30
 80019ec:	af04      	add	r7, sp, #16
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	4603      	mov	r3, r0
 80019f2:	81fb      	strh	r3, [r7, #14]
 80019f4:	460b      	mov	r3, r1
 80019f6:	81bb      	strh	r3, [r7, #12]
 80019f8:	4613      	mov	r3, r2
 80019fa:	72fb      	strb	r3, [r7, #11]
  uint8_t   *pBuffer = uM24SRbuffer ;
 80019fc:	4b39      	ldr	r3, [pc, #228]	; (8001ae4 <M24SR_UpdateBinary+0xfc>)
 80019fe:	61bb      	str	r3, [r7, #24]
  uint16_t  status ; 
  uint16_t  NbByte;
  
  /* build the command */
  Command.Header.CLA = C_APDU_CLA_DEFAULT;
 8001a00:	4b39      	ldr	r3, [pc, #228]	; (8001ae8 <M24SR_UpdateBinary+0x100>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	701a      	strb	r2, [r3, #0]
  Command.Header.INS = C_APDU_UPDATE_BINARY;
 8001a06:	4b38      	ldr	r3, [pc, #224]	; (8001ae8 <M24SR_UpdateBinary+0x100>)
 8001a08:	22d6      	movs	r2, #214	; 0xd6
 8001a0a:	705a      	strb	r2, [r3, #1]
  /* copy the offset */
  Command.Header.P1 = GETMSB  (Offset ) ;
 8001a0c:	89bb      	ldrh	r3, [r7, #12]
 8001a0e:	0a1b      	lsrs	r3, r3, #8
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	4b34      	ldr	r3, [pc, #208]	; (8001ae8 <M24SR_UpdateBinary+0x100>)
 8001a16:	709a      	strb	r2, [r3, #2]
  Command.Header.P2 = GETLSB  (Offset ) ;
 8001a18:	89bb      	ldrh	r3, [r7, #12]
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	4b32      	ldr	r3, [pc, #200]	; (8001ae8 <M24SR_UpdateBinary+0x100>)
 8001a1e:	70da      	strb	r2, [r3, #3]
  /* copy the number of byte of the data field */
  Command.Body.LC = NbByteToWrite ;
 8001a20:	4a31      	ldr	r2, [pc, #196]	; (8001ae8 <M24SR_UpdateBinary+0x100>)
 8001a22:	7afb      	ldrb	r3, [r7, #11]
 8001a24:	7113      	strb	r3, [r2, #4]
  /* copy the File Id */
  memcpy(Command.Body.pData ,pDataToWrite, NbByteToWrite );
 8001a26:	4b30      	ldr	r3, [pc, #192]	; (8001ae8 <M24SR_UpdateBinary+0x100>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	7afa      	ldrb	r2, [r7, #11]
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f011 fa4e 	bl	8012ed0 <memcpy>
  
  M24SR_BuildIBlockCommand ( M24SR_CMDSTRUCT_UPDATEBINARY,  Command, &NbByte , pBuffer);
 8001a34:	4b2c      	ldr	r3, [pc, #176]	; (8001ae8 <M24SR_UpdateBinary+0x100>)
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	9202      	str	r2, [sp, #8]
 8001a3a:	f107 0216 	add.w	r2, r7, #22
 8001a3e:	9201      	str	r2, [sp, #4]
 8001a40:	68da      	ldr	r2, [r3, #12]
 8001a42:	9200      	str	r2, [sp, #0]
 8001a44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a46:	f240 107f 	movw	r0, #383	; 0x17f
 8001a4a:	f7ff fac1 	bl	8000fd0 <M24SR_BuildIBlockCommand>
  
  status = NFC_IO_WriteMultiple(DeviceAddr, pBuffer, NbByte);
 8001a4e:	89fb      	ldrh	r3, [r7, #14]
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	8afa      	ldrh	r2, [r7, #22]
 8001a54:	69b9      	ldr	r1, [r7, #24]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f006 f816 	bl	8007a88 <NFC_IO_WriteMultiple>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	83fb      	strh	r3, [r7, #30]
  if (status != NFC_IO_STATUS_SUCCESS)
 8001a60:	8bfb      	ldrh	r3, [r7, #30]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <M24SR_UpdateBinary+0x82>
  {
    return M24SR_ERROR_TIMEOUT;
 8001a66:	2311      	movs	r3, #17
 8001a68:	e037      	b.n	8001ada <M24SR_UpdateBinary+0xf2>
  } 
  status = M24SR_IsAnswerReady (DeviceAddr);
 8001a6a:	89fb      	ldrh	r3, [r7, #14]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f000 f927 	bl	8001cc0 <M24SR_IsAnswerReady>
 8001a72:	4603      	mov	r3, r0
 8001a74:	83fb      	strh	r3, [r7, #30]
  if (status != M24SR_STATUS_SUCCESS)
 8001a76:	8bfb      	ldrh	r3, [r7, #30]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <M24SR_UpdateBinary+0x98>
  {
    return status;
 8001a7c:	8bfb      	ldrh	r3, [r7, #30]
 8001a7e:	e02c      	b.n	8001ada <M24SR_UpdateBinary+0xf2>
  } 
  status = NFC_IO_ReadMultiple (DeviceAddr , pBuffer,  M24SR_STATUSRESPONSE_NBBYTE);
 8001a80:	89fb      	ldrh	r3, [r7, #14]
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2205      	movs	r2, #5
 8001a86:	69b9      	ldr	r1, [r7, #24]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f005 ffd3 	bl	8007a34 <NFC_IO_ReadMultiple>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	83fb      	strh	r3, [r7, #30]
  if (status != NFC_IO_STATUS_SUCCESS)
 8001a92:	8bfb      	ldrh	r3, [r7, #30]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <M24SR_UpdateBinary+0xb4>
  {
    return M24SR_ERROR_TIMEOUT;
 8001a98:	2311      	movs	r3, #17
 8001a9a:	e01e      	b.n	8001ada <M24SR_UpdateBinary+0xf2>
  } 
  /* if the response is a Watiting frame extenstion request */ 
  if (IsSBlock (pBuffer) == M24SR_STATUS_SUCCESS)
 8001a9c:	69b8      	ldr	r0, [r7, #24]
 8001a9e:	f7ff fb87 	bl	80011b0 <IsSBlock>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d111      	bne.n	8001acc <M24SR_UpdateBinary+0xe4>
  {
    /*check the CRC */ 
    if (M24SR_IsCorrectCRC16Residue (pBuffer , M24SR_WATINGTIMEEXTRESPONSE_NBBYTE) != M24SR_ERROR_CRC)
 8001aa8:	2104      	movs	r1, #4
 8001aaa:	69b8      	ldr	r0, [r7, #24]
 8001aac:	f7ff fa4c 	bl	8000f48 <M24SR_IsCorrectCRC16Residue>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b12      	cmp	r3, #18
 8001ab4:	d010      	beq.n	8001ad8 <M24SR_UpdateBinary+0xf0>
    {
      /* send the FrameExension response*/ 
      status = M24SR_FWTExtension (DeviceAddr,  pBuffer [M24SR_OFFSET_PCB+1]);
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	781a      	ldrb	r2, [r3, #0]
 8001abc:	89fb      	ldrh	r3, [r7, #14]
 8001abe:	4611      	mov	r1, r2
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff fb88 	bl	80011d6 <M24SR_FWTExtension>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	83fb      	strh	r3, [r7, #30]
 8001aca:	e005      	b.n	8001ad8 <M24SR_UpdateBinary+0xf0>
    }
  }
  else
  {  
    status = M24SR_IsCorrectCRC16Residue (pBuffer, M24SR_STATUSRESPONSE_NBBYTE); 
 8001acc:	2105      	movs	r1, #5
 8001ace:	69b8      	ldr	r0, [r7, #24]
 8001ad0:	f7ff fa3a 	bl	8000f48 <M24SR_IsCorrectCRC16Residue>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	83fb      	strh	r3, [r7, #30]
  }
  
  return status;
 8001ad8:	8bfb      	ldrh	r3, [r7, #30]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3720      	adds	r7, #32
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20001938 	.word	0x20001938
 8001ae8:	20000c68 	.word	0x20000c68

08001aec <M24SR_Verify>:
  * @param  pPwd : pointer on the passwaord
  * @retval Status (SW1&SW2) : Status of the operation to complete.
  * @retval M24SR_ERROR_TIMEOUT : The I2C timeout occured.
  */
uint16_t M24SR_Verify (uint16_t DeviceAddr, uint16_t uPwdId, uint8_t NbPwdByte ,uint8_t *pPwd)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08a      	sub	sp, #40	; 0x28
 8001af0:	af04      	add	r7, sp, #16
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	4603      	mov	r3, r0
 8001af6:	81fb      	strh	r3, [r7, #14]
 8001af8:	460b      	mov	r3, r1
 8001afa:	81bb      	strh	r3, [r7, #12]
 8001afc:	4613      	mov	r3, r2
 8001afe:	72fb      	strb	r3, [r7, #11]
  uint8_t   *pBuffer = uM24SRbuffer ;
 8001b00:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <M24SR_Verify+0x10c>)
 8001b02:	617b      	str	r3, [r7, #20]
  uint16_t  status = 0x0000 ; 
 8001b04:	2300      	movs	r3, #0
 8001b06:	827b      	strh	r3, [r7, #18]
  uint16_t  NbByte;
  
  /*check the parameters */
  if (uPwdId > 0x0003)
 8001b08:	89bb      	ldrh	r3, [r7, #12]
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	d901      	bls.n	8001b12 <M24SR_Verify+0x26>
  {  
    return M24SR_ERROR_PARAMETER;
 8001b0e:	2314      	movs	r3, #20
 8001b10:	e06d      	b.n	8001bee <M24SR_Verify+0x102>
  }
  if ( (NbPwdByte != 0x00) && (NbPwdByte != 0x10))
 8001b12:	7afb      	ldrb	r3, [r7, #11]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d004      	beq.n	8001b22 <M24SR_Verify+0x36>
 8001b18:	7afb      	ldrb	r3, [r7, #11]
 8001b1a:	2b10      	cmp	r3, #16
 8001b1c:	d001      	beq.n	8001b22 <M24SR_Verify+0x36>
  {  
    return M24SR_ERROR_PARAMETER;
 8001b1e:	2314      	movs	r3, #20
 8001b20:	e065      	b.n	8001bee <M24SR_Verify+0x102>
  }
  
  /* build the command */
  Command.Header.CLA = C_APDU_CLA_DEFAULT;
 8001b22:	4b36      	ldr	r3, [pc, #216]	; (8001bfc <M24SR_Verify+0x110>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
  Command.Header.INS = C_APDU_VERIFY;
 8001b28:	4b34      	ldr	r3, [pc, #208]	; (8001bfc <M24SR_Verify+0x110>)
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	705a      	strb	r2, [r3, #1]
  /* copy the Password Id */
  Command.Header.P1 = GETMSB  (uPwdId ) ;
 8001b2e:	89bb      	ldrh	r3, [r7, #12]
 8001b30:	0a1b      	lsrs	r3, r3, #8
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	4b31      	ldr	r3, [pc, #196]	; (8001bfc <M24SR_Verify+0x110>)
 8001b38:	709a      	strb	r2, [r3, #2]
  Command.Header.P2 = GETLSB  (uPwdId ) ;
 8001b3a:	89bb      	ldrh	r3, [r7, #12]
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	4b2f      	ldr	r3, [pc, #188]	; (8001bfc <M24SR_Verify+0x110>)
 8001b40:	70da      	strb	r2, [r3, #3]
  /* copy the number of byte of the data field */
  Command.Body.LC = NbPwdByte ;
 8001b42:	4a2e      	ldr	r2, [pc, #184]	; (8001bfc <M24SR_Verify+0x110>)
 8001b44:	7afb      	ldrb	r3, [r7, #11]
 8001b46:	7113      	strb	r3, [r2, #4]
  
  if (NbPwdByte == 0x10) 
 8001b48:	7afb      	ldrb	r3, [r7, #11]
 8001b4a:	2b10      	cmp	r3, #16
 8001b4c:	d114      	bne.n	8001b78 <M24SR_Verify+0x8c>
  {
    /* copy the password */
    memcpy(Command.Body.pData, pPwd, NbPwdByte);
 8001b4e:	4b2b      	ldr	r3, [pc, #172]	; (8001bfc <M24SR_Verify+0x110>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	7afa      	ldrb	r2, [r7, #11]
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f011 f9ba 	bl	8012ed0 <memcpy>
    /* build the I�C command */
    M24SR_BuildIBlockCommand ( M24SR_CMDSTRUCT_VERIFYBINARYWITHPWD,  Command, &NbByte , pBuffer);
 8001b5c:	4b27      	ldr	r3, [pc, #156]	; (8001bfc <M24SR_Verify+0x110>)
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	9202      	str	r2, [sp, #8]
 8001b62:	f107 0210 	add.w	r2, r7, #16
 8001b66:	9201      	str	r2, [sp, #4]
 8001b68:	68da      	ldr	r2, [r3, #12]
 8001b6a:	9200      	str	r2, [sp, #0]
 8001b6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b6e:	f240 107f 	movw	r0, #383	; 0x17f
 8001b72:	f7ff fa2d 	bl	8000fd0 <M24SR_BuildIBlockCommand>
 8001b76:	e00c      	b.n	8001b92 <M24SR_Verify+0xa6>
  }
  else 
  {
    /* build the I�C command */
    M24SR_BuildIBlockCommand ( M24SR_CMDSTRUCT_VERIFYBINARYWOPWD,  Command, &NbByte , pBuffer);
 8001b78:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <M24SR_Verify+0x110>)
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	9202      	str	r2, [sp, #8]
 8001b7e:	f107 0210 	add.w	r2, r7, #16
 8001b82:	9201      	str	r2, [sp, #4]
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	9200      	str	r2, [sp, #0]
 8001b88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b8a:	f240 103f 	movw	r0, #319	; 0x13f
 8001b8e:	f7ff fa1f 	bl	8000fd0 <M24SR_BuildIBlockCommand>
  }
  
  /* send the request */ 
  status = NFC_IO_WriteMultiple(DeviceAddr, pBuffer, NbByte);
 8001b92:	89fb      	ldrh	r3, [r7, #14]
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	8a3a      	ldrh	r2, [r7, #16]
 8001b98:	6979      	ldr	r1, [r7, #20]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f005 ff74 	bl	8007a88 <NFC_IO_WriteMultiple>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	827b      	strh	r3, [r7, #18]
  if (status != NFC_IO_STATUS_SUCCESS)
 8001ba4:	8a7b      	ldrh	r3, [r7, #18]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <M24SR_Verify+0xc2>
  {
    return M24SR_ERROR_TIMEOUT;
 8001baa:	2311      	movs	r3, #17
 8001bac:	e01f      	b.n	8001bee <M24SR_Verify+0x102>
  } 
  /* wait for answer ready */
  status = M24SR_IsAnswerReady (DeviceAddr);
 8001bae:	89fb      	ldrh	r3, [r7, #14]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f000 f885 	bl	8001cc0 <M24SR_IsAnswerReady>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	827b      	strh	r3, [r7, #18]
  if (status != M24SR_STATUS_SUCCESS)
 8001bba:	8a7b      	ldrh	r3, [r7, #18]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <M24SR_Verify+0xd8>
  {
    return status;
 8001bc0:	8a7b      	ldrh	r3, [r7, #18]
 8001bc2:	e014      	b.n	8001bee <M24SR_Verify+0x102>
  } 
  /* read the response */ 
  status = NFC_IO_ReadMultiple (DeviceAddr , pBuffer,  M24SR_STATUSRESPONSE_NBBYTE);
 8001bc4:	89fb      	ldrh	r3, [r7, #14]
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2205      	movs	r2, #5
 8001bca:	6979      	ldr	r1, [r7, #20]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f005 ff31 	bl	8007a34 <NFC_IO_ReadMultiple>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	827b      	strh	r3, [r7, #18]
  if (status != NFC_IO_STATUS_SUCCESS)
 8001bd6:	8a7b      	ldrh	r3, [r7, #18]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <M24SR_Verify+0xf4>
  {
    return M24SR_ERROR_TIMEOUT;
 8001bdc:	2311      	movs	r3, #17
 8001bde:	e006      	b.n	8001bee <M24SR_Verify+0x102>
  } 
  
  status = M24SR_IsCorrectCRC16Residue (pBuffer, M24SR_STATUSRESPONSE_NBBYTE); 
 8001be0:	2105      	movs	r1, #5
 8001be2:	6978      	ldr	r0, [r7, #20]
 8001be4:	f7ff f9b0 	bl	8000f48 <M24SR_IsCorrectCRC16Residue>
 8001be8:	4603      	mov	r3, r0
 8001bea:	827b      	strh	r3, [r7, #18]
  return status;
 8001bec:	8a7b      	ldrh	r3, [r7, #18]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20001938 	.word	0x20001938
 8001bfc:	20000c68 	.word	0x20000c68

08001c00 <M24SR_ManageI2CGPO>:
  * @param  DeviceAddr: I2C address of the device
  * @param  GPO_I2Cconfig: GPO configuration to set
  * @retval Status (SW1&SW2) : Status of the operation to complete.
  */
uint16_t M24SR_ManageI2CGPO(uint16_t DeviceAddr, uint8_t GPO_I2Cconfig)
{
 8001c00:	b590      	push	{r4, r7, lr}
 8001c02:	b089      	sub	sp, #36	; 0x24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	460a      	mov	r2, r1
 8001c0a:	80fb      	strh	r3, [r7, #6]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	717b      	strb	r3, [r7, #5]
  uint16_t status;
  uint8_t GPO_config;
  uint8_t DefaultPassword[16]={0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 8001c10:	4b29      	ldr	r3, [pc, #164]	; (8001cb8 <M24SR_ManageI2CGPO+0xb8>)
 8001c12:	f107 040c 	add.w	r4, r7, #12
 8001c16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

  if( GPO_I2Cconfig > STATE_CONTROL)
 8001c1c:	797b      	ldrb	r3, [r7, #5]
 8001c1e:	2b05      	cmp	r3, #5
 8001c20:	d901      	bls.n	8001c26 <M24SR_ManageI2CGPO+0x26>
  {
    return M24SR_ERROR_PARAMETER;
 8001c22:	2314      	movs	r3, #20
 8001c24:	e043      	b.n	8001cae <M24SR_ManageI2CGPO+0xae>
  }

  /* we must not be in interrupt mode for I2C synchro as we will change GPO purpose */
  M24SR_SetI2CSynchroMode(M24SR_WAITINGTIME_POLLING);
 8001c26:	2001      	movs	r0, #1
 8001c28:	f000 f8b0 	bl	8001d8c <M24SR_SetI2CSynchroMode>

  M24SR_SelectApplication(DeviceAddr);
 8001c2c:	88fb      	ldrh	r3, [r7, #6]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff fc28 	bl	8001484 <M24SR_SelectApplication>
  M24SR_SelectSystemfile(DeviceAddr);
 8001c34:	88fb      	ldrh	r3, [r7, #6]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fd12 	bl	8001660 <M24SR_SelectSystemfile>
  M24SR_ReadBinary (DeviceAddr, 0x0004 , 0x01 , &GPO_config );
 8001c3c:	f107 031d 	add.w	r3, r7, #29
 8001c40:	88f8      	ldrh	r0, [r7, #6]
 8001c42:	2201      	movs	r2, #1
 8001c44:	2104      	movs	r1, #4
 8001c46:	f7ff fdef 	bl	8001828 <M24SR_ReadBinary>

  /* Update only GPO purpose for I2C */
  GPO_config = (GPO_config & 0xF0) | GPO_I2Cconfig;
 8001c4a:	7f7b      	ldrb	r3, [r7, #29]
 8001c4c:	b25b      	sxtb	r3, r3
 8001c4e:	f023 030f 	bic.w	r3, r3, #15
 8001c52:	b25a      	sxtb	r2, r3
 8001c54:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	b25b      	sxtb	r3, r3
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	777b      	strb	r3, [r7, #29]
  M24SR_SelectSystemfile(DeviceAddr);
 8001c60:	88fb      	ldrh	r3, [r7, #6]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fcfc 	bl	8001660 <M24SR_SelectSystemfile>
  M24SR_Verify(DeviceAddr, M24SR_I2C_PWD ,0x10 ,DefaultPassword );
 8001c68:	f107 030c 	add.w	r3, r7, #12
 8001c6c:	88f8      	ldrh	r0, [r7, #6]
 8001c6e:	2210      	movs	r2, #16
 8001c70:	2103      	movs	r1, #3
 8001c72:	f7ff ff3b 	bl	8001aec <M24SR_Verify>
  status = M24SR_UpdateBinary (DeviceAddr, 0x0004 ,0x01, &(GPO_config) );
 8001c76:	f107 031d 	add.w	r3, r7, #29
 8001c7a:	88f8      	ldrh	r0, [r7, #6]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	2104      	movs	r1, #4
 8001c80:	f7ff feb2 	bl	80019e8 <M24SR_UpdateBinary>
 8001c84:	4603      	mov	r3, r0
 8001c86:	83fb      	strh	r3, [r7, #30]

  /* if we have set interrupt mode for I2C synchro we can enable interrupt mode */
  if (GPO_I2Cconfig == I2C_ANSWER_READY && status == M24SR_ACTION_COMPLETED)
 8001c88:	797b      	ldrb	r3, [r7, #5]
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	d10e      	bne.n	8001cac <M24SR_ManageI2CGPO+0xac>
 8001c8e:	8bfb      	ldrh	r3, [r7, #30]
 8001c90:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8001c94:	d10a      	bne.n	8001cac <M24SR_ManageI2CGPO+0xac>
  {
  if(uGpoMode == M24SR_GPO_SYNCHRO)
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <M24SR_ManageI2CGPO+0xbc>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d103      	bne.n	8001ca6 <M24SR_ManageI2CGPO+0xa6>
  {
    M24SR_SetI2CSynchroMode(M24SR_WAITINGTIME_GPO);
 8001c9e:	2003      	movs	r0, #3
 8001ca0:	f000 f874 	bl	8001d8c <M24SR_SetI2CSynchroMode>
 8001ca4:	e002      	b.n	8001cac <M24SR_ManageI2CGPO+0xac>
  }
  else
  {
    M24SR_SetI2CSynchroMode(M24SR_INTERRUPT_GPO);
 8001ca6:	2004      	movs	r0, #4
 8001ca8:	f000 f870 	bl	8001d8c <M24SR_SetI2CSynchroMode>
  }
  }

  return status;
 8001cac:	8bfb      	ldrh	r3, [r7, #30]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3724      	adds	r7, #36	; 0x24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd90      	pop	{r4, r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	08015d9c 	.word	0x08015d9c
 8001cbc:	20000d78 	.word	0x20000d78

08001cc0 <M24SR_IsAnswerReady>:
  * @param  DeviceAddr: I2C address of the device
  * @retval M24SR_STATUS_SUCCESS : a response of the M24LR is ready
  * @retval M24SR_ERROR_DEFAULT : the response of the M24LR is not ready
  */
static uint16_t M24SR_IsAnswerReady (uint16_t DeviceAddr)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	80fb      	strh	r3, [r7, #6]
  uint32_t retry = 0xFFFFF;
 8001cca:	4b2d      	ldr	r3, [pc, #180]	; (8001d80 <M24SR_IsAnswerReady+0xc0>)
 8001ccc:	60fb      	str	r3, [r7, #12]
  uint8_t stable = 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	72fb      	strb	r3, [r7, #11]
  uint8_t PinState;

  switch (uSynchroMode)
 8001cd2:	4b2c      	ldr	r3, [pc, #176]	; (8001d84 <M24SR_IsAnswerReady+0xc4>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d846      	bhi.n	8001d6a <M24SR_IsAnswerReady+0xaa>
 8001cdc:	a201      	add	r2, pc, #4	; (adr r2, 8001ce4 <M24SR_IsAnswerReady+0x24>)
 8001cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce2:	bf00      	nop
 8001ce4:	08001cf5 	.word	0x08001cf5
 8001ce8:	08001d0b 	.word	0x08001d0b
 8001cec:	08001d15 	.word	0x08001d15
 8001cf0:	08001d47 	.word	0x08001d47
  {
  case M24SR_WAITINGTIME_POLLING :
    if(NFC_IO_IsDeviceReady(DeviceAddr, NFC_IO_TRIALS) != NFC_IO_STATUS_SUCCESS)
 8001cf4:	88fb      	ldrh	r3, [r7, #6]
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f005 feee 	bl	8007adc <NFC_IO_IsDeviceReady>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d033      	beq.n	8001d6e <M24SR_IsAnswerReady+0xae>
    {
      return  M24SR_ERROR_TIMEOUT;
 8001d06:	2311      	movs	r3, #17
 8001d08:	e035      	b.n	8001d76 <M24SR_IsAnswerReady+0xb6>
    }
    break;

  case M24SR_WAITINGTIME_TIMEOUT :
    /* M24SR FWI=5 => (256*16/fc)*2^5=9.6ms but M24SR ask for extended time to program up to 246Bytes. */
    NFC_IO_Delay(M24SR_ANSWER_TIMEOUT);    
 8001d0a:	2050      	movs	r0, #80	; 0x50
 8001d0c:	f005 ff26 	bl	8007b5c <NFC_IO_Delay>
    break;
 8001d10:	e030      	b.n	8001d74 <M24SR_IsAnswerReady+0xb4>
    
  case M24SR_WAITINGTIME_GPO :
 8001d12:	bf00      	nop
    /* mbd does not support interrupt for the moment with nucleo board */
    do
    {
      NFC_IO_ReadState(&PinState);
 8001d14:	f107 030a 	add.w	r3, r7, #10
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f005 ff0d 	bl	8007b38 <NFC_IO_ReadState>
      if( PinState == 0) /* RESET */
 8001d1e:	7abb      	ldrb	r3, [r7, #10]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d102      	bne.n	8001d2a <M24SR_IsAnswerReady+0x6a>
      {
        stable ++;                        
 8001d24:	7afb      	ldrb	r3, [r7, #11]
 8001d26:	3301      	adds	r3, #1
 8001d28:	72fb      	strb	r3, [r7, #11]
      }
      retry --;                        
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	60fb      	str	r3, [r7, #12]
    }
    while(stable < M24SR_ANSWER_STABLE && retry>0);
 8001d30:	7afb      	ldrb	r3, [r7, #11]
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d802      	bhi.n	8001d3c <M24SR_IsAnswerReady+0x7c>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1ea      	bne.n	8001d12 <M24SR_IsAnswerReady+0x52>
    if(!retry)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d117      	bne.n	8001d72 <M24SR_IsAnswerReady+0xb2>
    {
      return M24SR_ERROR_TIMEOUT;   
 8001d42:	2311      	movs	r3, #17
 8001d44:	e017      	b.n	8001d76 <M24SR_IsAnswerReady+0xb6>
    }          
    break;
    
  case M24SR_INTERRUPT_GPO :
    /* Check if the GPIO is not already low before calling this function */
    NFC_IO_ReadState(&PinState);
 8001d46:	f107 030a 	add.w	r3, r7, #10
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f005 fef4 	bl	8007b38 <NFC_IO_ReadState>
    if(PinState == 1) /* SET */
 8001d50:	7abb      	ldrb	r3, [r7, #10]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d105      	bne.n	8001d62 <M24SR_IsAnswerReady+0xa2>
    {
      while (GPO_Low == 0);
 8001d56:	bf00      	nop
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <M24SR_IsAnswerReady+0xc8>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0fa      	beq.n	8001d58 <M24SR_IsAnswerReady+0x98>
    }
    GPO_Low = 0;
 8001d62:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <M24SR_IsAnswerReady+0xc8>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
    break;
 8001d68:	e004      	b.n	8001d74 <M24SR_IsAnswerReady+0xb4>
    
  default : 
    return M24SR_ERROR_DEFAULT;
 8001d6a:	2310      	movs	r3, #16
 8001d6c:	e003      	b.n	8001d76 <M24SR_IsAnswerReady+0xb6>
    break;
 8001d6e:	bf00      	nop
 8001d70:	e000      	b.n	8001d74 <M24SR_IsAnswerReady+0xb4>
    break;
 8001d72:	bf00      	nop
  }
  
  return M24SR_STATUS_SUCCESS;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	000fffff 	.word	0x000fffff
 8001d84:	20000000 	.word	0x20000000
 8001d88:	20000d79 	.word	0x20000d79

08001d8c <M24SR_SetI2CSynchroMode>:
  * @brief  this functions configure I2C synchronization mode
  * @param  WaitingMode : interruption or polling
  * @retval None
  */
static void M24SR_SetI2CSynchroMode( uint8_t WaitingMode)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	71fb      	strb	r3, [r7, #7]
  if((uGpoMode == M24SR_GPO_SYNCHRO) || (uGpoMode == M24SR_GPO_INTERRUPT))
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <M24SR_SetI2CSynchroMode+0x4c>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d003      	beq.n	8001da6 <M24SR_SetI2CSynchroMode+0x1a>
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <M24SR_SetI2CSynchroMode+0x4c>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d103      	bne.n	8001dae <M24SR_SetI2CSynchroMode+0x22>
  {
    uSynchroMode = WaitingMode;
 8001da6:	4a0d      	ldr	r2, [pc, #52]	; (8001ddc <M24SR_SetI2CSynchroMode+0x50>)
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	7013      	strb	r3, [r2, #0]
 8001dac:	e00d      	b.n	8001dca <M24SR_SetI2CSynchroMode+0x3e>
  } 
  else  /* GPO_POLLING */
  { 
    if(WaitingMode == M24SR_WAITINGTIME_GPO || WaitingMode == M24SR_INTERRUPT_GPO)
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	d002      	beq.n	8001dba <M24SR_SetI2CSynchroMode+0x2e>
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d103      	bne.n	8001dc2 <M24SR_SetI2CSynchroMode+0x36>
        uSynchroMode = M24SR_WAITINGTIME_POLLING;  /* Force Polling */
 8001dba:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <M24SR_SetI2CSynchroMode+0x50>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	701a      	strb	r2, [r3, #0]
 8001dc0:	e003      	b.n	8001dca <M24SR_SetI2CSynchroMode+0x3e>
    else
        uSynchroMode = WaitingMode;
 8001dc2:	4a06      	ldr	r2, [pc, #24]	; (8001ddc <M24SR_SetI2CSynchroMode+0x50>)
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	7013      	strb	r3, [r2, #0]
  }
}
 8001dc8:	bf00      	nop
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	20000d78 	.word	0x20000d78
 8001ddc:	20000000 	.word	0x20000000

08001de0 <NFC_TT4_Initialization>:
  * @param  size : number of byte of data to read
  * @retval SUCCESS : Initalization done
  * @retval ERROR : Not able to Initialize. 
  */
uint16_t NFC_TT4_Initialization ( uint8_t* CCBuffer, uint8_t size )
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	70fb      	strb	r3, [r7, #3]
  uint16_t status = ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	81fb      	strh	r3, [r7, #14]
  uint16_t trials = 5; /* wait 1sec, driver is configured to let 200ms for command to complete */
 8001df0:	2305      	movs	r3, #5
 8001df2:	81bb      	strh	r3, [r7, #12]
                       /* which is enough for all commands except GetSession if RF session is already opened */
                       /* Smartphone generaly release the session within the second, but customer can modify this value */
  
  /* Perform HW initialization */
  M24SR_Init(M24SR_I2C_ADDR, M24SR_I2C_GPO_MODE);
 8001df4:	2101      	movs	r1, #1
 8001df6:	20ac      	movs	r0, #172	; 0xac
 8001df8:	f7ff fa5c 	bl	80012b4 <M24SR_Init>
  
  /* Read CC file */
  while( status != M24SR_ACTION_COMPLETED && trials)
 8001dfc:	e007      	b.n	8001e0e <NFC_TT4_Initialization+0x2e>
  {
    status = M24SR_GetSession(M24SR_I2C_ADDR);
 8001dfe:	20ac      	movs	r0, #172	; 0xac
 8001e00:	f7ff faba 	bl	8001378 <M24SR_GetSession>
 8001e04:	4603      	mov	r3, r0
 8001e06:	81fb      	strh	r3, [r7, #14]
    trials--;
 8001e08:	89bb      	ldrh	r3, [r7, #12]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	81bb      	strh	r3, [r7, #12]
  while( status != M24SR_ACTION_COMPLETED && trials)
 8001e0e:	89fb      	ldrh	r3, [r7, #14]
 8001e10:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8001e14:	d002      	beq.n	8001e1c <NFC_TT4_Initialization+0x3c>
 8001e16:	89bb      	ldrh	r3, [r7, #12]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1f0      	bne.n	8001dfe <NFC_TT4_Initialization+0x1e>
  }
  if (status != M24SR_ACTION_COMPLETED)
 8001e1c:	89fb      	ldrh	r3, [r7, #14]
 8001e1e:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8001e22:	d001      	beq.n	8001e28 <NFC_TT4_Initialization+0x48>
  {
    return ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e03d      	b.n	8001ea4 <NFC_TT4_Initialization+0xc4>
  }
  /*===================================*/
  /* Select the NFC type 4 application */ 
  /*===================================*/
  status = M24SR_SelectApplication(M24SR_I2C_ADDR); 
 8001e28:	20ac      	movs	r0, #172	; 0xac
 8001e2a:	f7ff fb2b 	bl	8001484 <M24SR_SelectApplication>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	81fb      	strh	r3, [r7, #14]
  if (status != M24SR_ACTION_COMPLETED)
 8001e32:	89fb      	ldrh	r3, [r7, #14]
 8001e34:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8001e38:	d001      	beq.n	8001e3e <NFC_TT4_Initialization+0x5e>
  {
    return ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e032      	b.n	8001ea4 <NFC_TT4_Initialization+0xc4>
  }
    
  /*==================*/
  /* select a CC file */ 
  /*==================*/
  status = M24SR_SelectCCfile(M24SR_I2C_ADDR);
 8001e3e:	20ac      	movs	r0, #172	; 0xac
 8001e40:	f7ff fb9c 	bl	800157c <M24SR_SelectCCfile>
 8001e44:	4603      	mov	r3, r0
 8001e46:	81fb      	strh	r3, [r7, #14]
  if (status != M24SR_ACTION_COMPLETED)
 8001e48:	89fb      	ldrh	r3, [r7, #14]
 8001e4a:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8001e4e:	d001      	beq.n	8001e54 <NFC_TT4_Initialization+0x74>
  {
    return ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e027      	b.n	8001ea4 <NFC_TT4_Initialization+0xc4>
  }
      
  /* read the first 15 bytes of the CC file */
  if( NFC_TT4_ReadData ( 0x0000 , 0x0F , CCBuffer )== M24SR_ACTION_COMPLETED)
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	210f      	movs	r1, #15
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f000 f8b7 	bl	8001fcc <NFC_TT4_ReadData>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8001e64:	d118      	bne.n	8001e98 <NFC_TT4_Initialization+0xb8>
  {      
    NDEF_FileID = (uint16_t) ((CCBuffer[0x09]<<8) | CCBuffer[0x0A]);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3309      	adds	r3, #9
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	021b      	lsls	r3, r3, #8
 8001e6e:	b21a      	sxth	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	330a      	adds	r3, #10
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	b21b      	sxth	r3, r3
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	b21b      	sxth	r3, r3
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <NFC_TT4_Initialization+0xcc>)
 8001e80:	801a      	strh	r2, [r3, #0]
    status = M24SR_Deselect(M24SR_I2C_ADDR);
 8001e82:	20ac      	movs	r0, #172	; 0xac
 8001e84:	f7ff fac2 	bl	800140c <M24SR_Deselect>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	81fb      	strh	r3, [r7, #14]
    if (status != M24SR_ACTION_COMPLETED)
 8001e8c:	89fb      	ldrh	r3, [r7, #14]
 8001e8e:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8001e92:	d006      	beq.n	8001ea2 <NFC_TT4_Initialization+0xc2>
    {
      return ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e005      	b.n	8001ea4 <NFC_TT4_Initialization+0xc4>
    }
  }
  else
  {
    M24SR_Deselect(M24SR_I2C_ADDR);
 8001e98:	20ac      	movs	r0, #172	; 0xac
 8001e9a:	f7ff fab7 	bl	800140c <M24SR_Deselect>
    return ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <NFC_TT4_Initialization+0xc4>
  }

  return SUCCESS;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000008 	.word	0x20000008

08001eb0 <NFC_TT4_OpenNDEFSession>:
  *                               Kill RF session and open I2C sesssion.
  * @retval SUCCESS : Session is opened
  * @retval ERROR : Not able to open session. 
  */
uint16_t NFC_TT4_OpenNDEFSession ( uint16_t NDEF_fileID, uint16_t Priority )
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	460a      	mov	r2, r1
 8001eba:	80fb      	strh	r3, [r7, #6]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	80bb      	strh	r3, [r7, #4]
  uint16_t status = ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	81fb      	strh	r3, [r7, #14]
  uint16_t trials = 5; /* wait 1sec, driver is configured to let 200ms for command to complete */
 8001ec4:	2305      	movs	r3, #5
 8001ec6:	81bb      	strh	r3, [r7, #12]
                       /* which is enough for all commands except GetSession if RF session is already opened */
                       /* Smartphone generaly release the session within the second, but customer can modify this value */
  
  if(NDEFSessionOpenID == NDEF_SESSION_CLOSED)
 8001ec8:	4b28      	ldr	r3, [pc, #160]	; (8001f6c <NFC_TT4_OpenNDEFSession+0xbc>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a28      	ldr	r2, [pc, #160]	; (8001f70 <NFC_TT4_OpenNDEFSession+0xc0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d140      	bne.n	8001f54 <NFC_TT4_OpenNDEFSession+0xa4>
  {
    if( Priority == NFC_TT4_TAKE_SESSION)
 8001ed2:	88bb      	ldrh	r3, [r7, #4]
 8001ed4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d10d      	bne.n	8001ef8 <NFC_TT4_OpenNDEFSession+0x48>
    {
      status = M24SR_KillSession(M24SR_I2C_ADDR);
 8001edc:	20ac      	movs	r0, #172	; 0xac
 8001ede:	f7ff fa70 	bl	80013c2 <M24SR_KillSession>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	81fb      	strh	r3, [r7, #14]
 8001ee6:	e00e      	b.n	8001f06 <NFC_TT4_OpenNDEFSession+0x56>
    }
    else
    {
      while( status != M24SR_ACTION_COMPLETED && trials)
      {
        status = M24SR_GetSession(M24SR_I2C_ADDR);
 8001ee8:	20ac      	movs	r0, #172	; 0xac
 8001eea:	f7ff fa45 	bl	8001378 <M24SR_GetSession>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	81fb      	strh	r3, [r7, #14]
        trials--;
 8001ef2:	89bb      	ldrh	r3, [r7, #12]
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	81bb      	strh	r3, [r7, #12]
      while( status != M24SR_ACTION_COMPLETED && trials)
 8001ef8:	89fb      	ldrh	r3, [r7, #14]
 8001efa:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8001efe:	d002      	beq.n	8001f06 <NFC_TT4_OpenNDEFSession+0x56>
 8001f00:	89bb      	ldrh	r3, [r7, #12]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f0      	bne.n	8001ee8 <NFC_TT4_OpenNDEFSession+0x38>
      }
    }
    if (status != M24SR_ACTION_COMPLETED)
 8001f06:	89fb      	ldrh	r3, [r7, #14]
 8001f08:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8001f0c:	d005      	beq.n	8001f1a <NFC_TT4_OpenNDEFSession+0x6a>
    {
      /* seems session already open on RF side */
      /* But in case of I2C issue try to init again */
      M24SR_Init(M24SR_I2C_ADDR, M24SR_I2C_GPO_MODE);
 8001f0e:	2101      	movs	r1, #1
 8001f10:	20ac      	movs	r0, #172	; 0xac
 8001f12:	f7ff f9cf 	bl	80012b4 <M24SR_Init>
      return ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e024      	b.n	8001f64 <NFC_TT4_OpenNDEFSession+0xb4>
    }
    
    /*===================================*/
    /* Select the NFC type 4 application */ 
    /*===================================*/
    status = M24SR_SelectApplication(M24SR_I2C_ADDR);
 8001f1a:	20ac      	movs	r0, #172	; 0xac
 8001f1c:	f7ff fab2 	bl	8001484 <M24SR_SelectApplication>
 8001f20:	4603      	mov	r3, r0
 8001f22:	81fb      	strh	r3, [r7, #14]
    if (status != M24SR_ACTION_COMPLETED)
 8001f24:	89fb      	ldrh	r3, [r7, #14]
 8001f26:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8001f2a:	d001      	beq.n	8001f30 <NFC_TT4_OpenNDEFSession+0x80>
    {
      return ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e019      	b.n	8001f64 <NFC_TT4_OpenNDEFSession+0xb4>
    }    
    /*====================*/
    /* select NDEF file   */
    /*====================*/
    status = M24SR_SelectNDEFfile(M24SR_I2C_ADDR, NDEF_fileID);
 8001f30:	88fb      	ldrh	r3, [r7, #6]
 8001f32:	4619      	mov	r1, r3
 8001f34:	20ac      	movs	r0, #172	; 0xac
 8001f36:	f7ff fc05 	bl	8001744 <M24SR_SelectNDEFfile>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	81fb      	strh	r3, [r7, #14]
    if (status != M24SR_ACTION_COMPLETED)
 8001f3e:	89fb      	ldrh	r3, [r7, #14]
 8001f40:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8001f44:	d001      	beq.n	8001f4a <NFC_TT4_OpenNDEFSession+0x9a>
    {
      return ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e00c      	b.n	8001f64 <NFC_TT4_OpenNDEFSession+0xb4>
    } 
    
    NDEFSessionOpenID = (uint32_t)(NDEF_fileID);
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	4a07      	ldr	r2, [pc, #28]	; (8001f6c <NFC_TT4_OpenNDEFSession+0xbc>)
 8001f4e:	6013      	str	r3, [r2, #0]
    
    return SUCCESS;
 8001f50:	2300      	movs	r3, #0
 8001f52:	e007      	b.n	8001f64 <NFC_TT4_OpenNDEFSession+0xb4>
  }
  else if(NDEFSessionOpenID == NDEF_fileID)
 8001f54:	88fa      	ldrh	r2, [r7, #6]
 8001f56:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <NFC_TT4_OpenNDEFSession+0xbc>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d101      	bne.n	8001f62 <NFC_TT4_OpenNDEFSession+0xb2>
  {
    /* Session already Open not an issue caller can perform access in NDEF file */
    return SUCCESS;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	e000      	b.n	8001f64 <NFC_TT4_OpenNDEFSession+0xb4>
  }
  
  return ERROR;  
 8001f62:	2301      	movs	r3, #1
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20000004 	.word	0x20000004
 8001f70:	deadbeef 	.word	0xdeadbeef

08001f74 <NFC_TT4_CloseNDEFSession>:
  * @param  NDEF_fileID : NDEF identification to select NDEF in M24SR
  * @retval SUCCESS : Session is closed
  * @retval ERROR : Not able to close session. 
  */
uint16_t NFC_TT4_CloseNDEFSession ( uint16_t NDEF_fileID )
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	80fb      	strh	r3, [r7, #6]
  uint16_t status = ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	81fb      	strh	r3, [r7, #14]
  
  if(NDEFSessionOpenID == (uint32_t)(NDEF_fileID))
 8001f82:	88fa      	ldrh	r2, [r7, #6]
 8001f84:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <NFC_TT4_CloseNDEFSession+0x50>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d10f      	bne.n	8001fac <NFC_TT4_CloseNDEFSession+0x38>
  {
    status = M24SR_Deselect(M24SR_I2C_ADDR);
 8001f8c:	20ac      	movs	r0, #172	; 0xac
 8001f8e:	f7ff fa3d 	bl	800140c <M24SR_Deselect>
 8001f92:	4603      	mov	r3, r0
 8001f94:	81fb      	strh	r3, [r7, #14]
    if (status != M24SR_ACTION_COMPLETED)
 8001f96:	89fb      	ldrh	r3, [r7, #14]
 8001f98:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8001f9c:	d001      	beq.n	8001fa2 <NFC_TT4_CloseNDEFSession+0x2e>
    {
      return ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e00c      	b.n	8001fbc <NFC_TT4_CloseNDEFSession+0x48>
    }
    NDEFSessionOpenID = NDEF_SESSION_CLOSED;
 8001fa2:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <NFC_TT4_CloseNDEFSession+0x50>)
 8001fa4:	4a08      	ldr	r2, [pc, #32]	; (8001fc8 <NFC_TT4_CloseNDEFSession+0x54>)
 8001fa6:	601a      	str	r2, [r3, #0]
    
    return SUCCESS;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	e007      	b.n	8001fbc <NFC_TT4_CloseNDEFSession+0x48>
  }
  else if(NDEFSessionOpenID == NDEF_SESSION_CLOSED)
 8001fac:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <NFC_TT4_CloseNDEFSession+0x50>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a05      	ldr	r2, [pc, #20]	; (8001fc8 <NFC_TT4_CloseNDEFSession+0x54>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d101      	bne.n	8001fba <NFC_TT4_CloseNDEFSession+0x46>
  {
    /* Not an error as session is already closed */
    return SUCCESS;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	e000      	b.n	8001fbc <NFC_TT4_CloseNDEFSession+0x48>
  }

  return ERROR;
 8001fba:	2301      	movs	r3, #1
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20000004 	.word	0x20000004
 8001fc8:	deadbeef 	.word	0xdeadbeef

08001fcc <NFC_TT4_ReadData>:
  * @param  DataSize : Number of byte to read
  * @param  pData : pointer on buffer to store read data
  * @retval Status (SW1&SW2) : Status of the operation. 
  */
uint16_t NFC_TT4_ReadData ( uint16_t Offset , uint16_t DataSize , uint8_t* pData)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	603a      	str	r2, [r7, #0]
 8001fd6:	80fb      	strh	r3, [r7, #6]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	80bb      	strh	r3, [r7, #4]
  uint16_t status;

  if( DataSize > M24SR_READ_MAX_NBBYTE)
 8001fdc:	88bb      	ldrh	r3, [r7, #4]
 8001fde:	2bf6      	cmp	r3, #246	; 0xf6
 8001fe0:	d928      	bls.n	8002034 <NFC_TT4_ReadData+0x68>
  {
    do
    {
      status = M24SR_ReadBinary (M24SR_I2C_ADDR, Offset, M24SR_READ_MAX_NBBYTE , pData);
 8001fe2:	88f9      	ldrh	r1, [r7, #6]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	22f6      	movs	r2, #246	; 0xf6
 8001fe8:	20ac      	movs	r0, #172	; 0xac
 8001fea:	f7ff fc1d 	bl	8001828 <M24SR_ReadBinary>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	81fb      	strh	r3, [r7, #14]
      Offset += M24SR_READ_MAX_NBBYTE;
 8001ff2:	88fb      	ldrh	r3, [r7, #6]
 8001ff4:	33f6      	adds	r3, #246	; 0xf6
 8001ff6:	80fb      	strh	r3, [r7, #6]
      pData += M24SR_READ_MAX_NBBYTE;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	33f6      	adds	r3, #246	; 0xf6
 8001ffc:	603b      	str	r3, [r7, #0]
      DataSize -= M24SR_READ_MAX_NBBYTE;
 8001ffe:	88bb      	ldrh	r3, [r7, #4]
 8002000:	3bf6      	subs	r3, #246	; 0xf6
 8002002:	80bb      	strh	r3, [r7, #4]
    }while( DataSize > M24SR_READ_MAX_NBBYTE && status == M24SR_ACTION_COMPLETED);
 8002004:	88bb      	ldrh	r3, [r7, #4]
 8002006:	2bf6      	cmp	r3, #246	; 0xf6
 8002008:	d903      	bls.n	8002012 <NFC_TT4_ReadData+0x46>
 800200a:	89fb      	ldrh	r3, [r7, #14]
 800200c:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8002010:	d0e7      	beq.n	8001fe2 <NFC_TT4_ReadData+0x16>
    if( status == M24SR_ACTION_COMPLETED && DataSize)
 8002012:	89fb      	ldrh	r3, [r7, #14]
 8002014:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8002018:	d115      	bne.n	8002046 <NFC_TT4_ReadData+0x7a>
 800201a:	88bb      	ldrh	r3, [r7, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d012      	beq.n	8002046 <NFC_TT4_ReadData+0x7a>
      status = M24SR_ReadBinary (M24SR_I2C_ADDR, Offset, (uint8_t)(DataSize) , pData);
 8002020:	88bb      	ldrh	r3, [r7, #4]
 8002022:	b2da      	uxtb	r2, r3
 8002024:	88f9      	ldrh	r1, [r7, #6]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	20ac      	movs	r0, #172	; 0xac
 800202a:	f7ff fbfd 	bl	8001828 <M24SR_ReadBinary>
 800202e:	4603      	mov	r3, r0
 8002030:	81fb      	strh	r3, [r7, #14]
 8002032:	e008      	b.n	8002046 <NFC_TT4_ReadData+0x7a>
  }
  else
    status = M24SR_ReadBinary (M24SR_I2C_ADDR, Offset, (uint8_t)(DataSize) , pData);
 8002034:	88bb      	ldrh	r3, [r7, #4]
 8002036:	b2da      	uxtb	r2, r3
 8002038:	88f9      	ldrh	r1, [r7, #6]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	20ac      	movs	r0, #172	; 0xac
 800203e:	f7ff fbf3 	bl	8001828 <M24SR_ReadBinary>
 8002042:	4603      	mov	r3, r0
 8002044:	81fb      	strh	r3, [r7, #14]

  return status;
 8002046:	89fb      	ldrh	r3, [r7, #14]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <NFC_TT4_ForceReadData>:
  * @param  DataSize : Number of byte to read
  * @param  pData : pointer on buffer to store read data
  * @retval Status (SW1&SW2) : Status of the operation.  
  */
uint16_t NFC_TT4_ForceReadData ( uint16_t Offset , uint16_t DataSize , uint8_t* pData)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	603a      	str	r2, [r7, #0]
 800205a:	80fb      	strh	r3, [r7, #6]
 800205c:	460b      	mov	r3, r1
 800205e:	80bb      	strh	r3, [r7, #4]
  uint16_t status;

  if( DataSize > M24SR_READ_MAX_NBBYTE)
 8002060:	88bb      	ldrh	r3, [r7, #4]
 8002062:	2bf6      	cmp	r3, #246	; 0xf6
 8002064:	d928      	bls.n	80020b8 <NFC_TT4_ForceReadData+0x68>
  {
    do
    {
      status = M24SR_STReadBinary (M24SR_I2C_ADDR, Offset, M24SR_READ_MAX_NBBYTE , pData);
 8002066:	88f9      	ldrh	r1, [r7, #6]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	22f6      	movs	r2, #246	; 0xf6
 800206c:	20ac      	movs	r0, #172	; 0xac
 800206e:	f7ff fc4b 	bl	8001908 <M24SR_STReadBinary>
 8002072:	4603      	mov	r3, r0
 8002074:	81fb      	strh	r3, [r7, #14]
      Offset += M24SR_READ_MAX_NBBYTE;
 8002076:	88fb      	ldrh	r3, [r7, #6]
 8002078:	33f6      	adds	r3, #246	; 0xf6
 800207a:	80fb      	strh	r3, [r7, #6]
      pData += M24SR_READ_MAX_NBBYTE;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	33f6      	adds	r3, #246	; 0xf6
 8002080:	603b      	str	r3, [r7, #0]
      DataSize -= M24SR_READ_MAX_NBBYTE;
 8002082:	88bb      	ldrh	r3, [r7, #4]
 8002084:	3bf6      	subs	r3, #246	; 0xf6
 8002086:	80bb      	strh	r3, [r7, #4]
    }while( DataSize > M24SR_READ_MAX_NBBYTE && status == M24SR_ACTION_COMPLETED);
 8002088:	88bb      	ldrh	r3, [r7, #4]
 800208a:	2bf6      	cmp	r3, #246	; 0xf6
 800208c:	d903      	bls.n	8002096 <NFC_TT4_ForceReadData+0x46>
 800208e:	89fb      	ldrh	r3, [r7, #14]
 8002090:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8002094:	d0e7      	beq.n	8002066 <NFC_TT4_ForceReadData+0x16>
    if( status == M24SR_ACTION_COMPLETED && DataSize)
 8002096:	89fb      	ldrh	r3, [r7, #14]
 8002098:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 800209c:	d115      	bne.n	80020ca <NFC_TT4_ForceReadData+0x7a>
 800209e:	88bb      	ldrh	r3, [r7, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d012      	beq.n	80020ca <NFC_TT4_ForceReadData+0x7a>
      status = M24SR_STReadBinary (M24SR_I2C_ADDR, Offset, (uint8_t)(DataSize) , pData);
 80020a4:	88bb      	ldrh	r3, [r7, #4]
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	88f9      	ldrh	r1, [r7, #6]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	20ac      	movs	r0, #172	; 0xac
 80020ae:	f7ff fc2b 	bl	8001908 <M24SR_STReadBinary>
 80020b2:	4603      	mov	r3, r0
 80020b4:	81fb      	strh	r3, [r7, #14]
 80020b6:	e008      	b.n	80020ca <NFC_TT4_ForceReadData+0x7a>
  }
  else
    status = M24SR_STReadBinary (M24SR_I2C_ADDR, Offset, (uint8_t)(DataSize) , pData);
 80020b8:	88bb      	ldrh	r3, [r7, #4]
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	88f9      	ldrh	r1, [r7, #6]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	20ac      	movs	r0, #172	; 0xac
 80020c2:	f7ff fc21 	bl	8001908 <M24SR_STReadBinary>
 80020c6:	4603      	mov	r3, r0
 80020c8:	81fb      	strh	r3, [r7, #14]

  return status;
 80020ca:	89fb      	ldrh	r3, [r7, #14]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <NFC_TT4_WriteData>:
  * @param  DataSize : Number of byte to read
  * @param  pData : pointer on buffer to copy in M24SR
  * @retval Status (SW1&SW2) : Status of the operation.  
  */
uint16_t NFC_TT4_WriteData ( uint16_t Offset , uint16_t DataSize , uint8_t* pData)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	603a      	str	r2, [r7, #0]
 80020de:	80fb      	strh	r3, [r7, #6]
 80020e0:	460b      	mov	r3, r1
 80020e2:	80bb      	strh	r3, [r7, #4]
  uint16_t status;

  if( DataSize > M24SR_WRITE_MAX_NBBYTE)
 80020e4:	88bb      	ldrh	r3, [r7, #4]
 80020e6:	2bf6      	cmp	r3, #246	; 0xf6
 80020e8:	d928      	bls.n	800213c <NFC_TT4_WriteData+0x68>
  {
    do
    {
      status = M24SR_UpdateBinary (M24SR_I2C_ADDR, Offset, M24SR_WRITE_MAX_NBBYTE , pData);
 80020ea:	88f9      	ldrh	r1, [r7, #6]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	22f6      	movs	r2, #246	; 0xf6
 80020f0:	20ac      	movs	r0, #172	; 0xac
 80020f2:	f7ff fc79 	bl	80019e8 <M24SR_UpdateBinary>
 80020f6:	4603      	mov	r3, r0
 80020f8:	81fb      	strh	r3, [r7, #14]
      Offset += M24SR_WRITE_MAX_NBBYTE;
 80020fa:	88fb      	ldrh	r3, [r7, #6]
 80020fc:	33f6      	adds	r3, #246	; 0xf6
 80020fe:	80fb      	strh	r3, [r7, #6]
      pData += M24SR_WRITE_MAX_NBBYTE;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	33f6      	adds	r3, #246	; 0xf6
 8002104:	603b      	str	r3, [r7, #0]
      DataSize -= M24SR_WRITE_MAX_NBBYTE;
 8002106:	88bb      	ldrh	r3, [r7, #4]
 8002108:	3bf6      	subs	r3, #246	; 0xf6
 800210a:	80bb      	strh	r3, [r7, #4]
    }while( DataSize > M24SR_WRITE_MAX_NBBYTE && status == M24SR_ACTION_COMPLETED);
 800210c:	88bb      	ldrh	r3, [r7, #4]
 800210e:	2bf6      	cmp	r3, #246	; 0xf6
 8002110:	d903      	bls.n	800211a <NFC_TT4_WriteData+0x46>
 8002112:	89fb      	ldrh	r3, [r7, #14]
 8002114:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8002118:	d0e7      	beq.n	80020ea <NFC_TT4_WriteData+0x16>
    if( status == M24SR_ACTION_COMPLETED && DataSize)
 800211a:	89fb      	ldrh	r3, [r7, #14]
 800211c:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8002120:	d115      	bne.n	800214e <NFC_TT4_WriteData+0x7a>
 8002122:	88bb      	ldrh	r3, [r7, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d012      	beq.n	800214e <NFC_TT4_WriteData+0x7a>
      status = M24SR_UpdateBinary (M24SR_I2C_ADDR, Offset, (uint8_t)(DataSize) , pData);
 8002128:	88bb      	ldrh	r3, [r7, #4]
 800212a:	b2da      	uxtb	r2, r3
 800212c:	88f9      	ldrh	r1, [r7, #6]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	20ac      	movs	r0, #172	; 0xac
 8002132:	f7ff fc59 	bl	80019e8 <M24SR_UpdateBinary>
 8002136:	4603      	mov	r3, r0
 8002138:	81fb      	strh	r3, [r7, #14]
 800213a:	e008      	b.n	800214e <NFC_TT4_WriteData+0x7a>
  }
  else
    status = M24SR_UpdateBinary (M24SR_I2C_ADDR, Offset, (uint8_t)(DataSize) , pData);
 800213c:	88bb      	ldrh	r3, [r7, #4]
 800213e:	b2da      	uxtb	r2, r3
 8002140:	88f9      	ldrh	r1, [r7, #6]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	20ac      	movs	r0, #172	; 0xac
 8002146:	f7ff fc4f 	bl	80019e8 <M24SR_UpdateBinary>
 800214a:	4603      	mov	r3, r0
 800214c:	81fb      	strh	r3, [r7, #14]

  return status;
 800214e:	89fb      	ldrh	r3, [r7, #14]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <NDEF_IsNDEFPresent>:
  * @param  None :
  * @retval SUCCESS : There is a NDEF file stored in tag
  * @retval ERROR : No NDEF in the tag. 
  */
static uint16_t NDEF_IsNDEFPresent ( void )
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
  uint16_t FileSize;
  uint8_t uM24SR_NDEFHeader [0x2];
  
  /* Check NDEF existence */
  NFC_TT4_ReadData ( NDEF_SIZE_OFFSET , 2 , uM24SR_NDEFHeader);
 800215e:	1d3b      	adds	r3, r7, #4
 8002160:	461a      	mov	r2, r3
 8002162:	2102      	movs	r1, #2
 8002164:	2000      	movs	r0, #0
 8002166:	f7ff ff31 	bl	8001fcc <NFC_TT4_ReadData>
  FileSize = (uint16_t) ((uM24SR_NDEFHeader[0x00]<<8) | uM24SR_NDEFHeader[0x01]);
 800216a:	793b      	ldrb	r3, [r7, #4]
 800216c:	021b      	lsls	r3, r3, #8
 800216e:	b21a      	sxth	r2, r3
 8002170:	797b      	ldrb	r3, [r7, #5]
 8002172:	b21b      	sxth	r3, r3
 8002174:	4313      	orrs	r3, r2
 8002176:	b21b      	sxth	r3, r3
 8002178:	80fb      	strh	r3, [r7, #6]
  
  if( FileSize != 0)
 800217a:	88fb      	ldrh	r3, [r7, #6]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <NDEF_IsNDEFPresent+0x2c>
    return NDEF_SUCCESS;
 8002180:	2300      	movs	r3, #0
 8002182:	e000      	b.n	8002186 <NDEF_IsNDEFPresent+0x2e>
  else
    return NDEF_ERROR;  
 8002184:	2301      	movs	r3, #1
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <NDEF_IdentifySPRecord>:
  * @param  pRecordStruct : pointer on the record structure to fill
  * @param  pPayload : pointer on the payload
  * @retval Status : Status of the operation.
  */
static uint16_t NDEF_IdentifySPRecord ( sRecordInfo *pRecordStruct, uint8_t* pPayload )
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b086      	sub	sp, #24
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	6039      	str	r1, [r7, #0]
  uint16_t status = NDEF_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	81fb      	strh	r3, [r7, #14]
  uint16_t SizeOfRecordHeader, TypeNbByte, PayloadLengthField, IDLengthField, IDNbByte;
  
  /* Is ID length field present */
  if( (*pPayload)&IL_Mask)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d002      	beq.n	80021ae <NDEF_IdentifySPRecord+0x20>
  {
    IDLengthField = ID_LENGTH_FIELD;
 80021a8:	2301      	movs	r3, #1
 80021aa:	827b      	strh	r3, [r7, #18]
 80021ac:	e001      	b.n	80021b2 <NDEF_IdentifySPRecord+0x24>
  }
  else
  {
    IDLengthField = 0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	827b      	strh	r3, [r7, #18]
  }
  
  /* it's a SR */
  if( (*pPayload)&SR_Mask)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	f003 0310 	and.w	r3, r3, #16
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d010      	beq.n	80021e0 <NDEF_IdentifySPRecord+0x52>
  {
    TypeNbByte = pPayload[1];
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	3301      	adds	r3, #1
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	82fb      	strh	r3, [r7, #22]
    PayloadLengthField = 1;
 80021c6:	2301      	movs	r3, #1
 80021c8:	82bb      	strh	r3, [r7, #20]
    if( IDLengthField == ID_LENGTH_FIELD)
 80021ca:	8a7b      	ldrh	r3, [r7, #18]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d104      	bne.n	80021da <NDEF_IdentifySPRecord+0x4c>
      IDNbByte = pPayload[3];
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	3303      	adds	r3, #3
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	823b      	strh	r3, [r7, #16]
 80021d8:	e012      	b.n	8002200 <NDEF_IdentifySPRecord+0x72>
    else
      IDNbByte = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	823b      	strh	r3, [r7, #16]
 80021de:	e00f      	b.n	8002200 <NDEF_IdentifySPRecord+0x72>
  }
  else
  {
    TypeNbByte = pPayload[1];
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	3301      	adds	r3, #1
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	82fb      	strh	r3, [r7, #22]
    PayloadLengthField = 4;
 80021e8:	2304      	movs	r3, #4
 80021ea:	82bb      	strh	r3, [r7, #20]
    if( IDLengthField == ID_LENGTH_FIELD)
 80021ec:	8a7b      	ldrh	r3, [r7, #18]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d104      	bne.n	80021fc <NDEF_IdentifySPRecord+0x6e>
      IDNbByte = pPayload[6];
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	3306      	adds	r3, #6
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	823b      	strh	r3, [r7, #16]
 80021fa:	e001      	b.n	8002200 <NDEF_IdentifySPRecord+0x72>
    else
      IDNbByte = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	823b      	strh	r3, [r7, #16]
  }
  
  SizeOfRecordHeader = RECORD_FLAG_FIELD + TYPE_LENGTH_FIELD + PayloadLengthField + IDLengthField + TypeNbByte + IDNbByte;
 8002200:	8aba      	ldrh	r2, [r7, #20]
 8002202:	8a7b      	ldrh	r3, [r7, #18]
 8002204:	4413      	add	r3, r2
 8002206:	b29a      	uxth	r2, r3
 8002208:	8afb      	ldrh	r3, [r7, #22]
 800220a:	4413      	add	r3, r2
 800220c:	b29a      	uxth	r2, r3
 800220e:	8a3b      	ldrh	r3, [r7, #16]
 8002210:	4413      	add	r3, r2
 8002212:	b29b      	uxth	r3, r3
 8002214:	3302      	adds	r3, #2
 8002216:	81bb      	strh	r3, [r7, #12]
  
  /* it's a SR */
  if( pPayload[0]&SR_Mask)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	f003 0310 	and.w	r3, r3, #16
 8002220:	2b00      	cmp	r3, #0
 8002222:	d036      	beq.n	8002292 <NDEF_IdentifySPRecord+0x104>
  {
    pRecordStruct->RecordFlags = pPayload[0];
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	781a      	ldrb	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	701a      	strb	r2, [r3, #0]
    pRecordStruct->TypeLength = TypeNbByte;
 800222c:	8afb      	ldrh	r3, [r7, #22]
 800222e:	b2da      	uxtb	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	705a      	strb	r2, [r3, #1]
    pRecordStruct->PayloadLength3 = 0;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	709a      	strb	r2, [r3, #2]
    pRecordStruct->PayloadLength2 = 0;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	70da      	strb	r2, [r3, #3]
    pRecordStruct->PayloadLength1 = 0;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	711a      	strb	r2, [r3, #4]
    pRecordStruct->PayloadLength0 = pPayload[2];
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	789a      	ldrb	r2, [r3, #2]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	715a      	strb	r2, [r3, #5]
    pRecordStruct->IDLength = IDNbByte;
 800224e:	8a3b      	ldrh	r3, [r7, #16]
 8002250:	b2da      	uxtb	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	719a      	strb	r2, [r3, #6]
    memcpy(pRecordStruct->Type, &pPayload[3+IDNbByte] , TypeNbByte);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	1dd8      	adds	r0, r3, #7
 800225a:	8a3b      	ldrh	r3, [r7, #16]
 800225c:	3303      	adds	r3, #3
 800225e:	461a      	mov	r2, r3
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	4413      	add	r3, r2
 8002264:	8afa      	ldrh	r2, [r7, #22]
 8002266:	4619      	mov	r1, r3
 8002268:	f010 fe32 	bl	8012ed0 <memcpy>
    memcpy(pRecordStruct->ID, &pPayload[3+IDNbByte+TypeNbByte] , IDNbByte);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f503 7083 	add.w	r0, r3, #262	; 0x106
 8002272:	8a3b      	ldrh	r3, [r7, #16]
 8002274:	1cda      	adds	r2, r3, #3
 8002276:	8afb      	ldrh	r3, [r7, #22]
 8002278:	4413      	add	r3, r2
 800227a:	461a      	mov	r2, r3
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	4413      	add	r3, r2
 8002280:	8a3a      	ldrh	r2, [r7, #16]
 8002282:	4619      	mov	r1, r3
 8002284:	f010 fe24 	bl	8012ed0 <memcpy>
    pRecordStruct->PayloadOffset = SizeOfRecordHeader;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	89ba      	ldrh	r2, [r7, #12]
 800228c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
 8002290:	e038      	b.n	8002304 <NDEF_IdentifySPRecord+0x176>
  }
  else
  {
    pRecordStruct->RecordFlags = pPayload[0];
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	781a      	ldrb	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	701a      	strb	r2, [r3, #0]
    pRecordStruct->TypeLength = TypeNbByte;
 800229a:	8afb      	ldrh	r3, [r7, #22]
 800229c:	b2da      	uxtb	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	705a      	strb	r2, [r3, #1]
    pRecordStruct->PayloadLength3 = pPayload[2];
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	789a      	ldrb	r2, [r3, #2]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	709a      	strb	r2, [r3, #2]
    pRecordStruct->PayloadLength2 = pPayload[3];
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	78da      	ldrb	r2, [r3, #3]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	70da      	strb	r2, [r3, #3]
    pRecordStruct->PayloadLength1 = pPayload[4];
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	791a      	ldrb	r2, [r3, #4]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	711a      	strb	r2, [r3, #4]
    pRecordStruct->PayloadLength0 = pPayload[5];
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	795a      	ldrb	r2, [r3, #5]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	715a      	strb	r2, [r3, #5]
    pRecordStruct->IDLength = IDNbByte;
 80022c2:	8a3b      	ldrh	r3, [r7, #16]
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	719a      	strb	r2, [r3, #6]
    memcpy(pRecordStruct->Type, &pPayload[6+IDNbByte] , TypeNbByte);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	1dd8      	adds	r0, r3, #7
 80022ce:	8a3b      	ldrh	r3, [r7, #16]
 80022d0:	3306      	adds	r3, #6
 80022d2:	461a      	mov	r2, r3
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	4413      	add	r3, r2
 80022d8:	8afa      	ldrh	r2, [r7, #22]
 80022da:	4619      	mov	r1, r3
 80022dc:	f010 fdf8 	bl	8012ed0 <memcpy>
    memcpy(pRecordStruct->ID, &pPayload[6+IDNbByte+TypeNbByte] , IDNbByte);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f503 7083 	add.w	r0, r3, #262	; 0x106
 80022e6:	8a3b      	ldrh	r3, [r7, #16]
 80022e8:	1d9a      	adds	r2, r3, #6
 80022ea:	8afb      	ldrh	r3, [r7, #22]
 80022ec:	4413      	add	r3, r2
 80022ee:	461a      	mov	r2, r3
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	4413      	add	r3, r2
 80022f4:	8a3a      	ldrh	r2, [r7, #16]
 80022f6:	4619      	mov	r1, r3
 80022f8:	f010 fdea 	bl	8012ed0 <memcpy>
    pRecordStruct->PayloadOffset = SizeOfRecordHeader;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	89ba      	ldrh	r2, [r7, #12]
 8002300:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
  }
  
  pRecordStruct->PayloadBufferAdd = (uint32_t)(pPayload+SizeOfRecordHeader);
 8002304:	89bb      	ldrh	r3, [r7, #12]
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	4413      	add	r3, r2
 800230a:	461a      	mov	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  
  status = NDEF_ParseRecordHeader(pRecordStruct);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f807 	bl	8002326 <NDEF_ParseRecordHeader>
 8002318:	4603      	mov	r3, r0
 800231a:	81fb      	strh	r3, [r7, #14]
  
  return status;
 800231c:	89fb      	ldrh	r3, [r7, #14]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <NDEF_ParseRecordHeader>:
  * @param  pRecordStruct : pointer on the record structure to fill
  * @retval SUCCESS : record identified and structure filled
  * @retval ERROR : Not supported 
  */
static uint16_t NDEF_ParseRecordHeader ( sRecordInfo *pRecordStruct )
{ 
 8002326:	b580      	push	{r7, lr}
 8002328:	b084      	sub	sp, #16
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  uint16_t  status = NDEF_SUCCESS;
 800232e:	2300      	movs	r3, #0
 8002330:	81fb      	strh	r3, [r7, #14]
  
  switch( (pRecordStruct->RecordFlags&TNF_Mask))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	2b04      	cmp	r3, #4
 800233c:	d00e      	beq.n	800235c <NDEF_ParseRecordHeader+0x36>
 800233e:	2b04      	cmp	r3, #4
 8002340:	dc10      	bgt.n	8002364 <NDEF_ParseRecordHeader+0x3e>
 8002342:	2b01      	cmp	r3, #1
 8002344:	d002      	beq.n	800234c <NDEF_ParseRecordHeader+0x26>
 8002346:	2b02      	cmp	r3, #2
 8002348:	d004      	beq.n	8002354 <NDEF_ParseRecordHeader+0x2e>
 800234a:	e00b      	b.n	8002364 <NDEF_ParseRecordHeader+0x3e>
  {
  case TNF_WellKnown:
    NDEF_ParseWellKnownType ( pRecordStruct );
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 f815 	bl	800237c <NDEF_ParseWellKnownType>
    break;      
 8002352:	e00d      	b.n	8002370 <NDEF_ParseRecordHeader+0x4a>
    
  case TNF_MediaType:
    NDEF_ParseMediaType ( pRecordStruct );
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 f879 	bl	800244c <NDEF_ParseMediaType>
    break;
 800235a:	e009      	b.n	8002370 <NDEF_ParseRecordHeader+0x4a>
    
  case TNF_NFCForumExternal:
    NDEF_ParseForumExternalType ( pRecordStruct);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 f8a5 	bl	80024ac <NDEF_ParseForumExternalType>
    break;
 8002362:	e005      	b.n	8002370 <NDEF_ParseRecordHeader+0x4a>
    
  default:
    /* currently not supported or unknown*/
    pRecordStruct->NDEF_Type = UNKNOWN_TYPE;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
    status = NDEF_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	81fb      	strh	r3, [r7, #14]
  }
  return status;
 8002370:	89fb      	ldrh	r3, [r7, #14]
}  
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <NDEF_ParseWellKnownType>:
  * @brief  This fonction parse the Well Known type record
  * @param  pRecordStruct : pointer on the record structure to fill
  * @retval None 
  */
static void NDEF_ParseWellKnownType ( sRecordInfo *pRecordStruct )
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint8_t* pPayload;
  
  pPayload = (uint8_t*)(pRecordStruct->PayloadBufferAdd);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800238a:	60fb      	str	r3, [r7, #12]
  
  if( !memcmp( &(pRecordStruct->Type), SMART_POSTER_TYPE_STRING, pRecordStruct->TypeLength))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	1dd8      	adds	r0, r3, #7
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	785b      	ldrb	r3, [r3, #1]
 8002394:	461a      	mov	r2, r3
 8002396:	492a      	ldr	r1, [pc, #168]	; (8002440 <NDEF_ParseWellKnownType+0xc4>)
 8002398:	f010 fd8c 	bl	8012eb4 <memcmp>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d107      	bne.n	80023b2 <NDEF_ParseWellKnownType+0x36>
  { 
    /* special case where  we have to parse others records */
    pRecordStruct->NDEF_Type = SMARTPOSTER_TYPE;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2206      	movs	r2, #6
 80023a6:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
    NDEF_ParseSP(pRecordStruct);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f8ce 	bl	800254c <NDEF_ParseSP>
    pRecordStruct->NDEF_Type = TEXT_TYPE;
  }    
  else
    pRecordStruct->NDEF_Type = UNKNOWN_TYPE;
  
}
 80023b0:	e042      	b.n	8002438 <NDEF_ParseWellKnownType+0xbc>
  else if( !memcmp( &(pRecordStruct->Type), URI_TYPE_STRING, pRecordStruct->TypeLength))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	1dd8      	adds	r0, r3, #7
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	785b      	ldrb	r3, [r3, #1]
 80023ba:	461a      	mov	r2, r3
 80023bc:	4921      	ldr	r1, [pc, #132]	; (8002444 <NDEF_ParseWellKnownType+0xc8>)
 80023be:	f010 fd79 	bl	8012eb4 <memcmp>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d122      	bne.n	800240e <NDEF_ParseWellKnownType+0x92>
    if( *pPayload == URI_ID_0x00) 
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d103      	bne.n	80023d8 <NDEF_ParseWellKnownType+0x5c>
      NDEF_ParseURI(pRecordStruct);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f889 	bl	80024e8 <NDEF_ParseURI>
}
 80023d6:	e02f      	b.n	8002438 <NDEF_ParseWellKnownType+0xbc>
    else if ( *pPayload > URI_ID_0x00 && *pPayload < URI_RFU ) 
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d011      	beq.n	8002404 <NDEF_ParseWellKnownType+0x88>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b23      	cmp	r3, #35	; 0x23
 80023e6:	d80d      	bhi.n	8002404 <NDEF_ParseWellKnownType+0x88>
      if ( *pPayload == (uint8_t) URI_ID_0x06)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b06      	cmp	r3, #6
 80023ee:	d104      	bne.n	80023fa <NDEF_ParseWellKnownType+0x7e>
        pRecordStruct->NDEF_Type = URI_EMAIL_TYPE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2205      	movs	r2, #5
 80023f4:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
      if ( *pPayload == (uint8_t) URI_ID_0x06)
 80023f8:	e01e      	b.n	8002438 <NDEF_ParseWellKnownType+0xbc>
        pRecordStruct->NDEF_Type = WELL_KNOWN_ABRIDGED_URI_TYPE;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2202      	movs	r2, #2
 80023fe:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
      if ( *pPayload == (uint8_t) URI_ID_0x06)
 8002402:	e019      	b.n	8002438 <NDEF_ParseWellKnownType+0xbc>
      pRecordStruct->NDEF_Type = UNKNOWN_TYPE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
}
 800240c:	e014      	b.n	8002438 <NDEF_ParseWellKnownType+0xbc>
  else if( !memcmp( &(pRecordStruct->Type), TEXT_TYPE_STRING, pRecordStruct->TypeLength))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	1dd8      	adds	r0, r3, #7
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	785b      	ldrb	r3, [r3, #1]
 8002416:	461a      	mov	r2, r3
 8002418:	490b      	ldr	r1, [pc, #44]	; (8002448 <NDEF_ParseWellKnownType+0xcc>)
 800241a:	f010 fd4b 	bl	8012eb4 <memcmp>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d104      	bne.n	800242e <NDEF_ParseWellKnownType+0xb2>
    pRecordStruct->NDEF_Type = TEXT_TYPE;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2208      	movs	r2, #8
 8002428:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
}
 800242c:	e004      	b.n	8002438 <NDEF_ParseWellKnownType+0xbc>
    pRecordStruct->NDEF_Type = UNKNOWN_TYPE;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
}
 8002436:	e7ff      	b.n	8002438 <NDEF_ParseWellKnownType+0xbc>
 8002438:	bf00      	nop
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	08015dac 	.word	0x08015dac
 8002444:	08015db0 	.word	0x08015db0
 8002448:	08015db4 	.word	0x08015db4

0800244c <NDEF_ParseMediaType>:
  * @brief  This fonction parse the Media type record
  * @param  pRecordStruct : pointer on the record structure to fill
  * @retval None 
  */
static void NDEF_ParseMediaType ( sRecordInfo *pRecordStruct )
{  
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  if( !memcmp( &(pRecordStruct->Type), VCARD_TYPE_STRING, pRecordStruct->TypeLength))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	1dd8      	adds	r0, r3, #7
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	785b      	ldrb	r3, [r3, #1]
 800245c:	461a      	mov	r2, r3
 800245e:	4911      	ldr	r1, [pc, #68]	; (80024a4 <NDEF_ParseMediaType+0x58>)
 8002460:	f010 fd28 	bl	8012eb4 <memcmp>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d104      	bne.n	8002474 <NDEF_ParseMediaType+0x28>
    pRecordStruct->NDEF_Type = VCARD_TYPE;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
  else if( !memcmp( &(pRecordStruct->Type), XVCARD_TYPE_STRING, pRecordStruct->TypeLength))
    pRecordStruct->NDEF_Type = VCARD_TYPE;
  else
    pRecordStruct->NDEF_Type = UNKNOWN_TYPE;
}
 8002472:	e013      	b.n	800249c <NDEF_ParseMediaType+0x50>
  else if( !memcmp( &(pRecordStruct->Type), XVCARD_TYPE_STRING, pRecordStruct->TypeLength))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	1dd8      	adds	r0, r3, #7
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	785b      	ldrb	r3, [r3, #1]
 800247c:	461a      	mov	r2, r3
 800247e:	490a      	ldr	r1, [pc, #40]	; (80024a8 <NDEF_ParseMediaType+0x5c>)
 8002480:	f010 fd18 	bl	8012eb4 <memcmp>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d104      	bne.n	8002494 <NDEF_ParseMediaType+0x48>
    pRecordStruct->NDEF_Type = VCARD_TYPE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
}
 8002492:	e003      	b.n	800249c <NDEF_ParseMediaType+0x50>
    pRecordStruct->NDEF_Type = UNKNOWN_TYPE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
}
 800249c:	bf00      	nop
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	08015db8 	.word	0x08015db8
 80024a8:	08015dc4 	.word	0x08015dc4

080024ac <NDEF_ParseForumExternalType>:
  * @brief  This fonction parse the Forum External type record
  * @param  pRecordStruct : pointer on the record structure to fill
  * @retval None 
  */
static void NDEF_ParseForumExternalType ( sRecordInfo *pRecordStruct )
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  if( !memcmp( &(pRecordStruct->Type), M24SR_DISCOVERY_APP_STRING, pRecordStruct->TypeLength))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	1dd8      	adds	r0, r3, #7
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	785b      	ldrb	r3, [r3, #1]
 80024bc:	461a      	mov	r2, r3
 80024be:	4909      	ldr	r1, [pc, #36]	; (80024e4 <NDEF_ParseForumExternalType+0x38>)
 80024c0:	f010 fcf8 	bl	8012eb4 <memcmp>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d104      	bne.n	80024d4 <NDEF_ParseForumExternalType+0x28>
    pRecordStruct->NDEF_Type = M24SR_DISCOVERY_APP_TYPE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	220a      	movs	r2, #10
 80024ce:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
  else
    pRecordStruct->NDEF_Type = UNKNOWN_TYPE;
}
 80024d2:	e003      	b.n	80024dc <NDEF_ParseForumExternalType+0x30>
    pRecordStruct->NDEF_Type = UNKNOWN_TYPE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
}
 80024dc:	bf00      	nop
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	08015dd4 	.word	0x08015dd4

080024e8 <NDEF_ParseURI>:
  * @brief  This fonction parse the URI type record
  * @param  pRecordStruct : pointer on the record structure to fill
  * @retval None 
  */
static void NDEF_ParseURI(sRecordInfo *pRecordStruct)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint8_t* pPayload;
  
  pPayload = (uint8_t*)(pRecordStruct->PayloadBufferAdd);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80024f6:	60fb      	str	r3, [r7, #12]
  pPayload ++; /* to skip URI identifier first URI payload byte */
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	3301      	adds	r3, #1
 80024fc:	60fb      	str	r3, [r7, #12]
  
  if( !memcmp( pPayload, SMS_TYPE_STRING, strlen(SMS_TYPE_STRING)) )
 80024fe:	2204      	movs	r2, #4
 8002500:	4910      	ldr	r1, [pc, #64]	; (8002544 <NDEF_ParseURI+0x5c>)
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f010 fcd6 	bl	8012eb4 <memcmp>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d104      	bne.n	8002518 <NDEF_ParseURI+0x30>
  { 
    pRecordStruct->NDEF_Type = URI_SMS_TYPE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2203      	movs	r2, #3
 8002512:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
    pRecordStruct->NDEF_Type = URI_GEO_TYPE;
  }
  else
    pRecordStruct->NDEF_Type = UNKNOWN_TYPE;
  
}
 8002516:	e010      	b.n	800253a <NDEF_ParseURI+0x52>
  else if( !memcmp( pPayload, GEO_TYPE_STRING, strlen(GEO_TYPE_STRING)) )
 8002518:	2204      	movs	r2, #4
 800251a:	490b      	ldr	r1, [pc, #44]	; (8002548 <NDEF_ParseURI+0x60>)
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f010 fcc9 	bl	8012eb4 <memcmp>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d104      	bne.n	8002532 <NDEF_ParseURI+0x4a>
    pRecordStruct->NDEF_Type = URI_GEO_TYPE;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2204      	movs	r2, #4
 800252c:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
}
 8002530:	e003      	b.n	800253a <NDEF_ParseURI+0x52>
    pRecordStruct->NDEF_Type = UNKNOWN_TYPE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
}
 800253a:	bf00      	nop
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	08015df4 	.word	0x08015df4
 8002548:	08015dfc 	.word	0x08015dfc

0800254c <NDEF_ParseSP>:
  * @brief  This fonction parse the Smart Poster 
  * @param  pRecordStruct : pointer on the record structure to fill
  * @retval None 
  */
static void NDEF_ParseSP(sRecordInfo *pRecordStruct)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b088      	sub	sp, #32
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint8_t* pPayload;
  uint32_t PayloadSize = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	613b      	str	r3, [r7, #16]
  uint32_t SPPayloadSize = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	60fb      	str	r3, [r7, #12]
  uint32_t OffsetInSPPayload =0;
 800255c:	2300      	movs	r3, #0
 800255e:	61bb      	str	r3, [r7, #24]
  uint32_t RecordPosition = 0;
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]
  sRecordInfo *pSPRecordStruct;
  
  /* initialize variable with size of the payload and poiter on data */
  PayloadSize = ((uint32_t)(pRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pRecordStruct->PayloadLength2)<<16) |
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	789b      	ldrb	r3, [r3, #2]
 8002568:	061a      	lsls	r2, r3, #24
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	78db      	ldrb	r3, [r3, #3]
 800256e:	041b      	lsls	r3, r3, #16
 8002570:	431a      	orrs	r2, r3
    ((uint32_t)(pRecordStruct->PayloadLength1)<<8)  | pRecordStruct->PayloadLength0;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	791b      	ldrb	r3, [r3, #4]
 8002576:	021b      	lsls	r3, r3, #8
  PayloadSize = ((uint32_t)(pRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pRecordStruct->PayloadLength2)<<16) |
 8002578:	4313      	orrs	r3, r2
    ((uint32_t)(pRecordStruct->PayloadLength1)<<8)  | pRecordStruct->PayloadLength0;
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	7952      	ldrb	r2, [r2, #5]
  PayloadSize = ((uint32_t)(pRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pRecordStruct->PayloadLength2)<<16) |
 800257e:	4313      	orrs	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
  
  pPayload = (uint8_t*)(pRecordStruct->PayloadBufferAdd);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002588:	61fb      	str	r3, [r7, #28]
  
  pSPRecordStruct = (sRecordInfo *)SPRecordStructAdd[0];
 800258a:	4b25      	ldr	r3, [pc, #148]	; (8002620 <NDEF_ParseSP+0xd4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	60bb      	str	r3, [r7, #8]
  
  /* Initailize the number of record find in the SP payload */
  pRecordStruct->NbOfRecordInSPPayload = 0;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
  
  do
  {
    pSPRecordStruct = (sRecordInfo *)SPRecordStructAdd[RecordPosition];
 8002598:	4a21      	ldr	r2, [pc, #132]	; (8002620 <NDEF_ParseSP+0xd4>)
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a0:	60bb      	str	r3, [r7, #8]
    /* identify the 1st record in the SP payload */
    if( NDEF_IdentifySPRecord ( pSPRecordStruct, pPayload ))
 80025a2:	69f9      	ldr	r1, [r7, #28]
 80025a4:	68b8      	ldr	r0, [r7, #8]
 80025a6:	f7ff fdf2 	bl	800218e <NDEF_IdentifySPRecord>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d02c      	beq.n	800260a <NDEF_ParseSP+0xbe>
    {
      /* store add of structure that will contain the other record information */
      pRecordStruct->NbOfRecordInSPPayload ++;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80025b6:	3301      	adds	r3, #1
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
      pRecordStruct->SPRecordStructAdd[RecordPosition] = (void *) pSPRecordStruct;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	3284      	adds	r2, #132	; 0x84
 80025c6:	68b9      	ldr	r1, [r7, #8]
 80025c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      
      /* After SPRecord + First Record check if we are at the end of NDEF file */
      SPPayloadSize = ((uint32_t)(pSPRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pSPRecordStruct->PayloadLength2)<<16) |
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	789b      	ldrb	r3, [r3, #2]
 80025d0:	061a      	lsls	r2, r3, #24
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	78db      	ldrb	r3, [r3, #3]
 80025d6:	041b      	lsls	r3, r3, #16
 80025d8:	431a      	orrs	r2, r3
        ((uint32_t)(pSPRecordStruct->PayloadLength1)<<8)  | pSPRecordStruct->PayloadLength0;
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	791b      	ldrb	r3, [r3, #4]
 80025de:	021b      	lsls	r3, r3, #8
      SPPayloadSize = ((uint32_t)(pSPRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pSPRecordStruct->PayloadLength2)<<16) |
 80025e0:	4313      	orrs	r3, r2
        ((uint32_t)(pSPRecordStruct->PayloadLength1)<<8)  | pSPRecordStruct->PayloadLength0;
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	7952      	ldrb	r2, [r2, #5]
      SPPayloadSize = ((uint32_t)(pSPRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pSPRecordStruct->PayloadLength2)<<16) |
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]
      
      OffsetInSPPayload += pSPRecordStruct->PayloadOffset + SPPayloadSize;
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 80025f0:	461a      	mov	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	4413      	add	r3, r2
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4413      	add	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
      pPayload += OffsetInSPPayload;
 80025fc:	69fa      	ldr	r2, [r7, #28]
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	4413      	add	r3, r2
 8002602:	61fb      	str	r3, [r7, #28]
      RecordPosition++;    
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	3301      	adds	r3, #1
 8002608:	617b      	str	r3, [r7, #20]
    }
  }
  while(  OffsetInSPPayload < PayloadSize && RecordPosition<SP_MAX_RECORD); /* there is another record */
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	429a      	cmp	r2, r3
 8002610:	d202      	bcs.n	8002618 <NDEF_ParseSP+0xcc>
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	2b02      	cmp	r3, #2
 8002616:	d9bf      	bls.n	8002598 <NDEF_ParseSP+0x4c>
  
}
 8002618:	bf00      	nop
 800261a:	3720      	adds	r7, #32
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	2000000c 	.word	0x2000000c

08002624 <NDEF_IdentifyNDEF>:
  * @retval SUCCESS : record struct filled
  * @retval ERROR : record struct not updated
  */

uint16_t NDEF_IdentifyNDEF ( sRecordInfo *pRecordStruct, uint8_t* pNDEF )
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint16_t status = NDEF_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	81fb      	strh	r3, [r7, #14]
  uint16_t SizeOfRecordHeader, TypeNbByte, PayloadLengthField, IDLengthField, IDNbByte;
  uint32_t PayloadSize;
  
  /* check NDEF present */
  if(NDEF_IsNDEFPresent() != NDEF_SUCCESS)
 8002632:	f7ff fd91 	bl	8002158 <NDEF_IsNDEFPresent>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <NDEF_IdentifyNDEF+0x1c>
  {
    return NDEF_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0f2      	b.n	8002826 <NDEF_IdentifyNDEF+0x202>
  }
  
  /* Analyse record layout */
  NFC_TT4_ReadData ( FIRST_RECORD_OFFSET , 1 , pNDEF);
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	2101      	movs	r1, #1
 8002644:	2002      	movs	r0, #2
 8002646:	f7ff fcc1 	bl	8001fcc <NFC_TT4_ReadData>
  
  /* Is ID length field present */
  if( (*pNDEF)&IL_Mask)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <NDEF_IdentifyNDEF+0x38>
  {
    IDLengthField = ID_LENGTH_FIELD;
 8002656:	2301      	movs	r3, #1
 8002658:	827b      	strh	r3, [r7, #18]
 800265a:	e001      	b.n	8002660 <NDEF_IdentifyNDEF+0x3c>
  }
  else
  {
    IDLengthField = 0;
 800265c:	2300      	movs	r3, #0
 800265e:	827b      	strh	r3, [r7, #18]
  }
  
  /* it's a SR */
  if( (*pNDEF)&SR_Mask)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	f003 0310 	and.w	r3, r3, #16
 8002668:	2b00      	cmp	r3, #0
 800266a:	d015      	beq.n	8002698 <NDEF_IdentifyNDEF+0x74>
  {
    /* Analyse short record layout */
    NFC_TT4_ReadData ( FIRST_RECORD_OFFSET , 4 , pNDEF);
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	2104      	movs	r1, #4
 8002670:	2002      	movs	r0, #2
 8002672:	f7ff fcab 	bl	8001fcc <NFC_TT4_ReadData>
    TypeNbByte = pNDEF[1];
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	3301      	adds	r3, #1
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	82fb      	strh	r3, [r7, #22]
    PayloadLengthField = 1;
 800267e:	2301      	movs	r3, #1
 8002680:	82bb      	strh	r3, [r7, #20]
    if( IDLengthField == ID_LENGTH_FIELD)
 8002682:	8a7b      	ldrh	r3, [r7, #18]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d104      	bne.n	8002692 <NDEF_IdentifyNDEF+0x6e>
      IDNbByte = pNDEF[3];
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	3303      	adds	r3, #3
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	823b      	strh	r3, [r7, #16]
 8002690:	e017      	b.n	80026c2 <NDEF_IdentifyNDEF+0x9e>
    else
      IDNbByte = 0;
 8002692:	2300      	movs	r3, #0
 8002694:	823b      	strh	r3, [r7, #16]
 8002696:	e014      	b.n	80026c2 <NDEF_IdentifyNDEF+0x9e>
  }
  else
  {
    /* Analyse normal record layout */
    NFC_TT4_ReadData ( FIRST_RECORD_OFFSET , 7 , pNDEF);
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	2107      	movs	r1, #7
 800269c:	2002      	movs	r0, #2
 800269e:	f7ff fc95 	bl	8001fcc <NFC_TT4_ReadData>
    TypeNbByte = pNDEF[1];
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	3301      	adds	r3, #1
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	82fb      	strh	r3, [r7, #22]
    PayloadLengthField = 4;
 80026aa:	2304      	movs	r3, #4
 80026ac:	82bb      	strh	r3, [r7, #20]
    if( IDLengthField == ID_LENGTH_FIELD)
 80026ae:	8a7b      	ldrh	r3, [r7, #18]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d104      	bne.n	80026be <NDEF_IdentifyNDEF+0x9a>
      IDNbByte = pNDEF[6];
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	3306      	adds	r3, #6
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	823b      	strh	r3, [r7, #16]
 80026bc:	e001      	b.n	80026c2 <NDEF_IdentifyNDEF+0x9e>
    else
      IDNbByte = 0;
 80026be:	2300      	movs	r3, #0
 80026c0:	823b      	strh	r3, [r7, #16]
  }
  
  SizeOfRecordHeader = RECORD_FLAG_FIELD + TYPE_LENGTH_FIELD + PayloadLengthField + IDLengthField + TypeNbByte + IDNbByte;
 80026c2:	8aba      	ldrh	r2, [r7, #20]
 80026c4:	8a7b      	ldrh	r3, [r7, #18]
 80026c6:	4413      	add	r3, r2
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	8afb      	ldrh	r3, [r7, #22]
 80026cc:	4413      	add	r3, r2
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	8a3b      	ldrh	r3, [r7, #16]
 80026d2:	4413      	add	r3, r2
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	3302      	adds	r3, #2
 80026d8:	81bb      	strh	r3, [r7, #12]
  
  /* Read record header */
  NFC_TT4_ReadData ( FIRST_RECORD_OFFSET , SizeOfRecordHeader , pNDEF);
 80026da:	89bb      	ldrh	r3, [r7, #12]
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	4619      	mov	r1, r3
 80026e0:	2002      	movs	r0, #2
 80026e2:	f7ff fc73 	bl	8001fcc <NFC_TT4_ReadData>
  /* it's a SR */
  if( pNDEF[0]&SR_Mask)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	f003 0310 	and.w	r3, r3, #16
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d036      	beq.n	8002760 <NDEF_IdentifyNDEF+0x13c>
  {
    pRecordStruct->RecordFlags = pNDEF[0];
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	781a      	ldrb	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	701a      	strb	r2, [r3, #0]
    pRecordStruct->TypeLength = TypeNbByte;
 80026fa:	8afb      	ldrh	r3, [r7, #22]
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	705a      	strb	r2, [r3, #1]
    pRecordStruct->PayloadLength3 = 0;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	709a      	strb	r2, [r3, #2]
    pRecordStruct->PayloadLength2 = 0;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	70da      	strb	r2, [r3, #3]
    pRecordStruct->PayloadLength1 = 0;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	711a      	strb	r2, [r3, #4]
    pRecordStruct->PayloadLength0 = pNDEF[2];
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	789a      	ldrb	r2, [r3, #2]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	715a      	strb	r2, [r3, #5]
    pRecordStruct->IDLength = IDNbByte;
 800271c:	8a3b      	ldrh	r3, [r7, #16]
 800271e:	b2da      	uxtb	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	719a      	strb	r2, [r3, #6]
    memcpy(pRecordStruct->Type, &pNDEF[3+IDNbByte] , TypeNbByte);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	1dd8      	adds	r0, r3, #7
 8002728:	8a3b      	ldrh	r3, [r7, #16]
 800272a:	3303      	adds	r3, #3
 800272c:	461a      	mov	r2, r3
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	4413      	add	r3, r2
 8002732:	8afa      	ldrh	r2, [r7, #22]
 8002734:	4619      	mov	r1, r3
 8002736:	f010 fbcb 	bl	8012ed0 <memcpy>
    memcpy(pRecordStruct->ID, &pNDEF[3+IDNbByte+TypeNbByte] , IDNbByte);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f503 7083 	add.w	r0, r3, #262	; 0x106
 8002740:	8a3b      	ldrh	r3, [r7, #16]
 8002742:	1cda      	adds	r2, r3, #3
 8002744:	8afb      	ldrh	r3, [r7, #22]
 8002746:	4413      	add	r3, r2
 8002748:	461a      	mov	r2, r3
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	4413      	add	r3, r2
 800274e:	8a3a      	ldrh	r2, [r7, #16]
 8002750:	4619      	mov	r1, r3
 8002752:	f010 fbbd 	bl	8012ed0 <memcpy>
    pRecordStruct->PayloadOffset = SizeOfRecordHeader;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	89ba      	ldrh	r2, [r7, #12]
 800275a:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
 800275e:	e038      	b.n	80027d2 <NDEF_IdentifyNDEF+0x1ae>
  }
  else
  {
    pRecordStruct->RecordFlags = pNDEF[0];
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	781a      	ldrb	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	701a      	strb	r2, [r3, #0]
    pRecordStruct->TypeLength = TypeNbByte;
 8002768:	8afb      	ldrh	r3, [r7, #22]
 800276a:	b2da      	uxtb	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	705a      	strb	r2, [r3, #1]
    pRecordStruct->PayloadLength3 = pNDEF[2];
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	789a      	ldrb	r2, [r3, #2]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	709a      	strb	r2, [r3, #2]
    pRecordStruct->PayloadLength2 = pNDEF[3];
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	78da      	ldrb	r2, [r3, #3]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	70da      	strb	r2, [r3, #3]
    pRecordStruct->PayloadLength1 = pNDEF[4];
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	791a      	ldrb	r2, [r3, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	711a      	strb	r2, [r3, #4]
    pRecordStruct->PayloadLength0 = pNDEF[5];
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	795a      	ldrb	r2, [r3, #5]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	715a      	strb	r2, [r3, #5]
    pRecordStruct->IDLength = IDNbByte;
 8002790:	8a3b      	ldrh	r3, [r7, #16]
 8002792:	b2da      	uxtb	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	719a      	strb	r2, [r3, #6]
    memcpy(pRecordStruct->Type, &pNDEF[6+IDNbByte] , TypeNbByte);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	1dd8      	adds	r0, r3, #7
 800279c:	8a3b      	ldrh	r3, [r7, #16]
 800279e:	3306      	adds	r3, #6
 80027a0:	461a      	mov	r2, r3
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	4413      	add	r3, r2
 80027a6:	8afa      	ldrh	r2, [r7, #22]
 80027a8:	4619      	mov	r1, r3
 80027aa:	f010 fb91 	bl	8012ed0 <memcpy>
    memcpy(pRecordStruct->ID, &pNDEF[6+IDNbByte+TypeNbByte] , IDNbByte);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f503 7083 	add.w	r0, r3, #262	; 0x106
 80027b4:	8a3b      	ldrh	r3, [r7, #16]
 80027b6:	1d9a      	adds	r2, r3, #6
 80027b8:	8afb      	ldrh	r3, [r7, #22]
 80027ba:	4413      	add	r3, r2
 80027bc:	461a      	mov	r2, r3
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	4413      	add	r3, r2
 80027c2:	8a3a      	ldrh	r2, [r7, #16]
 80027c4:	4619      	mov	r1, r3
 80027c6:	f010 fb83 	bl	8012ed0 <memcpy>
    pRecordStruct->PayloadOffset = SizeOfRecordHeader;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	89ba      	ldrh	r2, [r7, #12]
 80027ce:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
  }
  
  PayloadSize = ((uint32_t)(pRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pRecordStruct->PayloadLength2)<<16) |
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	789b      	ldrb	r3, [r3, #2]
 80027d6:	061a      	lsls	r2, r3, #24
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	78db      	ldrb	r3, [r3, #3]
 80027dc:	041b      	lsls	r3, r3, #16
 80027de:	431a      	orrs	r2, r3
    ((uint32_t)(pRecordStruct->PayloadLength1)<<8)  | pRecordStruct->PayloadLength0;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	791b      	ldrb	r3, [r3, #4]
 80027e4:	021b      	lsls	r3, r3, #8
  PayloadSize = ((uint32_t)(pRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pRecordStruct->PayloadLength2)<<16) |
 80027e6:	4313      	orrs	r3, r2
    ((uint32_t)(pRecordStruct->PayloadLength1)<<8)  | pRecordStruct->PayloadLength0;
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	7952      	ldrb	r2, [r2, #5]
  PayloadSize = ((uint32_t)(pRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pRecordStruct->PayloadLength2)<<16) |
 80027ec:	4313      	orrs	r3, r2
 80027ee:	60bb      	str	r3, [r7, #8]
  
  /* read Payload */
  status = NFC_TT4_ReadData ( (uint16_t)((FIRST_RECORD_OFFSET) + pRecordStruct->PayloadOffset) , PayloadSize , pNDEF);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 80027f6:	3302      	adds	r3, #2
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	b291      	uxth	r1, r2
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff fbe3 	bl	8001fcc <NFC_TT4_ReadData>
 8002806:	4603      	mov	r3, r0
 8002808:	81fb      	strh	r3, [r7, #14]
  
  if( status != NFC_TT4_ACTION_COMPLETED)
 800280a:	89fb      	ldrh	r3, [r7, #14]
 800280c:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8002810:	d001      	beq.n	8002816 <NDEF_IdentifyNDEF+0x1f2>
    return status;
 8002812:	89fb      	ldrh	r3, [r7, #14]
 8002814:	e007      	b.n	8002826 <NDEF_IdentifyNDEF+0x202>
  else
    pRecordStruct->PayloadBufferAdd = (uint32_t)(pNDEF);
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  
  NDEF_ParseRecordHeader(pRecordStruct);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7ff fd81 	bl	8002326 <NDEF_ParseRecordHeader>
  
  return NDEF_SUCCESS;
 8002824:	2300      	movs	r3, #0
}  
 8002826:	4618      	mov	r0, r3
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <NDEF_WriteNDEF>:
  * @param  pNDEF : pointer on the buffer containing the NDEF data
  * @retval SUCCESS : NDEF file data written in the tag
  * @retval ERROR : not able to store NDEF in tag
  */
uint16_t NDEF_WriteNDEF( uint8_t *pNDEF)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  uint16_t status = NDEF_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	81fb      	strh	r3, [r7, #14]
  uint16_t NDEF_Size = 0;
 800283a:	2300      	movs	r3, #0
 800283c:	81bb      	strh	r3, [r7, #12]
  
  NDEF_Size = (uint16_t) (*pNDEF << 8);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	b29b      	uxth	r3, r3
 8002844:	021b      	lsls	r3, r3, #8
 8002846:	81bb      	strh	r3, [r7, #12]
  NDEF_Size = NDEF_Size | (uint16_t) (*++pNDEF );
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3301      	adds	r3, #1
 800284c:	607b      	str	r3, [r7, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	b29a      	uxth	r2, r3
 8002854:	89bb      	ldrh	r3, [r7, #12]
 8002856:	4313      	orrs	r3, r2
 8002858:	81bb      	strh	r3, [r7, #12]
  
  status = NFC_TT4_WriteData( 0 , NDEF_Size+2 , --pNDEF);
 800285a:	89bb      	ldrh	r3, [r7, #12]
 800285c:	3302      	adds	r3, #2
 800285e:	b299      	uxth	r1, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3b01      	subs	r3, #1
 8002864:	607b      	str	r3, [r7, #4]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	2000      	movs	r0, #0
 800286a:	f7ff fc33 	bl	80020d4 <NFC_TT4_WriteData>
 800286e:	4603      	mov	r3, r0
 8002870:	81fb      	strh	r3, [r7, #14]
  
  if( status == NFC_TT4_ACTION_COMPLETED)
 8002872:	89fb      	ldrh	r3, [r7, #14]
 8002874:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8002878:	d101      	bne.n	800287e <NDEF_WriteNDEF+0x50>
    return NDEF_SUCCESS;
 800287a:	2300      	movs	r3, #0
 800287c:	e000      	b.n	8002880 <NDEF_WriteNDEF+0x52>
  else
    return NDEF_ERROR;
 800287e:	2301      	movs	r3, #1
  
}
 8002880:	4618      	mov	r0, r3
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <NDEF_AddAAR>:
  * @param  pAARStruct : pointer on structure that contain AAR information
  * @retval SUCCESS : AAR added
  * @retval ERROR : Not able to add AAR
  */
uint16_t NDEF_AddAAR ( sAARInfo *pAARStruct )
{
 8002888:	b5b0      	push	{r4, r5, r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint16_t status = NDEF_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	82fb      	strh	r3, [r7, #22]
  uint16_t DataSize;
  uint16_t Offset=0;
 8002894:	2300      	movs	r3, #0
 8002896:	817b      	strh	r3, [r7, #10]
  uint32_t AAROffset = 0;
 8002898:	2300      	movs	r3, #0
 800289a:	613b      	str	r3, [r7, #16]
  uint16_t NDEF_Size = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	81fb      	strh	r3, [r7, #14]
  uint8_t RecordFlag=0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	737b      	strb	r3, [r7, #13]
  /*               ID                 */  /* <---- Not Used  */ 
  /************************************/
  
  /* Do we have to add AAR to an existing NDEF message */  
  /* retrieve current NDEF size and current record flag*/
  status = NFC_TT4_ForceReadData( 0 , 3 , NDEF_Buffer);
 80028a4:	4a52      	ldr	r2, [pc, #328]	; (80029f0 <NDEF_AddAAR+0x168>)
 80028a6:	2103      	movs	r1, #3
 80028a8:	2000      	movs	r0, #0
 80028aa:	f7ff fbd1 	bl	8002050 <NFC_TT4_ForceReadData>
 80028ae:	4603      	mov	r3, r0
 80028b0:	82fb      	strh	r3, [r7, #22]

  if( status == NFC_TT4_ACTION_COMPLETED)
 80028b2:	8afb      	ldrh	r3, [r7, #22]
 80028b4:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 80028b8:	d10d      	bne.n	80028d6 <NDEF_AddAAR+0x4e>
  {
    NDEF_Size = (uint16_t) (NDEF_Buffer[0] << 8);
 80028ba:	4b4d      	ldr	r3, [pc, #308]	; (80029f0 <NDEF_AddAAR+0x168>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	b29b      	uxth	r3, r3
 80028c0:	021b      	lsls	r3, r3, #8
 80028c2:	81fb      	strh	r3, [r7, #14]
    NDEF_Size = NDEF_Size | (uint16_t) (NDEF_Buffer[1]);
 80028c4:	4b4a      	ldr	r3, [pc, #296]	; (80029f0 <NDEF_AddAAR+0x168>)
 80028c6:	785b      	ldrb	r3, [r3, #1]
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	89fb      	ldrh	r3, [r7, #14]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	81fb      	strh	r3, [r7, #14]
    RecordFlag = NDEF_Buffer[2];
 80028d0:	4b47      	ldr	r3, [pc, #284]	; (80029f0 <NDEF_AddAAR+0x168>)
 80028d2:	789b      	ldrb	r3, [r3, #2]
 80028d4:	737b      	strb	r3, [r7, #13]
  }
  
  if( NDEF_Size != 0)
 80028d6:	89fb      	ldrh	r3, [r7, #14]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d009      	beq.n	80028f0 <NDEF_AddAAR+0x68>
  {
    AAROffset = NDEF_Size +2;
 80028dc:	89fb      	ldrh	r3, [r7, #14]
 80028de:	3302      	adds	r3, #2
 80028e0:	613b      	str	r3, [r7, #16]
    RecordFlag &= 0xBF; /* remove ME flag on NDEF */
 80028e2:	7b7b      	ldrb	r3, [r7, #13]
 80028e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028e8:	737b      	strb	r3, [r7, #13]
    AARRecordFlag = 0x54; /* don't put MB flag */
 80028ea:	2354      	movs	r3, #84	; 0x54
 80028ec:	733b      	strb	r3, [r7, #12]
 80028ee:	e003      	b.n	80028f8 <NDEF_AddAAR+0x70>
  }
  else
  {
    AAROffset = 2;
 80028f0:	2302      	movs	r3, #2
 80028f2:	613b      	str	r3, [r7, #16]
    AARRecordFlag = 0xD4; /* put MB and ME flag */
 80028f4:	23d4      	movs	r3, #212	; 0xd4
 80028f6:	733b      	strb	r3, [r7, #12]
  }
  
  /* fill AAR record header */
  Offset = 0;
 80028f8:	2300      	movs	r3, #0
 80028fa:	817b      	strh	r3, [r7, #10]
  NDEF_Buffer[Offset++] = AARRecordFlag;   /* Record Flag */
 80028fc:	897b      	ldrh	r3, [r7, #10]
 80028fe:	1c5a      	adds	r2, r3, #1
 8002900:	817a      	strh	r2, [r7, #10]
 8002902:	4619      	mov	r1, r3
 8002904:	4a3a      	ldr	r2, [pc, #232]	; (80029f0 <NDEF_AddAAR+0x168>)
 8002906:	7b3b      	ldrb	r3, [r7, #12]
 8002908:	5453      	strb	r3, [r2, r1]
  NDEF_Buffer[Offset++] = AAR_TYPE_STRING_LENGTH;
 800290a:	897b      	ldrh	r3, [r7, #10]
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	817a      	strh	r2, [r7, #10]
 8002910:	461a      	mov	r2, r3
 8002912:	4b37      	ldr	r3, [pc, #220]	; (80029f0 <NDEF_AddAAR+0x168>)
 8002914:	210f      	movs	r1, #15
 8002916:	5499      	strb	r1, [r3, r2]
  NDEF_Buffer[Offset++] = 0x00; /* Will be filled at the end when payload size is known */
 8002918:	897b      	ldrh	r3, [r7, #10]
 800291a:	1c5a      	adds	r2, r3, #1
 800291c:	817a      	strh	r2, [r7, #10]
 800291e:	461a      	mov	r2, r3
 8002920:	4b33      	ldr	r3, [pc, #204]	; (80029f0 <NDEF_AddAAR+0x168>)
 8002922:	2100      	movs	r1, #0
 8002924:	5499      	strb	r1, [r3, r2]

  memcpy(&NDEF_Buffer[Offset], AAR_TYPE_STRING, AAR_TYPE_STRING_LENGTH);
 8002926:	897b      	ldrh	r3, [r7, #10]
 8002928:	4a31      	ldr	r2, [pc, #196]	; (80029f0 <NDEF_AddAAR+0x168>)
 800292a:	4413      	add	r3, r2
 800292c:	220f      	movs	r2, #15
 800292e:	4931      	ldr	r1, [pc, #196]	; (80029f4 <NDEF_AddAAR+0x16c>)
 8002930:	4618      	mov	r0, r3
 8002932:	f010 facd 	bl	8012ed0 <memcpy>

  /* fill AAR payload */
  memcpy( &NDEF_Buffer[Offset + AAR_TYPE_STRING_LENGTH], pAARStruct->PakageName,strlen(pAARStruct->PakageName));
 8002936:	897b      	ldrh	r3, [r7, #10]
 8002938:	330f      	adds	r3, #15
 800293a:	4a2d      	ldr	r2, [pc, #180]	; (80029f0 <NDEF_AddAAR+0x168>)
 800293c:	189c      	adds	r4, r3, r2
 800293e:	687d      	ldr	r5, [r7, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4618      	mov	r0, r3
 8002944:	f7fd fc44 	bl	80001d0 <strlen>
 8002948:	4603      	mov	r3, r0
 800294a:	461a      	mov	r2, r3
 800294c:	4629      	mov	r1, r5
 800294e:	4620      	mov	r0, r4
 8002950:	f010 fabe 	bl	8012ed0 <memcpy>

  NDEF_Buffer[2] = strlen(pAARStruct->PakageName);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4618      	mov	r0, r3
 8002958:	f7fd fc3a 	bl	80001d0 <strlen>
 800295c:	4603      	mov	r3, r0
 800295e:	b2da      	uxtb	r2, r3
 8002960:	4b23      	ldr	r3, [pc, #140]	; (80029f0 <NDEF_AddAAR+0x168>)
 8002962:	709a      	strb	r2, [r3, #2]

  DataSize = Offset + AAR_TYPE_STRING_LENGTH + strlen(pAARStruct->PakageName);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4618      	mov	r0, r3
 8002968:	f7fd fc32 	bl	80001d0 <strlen>
 800296c:	4603      	mov	r3, r0
 800296e:	b29a      	uxth	r2, r3
 8002970:	897b      	ldrh	r3, [r7, #10]
 8002972:	4413      	add	r3, r2
 8002974:	b29b      	uxth	r3, r3
 8002976:	330f      	adds	r3, #15
 8002978:	813b      	strh	r3, [r7, #8]

  /* Write NDEF */
  status = NFC_TT4_WriteData ( AAROffset , DataSize , NDEF_Buffer);
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	b29b      	uxth	r3, r3
 800297e:	8939      	ldrh	r1, [r7, #8]
 8002980:	4a1b      	ldr	r2, [pc, #108]	; (80029f0 <NDEF_AddAAR+0x168>)
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff fba6 	bl	80020d4 <NFC_TT4_WriteData>
 8002988:	4603      	mov	r3, r0
 800298a:	82fb      	strh	r3, [r7, #22]

  /* Write NDEF size to complete*/
  if( status == NFC_TT4_ACTION_COMPLETED)
 800298c:	8afb      	ldrh	r3, [r7, #22]
 800298e:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8002992:	d122      	bne.n	80029da <NDEF_AddAAR+0x152>
  {
    DataSize = NDEF_Size + DataSize; /* Must add to the NDEF size the size of the AAR record*/
 8002994:	89fa      	ldrh	r2, [r7, #14]
 8002996:	893b      	ldrh	r3, [r7, #8]
 8002998:	4413      	add	r3, r2
 800299a:	813b      	strh	r3, [r7, #8]
    NDEF_Buffer[0] = (DataSize & 0xFF00)>>8;
 800299c:	893b      	ldrh	r3, [r7, #8]
 800299e:	0a1b      	lsrs	r3, r3, #8
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <NDEF_AddAAR+0x168>)
 80029a6:	701a      	strb	r2, [r3, #0]
    NDEF_Buffer[1] = (DataSize & 0x00FF);
 80029a8:	893b      	ldrh	r3, [r7, #8]
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	4b10      	ldr	r3, [pc, #64]	; (80029f0 <NDEF_AddAAR+0x168>)
 80029ae:	705a      	strb	r2, [r3, #1]
    if( NDEF_Size != 0)
 80029b0:	89fb      	ldrh	r3, [r7, #14]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <NDEF_AddAAR+0x144>
    {
      NDEF_Buffer[2] = RecordFlag;
 80029b6:	4a0e      	ldr	r2, [pc, #56]	; (80029f0 <NDEF_AddAAR+0x168>)
 80029b8:	7b7b      	ldrb	r3, [r7, #13]
 80029ba:	7093      	strb	r3, [r2, #2]
      status = NFC_TT4_WriteData ( 0x00 , 3 , NDEF_Buffer);
 80029bc:	4a0c      	ldr	r2, [pc, #48]	; (80029f0 <NDEF_AddAAR+0x168>)
 80029be:	2103      	movs	r1, #3
 80029c0:	2000      	movs	r0, #0
 80029c2:	f7ff fb87 	bl	80020d4 <NFC_TT4_WriteData>
 80029c6:	4603      	mov	r3, r0
 80029c8:	82fb      	strh	r3, [r7, #22]
 80029ca:	e006      	b.n	80029da <NDEF_AddAAR+0x152>
    }
    else
      status = NFC_TT4_WriteData ( 0x00 , 2 , NDEF_Buffer);
 80029cc:	4a08      	ldr	r2, [pc, #32]	; (80029f0 <NDEF_AddAAR+0x168>)
 80029ce:	2102      	movs	r1, #2
 80029d0:	2000      	movs	r0, #0
 80029d2:	f7ff fb7f 	bl	80020d4 <NFC_TT4_WriteData>
 80029d6:	4603      	mov	r3, r0
 80029d8:	82fb      	strh	r3, [r7, #22]
  }
  
  
  if( status == NFC_TT4_ACTION_COMPLETED)
 80029da:	8afb      	ldrh	r3, [r7, #22]
 80029dc:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 80029e0:	d101      	bne.n	80029e6 <NDEF_AddAAR+0x15e>
    return NDEF_SUCCESS;
 80029e2:	2300      	movs	r3, #0
 80029e4:	e000      	b.n	80029e8 <NDEF_AddAAR+0x160>
  else
    return NDEF_ERROR;
 80029e6:	2301      	movs	r3, #1
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bdb0      	pop	{r4, r5, r7, pc}
 80029f0:	200022c8 	.word	0x200022c8
 80029f4:	08015e04 	.word	0x08015e04

080029f8 <NDEF_FillEmailStruct>:
  * @param  PayloadSize : number of data in the payload
  * @param  pEmailStruct : pointer on the structure to fill
  * @retval NONE 
  */
static void NDEF_FillEmailStruct( uint8_t* pPayload, uint32_t PayloadSize, sEmailInfo *pEmailStruct)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  uint8_t* pLastByteAdd, *pLook4Word, *pEndString ;
  uint32_t SizeOfKeyWord;
  
  /* First charactere force to NULL in case not matching found */
  *pEmailStruct->EmailAdd = 0;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	701a      	strb	r2, [r3, #0]
  *pEmailStruct->Subject = 0;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  *pEmailStruct->Message = 0;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
  
  /* Interresting information are stored before picture if any */
  /* Moreover picture is not used in this demonstration SW */  
  pLastByteAdd = (uint8_t*)(pPayload + PayloadSize);
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	4413      	add	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
  
  /* first byte should be the "mailto:" well know URI type, skip it */
  pLook4Word = ++pPayload;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	3301      	adds	r3, #1
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	617b      	str	r3, [r7, #20]
  
  pEndString = pLook4Word;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	61fb      	str	r3, [r7, #28]
  
  /* Retrieve email add */
  if( pLook4Word != pLastByteAdd)
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d01f      	beq.n	8002a78 <NDEF_FillEmailStruct+0x80>
  {  
    while( memcmp( pEndString, URI_FIRST_DATA_END, URI_FIRST_DATA_END_LENGTH) && pEndString<pLastByteAdd )
 8002a38:	e002      	b.n	8002a40 <NDEF_FillEmailStruct+0x48>
    {
      pEndString++;
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	61fb      	str	r3, [r7, #28]
    while( memcmp( pEndString, URI_FIRST_DATA_END, URI_FIRST_DATA_END_LENGTH) && pEndString<pLastByteAdd )
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	781a      	ldrb	r2, [r3, #0]
 8002a44:	4b42      	ldr	r3, [pc, #264]	; (8002b50 <NDEF_FillEmailStruct+0x158>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d003      	beq.n	8002a54 <NDEF_FillEmailStruct+0x5c>
 8002a4c:	69fa      	ldr	r2, [r7, #28]
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d3f2      	bcc.n	8002a3a <NDEF_FillEmailStruct+0x42>
    }
    if( pEndString != pLastByteAdd)
 8002a54:	69fa      	ldr	r2, [r7, #28]
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d00d      	beq.n	8002a78 <NDEF_FillEmailStruct+0x80>
    {
      memcpy( pEmailStruct->EmailAdd, pLook4Word, pEndString-pLook4Word);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	69fa      	ldr	r2, [r7, #28]
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	461a      	mov	r2, r3
 8002a66:	6979      	ldr	r1, [r7, #20]
 8002a68:	f010 fa32 	bl	8012ed0 <memcpy>
      /* add end of string charactere */
      pEmailStruct->EmailAdd[pEndString-pLook4Word] = 0;  
 8002a6c:	69fa      	ldr	r2, [r7, #28]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	2100      	movs	r1, #0
 8002a76:	54d1      	strb	r1, [r2, r3]
    }
  }  
  
  pEndString += URI_FIRST_DATA_END_LENGTH;
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	61fb      	str	r3, [r7, #28]
  pLook4Word = pEndString;
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	617b      	str	r3, [r7, #20]
  
  /* check if e-mail subject is present */
  if(!memcmp( pLook4Word, SUBJECT_BEGIN_STRING, SUBJECT_BEGIN_STRING_LENGTH))
 8002a82:	2208      	movs	r2, #8
 8002a84:	4933      	ldr	r1, [pc, #204]	; (8002b54 <NDEF_FillEmailStruct+0x15c>)
 8002a86:	6978      	ldr	r0, [r7, #20]
 8002a88:	f010 fa14 	bl	8012eb4 <memcmp>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d132      	bne.n	8002af8 <NDEF_FillEmailStruct+0x100>
  {    
    SizeOfKeyWord = SUBJECT_BEGIN_STRING_LENGTH;
 8002a92:	2308      	movs	r3, #8
 8002a94:	613b      	str	r3, [r7, #16]
    
    /* Retrieve subject */
    if( pLook4Word != pLastByteAdd)
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d02c      	beq.n	8002af8 <NDEF_FillEmailStruct+0x100>
    {
      pLook4Word += SizeOfKeyWord;
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	617b      	str	r3, [r7, #20]
      pEndString = pLook4Word;
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	61fb      	str	r3, [r7, #28]
      while( memcmp( pEndString, URI_SECOND_DATA_END, URI_SECOND_DATA_END_LENGTH) && pEndString<pLastByteAdd )
 8002aaa:	e002      	b.n	8002ab2 <NDEF_FillEmailStruct+0xba>
      {
        pEndString++;
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	61fb      	str	r3, [r7, #28]
      while( memcmp( pEndString, URI_SECOND_DATA_END, URI_SECOND_DATA_END_LENGTH) && pEndString<pLastByteAdd )
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	781a      	ldrb	r2, [r3, #0]
 8002ab6:	4b28      	ldr	r3, [pc, #160]	; (8002b58 <NDEF_FillEmailStruct+0x160>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d003      	beq.n	8002ac6 <NDEF_FillEmailStruct+0xce>
 8002abe:	69fa      	ldr	r2, [r7, #28]
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d3f2      	bcc.n	8002aac <NDEF_FillEmailStruct+0xb4>
      }
      if( pEndString != pLastByteAdd)
 8002ac6:	69fa      	ldr	r2, [r7, #28]
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d011      	beq.n	8002af2 <NDEF_FillEmailStruct+0xfa>
      {
        memcpy( pEmailStruct->Subject, pLook4Word, pEndString-pLook4Word);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8002ad4:	69fa      	ldr	r2, [r7, #28]
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	461a      	mov	r2, r3
 8002adc:	6979      	ldr	r1, [r7, #20]
 8002ade:	f010 f9f7 	bl	8012ed0 <memcpy>
        /* add end of string charactere */
        pEmailStruct->Subject[pEndString-pLook4Word] = 0;  
 8002ae2:	69fa      	ldr	r2, [r7, #28]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	4413      	add	r3, r2
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      }
      pEndString += URI_SECOND_DATA_END_LENGTH;
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	3301      	adds	r3, #1
 8002af6:	61fb      	str	r3, [r7, #28]
    }    
  }
  
  pLook4Word = pEndString;  
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	617b      	str	r3, [r7, #20]
  
  /* check if e-mail message is present */
  if(!memcmp( pLook4Word, MESSAGE_BEGIN_STRING, MESSAGE_BEGIN_STRING_LENGTH))
 8002afc:	2205      	movs	r2, #5
 8002afe:	4917      	ldr	r1, [pc, #92]	; (8002b5c <NDEF_FillEmailStruct+0x164>)
 8002b00:	6978      	ldr	r0, [r7, #20]
 8002b02:	f010 f9d7 	bl	8012eb4 <memcmp>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d11c      	bne.n	8002b46 <NDEF_FillEmailStruct+0x14e>
  {
    pEndString += MESSAGE_BEGIN_STRING_LENGTH;
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	3305      	adds	r3, #5
 8002b10:	61fb      	str	r3, [r7, #28]
    /* Retrieve message */
    memcpy( pEmailStruct->Message, pEndString, PayloadSize-(pEndString-pPayload+1));
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 8002b18:	69fa      	ldr	r2, [r7, #28]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	461a      	mov	r2, r3
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	1a9b      	subs	r3, r3, r2
 8002b24:	3b01      	subs	r3, #1
 8002b26:	461a      	mov	r2, r3
 8002b28:	69f9      	ldr	r1, [r7, #28]
 8002b2a:	f010 f9d1 	bl	8012ed0 <memcpy>
    /* add end of string charactere */
    pEmailStruct->Message[PayloadSize-(pEndString-pPayload+1)] = 0;    
 8002b2e:	69fa      	ldr	r2, [r7, #28]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	461a      	mov	r2, r3
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	1a9b      	subs	r3, r3, r2
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	4413      	add	r3, r2
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
  }
}
 8002b46:	bf00      	nop
 8002b48:	3720      	adds	r7, #32
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	08015e14 	.word	0x08015e14
 8002b54:	08015e18 	.word	0x08015e18
 8002b58:	08015e24 	.word	0x08015e24
 8002b5c:	08015e28 	.word	0x08015e28

08002b60 <NDEF_ReadURI_Email>:
  * @param  pRecordStruct : Pointer on the record structure
  * @param  pEmailStruct : pointer on the structure to fill
  * @retval NONE 
  */
static void NDEF_ReadURI_Email ( sRecordInfo *pRecordStruct, sEmailInfo *pEmailStruct )
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint8_t* pPayload;
  uint32_t PayloadSize;
  
  PayloadSize = ((uint32_t)(pRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pRecordStruct->PayloadLength2)<<16) |
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	789b      	ldrb	r3, [r3, #2]
 8002b6e:	061a      	lsls	r2, r3, #24
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	78db      	ldrb	r3, [r3, #3]
 8002b74:	041b      	lsls	r3, r3, #16
 8002b76:	431a      	orrs	r2, r3
    ((uint32_t)(pRecordStruct->PayloadLength1)<<8)  | pRecordStruct->PayloadLength0;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	791b      	ldrb	r3, [r3, #4]
 8002b7c:	021b      	lsls	r3, r3, #8
  PayloadSize = ((uint32_t)(pRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pRecordStruct->PayloadLength2)<<16) |
 8002b7e:	4313      	orrs	r3, r2
    ((uint32_t)(pRecordStruct->PayloadLength1)<<8)  | pRecordStruct->PayloadLength0;
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	7952      	ldrb	r2, [r2, #5]
  PayloadSize = ((uint32_t)(pRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pRecordStruct->PayloadLength2)<<16) |
 8002b84:	4313      	orrs	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]
  
  /* Read record header */
  pPayload = (uint8_t*)(pRecordStruct->PayloadBufferAdd);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002b8e:	60bb      	str	r3, [r7, #8]
  
  if( pRecordStruct->NDEF_Type == URI_EMAIL_TYPE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 8002b96:	2b05      	cmp	r3, #5
 8002b98:	d104      	bne.n	8002ba4 <NDEF_ReadURI_Email+0x44>
    NDEF_FillEmailStruct(pPayload , PayloadSize, pEmailStruct);
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	68f9      	ldr	r1, [r7, #12]
 8002b9e:	68b8      	ldr	r0, [r7, #8]
 8002ba0:	f7ff ff2a 	bl	80029f8 <NDEF_FillEmailStruct>
  
}
 8002ba4:	bf00      	nop
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <NDEF_ReadEmail>:
  * @param  pEmailStruct : pointer on the structure to fill 
  * @retval SUCCESS : Email information from NDEF have been retrieved
  * @retval ERROR : Not able to retrieve Email information
  */
uint16_t NDEF_ReadEmail(sRecordInfo *pRecordStruct, sEmailInfo *pEmailStruct)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint16_t status = NDEF_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	83fb      	strh	r3, [r7, #30]
  sRecordInfo *pSPRecordStruct;  
  uint32_t PayloadSize, RecordPosition;
  uint8_t* pData;
  
  
  if( pRecordStruct->NDEF_Type == URI_EMAIL_TYPE )
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 8002bc0:	2b05      	cmp	r3, #5
 8002bc2:	d106      	bne.n	8002bd2 <NDEF_ReadEmail+0x26>
  {  
    NDEF_ReadURI_Email(pRecordStruct, pEmailStruct );
 8002bc4:	6839      	ldr	r1, [r7, #0]
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7ff ffca 	bl	8002b60 <NDEF_ReadURI_Email>
    status = NDEF_SUCCESS;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	83fb      	strh	r3, [r7, #30]
 8002bd0:	e04f      	b.n	8002c72 <NDEF_ReadEmail+0xc6>
  }
  else if( pRecordStruct->NDEF_Type == SMARTPOSTER_TYPE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 8002bd8:	2b06      	cmp	r3, #6
 8002bda:	d14a      	bne.n	8002c72 <NDEF_ReadEmail+0xc6>
  {
    for (RecordPosition = 0; RecordPosition<pRecordStruct->NbOfRecordInSPPayload; RecordPosition++)
 8002bdc:	2300      	movs	r3, #0
 8002bde:	61bb      	str	r3, [r7, #24]
 8002be0:	e040      	b.n	8002c64 <NDEF_ReadEmail+0xb8>
    {
      pSPRecordStruct = (sRecordInfo *)(pRecordStruct->SPRecordStructAdd[RecordPosition]);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	3284      	adds	r2, #132	; 0x84
 8002be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bec:	617b      	str	r3, [r7, #20]
      if(pSPRecordStruct->NDEF_Type == URI_EMAIL_TYPE )
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 8002bf4:	2b05      	cmp	r3, #5
 8002bf6:	d105      	bne.n	8002c04 <NDEF_ReadEmail+0x58>
      {
        NDEF_ReadURI_Email(pSPRecordStruct, pEmailStruct );
 8002bf8:	6839      	ldr	r1, [r7, #0]
 8002bfa:	6978      	ldr	r0, [r7, #20]
 8002bfc:	f7ff ffb0 	bl	8002b60 <NDEF_ReadURI_Email>
        status = NDEF_SUCCESS;
 8002c00:	2300      	movs	r3, #0
 8002c02:	83fb      	strh	r3, [r7, #30]
      }
      if(pSPRecordStruct->NDEF_Type == TEXT_TYPE )
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d127      	bne.n	8002c5e <NDEF_ReadEmail+0xb2>
      {
        PayloadSize = ((uint32_t)(pSPRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pSPRecordStruct->PayloadLength2)<<16) |
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	789b      	ldrb	r3, [r3, #2]
 8002c12:	061a      	lsls	r2, r3, #24
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	78db      	ldrb	r3, [r3, #3]
 8002c18:	041b      	lsls	r3, r3, #16
 8002c1a:	431a      	orrs	r2, r3
          ((uint32_t)(pSPRecordStruct->PayloadLength1)<<8)  | pSPRecordStruct->PayloadLength0;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	791b      	ldrb	r3, [r3, #4]
 8002c20:	021b      	lsls	r3, r3, #8
        PayloadSize = ((uint32_t)(pSPRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pSPRecordStruct->PayloadLength2)<<16) |
 8002c22:	4313      	orrs	r3, r2
          ((uint32_t)(pSPRecordStruct->PayloadLength1)<<8)  | pSPRecordStruct->PayloadLength0;
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	7952      	ldrb	r2, [r2, #5]
        PayloadSize = ((uint32_t)(pSPRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pSPRecordStruct->PayloadLength2)<<16) |
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
        
        /* The instruction content the UTF-8 language code that is not used here */
        pData = (uint8_t*)pSPRecordStruct->PayloadBufferAdd;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002c32:	60fb      	str	r3, [r7, #12]
        pData += *pData+1;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]
        
        memcpy(pEmailStruct->Information, pData, PayloadSize);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	68f9      	ldr	r1, [r7, #12]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f010 f940 	bl	8012ed0 <memcpy>
        printf("Test : %s\n",pEmailStruct->Information);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8002c56:	4619      	mov	r1, r3
 8002c58:	4808      	ldr	r0, [pc, #32]	; (8002c7c <NDEF_ReadEmail+0xd0>)
 8002c5a:	f010 fdb9 	bl	80137d0 <iprintf>
    for (RecordPosition = 0; RecordPosition<pRecordStruct->NbOfRecordInSPPayload; RecordPosition++)
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	3301      	adds	r3, #1
 8002c62:	61bb      	str	r3, [r7, #24]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d3b7      	bcc.n	8002be2 <NDEF_ReadEmail+0x36>
      }
    }
  }

  return status;
 8002c72:	8bfb      	ldrh	r3, [r7, #30]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3720      	adds	r7, #32
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	08015e30 	.word	0x08015e30

08002c80 <NDEF_WriteEmail>:
  * @param  pEmailStruct : pointer on structure that contain the Email information
  * @retval SUCCESS : the function is succesful
  * @retval ERROR : Not able to store NDEF file inside tag.
  */
uint16_t NDEF_WriteEmail ( sEmailInfo *pEmailStruct )
{
 8002c80:	b5b0      	push	{r4, r5, r7, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint16_t status = NDEF_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	83fb      	strh	r3, [r7, #30]
  uint32_t Offset = 0;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61bb      	str	r3, [r7, #24]
  /*              TYPE                */
  /*----------------------------------*/
  /*               ID                 */  /* <---- Not Used  */ 
  /************************************/
  /* Leave the size of the file empty */
  NDEF_Buffer[0] = 0;
 8002c90:	4b6d      	ldr	r3, [pc, #436]	; (8002e48 <NDEF_WriteEmail+0x1c8>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	701a      	strb	r2, [r3, #0]
  NDEF_Buffer[1] = 0;
 8002c96:	4b6c      	ldr	r3, [pc, #432]	; (8002e48 <NDEF_WriteEmail+0x1c8>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	705a      	strb	r2, [r3, #1]
  Offset = FIRST_RECORD_OFFSET;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	61bb      	str	r3, [r7, #24]
  infoSize = 0;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
  
  /* Email : 1+@+1+subject+1+message */
  emailSize = 1+strlen(pEmailStruct->EmailAdd)+URI_FIRST_DATA_END_LENGTH+SUBJECT_BEGIN_STRING_LENGTH+strlen(pEmailStruct->Subject)+URI_SECOND_DATA_END_LENGTH+MESSAGE_BEGIN_STRING_LENGTH+strlen(pEmailStruct->Message);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fd fa92 	bl	80001d0 <strlen>
 8002cac:	4604      	mov	r4, r0
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3340      	adds	r3, #64	; 0x40
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fd fa8c 	bl	80001d0 <strlen>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	441c      	add	r4, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	33a4      	adds	r3, #164	; 0xa4
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fd fa85 	bl	80001d0 <strlen>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	4423      	add	r3, r4
 8002cca:	3310      	adds	r3, #16
 8002ccc:	60fb      	str	r3, [r7, #12]
  
  /* Check if a Smart poster is needed */
  if (pEmailStruct->Information[0] != '\0')
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 3234 	ldrb.w	r3, [r3, #564]	; 0x234
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d066      	beq.n	8002da6 <NDEF_WriteEmail+0x126>
  {
    /* Info : 1+2+info */
    infoSize = 1+ISO_ENGLISH_CODE_STRING_LENGTH+strlen(pEmailStruct->Information);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fd fa76 	bl	80001d0 <strlen>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	3303      	adds	r3, #3
 8002ce8:	617b      	str	r3, [r7, #20]
    /* Total */
    totalSize = 4+emailSize+4+infoSize;
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	4413      	add	r3, r2
 8002cf0:	3308      	adds	r3, #8
 8002cf2:	613b      	str	r3, [r7, #16]
    if (emailSize > 255) totalSize+=3; /* Normal Email size */
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2bff      	cmp	r3, #255	; 0xff
 8002cf8:	d902      	bls.n	8002d00 <NDEF_WriteEmail+0x80>
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	3303      	adds	r3, #3
 8002cfe:	613b      	str	r3, [r7, #16]
    if (infoSize > 255) totalSize+=3;  /* Normal Info size */
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	2bff      	cmp	r3, #255	; 0xff
 8002d04:	d902      	bls.n	8002d0c <NDEF_WriteEmail+0x8c>
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	3303      	adds	r3, #3
 8002d0a:	613b      	str	r3, [r7, #16]
    
    /* SmartPoster header */
    if (totalSize > 255) 
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	2bff      	cmp	r3, #255	; 0xff
 8002d10:	d92b      	bls.n	8002d6a <NDEF_WriteEmail+0xea>
    {
      NDEF_Buffer[Offset++] = 0xC1;
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	61ba      	str	r2, [r7, #24]
 8002d18:	4a4b      	ldr	r2, [pc, #300]	; (8002e48 <NDEF_WriteEmail+0x1c8>)
 8002d1a:	21c1      	movs	r1, #193	; 0xc1
 8002d1c:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = SMART_POSTER_TYPE_STRING_LENGTH;
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	1c5a      	adds	r2, r3, #1
 8002d22:	61ba      	str	r2, [r7, #24]
 8002d24:	4a48      	ldr	r2, [pc, #288]	; (8002e48 <NDEF_WriteEmail+0x1c8>)
 8002d26:	2102      	movs	r1, #2
 8002d28:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (totalSize & 0xFF000000)>>24;
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	0e19      	lsrs	r1, r3, #24
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	1c5a      	adds	r2, r3, #1
 8002d32:	61ba      	str	r2, [r7, #24]
 8002d34:	b2c9      	uxtb	r1, r1
 8002d36:	4a44      	ldr	r2, [pc, #272]	; (8002e48 <NDEF_WriteEmail+0x1c8>)
 8002d38:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (totalSize & 0x00FF0000)>>16;
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	0c19      	lsrs	r1, r3, #16
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	61ba      	str	r2, [r7, #24]
 8002d44:	b2c9      	uxtb	r1, r1
 8002d46:	4a40      	ldr	r2, [pc, #256]	; (8002e48 <NDEF_WriteEmail+0x1c8>)
 8002d48:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (totalSize & 0x0000FF00)>>8;
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	0a19      	lsrs	r1, r3, #8
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	1c5a      	adds	r2, r3, #1
 8002d52:	61ba      	str	r2, [r7, #24]
 8002d54:	b2c9      	uxtb	r1, r1
 8002d56:	4a3c      	ldr	r2, [pc, #240]	; (8002e48 <NDEF_WriteEmail+0x1c8>)
 8002d58:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (totalSize & 0x000000FF);
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	1c5a      	adds	r2, r3, #1
 8002d5e:	61ba      	str	r2, [r7, #24]
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	b2d1      	uxtb	r1, r2
 8002d64:	4a38      	ldr	r2, [pc, #224]	; (8002e48 <NDEF_WriteEmail+0x1c8>)
 8002d66:	54d1      	strb	r1, [r2, r3]
 8002d68:	e012      	b.n	8002d90 <NDEF_WriteEmail+0x110>
    }
    else
    {
      NDEF_Buffer[Offset++] = 0xD1;
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	61ba      	str	r2, [r7, #24]
 8002d70:	4a35      	ldr	r2, [pc, #212]	; (8002e48 <NDEF_WriteEmail+0x1c8>)
 8002d72:	21d1      	movs	r1, #209	; 0xd1
 8002d74:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = SMART_POSTER_TYPE_STRING_LENGTH;
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	1c5a      	adds	r2, r3, #1
 8002d7a:	61ba      	str	r2, [r7, #24]
 8002d7c:	4a32      	ldr	r2, [pc, #200]	; (8002e48 <NDEF_WriteEmail+0x1c8>)
 8002d7e:	2102      	movs	r1, #2
 8002d80:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (uint8_t)totalSize;
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	61ba      	str	r2, [r7, #24]
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	b2d1      	uxtb	r1, r2
 8002d8c:	4a2e      	ldr	r2, [pc, #184]	; (8002e48 <NDEF_WriteEmail+0x1c8>)
 8002d8e:	54d1      	strb	r1, [r2, r3]
    }
    memcpy(&NDEF_Buffer[Offset], SMART_POSTER_TYPE_STRING, SMART_POSTER_TYPE_STRING_LENGTH);
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	4a2d      	ldr	r2, [pc, #180]	; (8002e48 <NDEF_WriteEmail+0x1c8>)
 8002d94:	4413      	add	r3, r2
 8002d96:	2202      	movs	r2, #2
 8002d98:	492c      	ldr	r1, [pc, #176]	; (8002e4c <NDEF_WriteEmail+0x1cc>)
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f010 f898 	bl	8012ed0 <memcpy>
    Offset+=SMART_POSTER_TYPE_STRING_LENGTH;
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	3302      	adds	r3, #2
 8002da4:	61bb      	str	r3, [r7, #24]
  }
  
  /* Email header */
  NDEF_Buffer[Offset] = 0x81;
 8002da6:	4a28      	ldr	r2, [pc, #160]	; (8002e48 <NDEF_WriteEmail+0x1c8>)
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	4413      	add	r3, r2
 8002dac:	2281      	movs	r2, #129	; 0x81
 8002dae:	701a      	strb	r2, [r3, #0]
  if (emailSize < 256) NDEF_Buffer[Offset] |= 0x10;                      /* Set the SR bit */
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2bff      	cmp	r3, #255	; 0xff
 8002db4:	d80b      	bhi.n	8002dce <NDEF_WriteEmail+0x14e>
 8002db6:	4a24      	ldr	r2, [pc, #144]	; (8002e48 <NDEF_WriteEmail+0x1c8>)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	4413      	add	r3, r2
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	f043 0310 	orr.w	r3, r3, #16
 8002dc2:	b2d9      	uxtb	r1, r3
 8002dc4:	4a20      	ldr	r2, [pc, #128]	; (8002e48 <NDEF_WriteEmail+0x1c8>)
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	4413      	add	r3, r2
 8002dca:	460a      	mov	r2, r1
 8002dcc:	701a      	strb	r2, [r3, #0]
  if (pEmailStruct->Information[0] == '\0') NDEF_Buffer[Offset] |= 0x40; /* Set the ME bit */
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 3234 	ldrb.w	r3, [r3, #564]	; 0x234
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10b      	bne.n	8002df0 <NDEF_WriteEmail+0x170>
 8002dd8:	4a1b      	ldr	r2, [pc, #108]	; (8002e48 <NDEF_WriteEmail+0x1c8>)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	4413      	add	r3, r2
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002de4:	b2d9      	uxtb	r1, r3
 8002de6:	4a18      	ldr	r2, [pc, #96]	; (8002e48 <NDEF_WriteEmail+0x1c8>)
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	4413      	add	r3, r2
 8002dec:	460a      	mov	r2, r1
 8002dee:	701a      	strb	r2, [r3, #0]
  Offset++;
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	3301      	adds	r3, #1
 8002df4:	61bb      	str	r3, [r7, #24]
  
  NDEF_Buffer[Offset++] = URI_TYPE_STRING_LENGTH;
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	1c5a      	adds	r2, r3, #1
 8002dfa:	61ba      	str	r2, [r7, #24]
 8002dfc:	4a12      	ldr	r2, [pc, #72]	; (8002e48 <NDEF_WriteEmail+0x1c8>)
 8002dfe:	2101      	movs	r1, #1
 8002e00:	54d1      	strb	r1, [r2, r3]
  if (emailSize > 255)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2bff      	cmp	r3, #255	; 0xff
 8002e06:	d923      	bls.n	8002e50 <NDEF_WriteEmail+0x1d0>
  {
    NDEF_Buffer[Offset++] = (emailSize & 0xFF000000)>>24;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	0e19      	lsrs	r1, r3, #24
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	1c5a      	adds	r2, r3, #1
 8002e10:	61ba      	str	r2, [r7, #24]
 8002e12:	b2c9      	uxtb	r1, r1
 8002e14:	4a0c      	ldr	r2, [pc, #48]	; (8002e48 <NDEF_WriteEmail+0x1c8>)
 8002e16:	54d1      	strb	r1, [r2, r3]
    NDEF_Buffer[Offset++] = (emailSize & 0x00FF0000)>>16;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	0c19      	lsrs	r1, r3, #16
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	1c5a      	adds	r2, r3, #1
 8002e20:	61ba      	str	r2, [r7, #24]
 8002e22:	b2c9      	uxtb	r1, r1
 8002e24:	4a08      	ldr	r2, [pc, #32]	; (8002e48 <NDEF_WriteEmail+0x1c8>)
 8002e26:	54d1      	strb	r1, [r2, r3]
    NDEF_Buffer[Offset++] = (emailSize & 0x0000FF00)>>8;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	0a19      	lsrs	r1, r3, #8
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	1c5a      	adds	r2, r3, #1
 8002e30:	61ba      	str	r2, [r7, #24]
 8002e32:	b2c9      	uxtb	r1, r1
 8002e34:	4a04      	ldr	r2, [pc, #16]	; (8002e48 <NDEF_WriteEmail+0x1c8>)
 8002e36:	54d1      	strb	r1, [r2, r3]
    NDEF_Buffer[Offset++] = (emailSize & 0x000000FF);
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	1c5a      	adds	r2, r3, #1
 8002e3c:	61ba      	str	r2, [r7, #24]
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	b2d1      	uxtb	r1, r2
 8002e42:	4a01      	ldr	r2, [pc, #4]	; (8002e48 <NDEF_WriteEmail+0x1c8>)
 8002e44:	54d1      	strb	r1, [r2, r3]
 8002e46:	e00a      	b.n	8002e5e <NDEF_WriteEmail+0x1de>
 8002e48:	200022c8 	.word	0x200022c8
 8002e4c:	08015e3c 	.word	0x08015e3c
  }
  else
  {
    NDEF_Buffer[Offset++] = (uint8_t)emailSize;
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	1c5a      	adds	r2, r3, #1
 8002e54:	61ba      	str	r2, [r7, #24]
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	b2d1      	uxtb	r1, r2
 8002e5a:	4a99      	ldr	r2, [pc, #612]	; (80030c0 <NDEF_WriteEmail+0x440>)
 8002e5c:	54d1      	strb	r1, [r2, r3]
  }
  memcpy(&NDEF_Buffer[Offset], URI_TYPE_STRING, URI_TYPE_STRING_LENGTH);
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	4a97      	ldr	r2, [pc, #604]	; (80030c0 <NDEF_WriteEmail+0x440>)
 8002e62:	4413      	add	r3, r2
 8002e64:	2201      	movs	r2, #1
 8002e66:	4997      	ldr	r1, [pc, #604]	; (80030c4 <NDEF_WriteEmail+0x444>)
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f010 f831 	bl	8012ed0 <memcpy>
  Offset+=URI_TYPE_STRING_LENGTH;
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	3301      	adds	r3, #1
 8002e72:	61bb      	str	r3, [r7, #24]
  
  /* Email payload */
  NDEF_Buffer[Offset++] = URI_ID_0x06;
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	1c5a      	adds	r2, r3, #1
 8002e78:	61ba      	str	r2, [r7, #24]
 8002e7a:	4a91      	ldr	r2, [pc, #580]	; (80030c0 <NDEF_WriteEmail+0x440>)
 8002e7c:	2106      	movs	r1, #6
 8002e7e:	54d1      	strb	r1, [r2, r3]
  memcpy( &NDEF_Buffer[Offset], pEmailStruct->EmailAdd,strlen(pEmailStruct->EmailAdd));
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	4a8f      	ldr	r2, [pc, #572]	; (80030c0 <NDEF_WriteEmail+0x440>)
 8002e84:	189c      	adds	r4, r3, r2
 8002e86:	687d      	ldr	r5, [r7, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fd f9a0 	bl	80001d0 <strlen>
 8002e90:	4603      	mov	r3, r0
 8002e92:	461a      	mov	r2, r3
 8002e94:	4629      	mov	r1, r5
 8002e96:	4620      	mov	r0, r4
 8002e98:	f010 f81a 	bl	8012ed0 <memcpy>
  Offset += strlen(pEmailStruct->EmailAdd);  
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fd f996 	bl	80001d0 <strlen>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
  memcpy( &NDEF_Buffer[Offset], URI_FIRST_DATA_END,URI_FIRST_DATA_END_LENGTH);
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	4a84      	ldr	r2, [pc, #528]	; (80030c0 <NDEF_WriteEmail+0x440>)
 8002eb0:	4413      	add	r3, r2
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	4984      	ldr	r1, [pc, #528]	; (80030c8 <NDEF_WriteEmail+0x448>)
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f010 f80a 	bl	8012ed0 <memcpy>
  Offset += URI_FIRST_DATA_END_LENGTH;
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	61bb      	str	r3, [r7, #24]
  
  memcpy(&NDEF_Buffer[Offset], SUBJECT_BEGIN_STRING, SUBJECT_BEGIN_STRING_LENGTH);
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	4a7e      	ldr	r2, [pc, #504]	; (80030c0 <NDEF_WriteEmail+0x440>)
 8002ec6:	4413      	add	r3, r2
 8002ec8:	2208      	movs	r2, #8
 8002eca:	4980      	ldr	r1, [pc, #512]	; (80030cc <NDEF_WriteEmail+0x44c>)
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f00f ffff 	bl	8012ed0 <memcpy>
  Offset += SUBJECT_BEGIN_STRING_LENGTH;
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	3308      	adds	r3, #8
 8002ed6:	61bb      	str	r3, [r7, #24]
  memcpy( &NDEF_Buffer[Offset], pEmailStruct->Subject,strlen(pEmailStruct->Subject));
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	4a79      	ldr	r2, [pc, #484]	; (80030c0 <NDEF_WriteEmail+0x440>)
 8002edc:	189c      	adds	r4, r3, r2
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f103 0540 	add.w	r5, r3, #64	; 0x40
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3340      	adds	r3, #64	; 0x40
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fd f971 	bl	80001d0 <strlen>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	4629      	mov	r1, r5
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	f00f ffeb 	bl	8012ed0 <memcpy>
  Offset += strlen(pEmailStruct->Subject);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3340      	adds	r3, #64	; 0x40
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fd f966 	bl	80001d0 <strlen>
 8002f04:	4602      	mov	r2, r0
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	4413      	add	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
  memcpy( &NDEF_Buffer[Offset], URI_SECOND_DATA_END,URI_SECOND_DATA_END_LENGTH);
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	4a6c      	ldr	r2, [pc, #432]	; (80030c0 <NDEF_WriteEmail+0x440>)
 8002f10:	4413      	add	r3, r2
 8002f12:	2201      	movs	r2, #1
 8002f14:	496e      	ldr	r1, [pc, #440]	; (80030d0 <NDEF_WriteEmail+0x450>)
 8002f16:	4618      	mov	r0, r3
 8002f18:	f00f ffda 	bl	8012ed0 <memcpy>
  Offset += URI_SECOND_DATA_END_LENGTH;
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	61bb      	str	r3, [r7, #24]
  
  memcpy( &NDEF_Buffer[Offset], MESSAGE_BEGIN_STRING, MESSAGE_BEGIN_STRING_LENGTH);
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	4a66      	ldr	r2, [pc, #408]	; (80030c0 <NDEF_WriteEmail+0x440>)
 8002f26:	4413      	add	r3, r2
 8002f28:	2205      	movs	r2, #5
 8002f2a:	496a      	ldr	r1, [pc, #424]	; (80030d4 <NDEF_WriteEmail+0x454>)
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f00f ffcf 	bl	8012ed0 <memcpy>
  Offset += MESSAGE_BEGIN_STRING_LENGTH;
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	3305      	adds	r3, #5
 8002f36:	61bb      	str	r3, [r7, #24]
  memcpy( &NDEF_Buffer[Offset], pEmailStruct->Message, strlen(pEmailStruct->Message));
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	4a61      	ldr	r2, [pc, #388]	; (80030c0 <NDEF_WriteEmail+0x440>)
 8002f3c:	189c      	adds	r4, r3, r2
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f103 05a4 	add.w	r5, r3, #164	; 0xa4
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	33a4      	adds	r3, #164	; 0xa4
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fd f941 	bl	80001d0 <strlen>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	461a      	mov	r2, r3
 8002f52:	4629      	mov	r1, r5
 8002f54:	4620      	mov	r0, r4
 8002f56:	f00f ffbb 	bl	8012ed0 <memcpy>
  Offset += strlen(pEmailStruct->Message);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	33a4      	adds	r3, #164	; 0xa4
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fd f936 	bl	80001d0 <strlen>
 8002f64:	4602      	mov	r2, r0
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	4413      	add	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]

  /* Information header */
  if (pEmailStruct->Information[0] != '\0')
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 3234 	ldrb.w	r3, [r3, #564]	; 0x234
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d079      	beq.n	800306a <NDEF_WriteEmail+0x3ea>
  {
    if (infoSize > 255)
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	2bff      	cmp	r3, #255	; 0xff
 8002f7a:	d92b      	bls.n	8002fd4 <NDEF_WriteEmail+0x354>
    {
      NDEF_Buffer[Offset++] = 0x41;
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	1c5a      	adds	r2, r3, #1
 8002f80:	61ba      	str	r2, [r7, #24]
 8002f82:	4a4f      	ldr	r2, [pc, #316]	; (80030c0 <NDEF_WriteEmail+0x440>)
 8002f84:	2141      	movs	r1, #65	; 0x41
 8002f86:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = TEXT_TYPE_STRING_LENGTH;
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	1c5a      	adds	r2, r3, #1
 8002f8c:	61ba      	str	r2, [r7, #24]
 8002f8e:	4a4c      	ldr	r2, [pc, #304]	; (80030c0 <NDEF_WriteEmail+0x440>)
 8002f90:	2101      	movs	r1, #1
 8002f92:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (infoSize & 0xFF000000)>>24;
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	0e19      	lsrs	r1, r3, #24
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	1c5a      	adds	r2, r3, #1
 8002f9c:	61ba      	str	r2, [r7, #24]
 8002f9e:	b2c9      	uxtb	r1, r1
 8002fa0:	4a47      	ldr	r2, [pc, #284]	; (80030c0 <NDEF_WriteEmail+0x440>)
 8002fa2:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (infoSize & 0x00FF0000)>>16;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	0c19      	lsrs	r1, r3, #16
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	61ba      	str	r2, [r7, #24]
 8002fae:	b2c9      	uxtb	r1, r1
 8002fb0:	4a43      	ldr	r2, [pc, #268]	; (80030c0 <NDEF_WriteEmail+0x440>)
 8002fb2:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (infoSize & 0x0000FF00)>>8;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	0a19      	lsrs	r1, r3, #8
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	61ba      	str	r2, [r7, #24]
 8002fbe:	b2c9      	uxtb	r1, r1
 8002fc0:	4a3f      	ldr	r2, [pc, #252]	; (80030c0 <NDEF_WriteEmail+0x440>)
 8002fc2:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (infoSize & 0x000000FF);
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	1c5a      	adds	r2, r3, #1
 8002fc8:	61ba      	str	r2, [r7, #24]
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	b2d1      	uxtb	r1, r2
 8002fce:	4a3c      	ldr	r2, [pc, #240]	; (80030c0 <NDEF_WriteEmail+0x440>)
 8002fd0:	54d1      	strb	r1, [r2, r3]
 8002fd2:	e012      	b.n	8002ffa <NDEF_WriteEmail+0x37a>
    }
    else
    {
      NDEF_Buffer[Offset++] = 0x51;
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	1c5a      	adds	r2, r3, #1
 8002fd8:	61ba      	str	r2, [r7, #24]
 8002fda:	4a39      	ldr	r2, [pc, #228]	; (80030c0 <NDEF_WriteEmail+0x440>)
 8002fdc:	2151      	movs	r1, #81	; 0x51
 8002fde:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = TEXT_TYPE_STRING_LENGTH;
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	1c5a      	adds	r2, r3, #1
 8002fe4:	61ba      	str	r2, [r7, #24]
 8002fe6:	4a36      	ldr	r2, [pc, #216]	; (80030c0 <NDEF_WriteEmail+0x440>)
 8002fe8:	2101      	movs	r1, #1
 8002fea:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (uint8_t)infoSize;
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	61ba      	str	r2, [r7, #24]
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	b2d1      	uxtb	r1, r2
 8002ff6:	4a32      	ldr	r2, [pc, #200]	; (80030c0 <NDEF_WriteEmail+0x440>)
 8002ff8:	54d1      	strb	r1, [r2, r3]
    }
    
    memcpy(&NDEF_Buffer[Offset], TEXT_TYPE_STRING, TEXT_TYPE_STRING_LENGTH);
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	4a30      	ldr	r2, [pc, #192]	; (80030c0 <NDEF_WriteEmail+0x440>)
 8002ffe:	4413      	add	r3, r2
 8003000:	2201      	movs	r2, #1
 8003002:	4935      	ldr	r1, [pc, #212]	; (80030d8 <NDEF_WriteEmail+0x458>)
 8003004:	4618      	mov	r0, r3
 8003006:	f00f ff63 	bl	8012ed0 <memcpy>
    Offset+=TEXT_TYPE_STRING_LENGTH;
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	3301      	adds	r3, #1
 800300e:	61bb      	str	r3, [r7, #24]
    NDEF_Buffer[Offset++] = ISO_ENGLISH_CODE_STRING_LENGTH; /* UTF-8 with x byte language code */
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	1c5a      	adds	r2, r3, #1
 8003014:	61ba      	str	r2, [r7, #24]
 8003016:	4a2a      	ldr	r2, [pc, #168]	; (80030c0 <NDEF_WriteEmail+0x440>)
 8003018:	2102      	movs	r1, #2
 800301a:	54d1      	strb	r1, [r2, r3]
    memcpy(&NDEF_Buffer[Offset], ISO_ENGLISH_CODE_STRING, ISO_ENGLISH_CODE_STRING_LENGTH);
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	4a28      	ldr	r2, [pc, #160]	; (80030c0 <NDEF_WriteEmail+0x440>)
 8003020:	4413      	add	r3, r2
 8003022:	2202      	movs	r2, #2
 8003024:	492d      	ldr	r1, [pc, #180]	; (80030dc <NDEF_WriteEmail+0x45c>)
 8003026:	4618      	mov	r0, r3
 8003028:	f00f ff52 	bl	8012ed0 <memcpy>
    Offset+=ISO_ENGLISH_CODE_STRING_LENGTH;
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	3302      	adds	r3, #2
 8003030:	61bb      	str	r3, [r7, #24]
    
    /* Information payload */
    memcpy( &NDEF_Buffer[Offset], pEmailStruct->Information,strlen(pEmailStruct->Information));
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	4a22      	ldr	r2, [pc, #136]	; (80030c0 <NDEF_WriteEmail+0x440>)
 8003036:	189c      	adds	r4, r3, r2
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f503 750d 	add.w	r5, r3, #564	; 0x234
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8003044:	4618      	mov	r0, r3
 8003046:	f7fd f8c3 	bl	80001d0 <strlen>
 800304a:	4603      	mov	r3, r0
 800304c:	461a      	mov	r2, r3
 800304e:	4629      	mov	r1, r5
 8003050:	4620      	mov	r0, r4
 8003052:	f00f ff3d 	bl	8012ed0 <memcpy>
    Offset += strlen(pEmailStruct->Information);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f503 730d 	add.w	r3, r3, #564	; 0x234
 800305c:	4618      	mov	r0, r3
 800305e:	f7fd f8b7 	bl	80001d0 <strlen>
 8003062:	4602      	mov	r2, r0
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	4413      	add	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
  }
  
  /* Write NDEF */
  status = NFC_TT4_WriteData ( 0x00 , Offset , NDEF_Buffer);
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	b29b      	uxth	r3, r3
 800306e:	4a14      	ldr	r2, [pc, #80]	; (80030c0 <NDEF_WriteEmail+0x440>)
 8003070:	4619      	mov	r1, r3
 8003072:	2000      	movs	r0, #0
 8003074:	f7ff f82e 	bl	80020d4 <NFC_TT4_WriteData>
 8003078:	4603      	mov	r3, r0
 800307a:	83fb      	strh	r3, [r7, #30]

  /* Write NDEF size to complete*/
  if( status == NFC_TT4_ACTION_COMPLETED)
 800307c:	8bfb      	ldrh	r3, [r7, #30]
 800307e:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8003082:	d112      	bne.n	80030aa <NDEF_WriteEmail+0x42a>
  {
    Offset -= 2; /* Must not count the 2 byte that represent the NDEF size */
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	3b02      	subs	r3, #2
 8003088:	61bb      	str	r3, [r7, #24]
    NDEF_Buffer[0] = (Offset & 0xFF00)>>8;
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	0a1b      	lsrs	r3, r3, #8
 800308e:	b2da      	uxtb	r2, r3
 8003090:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <NDEF_WriteEmail+0x440>)
 8003092:	701a      	strb	r2, [r3, #0]
    NDEF_Buffer[1] = (Offset & 0x00FF);
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	b2da      	uxtb	r2, r3
 8003098:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <NDEF_WriteEmail+0x440>)
 800309a:	705a      	strb	r2, [r3, #1]
    
    status = NFC_TT4_WriteData ( 0x00 , 2 , NDEF_Buffer);
 800309c:	4a08      	ldr	r2, [pc, #32]	; (80030c0 <NDEF_WriteEmail+0x440>)
 800309e:	2102      	movs	r1, #2
 80030a0:	2000      	movs	r0, #0
 80030a2:	f7ff f817 	bl	80020d4 <NFC_TT4_WriteData>
 80030a6:	4603      	mov	r3, r0
 80030a8:	83fb      	strh	r3, [r7, #30]
  }
  
  if( status == NFC_TT4_ACTION_COMPLETED)
 80030aa:	8bfb      	ldrh	r3, [r7, #30]
 80030ac:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 80030b0:	d101      	bne.n	80030b6 <NDEF_WriteEmail+0x436>
    return NDEF_SUCCESS;
 80030b2:	2300      	movs	r3, #0
 80030b4:	e000      	b.n	80030b8 <NDEF_WriteEmail+0x438>
  else
    return NDEF_ERROR;
 80030b6:	2301      	movs	r3, #1
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3720      	adds	r7, #32
 80030bc:	46bd      	mov	sp, r7
 80030be:	bdb0      	pop	{r4, r5, r7, pc}
 80030c0:	200022c8 	.word	0x200022c8
 80030c4:	08015e40 	.word	0x08015e40
 80030c8:	08015e14 	.word	0x08015e14
 80030cc:	08015e18 	.word	0x08015e18
 80030d0:	08015e24 	.word	0x08015e24
 80030d4:	08015e28 	.word	0x08015e28
 80030d8:	08015e44 	.word	0x08015e44
 80030dc:	08015e48 	.word	0x08015e48

080030e0 <NDEF_FillSMSStruct>:
  * @param  PayloadSize : number of data in the payload
  * @param  pSMSStruct : pointer on the structure to fill
  * @retval NONE 
  */
static void NDEF_FillSMSStruct( uint8_t* pPayload, uint32_t PayloadSize, sSMSInfo *pSMSStruct)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08a      	sub	sp, #40	; 0x28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
  uint8_t* pLastByteAdd, *pLook4Word, *pEndString ;
  char* pKeyWord;
  uint32_t SizeOfKeyWord;
  
  pKeyWord = SMS_TYPE_STRING;
 80030ec:	4b3a      	ldr	r3, [pc, #232]	; (80031d8 <NDEF_FillSMSStruct+0xf8>)
 80030ee:	61fb      	str	r3, [r7, #28]
  SizeOfKeyWord = SMS_TYPE_STRING_LENGTH;
 80030f0:	2304      	movs	r3, #4
 80030f2:	61bb      	str	r3, [r7, #24]
  
  /* First charactere force to NULL in case not matching found */
  *pSMSStruct->PhoneNumber = 0;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	701a      	strb	r2, [r3, #0]
  *pSMSStruct->Message = 0;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	741a      	strb	r2, [r3, #16]
  
  /* Interresting information are stored before picture if any */
  /* Moreover picture is not used in this demonstration SW */  
  pLastByteAdd = (uint8_t*)(pPayload + PayloadSize);
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	4413      	add	r3, r2
 8003106:	617b      	str	r3, [r7, #20]
  
  pLook4Word = pPayload;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
  while( memcmp( pLook4Word, pKeyWord, SizeOfKeyWord) && pLook4Word<pLastByteAdd )
 800310c:	e002      	b.n	8003114 <NDEF_FillSMSStruct+0x34>
  {
    pLook4Word++;
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	3301      	adds	r3, #1
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
  while( memcmp( pLook4Word, pKeyWord, SizeOfKeyWord) && pLook4Word<pLastByteAdd )
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	69f9      	ldr	r1, [r7, #28]
 8003118:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800311a:	f00f fecb 	bl	8012eb4 <memcmp>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d003      	beq.n	800312c <NDEF_FillSMSStruct+0x4c>
 8003124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	429a      	cmp	r2, r3
 800312a:	d3f0      	bcc.n	800310e <NDEF_FillSMSStruct+0x2e>
  }
  
  pEndString = pLook4Word;
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	623b      	str	r3, [r7, #32]
  /* Retrieve phone number */
  if( pLook4Word != pLastByteAdd)
 8003130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	429a      	cmp	r2, r3
 8003136:	d023      	beq.n	8003180 <NDEF_FillSMSStruct+0xa0>
  {  
    pLook4Word += SizeOfKeyWord;
 8003138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	4413      	add	r3, r2
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
    while( memcmp( pEndString, URI_FIRST_DATA_END, URI_FIRST_DATA_END_LENGTH) && pEndString<pLastByteAdd )
 8003140:	e002      	b.n	8003148 <NDEF_FillSMSStruct+0x68>
    {
      pEndString++;
 8003142:	6a3b      	ldr	r3, [r7, #32]
 8003144:	3301      	adds	r3, #1
 8003146:	623b      	str	r3, [r7, #32]
    while( memcmp( pEndString, URI_FIRST_DATA_END, URI_FIRST_DATA_END_LENGTH) && pEndString<pLastByteAdd )
 8003148:	6a3b      	ldr	r3, [r7, #32]
 800314a:	781a      	ldrb	r2, [r3, #0]
 800314c:	4b23      	ldr	r3, [pc, #140]	; (80031dc <NDEF_FillSMSStruct+0xfc>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	429a      	cmp	r2, r3
 8003152:	d003      	beq.n	800315c <NDEF_FillSMSStruct+0x7c>
 8003154:	6a3a      	ldr	r2, [r7, #32]
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	429a      	cmp	r2, r3
 800315a:	d3f2      	bcc.n	8003142 <NDEF_FillSMSStruct+0x62>
    }
    if( pEndString != pLastByteAdd)
 800315c:	6a3a      	ldr	r2, [r7, #32]
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	429a      	cmp	r2, r3
 8003162:	d00d      	beq.n	8003180 <NDEF_FillSMSStruct+0xa0>
    {
      memcpy( pSMSStruct->PhoneNumber, pLook4Word, pEndString-pLook4Word);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	6a3a      	ldr	r2, [r7, #32]
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	461a      	mov	r2, r3
 800316e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003170:	f00f feae 	bl	8012ed0 <memcpy>
      /* add end of string charactere */
      pSMSStruct->PhoneNumber[pEndString-pLook4Word] = 0;  
 8003174:	6a3a      	ldr	r2, [r7, #32]
 8003176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	2100      	movs	r1, #0
 800317e:	54d1      	strb	r1, [r2, r3]
    }
  }  
  pEndString += URI_FIRST_DATA_END_LENGTH;
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	3301      	adds	r3, #1
 8003184:	623b      	str	r3, [r7, #32]
  pLook4Word = pEndString;
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* check if e-mail subject is present */
  if(!memcmp( pLook4Word, MESSAGE_BEGIN_STRING, MESSAGE_BEGIN_STRING_LENGTH))
 800318a:	2205      	movs	r2, #5
 800318c:	4914      	ldr	r1, [pc, #80]	; (80031e0 <NDEF_FillSMSStruct+0x100>)
 800318e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003190:	f00f fe90 	bl	8012eb4 <memcmp>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d119      	bne.n	80031ce <NDEF_FillSMSStruct+0xee>
  {    
    pEndString += MESSAGE_BEGIN_STRING_LENGTH;
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	3305      	adds	r3, #5
 800319e:	623b      	str	r3, [r7, #32]
    /* Retrieve message */
    memcpy( pSMSStruct->Message, pEndString, PayloadSize-(pEndString-pPayload));
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f103 0010 	add.w	r0, r3, #16
 80031a6:	6a3a      	ldr	r2, [r7, #32]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	461a      	mov	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	1a9b      	subs	r3, r3, r2
 80031b2:	461a      	mov	r2, r3
 80031b4:	6a39      	ldr	r1, [r7, #32]
 80031b6:	f00f fe8b 	bl	8012ed0 <memcpy>
    /* add end of string charactere */
    pSMSStruct->Message[PayloadSize-(pEndString-pPayload)] = 0;    
 80031ba:	6a3a      	ldr	r2, [r7, #32]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	461a      	mov	r2, r3
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	1a9b      	subs	r3, r3, r2
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	4413      	add	r3, r2
 80031ca:	2200      	movs	r2, #0
 80031cc:	741a      	strb	r2, [r3, #16]
  }
}
 80031ce:	bf00      	nop
 80031d0:	3728      	adds	r7, #40	; 0x28
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	08015e4c 	.word	0x08015e4c
 80031dc:	08015e54 	.word	0x08015e54
 80031e0:	08015e58 	.word	0x08015e58

080031e4 <NDEF_ReadURI_SMS>:
  * @param  pRecordStruct : Pointer on the record structure
  * @param  pSMSStruct : pointer on the structure to fill
  * @retval NONE 
  */
static void NDEF_ReadURI_SMS ( sRecordInfo *pRecordStruct, sSMSInfo *pSMSStruct )
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint8_t* pPayload;
  uint32_t PayloadSize;
  
  PayloadSize = ((uint32_t)(pRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pRecordStruct->PayloadLength2)<<16) |
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	789b      	ldrb	r3, [r3, #2]
 80031f2:	061a      	lsls	r2, r3, #24
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	78db      	ldrb	r3, [r3, #3]
 80031f8:	041b      	lsls	r3, r3, #16
 80031fa:	431a      	orrs	r2, r3
    ((uint32_t)(pRecordStruct->PayloadLength1)<<8)  | pRecordStruct->PayloadLength0;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	791b      	ldrb	r3, [r3, #4]
 8003200:	021b      	lsls	r3, r3, #8
  PayloadSize = ((uint32_t)(pRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pRecordStruct->PayloadLength2)<<16) |
 8003202:	4313      	orrs	r3, r2
    ((uint32_t)(pRecordStruct->PayloadLength1)<<8)  | pRecordStruct->PayloadLength0;
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	7952      	ldrb	r2, [r2, #5]
  PayloadSize = ((uint32_t)(pRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pRecordStruct->PayloadLength2)<<16) |
 8003208:	4313      	orrs	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]
  
  /* Read record header */
  pPayload = (uint8_t*)(pRecordStruct->PayloadBufferAdd);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8003212:	60bb      	str	r3, [r7, #8]
  
  if( pRecordStruct->NDEF_Type == URI_SMS_TYPE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 800321a:	2b03      	cmp	r3, #3
 800321c:	d104      	bne.n	8003228 <NDEF_ReadURI_SMS+0x44>
    NDEF_FillSMSStruct(pPayload , PayloadSize, pSMSStruct);
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	68f9      	ldr	r1, [r7, #12]
 8003222:	68b8      	ldr	r0, [r7, #8]
 8003224:	f7ff ff5c 	bl	80030e0 <NDEF_FillSMSStruct>
  
}
 8003228:	bf00      	nop
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <NDEF_ReadSMS>:
  * @param  pSMSStruct : pointer on the structure to fill 
  * @retval SUCCESS : SMS information from NDEF have been retrieve
  * @retval ERROR : Not able to retrieve SMS information
  */
uint16_t NDEF_ReadSMS(sRecordInfo *pRecordStruct, sSMSInfo *pSMSStruct)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b088      	sub	sp, #32
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint16_t status = NDEF_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	83fb      	strh	r3, [r7, #30]
  uint16_t FileId=0;
 800323e:	2300      	movs	r3, #0
 8003240:	82fb      	strh	r3, [r7, #22]
  sRecordInfo *pSPRecordStruct;  
  uint32_t PayloadSize, RecordPosition;
  uint8_t* pData;
  
  if( pRecordStruct->NDEF_Type == URI_SMS_TYPE )
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 8003248:	2b03      	cmp	r3, #3
 800324a:	d106      	bne.n	800325a <NDEF_ReadSMS+0x2a>
  {  
    NDEF_ReadURI_SMS(pRecordStruct, pSMSStruct );
 800324c:	6839      	ldr	r1, [r7, #0]
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7ff ffc8 	bl	80031e4 <NDEF_ReadURI_SMS>
    status = NDEF_SUCCESS;
 8003254:	2300      	movs	r3, #0
 8003256:	83fb      	strh	r3, [r7, #30]
 8003258:	e056      	b.n	8003308 <NDEF_ReadSMS+0xd8>
  }
  else if( pRecordStruct->NDEF_Type == SMARTPOSTER_TYPE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 8003260:	2b06      	cmp	r3, #6
 8003262:	d151      	bne.n	8003308 <NDEF_ReadSMS+0xd8>
  {
    for (RecordPosition = 0; RecordPosition<pRecordStruct->NbOfRecordInSPPayload; RecordPosition++)
 8003264:	2300      	movs	r3, #0
 8003266:	61bb      	str	r3, [r7, #24]
 8003268:	e047      	b.n	80032fa <NDEF_ReadSMS+0xca>
    {
      pSPRecordStruct = (sRecordInfo *)(pRecordStruct->SPRecordStructAdd[RecordPosition]);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	3284      	adds	r2, #132	; 0x84
 8003270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003274:	613b      	str	r3, [r7, #16]
      if(pSPRecordStruct->NDEF_Type == URI_SMS_TYPE )
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 800327c:	2b03      	cmp	r3, #3
 800327e:	d105      	bne.n	800328c <NDEF_ReadSMS+0x5c>
      {
        NDEF_ReadURI_SMS(pSPRecordStruct, pSMSStruct );
 8003280:	6839      	ldr	r1, [r7, #0]
 8003282:	6938      	ldr	r0, [r7, #16]
 8003284:	f7ff ffae 	bl	80031e4 <NDEF_ReadURI_SMS>
        status = NDEF_SUCCESS;
 8003288:	2300      	movs	r3, #0
 800328a:	83fb      	strh	r3, [r7, #30]
      }
      if(pSPRecordStruct->NDEF_Type == TEXT_TYPE )
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 8003292:	2b08      	cmp	r3, #8
 8003294:	d12e      	bne.n	80032f4 <NDEF_ReadSMS+0xc4>
      {
        PayloadSize = ((uint32_t)(pSPRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pSPRecordStruct->PayloadLength2)<<16) |
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	789b      	ldrb	r3, [r3, #2]
 800329a:	061a      	lsls	r2, r3, #24
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	78db      	ldrb	r3, [r3, #3]
 80032a0:	041b      	lsls	r3, r3, #16
 80032a2:	431a      	orrs	r2, r3
          ((uint32_t)(pSPRecordStruct->PayloadLength1)<<8)  | pSPRecordStruct->PayloadLength0;
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	791b      	ldrb	r3, [r3, #4]
 80032a8:	021b      	lsls	r3, r3, #8
        PayloadSize = ((uint32_t)(pSPRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pSPRecordStruct->PayloadLength2)<<16) |
 80032aa:	4313      	orrs	r3, r2
          ((uint32_t)(pSPRecordStruct->PayloadLength1)<<8)  | pSPRecordStruct->PayloadLength0;
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	7952      	ldrb	r2, [r2, #5]
        PayloadSize = ((uint32_t)(pSPRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pSPRecordStruct->PayloadLength2)<<16) |
 80032b0:	4313      	orrs	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]
        
        /* The instruction content the UTF-8 language code that is not used here */
        pData = (uint8_t*)pSPRecordStruct->PayloadBufferAdd;
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80032ba:	60bb      	str	r3, [r7, #8]
        PayloadSize -= *pData+1; /* remove not usefull data */
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	461a      	mov	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	1a9b      	subs	r3, r3, r2
 80032c6:	3b01      	subs	r3, #1
 80032c8:	60fb      	str	r3, [r7, #12]
        pData += *pData+1; /* set pointer on usefull data */
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	3301      	adds	r3, #1
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	4413      	add	r3, r2
 80032d4:	60bb      	str	r3, [r7, #8]
        
        memcpy(pSMSStruct->Information, pData, PayloadSize);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	68b9      	ldr	r1, [r7, #8]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f00f fdf5 	bl	8012ed0 <memcpy>
        /* add end of string charactere */
        pSMSStruct->Information[PayloadSize] = 0;    
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4413      	add	r3, r2
 80032ec:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80032f0:	2200      	movs	r2, #0
 80032f2:	701a      	strb	r2, [r3, #0]
    for (RecordPosition = 0; RecordPosition<pRecordStruct->NbOfRecordInSPPayload; RecordPosition++)
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	3301      	adds	r3, #1
 80032f8:	61bb      	str	r3, [r7, #24]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8003300:	461a      	mov	r2, r3
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	4293      	cmp	r3, r2
 8003306:	d3b0      	bcc.n	800326a <NDEF_ReadSMS+0x3a>
      }
    }
  }
  
  NFC_TT4_CloseNDEFSession(FileId);
 8003308:	8afb      	ldrh	r3, [r7, #22]
 800330a:	4618      	mov	r0, r3
 800330c:	f7fe fe32 	bl	8001f74 <NFC_TT4_CloseNDEFSession>
  
  return status;
 8003310:	8bfb      	ldrh	r3, [r7, #30]
}
 8003312:	4618      	mov	r0, r3
 8003314:	3720      	adds	r7, #32
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
	...

0800331c <NDEF_WriteSMS>:
  * @param  pSMSStruct : pointer on structure that contain the SMS information
  * @retval SUCCESS : the function is succesful
  * @retval ERROR : Not able to store NDEF file inside tag.
  */
uint16_t NDEF_WriteSMS ( sSMSInfo *pSMSStruct )
{
 800331c:	b5b0      	push	{r4, r5, r7, lr}
 800331e:	b088      	sub	sp, #32
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint16_t status = NDEF_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	83fb      	strh	r3, [r7, #30]
  uint32_t smsSize, infoSize, totalSize, Offset = 0;
 8003328:	2300      	movs	r3, #0
 800332a:	613b      	str	r3, [r7, #16]
  /*              TYPE                 */
  /*----------------------------------*/
  /*               ID                 */  /* <---- Not Used  */ 
  /************************************/
  
  NDEF_Buffer[0] = 0;
 800332c:	4b6a      	ldr	r3, [pc, #424]	; (80034d8 <NDEF_WriteSMS+0x1bc>)
 800332e:	2200      	movs	r2, #0
 8003330:	701a      	strb	r2, [r3, #0]
  NDEF_Buffer[1] = 0;
 8003332:	4b69      	ldr	r3, [pc, #420]	; (80034d8 <NDEF_WriteSMS+0x1bc>)
 8003334:	2200      	movs	r2, #0
 8003336:	705a      	strb	r2, [r3, #1]
  Offset = FIRST_RECORD_OFFSET;
 8003338:	2302      	movs	r3, #2
 800333a:	613b      	str	r3, [r7, #16]
  infoSize = 0;
 800333c:	2300      	movs	r3, #0
 800333e:	61bb      	str	r3, [r7, #24]
  
  /* SMS : 1+sms:+tel+1+body=+message */
  smsSize = 1+SMS_TYPE_STRING_LENGTH+strlen(pSMSStruct->PhoneNumber)+URI_FIRST_DATA_END_LENGTH+MESSAGE_BEGIN_STRING_LENGTH+strlen(pSMSStruct->Message);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4618      	mov	r0, r3
 8003344:	f7fc ff44 	bl	80001d0 <strlen>
 8003348:	4604      	mov	r4, r0
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	3310      	adds	r3, #16
 800334e:	4618      	mov	r0, r3
 8003350:	f7fc ff3e 	bl	80001d0 <strlen>
 8003354:	4603      	mov	r3, r0
 8003356:	4423      	add	r3, r4
 8003358:	330b      	adds	r3, #11
 800335a:	60fb      	str	r3, [r7, #12]

  /* Check if a Smart poster is needed */
  if (pSMSStruct->Information[0] != '\0')
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d066      	beq.n	8003434 <NDEF_WriteSMS+0x118>
  {
    /* Info : 1+2+info */
    infoSize = 1+ISO_ENGLISH_CODE_STRING_LENGTH+strlen(pSMSStruct->Information);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800336c:	4618      	mov	r0, r3
 800336e:	f7fc ff2f 	bl	80001d0 <strlen>
 8003372:	4603      	mov	r3, r0
 8003374:	3303      	adds	r3, #3
 8003376:	61bb      	str	r3, [r7, #24]
    /* Total */
    totalSize = 4+smsSize+4+infoSize;
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	4413      	add	r3, r2
 800337e:	3308      	adds	r3, #8
 8003380:	617b      	str	r3, [r7, #20]
    if (smsSize > 255) totalSize+=3; /* Normal SMS size */
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2bff      	cmp	r3, #255	; 0xff
 8003386:	d902      	bls.n	800338e <NDEF_WriteSMS+0x72>
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	3303      	adds	r3, #3
 800338c:	617b      	str	r3, [r7, #20]
    if (infoSize > 255) totalSize+=3;  /* Normal Info size */
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	2bff      	cmp	r3, #255	; 0xff
 8003392:	d902      	bls.n	800339a <NDEF_WriteSMS+0x7e>
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	3303      	adds	r3, #3
 8003398:	617b      	str	r3, [r7, #20]
    
    /* SmartPoster header */
    if (totalSize > 255) 
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2bff      	cmp	r3, #255	; 0xff
 800339e:	d92b      	bls.n	80033f8 <NDEF_WriteSMS+0xdc>
    {
      NDEF_Buffer[Offset++] = 0xC1;
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1c5a      	adds	r2, r3, #1
 80033a4:	613a      	str	r2, [r7, #16]
 80033a6:	4a4c      	ldr	r2, [pc, #304]	; (80034d8 <NDEF_WriteSMS+0x1bc>)
 80033a8:	21c1      	movs	r1, #193	; 0xc1
 80033aa:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = SMART_POSTER_TYPE_STRING_LENGTH;
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1c5a      	adds	r2, r3, #1
 80033b0:	613a      	str	r2, [r7, #16]
 80033b2:	4a49      	ldr	r2, [pc, #292]	; (80034d8 <NDEF_WriteSMS+0x1bc>)
 80033b4:	2102      	movs	r1, #2
 80033b6:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (totalSize & 0xFF000000)>>24;
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	0e19      	lsrs	r1, r3, #24
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1c5a      	adds	r2, r3, #1
 80033c0:	613a      	str	r2, [r7, #16]
 80033c2:	b2c9      	uxtb	r1, r1
 80033c4:	4a44      	ldr	r2, [pc, #272]	; (80034d8 <NDEF_WriteSMS+0x1bc>)
 80033c6:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (totalSize & 0x00FF0000)>>16;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	0c19      	lsrs	r1, r3, #16
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1c5a      	adds	r2, r3, #1
 80033d0:	613a      	str	r2, [r7, #16]
 80033d2:	b2c9      	uxtb	r1, r1
 80033d4:	4a40      	ldr	r2, [pc, #256]	; (80034d8 <NDEF_WriteSMS+0x1bc>)
 80033d6:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (totalSize & 0x0000FF00)>>8;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	0a19      	lsrs	r1, r3, #8
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1c5a      	adds	r2, r3, #1
 80033e0:	613a      	str	r2, [r7, #16]
 80033e2:	b2c9      	uxtb	r1, r1
 80033e4:	4a3c      	ldr	r2, [pc, #240]	; (80034d8 <NDEF_WriteSMS+0x1bc>)
 80033e6:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (totalSize & 0x000000FF);
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1c5a      	adds	r2, r3, #1
 80033ec:	613a      	str	r2, [r7, #16]
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	b2d1      	uxtb	r1, r2
 80033f2:	4a39      	ldr	r2, [pc, #228]	; (80034d8 <NDEF_WriteSMS+0x1bc>)
 80033f4:	54d1      	strb	r1, [r2, r3]
 80033f6:	e012      	b.n	800341e <NDEF_WriteSMS+0x102>
    }
    else
    {
      NDEF_Buffer[Offset++] = 0xD1;
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1c5a      	adds	r2, r3, #1
 80033fc:	613a      	str	r2, [r7, #16]
 80033fe:	4a36      	ldr	r2, [pc, #216]	; (80034d8 <NDEF_WriteSMS+0x1bc>)
 8003400:	21d1      	movs	r1, #209	; 0xd1
 8003402:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = SMART_POSTER_TYPE_STRING_LENGTH;
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	613a      	str	r2, [r7, #16]
 800340a:	4a33      	ldr	r2, [pc, #204]	; (80034d8 <NDEF_WriteSMS+0x1bc>)
 800340c:	2102      	movs	r1, #2
 800340e:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (uint8_t)totalSize;
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	613a      	str	r2, [r7, #16]
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	b2d1      	uxtb	r1, r2
 800341a:	4a2f      	ldr	r2, [pc, #188]	; (80034d8 <NDEF_WriteSMS+0x1bc>)
 800341c:	54d1      	strb	r1, [r2, r3]
    }
    memcpy(&NDEF_Buffer[Offset], SMART_POSTER_TYPE_STRING, SMART_POSTER_TYPE_STRING_LENGTH);
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	4a2d      	ldr	r2, [pc, #180]	; (80034d8 <NDEF_WriteSMS+0x1bc>)
 8003422:	4413      	add	r3, r2
 8003424:	2202      	movs	r2, #2
 8003426:	492d      	ldr	r1, [pc, #180]	; (80034dc <NDEF_WriteSMS+0x1c0>)
 8003428:	4618      	mov	r0, r3
 800342a:	f00f fd51 	bl	8012ed0 <memcpy>
    Offset+=SMART_POSTER_TYPE_STRING_LENGTH;
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	3302      	adds	r3, #2
 8003432:	613b      	str	r3, [r7, #16]
  }
  
  /* SMS header */
  NDEF_Buffer[Offset] = 0x81;
 8003434:	4a28      	ldr	r2, [pc, #160]	; (80034d8 <NDEF_WriteSMS+0x1bc>)
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4413      	add	r3, r2
 800343a:	2281      	movs	r2, #129	; 0x81
 800343c:	701a      	strb	r2, [r3, #0]
  if (smsSize < 256) NDEF_Buffer[Offset] |= 0x10;                      /* Set the SR bit */
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2bff      	cmp	r3, #255	; 0xff
 8003442:	d80b      	bhi.n	800345c <NDEF_WriteSMS+0x140>
 8003444:	4a24      	ldr	r2, [pc, #144]	; (80034d8 <NDEF_WriteSMS+0x1bc>)
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	4413      	add	r3, r2
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	f043 0310 	orr.w	r3, r3, #16
 8003450:	b2d9      	uxtb	r1, r3
 8003452:	4a21      	ldr	r2, [pc, #132]	; (80034d8 <NDEF_WriteSMS+0x1bc>)
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	4413      	add	r3, r2
 8003458:	460a      	mov	r2, r1
 800345a:	701a      	strb	r2, [r3, #0]
  if (pSMSStruct->Information[0] == '\0') NDEF_Buffer[Offset] |= 0x40; /* Set the ME bit */
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10b      	bne.n	800347e <NDEF_WriteSMS+0x162>
 8003466:	4a1c      	ldr	r2, [pc, #112]	; (80034d8 <NDEF_WriteSMS+0x1bc>)
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	4413      	add	r3, r2
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003472:	b2d9      	uxtb	r1, r3
 8003474:	4a18      	ldr	r2, [pc, #96]	; (80034d8 <NDEF_WriteSMS+0x1bc>)
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	4413      	add	r3, r2
 800347a:	460a      	mov	r2, r1
 800347c:	701a      	strb	r2, [r3, #0]
  Offset++;
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	3301      	adds	r3, #1
 8003482:	613b      	str	r3, [r7, #16]
  
  NDEF_Buffer[Offset++] = URI_TYPE_STRING_LENGTH;
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1c5a      	adds	r2, r3, #1
 8003488:	613a      	str	r2, [r7, #16]
 800348a:	4a13      	ldr	r2, [pc, #76]	; (80034d8 <NDEF_WriteSMS+0x1bc>)
 800348c:	2101      	movs	r1, #1
 800348e:	54d1      	strb	r1, [r2, r3]
  if (smsSize > 255)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2bff      	cmp	r3, #255	; 0xff
 8003494:	d924      	bls.n	80034e0 <NDEF_WriteSMS+0x1c4>
  {
    NDEF_Buffer[Offset++] = (smsSize & 0xFF000000)>>24;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	0e19      	lsrs	r1, r3, #24
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1c5a      	adds	r2, r3, #1
 800349e:	613a      	str	r2, [r7, #16]
 80034a0:	b2c9      	uxtb	r1, r1
 80034a2:	4a0d      	ldr	r2, [pc, #52]	; (80034d8 <NDEF_WriteSMS+0x1bc>)
 80034a4:	54d1      	strb	r1, [r2, r3]
    NDEF_Buffer[Offset++] = (smsSize & 0x00FF0000)>>16;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	0c19      	lsrs	r1, r3, #16
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	613a      	str	r2, [r7, #16]
 80034b0:	b2c9      	uxtb	r1, r1
 80034b2:	4a09      	ldr	r2, [pc, #36]	; (80034d8 <NDEF_WriteSMS+0x1bc>)
 80034b4:	54d1      	strb	r1, [r2, r3]
    NDEF_Buffer[Offset++] = (smsSize & 0x0000FF00)>>8;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	0a19      	lsrs	r1, r3, #8
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	613a      	str	r2, [r7, #16]
 80034c0:	b2c9      	uxtb	r1, r1
 80034c2:	4a05      	ldr	r2, [pc, #20]	; (80034d8 <NDEF_WriteSMS+0x1bc>)
 80034c4:	54d1      	strb	r1, [r2, r3]
    NDEF_Buffer[Offset++] = (smsSize & 0x000000FF);
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	613a      	str	r2, [r7, #16]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	b2d1      	uxtb	r1, r2
 80034d0:	4a01      	ldr	r2, [pc, #4]	; (80034d8 <NDEF_WriteSMS+0x1bc>)
 80034d2:	54d1      	strb	r1, [r2, r3]
 80034d4:	e00b      	b.n	80034ee <NDEF_WriteSMS+0x1d2>
 80034d6:	bf00      	nop
 80034d8:	200022c8 	.word	0x200022c8
 80034dc:	08015e60 	.word	0x08015e60
  }
  else
  {
    NDEF_Buffer[Offset++] = (uint8_t)smsSize;
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	613a      	str	r2, [r7, #16]
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	b2d1      	uxtb	r1, r2
 80034ea:	4a87      	ldr	r2, [pc, #540]	; (8003708 <NDEF_WriteSMS+0x3ec>)
 80034ec:	54d1      	strb	r1, [r2, r3]
  }
  memcpy(&NDEF_Buffer[Offset], URI_TYPE_STRING, URI_TYPE_STRING_LENGTH);
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	4a85      	ldr	r2, [pc, #532]	; (8003708 <NDEF_WriteSMS+0x3ec>)
 80034f2:	4413      	add	r3, r2
 80034f4:	2201      	movs	r2, #1
 80034f6:	4985      	ldr	r1, [pc, #532]	; (800370c <NDEF_WriteSMS+0x3f0>)
 80034f8:	4618      	mov	r0, r3
 80034fa:	f00f fce9 	bl	8012ed0 <memcpy>
  Offset+=URI_TYPE_STRING_LENGTH;
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	3301      	adds	r3, #1
 8003502:	613b      	str	r3, [r7, #16]
  
  /* SMS payload */
  NDEF_Buffer[Offset++] = URI_ID_0x00; /* URI identifier no abbreviation */
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	613a      	str	r2, [r7, #16]
 800350a:	4a7f      	ldr	r2, [pc, #508]	; (8003708 <NDEF_WriteSMS+0x3ec>)
 800350c:	2100      	movs	r1, #0
 800350e:	54d1      	strb	r1, [r2, r3]
  memcpy(&NDEF_Buffer[Offset], SMS_TYPE_STRING, SMS_TYPE_STRING_LENGTH);
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	4a7d      	ldr	r2, [pc, #500]	; (8003708 <NDEF_WriteSMS+0x3ec>)
 8003514:	4413      	add	r3, r2
 8003516:	2204      	movs	r2, #4
 8003518:	497d      	ldr	r1, [pc, #500]	; (8003710 <NDEF_WriteSMS+0x3f4>)
 800351a:	4618      	mov	r0, r3
 800351c:	f00f fcd8 	bl	8012ed0 <memcpy>
  Offset += SMS_TYPE_STRING_LENGTH;
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	3304      	adds	r3, #4
 8003524:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[Offset], pSMSStruct->PhoneNumber,strlen(pSMSStruct->PhoneNumber));
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	4a77      	ldr	r2, [pc, #476]	; (8003708 <NDEF_WriteSMS+0x3ec>)
 800352a:	189c      	adds	r4, r3, r2
 800352c:	687d      	ldr	r5, [r7, #4]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4618      	mov	r0, r3
 8003532:	f7fc fe4d 	bl	80001d0 <strlen>
 8003536:	4603      	mov	r3, r0
 8003538:	461a      	mov	r2, r3
 800353a:	4629      	mov	r1, r5
 800353c:	4620      	mov	r0, r4
 800353e:	f00f fcc7 	bl	8012ed0 <memcpy>
  Offset += strlen(pSMSStruct->PhoneNumber);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4618      	mov	r0, r3
 8003546:	f7fc fe43 	bl	80001d0 <strlen>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	4413      	add	r3, r2
 8003550:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[Offset], URI_FIRST_DATA_END,URI_FIRST_DATA_END_LENGTH);
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	4a6c      	ldr	r2, [pc, #432]	; (8003708 <NDEF_WriteSMS+0x3ec>)
 8003556:	4413      	add	r3, r2
 8003558:	2201      	movs	r2, #1
 800355a:	496e      	ldr	r1, [pc, #440]	; (8003714 <NDEF_WriteSMS+0x3f8>)
 800355c:	4618      	mov	r0, r3
 800355e:	f00f fcb7 	bl	8012ed0 <memcpy>
  Offset += URI_FIRST_DATA_END_LENGTH;
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	3301      	adds	r3, #1
 8003566:	613b      	str	r3, [r7, #16]
  
  memcpy( &NDEF_Buffer[Offset], MESSAGE_BEGIN_STRING, MESSAGE_BEGIN_STRING_LENGTH);
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	4a67      	ldr	r2, [pc, #412]	; (8003708 <NDEF_WriteSMS+0x3ec>)
 800356c:	4413      	add	r3, r2
 800356e:	2205      	movs	r2, #5
 8003570:	4969      	ldr	r1, [pc, #420]	; (8003718 <NDEF_WriteSMS+0x3fc>)
 8003572:	4618      	mov	r0, r3
 8003574:	f00f fcac 	bl	8012ed0 <memcpy>
  Offset += MESSAGE_BEGIN_STRING_LENGTH;
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	3305      	adds	r3, #5
 800357c:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[Offset], pSMSStruct->Message, strlen(pSMSStruct->Message));
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	4a61      	ldr	r2, [pc, #388]	; (8003708 <NDEF_WriteSMS+0x3ec>)
 8003582:	189c      	adds	r4, r3, r2
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f103 0510 	add.w	r5, r3, #16
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3310      	adds	r3, #16
 800358e:	4618      	mov	r0, r3
 8003590:	f7fc fe1e 	bl	80001d0 <strlen>
 8003594:	4603      	mov	r3, r0
 8003596:	461a      	mov	r2, r3
 8003598:	4629      	mov	r1, r5
 800359a:	4620      	mov	r0, r4
 800359c:	f00f fc98 	bl	8012ed0 <memcpy>
  Offset += strlen(pSMSStruct->Message);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3310      	adds	r3, #16
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fc fe13 	bl	80001d0 <strlen>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	4413      	add	r3, r2
 80035b0:	613b      	str	r3, [r7, #16]
  
  /* Information header */
  if (pSMSStruct->Information[0] != '\0')
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d079      	beq.n	80036b0 <NDEF_WriteSMS+0x394>
  {
    if (infoSize > 255)
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	2bff      	cmp	r3, #255	; 0xff
 80035c0:	d92b      	bls.n	800361a <NDEF_WriteSMS+0x2fe>
    {
      NDEF_Buffer[Offset++] = 0x41;
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	613a      	str	r2, [r7, #16]
 80035c8:	4a4f      	ldr	r2, [pc, #316]	; (8003708 <NDEF_WriteSMS+0x3ec>)
 80035ca:	2141      	movs	r1, #65	; 0x41
 80035cc:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = TEXT_TYPE_STRING_LENGTH;
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	613a      	str	r2, [r7, #16]
 80035d4:	4a4c      	ldr	r2, [pc, #304]	; (8003708 <NDEF_WriteSMS+0x3ec>)
 80035d6:	2101      	movs	r1, #1
 80035d8:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (infoSize & 0xFF000000)>>24;
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	0e19      	lsrs	r1, r3, #24
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1c5a      	adds	r2, r3, #1
 80035e2:	613a      	str	r2, [r7, #16]
 80035e4:	b2c9      	uxtb	r1, r1
 80035e6:	4a48      	ldr	r2, [pc, #288]	; (8003708 <NDEF_WriteSMS+0x3ec>)
 80035e8:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (infoSize & 0x00FF0000)>>16;
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	0c19      	lsrs	r1, r3, #16
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1c5a      	adds	r2, r3, #1
 80035f2:	613a      	str	r2, [r7, #16]
 80035f4:	b2c9      	uxtb	r1, r1
 80035f6:	4a44      	ldr	r2, [pc, #272]	; (8003708 <NDEF_WriteSMS+0x3ec>)
 80035f8:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (infoSize & 0x0000FF00)>>8;
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	0a19      	lsrs	r1, r3, #8
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	613a      	str	r2, [r7, #16]
 8003604:	b2c9      	uxtb	r1, r1
 8003606:	4a40      	ldr	r2, [pc, #256]	; (8003708 <NDEF_WriteSMS+0x3ec>)
 8003608:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (infoSize & 0x000000FF);
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	613a      	str	r2, [r7, #16]
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	b2d1      	uxtb	r1, r2
 8003614:	4a3c      	ldr	r2, [pc, #240]	; (8003708 <NDEF_WriteSMS+0x3ec>)
 8003616:	54d1      	strb	r1, [r2, r3]
 8003618:	e012      	b.n	8003640 <NDEF_WriteSMS+0x324>
    }
    else
    {
      NDEF_Buffer[Offset++] = 0x51;
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	613a      	str	r2, [r7, #16]
 8003620:	4a39      	ldr	r2, [pc, #228]	; (8003708 <NDEF_WriteSMS+0x3ec>)
 8003622:	2151      	movs	r1, #81	; 0x51
 8003624:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = TEXT_TYPE_STRING_LENGTH;
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	613a      	str	r2, [r7, #16]
 800362c:	4a36      	ldr	r2, [pc, #216]	; (8003708 <NDEF_WriteSMS+0x3ec>)
 800362e:	2101      	movs	r1, #1
 8003630:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (uint8_t)infoSize;
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1c5a      	adds	r2, r3, #1
 8003636:	613a      	str	r2, [r7, #16]
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	b2d1      	uxtb	r1, r2
 800363c:	4a32      	ldr	r2, [pc, #200]	; (8003708 <NDEF_WriteSMS+0x3ec>)
 800363e:	54d1      	strb	r1, [r2, r3]
    }
    
    memcpy(&NDEF_Buffer[Offset], TEXT_TYPE_STRING, TEXT_TYPE_STRING_LENGTH);
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	4a31      	ldr	r2, [pc, #196]	; (8003708 <NDEF_WriteSMS+0x3ec>)
 8003644:	4413      	add	r3, r2
 8003646:	2201      	movs	r2, #1
 8003648:	4934      	ldr	r1, [pc, #208]	; (800371c <NDEF_WriteSMS+0x400>)
 800364a:	4618      	mov	r0, r3
 800364c:	f00f fc40 	bl	8012ed0 <memcpy>
    Offset+=TEXT_TYPE_STRING_LENGTH;
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	3301      	adds	r3, #1
 8003654:	613b      	str	r3, [r7, #16]
    NDEF_Buffer[Offset++] = ISO_ENGLISH_CODE_STRING_LENGTH; /* UTF-8 with x byte language code */
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1c5a      	adds	r2, r3, #1
 800365a:	613a      	str	r2, [r7, #16]
 800365c:	4a2a      	ldr	r2, [pc, #168]	; (8003708 <NDEF_WriteSMS+0x3ec>)
 800365e:	2102      	movs	r1, #2
 8003660:	54d1      	strb	r1, [r2, r3]
    memcpy(&NDEF_Buffer[Offset], ISO_ENGLISH_CODE_STRING, ISO_ENGLISH_CODE_STRING_LENGTH);
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	4a28      	ldr	r2, [pc, #160]	; (8003708 <NDEF_WriteSMS+0x3ec>)
 8003666:	4413      	add	r3, r2
 8003668:	2202      	movs	r2, #2
 800366a:	492d      	ldr	r1, [pc, #180]	; (8003720 <NDEF_WriteSMS+0x404>)
 800366c:	4618      	mov	r0, r3
 800366e:	f00f fc2f 	bl	8012ed0 <memcpy>
    Offset+=ISO_ENGLISH_CODE_STRING_LENGTH;
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	3302      	adds	r3, #2
 8003676:	613b      	str	r3, [r7, #16]
    
    /* Information payload */
    memcpy( &NDEF_Buffer[Offset], pSMSStruct->Information,strlen(pSMSStruct->Information));
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	4a23      	ldr	r2, [pc, #140]	; (8003708 <NDEF_WriteSMS+0x3ec>)
 800367c:	189c      	adds	r4, r3, r2
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f503 75d0 	add.w	r5, r3, #416	; 0x1a0
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800368a:	4618      	mov	r0, r3
 800368c:	f7fc fda0 	bl	80001d0 <strlen>
 8003690:	4603      	mov	r3, r0
 8003692:	461a      	mov	r2, r3
 8003694:	4629      	mov	r1, r5
 8003696:	4620      	mov	r0, r4
 8003698:	f00f fc1a 	bl	8012ed0 <memcpy>
    Offset += strlen(pSMSStruct->Information);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fc fd94 	bl	80001d0 <strlen>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	4413      	add	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]
  }
  
  /* Write NDEF */
  status = NFC_TT4_WriteData ( 0x00 , Offset , NDEF_Buffer);
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	4a14      	ldr	r2, [pc, #80]	; (8003708 <NDEF_WriteSMS+0x3ec>)
 80036b6:	4619      	mov	r1, r3
 80036b8:	2000      	movs	r0, #0
 80036ba:	f7fe fd0b 	bl	80020d4 <NFC_TT4_WriteData>
 80036be:	4603      	mov	r3, r0
 80036c0:	83fb      	strh	r3, [r7, #30]
  
  /* Write NDEF size to complete*/
  if( status == NFC_TT4_ACTION_COMPLETED)
 80036c2:	8bfb      	ldrh	r3, [r7, #30]
 80036c4:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 80036c8:	d112      	bne.n	80036f0 <NDEF_WriteSMS+0x3d4>
  {
    Offset -= 2; /* Must not count the 2 byte that represent the NDEF size */
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	3b02      	subs	r3, #2
 80036ce:	613b      	str	r3, [r7, #16]
    NDEF_Buffer[0] = (Offset & 0xFF00)>>8;
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	0a1b      	lsrs	r3, r3, #8
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	4b0c      	ldr	r3, [pc, #48]	; (8003708 <NDEF_WriteSMS+0x3ec>)
 80036d8:	701a      	strb	r2, [r3, #0]
    NDEF_Buffer[1] = (Offset & 0x00FF);
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	4b0a      	ldr	r3, [pc, #40]	; (8003708 <NDEF_WriteSMS+0x3ec>)
 80036e0:	705a      	strb	r2, [r3, #1]
    
    status = NFC_TT4_WriteData ( 0x00 , 2 , NDEF_Buffer);
 80036e2:	4a09      	ldr	r2, [pc, #36]	; (8003708 <NDEF_WriteSMS+0x3ec>)
 80036e4:	2102      	movs	r1, #2
 80036e6:	2000      	movs	r0, #0
 80036e8:	f7fe fcf4 	bl	80020d4 <NFC_TT4_WriteData>
 80036ec:	4603      	mov	r3, r0
 80036ee:	83fb      	strh	r3, [r7, #30]
  }
  
  if( status == NFC_TT4_ACTION_COMPLETED)
 80036f0:	8bfb      	ldrh	r3, [r7, #30]
 80036f2:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 80036f6:	d101      	bne.n	80036fc <NDEF_WriteSMS+0x3e0>
    return NDEF_SUCCESS;
 80036f8:	2300      	movs	r3, #0
 80036fa:	e000      	b.n	80036fe <NDEF_WriteSMS+0x3e2>
  else
    return NDEF_ERROR;
 80036fc:	2301      	movs	r3, #1
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3720      	adds	r7, #32
 8003702:	46bd      	mov	sp, r7
 8003704:	bdb0      	pop	{r4, r5, r7, pc}
 8003706:	bf00      	nop
 8003708:	200022c8 	.word	0x200022c8
 800370c:	08015e64 	.word	0x08015e64
 8003710:	08015e4c 	.word	0x08015e4c
 8003714:	08015e54 	.word	0x08015e54
 8003718:	08015e58 	.word	0x08015e58
 800371c:	08015e68 	.word	0x08015e68
 8003720:	08015e6c 	.word	0x08015e6c

08003724 <NDEF_Parse_WellKnowType>:
  * @param  pRecordStruct : Pointer on the record structure
  * @param  pURI : pointer on the structure to fill
  * @retval NONE 
  */
static void NDEF_Parse_WellKnowType(sRecordInfo *pRecordStruct, sURI_Info* pURI )
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t PayloadSize;
  uint8_t Offset;
  uint8_t* pPayload;
  
  pPayload = (uint8_t*)(pRecordStruct->PayloadBufferAdd);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8003734:	613b      	str	r3, [r7, #16]
  
  switch( *pPayload)
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	3b01      	subs	r3, #1
 800373c:	2b22      	cmp	r3, #34	; 0x22
 800373e:	f200 8184 	bhi.w	8003a4a <NDEF_Parse_WellKnowType+0x326>
 8003742:	a201      	add	r2, pc, #4	; (adr r2, 8003748 <NDEF_Parse_WellKnowType+0x24>)
 8003744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003748:	080037d5 	.word	0x080037d5
 800374c:	080037e7 	.word	0x080037e7
 8003750:	080037f9 	.word	0x080037f9
 8003754:	0800380b 	.word	0x0800380b
 8003758:	0800381d 	.word	0x0800381d
 800375c:	0800382f 	.word	0x0800382f
 8003760:	08003841 	.word	0x08003841
 8003764:	08003853 	.word	0x08003853
 8003768:	08003865 	.word	0x08003865
 800376c:	08003877 	.word	0x08003877
 8003770:	08003889 	.word	0x08003889
 8003774:	0800389b 	.word	0x0800389b
 8003778:	080038ad 	.word	0x080038ad
 800377c:	080038bf 	.word	0x080038bf
 8003780:	080038d1 	.word	0x080038d1
 8003784:	080038e3 	.word	0x080038e3
 8003788:	080038f5 	.word	0x080038f5
 800378c:	08003907 	.word	0x08003907
 8003790:	08003919 	.word	0x08003919
 8003794:	0800392b 	.word	0x0800392b
 8003798:	0800393d 	.word	0x0800393d
 800379c:	0800394f 	.word	0x0800394f
 80037a0:	08003961 	.word	0x08003961
 80037a4:	08003973 	.word	0x08003973
 80037a8:	08003985 	.word	0x08003985
 80037ac:	08003997 	.word	0x08003997
 80037b0:	080039a9 	.word	0x080039a9
 80037b4:	080039bb 	.word	0x080039bb
 80037b8:	080039cd 	.word	0x080039cd
 80037bc:	080039df 	.word	0x080039df
 80037c0:	080039f1 	.word	0x080039f1
 80037c4:	08003a03 	.word	0x08003a03
 80037c8:	08003a15 	.word	0x08003a15
 80037cc:	08003a27 	.word	0x08003a27
 80037d0:	08003a39 	.word	0x08003a39
  {
  case URI_ID_0x01:
    memcpy( pURI->protocol, URI_ID_0x01_STRING, strlen(URI_ID_0x01_STRING));
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	220b      	movs	r2, #11
 80037d8:	49b2      	ldr	r1, [pc, #712]	; (8003aa4 <NDEF_Parse_WellKnowType+0x380>)
 80037da:	4618      	mov	r0, r3
 80037dc:	f00f fb78 	bl	8012ed0 <memcpy>
    Offset = strlen(URI_ID_0x01_STRING);
 80037e0:	230b      	movs	r3, #11
 80037e2:	75fb      	strb	r3, [r7, #23]
    break;
 80037e4:	e134      	b.n	8003a50 <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x02:
    memcpy( pURI->protocol, URI_ID_0x02_STRING, strlen(URI_ID_0x02_STRING));
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	220c      	movs	r2, #12
 80037ea:	49af      	ldr	r1, [pc, #700]	; (8003aa8 <NDEF_Parse_WellKnowType+0x384>)
 80037ec:	4618      	mov	r0, r3
 80037ee:	f00f fb6f 	bl	8012ed0 <memcpy>
    Offset = strlen(URI_ID_0x02_STRING);
 80037f2:	230c      	movs	r3, #12
 80037f4:	75fb      	strb	r3, [r7, #23]
    break;
 80037f6:	e12b      	b.n	8003a50 <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x03:
    memcpy( pURI->protocol, URI_ID_0x03_STRING, strlen(URI_ID_0x03_STRING));
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	2207      	movs	r2, #7
 80037fc:	49ab      	ldr	r1, [pc, #684]	; (8003aac <NDEF_Parse_WellKnowType+0x388>)
 80037fe:	4618      	mov	r0, r3
 8003800:	f00f fb66 	bl	8012ed0 <memcpy>
    Offset = strlen(URI_ID_0x03_STRING);
 8003804:	2307      	movs	r3, #7
 8003806:	75fb      	strb	r3, [r7, #23]
    break;
 8003808:	e122      	b.n	8003a50 <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x04:
    memcpy( pURI->protocol, URI_ID_0x04_STRING, strlen(URI_ID_0x04_STRING));
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2208      	movs	r2, #8
 800380e:	49a8      	ldr	r1, [pc, #672]	; (8003ab0 <NDEF_Parse_WellKnowType+0x38c>)
 8003810:	4618      	mov	r0, r3
 8003812:	f00f fb5d 	bl	8012ed0 <memcpy>
    Offset = strlen(URI_ID_0x04_STRING);
 8003816:	2308      	movs	r3, #8
 8003818:	75fb      	strb	r3, [r7, #23]
    break;
 800381a:	e119      	b.n	8003a50 <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x05:
    memcpy( pURI->protocol, URI_ID_0x05_STRING, strlen(URI_ID_0x05_STRING));
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	2204      	movs	r2, #4
 8003820:	49a4      	ldr	r1, [pc, #656]	; (8003ab4 <NDEF_Parse_WellKnowType+0x390>)
 8003822:	4618      	mov	r0, r3
 8003824:	f00f fb54 	bl	8012ed0 <memcpy>
    Offset = strlen(URI_ID_0x05_STRING);
 8003828:	2304      	movs	r3, #4
 800382a:	75fb      	strb	r3, [r7, #23]
    break;
 800382c:	e110      	b.n	8003a50 <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x06:
    memcpy( pURI->protocol, URI_ID_0x06_STRING, strlen(URI_ID_0x06_STRING));
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2207      	movs	r2, #7
 8003832:	49a1      	ldr	r1, [pc, #644]	; (8003ab8 <NDEF_Parse_WellKnowType+0x394>)
 8003834:	4618      	mov	r0, r3
 8003836:	f00f fb4b 	bl	8012ed0 <memcpy>
    Offset = strlen(URI_ID_0x06_STRING);
 800383a:	2307      	movs	r3, #7
 800383c:	75fb      	strb	r3, [r7, #23]
    break;
 800383e:	e107      	b.n	8003a50 <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x07:
    memcpy( pURI->protocol, URI_ID_0x07_STRING, strlen(URI_ID_0x07_STRING));
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	221a      	movs	r2, #26
 8003844:	499d      	ldr	r1, [pc, #628]	; (8003abc <NDEF_Parse_WellKnowType+0x398>)
 8003846:	4618      	mov	r0, r3
 8003848:	f00f fb42 	bl	8012ed0 <memcpy>
    Offset = strlen(URI_ID_0x07_STRING);
 800384c:	231a      	movs	r3, #26
 800384e:	75fb      	strb	r3, [r7, #23]
    break;
 8003850:	e0fe      	b.n	8003a50 <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x08:
    memcpy( pURI->protocol, URI_ID_0x08_STRING, strlen(URI_ID_0x08_STRING));
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	220a      	movs	r2, #10
 8003856:	499a      	ldr	r1, [pc, #616]	; (8003ac0 <NDEF_Parse_WellKnowType+0x39c>)
 8003858:	4618      	mov	r0, r3
 800385a:	f00f fb39 	bl	8012ed0 <memcpy>
    Offset = strlen(URI_ID_0x08_STRING);
 800385e:	230a      	movs	r3, #10
 8003860:	75fb      	strb	r3, [r7, #23]
    break;
 8003862:	e0f5      	b.n	8003a50 <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x09:
    memcpy( pURI->protocol, URI_ID_0x09_STRING, strlen(URI_ID_0x09_STRING));
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	2207      	movs	r2, #7
 8003868:	4996      	ldr	r1, [pc, #600]	; (8003ac4 <NDEF_Parse_WellKnowType+0x3a0>)
 800386a:	4618      	mov	r0, r3
 800386c:	f00f fb30 	bl	8012ed0 <memcpy>
    Offset = strlen(URI_ID_0x09_STRING);
 8003870:	2307      	movs	r3, #7
 8003872:	75fb      	strb	r3, [r7, #23]
    break;
 8003874:	e0ec      	b.n	8003a50 <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x0A:
    memcpy( pURI->protocol, URI_ID_0x0A_STRING, strlen(URI_ID_0x0A_STRING));
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2207      	movs	r2, #7
 800387a:	4993      	ldr	r1, [pc, #588]	; (8003ac8 <NDEF_Parse_WellKnowType+0x3a4>)
 800387c:	4618      	mov	r0, r3
 800387e:	f00f fb27 	bl	8012ed0 <memcpy>
    Offset = strlen(URI_ID_0x0A_STRING);
 8003882:	2307      	movs	r3, #7
 8003884:	75fb      	strb	r3, [r7, #23]
    break;
 8003886:	e0e3      	b.n	8003a50 <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x0B:
    memcpy( pURI->protocol, URI_ID_0x0B_STRING, strlen(URI_ID_0x0B_STRING));
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	2206      	movs	r2, #6
 800388c:	498f      	ldr	r1, [pc, #572]	; (8003acc <NDEF_Parse_WellKnowType+0x3a8>)
 800388e:	4618      	mov	r0, r3
 8003890:	f00f fb1e 	bl	8012ed0 <memcpy>
    Offset = strlen(URI_ID_0x0B_STRING);
 8003894:	2306      	movs	r3, #6
 8003896:	75fb      	strb	r3, [r7, #23]
    break;
 8003898:	e0da      	b.n	8003a50 <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x0C:
    memcpy( pURI->protocol, URI_ID_0x0C_STRING, strlen(URI_ID_0x0C_STRING));
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2206      	movs	r2, #6
 800389e:	498c      	ldr	r1, [pc, #560]	; (8003ad0 <NDEF_Parse_WellKnowType+0x3ac>)
 80038a0:	4618      	mov	r0, r3
 80038a2:	f00f fb15 	bl	8012ed0 <memcpy>
    Offset = strlen(URI_ID_0x0C_STRING);
 80038a6:	2306      	movs	r3, #6
 80038a8:	75fb      	strb	r3, [r7, #23]
    break;
 80038aa:	e0d1      	b.n	8003a50 <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x0D:
    memcpy( pURI->protocol, URI_ID_0x0D_STRING, strlen(URI_ID_0x0D_STRING));
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	2206      	movs	r2, #6
 80038b0:	4988      	ldr	r1, [pc, #544]	; (8003ad4 <NDEF_Parse_WellKnowType+0x3b0>)
 80038b2:	4618      	mov	r0, r3
 80038b4:	f00f fb0c 	bl	8012ed0 <memcpy>
    Offset = strlen(URI_ID_0x0D_STRING);
 80038b8:	2306      	movs	r3, #6
 80038ba:	75fb      	strb	r3, [r7, #23]
    break;
 80038bc:	e0c8      	b.n	8003a50 <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x0E:
    memcpy( pURI->protocol, URI_ID_0x0E_STRING, strlen(URI_ID_0x0E_STRING));
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2206      	movs	r2, #6
 80038c2:	4985      	ldr	r1, [pc, #532]	; (8003ad8 <NDEF_Parse_WellKnowType+0x3b4>)
 80038c4:	4618      	mov	r0, r3
 80038c6:	f00f fb03 	bl	8012ed0 <memcpy>
    Offset = strlen(URI_ID_0x0E_STRING);
 80038ca:	2306      	movs	r3, #6
 80038cc:	75fb      	strb	r3, [r7, #23]
    break;
 80038ce:	e0bf      	b.n	8003a50 <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x0F:
    memcpy( pURI->protocol, URI_ID_0x0F_STRING, strlen(URI_ID_0x0F_STRING));
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	2205      	movs	r2, #5
 80038d4:	4981      	ldr	r1, [pc, #516]	; (8003adc <NDEF_Parse_WellKnowType+0x3b8>)
 80038d6:	4618      	mov	r0, r3
 80038d8:	f00f fafa 	bl	8012ed0 <memcpy>
    Offset = strlen(URI_ID_0x0F_STRING);
 80038dc:	2305      	movs	r3, #5
 80038de:	75fb      	strb	r3, [r7, #23]
    break;
 80038e0:	e0b6      	b.n	8003a50 <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x10:
    memcpy( pURI->protocol, URI_ID_0x10_STRING, strlen(URI_ID_0x10_STRING));
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2209      	movs	r2, #9
 80038e6:	497e      	ldr	r1, [pc, #504]	; (8003ae0 <NDEF_Parse_WellKnowType+0x3bc>)
 80038e8:	4618      	mov	r0, r3
 80038ea:	f00f faf1 	bl	8012ed0 <memcpy>
    Offset = strlen(URI_ID_0x10_STRING);
 80038ee:	2309      	movs	r3, #9
 80038f0:	75fb      	strb	r3, [r7, #23]
    break;
 80038f2:	e0ad      	b.n	8003a50 <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x11:
    memcpy( pURI->protocol, URI_ID_0x11_STRING, strlen(URI_ID_0x11_STRING));
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	2205      	movs	r2, #5
 80038f8:	497a      	ldr	r1, [pc, #488]	; (8003ae4 <NDEF_Parse_WellKnowType+0x3c0>)
 80038fa:	4618      	mov	r0, r3
 80038fc:	f00f fae8 	bl	8012ed0 <memcpy>
    Offset = strlen(URI_ID_0x11_STRING);
 8003900:	2305      	movs	r3, #5
 8003902:	75fb      	strb	r3, [r7, #23]
    break;
 8003904:	e0a4      	b.n	8003a50 <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x12:
    memcpy( pURI->protocol, URI_ID_0x12_STRING, strlen(URI_ID_0x12_STRING));
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	2207      	movs	r2, #7
 800390a:	4977      	ldr	r1, [pc, #476]	; (8003ae8 <NDEF_Parse_WellKnowType+0x3c4>)
 800390c:	4618      	mov	r0, r3
 800390e:	f00f fadf 	bl	8012ed0 <memcpy>
    Offset = strlen(URI_ID_0x12_STRING);
 8003912:	2307      	movs	r3, #7
 8003914:	75fb      	strb	r3, [r7, #23]
    break;
 8003916:	e09b      	b.n	8003a50 <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x13:
    memcpy( pURI->protocol, URI_ID_0x13_STRING, strlen(URI_ID_0x13_STRING));
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	2204      	movs	r2, #4
 800391c:	4973      	ldr	r1, [pc, #460]	; (8003aec <NDEF_Parse_WellKnowType+0x3c8>)
 800391e:	4618      	mov	r0, r3
 8003920:	f00f fad6 	bl	8012ed0 <memcpy>
    Offset = strlen(URI_ID_0x13_STRING);
 8003924:	2304      	movs	r3, #4
 8003926:	75fb      	strb	r3, [r7, #23]
    break;
 8003928:	e092      	b.n	8003a50 <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x14:
    memcpy( pURI->protocol, URI_ID_0x14_STRING, strlen(URI_ID_0x14_STRING));
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2204      	movs	r2, #4
 800392e:	4970      	ldr	r1, [pc, #448]	; (8003af0 <NDEF_Parse_WellKnowType+0x3cc>)
 8003930:	4618      	mov	r0, r3
 8003932:	f00f facd 	bl	8012ed0 <memcpy>
    Offset = strlen(URI_ID_0x14_STRING);
 8003936:	2304      	movs	r3, #4
 8003938:	75fb      	strb	r3, [r7, #23]
    break;
 800393a:	e089      	b.n	8003a50 <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x15:
    memcpy( pURI->protocol, URI_ID_0x15_STRING, strlen(URI_ID_0x15_STRING));
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	2204      	movs	r2, #4
 8003940:	496c      	ldr	r1, [pc, #432]	; (8003af4 <NDEF_Parse_WellKnowType+0x3d0>)
 8003942:	4618      	mov	r0, r3
 8003944:	f00f fac4 	bl	8012ed0 <memcpy>
    Offset = strlen(URI_ID_0x15_STRING);
 8003948:	2304      	movs	r3, #4
 800394a:	75fb      	strb	r3, [r7, #23]
    break;
 800394c:	e080      	b.n	8003a50 <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x16:
    memcpy( pURI->protocol, URI_ID_0x16_STRING, strlen(URI_ID_0x16_STRING));
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2205      	movs	r2, #5
 8003952:	4969      	ldr	r1, [pc, #420]	; (8003af8 <NDEF_Parse_WellKnowType+0x3d4>)
 8003954:	4618      	mov	r0, r3
 8003956:	f00f fabb 	bl	8012ed0 <memcpy>
    Offset = strlen(URI_ID_0x16_STRING);
 800395a:	2305      	movs	r3, #5
 800395c:	75fb      	strb	r3, [r7, #23]
    break;
 800395e:	e077      	b.n	8003a50 <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x17:
    memcpy( pURI->protocol, URI_ID_0x17_STRING, strlen(URI_ID_0x17_STRING));
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	2205      	movs	r2, #5
 8003964:	4965      	ldr	r1, [pc, #404]	; (8003afc <NDEF_Parse_WellKnowType+0x3d8>)
 8003966:	4618      	mov	r0, r3
 8003968:	f00f fab2 	bl	8012ed0 <memcpy>
    Offset = strlen(URI_ID_0x17_STRING);
 800396c:	2305      	movs	r3, #5
 800396e:	75fb      	strb	r3, [r7, #23]
    break;
 8003970:	e06e      	b.n	8003a50 <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x18:
    memcpy( pURI->protocol, URI_ID_0x18_STRING, strlen(URI_ID_0x18_STRING));
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2208      	movs	r2, #8
 8003976:	4962      	ldr	r1, [pc, #392]	; (8003b00 <NDEF_Parse_WellKnowType+0x3dc>)
 8003978:	4618      	mov	r0, r3
 800397a:	f00f faa9 	bl	8012ed0 <memcpy>
    Offset = strlen(URI_ID_0x18_STRING);
 800397e:	2308      	movs	r3, #8
 8003980:	75fb      	strb	r3, [r7, #23]
    break;
 8003982:	e065      	b.n	8003a50 <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x19:
    memcpy( pURI->protocol, URI_ID_0x19_STRING, strlen(URI_ID_0x19_STRING));
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	220a      	movs	r2, #10
 8003988:	495e      	ldr	r1, [pc, #376]	; (8003b04 <NDEF_Parse_WellKnowType+0x3e0>)
 800398a:	4618      	mov	r0, r3
 800398c:	f00f faa0 	bl	8012ed0 <memcpy>
    Offset = strlen(URI_ID_0x19_STRING);
 8003990:	230a      	movs	r3, #10
 8003992:	75fb      	strb	r3, [r7, #23]
    break;
 8003994:	e05c      	b.n	8003a50 <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x1A:
    memcpy( pURI->protocol, URI_ID_0x1A_STRING, strlen(URI_ID_0x1A_STRING));
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	2209      	movs	r2, #9
 800399a:	495b      	ldr	r1, [pc, #364]	; (8003b08 <NDEF_Parse_WellKnowType+0x3e4>)
 800399c:	4618      	mov	r0, r3
 800399e:	f00f fa97 	bl	8012ed0 <memcpy>
    Offset = strlen(URI_ID_0x1A_STRING);
 80039a2:	2309      	movs	r3, #9
 80039a4:	75fb      	strb	r3, [r7, #23]
    break;
 80039a6:	e053      	b.n	8003a50 <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x1B:
    memcpy( pURI->protocol, URI_ID_0x1B_STRING, strlen(URI_ID_0x1B_STRING));
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	220a      	movs	r2, #10
 80039ac:	4957      	ldr	r1, [pc, #348]	; (8003b0c <NDEF_Parse_WellKnowType+0x3e8>)
 80039ae:	4618      	mov	r0, r3
 80039b0:	f00f fa8e 	bl	8012ed0 <memcpy>
    Offset = strlen(URI_ID_0x1B_STRING);
 80039b4:	230a      	movs	r3, #10
 80039b6:	75fb      	strb	r3, [r7, #23]
    break;
 80039b8:	e04a      	b.n	8003a50 <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x1C:
    memcpy( pURI->protocol, URI_ID_0x1C_STRING, strlen(URI_ID_0x1C_STRING));
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	220b      	movs	r2, #11
 80039be:	4954      	ldr	r1, [pc, #336]	; (8003b10 <NDEF_Parse_WellKnowType+0x3ec>)
 80039c0:	4618      	mov	r0, r3
 80039c2:	f00f fa85 	bl	8012ed0 <memcpy>
    Offset = strlen(URI_ID_0x1C_STRING);
 80039c6:	230b      	movs	r3, #11
 80039c8:	75fb      	strb	r3, [r7, #23]
    break;
 80039ca:	e041      	b.n	8003a50 <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x1D:
    memcpy( pURI->protocol, URI_ID_0x1D_STRING, strlen(URI_ID_0x1D_STRING));
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	2207      	movs	r2, #7
 80039d0:	4950      	ldr	r1, [pc, #320]	; (8003b14 <NDEF_Parse_WellKnowType+0x3f0>)
 80039d2:	4618      	mov	r0, r3
 80039d4:	f00f fa7c 	bl	8012ed0 <memcpy>
    Offset = strlen(URI_ID_0x1D_STRING);
 80039d8:	2307      	movs	r3, #7
 80039da:	75fb      	strb	r3, [r7, #23]
    break;
 80039dc:	e038      	b.n	8003a50 <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x1E:
    memcpy( pURI->protocol, URI_ID_0x1E_STRING, strlen(URI_ID_0x1E_STRING));
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	220b      	movs	r2, #11
 80039e2:	494d      	ldr	r1, [pc, #308]	; (8003b18 <NDEF_Parse_WellKnowType+0x3f4>)
 80039e4:	4618      	mov	r0, r3
 80039e6:	f00f fa73 	bl	8012ed0 <memcpy>
    Offset = strlen(URI_ID_0x1E_STRING);
 80039ea:	230b      	movs	r3, #11
 80039ec:	75fb      	strb	r3, [r7, #23]
    break;
 80039ee:	e02f      	b.n	8003a50 <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x1F:
    memcpy( pURI->protocol, URI_ID_0x1F_STRING, strlen(URI_ID_0x1F_STRING));
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	220b      	movs	r2, #11
 80039f4:	4949      	ldr	r1, [pc, #292]	; (8003b1c <NDEF_Parse_WellKnowType+0x3f8>)
 80039f6:	4618      	mov	r0, r3
 80039f8:	f00f fa6a 	bl	8012ed0 <memcpy>
    Offset = strlen(URI_ID_0x1F_STRING);
 80039fc:	230b      	movs	r3, #11
 80039fe:	75fb      	strb	r3, [r7, #23]
    break;
 8003a00:	e026      	b.n	8003a50 <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x20:
    memcpy( pURI->protocol, URI_ID_0x20_STRING, strlen(URI_ID_0x20_STRING));
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	220c      	movs	r2, #12
 8003a06:	4946      	ldr	r1, [pc, #280]	; (8003b20 <NDEF_Parse_WellKnowType+0x3fc>)
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f00f fa61 	bl	8012ed0 <memcpy>
    Offset = strlen(URI_ID_0x20_STRING);
 8003a0e:	230c      	movs	r3, #12
 8003a10:	75fb      	strb	r3, [r7, #23]
    break;
 8003a12:	e01d      	b.n	8003a50 <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x21:
    memcpy( pURI->protocol, URI_ID_0x21_STRING, strlen(URI_ID_0x21_STRING));
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	220c      	movs	r2, #12
 8003a18:	4942      	ldr	r1, [pc, #264]	; (8003b24 <NDEF_Parse_WellKnowType+0x400>)
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f00f fa58 	bl	8012ed0 <memcpy>
    Offset = strlen(URI_ID_0x21_STRING);
 8003a20:	230c      	movs	r3, #12
 8003a22:	75fb      	strb	r3, [r7, #23]
    break;
 8003a24:	e014      	b.n	8003a50 <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x22:
    memcpy( pURI->protocol, URI_ID_0x22_STRING, strlen(URI_ID_0x22_STRING));
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2208      	movs	r2, #8
 8003a2a:	493f      	ldr	r1, [pc, #252]	; (8003b28 <NDEF_Parse_WellKnowType+0x404>)
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f00f fa4f 	bl	8012ed0 <memcpy>
    Offset = strlen(URI_ID_0x22_STRING);
 8003a32:	2308      	movs	r3, #8
 8003a34:	75fb      	strb	r3, [r7, #23]
    break;
 8003a36:	e00b      	b.n	8003a50 <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x23:
    memcpy( pURI->protocol, URI_ID_0x23_STRING, strlen(URI_ID_0x23_STRING));
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	2208      	movs	r2, #8
 8003a3c:	493b      	ldr	r1, [pc, #236]	; (8003b2c <NDEF_Parse_WellKnowType+0x408>)
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f00f fa46 	bl	8012ed0 <memcpy>
    Offset = strlen(URI_ID_0x23_STRING);
 8003a44:	2308      	movs	r3, #8
 8003a46:	75fb      	strb	r3, [r7, #23]
    break;
 8003a48:	e002      	b.n	8003a50 <NDEF_Parse_WellKnowType+0x32c>
    
  default:
    Offset = 0;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	75fb      	strb	r3, [r7, #23]
    /* Should not happened */
    break;
 8003a4e:	bf00      	nop
  }
  /* add end of string charactere */
  pURI->protocol[Offset] = '\0';
 8003a50:	7dfb      	ldrb	r3, [r7, #23]
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	2100      	movs	r1, #0
 8003a56:	54d1      	strb	r1, [r2, r3]
  
  pPayload++; /* go after well know byte */
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	613b      	str	r3, [r7, #16]
  
  PayloadSize = ((uint32_t)(pRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pRecordStruct->PayloadLength2)<<16) |
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	789b      	ldrb	r3, [r3, #2]
 8003a62:	061a      	lsls	r2, r3, #24
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	78db      	ldrb	r3, [r3, #3]
 8003a68:	041b      	lsls	r3, r3, #16
 8003a6a:	431a      	orrs	r2, r3
    ((uint32_t)(pRecordStruct->PayloadLength1)<<8)  | pRecordStruct->PayloadLength0;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	791b      	ldrb	r3, [r3, #4]
 8003a70:	021b      	lsls	r3, r3, #8
  PayloadSize = ((uint32_t)(pRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pRecordStruct->PayloadLength2)<<16) |
 8003a72:	4313      	orrs	r3, r2
    ((uint32_t)(pRecordStruct->PayloadLength1)<<8)  | pRecordStruct->PayloadLength0;
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	7952      	ldrb	r2, [r2, #5]
  PayloadSize = ((uint32_t)(pRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pRecordStruct->PayloadLength2)<<16) |
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]
  
  PayloadSize = PayloadSize -1; /* remove well know byte */
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	60fb      	str	r3, [r7, #12]
  
  memcpy( pURI->URI_Message, pPayload, PayloadSize);
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	3350      	adds	r3, #80	; 0x50
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	6939      	ldr	r1, [r7, #16]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f00f fa20 	bl	8012ed0 <memcpy>
  /* add end of string charactere */
  pURI->URI_Message[PayloadSize] = '\0';
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4413      	add	r3, r2
 8003a96:	3350      	adds	r3, #80	; 0x50
 8003a98:	2200      	movs	r2, #0
 8003a9a:	701a      	strb	r2, [r3, #0]
  
}
 8003a9c:	bf00      	nop
 8003a9e:	3718      	adds	r7, #24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	08015e70 	.word	0x08015e70
 8003aa8:	08015e80 	.word	0x08015e80
 8003aac:	08015e90 	.word	0x08015e90
 8003ab0:	08015e9c 	.word	0x08015e9c
 8003ab4:	08015ea8 	.word	0x08015ea8
 8003ab8:	08015eb0 	.word	0x08015eb0
 8003abc:	08015ebc 	.word	0x08015ebc
 8003ac0:	08015ed8 	.word	0x08015ed8
 8003ac4:	08015ee4 	.word	0x08015ee4
 8003ac8:	08015ef0 	.word	0x08015ef0
 8003acc:	08015efc 	.word	0x08015efc
 8003ad0:	08015f04 	.word	0x08015f04
 8003ad4:	08015f0c 	.word	0x08015f0c
 8003ad8:	08015f14 	.word	0x08015f14
 8003adc:	08015f1c 	.word	0x08015f1c
 8003ae0:	08015f24 	.word	0x08015f24
 8003ae4:	08015f30 	.word	0x08015f30
 8003ae8:	08015f38 	.word	0x08015f38
 8003aec:	08015f44 	.word	0x08015f44
 8003af0:	08015f4c 	.word	0x08015f4c
 8003af4:	08015f54 	.word	0x08015f54
 8003af8:	08015f5c 	.word	0x08015f5c
 8003afc:	08015f64 	.word	0x08015f64
 8003b00:	08015f6c 	.word	0x08015f6c
 8003b04:	08015f78 	.word	0x08015f78
 8003b08:	08015f84 	.word	0x08015f84
 8003b0c:	08015f90 	.word	0x08015f90
 8003b10:	08015f9c 	.word	0x08015f9c
 8003b14:	08015fac 	.word	0x08015fac
 8003b18:	08015fb8 	.word	0x08015fb8
 8003b1c:	08015fc8 	.word	0x08015fc8
 8003b20:	08015fd8 	.word	0x08015fd8
 8003b24:	08015fe8 	.word	0x08015fe8
 8003b28:	08015ff8 	.word	0x08015ff8
 8003b2c:	08016004 	.word	0x08016004

08003b30 <NDEF_ReadURI>:
  * @param  pURI : pointer on the structure to fill 
  * @retval SUCCESS : URI information from NDEF have been retrieved
  * @retval ERROR : Not able to retrieve URI information
  */
uint16_t NDEF_ReadURI(sRecordInfo *pRecordStruct, sURI_Info *pURI)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b088      	sub	sp, #32
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  uint16_t status = NDEF_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	83fb      	strh	r3, [r7, #30]
  sRecordInfo *pSPRecordStruct;  
  uint32_t PayloadSize, RecordPosition;
  uint8_t* pData;
  
  if( pRecordStruct->NDEF_Type == WELL_KNOWN_ABRIDGED_URI_TYPE )
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d106      	bne.n	8003b56 <NDEF_ReadURI+0x26>
  {    
    NDEF_Parse_WellKnowType(pRecordStruct, pURI );
 8003b48:	6839      	ldr	r1, [r7, #0]
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7ff fdea 	bl	8003724 <NDEF_Parse_WellKnowType>
    status = NDEF_SUCCESS;
 8003b50:	2300      	movs	r3, #0
 8003b52:	83fb      	strh	r3, [r7, #30]
 8003b54:	e04b      	b.n	8003bee <NDEF_ReadURI+0xbe>
  }
  else if( pRecordStruct->NDEF_Type == SMARTPOSTER_TYPE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 8003b5c:	2b06      	cmp	r3, #6
 8003b5e:	d144      	bne.n	8003bea <NDEF_ReadURI+0xba>
  {
    for (RecordPosition = 0; RecordPosition<pRecordStruct->NbOfRecordInSPPayload; RecordPosition++)
 8003b60:	2300      	movs	r3, #0
 8003b62:	61bb      	str	r3, [r7, #24]
 8003b64:	e039      	b.n	8003bda <NDEF_ReadURI+0xaa>
    {
      pSPRecordStruct = (sRecordInfo *)(pRecordStruct->SPRecordStructAdd[RecordPosition]);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	3284      	adds	r2, #132	; 0x84
 8003b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b70:	617b      	str	r3, [r7, #20]
      if(pSPRecordStruct->NDEF_Type == WELL_KNOWN_ABRIDGED_URI_TYPE )
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d105      	bne.n	8003b88 <NDEF_ReadURI+0x58>
      {
        NDEF_Parse_WellKnowType(pSPRecordStruct, pURI );
 8003b7c:	6839      	ldr	r1, [r7, #0]
 8003b7e:	6978      	ldr	r0, [r7, #20]
 8003b80:	f7ff fdd0 	bl	8003724 <NDEF_Parse_WellKnowType>
        status = NDEF_SUCCESS;
 8003b84:	2300      	movs	r3, #0
 8003b86:	83fb      	strh	r3, [r7, #30]
      }
      if(pSPRecordStruct->NDEF_Type == TEXT_TYPE )
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 8003b8e:	2b08      	cmp	r3, #8
 8003b90:	d120      	bne.n	8003bd4 <NDEF_ReadURI+0xa4>
      {
        PayloadSize = ((uint32_t)(pSPRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pSPRecordStruct->PayloadLength2)<<16) |
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	789b      	ldrb	r3, [r3, #2]
 8003b96:	061a      	lsls	r2, r3, #24
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	78db      	ldrb	r3, [r3, #3]
 8003b9c:	041b      	lsls	r3, r3, #16
 8003b9e:	431a      	orrs	r2, r3
          ((uint32_t)(pSPRecordStruct->PayloadLength1)<<8)  | pSPRecordStruct->PayloadLength0;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	791b      	ldrb	r3, [r3, #4]
 8003ba4:	021b      	lsls	r3, r3, #8
        PayloadSize = ((uint32_t)(pSPRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pSPRecordStruct->PayloadLength2)<<16) |
 8003ba6:	4313      	orrs	r3, r2
          ((uint32_t)(pSPRecordStruct->PayloadLength1)<<8)  | pSPRecordStruct->PayloadLength0;
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	7952      	ldrb	r2, [r2, #5]
        PayloadSize = ((uint32_t)(pSPRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pSPRecordStruct->PayloadLength2)<<16) |
 8003bac:	4313      	orrs	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
        
        /* The instruction content the UTF-8 language code that is not used here */
        pData = (uint8_t*)pSPRecordStruct->PayloadBufferAdd;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8003bb6:	60fb      	str	r3, [r7, #12]
        pData += *pData+1;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	60fb      	str	r3, [r7, #12]
        
        memcpy(pURI->Information, pData, PayloadSize);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	68f9      	ldr	r1, [r7, #12]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f00f f97e 	bl	8012ed0 <memcpy>
    for (RecordPosition = 0; RecordPosition<pRecordStruct->NbOfRecordInSPPayload; RecordPosition++)
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	61bb      	str	r3, [r7, #24]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8003be0:	461a      	mov	r2, r3
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d3be      	bcc.n	8003b66 <NDEF_ReadURI+0x36>
 8003be8:	e001      	b.n	8003bee <NDEF_ReadURI+0xbe>
      }
    }
  }
  else 
  {
    status = NDEF_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	83fb      	strh	r3, [r7, #30]
  }
  
  return status;
 8003bee:	8bfb      	ldrh	r3, [r7, #30]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3720      	adds	r7, #32
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <NDEF_WriteURI>:
  * @param  pURI : pointer on structure that contain the URI information
  * @retval SUCCESS : the function is succesful
  * @retval ERROR : Not able to store NDEF file inside tag.
  */
uint16_t NDEF_WriteURI ( sURI_Info *pURI)
{
 8003bf8:	b5b0      	push	{r4, r5, r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint16_t status = NDEF_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	83fb      	strh	r3, [r7, #30]
  uint32_t uriSize, infoSize, totalSize, Offset = 0;
 8003c04:	2300      	movs	r3, #0
 8003c06:	60fb      	str	r3, [r7, #12]
  /*              TYPE                */
  /*----------------------------------*/
  /*               ID                 */  /* <---- Not Used  */ 
  /************************************/
  
  NDEF_Buffer[0] = 0;
 8003c08:	4b73      	ldr	r3, [pc, #460]	; (8003dd8 <NDEF_WriteURI+0x1e0>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	701a      	strb	r2, [r3, #0]
  NDEF_Buffer[1] = 0;
 8003c0e:	4b72      	ldr	r3, [pc, #456]	; (8003dd8 <NDEF_WriteURI+0x1e0>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	705a      	strb	r2, [r3, #1]
  Offset = FIRST_RECORD_OFFSET;
 8003c14:	2302      	movs	r3, #2
 8003c16:	60fb      	str	r3, [r7, #12]
  infoSize = 0;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	617b      	str	r3, [r7, #20]
  
  /* We need to know the URI type in order to define if an abreviation is available */
  type = getUriType(pURI->protocol);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 f9dc 	bl	8003fdc <getUriType>
 8003c24:	4603      	mov	r3, r0
 8003c26:	72fb      	strb	r3, [r7, #11]

  /* URI : 1+URI for abreviate protocol*/
  if (type != URI_ID_0x00)
 8003c28:	7afb      	ldrb	r3, [r7, #11]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d008      	beq.n	8003c40 <NDEF_WriteURI+0x48>
    uriSize = 1+strlen(pURI->URI_Message);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	3350      	adds	r3, #80	; 0x50
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fc facc 	bl	80001d0 <strlen>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	61bb      	str	r3, [r7, #24]
 8003c3e:	e00d      	b.n	8003c5c <NDEF_WriteURI+0x64>
  else /*: 1+protocol+URI else*/
    uriSize = 1+strlen(pURI->protocol)+strlen(pURI->URI_Message);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fc fac4 	bl	80001d0 <strlen>
 8003c48:	4604      	mov	r4, r0
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	3350      	adds	r3, #80	; 0x50
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fc fabe 	bl	80001d0 <strlen>
 8003c54:	4603      	mov	r3, r0
 8003c56:	4423      	add	r3, r4
 8003c58:	3301      	adds	r3, #1
 8003c5a:	61bb      	str	r3, [r7, #24]

  /* Check if a Smart poster is needed */
  if (pURI->Information[0] != '\0')
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d066      	beq.n	8003d34 <NDEF_WriteURI+0x13c>
  {
    /* Info : 1+2+info */
    infoSize = 1+ISO_ENGLISH_CODE_STRING_LENGTH+strlen(pURI->Information);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7fc faaf 	bl	80001d0 <strlen>
 8003c72:	4603      	mov	r3, r0
 8003c74:	3303      	adds	r3, #3
 8003c76:	617b      	str	r3, [r7, #20]
    /* Total */
    totalSize = 4+uriSize+4+infoSize;
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	3308      	adds	r3, #8
 8003c80:	613b      	str	r3, [r7, #16]
    if (uriSize > 255) totalSize+=3; /* Normal URI size */
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	2bff      	cmp	r3, #255	; 0xff
 8003c86:	d902      	bls.n	8003c8e <NDEF_WriteURI+0x96>
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	3303      	adds	r3, #3
 8003c8c:	613b      	str	r3, [r7, #16]
    if (infoSize > 255) totalSize+=3;  /* Normal Info size */
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2bff      	cmp	r3, #255	; 0xff
 8003c92:	d902      	bls.n	8003c9a <NDEF_WriteURI+0xa2>
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	3303      	adds	r3, #3
 8003c98:	613b      	str	r3, [r7, #16]
    
    /* SmartPoster header */
    if (totalSize > 255) 
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	2bff      	cmp	r3, #255	; 0xff
 8003c9e:	d92b      	bls.n	8003cf8 <NDEF_WriteURI+0x100>
    {
      NDEF_Buffer[Offset++] = 0xC1;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	60fa      	str	r2, [r7, #12]
 8003ca6:	4a4c      	ldr	r2, [pc, #304]	; (8003dd8 <NDEF_WriteURI+0x1e0>)
 8003ca8:	21c1      	movs	r1, #193	; 0xc1
 8003caa:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = SMART_POSTER_TYPE_STRING_LENGTH;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	1c5a      	adds	r2, r3, #1
 8003cb0:	60fa      	str	r2, [r7, #12]
 8003cb2:	4a49      	ldr	r2, [pc, #292]	; (8003dd8 <NDEF_WriteURI+0x1e0>)
 8003cb4:	2102      	movs	r1, #2
 8003cb6:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (totalSize & 0xFF000000)>>24;
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	0e19      	lsrs	r1, r3, #24
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	60fa      	str	r2, [r7, #12]
 8003cc2:	b2c9      	uxtb	r1, r1
 8003cc4:	4a44      	ldr	r2, [pc, #272]	; (8003dd8 <NDEF_WriteURI+0x1e0>)
 8003cc6:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (totalSize & 0x00FF0000)>>16;
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	0c19      	lsrs	r1, r3, #16
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	60fa      	str	r2, [r7, #12]
 8003cd2:	b2c9      	uxtb	r1, r1
 8003cd4:	4a40      	ldr	r2, [pc, #256]	; (8003dd8 <NDEF_WriteURI+0x1e0>)
 8003cd6:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (totalSize & 0x0000FF00)>>8;
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	0a19      	lsrs	r1, r3, #8
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	1c5a      	adds	r2, r3, #1
 8003ce0:	60fa      	str	r2, [r7, #12]
 8003ce2:	b2c9      	uxtb	r1, r1
 8003ce4:	4a3c      	ldr	r2, [pc, #240]	; (8003dd8 <NDEF_WriteURI+0x1e0>)
 8003ce6:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (totalSize & 0x000000FF);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	1c5a      	adds	r2, r3, #1
 8003cec:	60fa      	str	r2, [r7, #12]
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	b2d1      	uxtb	r1, r2
 8003cf2:	4a39      	ldr	r2, [pc, #228]	; (8003dd8 <NDEF_WriteURI+0x1e0>)
 8003cf4:	54d1      	strb	r1, [r2, r3]
 8003cf6:	e012      	b.n	8003d1e <NDEF_WriteURI+0x126>
    }
    else
    {
      NDEF_Buffer[Offset++] = 0xD1;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	1c5a      	adds	r2, r3, #1
 8003cfc:	60fa      	str	r2, [r7, #12]
 8003cfe:	4a36      	ldr	r2, [pc, #216]	; (8003dd8 <NDEF_WriteURI+0x1e0>)
 8003d00:	21d1      	movs	r1, #209	; 0xd1
 8003d02:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = SMART_POSTER_TYPE_STRING_LENGTH;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	1c5a      	adds	r2, r3, #1
 8003d08:	60fa      	str	r2, [r7, #12]
 8003d0a:	4a33      	ldr	r2, [pc, #204]	; (8003dd8 <NDEF_WriteURI+0x1e0>)
 8003d0c:	2102      	movs	r1, #2
 8003d0e:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (uint8_t)totalSize;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	60fa      	str	r2, [r7, #12]
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	b2d1      	uxtb	r1, r2
 8003d1a:	4a2f      	ldr	r2, [pc, #188]	; (8003dd8 <NDEF_WriteURI+0x1e0>)
 8003d1c:	54d1      	strb	r1, [r2, r3]
    }
    memcpy(&NDEF_Buffer[Offset], SMART_POSTER_TYPE_STRING, SMART_POSTER_TYPE_STRING_LENGTH);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	4a2d      	ldr	r2, [pc, #180]	; (8003dd8 <NDEF_WriteURI+0x1e0>)
 8003d22:	4413      	add	r3, r2
 8003d24:	2202      	movs	r2, #2
 8003d26:	492d      	ldr	r1, [pc, #180]	; (8003ddc <NDEF_WriteURI+0x1e4>)
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f00f f8d1 	bl	8012ed0 <memcpy>
    Offset+=SMART_POSTER_TYPE_STRING_LENGTH;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	3302      	adds	r3, #2
 8003d32:	60fb      	str	r3, [r7, #12]
  }
  
  /* URI header */
  NDEF_Buffer[Offset] = 0x81;
 8003d34:	4a28      	ldr	r2, [pc, #160]	; (8003dd8 <NDEF_WriteURI+0x1e0>)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	4413      	add	r3, r2
 8003d3a:	2281      	movs	r2, #129	; 0x81
 8003d3c:	701a      	strb	r2, [r3, #0]
  if (uriSize < 256) NDEF_Buffer[Offset] |= 0x10;                      /* Set the SR bit */
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	2bff      	cmp	r3, #255	; 0xff
 8003d42:	d80b      	bhi.n	8003d5c <NDEF_WriteURI+0x164>
 8003d44:	4a24      	ldr	r2, [pc, #144]	; (8003dd8 <NDEF_WriteURI+0x1e0>)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4413      	add	r3, r2
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	f043 0310 	orr.w	r3, r3, #16
 8003d50:	b2d9      	uxtb	r1, r3
 8003d52:	4a21      	ldr	r2, [pc, #132]	; (8003dd8 <NDEF_WriteURI+0x1e0>)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4413      	add	r3, r2
 8003d58:	460a      	mov	r2, r1
 8003d5a:	701a      	strb	r2, [r3, #0]
  if (pURI->Information[0] == '\0') NDEF_Buffer[Offset] |= 0x40;       /* Set the ME bit */
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10b      	bne.n	8003d7e <NDEF_WriteURI+0x186>
 8003d66:	4a1c      	ldr	r2, [pc, #112]	; (8003dd8 <NDEF_WriteURI+0x1e0>)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d72:	b2d9      	uxtb	r1, r3
 8003d74:	4a18      	ldr	r2, [pc, #96]	; (8003dd8 <NDEF_WriteURI+0x1e0>)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	4413      	add	r3, r2
 8003d7a:	460a      	mov	r2, r1
 8003d7c:	701a      	strb	r2, [r3, #0]
  Offset++;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	3301      	adds	r3, #1
 8003d82:	60fb      	str	r3, [r7, #12]
  
  NDEF_Buffer[Offset++] = URI_TYPE_STRING_LENGTH;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	1c5a      	adds	r2, r3, #1
 8003d88:	60fa      	str	r2, [r7, #12]
 8003d8a:	4a13      	ldr	r2, [pc, #76]	; (8003dd8 <NDEF_WriteURI+0x1e0>)
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	54d1      	strb	r1, [r2, r3]
  if (uriSize > 255)
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	2bff      	cmp	r3, #255	; 0xff
 8003d94:	d924      	bls.n	8003de0 <NDEF_WriteURI+0x1e8>
  {
    NDEF_Buffer[Offset++] = (uriSize & 0xFF000000)>>24;
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	0e19      	lsrs	r1, r3, #24
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	1c5a      	adds	r2, r3, #1
 8003d9e:	60fa      	str	r2, [r7, #12]
 8003da0:	b2c9      	uxtb	r1, r1
 8003da2:	4a0d      	ldr	r2, [pc, #52]	; (8003dd8 <NDEF_WriteURI+0x1e0>)
 8003da4:	54d1      	strb	r1, [r2, r3]
    NDEF_Buffer[Offset++] = (uriSize & 0x00FF0000)>>16;
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	0c19      	lsrs	r1, r3, #16
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	1c5a      	adds	r2, r3, #1
 8003dae:	60fa      	str	r2, [r7, #12]
 8003db0:	b2c9      	uxtb	r1, r1
 8003db2:	4a09      	ldr	r2, [pc, #36]	; (8003dd8 <NDEF_WriteURI+0x1e0>)
 8003db4:	54d1      	strb	r1, [r2, r3]
    NDEF_Buffer[Offset++] = (uriSize & 0x0000FF00)>>8;
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	0a19      	lsrs	r1, r3, #8
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	1c5a      	adds	r2, r3, #1
 8003dbe:	60fa      	str	r2, [r7, #12]
 8003dc0:	b2c9      	uxtb	r1, r1
 8003dc2:	4a05      	ldr	r2, [pc, #20]	; (8003dd8 <NDEF_WriteURI+0x1e0>)
 8003dc4:	54d1      	strb	r1, [r2, r3]
    NDEF_Buffer[Offset++] = (uriSize & 0x000000FF);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	1c5a      	adds	r2, r3, #1
 8003dca:	60fa      	str	r2, [r7, #12]
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	b2d1      	uxtb	r1, r2
 8003dd0:	4a01      	ldr	r2, [pc, #4]	; (8003dd8 <NDEF_WriteURI+0x1e0>)
 8003dd2:	54d1      	strb	r1, [r2, r3]
 8003dd4:	e00b      	b.n	8003dee <NDEF_WriteURI+0x1f6>
 8003dd6:	bf00      	nop
 8003dd8:	200022c8 	.word	0x200022c8
 8003ddc:	08016010 	.word	0x08016010
  }
  else
  {
    NDEF_Buffer[Offset++] = (uint8_t)uriSize;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	1c5a      	adds	r2, r3, #1
 8003de4:	60fa      	str	r2, [r7, #12]
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	b2d1      	uxtb	r1, r2
 8003dea:	4a78      	ldr	r2, [pc, #480]	; (8003fcc <NDEF_WriteURI+0x3d4>)
 8003dec:	54d1      	strb	r1, [r2, r3]
  }
  memcpy(&NDEF_Buffer[Offset], URI_TYPE_STRING, URI_TYPE_STRING_LENGTH);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4a76      	ldr	r2, [pc, #472]	; (8003fcc <NDEF_WriteURI+0x3d4>)
 8003df2:	4413      	add	r3, r2
 8003df4:	2201      	movs	r2, #1
 8003df6:	4976      	ldr	r1, [pc, #472]	; (8003fd0 <NDEF_WriteURI+0x3d8>)
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f00f f869 	bl	8012ed0 <memcpy>
  Offset+=URI_TYPE_STRING_LENGTH;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	3301      	adds	r3, #1
 8003e02:	60fb      	str	r3, [r7, #12]

  NDEF_Buffer[Offset++]=type;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	1c5a      	adds	r2, r3, #1
 8003e08:	60fa      	str	r2, [r7, #12]
 8003e0a:	4970      	ldr	r1, [pc, #448]	; (8003fcc <NDEF_WriteURI+0x3d4>)
 8003e0c:	7afa      	ldrb	r2, [r7, #11]
 8003e0e:	54ca      	strb	r2, [r1, r3]
  if (type == URI_ID_0x00) /* No abreviation */
 8003e10:	7afb      	ldrb	r3, [r7, #11]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d115      	bne.n	8003e42 <NDEF_WriteURI+0x24a>
  {
    memcpy(&NDEF_Buffer[Offset], pURI->protocol, strlen(pURI->protocol));
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4a6c      	ldr	r2, [pc, #432]	; (8003fcc <NDEF_WriteURI+0x3d4>)
 8003e1a:	189c      	adds	r4, r3, r2
 8003e1c:	687d      	ldr	r5, [r7, #4]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7fc f9d5 	bl	80001d0 <strlen>
 8003e26:	4603      	mov	r3, r0
 8003e28:	461a      	mov	r2, r3
 8003e2a:	4629      	mov	r1, r5
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	f00f f84f 	bl	8012ed0 <memcpy>
    Offset+=strlen(pURI->protocol);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7fc f9cb 	bl	80001d0 <strlen>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4413      	add	r3, r2
 8003e40:	60fb      	str	r3, [r7, #12]
  }

  memcpy(&NDEF_Buffer[Offset], pURI->URI_Message, strlen(pURI->URI_Message));
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4a61      	ldr	r2, [pc, #388]	; (8003fcc <NDEF_WriteURI+0x3d4>)
 8003e46:	189c      	adds	r4, r3, r2
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	3350      	adds	r3, #80	; 0x50
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fc f9bc 	bl	80001d0 <strlen>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	4629      	mov	r1, r5
 8003e5e:	4620      	mov	r0, r4
 8003e60:	f00f f836 	bl	8012ed0 <memcpy>
  Offset+=strlen(pURI->URI_Message);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3350      	adds	r3, #80	; 0x50
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7fc f9b1 	bl	80001d0 <strlen>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4413      	add	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]

  /* Information header */
  if (pURI->Information[0] != '\0')
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d079      	beq.n	8003f74 <NDEF_WriteURI+0x37c>
  {
    if (infoSize > 255)
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	2bff      	cmp	r3, #255	; 0xff
 8003e84:	d92b      	bls.n	8003ede <NDEF_WriteURI+0x2e6>
    {
      NDEF_Buffer[Offset++] = 0x41;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	1c5a      	adds	r2, r3, #1
 8003e8a:	60fa      	str	r2, [r7, #12]
 8003e8c:	4a4f      	ldr	r2, [pc, #316]	; (8003fcc <NDEF_WriteURI+0x3d4>)
 8003e8e:	2141      	movs	r1, #65	; 0x41
 8003e90:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = TEXT_TYPE_STRING_LENGTH;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	60fa      	str	r2, [r7, #12]
 8003e98:	4a4c      	ldr	r2, [pc, #304]	; (8003fcc <NDEF_WriteURI+0x3d4>)
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (infoSize & 0xFF000000)>>24;
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	0e19      	lsrs	r1, r3, #24
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	60fa      	str	r2, [r7, #12]
 8003ea8:	b2c9      	uxtb	r1, r1
 8003eaa:	4a48      	ldr	r2, [pc, #288]	; (8003fcc <NDEF_WriteURI+0x3d4>)
 8003eac:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (infoSize & 0x00FF0000)>>16;
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	0c19      	lsrs	r1, r3, #16
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	60fa      	str	r2, [r7, #12]
 8003eb8:	b2c9      	uxtb	r1, r1
 8003eba:	4a44      	ldr	r2, [pc, #272]	; (8003fcc <NDEF_WriteURI+0x3d4>)
 8003ebc:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (infoSize & 0x0000FF00)>>8;
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	0a19      	lsrs	r1, r3, #8
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	60fa      	str	r2, [r7, #12]
 8003ec8:	b2c9      	uxtb	r1, r1
 8003eca:	4a40      	ldr	r2, [pc, #256]	; (8003fcc <NDEF_WriteURI+0x3d4>)
 8003ecc:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (infoSize & 0x000000FF);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	1c5a      	adds	r2, r3, #1
 8003ed2:	60fa      	str	r2, [r7, #12]
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	b2d1      	uxtb	r1, r2
 8003ed8:	4a3c      	ldr	r2, [pc, #240]	; (8003fcc <NDEF_WriteURI+0x3d4>)
 8003eda:	54d1      	strb	r1, [r2, r3]
 8003edc:	e012      	b.n	8003f04 <NDEF_WriteURI+0x30c>
    }
    else
    {
      NDEF_Buffer[Offset++] = 0x51;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	1c5a      	adds	r2, r3, #1
 8003ee2:	60fa      	str	r2, [r7, #12]
 8003ee4:	4a39      	ldr	r2, [pc, #228]	; (8003fcc <NDEF_WriteURI+0x3d4>)
 8003ee6:	2151      	movs	r1, #81	; 0x51
 8003ee8:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = TEXT_TYPE_STRING_LENGTH;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	1c5a      	adds	r2, r3, #1
 8003eee:	60fa      	str	r2, [r7, #12]
 8003ef0:	4a36      	ldr	r2, [pc, #216]	; (8003fcc <NDEF_WriteURI+0x3d4>)
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (uint8_t)infoSize;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	60fa      	str	r2, [r7, #12]
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	b2d1      	uxtb	r1, r2
 8003f00:	4a32      	ldr	r2, [pc, #200]	; (8003fcc <NDEF_WriteURI+0x3d4>)
 8003f02:	54d1      	strb	r1, [r2, r3]
    }
    
    memcpy(&NDEF_Buffer[Offset], TEXT_TYPE_STRING, TEXT_TYPE_STRING_LENGTH);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4a31      	ldr	r2, [pc, #196]	; (8003fcc <NDEF_WriteURI+0x3d4>)
 8003f08:	4413      	add	r3, r2
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	4931      	ldr	r1, [pc, #196]	; (8003fd4 <NDEF_WriteURI+0x3dc>)
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f00e ffde 	bl	8012ed0 <memcpy>
    Offset+=TEXT_TYPE_STRING_LENGTH;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	3301      	adds	r3, #1
 8003f18:	60fb      	str	r3, [r7, #12]
    NDEF_Buffer[Offset++] = ISO_ENGLISH_CODE_STRING_LENGTH; /* UTF-8 with x byte language code */
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	60fa      	str	r2, [r7, #12]
 8003f20:	4a2a      	ldr	r2, [pc, #168]	; (8003fcc <NDEF_WriteURI+0x3d4>)
 8003f22:	2102      	movs	r1, #2
 8003f24:	54d1      	strb	r1, [r2, r3]
    memcpy(&NDEF_Buffer[Offset], ISO_ENGLISH_CODE_STRING, ISO_ENGLISH_CODE_STRING_LENGTH);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	4a28      	ldr	r2, [pc, #160]	; (8003fcc <NDEF_WriteURI+0x3d4>)
 8003f2a:	4413      	add	r3, r2
 8003f2c:	2202      	movs	r2, #2
 8003f2e:	492a      	ldr	r1, [pc, #168]	; (8003fd8 <NDEF_WriteURI+0x3e0>)
 8003f30:	4618      	mov	r0, r3
 8003f32:	f00e ffcd 	bl	8012ed0 <memcpy>
    Offset+=ISO_ENGLISH_CODE_STRING_LENGTH;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	3302      	adds	r3, #2
 8003f3a:	60fb      	str	r3, [r7, #12]
    
    /* Information payload */
    memcpy( &NDEF_Buffer[Offset], pURI->Information,strlen(pURI->Information));
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4a23      	ldr	r2, [pc, #140]	; (8003fcc <NDEF_WriteURI+0x3d4>)
 8003f40:	189c      	adds	r4, r3, r2
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f503 758c 	add.w	r5, r3, #280	; 0x118
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fc f93e 	bl	80001d0 <strlen>
 8003f54:	4603      	mov	r3, r0
 8003f56:	461a      	mov	r2, r3
 8003f58:	4629      	mov	r1, r5
 8003f5a:	4620      	mov	r0, r4
 8003f5c:	f00e ffb8 	bl	8012ed0 <memcpy>
    Offset += strlen(pURI->Information);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fc f932 	bl	80001d0 <strlen>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	4413      	add	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write NDEF */
  status = NFC_TT4_WriteData ( 0x00 , Offset , NDEF_Buffer);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	4a14      	ldr	r2, [pc, #80]	; (8003fcc <NDEF_WriteURI+0x3d4>)
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	2000      	movs	r0, #0
 8003f7e:	f7fe f8a9 	bl	80020d4 <NFC_TT4_WriteData>
 8003f82:	4603      	mov	r3, r0
 8003f84:	83fb      	strh	r3, [r7, #30]
  
  /* Write NDEF size to complete*/
  if( status == NFC_TT4_ACTION_COMPLETED)
 8003f86:	8bfb      	ldrh	r3, [r7, #30]
 8003f88:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8003f8c:	d112      	bne.n	8003fb4 <NDEF_WriteURI+0x3bc>
  {
    Offset -= 2; /* Must not count the 2 byte that represent the NDEF size */
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	3b02      	subs	r3, #2
 8003f92:	60fb      	str	r3, [r7, #12]
    NDEF_Buffer[0] = (Offset & 0xFF00)>>8;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	0a1b      	lsrs	r3, r3, #8
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	4b0c      	ldr	r3, [pc, #48]	; (8003fcc <NDEF_WriteURI+0x3d4>)
 8003f9c:	701a      	strb	r2, [r3, #0]
    NDEF_Buffer[1] = (Offset & 0x00FF);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	4b0a      	ldr	r3, [pc, #40]	; (8003fcc <NDEF_WriteURI+0x3d4>)
 8003fa4:	705a      	strb	r2, [r3, #1]
    
    status = NFC_TT4_WriteData ( 0x00 , 2 , NDEF_Buffer);
 8003fa6:	4a09      	ldr	r2, [pc, #36]	; (8003fcc <NDEF_WriteURI+0x3d4>)
 8003fa8:	2102      	movs	r1, #2
 8003faa:	2000      	movs	r0, #0
 8003fac:	f7fe f892 	bl	80020d4 <NFC_TT4_WriteData>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	83fb      	strh	r3, [r7, #30]
  }
  
  if( status == NFC_TT4_ACTION_COMPLETED)
 8003fb4:	8bfb      	ldrh	r3, [r7, #30]
 8003fb6:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8003fba:	d101      	bne.n	8003fc0 <NDEF_WriteURI+0x3c8>
    return NDEF_SUCCESS;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	e000      	b.n	8003fc2 <NDEF_WriteURI+0x3ca>
  else
    return NDEF_ERROR;
 8003fc0:	2301      	movs	r3, #1
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3720      	adds	r7, #32
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	200022c8 	.word	0x200022c8
 8003fd0:	08016014 	.word	0x08016014
 8003fd4:	08016018 	.word	0x08016018
 8003fd8:	0801601c 	.word	0x0801601c

08003fdc <getUriType>:

char getUriType(char *protocol)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  if(!memcmp( protocol, URI_ID_0x01_STRING, strlen(URI_ID_0x01_STRING))) return URI_ID_0x01;
 8003fe4:	220b      	movs	r2, #11
 8003fe6:	49b1      	ldr	r1, [pc, #708]	; (80042ac <getUriType+0x2d0>)
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f00e ff63 	bl	8012eb4 <memcmp>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <getUriType+0x1c>
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e154      	b.n	80042a2 <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x02_STRING, strlen(URI_ID_0x02_STRING))) return URI_ID_0x02;
 8003ff8:	220c      	movs	r2, #12
 8003ffa:	49ad      	ldr	r1, [pc, #692]	; (80042b0 <getUriType+0x2d4>)
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f00e ff59 	bl	8012eb4 <memcmp>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <getUriType+0x30>
 8004008:	2302      	movs	r3, #2
 800400a:	e14a      	b.n	80042a2 <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x03_STRING, strlen(URI_ID_0x03_STRING))) return URI_ID_0x03;
 800400c:	2207      	movs	r2, #7
 800400e:	49a9      	ldr	r1, [pc, #676]	; (80042b4 <getUriType+0x2d8>)
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f00e ff4f 	bl	8012eb4 <memcmp>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <getUriType+0x44>
 800401c:	2303      	movs	r3, #3
 800401e:	e140      	b.n	80042a2 <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x04_STRING, strlen(URI_ID_0x04_STRING))) return URI_ID_0x04;
 8004020:	2208      	movs	r2, #8
 8004022:	49a5      	ldr	r1, [pc, #660]	; (80042b8 <getUriType+0x2dc>)
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f00e ff45 	bl	8012eb4 <memcmp>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <getUriType+0x58>
 8004030:	2304      	movs	r3, #4
 8004032:	e136      	b.n	80042a2 <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x05_STRING, strlen(URI_ID_0x05_STRING))) return URI_ID_0x05;
 8004034:	2204      	movs	r2, #4
 8004036:	49a1      	ldr	r1, [pc, #644]	; (80042bc <getUriType+0x2e0>)
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f00e ff3b 	bl	8012eb4 <memcmp>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <getUriType+0x6c>
 8004044:	2305      	movs	r3, #5
 8004046:	e12c      	b.n	80042a2 <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x06_STRING, strlen(URI_ID_0x06_STRING)))  return URI_ID_0x06;
 8004048:	2207      	movs	r2, #7
 800404a:	499d      	ldr	r1, [pc, #628]	; (80042c0 <getUriType+0x2e4>)
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f00e ff31 	bl	8012eb4 <memcmp>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <getUriType+0x80>
 8004058:	2306      	movs	r3, #6
 800405a:	e122      	b.n	80042a2 <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x07_STRING, strlen(URI_ID_0x07_STRING)))  return URI_ID_0x07;
 800405c:	221a      	movs	r2, #26
 800405e:	4999      	ldr	r1, [pc, #612]	; (80042c4 <getUriType+0x2e8>)
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f00e ff27 	bl	8012eb4 <memcmp>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <getUriType+0x94>
 800406c:	2307      	movs	r3, #7
 800406e:	e118      	b.n	80042a2 <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x08_STRING, strlen(URI_ID_0x08_STRING)))  return URI_ID_0x08;
 8004070:	220a      	movs	r2, #10
 8004072:	4995      	ldr	r1, [pc, #596]	; (80042c8 <getUriType+0x2ec>)
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f00e ff1d 	bl	8012eb4 <memcmp>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <getUriType+0xa8>
 8004080:	2308      	movs	r3, #8
 8004082:	e10e      	b.n	80042a2 <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x09_STRING, strlen(URI_ID_0x09_STRING)))  return URI_ID_0x09;
 8004084:	2207      	movs	r2, #7
 8004086:	4991      	ldr	r1, [pc, #580]	; (80042cc <getUriType+0x2f0>)
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f00e ff13 	bl	8012eb4 <memcmp>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <getUriType+0xbc>
 8004094:	2309      	movs	r3, #9
 8004096:	e104      	b.n	80042a2 <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x0A_STRING, strlen(URI_ID_0x0A_STRING)))  return URI_ID_0x0A;  
 8004098:	2207      	movs	r2, #7
 800409a:	498d      	ldr	r1, [pc, #564]	; (80042d0 <getUriType+0x2f4>)
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f00e ff09 	bl	8012eb4 <memcmp>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <getUriType+0xd0>
 80040a8:	230a      	movs	r3, #10
 80040aa:	e0fa      	b.n	80042a2 <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x0B_STRING, strlen(URI_ID_0x0B_STRING)))  return URI_ID_0x0B;
 80040ac:	2206      	movs	r2, #6
 80040ae:	4989      	ldr	r1, [pc, #548]	; (80042d4 <getUriType+0x2f8>)
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f00e feff 	bl	8012eb4 <memcmp>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <getUriType+0xe4>
 80040bc:	230b      	movs	r3, #11
 80040be:	e0f0      	b.n	80042a2 <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x0C_STRING, strlen(URI_ID_0x0C_STRING)))  return URI_ID_0x0C;
 80040c0:	2206      	movs	r2, #6
 80040c2:	4985      	ldr	r1, [pc, #532]	; (80042d8 <getUriType+0x2fc>)
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f00e fef5 	bl	8012eb4 <memcmp>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <getUriType+0xf8>
 80040d0:	230c      	movs	r3, #12
 80040d2:	e0e6      	b.n	80042a2 <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x0D_STRING, strlen(URI_ID_0x0D_STRING)))  return URI_ID_0x0D;
 80040d4:	2206      	movs	r2, #6
 80040d6:	4981      	ldr	r1, [pc, #516]	; (80042dc <getUriType+0x300>)
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f00e feeb 	bl	8012eb4 <memcmp>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <getUriType+0x10c>
 80040e4:	230d      	movs	r3, #13
 80040e6:	e0dc      	b.n	80042a2 <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x0E_STRING, strlen(URI_ID_0x0E_STRING)))  return URI_ID_0x0E;
 80040e8:	2206      	movs	r2, #6
 80040ea:	497d      	ldr	r1, [pc, #500]	; (80042e0 <getUriType+0x304>)
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f00e fee1 	bl	8012eb4 <memcmp>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <getUriType+0x120>
 80040f8:	230e      	movs	r3, #14
 80040fa:	e0d2      	b.n	80042a2 <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x0F_STRING, strlen(URI_ID_0x0F_STRING)))  return URI_ID_0x0F;
 80040fc:	2205      	movs	r2, #5
 80040fe:	4979      	ldr	r1, [pc, #484]	; (80042e4 <getUriType+0x308>)
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f00e fed7 	bl	8012eb4 <memcmp>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <getUriType+0x134>
 800410c:	230f      	movs	r3, #15
 800410e:	e0c8      	b.n	80042a2 <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x10_STRING, strlen(URI_ID_0x10_STRING)))  return URI_ID_0x10;
 8004110:	2209      	movs	r2, #9
 8004112:	4975      	ldr	r1, [pc, #468]	; (80042e8 <getUriType+0x30c>)
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f00e fecd 	bl	8012eb4 <memcmp>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <getUriType+0x148>
 8004120:	2310      	movs	r3, #16
 8004122:	e0be      	b.n	80042a2 <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x11_STRING, strlen(URI_ID_0x11_STRING)))  return URI_ID_0x11;
 8004124:	2205      	movs	r2, #5
 8004126:	4971      	ldr	r1, [pc, #452]	; (80042ec <getUriType+0x310>)
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f00e fec3 	bl	8012eb4 <memcmp>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <getUriType+0x15c>
 8004134:	2311      	movs	r3, #17
 8004136:	e0b4      	b.n	80042a2 <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x12_STRING, strlen(URI_ID_0x12_STRING)))  return URI_ID_0x12;
 8004138:	2207      	movs	r2, #7
 800413a:	496d      	ldr	r1, [pc, #436]	; (80042f0 <getUriType+0x314>)
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f00e feb9 	bl	8012eb4 <memcmp>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <getUriType+0x170>
 8004148:	2312      	movs	r3, #18
 800414a:	e0aa      	b.n	80042a2 <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x13_STRING, strlen(URI_ID_0x13_STRING)))  return URI_ID_0x13;
 800414c:	2204      	movs	r2, #4
 800414e:	4969      	ldr	r1, [pc, #420]	; (80042f4 <getUriType+0x318>)
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f00e feaf 	bl	8012eb4 <memcmp>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <getUriType+0x184>
 800415c:	2313      	movs	r3, #19
 800415e:	e0a0      	b.n	80042a2 <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x14_STRING, strlen(URI_ID_0x14_STRING)))  return URI_ID_0x14;
 8004160:	2204      	movs	r2, #4
 8004162:	4965      	ldr	r1, [pc, #404]	; (80042f8 <getUriType+0x31c>)
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f00e fea5 	bl	8012eb4 <memcmp>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <getUriType+0x198>
 8004170:	2314      	movs	r3, #20
 8004172:	e096      	b.n	80042a2 <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x15_STRING, strlen(URI_ID_0x15_STRING)))  return URI_ID_0x15;
 8004174:	2204      	movs	r2, #4
 8004176:	4961      	ldr	r1, [pc, #388]	; (80042fc <getUriType+0x320>)
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f00e fe9b 	bl	8012eb4 <memcmp>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <getUriType+0x1ac>
 8004184:	2315      	movs	r3, #21
 8004186:	e08c      	b.n	80042a2 <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x16_STRING, strlen(URI_ID_0x16_STRING)))  return URI_ID_0x16;
 8004188:	2205      	movs	r2, #5
 800418a:	495d      	ldr	r1, [pc, #372]	; (8004300 <getUriType+0x324>)
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f00e fe91 	bl	8012eb4 <memcmp>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <getUriType+0x1c0>
 8004198:	2316      	movs	r3, #22
 800419a:	e082      	b.n	80042a2 <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x17_STRING, strlen(URI_ID_0x17_STRING)))  return URI_ID_0x17;
 800419c:	2205      	movs	r2, #5
 800419e:	4959      	ldr	r1, [pc, #356]	; (8004304 <getUriType+0x328>)
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f00e fe87 	bl	8012eb4 <memcmp>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <getUriType+0x1d4>
 80041ac:	2317      	movs	r3, #23
 80041ae:	e078      	b.n	80042a2 <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x18_STRING, strlen(URI_ID_0x18_STRING)))  return URI_ID_0x18;
 80041b0:	2208      	movs	r2, #8
 80041b2:	4955      	ldr	r1, [pc, #340]	; (8004308 <getUriType+0x32c>)
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f00e fe7d 	bl	8012eb4 <memcmp>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <getUriType+0x1e8>
 80041c0:	2318      	movs	r3, #24
 80041c2:	e06e      	b.n	80042a2 <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x19_STRING, strlen(URI_ID_0x19_STRING)))  return URI_ID_0x19;
 80041c4:	220a      	movs	r2, #10
 80041c6:	4951      	ldr	r1, [pc, #324]	; (800430c <getUriType+0x330>)
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f00e fe73 	bl	8012eb4 <memcmp>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <getUriType+0x1fc>
 80041d4:	2319      	movs	r3, #25
 80041d6:	e064      	b.n	80042a2 <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x1A_STRING, strlen(URI_ID_0x1A_STRING)))  return URI_ID_0x1A;
 80041d8:	2209      	movs	r2, #9
 80041da:	494d      	ldr	r1, [pc, #308]	; (8004310 <getUriType+0x334>)
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f00e fe69 	bl	8012eb4 <memcmp>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <getUriType+0x210>
 80041e8:	231a      	movs	r3, #26
 80041ea:	e05a      	b.n	80042a2 <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x1B_STRING, strlen(URI_ID_0x1B_STRING)))  return URI_ID_0x1B;
 80041ec:	220a      	movs	r2, #10
 80041ee:	4949      	ldr	r1, [pc, #292]	; (8004314 <getUriType+0x338>)
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f00e fe5f 	bl	8012eb4 <memcmp>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <getUriType+0x224>
 80041fc:	231b      	movs	r3, #27
 80041fe:	e050      	b.n	80042a2 <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x1C_STRING, strlen(URI_ID_0x1C_STRING)))  return URI_ID_0x1C;
 8004200:	220b      	movs	r2, #11
 8004202:	4945      	ldr	r1, [pc, #276]	; (8004318 <getUriType+0x33c>)
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f00e fe55 	bl	8012eb4 <memcmp>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <getUriType+0x238>
 8004210:	231c      	movs	r3, #28
 8004212:	e046      	b.n	80042a2 <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x1D_STRING, strlen(URI_ID_0x1D_STRING)))  return URI_ID_0x1D;
 8004214:	2207      	movs	r2, #7
 8004216:	4941      	ldr	r1, [pc, #260]	; (800431c <getUriType+0x340>)
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f00e fe4b 	bl	8012eb4 <memcmp>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d101      	bne.n	8004228 <getUriType+0x24c>
 8004224:	231d      	movs	r3, #29
 8004226:	e03c      	b.n	80042a2 <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x1E_STRING, strlen(URI_ID_0x1E_STRING)))  return URI_ID_0x1E;
 8004228:	220b      	movs	r2, #11
 800422a:	493d      	ldr	r1, [pc, #244]	; (8004320 <getUriType+0x344>)
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f00e fe41 	bl	8012eb4 <memcmp>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <getUriType+0x260>
 8004238:	231e      	movs	r3, #30
 800423a:	e032      	b.n	80042a2 <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x1F_STRING, strlen(URI_ID_0x1F_STRING)))  return URI_ID_0x1F;
 800423c:	220b      	movs	r2, #11
 800423e:	4939      	ldr	r1, [pc, #228]	; (8004324 <getUriType+0x348>)
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f00e fe37 	bl	8012eb4 <memcmp>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <getUriType+0x274>
 800424c:	231f      	movs	r3, #31
 800424e:	e028      	b.n	80042a2 <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x20_STRING, strlen(URI_ID_0x20_STRING)))  return URI_ID_0x20;
 8004250:	220c      	movs	r2, #12
 8004252:	4935      	ldr	r1, [pc, #212]	; (8004328 <getUriType+0x34c>)
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f00e fe2d 	bl	8012eb4 <memcmp>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <getUriType+0x288>
 8004260:	2320      	movs	r3, #32
 8004262:	e01e      	b.n	80042a2 <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x21_STRING, strlen(URI_ID_0x21_STRING)))  return URI_ID_0x21;
 8004264:	220c      	movs	r2, #12
 8004266:	4931      	ldr	r1, [pc, #196]	; (800432c <getUriType+0x350>)
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f00e fe23 	bl	8012eb4 <memcmp>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <getUriType+0x29c>
 8004274:	2321      	movs	r3, #33	; 0x21
 8004276:	e014      	b.n	80042a2 <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x22_STRING, strlen(URI_ID_0x22_STRING)))  return URI_ID_0x22;
 8004278:	2208      	movs	r2, #8
 800427a:	492d      	ldr	r1, [pc, #180]	; (8004330 <getUriType+0x354>)
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f00e fe19 	bl	8012eb4 <memcmp>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <getUriType+0x2b0>
 8004288:	2322      	movs	r3, #34	; 0x22
 800428a:	e00a      	b.n	80042a2 <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x23_STRING, strlen(URI_ID_0x23_STRING)))  return URI_ID_0x23;  
 800428c:	2208      	movs	r2, #8
 800428e:	4929      	ldr	r1, [pc, #164]	; (8004334 <getUriType+0x358>)
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f00e fe0f 	bl	8012eb4 <memcmp>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <getUriType+0x2c4>
 800429c:	2323      	movs	r3, #35	; 0x23
 800429e:	e000      	b.n	80042a2 <getUriType+0x2c6>
  else return URI_ID_0x00; /* No abreviation for this protocol  */
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3708      	adds	r7, #8
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	08015e70 	.word	0x08015e70
 80042b0:	08015e80 	.word	0x08015e80
 80042b4:	08015e90 	.word	0x08015e90
 80042b8:	08015e9c 	.word	0x08015e9c
 80042bc:	08015ea8 	.word	0x08015ea8
 80042c0:	08015eb0 	.word	0x08015eb0
 80042c4:	08015ebc 	.word	0x08015ebc
 80042c8:	08015ed8 	.word	0x08015ed8
 80042cc:	08015ee4 	.word	0x08015ee4
 80042d0:	08015ef0 	.word	0x08015ef0
 80042d4:	08015efc 	.word	0x08015efc
 80042d8:	08015f04 	.word	0x08015f04
 80042dc:	08015f0c 	.word	0x08015f0c
 80042e0:	08015f14 	.word	0x08015f14
 80042e4:	08015f1c 	.word	0x08015f1c
 80042e8:	08015f24 	.word	0x08015f24
 80042ec:	08015f30 	.word	0x08015f30
 80042f0:	08015f38 	.word	0x08015f38
 80042f4:	08015f44 	.word	0x08015f44
 80042f8:	08015f4c 	.word	0x08015f4c
 80042fc:	08015f54 	.word	0x08015f54
 8004300:	08015f5c 	.word	0x08015f5c
 8004304:	08015f64 	.word	0x08015f64
 8004308:	08015f6c 	.word	0x08015f6c
 800430c:	08015f78 	.word	0x08015f78
 8004310:	08015f84 	.word	0x08015f84
 8004314:	08015f90 	.word	0x08015f90
 8004318:	08015f9c 	.word	0x08015f9c
 800431c:	08015fac 	.word	0x08015fac
 8004320:	08015fb8 	.word	0x08015fb8
 8004324:	08015fc8 	.word	0x08015fc8
 8004328:	08015fd8 	.word	0x08015fd8
 800432c:	08015fe8 	.word	0x08015fe8
 8004330:	08015ff8 	.word	0x08015ff8
 8004334:	08016004 	.word	0x08016004

08004338 <NDEF_FillVcardStruct>:
  * @param  SizeOfKeyWord : number of byte of the keyword we are looking for
  * @param  pString : Pointer on the data string to fill
  * @retval NONE 
  */
static void NDEF_FillVcardStruct( uint8_t* pPayload, uint32_t PayloadSize, char* pKeyWord, uint32_t SizeOfKeyWord, uint8_t* pString)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b088      	sub	sp, #32
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
 8004344:	603b      	str	r3, [r7, #0]
  uint8_t* pLastByteAdd, *pLook4Word, *pEndString ;
  
  /* First charactere force to NULL in case not matching found */
  *pString = 0;
 8004346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004348:	2200      	movs	r2, #0
 800434a:	701a      	strb	r2, [r3, #0]
  
  /* Interresting information are stored before picture if any */
  /* Moreover picture is not used in this demonstration SW */  
  pLastByteAdd = pPayload;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	61fb      	str	r3, [r7, #28]
  while( memcmp( pLastByteAdd, JPEG, JPEG_STRING_SIZE) && pLastByteAdd<(pPayload+PayloadSize) )
 8004350:	e002      	b.n	8004358 <NDEF_FillVcardStruct+0x20>
  {
    pLastByteAdd++;
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	3301      	adds	r3, #1
 8004356:	61fb      	str	r3, [r7, #28]
  while( memcmp( pLastByteAdd, JPEG, JPEG_STRING_SIZE) && pLastByteAdd<(pPayload+PayloadSize) )
 8004358:	2204      	movs	r2, #4
 800435a:	4929      	ldr	r1, [pc, #164]	; (8004400 <NDEF_FillVcardStruct+0xc8>)
 800435c:	69f8      	ldr	r0, [r7, #28]
 800435e:	f00e fda9 	bl	8012eb4 <memcmp>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d005      	beq.n	8004374 <NDEF_FillVcardStruct+0x3c>
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	4413      	add	r3, r2
 800436e:	69fa      	ldr	r2, [r7, #28]
 8004370:	429a      	cmp	r2, r3
 8004372:	d3ee      	bcc.n	8004352 <NDEF_FillVcardStruct+0x1a>
  }
  
  pLook4Word = pPayload;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	61bb      	str	r3, [r7, #24]
  while( memcmp( pLook4Word, pKeyWord, SizeOfKeyWord) && pLook4Word<pLastByteAdd )
 8004378:	e002      	b.n	8004380 <NDEF_FillVcardStruct+0x48>
  {
    pLook4Word++;
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	3301      	adds	r3, #1
 800437e:	61bb      	str	r3, [r7, #24]
  while( memcmp( pLook4Word, pKeyWord, SizeOfKeyWord) && pLook4Word<pLastByteAdd )
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	6879      	ldr	r1, [r7, #4]
 8004384:	69b8      	ldr	r0, [r7, #24]
 8004386:	f00e fd95 	bl	8012eb4 <memcmp>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d003      	beq.n	8004398 <NDEF_FillVcardStruct+0x60>
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	429a      	cmp	r2, r3
 8004396:	d3f0      	bcc.n	800437a <NDEF_FillVcardStruct+0x42>
  }
  
  /* Word found */
  if( pLook4Word != pLastByteAdd)
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	429a      	cmp	r2, r3
 800439e:	d02b      	beq.n	80043f8 <NDEF_FillVcardStruct+0xc0>
  {  
    pLook4Word += SizeOfKeyWord;
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	4413      	add	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]
    pEndString = pLook4Word;
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	617b      	str	r3, [r7, #20]
    while( memcmp( pEndString, LIMIT, LIMIT_STRING_SIZE) && pEndString<pLastByteAdd )
 80043ac:	e002      	b.n	80043b4 <NDEF_FillVcardStruct+0x7c>
    {
      pEndString++;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	3301      	adds	r3, #1
 80043b2:	617b      	str	r3, [r7, #20]
    while( memcmp( pEndString, LIMIT, LIMIT_STRING_SIZE) && pEndString<pLastByteAdd )
 80043b4:	2202      	movs	r2, #2
 80043b6:	4913      	ldr	r1, [pc, #76]	; (8004404 <NDEF_FillVcardStruct+0xcc>)
 80043b8:	6978      	ldr	r0, [r7, #20]
 80043ba:	f00e fd7b 	bl	8012eb4 <memcmp>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <NDEF_FillVcardStruct+0x94>
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d3f0      	bcc.n	80043ae <NDEF_FillVcardStruct+0x76>
    }
    if( pEndString != pLastByteAdd)
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d011      	beq.n	80043f8 <NDEF_FillVcardStruct+0xc0>
    {
      memcpy( pString, pLook4Word, pEndString-pLook4Word);
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	461a      	mov	r2, r3
 80043dc:	69b9      	ldr	r1, [r7, #24]
 80043de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043e0:	f00e fd76 	bl	8012ed0 <memcpy>
      /* add end of string charactere */
      pString += pEndString-pLook4Word;
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	461a      	mov	r2, r3
 80043ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ee:	4413      	add	r3, r2
 80043f0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pString = '\0';    
 80043f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f4:	2200      	movs	r2, #0
 80043f6:	701a      	strb	r2, [r3, #0]
    }
  }  
}
 80043f8:	bf00      	nop
 80043fa:	3720      	adds	r7, #32
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	08016020 	.word	0x08016020
 8004404:	08016028 	.word	0x08016028

08004408 <NDEF_ExtractVcard>:
  * @param  pRecordStruct : Pointer on the record structure
  * @param  pSMSStruct : pointer on the structure to fill
  * @retval NONE  
  */
static void NDEF_ExtractVcard ( sRecordInfo *pRecordStruct, sVcardInfo *pVcardStruct )
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af02      	add	r7, sp, #8
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t PayloadSize;
  uint8_t* pPayload;
  
  
  PayloadSize = ((uint32_t)(pRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pRecordStruct->PayloadLength2)<<16) |
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	789b      	ldrb	r3, [r3, #2]
 8004416:	061a      	lsls	r2, r3, #24
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	78db      	ldrb	r3, [r3, #3]
 800441c:	041b      	lsls	r3, r3, #16
 800441e:	431a      	orrs	r2, r3
    ((uint32_t)(pRecordStruct->PayloadLength1)<<8)  | pRecordStruct->PayloadLength0;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	791b      	ldrb	r3, [r3, #4]
 8004424:	021b      	lsls	r3, r3, #8
  PayloadSize = ((uint32_t)(pRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pRecordStruct->PayloadLength2)<<16) |
 8004426:	4313      	orrs	r3, r2
    ((uint32_t)(pRecordStruct->PayloadLength1)<<8)  | pRecordStruct->PayloadLength0;
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	7952      	ldrb	r2, [r2, #5]
  PayloadSize = ((uint32_t)(pRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pRecordStruct->PayloadLength2)<<16) |
 800442c:	4313      	orrs	r3, r2
 800442e:	60fb      	str	r3, [r7, #12]
  
  /* Read record header */
  pPayload = (uint8_t*)(pRecordStruct->PayloadBufferAdd);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8004436:	60bb      	str	r3, [r7, #8]
  
  NDEF_FillVcardStruct(pPayload , PayloadSize,VERSION, VERSION_STRING_SIZE, (uint8_t*)(pVcardStruct->Version));
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	2308      	movs	r3, #8
 800443e:	4a3c      	ldr	r2, [pc, #240]	; (8004530 <NDEF_ExtractVcard+0x128>)
 8004440:	68f9      	ldr	r1, [r7, #12]
 8004442:	68b8      	ldr	r0, [r7, #8]
 8004444:	f7ff ff78 	bl	8004338 <NDEF_FillVcardStruct>
  if( !memcmp(pVcardStruct->Version, VCARD_VERSION_2_1, VCARD_VERSION_2_1_SIZE))
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	2203      	movs	r2, #3
 800444c:	4939      	ldr	r1, [pc, #228]	; (8004534 <NDEF_ExtractVcard+0x12c>)
 800444e:	4618      	mov	r0, r3
 8004450:	f00e fd30 	bl	8012eb4 <memcmp>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d160      	bne.n	800451c <NDEF_ExtractVcard+0x114>
  {
    NDEF_FillVcardStruct(pPayload , PayloadSize,FIRSTNAME, FIRSTNAME_STRING_SIZE, (uint8_t*)(pVcardStruct->FirstName));
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	330a      	adds	r3, #10
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	2303      	movs	r3, #3
 8004462:	4a35      	ldr	r2, [pc, #212]	; (8004538 <NDEF_ExtractVcard+0x130>)
 8004464:	68f9      	ldr	r1, [r7, #12]
 8004466:	68b8      	ldr	r0, [r7, #8]
 8004468:	f7ff ff66 	bl	8004338 <NDEF_FillVcardStruct>
    NDEF_FillVcardStruct(pPayload , PayloadSize,TITLE, TITLE_STRING_SIZE, (uint8_t*)(pVcardStruct->Title));
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	335a      	adds	r3, #90	; 0x5a
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	2306      	movs	r3, #6
 8004474:	4a31      	ldr	r2, [pc, #196]	; (800453c <NDEF_ExtractVcard+0x134>)
 8004476:	68f9      	ldr	r1, [r7, #12]
 8004478:	68b8      	ldr	r0, [r7, #8]
 800447a:	f7ff ff5d 	bl	8004338 <NDEF_FillVcardStruct>
    NDEF_FillVcardStruct(pPayload , PayloadSize,ORG, ORG_STRING_SIZE, (uint8_t*)(pVcardStruct->Org));
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	33aa      	adds	r3, #170	; 0xaa
 8004482:	9300      	str	r3, [sp, #0]
 8004484:	2304      	movs	r3, #4
 8004486:	4a2e      	ldr	r2, [pc, #184]	; (8004540 <NDEF_ExtractVcard+0x138>)
 8004488:	68f9      	ldr	r1, [r7, #12]
 800448a:	68b8      	ldr	r0, [r7, #8]
 800448c:	f7ff ff54 	bl	8004338 <NDEF_FillVcardStruct>
    NDEF_FillVcardStruct(pPayload , PayloadSize,HOME_ADDRESS, HOME_ADDRESS_STRING_SIZE, (uint8_t*)(pVcardStruct->HomeAddress));
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	33fa      	adds	r3, #250	; 0xfa
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	2309      	movs	r3, #9
 8004498:	4a2a      	ldr	r2, [pc, #168]	; (8004544 <NDEF_ExtractVcard+0x13c>)
 800449a:	68f9      	ldr	r1, [r7, #12]
 800449c:	68b8      	ldr	r0, [r7, #8]
 800449e:	f7ff ff4b 	bl	8004338 <NDEF_FillVcardStruct>
    NDEF_FillVcardStruct(pPayload , PayloadSize,WORK_ADDRESS, WORK_ADDRESS_STRING_SIZE, (uint8_t*)(pVcardStruct->WorkAddress));    
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	f503 73a5 	add.w	r3, r3, #330	; 0x14a
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	2309      	movs	r3, #9
 80044ac:	4a26      	ldr	r2, [pc, #152]	; (8004548 <NDEF_ExtractVcard+0x140>)
 80044ae:	68f9      	ldr	r1, [r7, #12]
 80044b0:	68b8      	ldr	r0, [r7, #8]
 80044b2:	f7ff ff41 	bl	8004338 <NDEF_FillVcardStruct>
    NDEF_FillVcardStruct(pPayload , PayloadSize,HOME_TEL, HOME_TEL_STRING_SIZE, (uint8_t*)(pVcardStruct->HomeTel));
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	f503 73cd 	add.w	r3, r3, #410	; 0x19a
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	2309      	movs	r3, #9
 80044c0:	4a22      	ldr	r2, [pc, #136]	; (800454c <NDEF_ExtractVcard+0x144>)
 80044c2:	68f9      	ldr	r1, [r7, #12]
 80044c4:	68b8      	ldr	r0, [r7, #8]
 80044c6:	f7ff ff37 	bl	8004338 <NDEF_FillVcardStruct>
    NDEF_FillVcardStruct(pPayload , PayloadSize,WORK_TEL, WORK_TEL_STRING_SIZE, (uint8_t*)(pVcardStruct->WorkTel));    
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	2309      	movs	r3, #9
 80044d4:	4a1e      	ldr	r2, [pc, #120]	; (8004550 <NDEF_ExtractVcard+0x148>)
 80044d6:	68f9      	ldr	r1, [r7, #12]
 80044d8:	68b8      	ldr	r0, [r7, #8]
 80044da:	f7ff ff2d 	bl	8004338 <NDEF_FillVcardStruct>
    NDEF_FillVcardStruct(pPayload , PayloadSize,CELL_TEL, CELL_TEL_STRING_SIZE, (uint8_t*)(pVcardStruct->CellTel));
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	f503 73f5 	add.w	r3, r3, #490	; 0x1ea
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	2309      	movs	r3, #9
 80044e8:	4a1a      	ldr	r2, [pc, #104]	; (8004554 <NDEF_ExtractVcard+0x14c>)
 80044ea:	68f9      	ldr	r1, [r7, #12]
 80044ec:	68b8      	ldr	r0, [r7, #8]
 80044ee:	f7ff ff23 	bl	8004338 <NDEF_FillVcardStruct>
    NDEF_FillVcardStruct(pPayload , PayloadSize,HOME_EMAIL, HOME_EMAIL_STRING_SIZE, (uint8_t*)(pVcardStruct->HomeEmail));  
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	f203 2312 	addw	r3, r3, #530	; 0x212
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	230b      	movs	r3, #11
 80044fc:	4a16      	ldr	r2, [pc, #88]	; (8004558 <NDEF_ExtractVcard+0x150>)
 80044fe:	68f9      	ldr	r1, [r7, #12]
 8004500:	68b8      	ldr	r0, [r7, #8]
 8004502:	f7ff ff19 	bl	8004338 <NDEF_FillVcardStruct>
    NDEF_FillVcardStruct(pPayload , PayloadSize,WORK_EMAIL, WORK_EMAIL_STRING_SIZE, (uint8_t*)(pVcardStruct->WorkEmail));    
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	f203 2362 	addw	r3, r3, #610	; 0x262
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	230b      	movs	r3, #11
 8004510:	4a12      	ldr	r2, [pc, #72]	; (800455c <NDEF_ExtractVcard+0x154>)
 8004512:	68f9      	ldr	r1, [r7, #12]
 8004514:	68b8      	ldr	r0, [r7, #8]
 8004516:	f7ff ff0f 	bl	8004338 <NDEF_FillVcardStruct>
  else
  {
    /* maybe new version but not supported in this sw */
  }
  
}
 800451a:	e005      	b.n	8004528 <NDEF_ExtractVcard+0x120>
  else if( !memcmp(pVcardStruct->Version, VCARD_VERSION_3_0, VCARD_VERSION_3_0_SIZE))
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	2203      	movs	r2, #3
 8004520:	490f      	ldr	r1, [pc, #60]	; (8004560 <NDEF_ExtractVcard+0x158>)
 8004522:	4618      	mov	r0, r3
 8004524:	f00e fcc6 	bl	8012eb4 <memcmp>
}
 8004528:	bf00      	nop
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	0801602c 	.word	0x0801602c
 8004534:	08016038 	.word	0x08016038
 8004538:	0801603c 	.word	0x0801603c
 800453c:	08016040 	.word	0x08016040
 8004540:	08016048 	.word	0x08016048
 8004544:	08016050 	.word	0x08016050
 8004548:	0801605c 	.word	0x0801605c
 800454c:	08016068 	.word	0x08016068
 8004550:	08016074 	.word	0x08016074
 8004554:	08016080 	.word	0x08016080
 8004558:	0801608c 	.word	0x0801608c
 800455c:	08016098 	.word	0x08016098
 8004560:	080160a4 	.word	0x080160a4

08004564 <NDEF_ReadVcard>:
  * @param  pVcardStruct : pointer on the structure to fill 
  * @retval SUCCESS : Vcard information from NDEF have been retrieved
  * @retval ERROR : Not able to retrieve Vcard information
  */
uint16_t NDEF_ReadVcard ( sRecordInfo *pRecordStruct, sVcardInfo *pVcardStruct )
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  uint16_t status = NDEF_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	81fb      	strh	r3, [r7, #14]
  
  if( pRecordStruct->NDEF_Type == VCARD_TYPE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 8004578:	2b01      	cmp	r3, #1
 800457a:	d105      	bne.n	8004588 <NDEF_ReadVcard+0x24>
  {  
    NDEF_ExtractVcard(pRecordStruct, pVcardStruct );
 800457c:	6839      	ldr	r1, [r7, #0]
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7ff ff42 	bl	8004408 <NDEF_ExtractVcard>
    status = NDEF_SUCCESS;
 8004584:	2300      	movs	r3, #0
 8004586:	81fb      	strh	r3, [r7, #14]
  }
  
  return status;
 8004588:	89fb      	ldrh	r3, [r7, #14]
}
 800458a:	4618      	mov	r0, r3
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
	...

08004594 <NDEF_WriteVcard>:
  * @param  pVcardStruct : pointer on structure that contain the Vcard information
  * @retval SUCCESS : the function is succesful
  * @retval ERROR : Not able to store NDEF file inside tag.
  */
uint16_t NDEF_WriteVcard ( sVcardInfo *pVcardStruct )
{
 8004594:	b5b0      	push	{r4, r5, r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint16_t status = NDEF_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	82fb      	strh	r3, [r7, #22]
  uint16_t DataSize;
  uint32_t PayloadSize = 0;
 80045a0:	2300      	movs	r3, #0
 80045a2:	613b      	str	r3, [r7, #16]
  /* For demonstration purpose in order to fill the 8kB of the M24SR */
  /* We have embedded a NDEF vCard in the STM32 to be able to fill M24SR */
  
  
  /* NDEF file must be written in 2 phases, first phase NDEF size is Null */
  NDEF_Buffer[NDEF_SIZE_OFFSET] = 0x00;
 80045a4:	4bba      	ldr	r3, [pc, #744]	; (8004890 <NDEF_WriteVcard+0x2fc>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	701a      	strb	r2, [r3, #0]
  NDEF_Buffer[NDEF_SIZE_OFFSET+1] = 0x00;
 80045aa:	4bb9      	ldr	r3, [pc, #740]	; (8004890 <NDEF_WriteVcard+0x2fc>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	705a      	strb	r2, [r3, #1]
  
  /* fill record header */
  NDEF_Buffer[FIRST_RECORD_OFFSET] = 0xC2;   /* Record Flag */
 80045b0:	4bb7      	ldr	r3, [pc, #732]	; (8004890 <NDEF_WriteVcard+0x2fc>)
 80045b2:	22c2      	movs	r2, #194	; 0xc2
 80045b4:	709a      	strb	r2, [r3, #2]
  NDEF_Buffer[FIRST_RECORD_OFFSET+1] = VCARD_TYPE_STRING_LENGTH;
 80045b6:	4bb6      	ldr	r3, [pc, #728]	; (8004890 <NDEF_WriteVcard+0x2fc>)
 80045b8:	220a      	movs	r2, #10
 80045ba:	70da      	strb	r2, [r3, #3]
  NDEF_Buffer[FIRST_RECORD_OFFSET+2] = 0x00; /* Will be filled at the end when payload size is known */
 80045bc:	4bb4      	ldr	r3, [pc, #720]	; (8004890 <NDEF_WriteVcard+0x2fc>)
 80045be:	2200      	movs	r2, #0
 80045c0:	711a      	strb	r2, [r3, #4]
  NDEF_Buffer[FIRST_RECORD_OFFSET+3] = 0x00;
 80045c2:	4bb3      	ldr	r3, [pc, #716]	; (8004890 <NDEF_WriteVcard+0x2fc>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	715a      	strb	r2, [r3, #5]
  NDEF_Buffer[FIRST_RECORD_OFFSET+4] = 0x00;
 80045c8:	4bb1      	ldr	r3, [pc, #708]	; (8004890 <NDEF_WriteVcard+0x2fc>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	719a      	strb	r2, [r3, #6]
  NDEF_Buffer[FIRST_RECORD_OFFSET+5] = 0x00;  
 80045ce:	4bb0      	ldr	r3, [pc, #704]	; (8004890 <NDEF_WriteVcard+0x2fc>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	71da      	strb	r2, [r3, #7]
  memcpy(&NDEF_Buffer[FIRST_RECORD_OFFSET+6], VCARD_TYPE_STRING, VCARD_TYPE_STRING_LENGTH);
 80045d4:	220a      	movs	r2, #10
 80045d6:	49af      	ldr	r1, [pc, #700]	; (8004894 <NDEF_WriteVcard+0x300>)
 80045d8:	48af      	ldr	r0, [pc, #700]	; (8004898 <NDEF_WriteVcard+0x304>)
 80045da:	f00e fc79 	bl	8012ed0 <memcpy>
  
  /* Payload is positionned in the NDEF after record header */
  PayloadSize = FIRST_RECORD_OFFSET+6+VCARD_TYPE_STRING_LENGTH;
 80045de:	2312      	movs	r3, #18
 80045e0:	613b      	str	r3, [r7, #16]
  
  /* "BEGIN:VCARD\r\n" */
  memcpy(&NDEF_Buffer[PayloadSize], BEGIN, BEGIN_STRING_SIZE);
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	4aaa      	ldr	r2, [pc, #680]	; (8004890 <NDEF_WriteVcard+0x2fc>)
 80045e6:	4413      	add	r3, r2
 80045e8:	2206      	movs	r2, #6
 80045ea:	49ac      	ldr	r1, [pc, #688]	; (800489c <NDEF_WriteVcard+0x308>)
 80045ec:	4618      	mov	r0, r3
 80045ee:	f00e fc6f 	bl	8012ed0 <memcpy>
  PayloadSize += BEGIN_STRING_SIZE;
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	3306      	adds	r3, #6
 80045f6:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], VCARD,VCARD_STRING_SIZE);
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	4aa5      	ldr	r2, [pc, #660]	; (8004890 <NDEF_WriteVcard+0x2fc>)
 80045fc:	4413      	add	r3, r2
 80045fe:	2205      	movs	r2, #5
 8004600:	49a7      	ldr	r1, [pc, #668]	; (80048a0 <NDEF_WriteVcard+0x30c>)
 8004602:	4618      	mov	r0, r3
 8004604:	f00e fc64 	bl	8012ed0 <memcpy>
  PayloadSize += VCARD_STRING_SIZE;
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	3305      	adds	r3, #5
 800460c:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], LIMIT, LIMIT_STRING_SIZE);
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	4a9f      	ldr	r2, [pc, #636]	; (8004890 <NDEF_WriteVcard+0x2fc>)
 8004612:	4413      	add	r3, r2
 8004614:	2202      	movs	r2, #2
 8004616:	49a3      	ldr	r1, [pc, #652]	; (80048a4 <NDEF_WriteVcard+0x310>)
 8004618:	4618      	mov	r0, r3
 800461a:	f00e fc59 	bl	8012ed0 <memcpy>
  PayloadSize += LIMIT_STRING_SIZE;
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	3302      	adds	r3, #2
 8004622:	613b      	str	r3, [r7, #16]
  
  /* "VERSION:2.1\r\n" */
  memcpy(&NDEF_Buffer[PayloadSize], VERSION, VERSION_STRING_SIZE);
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	4a9a      	ldr	r2, [pc, #616]	; (8004890 <NDEF_WriteVcard+0x2fc>)
 8004628:	4413      	add	r3, r2
 800462a:	2208      	movs	r2, #8
 800462c:	499e      	ldr	r1, [pc, #632]	; (80048a8 <NDEF_WriteVcard+0x314>)
 800462e:	4618      	mov	r0, r3
 8004630:	f00e fc4e 	bl	8012ed0 <memcpy>
  PayloadSize += VERSION_STRING_SIZE;
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	3308      	adds	r3, #8
 8004638:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], VCARD_VERSION_2_1,VCARD_VERSION_2_1_SIZE);
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	4a94      	ldr	r2, [pc, #592]	; (8004890 <NDEF_WriteVcard+0x2fc>)
 800463e:	4413      	add	r3, r2
 8004640:	2203      	movs	r2, #3
 8004642:	499a      	ldr	r1, [pc, #616]	; (80048ac <NDEF_WriteVcard+0x318>)
 8004644:	4618      	mov	r0, r3
 8004646:	f00e fc43 	bl	8012ed0 <memcpy>
  PayloadSize += VCARD_VERSION_2_1_SIZE;
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	3303      	adds	r3, #3
 800464e:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], LIMIT, LIMIT_STRING_SIZE);
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	4a8f      	ldr	r2, [pc, #572]	; (8004890 <NDEF_WriteVcard+0x2fc>)
 8004654:	4413      	add	r3, r2
 8004656:	2202      	movs	r2, #2
 8004658:	4992      	ldr	r1, [pc, #584]	; (80048a4 <NDEF_WriteVcard+0x310>)
 800465a:	4618      	mov	r0, r3
 800465c:	f00e fc38 	bl	8012ed0 <memcpy>
  PayloadSize += LIMIT_STRING_SIZE;
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	3302      	adds	r3, #2
 8004664:	613b      	str	r3, [r7, #16]
  
  /* "FN:\r\n" */
  memcpy(&NDEF_Buffer[PayloadSize], FIRSTNAME, FIRSTNAME_STRING_SIZE);
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	4a89      	ldr	r2, [pc, #548]	; (8004890 <NDEF_WriteVcard+0x2fc>)
 800466a:	4413      	add	r3, r2
 800466c:	2203      	movs	r2, #3
 800466e:	4990      	ldr	r1, [pc, #576]	; (80048b0 <NDEF_WriteVcard+0x31c>)
 8004670:	4618      	mov	r0, r3
 8004672:	f00e fc2d 	bl	8012ed0 <memcpy>
  PayloadSize += FIRSTNAME_STRING_SIZE;
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	3303      	adds	r3, #3
 800467a:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], pVcardStruct->FirstName,strlen(pVcardStruct->FirstName));
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	4a84      	ldr	r2, [pc, #528]	; (8004890 <NDEF_WriteVcard+0x2fc>)
 8004680:	189c      	adds	r4, r3, r2
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f103 050a 	add.w	r5, r3, #10
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	330a      	adds	r3, #10
 800468c:	4618      	mov	r0, r3
 800468e:	f7fb fd9f 	bl	80001d0 <strlen>
 8004692:	4603      	mov	r3, r0
 8004694:	461a      	mov	r2, r3
 8004696:	4629      	mov	r1, r5
 8004698:	4620      	mov	r0, r4
 800469a:	f00e fc19 	bl	8012ed0 <memcpy>
  PayloadSize += strlen(pVcardStruct->FirstName);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	330a      	adds	r3, #10
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fb fd94 	bl	80001d0 <strlen>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	4413      	add	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], LIMIT, LIMIT_STRING_SIZE);
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	4a77      	ldr	r2, [pc, #476]	; (8004890 <NDEF_WriteVcard+0x2fc>)
 80046b4:	4413      	add	r3, r2
 80046b6:	2202      	movs	r2, #2
 80046b8:	497a      	ldr	r1, [pc, #488]	; (80048a4 <NDEF_WriteVcard+0x310>)
 80046ba:	4618      	mov	r0, r3
 80046bc:	f00e fc08 	bl	8012ed0 <memcpy>
  PayloadSize += LIMIT_STRING_SIZE;
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	3302      	adds	r3, #2
 80046c4:	613b      	str	r3, [r7, #16]
  
  /* "TITLE:\r\n" */
  memcpy(&NDEF_Buffer[PayloadSize], TITLE,TITLE_STRING_SIZE);
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	4a71      	ldr	r2, [pc, #452]	; (8004890 <NDEF_WriteVcard+0x2fc>)
 80046ca:	4413      	add	r3, r2
 80046cc:	2206      	movs	r2, #6
 80046ce:	4979      	ldr	r1, [pc, #484]	; (80048b4 <NDEF_WriteVcard+0x320>)
 80046d0:	4618      	mov	r0, r3
 80046d2:	f00e fbfd 	bl	8012ed0 <memcpy>
  PayloadSize += TITLE_STRING_SIZE;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	3306      	adds	r3, #6
 80046da:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], pVcardStruct->Title,strlen(pVcardStruct->Title));
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	4a6c      	ldr	r2, [pc, #432]	; (8004890 <NDEF_WriteVcard+0x2fc>)
 80046e0:	189c      	adds	r4, r3, r2
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f103 055a 	add.w	r5, r3, #90	; 0x5a
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	335a      	adds	r3, #90	; 0x5a
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7fb fd6f 	bl	80001d0 <strlen>
 80046f2:	4603      	mov	r3, r0
 80046f4:	461a      	mov	r2, r3
 80046f6:	4629      	mov	r1, r5
 80046f8:	4620      	mov	r0, r4
 80046fa:	f00e fbe9 	bl	8012ed0 <memcpy>
  PayloadSize += strlen(pVcardStruct->Title);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	335a      	adds	r3, #90	; 0x5a
 8004702:	4618      	mov	r0, r3
 8004704:	f7fb fd64 	bl	80001d0 <strlen>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	4413      	add	r3, r2
 800470e:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], LIMIT, LIMIT_STRING_SIZE);
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	4a5f      	ldr	r2, [pc, #380]	; (8004890 <NDEF_WriteVcard+0x2fc>)
 8004714:	4413      	add	r3, r2
 8004716:	2202      	movs	r2, #2
 8004718:	4962      	ldr	r1, [pc, #392]	; (80048a4 <NDEF_WriteVcard+0x310>)
 800471a:	4618      	mov	r0, r3
 800471c:	f00e fbd8 	bl	8012ed0 <memcpy>
  PayloadSize += LIMIT_STRING_SIZE;
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	3302      	adds	r3, #2
 8004724:	613b      	str	r3, [r7, #16]
  
  /* "ORG:\r\n" */
  memcpy(&NDEF_Buffer[PayloadSize], ORG,ORG_STRING_SIZE);
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	4a59      	ldr	r2, [pc, #356]	; (8004890 <NDEF_WriteVcard+0x2fc>)
 800472a:	4413      	add	r3, r2
 800472c:	2204      	movs	r2, #4
 800472e:	4962      	ldr	r1, [pc, #392]	; (80048b8 <NDEF_WriteVcard+0x324>)
 8004730:	4618      	mov	r0, r3
 8004732:	f00e fbcd 	bl	8012ed0 <memcpy>
  PayloadSize += ORG_STRING_SIZE;
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	3304      	adds	r3, #4
 800473a:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], pVcardStruct->Org,strlen(pVcardStruct->Org));
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	4a54      	ldr	r2, [pc, #336]	; (8004890 <NDEF_WriteVcard+0x2fc>)
 8004740:	189c      	adds	r4, r3, r2
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f103 05aa 	add.w	r5, r3, #170	; 0xaa
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	33aa      	adds	r3, #170	; 0xaa
 800474c:	4618      	mov	r0, r3
 800474e:	f7fb fd3f 	bl	80001d0 <strlen>
 8004752:	4603      	mov	r3, r0
 8004754:	461a      	mov	r2, r3
 8004756:	4629      	mov	r1, r5
 8004758:	4620      	mov	r0, r4
 800475a:	f00e fbb9 	bl	8012ed0 <memcpy>
  PayloadSize += strlen(pVcardStruct->Org);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	33aa      	adds	r3, #170	; 0xaa
 8004762:	4618      	mov	r0, r3
 8004764:	f7fb fd34 	bl	80001d0 <strlen>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	4413      	add	r3, r2
 800476e:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], LIMIT, LIMIT_STRING_SIZE);
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	4a47      	ldr	r2, [pc, #284]	; (8004890 <NDEF_WriteVcard+0x2fc>)
 8004774:	4413      	add	r3, r2
 8004776:	2202      	movs	r2, #2
 8004778:	494a      	ldr	r1, [pc, #296]	; (80048a4 <NDEF_WriteVcard+0x310>)
 800477a:	4618      	mov	r0, r3
 800477c:	f00e fba8 	bl	8012ed0 <memcpy>
  PayloadSize += LIMIT_STRING_SIZE;
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	3302      	adds	r3, #2
 8004784:	613b      	str	r3, [r7, #16]
  
  /* "ADR;HOME:\r\n" */
  memcpy(&NDEF_Buffer[PayloadSize], HOME_ADDRESS,HOME_ADDRESS_STRING_SIZE);
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	4a41      	ldr	r2, [pc, #260]	; (8004890 <NDEF_WriteVcard+0x2fc>)
 800478a:	4413      	add	r3, r2
 800478c:	2209      	movs	r2, #9
 800478e:	494b      	ldr	r1, [pc, #300]	; (80048bc <NDEF_WriteVcard+0x328>)
 8004790:	4618      	mov	r0, r3
 8004792:	f00e fb9d 	bl	8012ed0 <memcpy>
  PayloadSize += HOME_ADDRESS_STRING_SIZE;
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	3309      	adds	r3, #9
 800479a:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], pVcardStruct->HomeAddress,strlen(pVcardStruct->HomeAddress));
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	4a3c      	ldr	r2, [pc, #240]	; (8004890 <NDEF_WriteVcard+0x2fc>)
 80047a0:	189c      	adds	r4, r3, r2
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f103 05fa 	add.w	r5, r3, #250	; 0xfa
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	33fa      	adds	r3, #250	; 0xfa
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7fb fd0f 	bl	80001d0 <strlen>
 80047b2:	4603      	mov	r3, r0
 80047b4:	461a      	mov	r2, r3
 80047b6:	4629      	mov	r1, r5
 80047b8:	4620      	mov	r0, r4
 80047ba:	f00e fb89 	bl	8012ed0 <memcpy>
  PayloadSize += strlen(pVcardStruct->HomeAddress);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	33fa      	adds	r3, #250	; 0xfa
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7fb fd04 	bl	80001d0 <strlen>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	4413      	add	r3, r2
 80047ce:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], LIMIT, LIMIT_STRING_SIZE);
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	4a2f      	ldr	r2, [pc, #188]	; (8004890 <NDEF_WriteVcard+0x2fc>)
 80047d4:	4413      	add	r3, r2
 80047d6:	2202      	movs	r2, #2
 80047d8:	4932      	ldr	r1, [pc, #200]	; (80048a4 <NDEF_WriteVcard+0x310>)
 80047da:	4618      	mov	r0, r3
 80047dc:	f00e fb78 	bl	8012ed0 <memcpy>
  PayloadSize += LIMIT_STRING_SIZE;
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	3302      	adds	r3, #2
 80047e4:	613b      	str	r3, [r7, #16]
  
  /* "ADR;WORK:\r\n" */
  memcpy(&NDEF_Buffer[PayloadSize], WORK_ADDRESS,WORK_ADDRESS_STRING_SIZE);
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	4a29      	ldr	r2, [pc, #164]	; (8004890 <NDEF_WriteVcard+0x2fc>)
 80047ea:	4413      	add	r3, r2
 80047ec:	2209      	movs	r2, #9
 80047ee:	4934      	ldr	r1, [pc, #208]	; (80048c0 <NDEF_WriteVcard+0x32c>)
 80047f0:	4618      	mov	r0, r3
 80047f2:	f00e fb6d 	bl	8012ed0 <memcpy>
  PayloadSize += WORK_ADDRESS_STRING_SIZE;
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	3309      	adds	r3, #9
 80047fa:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], pVcardStruct->WorkAddress,strlen(pVcardStruct->WorkAddress));
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	4a24      	ldr	r2, [pc, #144]	; (8004890 <NDEF_WriteVcard+0x2fc>)
 8004800:	189c      	adds	r4, r3, r2
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f503 75a5 	add.w	r5, r3, #330	; 0x14a
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f503 73a5 	add.w	r3, r3, #330	; 0x14a
 800480e:	4618      	mov	r0, r3
 8004810:	f7fb fcde 	bl	80001d0 <strlen>
 8004814:	4603      	mov	r3, r0
 8004816:	461a      	mov	r2, r3
 8004818:	4629      	mov	r1, r5
 800481a:	4620      	mov	r0, r4
 800481c:	f00e fb58 	bl	8012ed0 <memcpy>
  PayloadSize += strlen(pVcardStruct->WorkAddress);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f503 73a5 	add.w	r3, r3, #330	; 0x14a
 8004826:	4618      	mov	r0, r3
 8004828:	f7fb fcd2 	bl	80001d0 <strlen>
 800482c:	4602      	mov	r2, r0
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	4413      	add	r3, r2
 8004832:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], LIMIT, LIMIT_STRING_SIZE);
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	4a16      	ldr	r2, [pc, #88]	; (8004890 <NDEF_WriteVcard+0x2fc>)
 8004838:	4413      	add	r3, r2
 800483a:	2202      	movs	r2, #2
 800483c:	4919      	ldr	r1, [pc, #100]	; (80048a4 <NDEF_WriteVcard+0x310>)
 800483e:	4618      	mov	r0, r3
 8004840:	f00e fb46 	bl	8012ed0 <memcpy>
  PayloadSize += LIMIT_STRING_SIZE;
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	3302      	adds	r3, #2
 8004848:	613b      	str	r3, [r7, #16]
  
  /* "TEL;HOME:\r\n" */
  memcpy(&NDEF_Buffer[PayloadSize], HOME_TEL, HOME_TEL_STRING_SIZE);
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	4a10      	ldr	r2, [pc, #64]	; (8004890 <NDEF_WriteVcard+0x2fc>)
 800484e:	4413      	add	r3, r2
 8004850:	2209      	movs	r2, #9
 8004852:	491c      	ldr	r1, [pc, #112]	; (80048c4 <NDEF_WriteVcard+0x330>)
 8004854:	4618      	mov	r0, r3
 8004856:	f00e fb3b 	bl	8012ed0 <memcpy>
  PayloadSize += HOME_TEL_STRING_SIZE;
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	3309      	adds	r3, #9
 800485e:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], pVcardStruct->HomeTel,strlen(pVcardStruct->HomeTel));
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	4a0b      	ldr	r2, [pc, #44]	; (8004890 <NDEF_WriteVcard+0x2fc>)
 8004864:	189c      	adds	r4, r3, r2
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f503 75cd 	add.w	r5, r3, #410	; 0x19a
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f503 73cd 	add.w	r3, r3, #410	; 0x19a
 8004872:	4618      	mov	r0, r3
 8004874:	f7fb fcac 	bl	80001d0 <strlen>
 8004878:	4603      	mov	r3, r0
 800487a:	461a      	mov	r2, r3
 800487c:	4629      	mov	r1, r5
 800487e:	4620      	mov	r0, r4
 8004880:	f00e fb26 	bl	8012ed0 <memcpy>
  PayloadSize += strlen(pVcardStruct->HomeTel);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f503 73cd 	add.w	r3, r3, #410	; 0x19a
 800488a:	4618      	mov	r0, r3
 800488c:	e01c      	b.n	80048c8 <NDEF_WriteVcard+0x334>
 800488e:	bf00      	nop
 8004890:	200022c8 	.word	0x200022c8
 8004894:	080160a8 	.word	0x080160a8
 8004898:	200022d0 	.word	0x200022d0
 800489c:	080160b4 	.word	0x080160b4
 80048a0:	080160bc 	.word	0x080160bc
 80048a4:	08016028 	.word	0x08016028
 80048a8:	0801602c 	.word	0x0801602c
 80048ac:	08016038 	.word	0x08016038
 80048b0:	0801603c 	.word	0x0801603c
 80048b4:	08016040 	.word	0x08016040
 80048b8:	08016048 	.word	0x08016048
 80048bc:	08016050 	.word	0x08016050
 80048c0:	0801605c 	.word	0x0801605c
 80048c4:	08016068 	.word	0x08016068
 80048c8:	f7fb fc82 	bl	80001d0 <strlen>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	4413      	add	r3, r2
 80048d2:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], LIMIT, LIMIT_STRING_SIZE);
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	4a9b      	ldr	r2, [pc, #620]	; (8004b44 <NDEF_WriteVcard+0x5b0>)
 80048d8:	4413      	add	r3, r2
 80048da:	2202      	movs	r2, #2
 80048dc:	499a      	ldr	r1, [pc, #616]	; (8004b48 <NDEF_WriteVcard+0x5b4>)
 80048de:	4618      	mov	r0, r3
 80048e0:	f00e faf6 	bl	8012ed0 <memcpy>
  PayloadSize += LIMIT_STRING_SIZE;
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	3302      	adds	r3, #2
 80048e8:	613b      	str	r3, [r7, #16]
  
  /* "TEL;WORK:\r\n" */
  memcpy(&NDEF_Buffer[PayloadSize], WORK_TEL, WORK_TEL_STRING_SIZE);
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	4a95      	ldr	r2, [pc, #596]	; (8004b44 <NDEF_WriteVcard+0x5b0>)
 80048ee:	4413      	add	r3, r2
 80048f0:	2209      	movs	r2, #9
 80048f2:	4996      	ldr	r1, [pc, #600]	; (8004b4c <NDEF_WriteVcard+0x5b8>)
 80048f4:	4618      	mov	r0, r3
 80048f6:	f00e faeb 	bl	8012ed0 <memcpy>
  PayloadSize += WORK_TEL_STRING_SIZE;
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	3309      	adds	r3, #9
 80048fe:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], pVcardStruct->WorkTel,strlen(pVcardStruct->WorkTel));
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	4a90      	ldr	r2, [pc, #576]	; (8004b44 <NDEF_WriteVcard+0x5b0>)
 8004904:	189c      	adds	r4, r3, r2
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8004912:	4618      	mov	r0, r3
 8004914:	f7fb fc5c 	bl	80001d0 <strlen>
 8004918:	4603      	mov	r3, r0
 800491a:	461a      	mov	r2, r3
 800491c:	4629      	mov	r1, r5
 800491e:	4620      	mov	r0, r4
 8004920:	f00e fad6 	bl	8012ed0 <memcpy>
  PayloadSize += strlen(pVcardStruct->WorkTel);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 800492a:	4618      	mov	r0, r3
 800492c:	f7fb fc50 	bl	80001d0 <strlen>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	4413      	add	r3, r2
 8004936:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], LIMIT, LIMIT_STRING_SIZE);
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	4a82      	ldr	r2, [pc, #520]	; (8004b44 <NDEF_WriteVcard+0x5b0>)
 800493c:	4413      	add	r3, r2
 800493e:	2202      	movs	r2, #2
 8004940:	4981      	ldr	r1, [pc, #516]	; (8004b48 <NDEF_WriteVcard+0x5b4>)
 8004942:	4618      	mov	r0, r3
 8004944:	f00e fac4 	bl	8012ed0 <memcpy>
  PayloadSize += LIMIT_STRING_SIZE;
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	3302      	adds	r3, #2
 800494c:	613b      	str	r3, [r7, #16]
  
  /* "TEL;CELL:\r\n" */
  memcpy(&NDEF_Buffer[PayloadSize], CELL_TEL, CELL_TEL_STRING_SIZE);
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	4a7c      	ldr	r2, [pc, #496]	; (8004b44 <NDEF_WriteVcard+0x5b0>)
 8004952:	4413      	add	r3, r2
 8004954:	2209      	movs	r2, #9
 8004956:	497e      	ldr	r1, [pc, #504]	; (8004b50 <NDEF_WriteVcard+0x5bc>)
 8004958:	4618      	mov	r0, r3
 800495a:	f00e fab9 	bl	8012ed0 <memcpy>
  PayloadSize += CELL_TEL_STRING_SIZE;
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	3309      	adds	r3, #9
 8004962:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], pVcardStruct->CellTel,strlen(pVcardStruct->CellTel));
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	4a77      	ldr	r2, [pc, #476]	; (8004b44 <NDEF_WriteVcard+0x5b0>)
 8004968:	189c      	adds	r4, r3, r2
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f503 75f5 	add.w	r5, r3, #490	; 0x1ea
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f503 73f5 	add.w	r3, r3, #490	; 0x1ea
 8004976:	4618      	mov	r0, r3
 8004978:	f7fb fc2a 	bl	80001d0 <strlen>
 800497c:	4603      	mov	r3, r0
 800497e:	461a      	mov	r2, r3
 8004980:	4629      	mov	r1, r5
 8004982:	4620      	mov	r0, r4
 8004984:	f00e faa4 	bl	8012ed0 <memcpy>
  PayloadSize += strlen(pVcardStruct->CellTel);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f503 73f5 	add.w	r3, r3, #490	; 0x1ea
 800498e:	4618      	mov	r0, r3
 8004990:	f7fb fc1e 	bl	80001d0 <strlen>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	4413      	add	r3, r2
 800499a:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], LIMIT, LIMIT_STRING_SIZE);
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	4a69      	ldr	r2, [pc, #420]	; (8004b44 <NDEF_WriteVcard+0x5b0>)
 80049a0:	4413      	add	r3, r2
 80049a2:	2202      	movs	r2, #2
 80049a4:	4968      	ldr	r1, [pc, #416]	; (8004b48 <NDEF_WriteVcard+0x5b4>)
 80049a6:	4618      	mov	r0, r3
 80049a8:	f00e fa92 	bl	8012ed0 <memcpy>
  PayloadSize += LIMIT_STRING_SIZE;
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	3302      	adds	r3, #2
 80049b0:	613b      	str	r3, [r7, #16]
  
  /* "EMAIL;HOME:\r\n" */
  memcpy(&NDEF_Buffer[PayloadSize], HOME_EMAIL, HOME_EMAIL_STRING_SIZE);
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	4a63      	ldr	r2, [pc, #396]	; (8004b44 <NDEF_WriteVcard+0x5b0>)
 80049b6:	4413      	add	r3, r2
 80049b8:	220b      	movs	r2, #11
 80049ba:	4966      	ldr	r1, [pc, #408]	; (8004b54 <NDEF_WriteVcard+0x5c0>)
 80049bc:	4618      	mov	r0, r3
 80049be:	f00e fa87 	bl	8012ed0 <memcpy>
  PayloadSize += HOME_EMAIL_STRING_SIZE;
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	330b      	adds	r3, #11
 80049c6:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], pVcardStruct->HomeEmail,strlen(pVcardStruct->HomeEmail));
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	4a5e      	ldr	r2, [pc, #376]	; (8004b44 <NDEF_WriteVcard+0x5b0>)
 80049cc:	189c      	adds	r4, r3, r2
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f203 2512 	addw	r5, r3, #530	; 0x212
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f203 2312 	addw	r3, r3, #530	; 0x212
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fb fbf8 	bl	80001d0 <strlen>
 80049e0:	4603      	mov	r3, r0
 80049e2:	461a      	mov	r2, r3
 80049e4:	4629      	mov	r1, r5
 80049e6:	4620      	mov	r0, r4
 80049e8:	f00e fa72 	bl	8012ed0 <memcpy>
  PayloadSize += strlen(pVcardStruct->HomeEmail);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f203 2312 	addw	r3, r3, #530	; 0x212
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fb fbec 	bl	80001d0 <strlen>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	4413      	add	r3, r2
 80049fe:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], LIMIT, LIMIT_STRING_SIZE);
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	4a50      	ldr	r2, [pc, #320]	; (8004b44 <NDEF_WriteVcard+0x5b0>)
 8004a04:	4413      	add	r3, r2
 8004a06:	2202      	movs	r2, #2
 8004a08:	494f      	ldr	r1, [pc, #316]	; (8004b48 <NDEF_WriteVcard+0x5b4>)
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f00e fa60 	bl	8012ed0 <memcpy>
  PayloadSize += LIMIT_STRING_SIZE;
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	3302      	adds	r3, #2
 8004a14:	613b      	str	r3, [r7, #16]
  
  /* "EMAIL;WORK:\r\n" */
  memcpy(&NDEF_Buffer[PayloadSize], WORK_EMAIL, WORK_EMAIL_STRING_SIZE);
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	4a4a      	ldr	r2, [pc, #296]	; (8004b44 <NDEF_WriteVcard+0x5b0>)
 8004a1a:	4413      	add	r3, r2
 8004a1c:	220b      	movs	r2, #11
 8004a1e:	494e      	ldr	r1, [pc, #312]	; (8004b58 <NDEF_WriteVcard+0x5c4>)
 8004a20:	4618      	mov	r0, r3
 8004a22:	f00e fa55 	bl	8012ed0 <memcpy>
  PayloadSize += WORK_EMAIL_STRING_SIZE;
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	330b      	adds	r3, #11
 8004a2a:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], pVcardStruct->WorkEmail,strlen(pVcardStruct->WorkEmail));
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	4a45      	ldr	r2, [pc, #276]	; (8004b44 <NDEF_WriteVcard+0x5b0>)
 8004a30:	189c      	adds	r4, r3, r2
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f203 2562 	addw	r5, r3, #610	; 0x262
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f203 2362 	addw	r3, r3, #610	; 0x262
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fb fbc6 	bl	80001d0 <strlen>
 8004a44:	4603      	mov	r3, r0
 8004a46:	461a      	mov	r2, r3
 8004a48:	4629      	mov	r1, r5
 8004a4a:	4620      	mov	r0, r4
 8004a4c:	f00e fa40 	bl	8012ed0 <memcpy>
  PayloadSize += strlen(pVcardStruct->WorkEmail);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f203 2362 	addw	r3, r3, #610	; 0x262
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fb fbba 	bl	80001d0 <strlen>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	4413      	add	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], LIMIT, LIMIT_STRING_SIZE);
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	4a37      	ldr	r2, [pc, #220]	; (8004b44 <NDEF_WriteVcard+0x5b0>)
 8004a68:	4413      	add	r3, r2
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	4936      	ldr	r1, [pc, #216]	; (8004b48 <NDEF_WriteVcard+0x5b4>)
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f00e fa2e 	bl	8012ed0 <memcpy>
  PayloadSize += LIMIT_STRING_SIZE;
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	3302      	adds	r3, #2
 8004a78:	613b      	str	r3, [r7, #16]
  
  /* "END:VCARD\r\n" */
  memcpy(&NDEF_Buffer[PayloadSize], END,END_STRING_SIZE);
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	4a31      	ldr	r2, [pc, #196]	; (8004b44 <NDEF_WriteVcard+0x5b0>)
 8004a7e:	4413      	add	r3, r2
 8004a80:	2204      	movs	r2, #4
 8004a82:	4936      	ldr	r1, [pc, #216]	; (8004b5c <NDEF_WriteVcard+0x5c8>)
 8004a84:	4618      	mov	r0, r3
 8004a86:	f00e fa23 	bl	8012ed0 <memcpy>
  PayloadSize += END_STRING_SIZE;
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], VCARD,VCARD_STRING_SIZE);
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	4a2c      	ldr	r2, [pc, #176]	; (8004b44 <NDEF_WriteVcard+0x5b0>)
 8004a94:	4413      	add	r3, r2
 8004a96:	2205      	movs	r2, #5
 8004a98:	4931      	ldr	r1, [pc, #196]	; (8004b60 <NDEF_WriteVcard+0x5cc>)
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f00e fa18 	bl	8012ed0 <memcpy>
  PayloadSize += VCARD_STRING_SIZE;
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	3305      	adds	r3, #5
 8004aa4:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], LIMIT, LIMIT_STRING_SIZE);
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	4a26      	ldr	r2, [pc, #152]	; (8004b44 <NDEF_WriteVcard+0x5b0>)
 8004aaa:	4413      	add	r3, r2
 8004aac:	2202      	movs	r2, #2
 8004aae:	4926      	ldr	r1, [pc, #152]	; (8004b48 <NDEF_WriteVcard+0x5b4>)
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f00e fa0d 	bl	8012ed0 <memcpy>
  PayloadSize += LIMIT_STRING_SIZE;
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	3302      	adds	r3, #2
 8004aba:	613b      	str	r3, [r7, #16]
  
  DataSize = (uint16_t)(PayloadSize); /* Must not count the 2 byte that represent the NDEF size */
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	81fb      	strh	r3, [r7, #14]
  PayloadSize -= FIRST_RECORD_OFFSET+6+VCARD_TYPE_STRING_LENGTH;  
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	3b12      	subs	r3, #18
 8004ac4:	613b      	str	r3, [r7, #16]
  
  NDEF_Buffer[FIRST_RECORD_OFFSET+2] = (PayloadSize & 0xFF000000)>>24;
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	0e1b      	lsrs	r3, r3, #24
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	4b1d      	ldr	r3, [pc, #116]	; (8004b44 <NDEF_WriteVcard+0x5b0>)
 8004ace:	711a      	strb	r2, [r3, #4]
  NDEF_Buffer[FIRST_RECORD_OFFSET+3] = (PayloadSize & 0x00FF0000)>>16;
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	0c1b      	lsrs	r3, r3, #16
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	4b1b      	ldr	r3, [pc, #108]	; (8004b44 <NDEF_WriteVcard+0x5b0>)
 8004ad8:	715a      	strb	r2, [r3, #5]
  NDEF_Buffer[FIRST_RECORD_OFFSET+4] = (PayloadSize & 0x0000FF00)>>8;
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	0a1b      	lsrs	r3, r3, #8
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	4b18      	ldr	r3, [pc, #96]	; (8004b44 <NDEF_WriteVcard+0x5b0>)
 8004ae2:	719a      	strb	r2, [r3, #6]
  NDEF_Buffer[FIRST_RECORD_OFFSET+5] = (PayloadSize & 0x000000FF);
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	4b16      	ldr	r3, [pc, #88]	; (8004b44 <NDEF_WriteVcard+0x5b0>)
 8004aea:	71da      	strb	r2, [r3, #7]
  

  /* Write NDEF */
  status = NFC_TT4_WriteData ( 0x00 , DataSize , NDEF_Buffer);
 8004aec:	89fb      	ldrh	r3, [r7, #14]
 8004aee:	4a15      	ldr	r2, [pc, #84]	; (8004b44 <NDEF_WriteVcard+0x5b0>)
 8004af0:	4619      	mov	r1, r3
 8004af2:	2000      	movs	r0, #0
 8004af4:	f7fd faee 	bl	80020d4 <NFC_TT4_WriteData>
 8004af8:	4603      	mov	r3, r0
 8004afa:	82fb      	strh	r3, [r7, #22]
  
  /* Write NDEF size to complete*/
  if( status == NFC_TT4_ACTION_COMPLETED)
 8004afc:	8afb      	ldrh	r3, [r7, #22]
 8004afe:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8004b02:	d113      	bne.n	8004b2c <NDEF_WriteVcard+0x598>
  {
    DataSize -= 2; /* Must not count the 2 byte that represent the NDEF size */
 8004b04:	89fb      	ldrh	r3, [r7, #14]
 8004b06:	3b02      	subs	r3, #2
 8004b08:	81fb      	strh	r3, [r7, #14]
    NDEF_Buffer[0] = (DataSize & 0xFF00)>>8;
 8004b0a:	89fb      	ldrh	r3, [r7, #14]
 8004b0c:	0a1b      	lsrs	r3, r3, #8
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	4b0c      	ldr	r3, [pc, #48]	; (8004b44 <NDEF_WriteVcard+0x5b0>)
 8004b14:	701a      	strb	r2, [r3, #0]
    NDEF_Buffer[1] = (DataSize & 0x00FF);
 8004b16:	89fb      	ldrh	r3, [r7, #14]
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	4b0a      	ldr	r3, [pc, #40]	; (8004b44 <NDEF_WriteVcard+0x5b0>)
 8004b1c:	705a      	strb	r2, [r3, #1]
    
    status = NFC_TT4_WriteData ( 0x00 , 2 , NDEF_Buffer);
 8004b1e:	4a09      	ldr	r2, [pc, #36]	; (8004b44 <NDEF_WriteVcard+0x5b0>)
 8004b20:	2102      	movs	r1, #2
 8004b22:	2000      	movs	r0, #0
 8004b24:	f7fd fad6 	bl	80020d4 <NFC_TT4_WriteData>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	82fb      	strh	r3, [r7, #22]
  }
  
  
  if( status == NFC_TT4_ACTION_COMPLETED)
 8004b2c:	8afb      	ldrh	r3, [r7, #22]
 8004b2e:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8004b32:	d101      	bne.n	8004b38 <NDEF_WriteVcard+0x5a4>
    return NDEF_SUCCESS;
 8004b34:	2300      	movs	r3, #0
 8004b36:	e000      	b.n	8004b3a <NDEF_WriteVcard+0x5a6>
  else
    return NDEF_ERROR;
 8004b38:	2301      	movs	r3, #1
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3718      	adds	r7, #24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bdb0      	pop	{r4, r5, r7, pc}
 8004b42:	bf00      	nop
 8004b44:	200022c8 	.word	0x200022c8
 8004b48:	08016028 	.word	0x08016028
 8004b4c:	08016074 	.word	0x08016074
 8004b50:	08016080 	.word	0x08016080
 8004b54:	0801608c 	.word	0x0801608c
 8004b58:	08016098 	.word	0x08016098
 8004b5c:	080160c4 	.word	0x080160c4
 8004b60:	080160bc 	.word	0x080160bc

08004b64 <TT4_Init>:
  * @brief  This fonction initialize Tag Type 4
  * @param  None 
  * @retval SUCCESS : Initialization done
  */
uint16_t TT4_Init (void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
  uint16_t status = NDEF_SUCCESS;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	82fb      	strh	r3, [r7, #22]
  uint8_t CCBuffer[15];
  sCCFileInfo *pCCFile;
  
  pCCFile = &CCFileStruct;
 8004b6e:	4b29      	ldr	r3, [pc, #164]	; (8004c14 <TT4_Init+0xb0>)
 8004b70:	613b      	str	r3, [r7, #16]

  status = NFC_TT4_Initialization( CCBuffer, sizeof(CCBuffer));
 8004b72:	463b      	mov	r3, r7
 8004b74:	210f      	movs	r1, #15
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fd f932 	bl	8001de0 <NFC_TT4_Initialization>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	82fb      	strh	r3, [r7, #22]
  
  if( status == NDEF_SUCCESS)
 8004b80:	8afb      	ldrh	r3, [r7, #22]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d140      	bne.n	8004c08 <TT4_Init+0xa4>
  {
    pCCFile->NumberCCByte = (uint16_t) ((CCBuffer[0x00]<<8) | CCBuffer[0x01]);
 8004b86:	783b      	ldrb	r3, [r7, #0]
 8004b88:	021b      	lsls	r3, r3, #8
 8004b8a:	b21a      	sxth	r2, r3
 8004b8c:	787b      	ldrb	r3, [r7, #1]
 8004b8e:	b21b      	sxth	r3, r3
 8004b90:	4313      	orrs	r3, r2
 8004b92:	b21b      	sxth	r3, r3
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	801a      	strh	r2, [r3, #0]
    pCCFile->Version = CCBuffer[0x02];
 8004b9a:	78ba      	ldrb	r2, [r7, #2]
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	709a      	strb	r2, [r3, #2]
    pCCFile->MaxReadByte = (uint16_t) ((CCBuffer[0x03]<<8) | CCBuffer[0x04]);
 8004ba0:	78fb      	ldrb	r3, [r7, #3]
 8004ba2:	021b      	lsls	r3, r3, #8
 8004ba4:	b21a      	sxth	r2, r3
 8004ba6:	793b      	ldrb	r3, [r7, #4]
 8004ba8:	b21b      	sxth	r3, r3
 8004baa:	4313      	orrs	r3, r2
 8004bac:	b21b      	sxth	r3, r3
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	809a      	strh	r2, [r3, #4]
    pCCFile->MaxWriteByte = (uint16_t) ((CCBuffer[0x05]<<8) | CCBuffer[0x06]);
 8004bb4:	797b      	ldrb	r3, [r7, #5]
 8004bb6:	021b      	lsls	r3, r3, #8
 8004bb8:	b21a      	sxth	r2, r3
 8004bba:	79bb      	ldrb	r3, [r7, #6]
 8004bbc:	b21b      	sxth	r3, r3
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	b21b      	sxth	r3, r3
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	80da      	strh	r2, [r3, #6]
    pCCFile->TField = CCBuffer[0x07];
 8004bc8:	79fa      	ldrb	r2, [r7, #7]
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	721a      	strb	r2, [r3, #8]
    pCCFile->LField = CCBuffer[0x08];
 8004bce:	7a3a      	ldrb	r2, [r7, #8]
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	725a      	strb	r2, [r3, #9]
    pCCFile->FileID = (uint16_t) ((CCBuffer[0x09]<<8) | CCBuffer[0x0A]);
 8004bd4:	7a7b      	ldrb	r3, [r7, #9]
 8004bd6:	021b      	lsls	r3, r3, #8
 8004bd8:	b21a      	sxth	r2, r3
 8004bda:	7abb      	ldrb	r3, [r7, #10]
 8004bdc:	b21b      	sxth	r3, r3
 8004bde:	4313      	orrs	r3, r2
 8004be0:	b21b      	sxth	r3, r3
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	815a      	strh	r2, [r3, #10]
    pCCFile->NDEFFileMaxSize = (uint16_t) ((CCBuffer[0x0B]<<8) | CCBuffer[0x0C]);
 8004be8:	7afb      	ldrb	r3, [r7, #11]
 8004bea:	021b      	lsls	r3, r3, #8
 8004bec:	b21a      	sxth	r2, r3
 8004bee:	7b3b      	ldrb	r3, [r7, #12]
 8004bf0:	b21b      	sxth	r3, r3
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	b21b      	sxth	r3, r3
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	819a      	strh	r2, [r3, #12]
    pCCFile->ReadAccess = CCBuffer[0x0D];
 8004bfc:	7b7a      	ldrb	r2, [r7, #13]
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	739a      	strb	r2, [r3, #14]
    pCCFile->WriteAccess = CCBuffer[0x0E];  
 8004c02:	7bba      	ldrb	r2, [r7, #14]
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	73da      	strb	r2, [r3, #15]
  }
  
  return status;
 8004c08:	8afb      	ldrh	r3, [r7, #22]
}  
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	20002098 	.word	0x20002098

08004c18 <TT4_WriteNDEF>:
  * @param  pNDEF : pointer on buffer that contain the NDEF data
  * @retval SUCCESS : NDEF file data have been stored
  * @retval ERROR : Not able to store NDEF file
  */
uint16_t TT4_WriteNDEF(uint8_t *pNDEF)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint16_t status = NDEF_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	81fb      	strh	r3, [r7, #14]
  sCCFileInfo *pCCFile;
  
  pCCFile = &CCFileStruct;
 8004c24:	4b0c      	ldr	r3, [pc, #48]	; (8004c58 <TT4_WriteNDEF+0x40>)
 8004c26:	60bb      	str	r3, [r7, #8]
  
  if(NFC_TT4_OpenNDEFSession(pCCFile->FileID, NFC_TT4_ASK_FOR_SESSION) == NDEF_SUCCESS)
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	895b      	ldrh	r3, [r3, #10]
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fd f93e 	bl	8001eb0 <NFC_TT4_OpenNDEFSession>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d109      	bne.n	8004c4e <TT4_WriteNDEF+0x36>
  {
    status = NDEF_WriteNDEF( pNDEF);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7fd fdf7 	bl	800282e <NDEF_WriteNDEF>
 8004c40:	4603      	mov	r3, r0
 8004c42:	81fb      	strh	r3, [r7, #14]
    NFC_TT4_CloseNDEFSession(pCCFile->FileID);
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	895b      	ldrh	r3, [r3, #10]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7fd f993 	bl	8001f74 <NFC_TT4_CloseNDEFSession>
  }
  
  return status;
 8004c4e:	89fb      	ldrh	r3, [r7, #14]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	20002098 	.word	0x20002098

08004c5c <TT4_ReadURI>:
  * @param  pURI : pointer on URI structure to fill with read data
  * @retval SUCCESS : URI structure has been updated
  * @retval ERROR : Not able to fill URI structure
  */
uint16_t TT4_ReadURI(sURI_Info *pURI)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint16_t status = NDEF_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	82fb      	strh	r3, [r7, #22]
  sCCFileInfo *pCCFile;
  sRecordInfo *pRecordStruct;
  
  pCCFile = &CCFileStruct;
 8004c68:	4b11      	ldr	r3, [pc, #68]	; (8004cb0 <TT4_ReadURI+0x54>)
 8004c6a:	613b      	str	r3, [r7, #16]
  pRecordStruct = &RecordStruct;
 8004c6c:	4b11      	ldr	r3, [pc, #68]	; (8004cb4 <TT4_ReadURI+0x58>)
 8004c6e:	60fb      	str	r3, [r7, #12]
  
  
  if(NFC_TT4_OpenNDEFSession(pCCFile->FileID, NFC_TT4_ASK_FOR_SESSION) == NDEF_SUCCESS)
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	895b      	ldrh	r3, [r3, #10]
 8004c74:	2100      	movs	r1, #0
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7fd f91a 	bl	8001eb0 <NFC_TT4_OpenNDEFSession>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d111      	bne.n	8004ca6 <TT4_ReadURI+0x4a>
  {
    if(NDEF_IdentifyNDEF( pRecordStruct, NDEF_Buffer) == NDEF_SUCCESS)
 8004c82:	490d      	ldr	r1, [pc, #52]	; (8004cb8 <TT4_ReadURI+0x5c>)
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f7fd fccd 	bl	8002624 <NDEF_IdentifyNDEF>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d105      	bne.n	8004c9c <TT4_ReadURI+0x40>
    {
      status = NDEF_ReadURI(pRecordStruct, pURI);
 8004c90:	6879      	ldr	r1, [r7, #4]
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f7fe ff4c 	bl	8003b30 <NDEF_ReadURI>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	82fb      	strh	r3, [r7, #22]
    }
    NFC_TT4_CloseNDEFSession(pCCFile->FileID);
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	895b      	ldrh	r3, [r3, #10]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7fd f967 	bl	8001f74 <NFC_TT4_CloseNDEFSession>
  }
  
  return status;
 8004ca6:	8afb      	ldrh	r3, [r7, #22]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3718      	adds	r7, #24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	20002098 	.word	0x20002098
 8004cb4:	200020a8 	.word	0x200020a8
 8004cb8:	200022c8 	.word	0x200022c8

08004cbc <TT4_WriteURI>:
  * @param  pURI : pointer on URI structure to prepare NDEF
  * @retval SUCCESS : NDEF URI stored
  * @retval ERROR : Not able to store NDEF URI
  */
uint16_t TT4_WriteURI(sURI_Info *pURI)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint16_t status = NDEF_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	81fb      	strh	r3, [r7, #14]
  sCCFileInfo *pCCFile;
  
  pCCFile = &CCFileStruct;
 8004cc8:	4b0c      	ldr	r3, [pc, #48]	; (8004cfc <TT4_WriteURI+0x40>)
 8004cca:	60bb      	str	r3, [r7, #8]
  
  if(NFC_TT4_OpenNDEFSession(pCCFile->FileID, NFC_TT4_ASK_FOR_SESSION) == NDEF_SUCCESS)
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	895b      	ldrh	r3, [r3, #10]
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fd f8ec 	bl	8001eb0 <NFC_TT4_OpenNDEFSession>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d109      	bne.n	8004cf2 <TT4_WriteURI+0x36>
  {
    status = NDEF_WriteURI ( pURI );
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7fe ff8a 	bl	8003bf8 <NDEF_WriteURI>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	81fb      	strh	r3, [r7, #14]
    NFC_TT4_CloseNDEFSession(pCCFile->FileID);
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	895b      	ldrh	r3, [r3, #10]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7fd f941 	bl	8001f74 <NFC_TT4_CloseNDEFSession>
  }
  
  return status;
 8004cf2:	89fb      	ldrh	r3, [r7, #14]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	20002098 	.word	0x20002098

08004d00 <TT4_ReadSMS>:
  * @param  pSMS : pointer on SMS structure to fill with read data
  * @retval SUCCESS : SMS structure has been updated
  * @retval ERROR : Not able to fill MS structure
  */
uint16_t TT4_ReadSMS(sSMSInfo *pSMS)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint16_t status = NDEF_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	82fb      	strh	r3, [r7, #22]
  sCCFileInfo *pCCFile;
  sRecordInfo *pRecordStruct;
  
  pCCFile = &CCFileStruct;
 8004d0c:	4b11      	ldr	r3, [pc, #68]	; (8004d54 <TT4_ReadSMS+0x54>)
 8004d0e:	613b      	str	r3, [r7, #16]
  pRecordStruct = &RecordStruct;
 8004d10:	4b11      	ldr	r3, [pc, #68]	; (8004d58 <TT4_ReadSMS+0x58>)
 8004d12:	60fb      	str	r3, [r7, #12]
  
  if(NFC_TT4_OpenNDEFSession(pCCFile->FileID, NFC_TT4_ASK_FOR_SESSION) == NDEF_SUCCESS)
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	895b      	ldrh	r3, [r3, #10]
 8004d18:	2100      	movs	r1, #0
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7fd f8c8 	bl	8001eb0 <NFC_TT4_OpenNDEFSession>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d111      	bne.n	8004d4a <TT4_ReadSMS+0x4a>
  {
    if(NDEF_IdentifyNDEF( pRecordStruct, NDEF_Buffer) == NDEF_SUCCESS)
 8004d26:	490d      	ldr	r1, [pc, #52]	; (8004d5c <TT4_ReadSMS+0x5c>)
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f7fd fc7b 	bl	8002624 <NDEF_IdentifyNDEF>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d105      	bne.n	8004d40 <TT4_ReadSMS+0x40>
    {
      status = NDEF_ReadSMS(pRecordStruct, pSMS);
 8004d34:	6879      	ldr	r1, [r7, #4]
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f7fe fa7a 	bl	8003230 <NDEF_ReadSMS>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	82fb      	strh	r3, [r7, #22]
    }
    NFC_TT4_CloseNDEFSession(pCCFile->FileID);
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	895b      	ldrh	r3, [r3, #10]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7fd f915 	bl	8001f74 <NFC_TT4_CloseNDEFSession>
  }
  
  return status;
 8004d4a:	8afb      	ldrh	r3, [r7, #22]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	20002098 	.word	0x20002098
 8004d58:	200020a8 	.word	0x200020a8
 8004d5c:	200022c8 	.word	0x200022c8

08004d60 <TT4_WriteSMS>:
  * @param  pSMS : pointer on SMS structure to prepare NDEF
  * @retval SUCCESS : NDEF SMS stored
  * @retval ERROR : Not able to store NDEF SMS
  */
uint16_t TT4_WriteSMS(sSMSInfo *pSMS)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint16_t status = NDEF_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	81fb      	strh	r3, [r7, #14]
  sCCFileInfo *pCCFile;
  
  pCCFile = &CCFileStruct;
 8004d6c:	4b0c      	ldr	r3, [pc, #48]	; (8004da0 <TT4_WriteSMS+0x40>)
 8004d6e:	60bb      	str	r3, [r7, #8]
  
  if(NFC_TT4_OpenNDEFSession(pCCFile->FileID, NFC_TT4_ASK_FOR_SESSION) == NDEF_SUCCESS)
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	895b      	ldrh	r3, [r3, #10]
 8004d74:	2100      	movs	r1, #0
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fd f89a 	bl	8001eb0 <NFC_TT4_OpenNDEFSession>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d109      	bne.n	8004d96 <TT4_WriteSMS+0x36>
  {
    status = NDEF_WriteSMS ( pSMS );
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7fe faca 	bl	800331c <NDEF_WriteSMS>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	81fb      	strh	r3, [r7, #14]
     NFC_TT4_CloseNDEFSession(pCCFile->FileID);
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	895b      	ldrh	r3, [r3, #10]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7fd f8ef 	bl	8001f74 <NFC_TT4_CloseNDEFSession>
  }
  
  return status;
 8004d96:	89fb      	ldrh	r3, [r7, #14]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	20002098 	.word	0x20002098

08004da4 <TT4_ReadEmail>:
  * @param  pEmailStruct : pointer on eMail structure to fill with read data
  * @retval SUCCESS : eMail structure has been updated
  * @retval ERROR : Not able to fill eMail structure
  */
uint16_t TT4_ReadEmail (sEmailInfo *pEmailStruct)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint16_t status = NDEF_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	82fb      	strh	r3, [r7, #22]
  sCCFileInfo *pCCFile;
  sRecordInfo *pRecordStruct;
  
  pCCFile = &CCFileStruct;
 8004db0:	4b11      	ldr	r3, [pc, #68]	; (8004df8 <TT4_ReadEmail+0x54>)
 8004db2:	613b      	str	r3, [r7, #16]
  pRecordStruct = &RecordStruct;
 8004db4:	4b11      	ldr	r3, [pc, #68]	; (8004dfc <TT4_ReadEmail+0x58>)
 8004db6:	60fb      	str	r3, [r7, #12]
  
  
  if(NFC_TT4_OpenNDEFSession(pCCFile->FileID, NFC_TT4_ASK_FOR_SESSION) == NDEF_SUCCESS)
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	895b      	ldrh	r3, [r3, #10]
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fd f876 	bl	8001eb0 <NFC_TT4_OpenNDEFSession>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d111      	bne.n	8004dee <TT4_ReadEmail+0x4a>
  {
    if(NDEF_IdentifyNDEF( pRecordStruct, NDEF_Buffer) == NDEF_SUCCESS)
 8004dca:	490d      	ldr	r1, [pc, #52]	; (8004e00 <TT4_ReadEmail+0x5c>)
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f7fd fc29 	bl	8002624 <NDEF_IdentifyNDEF>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d105      	bne.n	8004de4 <TT4_ReadEmail+0x40>
    {
      status = NDEF_ReadEmail(pRecordStruct, pEmailStruct);
 8004dd8:	6879      	ldr	r1, [r7, #4]
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f7fd fee6 	bl	8002bac <NDEF_ReadEmail>
 8004de0:	4603      	mov	r3, r0
 8004de2:	82fb      	strh	r3, [r7, #22]
     // printf("%d\n",status);
    }
     NFC_TT4_CloseNDEFSession(pCCFile->FileID);
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	895b      	ldrh	r3, [r3, #10]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7fd f8c3 	bl	8001f74 <NFC_TT4_CloseNDEFSession>
  }
  
  return status;    
 8004dee:	8afb      	ldrh	r3, [r7, #22]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	20002098 	.word	0x20002098
 8004dfc:	200020a8 	.word	0x200020a8
 8004e00:	200022c8 	.word	0x200022c8

08004e04 <TT4_WriteEmail>:
  * @param  pEmailStruct : pointer on eMail structure to prepare NDEF
  * @retval SUCCESS : NDEF eMail stored
  * @retval ERROR : Not able to store NDEF eMail
  */
uint16_t TT4_WriteEmail(sEmailInfo *pEmailStruct)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint16_t status = NDEF_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	81fb      	strh	r3, [r7, #14]
  sCCFileInfo *pCCFile;
  
  pCCFile = &CCFileStruct;
 8004e10:	4b0c      	ldr	r3, [pc, #48]	; (8004e44 <TT4_WriteEmail+0x40>)
 8004e12:	60bb      	str	r3, [r7, #8]
  
  if(NFC_TT4_OpenNDEFSession(pCCFile->FileID, NFC_TT4_ASK_FOR_SESSION) == NDEF_SUCCESS)
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	895b      	ldrh	r3, [r3, #10]
 8004e18:	2100      	movs	r1, #0
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fd f848 	bl	8001eb0 <NFC_TT4_OpenNDEFSession>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d109      	bne.n	8004e3a <TT4_WriteEmail+0x36>
  {
    status = NDEF_WriteEmail ( pEmailStruct );
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7fd ff2a 	bl	8002c80 <NDEF_WriteEmail>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	81fb      	strh	r3, [r7, #14]
     NFC_TT4_CloseNDEFSession(pCCFile->FileID);
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	895b      	ldrh	r3, [r3, #10]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7fd f89d 	bl	8001f74 <NFC_TT4_CloseNDEFSession>
  }
  
  return status;
 8004e3a:	89fb      	ldrh	r3, [r7, #14]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	20002098 	.word	0x20002098

08004e48 <TT4_ReadVcard>:
  * @param  pVcard : pointer on Vcard structure to fill with read data
  * @retval SUCCESS : Vcard structure has been updated
  * @retval ERROR : Not able to fill Vcard structure
  */
uint16_t TT4_ReadVcard(sVcardInfo *pVcard)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint16_t status = NDEF_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	82fb      	strh	r3, [r7, #22]
  sCCFileInfo *pCCFile;
  sRecordInfo *pRecordStruct;
  
  pCCFile = &CCFileStruct;
 8004e54:	4b11      	ldr	r3, [pc, #68]	; (8004e9c <TT4_ReadVcard+0x54>)
 8004e56:	613b      	str	r3, [r7, #16]
  pRecordStruct = &RecordStruct;
 8004e58:	4b11      	ldr	r3, [pc, #68]	; (8004ea0 <TT4_ReadVcard+0x58>)
 8004e5a:	60fb      	str	r3, [r7, #12]
  
  
  if(NFC_TT4_OpenNDEFSession(pCCFile->FileID, NFC_TT4_ASK_FOR_SESSION) == NDEF_SUCCESS)
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	895b      	ldrh	r3, [r3, #10]
 8004e60:	2100      	movs	r1, #0
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fd f824 	bl	8001eb0 <NFC_TT4_OpenNDEFSession>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d111      	bne.n	8004e92 <TT4_ReadVcard+0x4a>
  {  
    if(NDEF_IdentifyNDEF( pRecordStruct, NDEF_Buffer) == NDEF_SUCCESS)
 8004e6e:	490d      	ldr	r1, [pc, #52]	; (8004ea4 <TT4_ReadVcard+0x5c>)
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f7fd fbd7 	bl	8002624 <NDEF_IdentifyNDEF>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d105      	bne.n	8004e88 <TT4_ReadVcard+0x40>
    {
      status = NDEF_ReadVcard(pRecordStruct, pVcard);
 8004e7c:	6879      	ldr	r1, [r7, #4]
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f7ff fb70 	bl	8004564 <NDEF_ReadVcard>
 8004e84:	4603      	mov	r3, r0
 8004e86:	82fb      	strh	r3, [r7, #22]
    }
     NFC_TT4_CloseNDEFSession(pCCFile->FileID);
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	895b      	ldrh	r3, [r3, #10]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7fd f871 	bl	8001f74 <NFC_TT4_CloseNDEFSession>
  }
  
  return status;
 8004e92:	8afb      	ldrh	r3, [r7, #22]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3718      	adds	r7, #24
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	20002098 	.word	0x20002098
 8004ea0:	200020a8 	.word	0x200020a8
 8004ea4:	200022c8 	.word	0x200022c8

08004ea8 <TT4_WriteVcard>:
  * @param  pVcard : pointer on Vcard structure to prepare NDEF
  * @retval SUCCESS : NDEF Vcard stored
  * @retval ERROR : Not able to store NDEF Vcard
  */
uint16_t TT4_WriteVcard(sVcardInfo *pVcard)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  uint16_t status = NDEF_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	81fb      	strh	r3, [r7, #14]
  sCCFileInfo *pCCFile;
  
  pCCFile = &CCFileStruct;
 8004eb4:	4b0c      	ldr	r3, [pc, #48]	; (8004ee8 <TT4_WriteVcard+0x40>)
 8004eb6:	60bb      	str	r3, [r7, #8]
  
  if(NFC_TT4_OpenNDEFSession(pCCFile->FileID, NFC_TT4_ASK_FOR_SESSION) == NDEF_SUCCESS)
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	895b      	ldrh	r3, [r3, #10]
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7fc fff6 	bl	8001eb0 <NFC_TT4_OpenNDEFSession>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d109      	bne.n	8004ede <TT4_WriteVcard+0x36>
  {
    status = NDEF_WriteVcard ( pVcard );
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7ff fb62 	bl	8004594 <NDEF_WriteVcard>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	81fb      	strh	r3, [r7, #14]
     NFC_TT4_CloseNDEFSession(pCCFile->FileID);
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	895b      	ldrh	r3, [r3, #10]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7fd f84b 	bl	8001f74 <NFC_TT4_CloseNDEFSession>
  }
  
  return status;
 8004ede:	89fb      	ldrh	r3, [r7, #14]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	20002098 	.word	0x20002098

08004eec <TT4_AddAAR>:
  * @param  pAAR : pointer on structure that contain AAR information
  * @retval SUCCESS : AAR added
  * @retval ERROR : Not able to add AAR
  */
uint16_t TT4_AddAAR(sAARInfo *pAAR)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  uint16_t status = NDEF_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	81fb      	strh	r3, [r7, #14]
  sCCFileInfo *pCCFile;
  
  pCCFile = &CCFileStruct;
 8004ef8:	4b0c      	ldr	r3, [pc, #48]	; (8004f2c <TT4_AddAAR+0x40>)
 8004efa:	60bb      	str	r3, [r7, #8]
  
  if(NFC_TT4_OpenNDEFSession(pCCFile->FileID, NFC_TT4_ASK_FOR_SESSION) == NDEF_SUCCESS)
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	895b      	ldrh	r3, [r3, #10]
 8004f00:	2100      	movs	r1, #0
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fc ffd4 	bl	8001eb0 <NFC_TT4_OpenNDEFSession>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d109      	bne.n	8004f22 <TT4_AddAAR+0x36>
  {
    status = NDEF_AddAAR ( pAAR );
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7fd fcba 	bl	8002888 <NDEF_AddAAR>
 8004f14:	4603      	mov	r3, r0
 8004f16:	81fb      	strh	r3, [r7, #14]
     NFC_TT4_CloseNDEFSession(pCCFile->FileID);
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	895b      	ldrh	r3, [r3, #10]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7fd f829 	bl	8001f74 <NFC_TT4_CloseNDEFSession>
  }
  
  return status;
 8004f22:	89fb      	ldrh	r3, [r7, #14]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	20002098 	.word	0x20002098

08004f30 <f_NFC>:
/******************************************************************** END **************************************************************/

/*************************************************** NFC Console UI **************************************************************/

void f_NFC(void)										// NFC Operations API Name Console Print
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	af00      	add	r7, sp, #0
	f_Menu_flag		= 0;
 8004f34:	4b0e      	ldr	r3, [pc, #56]	; (8004f70 <f_NFC+0x40>)
 8004f36:	2200      	movs	r2, #0
 8004f38:	701a      	strb	r2, [r3, #0]
	f_NFC_flag		= 1;
 8004f3a:	4b0e      	ldr	r3, [pc, #56]	; (8004f74 <f_NFC+0x44>)
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	701a      	strb	r2, [r3, #0]
	f_NFC_W_flag	= 0;
 8004f40:	4b0d      	ldr	r3, [pc, #52]	; (8004f78 <f_NFC+0x48>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	701a      	strb	r2, [r3, #0]
	f_NFC_R_flag	= 0;
 8004f46:	4b0d      	ldr	r3, [pc, #52]	; (8004f7c <f_NFC+0x4c>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1,msg4,sizeof(msg4),100);
 8004f4c:	2364      	movs	r3, #100	; 0x64
 8004f4e:	2283      	movs	r2, #131	; 0x83
 8004f50:	490b      	ldr	r1, [pc, #44]	; (8004f80 <f_NFC+0x50>)
 8004f52:	480c      	ldr	r0, [pc, #48]	; (8004f84 <f_NFC+0x54>)
 8004f54:	f00c fb5c 	bl	8011610 <HAL_UART_Transmit>
	f_INT_count=10;
 8004f58:	4b0b      	ldr	r3, [pc, #44]	; (8004f88 <f_NFC+0x58>)
 8004f5a:	220a      	movs	r2, #10
 8004f5c:	701a      	strb	r2, [r3, #0]
	sw_flag = 1;
 8004f5e:	4b0b      	ldr	r3, [pc, #44]	; (8004f8c <f_NFC+0x5c>)
 8004f60:	2201      	movs	r2, #1
 8004f62:	701a      	strb	r2, [r3, #0]
	s_case = 0;
 8004f64:	4b0a      	ldr	r3, [pc, #40]	; (8004f90 <f_NFC+0x60>)
 8004f66:	2200      	movs	r2, #0
 8004f68:	701a      	strb	r2, [r3, #0]
}
 8004f6a:	bf00      	nop
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	200004c6 	.word	0x200004c6
 8004f74:	20000f98 	.word	0x20000f98
 8004f78:	20000f99 	.word	0x20000f99
 8004f7c:	20000f9a 	.word	0x20000f9a
 8004f80:	200002a8 	.word	0x200002a8
 8004f84:	20002b74 	.word	0x20002b74
 8004f88:	200004c5 	.word	0x200004c5
 8004f8c:	20000f96 	.word	0x20000f96
 8004f90:	20000f97 	.word	0x20000f97

08004f94 <f_NFC_D>:

void f_NFC_D(void)										// NFC Detected API Name Console Print
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
	if(flag_NFC)
 8004f98:	4b0c      	ldr	r3, [pc, #48]	; (8004fcc <f_NFC_D+0x38>)
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d013      	beq.n	8004fc8 <f_NFC_D+0x34>
	{
		if(!NFC_check)
 8004fa0:	4b0b      	ldr	r3, [pc, #44]	; (8004fd0 <f_NFC_D+0x3c>)
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d106      	bne.n	8004fb6 <f_NFC_D+0x22>
		{
			HAL_UART_Transmit(&huart1,( uint8_t * )"NFC Detected\r\n",sizeof("NFC Detected\r\n"),10);
 8004fa8:	230a      	movs	r3, #10
 8004faa:	220f      	movs	r2, #15
 8004fac:	4909      	ldr	r1, [pc, #36]	; (8004fd4 <f_NFC_D+0x40>)
 8004fae:	480a      	ldr	r0, [pc, #40]	; (8004fd8 <f_NFC_D+0x44>)
 8004fb0:	f00c fb2e 	bl	8011610 <HAL_UART_Transmit>
 8004fb4:	e005      	b.n	8004fc2 <f_NFC_D+0x2e>
		}
		else
		{
			HAL_UART_Transmit(&huart1,( uint8_t * )"\033\143NFC NOT Present\r\n",sizeof("\033\143NFC NOT Present\r\n"),10);
 8004fb6:	230a      	movs	r3, #10
 8004fb8:	2214      	movs	r2, #20
 8004fba:	4908      	ldr	r1, [pc, #32]	; (8004fdc <f_NFC_D+0x48>)
 8004fbc:	4806      	ldr	r0, [pc, #24]	; (8004fd8 <f_NFC_D+0x44>)
 8004fbe:	f00c fb27 	bl	8011610 <HAL_UART_Transmit>
		}
		flag_NFC=0;
 8004fc2:	4b02      	ldr	r3, [pc, #8]	; (8004fcc <f_NFC_D+0x38>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	701a      	strb	r2, [r3, #0]
	}

}
 8004fc8:	bf00      	nop
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	200004d6 	.word	0x200004d6
 8004fd0:	20000f9b 	.word	0x20000f9b
 8004fd4:	080160cc 	.word	0x080160cc
 8004fd8:	20002b74 	.word	0x20002b74
 8004fdc:	080160dc 	.word	0x080160dc

08004fe0 <f_NFC_W>:

void f_NFC_W(void)										// NFC Write API Name Console Print
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
	f_Menu_flag		= 0;
 8004fe4:	4b0e      	ldr	r3, [pc, #56]	; (8005020 <f_NFC_W+0x40>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	701a      	strb	r2, [r3, #0]
	f_NFC_flag		= 0;
 8004fea:	4b0e      	ldr	r3, [pc, #56]	; (8005024 <f_NFC_W+0x44>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	701a      	strb	r2, [r3, #0]
	f_NFC_W_flag	= 1;
 8004ff0:	4b0d      	ldr	r3, [pc, #52]	; (8005028 <f_NFC_W+0x48>)
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	701a      	strb	r2, [r3, #0]
	f_NFC_R_flag	= 0;
 8004ff6:	4b0d      	ldr	r3, [pc, #52]	; (800502c <f_NFC_W+0x4c>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1,msg5,sizeof(msg5),100);
 8004ffc:	2364      	movs	r3, #100	; 0x64
 8004ffe:	22b0      	movs	r2, #176	; 0xb0
 8005000:	490b      	ldr	r1, [pc, #44]	; (8005030 <f_NFC_W+0x50>)
 8005002:	480c      	ldr	r0, [pc, #48]	; (8005034 <f_NFC_W+0x54>)
 8005004:	f00c fb04 	bl	8011610 <HAL_UART_Transmit>
	f_INT_count = 15;
 8005008:	4b0b      	ldr	r3, [pc, #44]	; (8005038 <f_NFC_W+0x58>)
 800500a:	220f      	movs	r2, #15
 800500c:	701a      	strb	r2, [r3, #0]
	sw_flag = 1;
 800500e:	4b0b      	ldr	r3, [pc, #44]	; (800503c <f_NFC_W+0x5c>)
 8005010:	2201      	movs	r2, #1
 8005012:	701a      	strb	r2, [r3, #0]
	s_case = 0;
 8005014:	4b0a      	ldr	r3, [pc, #40]	; (8005040 <f_NFC_W+0x60>)
 8005016:	2200      	movs	r2, #0
 8005018:	701a      	strb	r2, [r3, #0]
}
 800501a:	bf00      	nop
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	200004c6 	.word	0x200004c6
 8005024:	20000f98 	.word	0x20000f98
 8005028:	20000f99 	.word	0x20000f99
 800502c:	20000f9a 	.word	0x20000f9a
 8005030:	2000032c 	.word	0x2000032c
 8005034:	20002b74 	.word	0x20002b74
 8005038:	200004c5 	.word	0x200004c5
 800503c:	20000f96 	.word	0x20000f96
 8005040:	20000f97 	.word	0x20000f97

08005044 <f_NFC_R>:

void f_NFC_R(void)										// NFC Read API Name Console Print
{
 8005044:	b580      	push	{r7, lr}
 8005046:	af00      	add	r7, sp, #0
	f_Menu_flag		= 0;
 8005048:	4b0e      	ldr	r3, [pc, #56]	; (8005084 <f_NFC_R+0x40>)
 800504a:	2200      	movs	r2, #0
 800504c:	701a      	strb	r2, [r3, #0]
	f_NFC_flag		= 0;
 800504e:	4b0e      	ldr	r3, [pc, #56]	; (8005088 <f_NFC_R+0x44>)
 8005050:	2200      	movs	r2, #0
 8005052:	701a      	strb	r2, [r3, #0]
	f_NFC_W_flag	= 0;
 8005054:	4b0d      	ldr	r3, [pc, #52]	; (800508c <f_NFC_R+0x48>)
 8005056:	2200      	movs	r2, #0
 8005058:	701a      	strb	r2, [r3, #0]
	f_NFC_R_flag	= 1;
 800505a:	4b0d      	ldr	r3, [pc, #52]	; (8005090 <f_NFC_R+0x4c>)
 800505c:	2201      	movs	r2, #1
 800505e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1,msg6,sizeof(msg6),100);
 8005060:	2364      	movs	r3, #100	; 0x64
 8005062:	229d      	movs	r2, #157	; 0x9d
 8005064:	490b      	ldr	r1, [pc, #44]	; (8005094 <f_NFC_R+0x50>)
 8005066:	480c      	ldr	r0, [pc, #48]	; (8005098 <f_NFC_R+0x54>)
 8005068:	f00c fad2 	bl	8011610 <HAL_UART_Transmit>
	f_INT_count = 22;
 800506c:	4b0b      	ldr	r3, [pc, #44]	; (800509c <f_NFC_R+0x58>)
 800506e:	2216      	movs	r2, #22
 8005070:	701a      	strb	r2, [r3, #0]
	sw_flag = 1;
 8005072:	4b0b      	ldr	r3, [pc, #44]	; (80050a0 <f_NFC_R+0x5c>)
 8005074:	2201      	movs	r2, #1
 8005076:	701a      	strb	r2, [r3, #0]
	s_case = 0;
 8005078:	4b0a      	ldr	r3, [pc, #40]	; (80050a4 <f_NFC_R+0x60>)
 800507a:	2200      	movs	r2, #0
 800507c:	701a      	strb	r2, [r3, #0]
}
 800507e:	bf00      	nop
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	200004c6 	.word	0x200004c6
 8005088:	20000f98 	.word	0x20000f98
 800508c:	20000f99 	.word	0x20000f99
 8005090:	20000f9a 	.word	0x20000f9a
 8005094:	200003dc 	.word	0x200003dc
 8005098:	20002b74 	.word	0x20002b74
 800509c:	200004c5 	.word	0x200004c5
 80050a0:	20000f96 	.word	0x20000f96
 80050a4:	20000f97 	.word	0x20000f97

080050a8 <EMAILwrite_demo>:

/******************************************************************** END **************************************************************/

/************************************* EMAIL API ******************************************/
static void EMAILwrite_demo(void)
{
 80050a8:	b590      	push	{r4, r7, lr}
 80050aa:	f5ad 7d77 	sub.w	sp, sp, #988	; 0x3dc
 80050ae:	af02      	add	r7, sp, #8
	if(flag_Email)
 80050b0:	4b3b      	ldr	r3, [pc, #236]	; (80051a0 <EMAILwrite_demo+0xf8>)
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d06d      	beq.n	8005194 <EMAILwrite_demo+0xec>
	{
		HAL_UART_Transmit(&huart1,( uint8_t * )"\033\143NFC Email Write Mode\r\n",sizeof("\033\143NFC Email Write Mode\r\n"),10);
 80050b8:	230a      	movs	r3, #10
 80050ba:	2219      	movs	r2, #25
 80050bc:	4939      	ldr	r1, [pc, #228]	; (80051a4 <EMAILwrite_demo+0xfc>)
 80050be:	483a      	ldr	r0, [pc, #232]	; (80051a8 <EMAILwrite_demo+0x100>)
 80050c0:	f00c faa6 	bl	8011610 <HAL_UART_Transmit>

		uint16_t status = ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	f8a7 33ce 	strh.w	r3, [r7, #974]	; 0x3ce
		sEmailInfo EmailStruct;
		sEmailInfo *pEmailStruct;

		pEmailStruct = &EmailStruct;
 80050ca:	1d3b      	adds	r3, r7, #4
 80050cc:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8

		memcpy(pEmailStruct->EmailAdd, EmailAdd, strlen(EmailAdd)+1);
 80050d0:	f8d7 43c8 	ldr.w	r4, [r7, #968]	; 0x3c8
 80050d4:	4835      	ldr	r0, [pc, #212]	; (80051ac <EMAILwrite_demo+0x104>)
 80050d6:	f7fb f87b 	bl	80001d0 <strlen>
 80050da:	4603      	mov	r3, r0
 80050dc:	3301      	adds	r3, #1
 80050de:	461a      	mov	r2, r3
 80050e0:	4932      	ldr	r1, [pc, #200]	; (80051ac <EMAILwrite_demo+0x104>)
 80050e2:	4620      	mov	r0, r4
 80050e4:	f00d fef4 	bl	8012ed0 <memcpy>
		memcpy(pEmailStruct->Subject, Subject, strlen(Subject)+1);
 80050e8:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80050ec:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80050f0:	482f      	ldr	r0, [pc, #188]	; (80051b0 <EMAILwrite_demo+0x108>)
 80050f2:	f7fb f86d 	bl	80001d0 <strlen>
 80050f6:	4603      	mov	r3, r0
 80050f8:	3301      	adds	r3, #1
 80050fa:	461a      	mov	r2, r3
 80050fc:	492c      	ldr	r1, [pc, #176]	; (80051b0 <EMAILwrite_demo+0x108>)
 80050fe:	4620      	mov	r0, r4
 8005100:	f00d fee6 	bl	8012ed0 <memcpy>
		memcpy(pEmailStruct->Message, EmailMessage, strlen(EmailMessage)+1);
 8005104:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8005108:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 800510c:	4829      	ldr	r0, [pc, #164]	; (80051b4 <EMAILwrite_demo+0x10c>)
 800510e:	f7fb f85f 	bl	80001d0 <strlen>
 8005112:	4603      	mov	r3, r0
 8005114:	3301      	adds	r3, #1
 8005116:	461a      	mov	r2, r3
 8005118:	4926      	ldr	r1, [pc, #152]	; (80051b4 <EMAILwrite_demo+0x10c>)
 800511a:	4620      	mov	r0, r4
 800511c:	f00d fed8 	bl	8012ed0 <memcpy>
		memcpy(pEmailStruct->Information, Information, strlen(Information)+1);
 8005120:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8005124:	f503 740d 	add.w	r4, r3, #564	; 0x234
 8005128:	4823      	ldr	r0, [pc, #140]	; (80051b8 <EMAILwrite_demo+0x110>)
 800512a:	f7fb f851 	bl	80001d0 <strlen>
 800512e:	4603      	mov	r3, r0
 8005130:	3301      	adds	r3, #1
 8005132:	461a      	mov	r2, r3
 8005134:	4920      	ldr	r1, [pc, #128]	; (80051b8 <EMAILwrite_demo+0x110>)
 8005136:	4620      	mov	r0, r4
 8005138:	f00d feca 	bl	8012ed0 <memcpy>

		status = TT4_WriteEmail ( pEmailStruct );
 800513c:	f8d7 03c8 	ldr.w	r0, [r7, #968]	; 0x3c8
 8005140:	f7ff fe60 	bl	8004e04 <TT4_WriteEmail>
 8005144:	4603      	mov	r3, r0
 8005146:	f8a7 33ce 	strh.w	r3, [r7, #974]	; 0x3ce

		if(status == SUCCESS)
 800514a:	f8b7 33ce 	ldrh.w	r3, [r7, #974]	; 0x3ce
 800514e:	2b00      	cmp	r3, #0
 8005150:	d11d      	bne.n	800518e <EMAILwrite_demo+0xe6>
		{
			HAL_UART_Transmit(&huart1,( uint8_t * )"NFC Email Write Done\r\n",sizeof("NFC Email Write Done\r\n"),10);
 8005152:	230a      	movs	r3, #10
 8005154:	2217      	movs	r2, #23
 8005156:	4919      	ldr	r1, [pc, #100]	; (80051bc <EMAILwrite_demo+0x114>)
 8005158:	4813      	ldr	r0, [pc, #76]	; (80051a8 <EMAILwrite_demo+0x100>)
 800515a:	f00c fa59 	bl	8011610 <HAL_UART_Transmit>
			snprintf(str_email,700,"Email Addr 	: %s \r\nSubject 	: %s \r\nMessage 	: %s\r\n",pEmailStruct->EmailAdd,pEmailStruct->Subject,pEmailStruct->Message);
 800515e:	f8d7 13c8 	ldr.w	r1, [r7, #968]	; 0x3c8
 8005162:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8005166:	3340      	adds	r3, #64	; 0x40
 8005168:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 800516c:	32a4      	adds	r2, #164	; 0xa4
 800516e:	9201      	str	r2, [sp, #4]
 8005170:	9300      	str	r3, [sp, #0]
 8005172:	460b      	mov	r3, r1
 8005174:	4a12      	ldr	r2, [pc, #72]	; (80051c0 <EMAILwrite_demo+0x118>)
 8005176:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 800517a:	4812      	ldr	r0, [pc, #72]	; (80051c4 <EMAILwrite_demo+0x11c>)
 800517c:	f00e fbb6 	bl	80138ec <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_email,sizeof(str_email),100);
 8005180:	2364      	movs	r3, #100	; 0x64
 8005182:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8005186:	490f      	ldr	r1, [pc, #60]	; (80051c4 <EMAILwrite_demo+0x11c>)
 8005188:	4807      	ldr	r0, [pc, #28]	; (80051a8 <EMAILwrite_demo+0x100>)
 800518a:	f00c fa41 	bl	8011610 <HAL_UART_Transmit>
		}

		flag_Email=0;
 800518e:	4b04      	ldr	r3, [pc, #16]	; (80051a0 <EMAILwrite_demo+0xf8>)
 8005190:	2200      	movs	r2, #0
 8005192:	701a      	strb	r2, [r3, #0]
	}
}
 8005194:	bf00      	nop
 8005196:	f507 7775 	add.w	r7, r7, #980	; 0x3d4
 800519a:	46bd      	mov	sp, r7
 800519c:	bd90      	pop	{r4, r7, pc}
 800519e:	bf00      	nop
 80051a0:	200004ce 	.word	0x200004ce
 80051a4:	080160f0 	.word	0x080160f0
 80051a8:	20002b74 	.word	0x20002b74
 80051ac:	200004dc 	.word	0x200004dc
 80051b0:	200004f8 	.word	0x200004f8
 80051b4:	20000514 	.word	0x20000514
 80051b8:	20000528 	.word	0x20000528
 80051bc:	0801610c 	.word	0x0801610c
 80051c0:	08016124 	.word	0x08016124
 80051c4:	20001144 	.word	0x20001144

080051c8 <EMAILread_demo>:

static void EMAILread_demo(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	f5ad 7d74 	sub.w	sp, sp, #976	; 0x3d0
 80051ce:	af02      	add	r7, sp, #8
	//if(flag_R_Email)
	{
		HAL_UART_Transmit(&huart1,( uint8_t * )"\033\143NFC Email Read Mode \r\n",sizeof("\033\143 NFC Email Read Mode \r\n"),10);
 80051d0:	230a      	movs	r3, #10
 80051d2:	221a      	movs	r2, #26
 80051d4:	4918      	ldr	r1, [pc, #96]	; (8005238 <EMAILread_demo+0x70>)
 80051d6:	4819      	ldr	r0, [pc, #100]	; (800523c <EMAILread_demo+0x74>)
 80051d8:	f00c fa1a 	bl	8011610 <HAL_UART_Transmit>

		//if(!NFC_check)
		{
			sEmailInfo EmailStruct;
			sEmailInfo *pEmailStruct;
			pEmailStruct = &EmailStruct;
 80051dc:	463b      	mov	r3, r7
 80051de:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4

			TT4_ReadEmail ( pEmailStruct );
 80051e2:	f8d7 03c4 	ldr.w	r0, [r7, #964]	; 0x3c4
 80051e6:	f7ff fddd 	bl	8004da4 <TT4_ReadEmail>

			HAL_UART_Transmit(&huart1,( uint8_t * )"NFC Email Read Done \r\n",sizeof("NFC Email Read Done \r\n"),10);
 80051ea:	230a      	movs	r3, #10
 80051ec:	2217      	movs	r2, #23
 80051ee:	4914      	ldr	r1, [pc, #80]	; (8005240 <EMAILread_demo+0x78>)
 80051f0:	4812      	ldr	r0, [pc, #72]	; (800523c <EMAILread_demo+0x74>)
 80051f2:	f00c fa0d 	bl	8011610 <HAL_UART_Transmit>
			snprintf(str_email,700,"Email Addr 	: %s \r\nSubject 	: %s \r\nMessage 	: %s\r\n",pEmailStruct->EmailAdd,pEmailStruct->Subject,pEmailStruct->Message);
 80051f6:	f8d7 13c4 	ldr.w	r1, [r7, #964]	; 0x3c4
 80051fa:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80051fe:	3340      	adds	r3, #64	; 0x40
 8005200:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 8005204:	32a4      	adds	r2, #164	; 0xa4
 8005206:	9201      	str	r2, [sp, #4]
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	460b      	mov	r3, r1
 800520c:	4a0d      	ldr	r2, [pc, #52]	; (8005244 <EMAILread_demo+0x7c>)
 800520e:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8005212:	480d      	ldr	r0, [pc, #52]	; (8005248 <EMAILread_demo+0x80>)
 8005214:	f00e fb6a 	bl	80138ec <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_email,sizeof(str_email),10);
 8005218:	230a      	movs	r3, #10
 800521a:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800521e:	490a      	ldr	r1, [pc, #40]	; (8005248 <EMAILread_demo+0x80>)
 8005220:	4806      	ldr	r0, [pc, #24]	; (800523c <EMAILread_demo+0x74>)
 8005222:	f00c f9f5 	bl	8011610 <HAL_UART_Transmit>
		}

		flag_R_Email=0;
 8005226:	4b09      	ldr	r3, [pc, #36]	; (800524c <EMAILread_demo+0x84>)
 8005228:	2200      	movs	r2, #0
 800522a:	701a      	strb	r2, [r3, #0]
	}
}
 800522c:	bf00      	nop
 800522e:	f507 7772 	add.w	r7, r7, #968	; 0x3c8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	08016158 	.word	0x08016158
 800523c:	20002b74 	.word	0x20002b74
 8005240:	08016174 	.word	0x08016174
 8005244:	08016124 	.word	0x08016124
 8005248:	20001144 	.word	0x20001144
 800524c:	200004cf 	.word	0x200004cf

08005250 <URLwrite_demo>:

/******************************************************************** END **************************************************************/
/************************************* URL API ******************************************/
static void URLwrite_demo(void)
{
 8005250:	b590      	push	{r4, r7, lr}
 8005252:	b0f9      	sub	sp, #484	; 0x1e4
 8005254:	af00      	add	r7, sp, #0
	if(flag_URL)
 8005256:	4b24      	ldr	r3, [pc, #144]	; (80052e8 <URLwrite_demo+0x98>)
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d03f      	beq.n	80052de <URLwrite_demo+0x8e>
	{
		sURI_Info URL;
		HAL_UART_Transmit(&huart1,( uint8_t * )"\033\143NFC URL Write Mode\r\n",sizeof("\033\143NFC URL Write Mode\r\n"),10);
 800525e:	230a      	movs	r3, #10
 8005260:	2217      	movs	r2, #23
 8005262:	4922      	ldr	r1, [pc, #136]	; (80052ec <URLwrite_demo+0x9c>)
 8005264:	4822      	ldr	r0, [pc, #136]	; (80052f0 <URLwrite_demo+0xa0>)
 8005266:	f00c f9d3 	bl	8011610 <HAL_UART_Transmit>
		strcpy(URL.protocol,URI_ID_0x01_STRING);
 800526a:	463b      	mov	r3, r7
 800526c:	4a21      	ldr	r2, [pc, #132]	; (80052f4 <URLwrite_demo+0xa4>)
 800526e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005270:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		strcpy(URL.URI_Message,"einfochips.com");
 8005274:	463b      	mov	r3, r7
 8005276:	3350      	adds	r3, #80	; 0x50
 8005278:	4a1f      	ldr	r2, [pc, #124]	; (80052f8 <URLwrite_demo+0xa8>)
 800527a:	461c      	mov	r4, r3
 800527c:	4613      	mov	r3, r2
 800527e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005280:	c407      	stmia	r4!, {r0, r1, r2}
 8005282:	8023      	strh	r3, [r4, #0]
 8005284:	3402      	adds	r4, #2
 8005286:	0c1b      	lsrs	r3, r3, #16
 8005288:	7023      	strb	r3, [r4, #0]
		strcpy(URL.Information,"\0");
 800528a:	463b      	mov	r3, r7
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118

		while (TT4_WriteURI(&URL) != SUCCESS);
 8005292:	bf00      	nop
 8005294:	463b      	mov	r3, r7
 8005296:	4618      	mov	r0, r3
 8005298:	f7ff fd10 	bl	8004cbc <TT4_WriteURI>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1f8      	bne.n	8005294 <URLwrite_demo+0x44>

		if(TT4_WriteURI(&URL) == SUCCESS)
 80052a2:	463b      	mov	r3, r7
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7ff fd09 	bl	8004cbc <TT4_WriteURI>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d113      	bne.n	80052d8 <URLwrite_demo+0x88>
		{
			HAL_UART_Transmit_IT(&huart1,( uint8_t * )"NFC URL Write Done\r\n",sizeof("NFC URL Write Done\r\n"));
 80052b0:	2215      	movs	r2, #21
 80052b2:	4912      	ldr	r1, [pc, #72]	; (80052fc <URLwrite_demo+0xac>)
 80052b4:	480e      	ldr	r0, [pc, #56]	; (80052f0 <URLwrite_demo+0xa0>)
 80052b6:	f00c fa3f 	bl	8011738 <HAL_UART_Transmit_IT>
			snprintf(str_url,300,"URL : %s \r\n",URL.URI_Message);
 80052ba:	463b      	mov	r3, r7
 80052bc:	3350      	adds	r3, #80	; 0x50
 80052be:	4a10      	ldr	r2, [pc, #64]	; (8005300 <URLwrite_demo+0xb0>)
 80052c0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80052c4:	480f      	ldr	r0, [pc, #60]	; (8005304 <URLwrite_demo+0xb4>)
 80052c6:	f00e fb11 	bl	80138ec <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_url,sizeof(str_url),10);
 80052ca:	230a      	movs	r3, #10
 80052cc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80052d0:	490c      	ldr	r1, [pc, #48]	; (8005304 <URLwrite_demo+0xb4>)
 80052d2:	4807      	ldr	r0, [pc, #28]	; (80052f0 <URLwrite_demo+0xa0>)
 80052d4:	f00c f99c 	bl	8011610 <HAL_UART_Transmit>
		}

		flag_URL = 0;
 80052d8:	4b03      	ldr	r3, [pc, #12]	; (80052e8 <URLwrite_demo+0x98>)
 80052da:	2200      	movs	r2, #0
 80052dc:	701a      	strb	r2, [r3, #0]
	}


}
 80052de:	bf00      	nop
 80052e0:	f507 77f2 	add.w	r7, r7, #484	; 0x1e4
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd90      	pop	{r4, r7, pc}
 80052e8:	200004d3 	.word	0x200004d3
 80052ec:	0801618c 	.word	0x0801618c
 80052f0:	20002b74 	.word	0x20002b74
 80052f4:	080161a4 	.word	0x080161a4
 80052f8:	080161b4 	.word	0x080161b4
 80052fc:	080161c4 	.word	0x080161c4
 8005300:	080161dc 	.word	0x080161dc
 8005304:	20001018 	.word	0x20001018

08005308 <URLread_demo>:

static void URLread_demo(void)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b0fa      	sub	sp, #488	; 0x1e8
 800530c:	af00      	add	r7, sp, #0

	if(flag_R_URL)
 800530e:	4b1c      	ldr	r3, [pc, #112]	; (8005380 <URLread_demo+0x78>)
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d02f      	beq.n	8005376 <URLread_demo+0x6e>
	{
		HAL_UART_Transmit(&huart1,( uint8_t * )"\033\143NFC URL Read Mode\r\n",sizeof("\033\143NFC URL Read Mode\r\n"),10);
 8005316:	230a      	movs	r3, #10
 8005318:	2216      	movs	r2, #22
 800531a:	491a      	ldr	r1, [pc, #104]	; (8005384 <URLread_demo+0x7c>)
 800531c:	481a      	ldr	r0, [pc, #104]	; (8005388 <URLread_demo+0x80>)
 800531e:	f00c f977 	bl	8011610 <HAL_UART_Transmit>
		//if(!NFC_check)
		{
			uint16_t status = ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
			sURI_Info URL;
			sURI_Info *pURL;
			pURL=&URL;
 8005328:	463b      	mov	r3, r7
 800532a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0

			status = TT4_ReadURI(&URL);
 800532e:	463b      	mov	r3, r7
 8005330:	4618      	mov	r0, r3
 8005332:	f7ff fc93 	bl	8004c5c <TT4_ReadURI>
 8005336:	4603      	mov	r3, r0
 8005338:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6

			if(status == SUCCESS)
 800533c:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 8005340:	2b00      	cmp	r3, #0
 8005342:	d115      	bne.n	8005370 <URLread_demo+0x68>
			{
				HAL_UART_Transmit(&huart1,( uint8_t * )"NFC URL Read Done\r\n",sizeof("NFC URL Read Done\r\n"),10);
 8005344:	230a      	movs	r3, #10
 8005346:	2214      	movs	r2, #20
 8005348:	4910      	ldr	r1, [pc, #64]	; (800538c <URLread_demo+0x84>)
 800534a:	480f      	ldr	r0, [pc, #60]	; (8005388 <URLread_demo+0x80>)
 800534c:	f00c f960 	bl	8011610 <HAL_UART_Transmit>
				snprintf(str_url,300,"URL : %s \r\n",pURL->URI_Message);
 8005350:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8005354:	3350      	adds	r3, #80	; 0x50
 8005356:	4a0e      	ldr	r2, [pc, #56]	; (8005390 <URLread_demo+0x88>)
 8005358:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800535c:	480d      	ldr	r0, [pc, #52]	; (8005394 <URLread_demo+0x8c>)
 800535e:	f00e fac5 	bl	80138ec <sniprintf>
				HAL_UART_Transmit(&huart1,( uint8_t * )str_url,sizeof(str_url),10);
 8005362:	230a      	movs	r3, #10
 8005364:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005368:	490a      	ldr	r1, [pc, #40]	; (8005394 <URLread_demo+0x8c>)
 800536a:	4807      	ldr	r0, [pc, #28]	; (8005388 <URLread_demo+0x80>)
 800536c:	f00c f950 	bl	8011610 <HAL_UART_Transmit>
			}

			flag_R_URL = 0;
 8005370:	4b03      	ldr	r3, [pc, #12]	; (8005380 <URLread_demo+0x78>)
 8005372:	2200      	movs	r2, #0
 8005374:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8005376:	bf00      	nop
 8005378:	f507 77f4 	add.w	r7, r7, #488	; 0x1e8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	200004d4 	.word	0x200004d4
 8005384:	080161e8 	.word	0x080161e8
 8005388:	20002b74 	.word	0x20002b74
 800538c:	08016200 	.word	0x08016200
 8005390:	080161dc 	.word	0x080161dc
 8005394:	20001018 	.word	0x20001018

08005398 <Vcardwrite_demo2>:
/******************************************************************** END **************************************************************/

/************************************* Vcard API ******************************************/

static void Vcardwrite_demo2(void)
{
 8005398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800539a:	f5ad 7d3b 	sub.w	sp, sp, #748	; 0x2ec
 800539e:	af08      	add	r7, sp, #32
	if(flag_Vcard)
 80053a0:	4b7b      	ldr	r3, [pc, #492]	; (8005590 <Vcardwrite_demo2+0x1f8>)
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 80ed 	beq.w	8005584 <Vcardwrite_demo2+0x1ec>
	{
		uint16_t status = ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	f8a7 32c6 	strh.w	r3, [r7, #710]	; 0x2c6
		sVcardInfo VcardStruct;
		sVcardInfo *pVcardStruct;

		pVcardStruct = &VcardStruct;
 80053b0:	f107 030c 	add.w	r3, r7, #12
 80053b4:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0

		memcpy(pVcardStruct->FirstName, FirstName, strlen(FirstName)+1);
 80053b8:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 80053bc:	f103 040a 	add.w	r4, r3, #10
 80053c0:	4874      	ldr	r0, [pc, #464]	; (8005594 <Vcardwrite_demo2+0x1fc>)
 80053c2:	f7fa ff05 	bl	80001d0 <strlen>
 80053c6:	4603      	mov	r3, r0
 80053c8:	3301      	adds	r3, #1
 80053ca:	461a      	mov	r2, r3
 80053cc:	4971      	ldr	r1, [pc, #452]	; (8005594 <Vcardwrite_demo2+0x1fc>)
 80053ce:	4620      	mov	r0, r4
 80053d0:	f00d fd7e 	bl	8012ed0 <memcpy>
		memcpy(pVcardStruct->Title, Title, strlen(Title)+1);
 80053d4:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 80053d8:	f103 045a 	add.w	r4, r3, #90	; 0x5a
 80053dc:	486e      	ldr	r0, [pc, #440]	; (8005598 <Vcardwrite_demo2+0x200>)
 80053de:	f7fa fef7 	bl	80001d0 <strlen>
 80053e2:	4603      	mov	r3, r0
 80053e4:	3301      	adds	r3, #1
 80053e6:	461a      	mov	r2, r3
 80053e8:	496b      	ldr	r1, [pc, #428]	; (8005598 <Vcardwrite_demo2+0x200>)
 80053ea:	4620      	mov	r0, r4
 80053ec:	f00d fd70 	bl	8012ed0 <memcpy>
		memcpy(pVcardStruct->Org, Org, strlen(Org)+1);
 80053f0:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 80053f4:	f103 04aa 	add.w	r4, r3, #170	; 0xaa
 80053f8:	4868      	ldr	r0, [pc, #416]	; (800559c <Vcardwrite_demo2+0x204>)
 80053fa:	f7fa fee9 	bl	80001d0 <strlen>
 80053fe:	4603      	mov	r3, r0
 8005400:	3301      	adds	r3, #1
 8005402:	461a      	mov	r2, r3
 8005404:	4965      	ldr	r1, [pc, #404]	; (800559c <Vcardwrite_demo2+0x204>)
 8005406:	4620      	mov	r0, r4
 8005408:	f00d fd62 	bl	8012ed0 <memcpy>
		memcpy(pVcardStruct->HomeAddress, HomeAddress, strlen(HomeAddress)+1);
 800540c:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8005410:	f103 04fa 	add.w	r4, r3, #250	; 0xfa
 8005414:	4862      	ldr	r0, [pc, #392]	; (80055a0 <Vcardwrite_demo2+0x208>)
 8005416:	f7fa fedb 	bl	80001d0 <strlen>
 800541a:	4603      	mov	r3, r0
 800541c:	3301      	adds	r3, #1
 800541e:	461a      	mov	r2, r3
 8005420:	495f      	ldr	r1, [pc, #380]	; (80055a0 <Vcardwrite_demo2+0x208>)
 8005422:	4620      	mov	r0, r4
 8005424:	f00d fd54 	bl	8012ed0 <memcpy>
		memcpy(pVcardStruct->WorkAddress, WorkAddress, strlen(WorkAddress)+1);
 8005428:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 800542c:	f503 74a5 	add.w	r4, r3, #330	; 0x14a
 8005430:	485c      	ldr	r0, [pc, #368]	; (80055a4 <Vcardwrite_demo2+0x20c>)
 8005432:	f7fa fecd 	bl	80001d0 <strlen>
 8005436:	4603      	mov	r3, r0
 8005438:	3301      	adds	r3, #1
 800543a:	461a      	mov	r2, r3
 800543c:	4959      	ldr	r1, [pc, #356]	; (80055a4 <Vcardwrite_demo2+0x20c>)
 800543e:	4620      	mov	r0, r4
 8005440:	f00d fd46 	bl	8012ed0 <memcpy>
		memcpy(pVcardStruct->HomeTel, HomeTel, strlen(HomeTel)+1);
 8005444:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8005448:	f503 74cd 	add.w	r4, r3, #410	; 0x19a
 800544c:	4856      	ldr	r0, [pc, #344]	; (80055a8 <Vcardwrite_demo2+0x210>)
 800544e:	f7fa febf 	bl	80001d0 <strlen>
 8005452:	4603      	mov	r3, r0
 8005454:	3301      	adds	r3, #1
 8005456:	461a      	mov	r2, r3
 8005458:	4953      	ldr	r1, [pc, #332]	; (80055a8 <Vcardwrite_demo2+0x210>)
 800545a:	4620      	mov	r0, r4
 800545c:	f00d fd38 	bl	8012ed0 <memcpy>
		memcpy(pVcardStruct->WorkTel, WorkTel, strlen(WorkTel)+1);
 8005460:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8005464:	f503 74e1 	add.w	r4, r3, #450	; 0x1c2
 8005468:	4850      	ldr	r0, [pc, #320]	; (80055ac <Vcardwrite_demo2+0x214>)
 800546a:	f7fa feb1 	bl	80001d0 <strlen>
 800546e:	4603      	mov	r3, r0
 8005470:	3301      	adds	r3, #1
 8005472:	461a      	mov	r2, r3
 8005474:	494d      	ldr	r1, [pc, #308]	; (80055ac <Vcardwrite_demo2+0x214>)
 8005476:	4620      	mov	r0, r4
 8005478:	f00d fd2a 	bl	8012ed0 <memcpy>
		memcpy(pVcardStruct->CellTel, CellTel, strlen(CellTel)+1);
 800547c:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8005480:	f503 74f5 	add.w	r4, r3, #490	; 0x1ea
 8005484:	484a      	ldr	r0, [pc, #296]	; (80055b0 <Vcardwrite_demo2+0x218>)
 8005486:	f7fa fea3 	bl	80001d0 <strlen>
 800548a:	4603      	mov	r3, r0
 800548c:	3301      	adds	r3, #1
 800548e:	461a      	mov	r2, r3
 8005490:	4947      	ldr	r1, [pc, #284]	; (80055b0 <Vcardwrite_demo2+0x218>)
 8005492:	4620      	mov	r0, r4
 8005494:	f00d fd1c 	bl	8012ed0 <memcpy>
		memcpy(pVcardStruct->HomeEmail, HomeEmail, strlen(HomeEmail)+1);
 8005498:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 800549c:	f203 2412 	addw	r4, r3, #530	; 0x212
 80054a0:	4844      	ldr	r0, [pc, #272]	; (80055b4 <Vcardwrite_demo2+0x21c>)
 80054a2:	f7fa fe95 	bl	80001d0 <strlen>
 80054a6:	4603      	mov	r3, r0
 80054a8:	3301      	adds	r3, #1
 80054aa:	461a      	mov	r2, r3
 80054ac:	4941      	ldr	r1, [pc, #260]	; (80055b4 <Vcardwrite_demo2+0x21c>)
 80054ae:	4620      	mov	r0, r4
 80054b0:	f00d fd0e 	bl	8012ed0 <memcpy>
		memcpy(pVcardStruct->WorkEmail, WorkEmail, strlen(WorkEmail)+1);
 80054b4:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 80054b8:	f203 2462 	addw	r4, r3, #610	; 0x262
 80054bc:	483e      	ldr	r0, [pc, #248]	; (80055b8 <Vcardwrite_demo2+0x220>)
 80054be:	f7fa fe87 	bl	80001d0 <strlen>
 80054c2:	4603      	mov	r3, r0
 80054c4:	3301      	adds	r3, #1
 80054c6:	461a      	mov	r2, r3
 80054c8:	493b      	ldr	r1, [pc, #236]	; (80055b8 <Vcardwrite_demo2+0x220>)
 80054ca:	4620      	mov	r0, r4
 80054cc:	f00d fd00 	bl	8012ed0 <memcpy>

		HAL_UART_Transmit(&huart1,( uint8_t * )"\033\143 NFC VCARD Write Mode\r",sizeof("\033\143 NFC VCARD Write Mode\r"),10);
 80054d0:	230a      	movs	r3, #10
 80054d2:	2219      	movs	r2, #25
 80054d4:	4939      	ldr	r1, [pc, #228]	; (80055bc <Vcardwrite_demo2+0x224>)
 80054d6:	483a      	ldr	r0, [pc, #232]	; (80055c0 <Vcardwrite_demo2+0x228>)
 80054d8:	f00c f89a 	bl	8011610 <HAL_UART_Transmit>

		status = TT4_WriteVcard ( &VcardStruct );
 80054dc:	f107 030c 	add.w	r3, r7, #12
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7ff fce1 	bl	8004ea8 <TT4_WriteVcard>
 80054e6:	4603      	mov	r3, r0
 80054e8:	f8a7 32c6 	strh.w	r3, [r7, #710]	; 0x2c6

		if(status != SUCCESS)
 80054ec:	f8b7 32c6 	ldrh.w	r3, [r7, #710]	; 0x2c6
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d001      	beq.n	80054f8 <Vcardwrite_demo2+0x160>
		{
			Error_Handler();
 80054f4:	f001 fe1a 	bl	800712c <Error_Handler>
		}
		if(status == SUCCESS)
 80054f8:	f8b7 32c6 	ldrh.w	r3, [r7, #710]	; 0x2c6
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d13e      	bne.n	800557e <Vcardwrite_demo2+0x1e6>
		{
			HAL_UART_Transmit(&huart1,( uint8_t * )"\033\143 NFC VCARD Write Done\r",sizeof("\033\143 NFC VCARD Write Done\r"),10);
 8005500:	230a      	movs	r3, #10
 8005502:	2219      	movs	r2, #25
 8005504:	492f      	ldr	r1, [pc, #188]	; (80055c4 <Vcardwrite_demo2+0x22c>)
 8005506:	482e      	ldr	r0, [pc, #184]	; (80055c0 <Vcardwrite_demo2+0x228>)
 8005508:	f00c f882 	bl	8011610 <HAL_UART_Transmit>
			snprintf(str_Vcard,1000,"Name		: %s \r\nTitle		: %s \r\nOrg		: %s\r\nHomeAddress 	: %s\r\nHomeTel 	: %s\r\nWorkTel 	: %s\r\nCellTel 	: %s\r\nHomeEmai 	: %s\r\nHomeEmai 	: %s\r\n",pVcardStruct->FirstName,pVcardStruct->Title,pVcardStruct->Org,pVcardStruct->HomeAddress,pVcardStruct->HomeTel,pVcardStruct->WorkTel,pVcardStruct->CellTel,pVcardStruct->HomeEmail,pVcardStruct->WorkEmail);
 800550c:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8005510:	f103 0c0a 	add.w	ip, r3, #10
 8005514:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8005518:	335a      	adds	r3, #90	; 0x5a
 800551a:	607b      	str	r3, [r7, #4]
 800551c:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8005520:	32aa      	adds	r2, #170	; 0xaa
 8005522:	f8d7 12c0 	ldr.w	r1, [r7, #704]	; 0x2c0
 8005526:	31fa      	adds	r1, #250	; 0xfa
 8005528:	f8d7 02c0 	ldr.w	r0, [r7, #704]	; 0x2c0
 800552c:	f500 70cd 	add.w	r0, r0, #410	; 0x19a
 8005530:	f8d7 42c0 	ldr.w	r4, [r7, #704]	; 0x2c0
 8005534:	f504 74e1 	add.w	r4, r4, #450	; 0x1c2
 8005538:	f8d7 52c0 	ldr.w	r5, [r7, #704]	; 0x2c0
 800553c:	f505 75f5 	add.w	r5, r5, #490	; 0x1ea
 8005540:	f8d7 62c0 	ldr.w	r6, [r7, #704]	; 0x2c0
 8005544:	f206 2612 	addw	r6, r6, #530	; 0x212
 8005548:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 800554c:	f203 2362 	addw	r3, r3, #610	; 0x262
 8005550:	9307      	str	r3, [sp, #28]
 8005552:	9606      	str	r6, [sp, #24]
 8005554:	9505      	str	r5, [sp, #20]
 8005556:	9404      	str	r4, [sp, #16]
 8005558:	9003      	str	r0, [sp, #12]
 800555a:	9102      	str	r1, [sp, #8]
 800555c:	9201      	str	r2, [sp, #4]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	4663      	mov	r3, ip
 8005564:	4a18      	ldr	r2, [pc, #96]	; (80055c8 <Vcardwrite_demo2+0x230>)
 8005566:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800556a:	4818      	ldr	r0, [pc, #96]	; (80055cc <Vcardwrite_demo2+0x234>)
 800556c:	f00e f9be 	bl	80138ec <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_Vcard,sizeof(str_Vcard),100);
 8005570:	2364      	movs	r3, #100	; 0x64
 8005572:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005576:	4915      	ldr	r1, [pc, #84]	; (80055cc <Vcardwrite_demo2+0x234>)
 8005578:	4811      	ldr	r0, [pc, #68]	; (80055c0 <Vcardwrite_demo2+0x228>)
 800557a:	f00c f849 	bl	8011610 <HAL_UART_Transmit>
		}

		flag_Vcard=0;
 800557e:	4b04      	ldr	r3, [pc, #16]	; (8005590 <Vcardwrite_demo2+0x1f8>)
 8005580:	2200      	movs	r2, #0
 8005582:	701a      	strb	r2, [r3, #0]
	}

}
 8005584:	bf00      	nop
 8005586:	f507 7733 	add.w	r7, r7, #716	; 0x2cc
 800558a:	46bd      	mov	sp, r7
 800558c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800558e:	bf00      	nop
 8005590:	200004d0 	.word	0x200004d0
 8005594:	2000057c 	.word	0x2000057c
 8005598:	2000058c 	.word	0x2000058c
 800559c:	200005a0 	.word	0x200005a0
 80055a0:	20001008 	.word	0x20001008
 80055a4:	200005ac 	.word	0x200005ac
 80055a8:	2000100c 	.word	0x2000100c
 80055ac:	20001010 	.word	0x20001010
 80055b0:	200005c4 	.word	0x200005c4
 80055b4:	20001014 	.word	0x20001014
 80055b8:	200005d4 	.word	0x200005d4
 80055bc:	08016214 	.word	0x08016214
 80055c0:	20002b74 	.word	0x20002b74
 80055c4:	08016230 	.word	0x08016230
 80055c8:	0801624c 	.word	0x0801624c
 80055cc:	20001400 	.word	0x20001400

080055d0 <Vcardread_demo2>:


static void Vcardread_demo2(void)
{
 80055d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055d2:	f5ad 7d3b 	sub.w	sp, sp, #748	; 0x2ec
 80055d6:	af08      	add	r7, sp, #32
	if(flag_R_Vcard)
 80055d8:	4b2e      	ldr	r3, [pc, #184]	; (8005694 <Vcardread_demo2+0xc4>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d054      	beq.n	800568a <Vcardread_demo2+0xba>
	{
		//if(!NFC_check)
		{
			uint16_t status = ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	f8a7 32c6 	strh.w	r3, [r7, #710]	; 0x2c6
			sVcardInfo VcardStruct;
			sVcardInfo *pVcardStruct;

			pVcardStruct = &VcardStruct;
 80055e6:	f107 030c 	add.w	r3, r7, #12
 80055ea:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0

			HAL_UART_Transmit(&huart1,( uint8_t * )"\033\143NFC Vcard Read Mode \r\n",sizeof("\033\143 NFC Vcard Read Mode \r\n"),10);
 80055ee:	230a      	movs	r3, #10
 80055f0:	221a      	movs	r2, #26
 80055f2:	4929      	ldr	r1, [pc, #164]	; (8005698 <Vcardread_demo2+0xc8>)
 80055f4:	4829      	ldr	r0, [pc, #164]	; (800569c <Vcardread_demo2+0xcc>)
 80055f6:	f00c f80b 	bl	8011610 <HAL_UART_Transmit>

			status = TT4_ReadVcard ( &VcardStruct );
 80055fa:	f107 030c 	add.w	r3, r7, #12
 80055fe:	4618      	mov	r0, r3
 8005600:	f7ff fc22 	bl	8004e48 <TT4_ReadVcard>
 8005604:	4603      	mov	r3, r0
 8005606:	f8a7 32c6 	strh.w	r3, [r7, #710]	; 0x2c6

			if(status == SUCCESS)
 800560a:	f8b7 32c6 	ldrh.w	r3, [r7, #710]	; 0x2c6
 800560e:	2b00      	cmp	r3, #0
 8005610:	d138      	bne.n	8005684 <Vcardread_demo2+0xb4>
			{
				snprintf(str_Vcard,1000,"Name		: %s \r\nTitle		: %s \r\nOrg		: %s\r\nHomeAddress 	: %s\r\nHomeTel 	: %s\r\nWorkTel 	: %s\r\nCellTel 	: %s\r\nHomeEmai 	: %s\r\nHomeEmai 	: %s\r\n",pVcardStruct->FirstName,pVcardStruct->Title,pVcardStruct->Org,pVcardStruct->HomeAddress,pVcardStruct->HomeTel,pVcardStruct->WorkTel,pVcardStruct->CellTel,pVcardStruct->HomeEmail,pVcardStruct->WorkEmail);
 8005612:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8005616:	f103 0c0a 	add.w	ip, r3, #10
 800561a:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 800561e:	335a      	adds	r3, #90	; 0x5a
 8005620:	607b      	str	r3, [r7, #4]
 8005622:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8005626:	32aa      	adds	r2, #170	; 0xaa
 8005628:	f8d7 12c0 	ldr.w	r1, [r7, #704]	; 0x2c0
 800562c:	31fa      	adds	r1, #250	; 0xfa
 800562e:	f8d7 02c0 	ldr.w	r0, [r7, #704]	; 0x2c0
 8005632:	f500 70cd 	add.w	r0, r0, #410	; 0x19a
 8005636:	f8d7 42c0 	ldr.w	r4, [r7, #704]	; 0x2c0
 800563a:	f504 74e1 	add.w	r4, r4, #450	; 0x1c2
 800563e:	f8d7 52c0 	ldr.w	r5, [r7, #704]	; 0x2c0
 8005642:	f505 75f5 	add.w	r5, r5, #490	; 0x1ea
 8005646:	f8d7 62c0 	ldr.w	r6, [r7, #704]	; 0x2c0
 800564a:	f206 2612 	addw	r6, r6, #530	; 0x212
 800564e:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8005652:	f203 2362 	addw	r3, r3, #610	; 0x262
 8005656:	9307      	str	r3, [sp, #28]
 8005658:	9606      	str	r6, [sp, #24]
 800565a:	9505      	str	r5, [sp, #20]
 800565c:	9404      	str	r4, [sp, #16]
 800565e:	9003      	str	r0, [sp, #12]
 8005660:	9102      	str	r1, [sp, #8]
 8005662:	9201      	str	r2, [sp, #4]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	4663      	mov	r3, ip
 800566a:	4a0d      	ldr	r2, [pc, #52]	; (80056a0 <Vcardread_demo2+0xd0>)
 800566c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005670:	480c      	ldr	r0, [pc, #48]	; (80056a4 <Vcardread_demo2+0xd4>)
 8005672:	f00e f93b 	bl	80138ec <sniprintf>
				HAL_UART_Transmit(&huart1,( uint8_t * )str_Vcard,sizeof(str_Vcard),100);
 8005676:	2364      	movs	r3, #100	; 0x64
 8005678:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800567c:	4909      	ldr	r1, [pc, #36]	; (80056a4 <Vcardread_demo2+0xd4>)
 800567e:	4807      	ldr	r0, [pc, #28]	; (800569c <Vcardread_demo2+0xcc>)
 8005680:	f00b ffc6 	bl	8011610 <HAL_UART_Transmit>
			}

			flag_R_Vcard = 0;
 8005684:	4b03      	ldr	r3, [pc, #12]	; (8005694 <Vcardread_demo2+0xc4>)
 8005686:	2200      	movs	r2, #0
 8005688:	701a      	strb	r2, [r3, #0]
		}
	}

}
 800568a:	bf00      	nop
 800568c:	f507 7733 	add.w	r7, r7, #716	; 0x2cc
 8005690:	46bd      	mov	sp, r7
 8005692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005694:	200004d1 	.word	0x200004d1
 8005698:	080162d4 	.word	0x080162d4
 800569c:	20002b74 	.word	0x20002b74
 80056a0:	0801624c 	.word	0x0801624c
 80056a4:	20001400 	.word	0x20001400

080056a8 <SMSwrite_demo>:

/******************************************************************** END **************************************************************/

/************************************* SMS API ******************************************/
static void SMSwrite_demo(void)
{
 80056a8:	b590      	push	{r4, r7, lr}
 80056aa:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
 80056ae:	af02      	add	r7, sp, #8
	if(flag_sms)
 80056b0:	4b34      	ldr	r3, [pc, #208]	; (8005784 <SMSwrite_demo+0xdc>)
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d060      	beq.n	800577a <SMSwrite_demo+0xd2>
	{
		uint16_t status = ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	f8a7 3336 	strh.w	r3, [r7, #822]	; 0x336
		sSMSInfo SMSStruct;
		sSMSInfo *pSMSStruct;

		pSMSStruct = &SMSStruct;
 80056be:	463b      	mov	r3, r7
 80056c0:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
		HAL_UART_Transmit(&huart1,( uint8_t * )"\033\143 NFC SMS Write Mode\r",sizeof("\033\143 NFC SMS Read Mode\r"),10);
 80056c4:	230a      	movs	r3, #10
 80056c6:	2216      	movs	r2, #22
 80056c8:	492f      	ldr	r1, [pc, #188]	; (8005788 <SMSwrite_demo+0xe0>)
 80056ca:	4830      	ldr	r0, [pc, #192]	; (800578c <SMSwrite_demo+0xe4>)
 80056cc:	f00b ffa0 	bl	8011610 <HAL_UART_Transmit>

		memcpy(pSMSStruct->PhoneNumber, PhoneNumber, strlen(PhoneNumber)+1);
 80056d0:	f8d7 4330 	ldr.w	r4, [r7, #816]	; 0x330
 80056d4:	482e      	ldr	r0, [pc, #184]	; (8005790 <SMSwrite_demo+0xe8>)
 80056d6:	f7fa fd7b 	bl	80001d0 <strlen>
 80056da:	4603      	mov	r3, r0
 80056dc:	3301      	adds	r3, #1
 80056de:	461a      	mov	r2, r3
 80056e0:	492b      	ldr	r1, [pc, #172]	; (8005790 <SMSwrite_demo+0xe8>)
 80056e2:	4620      	mov	r0, r4
 80056e4:	f00d fbf4 	bl	8012ed0 <memcpy>
		memcpy(pSMSStruct->Message, Message, strlen(Message)+1);
 80056e8:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 80056ec:	f103 0410 	add.w	r4, r3, #16
 80056f0:	4828      	ldr	r0, [pc, #160]	; (8005794 <SMSwrite_demo+0xec>)
 80056f2:	f7fa fd6d 	bl	80001d0 <strlen>
 80056f6:	4603      	mov	r3, r0
 80056f8:	3301      	adds	r3, #1
 80056fa:	461a      	mov	r2, r3
 80056fc:	4925      	ldr	r1, [pc, #148]	; (8005794 <SMSwrite_demo+0xec>)
 80056fe:	4620      	mov	r0, r4
 8005700:	f00d fbe6 	bl	8012ed0 <memcpy>
		memcpy(pSMSStruct->Information, Instruction, strlen(Instruction)+1);
 8005704:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8005708:	f503 74d0 	add.w	r4, r3, #416	; 0x1a0
 800570c:	4822      	ldr	r0, [pc, #136]	; (8005798 <SMSwrite_demo+0xf0>)
 800570e:	f7fa fd5f 	bl	80001d0 <strlen>
 8005712:	4603      	mov	r3, r0
 8005714:	3301      	adds	r3, #1
 8005716:	461a      	mov	r2, r3
 8005718:	491f      	ldr	r1, [pc, #124]	; (8005798 <SMSwrite_demo+0xf0>)
 800571a:	4620      	mov	r0, r4
 800571c:	f00d fbd8 	bl	8012ed0 <memcpy>

		status = TT4_WriteSMS ( pSMSStruct );
 8005720:	f8d7 0330 	ldr.w	r0, [r7, #816]	; 0x330
 8005724:	f7ff fb1c 	bl	8004d60 <TT4_WriteSMS>
 8005728:	4603      	mov	r3, r0
 800572a:	f8a7 3336 	strh.w	r3, [r7, #822]	; 0x336

		if(status == SUCCESS)
 800572e:	f8b7 3336 	ldrh.w	r3, [r7, #822]	; 0x336
 8005732:	2b00      	cmp	r3, #0
 8005734:	d11e      	bne.n	8005774 <SMSwrite_demo+0xcc>
		{
			HAL_UART_Transmit(&huart1,( uint8_t * )"\033\143 NFC SMS Read Done\r\n",sizeof("\033\143 NFC SMS Read Done\r\n"),10);
 8005736:	230a      	movs	r3, #10
 8005738:	2217      	movs	r2, #23
 800573a:	4918      	ldr	r1, [pc, #96]	; (800579c <SMSwrite_demo+0xf4>)
 800573c:	4813      	ldr	r0, [pc, #76]	; (800578c <SMSwrite_demo+0xe4>)
 800573e:	f00b ff67 	bl	8011610 <HAL_UART_Transmit>
			snprintf(str_sms,1000,"PhoneNumber 	:  %s \r\nMessage 		:  %s \r\nInformation 	: %s\r\n",pSMSStruct->PhoneNumber,pSMSStruct->Message,pSMSStruct->Information);
 8005742:	f8d7 1330 	ldr.w	r1, [r7, #816]	; 0x330
 8005746:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 800574a:	3310      	adds	r3, #16
 800574c:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 8005750:	f502 72d0 	add.w	r2, r2, #416	; 0x1a0
 8005754:	9201      	str	r2, [sp, #4]
 8005756:	9300      	str	r3, [sp, #0]
 8005758:	460b      	mov	r3, r1
 800575a:	4a11      	ldr	r2, [pc, #68]	; (80057a0 <SMSwrite_demo+0xf8>)
 800575c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005760:	4810      	ldr	r0, [pc, #64]	; (80057a4 <SMSwrite_demo+0xfc>)
 8005762:	f00e f8c3 	bl	80138ec <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_sms,sizeof(str_sms),100);
 8005766:	2364      	movs	r3, #100	; 0x64
 8005768:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800576c:	490d      	ldr	r1, [pc, #52]	; (80057a4 <SMSwrite_demo+0xfc>)
 800576e:	4807      	ldr	r0, [pc, #28]	; (800578c <SMSwrite_demo+0xe4>)
 8005770:	f00b ff4e 	bl	8011610 <HAL_UART_Transmit>
		}

		flag_R_sms = 0;
 8005774:	4b0c      	ldr	r3, [pc, #48]	; (80057a8 <SMSwrite_demo+0x100>)
 8005776:	2200      	movs	r2, #0
 8005778:	701a      	strb	r2, [r3, #0]
	}
}
 800577a:	bf00      	nop
 800577c:	f507 774f 	add.w	r7, r7, #828	; 0x33c
 8005780:	46bd      	mov	sp, r7
 8005782:	bd90      	pop	{r4, r7, pc}
 8005784:	200004d5 	.word	0x200004d5
 8005788:	080162f0 	.word	0x080162f0
 800578c:	20002b74 	.word	0x20002b74
 8005790:	20000530 	.word	0x20000530
 8005794:	2000053c 	.word	0x2000053c
 8005798:	20000550 	.word	0x20000550
 800579c:	08016308 	.word	0x08016308
 80057a0:	08016320 	.word	0x08016320
 80057a4:	200017e8 	.word	0x200017e8
 80057a8:	200004d7 	.word	0x200004d7

080057ac <SMSread_demo>:

static void SMSread_demo(void)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	f5ad 7d50 	sub.w	sp, sp, #832	; 0x340
 80057b2:	af02      	add	r7, sp, #8
	if(flag_R_sms)
 80057b4:	4b20      	ldr	r3, [pc, #128]	; (8005838 <SMSread_demo+0x8c>)
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d038      	beq.n	800582e <SMSread_demo+0x82>
	{
		uint16_t status = ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	f8a7 3336 	strh.w	r3, [r7, #822]	; 0x336
		sSMSInfo SMSStruct;
		sSMSInfo *pSMSStruct;

		pSMSStruct = &SMSStruct;
 80057c2:	463b      	mov	r3, r7
 80057c4:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
		HAL_UART_Transmit(&huart1,( uint8_t * )"\033\143 NFC SMS Read Mode\r\n",sizeof("\033\143 NFC SMS Read Mode\r\n"),10);
 80057c8:	230a      	movs	r3, #10
 80057ca:	2217      	movs	r2, #23
 80057cc:	491b      	ldr	r1, [pc, #108]	; (800583c <SMSread_demo+0x90>)
 80057ce:	481c      	ldr	r0, [pc, #112]	; (8005840 <SMSread_demo+0x94>)
 80057d0:	f00b ff1e 	bl	8011610 <HAL_UART_Transmit>
		status = TT4_ReadSMS ( pSMSStruct );
 80057d4:	f8d7 0330 	ldr.w	r0, [r7, #816]	; 0x330
 80057d8:	f7ff fa92 	bl	8004d00 <TT4_ReadSMS>
 80057dc:	4603      	mov	r3, r0
 80057de:	f8a7 3336 	strh.w	r3, [r7, #822]	; 0x336

		if(status == SUCCESS)
 80057e2:	f8b7 3336 	ldrh.w	r3, [r7, #822]	; 0x336
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d11e      	bne.n	8005828 <SMSread_demo+0x7c>
		{
			HAL_UART_Transmit(&huart1,( uint8_t * )"\033\143 NFC SMS Read Done\r\n",sizeof("\033\143 NFC SMS Read Done\r\n"),10);
 80057ea:	230a      	movs	r3, #10
 80057ec:	2217      	movs	r2, #23
 80057ee:	4915      	ldr	r1, [pc, #84]	; (8005844 <SMSread_demo+0x98>)
 80057f0:	4813      	ldr	r0, [pc, #76]	; (8005840 <SMSread_demo+0x94>)
 80057f2:	f00b ff0d 	bl	8011610 <HAL_UART_Transmit>
			snprintf(str_sms,1000,"PhoneNumber 	:  %s \r\nMessage 		:  %s \r\nInformation 	: %s\r\n",pSMSStruct->PhoneNumber,pSMSStruct->Message,pSMSStruct->Information);
 80057f6:	f8d7 1330 	ldr.w	r1, [r7, #816]	; 0x330
 80057fa:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 80057fe:	3310      	adds	r3, #16
 8005800:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 8005804:	f502 72d0 	add.w	r2, r2, #416	; 0x1a0
 8005808:	9201      	str	r2, [sp, #4]
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	460b      	mov	r3, r1
 800580e:	4a0e      	ldr	r2, [pc, #56]	; (8005848 <SMSread_demo+0x9c>)
 8005810:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005814:	480d      	ldr	r0, [pc, #52]	; (800584c <SMSread_demo+0xa0>)
 8005816:	f00e f869 	bl	80138ec <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_sms,sizeof(str_sms),100);
 800581a:	2364      	movs	r3, #100	; 0x64
 800581c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005820:	490a      	ldr	r1, [pc, #40]	; (800584c <SMSread_demo+0xa0>)
 8005822:	4807      	ldr	r0, [pc, #28]	; (8005840 <SMSread_demo+0x94>)
 8005824:	f00b fef4 	bl	8011610 <HAL_UART_Transmit>
		}

		flag_R_sms = 0;
 8005828:	4b03      	ldr	r3, [pc, #12]	; (8005838 <SMSread_demo+0x8c>)
 800582a:	2200      	movs	r2, #0
 800582c:	701a      	strb	r2, [r3, #0]
	}

}
 800582e:	bf00      	nop
 8005830:	f507 774e 	add.w	r7, r7, #824	; 0x338
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	200004d7 	.word	0x200004d7
 800583c:	0801635c 	.word	0x0801635c
 8005840:	20002b74 	.word	0x20002b74
 8005844:	08016308 	.word	0x08016308
 8005848:	08016320 	.word	0x08016320
 800584c:	200017e8 	.word	0x200017e8

08005850 <AARwrite_demo>:
/******************************************************************** END **************************************************************/
/***************************** Android Application Record *******************************/
static void AARwrite_demo(void)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b098      	sub	sp, #96	; 0x60
 8005854:	af00      	add	r7, sp, #0
	if(flag_aar)
 8005856:	4b18      	ldr	r3, [pc, #96]	; (80058b8 <AARwrite_demo+0x68>)
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d027      	beq.n	80058ae <AARwrite_demo+0x5e>
	{
		uint16_t status = ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
		uint8_t NULL_NDEF[2] = {0,0};
 8005864:	2300      	movs	r3, #0
 8005866:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		sAARInfo AAR_struct;
		sAARInfo *pAAR;

		pAAR = &AAR_struct;
 800586a:	1d3b      	adds	r3, r7, #4
 800586c:	65bb      	str	r3, [r7, #88]	; 0x58
		HAL_UART_Transmit(&huart1,( uint8_t * )"\033\143 NFC AAR Write Mode\r\n",sizeof("\033\143 NFC AAR Read Mode\r\n"),10);
 800586e:	230a      	movs	r3, #10
 8005870:	2217      	movs	r2, #23
 8005872:	4912      	ldr	r1, [pc, #72]	; (80058bc <AARwrite_demo+0x6c>)
 8005874:	4812      	ldr	r0, [pc, #72]	; (80058c0 <AARwrite_demo+0x70>)
 8005876:	f00b fecb 	bl	8011610 <HAL_UART_Transmit>
		TT4_WriteNDEF(NULL_NDEF);
 800587a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800587e:	4618      	mov	r0, r3
 8005880:	f7ff f9ca 	bl	8004c18 <TT4_WriteNDEF>
		memcpy(pAAR->PakageName, "com.stm.bluetoothlevalidation", strlen("com.stm.bluetoothlevalidation")+1);
 8005884:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005886:	221e      	movs	r2, #30
 8005888:	490e      	ldr	r1, [pc, #56]	; (80058c4 <AARwrite_demo+0x74>)
 800588a:	4618      	mov	r0, r3
 800588c:	f00d fb20 	bl	8012ed0 <memcpy>

		status = TT4_AddAAR(pAAR);
 8005890:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005892:	f7ff fb2b 	bl	8004eec <TT4_AddAAR>
 8005896:	4603      	mov	r3, r0
 8005898:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

		if(status != SUCCESS)
 800589c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d001      	beq.n	80058a8 <AARwrite_demo+0x58>
		{
			Error_Handler();
 80058a4:	f001 fc42 	bl	800712c <Error_Handler>
		}
		flag_aar = 0;
 80058a8:	4b03      	ldr	r3, [pc, #12]	; (80058b8 <AARwrite_demo+0x68>)
 80058aa:	2200      	movs	r2, #0
 80058ac:	701a      	strb	r2, [r3, #0]
	}

}
 80058ae:	bf00      	nop
 80058b0:	3760      	adds	r7, #96	; 0x60
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	200004d2 	.word	0x200004d2
 80058bc:	08016374 	.word	0x08016374
 80058c0:	20002b74 	.word	0x20002b74
 80058c4:	0801638c 	.word	0x0801638c

080058c8 <Proximity_Test>:
/******************************************************************** END **************************************************************/

/********************************** Test of VL53L0X proximity sensor *********************************************************************/

void Proximity_Test(void)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	af00      	add	r7, sp, #0
	if(flag_pro)
 80058cc:	4b10      	ldr	r3, [pc, #64]	; (8005910 <Proximity_Test+0x48>)
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d01a      	beq.n	800590a <Proximity_Test+0x42>
	{
		prox_value = VL53L0X_PROXIMITY_GetDistance();
 80058d4:	f000 f87e 	bl	80059d4 <VL53L0X_PROXIMITY_GetDistance>
 80058d8:	4603      	mov	r3, r0
 80058da:	461a      	mov	r2, r3
 80058dc:	4b0d      	ldr	r3, [pc, #52]	; (8005914 <Proximity_Test+0x4c>)
 80058de:	801a      	strh	r2, [r3, #0]
		snprintf(str_pro,100," \033\143 Distance = %d mm\r", prox_value);
 80058e0:	4b0c      	ldr	r3, [pc, #48]	; (8005914 <Proximity_Test+0x4c>)
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	4a0c      	ldr	r2, [pc, #48]	; (8005918 <Proximity_Test+0x50>)
 80058e6:	2164      	movs	r1, #100	; 0x64
 80058e8:	480c      	ldr	r0, [pc, #48]	; (800591c <Proximity_Test+0x54>)
 80058ea:	f00d ffff 	bl	80138ec <sniprintf>
		HAL_UART_Transmit(&huart1,( uint8_t * )str_pro,sizeof(str_pro),10);
 80058ee:	230a      	movs	r3, #10
 80058f0:	2264      	movs	r2, #100	; 0x64
 80058f2:	490a      	ldr	r1, [pc, #40]	; (800591c <Proximity_Test+0x54>)
 80058f4:	480a      	ldr	r0, [pc, #40]	; (8005920 <Proximity_Test+0x58>)
 80058f6:	f00b fe8b 	bl	8011610 <HAL_UART_Transmit>
		memset(str_pro, 0, sizeof(str_pro));
 80058fa:	2264      	movs	r2, #100	; 0x64
 80058fc:	2100      	movs	r1, #0
 80058fe:	4807      	ldr	r0, [pc, #28]	; (800591c <Proximity_Test+0x54>)
 8005900:	f00d faf4 	bl	8012eec <memset>
		flag_pro=0;
 8005904:	4b02      	ldr	r3, [pc, #8]	; (8005910 <Proximity_Test+0x48>)
 8005906:	2200      	movs	r2, #0
 8005908:	701a      	strb	r2, [r3, #0]
	}

}
 800590a:	bf00      	nop
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	200004cd 	.word	0x200004cd
 8005914:	20000fa0 	.word	0x20000fa0
 8005918:	080163ac 	.word	0x080163ac
 800591c:	20000fa4 	.word	0x20000fa4
 8005920:	20002b74 	.word	0x20002b74

08005924 <VL53L0X_PROXIMITY_Init>:

/**
  * @brief  VL53L0X proximity sensor Initialization.
  */
static void VL53L0X_PROXIMITY_Init(void)
{
 8005924:	b590      	push	{r4, r7, lr}
 8005926:	b0f9      	sub	sp, #484	; 0x1e4
 8005928:	af5e      	add	r7, sp, #376	; 0x178
  uint16_t vl53l0x_id = 0;
 800592a:	2300      	movs	r3, #0
 800592c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  VL53L0X_DeviceInfo_t VL53L0X_DeviceInfo;

  /* Initialize IO interface */
  SENSOR_IO_Init();
 8005930:	f001 ffcc 	bl	80078cc <SENSOR_IO_Init>
  VL53L0X_PROXIMITY_MspInit();
 8005934:	f000 f85e 	bl	80059f4 <VL53L0X_PROXIMITY_MspInit>

  memset(&VL53L0X_DeviceInfo, 0, sizeof(VL53L0X_DeviceInfo_t));
 8005938:	463b      	mov	r3, r7
 800593a:	2263      	movs	r2, #99	; 0x63
 800593c:	2100      	movs	r1, #0
 800593e:	4618      	mov	r0, r3
 8005940:	f00d fad4 	bl	8012eec <memset>

  if (VL53L0X_ERROR_NONE == VL53L0X_GetDeviceInfo(&Dev, &VL53L0X_DeviceInfo))
 8005944:	463b      	mov	r3, r7
 8005946:	4619      	mov	r1, r3
 8005948:	481e      	ldr	r0, [pc, #120]	; (80059c4 <VL53L0X_PROXIMITY_Init+0xa0>)
 800594a:	f002 fa8d 	bl	8007e68 <VL53L0X_GetDeviceInfo>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d12f      	bne.n	80059b4 <VL53L0X_PROXIMITY_Init+0x90>
  {
    if (VL53L0X_ERROR_NONE == VL53L0X_RdWord(&Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, (uint16_t *) &vl53l0x_id))
 8005954:	f107 0366 	add.w	r3, r7, #102	; 0x66
 8005958:	461a      	mov	r2, r3
 800595a:	21c0      	movs	r1, #192	; 0xc0
 800595c:	4819      	ldr	r0, [pc, #100]	; (80059c4 <VL53L0X_PROXIMITY_Init+0xa0>)
 800595e:	f007 f9af 	bl	800ccc0 <VL53L0X_RdWord>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d121      	bne.n	80059ac <VL53L0X_PROXIMITY_Init+0x88>
    {
      if (vl53l0x_id == VL53L0X_ID)
 8005968:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800596c:	f64e 62aa 	movw	r2, #61098	; 0xeeaa
 8005970:	4293      	cmp	r3, r2
 8005972:	d122      	bne.n	80059ba <VL53L0X_PROXIMITY_Init+0x96>
      {
        if (VL53L0X_ERROR_NONE == VL53L0X_DataInit(&Dev))
 8005974:	4813      	ldr	r0, [pc, #76]	; (80059c4 <VL53L0X_PROXIMITY_Init+0xa0>)
 8005976:	f002 fa9d 	bl	8007eb4 <VL53L0X_DataInit>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d111      	bne.n	80059a4 <VL53L0X_PROXIMITY_Init+0x80>
        {
          Dev.Present = 1;
 8005980:	4b10      	ldr	r3, [pc, #64]	; (80059c4 <VL53L0X_PROXIMITY_Init+0xa0>)
 8005982:	2201      	movs	r2, #1
 8005984:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
          SetupSingleShot(Dev);
 8005988:	4c0e      	ldr	r4, [pc, #56]	; (80059c4 <VL53L0X_PROXIMITY_Init+0xa0>)
 800598a:	4668      	mov	r0, sp
 800598c:	f104 0310 	add.w	r3, r4, #16
 8005990:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8005994:	4619      	mov	r1, r3
 8005996:	f00d fa9b 	bl	8012ed0 <memcpy>
 800599a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800599e:	f007 fa95 	bl	800cecc <SetupSingleShot>
  }
  else
  {
    printf("VL53L0X Time of Flight Failed to get infos!\n");
  }
}
 80059a2:	e00a      	b.n	80059ba <VL53L0X_PROXIMITY_Init+0x96>
          printf("VL53L0X Time of Flight Failed to send its ID!\n");
 80059a4:	4808      	ldr	r0, [pc, #32]	; (80059c8 <VL53L0X_PROXIMITY_Init+0xa4>)
 80059a6:	f00d ff99 	bl	80138dc <puts>
}
 80059aa:	e006      	b.n	80059ba <VL53L0X_PROXIMITY_Init+0x96>
      printf("VL53L0X Time of Flight Failed to Initialize!\n");
 80059ac:	4807      	ldr	r0, [pc, #28]	; (80059cc <VL53L0X_PROXIMITY_Init+0xa8>)
 80059ae:	f00d ff95 	bl	80138dc <puts>
}
 80059b2:	e002      	b.n	80059ba <VL53L0X_PROXIMITY_Init+0x96>
    printf("VL53L0X Time of Flight Failed to get infos!\n");
 80059b4:	4806      	ldr	r0, [pc, #24]	; (80059d0 <VL53L0X_PROXIMITY_Init+0xac>)
 80059b6:	f00d ff91 	bl	80138dc <puts>
}
 80059ba:	bf00      	nop
 80059bc:	376c      	adds	r7, #108	; 0x6c
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd90      	pop	{r4, r7, pc}
 80059c2:	bf00      	nop
 80059c4:	20000018 	.word	0x20000018
 80059c8:	080163c4 	.word	0x080163c4
 80059cc:	080163f4 	.word	0x080163f4
 80059d0:	08016424 	.word	0x08016424

080059d4 <VL53L0X_PROXIMITY_GetDistance>:
/**
  * @brief  Get distance from VL53L0X proximity sensor.
  * @retval Distance in mm
  */
static uint16_t VL53L0X_PROXIMITY_GetDistance(void)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b088      	sub	sp, #32
 80059d8:	af00      	add	r7, sp, #0
  VL53L0X_RangingMeasurementData_t RangingMeasurementData;

  VL53L0X_PerformSingleRangingMeasurement(&Dev, &RangingMeasurementData);
 80059da:	1d3b      	adds	r3, r7, #4
 80059dc:	4619      	mov	r1, r3
 80059de:	4804      	ldr	r0, [pc, #16]	; (80059f0 <VL53L0X_PROXIMITY_GetDistance+0x1c>)
 80059e0:	f003 fcb2 	bl	8009348 <VL53L0X_PerformSingleRangingMeasurement>

  return RangingMeasurementData.RangeMilliMeter;
 80059e4:	89bb      	ldrh	r3, [r7, #12]
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3720      	adds	r7, #32
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	20000018 	.word	0x20000018

080059f4 <VL53L0X_PROXIMITY_MspInit>:

/**
  * @brief  VL53L0X proximity sensor Msp Initialization.
  */
static void VL53L0X_PROXIMITY_MspInit(void)
{/*
 80059f4:	b580      	push	{r7, lr}
 80059f6:	af00      	add	r7, sp, #0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
*/

  HAL_GPIO_WritePin(VL53L0X_XSHUT_GPIO_Port, VL53L0X_XSHUT_Pin, GPIO_PIN_SET);
 80059f8:	2201      	movs	r2, #1
 80059fa:	2140      	movs	r1, #64	; 0x40
 80059fc:	4804      	ldr	r0, [pc, #16]	; (8005a10 <VL53L0X_PROXIMITY_MspInit+0x1c>)
 80059fe:	f008 fda5 	bl	800e54c <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8005a02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a06:	f008 f937 	bl	800dc78 <HAL_Delay>

}
 8005a0a:	bf00      	nop
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	48000800 	.word	0x48000800

08005a14 <f_Temperature>:
/******************************************************************** END **************************************************************/
/************************************** This function use for extracting Temperature data **********************************************/
void f_Temperature(void)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af02      	add	r7, sp, #8

	if(flag_temp)
 8005a1a:	4b20      	ldr	r3, [pc, #128]	; (8005a9c <f_Temperature+0x88>)
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d038      	beq.n	8005a94 <f_Temperature+0x80>
	{

		if(BSP_TSENSOR_Init())
 8005a22:	f002 f9f7 	bl	8007e14 <BSP_TSENSOR_Init>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d010      	beq.n	8005a4e <f_Temperature+0x3a>
		{
			snprintf(str_tmp,100,"\033\143 Not Taking TEMPERATURE Data\r");
 8005a2c:	4a1c      	ldr	r2, [pc, #112]	; (8005aa0 <f_Temperature+0x8c>)
 8005a2e:	2164      	movs	r1, #100	; 0x64
 8005a30:	481c      	ldr	r0, [pc, #112]	; (8005aa4 <f_Temperature+0x90>)
 8005a32:	f00d ff5b 	bl	80138ec <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp,sizeof(str_tmp),10);
 8005a36:	230a      	movs	r3, #10
 8005a38:	2264      	movs	r2, #100	; 0x64
 8005a3a:	491a      	ldr	r1, [pc, #104]	; (8005aa4 <f_Temperature+0x90>)
 8005a3c:	481a      	ldr	r0, [pc, #104]	; (8005aa8 <f_Temperature+0x94>)
 8005a3e:	f00b fde7 	bl	8011610 <HAL_UART_Transmit>
			memset(str_tmp, 0, sizeof(str_tmp));
 8005a42:	2264      	movs	r2, #100	; 0x64
 8005a44:	2100      	movs	r1, #0
 8005a46:	4817      	ldr	r0, [pc, #92]	; (8005aa4 <f_Temperature+0x90>)
 8005a48:	f00d fa50 	bl	8012eec <memset>
			memset(str_tmp, 0, sizeof(str_tmp));
			flag_temp=0;
		}
	}

}
 8005a4c:	e022      	b.n	8005a94 <f_Temperature+0x80>
			temp_value = BSP_TSENSOR_ReadTemp();
 8005a4e:	f002 f9fd 	bl	8007e4c <BSP_TSENSOR_ReadTemp>
 8005a52:	eef0 7a40 	vmov.f32	s15, s0
 8005a56:	4b15      	ldr	r3, [pc, #84]	; (8005aac <f_Temperature+0x98>)
 8005a58:	edc3 7a00 	vstr	s15, [r3]
			snprintf(str_tmp,100," \033\143 TEMPERATURE = %.2f \r", temp_value);
 8005a5c:	4b13      	ldr	r3, [pc, #76]	; (8005aac <f_Temperature+0x98>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7fa fd71 	bl	8000548 <__aeabi_f2d>
 8005a66:	4602      	mov	r2, r0
 8005a68:	460b      	mov	r3, r1
 8005a6a:	e9cd 2300 	strd	r2, r3, [sp]
 8005a6e:	4a10      	ldr	r2, [pc, #64]	; (8005ab0 <f_Temperature+0x9c>)
 8005a70:	2164      	movs	r1, #100	; 0x64
 8005a72:	480c      	ldr	r0, [pc, #48]	; (8005aa4 <f_Temperature+0x90>)
 8005a74:	f00d ff3a 	bl	80138ec <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp,sizeof(str_tmp),10);
 8005a78:	230a      	movs	r3, #10
 8005a7a:	2264      	movs	r2, #100	; 0x64
 8005a7c:	4909      	ldr	r1, [pc, #36]	; (8005aa4 <f_Temperature+0x90>)
 8005a7e:	480a      	ldr	r0, [pc, #40]	; (8005aa8 <f_Temperature+0x94>)
 8005a80:	f00b fdc6 	bl	8011610 <HAL_UART_Transmit>
			memset(str_tmp, 0, sizeof(str_tmp));
 8005a84:	2264      	movs	r2, #100	; 0x64
 8005a86:	2100      	movs	r1, #0
 8005a88:	4806      	ldr	r0, [pc, #24]	; (8005aa4 <f_Temperature+0x90>)
 8005a8a:	f00d fa2f 	bl	8012eec <memset>
			flag_temp=0;
 8005a8e:	4b03      	ldr	r3, [pc, #12]	; (8005a9c <f_Temperature+0x88>)
 8005a90:	2200      	movs	r2, #0
 8005a92:	701a      	strb	r2, [r3, #0]
}
 8005a94:	bf00      	nop
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	200004c7 	.word	0x200004c7
 8005aa0:	08016450 	.word	0x08016450
 8005aa4:	20000d88 	.word	0x20000d88
 8005aa8:	20002b74 	.word	0x20002b74
 8005aac:	20000d7c 	.word	0x20000d7c
 8005ab0:	08016470 	.word	0x08016470

08005ab4 <f_Humidity>:
/*********************************************************** END **************************************************************************/

/*This function use for extracting Humidity data */
void f_Humidity(void)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af02      	add	r7, sp, #8
	if(flag_humi)
 8005aba:	4b20      	ldr	r3, [pc, #128]	; (8005b3c <f_Humidity+0x88>)
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d038      	beq.n	8005b34 <f_Humidity+0x80>
	{
		if(BSP_HSENSOR_Init())
 8005ac2:	f002 f907 	bl	8007cd4 <BSP_HSENSOR_Init>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d010      	beq.n	8005aee <f_Humidity+0x3a>
		{
			snprintf(str_humi,100,"\033\143 Not Taking HUMIDITY Data \r");
 8005acc:	4a1c      	ldr	r2, [pc, #112]	; (8005b40 <f_Humidity+0x8c>)
 8005ace:	2164      	movs	r1, #100	; 0x64
 8005ad0:	481c      	ldr	r0, [pc, #112]	; (8005b44 <f_Humidity+0x90>)
 8005ad2:	f00d ff0b 	bl	80138ec <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_humi,sizeof(str_humi),10);
 8005ad6:	230a      	movs	r3, #10
 8005ad8:	2264      	movs	r2, #100	; 0x64
 8005ada:	491a      	ldr	r1, [pc, #104]	; (8005b44 <f_Humidity+0x90>)
 8005adc:	481a      	ldr	r0, [pc, #104]	; (8005b48 <f_Humidity+0x94>)
 8005ade:	f00b fd97 	bl	8011610 <HAL_UART_Transmit>
			memset(str_humi, 0, sizeof(str_humi));
 8005ae2:	2264      	movs	r2, #100	; 0x64
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	4817      	ldr	r0, [pc, #92]	; (8005b44 <f_Humidity+0x90>)
 8005ae8:	f00d fa00 	bl	8012eec <memset>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_humi,sizeof(str_humi),10);
			memset(str_humi, 0, sizeof(str_humi));
			flag_humi=0;
		}
	}
}
 8005aec:	e022      	b.n	8005b34 <f_Humidity+0x80>
			humi_value = BSP_HSENSOR_ReadHumidity();
 8005aee:	f002 f911 	bl	8007d14 <BSP_HSENSOR_ReadHumidity>
 8005af2:	eef0 7a40 	vmov.f32	s15, s0
 8005af6:	4b15      	ldr	r3, [pc, #84]	; (8005b4c <f_Humidity+0x98>)
 8005af8:	edc3 7a00 	vstr	s15, [r3]
			snprintf(str_humi,100,"\033\143 HUMIDITY = %.2f \r", humi_value);
 8005afc:	4b13      	ldr	r3, [pc, #76]	; (8005b4c <f_Humidity+0x98>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7fa fd21 	bl	8000548 <__aeabi_f2d>
 8005b06:	4602      	mov	r2, r0
 8005b08:	460b      	mov	r3, r1
 8005b0a:	e9cd 2300 	strd	r2, r3, [sp]
 8005b0e:	4a10      	ldr	r2, [pc, #64]	; (8005b50 <f_Humidity+0x9c>)
 8005b10:	2164      	movs	r1, #100	; 0x64
 8005b12:	480c      	ldr	r0, [pc, #48]	; (8005b44 <f_Humidity+0x90>)
 8005b14:	f00d feea 	bl	80138ec <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_humi,sizeof(str_humi),10);
 8005b18:	230a      	movs	r3, #10
 8005b1a:	2264      	movs	r2, #100	; 0x64
 8005b1c:	4909      	ldr	r1, [pc, #36]	; (8005b44 <f_Humidity+0x90>)
 8005b1e:	480a      	ldr	r0, [pc, #40]	; (8005b48 <f_Humidity+0x94>)
 8005b20:	f00b fd76 	bl	8011610 <HAL_UART_Transmit>
			memset(str_humi, 0, sizeof(str_humi));
 8005b24:	2264      	movs	r2, #100	; 0x64
 8005b26:	2100      	movs	r1, #0
 8005b28:	4806      	ldr	r0, [pc, #24]	; (8005b44 <f_Humidity+0x90>)
 8005b2a:	f00d f9df 	bl	8012eec <memset>
			flag_humi=0;
 8005b2e:	4b03      	ldr	r3, [pc, #12]	; (8005b3c <f_Humidity+0x88>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	701a      	strb	r2, [r3, #0]
}
 8005b34:	bf00      	nop
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	200004c8 	.word	0x200004c8
 8005b40:	0801648c 	.word	0x0801648c
 8005b44:	20000dec 	.word	0x20000dec
 8005b48:	20002b74 	.word	0x20002b74
 8005b4c:	20000d80 	.word	0x20000d80
 8005b50:	080164ac 	.word	0x080164ac

08005b54 <f_Pressure>:
/*********************************************************** END **************************************************************************/

/************************************* This function use for extracting Pressure data *****************************************************/
void f_Pressure(void)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af02      	add	r7, sp, #8
	if(flag_pre)
 8005b5a:	4b20      	ldr	r3, [pc, #128]	; (8005bdc <f_Pressure+0x88>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d038      	beq.n	8005bd4 <f_Pressure+0x80>
	{
		if(BSP_PSENSOR_Init())
 8005b62:	f002 f929 	bl	8007db8 <BSP_PSENSOR_Init>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d010      	beq.n	8005b8e <f_Pressure+0x3a>
		{
			snprintf(str_pre,100,"\033\143 Not Taking PRESSURE Data \r");
 8005b6c:	4a1c      	ldr	r2, [pc, #112]	; (8005be0 <f_Pressure+0x8c>)
 8005b6e:	2164      	movs	r1, #100	; 0x64
 8005b70:	481c      	ldr	r0, [pc, #112]	; (8005be4 <f_Pressure+0x90>)
 8005b72:	f00d febb 	bl	80138ec <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_pre,sizeof(str_pre),10);
 8005b76:	230a      	movs	r3, #10
 8005b78:	2264      	movs	r2, #100	; 0x64
 8005b7a:	491a      	ldr	r1, [pc, #104]	; (8005be4 <f_Pressure+0x90>)
 8005b7c:	481a      	ldr	r0, [pc, #104]	; (8005be8 <f_Pressure+0x94>)
 8005b7e:	f00b fd47 	bl	8011610 <HAL_UART_Transmit>
			memset(str_pre, 0, sizeof(str_pre));
 8005b82:	2264      	movs	r2, #100	; 0x64
 8005b84:	2100      	movs	r1, #0
 8005b86:	4817      	ldr	r0, [pc, #92]	; (8005be4 <f_Pressure+0x90>)
 8005b88:	f00d f9b0 	bl	8012eec <memset>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_pre,sizeof(str_pre),10);
			memset(str_pre, 0, sizeof(str_pre));
			flag_pre=0;
		}
	}
}
 8005b8c:	e022      	b.n	8005bd4 <f_Pressure+0x80>
			pre_value = BSP_PSENSOR_ReadPressure();
 8005b8e:	f002 f933 	bl	8007df8 <BSP_PSENSOR_ReadPressure>
 8005b92:	eef0 7a40 	vmov.f32	s15, s0
 8005b96:	4b15      	ldr	r3, [pc, #84]	; (8005bec <f_Pressure+0x98>)
 8005b98:	edc3 7a00 	vstr	s15, [r3]
			snprintf(str_pre,100,"\033\143 PRESSURE = %.2f \r", pre_value);
 8005b9c:	4b13      	ldr	r3, [pc, #76]	; (8005bec <f_Pressure+0x98>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7fa fcd1 	bl	8000548 <__aeabi_f2d>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	460b      	mov	r3, r1
 8005baa:	e9cd 2300 	strd	r2, r3, [sp]
 8005bae:	4a10      	ldr	r2, [pc, #64]	; (8005bf0 <f_Pressure+0x9c>)
 8005bb0:	2164      	movs	r1, #100	; 0x64
 8005bb2:	480c      	ldr	r0, [pc, #48]	; (8005be4 <f_Pressure+0x90>)
 8005bb4:	f00d fe9a 	bl	80138ec <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_pre,sizeof(str_pre),10);
 8005bb8:	230a      	movs	r3, #10
 8005bba:	2264      	movs	r2, #100	; 0x64
 8005bbc:	4909      	ldr	r1, [pc, #36]	; (8005be4 <f_Pressure+0x90>)
 8005bbe:	480a      	ldr	r0, [pc, #40]	; (8005be8 <f_Pressure+0x94>)
 8005bc0:	f00b fd26 	bl	8011610 <HAL_UART_Transmit>
			memset(str_pre, 0, sizeof(str_pre));
 8005bc4:	2264      	movs	r2, #100	; 0x64
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	4806      	ldr	r0, [pc, #24]	; (8005be4 <f_Pressure+0x90>)
 8005bca:	f00d f98f 	bl	8012eec <memset>
			flag_pre=0;
 8005bce:	4b03      	ldr	r3, [pc, #12]	; (8005bdc <f_Pressure+0x88>)
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	701a      	strb	r2, [r3, #0]
}
 8005bd4:	bf00      	nop
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	200004c9 	.word	0x200004c9
 8005be0:	080164c4 	.word	0x080164c4
 8005be4:	20000e50 	.word	0x20000e50
 8005be8:	20002b74 	.word	0x20002b74
 8005bec:	20000d84 	.word	0x20000d84
 8005bf0:	080164e4 	.word	0x080164e4

08005bf4 <f_ACCELEROMETER>:
/*********************************************************** END **************************************************************************/

/********************************************** This function use for extracting ACCELEROMETER data ***************************************/
void f_ACCELEROMETER(void)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af02      	add	r7, sp, #8
	if(flag_acce)
 8005bfa:	4b22      	ldr	r3, [pc, #136]	; (8005c84 <f_ACCELEROMETER+0x90>)
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d03c      	beq.n	8005c7c <f_ACCELEROMETER+0x88>
	{
		if(BSP_ACCELERO_Init())
 8005c02:	f001 ffb7 	bl	8007b74 <BSP_ACCELERO_Init>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d013      	beq.n	8005c34 <f_ACCELEROMETER+0x40>
		{
			BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 8005c0c:	481e      	ldr	r0, [pc, #120]	; (8005c88 <f_ACCELEROMETER+0x94>)
 8005c0e:	f001 ffef 	bl	8007bf0 <BSP_ACCELERO_AccGetXYZ>

			snprintf(str_acc1,100,"\033\143 X-axis Error	Y-axis Error	Z-axis Error \r");
 8005c12:	4a1e      	ldr	r2, [pc, #120]	; (8005c8c <f_ACCELEROMETER+0x98>)
 8005c14:	2164      	movs	r1, #100	; 0x64
 8005c16:	481e      	ldr	r0, [pc, #120]	; (8005c90 <f_ACCELEROMETER+0x9c>)
 8005c18:	f00d fe68 	bl	80138ec <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_acc1,sizeof(str_acc1),10);
 8005c1c:	230a      	movs	r3, #10
 8005c1e:	2264      	movs	r2, #100	; 0x64
 8005c20:	491b      	ldr	r1, [pc, #108]	; (8005c90 <f_ACCELEROMETER+0x9c>)
 8005c22:	481c      	ldr	r0, [pc, #112]	; (8005c94 <f_ACCELEROMETER+0xa0>)
 8005c24:	f00b fcf4 	bl	8011610 <HAL_UART_Transmit>
			memset(str_acc1, 0, sizeof(str_acc1));
 8005c28:	2264      	movs	r2, #100	; 0x64
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	4818      	ldr	r0, [pc, #96]	; (8005c90 <f_ACCELEROMETER+0x9c>)
 8005c2e:	f00d f95d 	bl	8012eec <memset>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_acc1,sizeof(str_acc1),10);
			memset(str_acc1, 0, sizeof(str_acc1));
			flag_acce = 0;
		}
	}
}
 8005c32:	e023      	b.n	8005c7c <f_ACCELEROMETER+0x88>
			BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 8005c34:	4814      	ldr	r0, [pc, #80]	; (8005c88 <f_ACCELEROMETER+0x94>)
 8005c36:	f001 ffdb 	bl	8007bf0 <BSP_ACCELERO_AccGetXYZ>
			snprintf(str_acc1,100,"\033\143 X-axis = %d      Y-axis = %d      Z-axis = %d \r", pDataXYZ[0],pDataXYZ[1],pDataXYZ[2]);
 8005c3a:	4b13      	ldr	r3, [pc, #76]	; (8005c88 <f_ACCELEROMETER+0x94>)
 8005c3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c40:	4619      	mov	r1, r3
 8005c42:	4b11      	ldr	r3, [pc, #68]	; (8005c88 <f_ACCELEROMETER+0x94>)
 8005c44:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005c48:	461a      	mov	r2, r3
 8005c4a:	4b0f      	ldr	r3, [pc, #60]	; (8005c88 <f_ACCELEROMETER+0x94>)
 8005c4c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005c50:	9301      	str	r3, [sp, #4]
 8005c52:	9200      	str	r2, [sp, #0]
 8005c54:	460b      	mov	r3, r1
 8005c56:	4a10      	ldr	r2, [pc, #64]	; (8005c98 <f_ACCELEROMETER+0xa4>)
 8005c58:	2164      	movs	r1, #100	; 0x64
 8005c5a:	480d      	ldr	r0, [pc, #52]	; (8005c90 <f_ACCELEROMETER+0x9c>)
 8005c5c:	f00d fe46 	bl	80138ec <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_acc1,sizeof(str_acc1),10);
 8005c60:	230a      	movs	r3, #10
 8005c62:	2264      	movs	r2, #100	; 0x64
 8005c64:	490a      	ldr	r1, [pc, #40]	; (8005c90 <f_ACCELEROMETER+0x9c>)
 8005c66:	480b      	ldr	r0, [pc, #44]	; (8005c94 <f_ACCELEROMETER+0xa0>)
 8005c68:	f00b fcd2 	bl	8011610 <HAL_UART_Transmit>
			memset(str_acc1, 0, sizeof(str_acc1));
 8005c6c:	2264      	movs	r2, #100	; 0x64
 8005c6e:	2100      	movs	r1, #0
 8005c70:	4807      	ldr	r0, [pc, #28]	; (8005c90 <f_ACCELEROMETER+0x9c>)
 8005c72:	f00d f93b 	bl	8012eec <memset>
			flag_acce = 0;
 8005c76:	4b03      	ldr	r3, [pc, #12]	; (8005c84 <f_ACCELEROMETER+0x90>)
 8005c78:	2200      	movs	r2, #0
 8005c7a:	701a      	strb	r2, [r3, #0]
}
 8005c7c:	bf00      	nop
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	200004ca 	.word	0x200004ca
 8005c88:	20000f7c 	.word	0x20000f7c
 8005c8c:	080164fc 	.word	0x080164fc
 8005c90:	20000f18 	.word	0x20000f18
 8005c94:	20002b74 	.word	0x20002b74
 8005c98:	08016528 	.word	0x08016528

08005c9c <f_GYRO>:
/*********************************************************** END **************************************************************************/

/************************************************* This function use for extracting GYRO data *********************************************/
void f_GYRO(void)
{
 8005c9c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005ca0:	b086      	sub	sp, #24
 8005ca2:	af06      	add	r7, sp, #24
	if(flag_gyro)
 8005ca4:	4b28      	ldr	r3, [pc, #160]	; (8005d48 <f_GYRO+0xac>)
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d049      	beq.n	8005d40 <f_GYRO+0xa4>
	{
		if(BSP_GYRO_Init())
 8005cac:	f001 ffb8 	bl	8007c20 <BSP_GYRO_Init>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d013      	beq.n	8005cde <f_GYRO+0x42>
		{
			BSP_GYRO_GetXYZ(pfData);
 8005cb6:	4825      	ldr	r0, [pc, #148]	; (8005d4c <f_GYRO+0xb0>)
 8005cb8:	f001 fff4 	bl	8007ca4 <BSP_GYRO_GetXYZ>

			snprintf(str_gyro,100,"\033\143 X-axis Error	Y-axis Error	Z-axis Error \r");
 8005cbc:	4a24      	ldr	r2, [pc, #144]	; (8005d50 <f_GYRO+0xb4>)
 8005cbe:	2164      	movs	r1, #100	; 0x64
 8005cc0:	4824      	ldr	r0, [pc, #144]	; (8005d54 <f_GYRO+0xb8>)
 8005cc2:	f00d fe13 	bl	80138ec <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_gyro,sizeof(str_gyro),10);
 8005cc6:	230a      	movs	r3, #10
 8005cc8:	2264      	movs	r2, #100	; 0x64
 8005cca:	4922      	ldr	r1, [pc, #136]	; (8005d54 <f_GYRO+0xb8>)
 8005ccc:	4822      	ldr	r0, [pc, #136]	; (8005d58 <f_GYRO+0xbc>)
 8005cce:	f00b fc9f 	bl	8011610 <HAL_UART_Transmit>
			memset(str_gyro, 0, sizeof(str_gyro));
 8005cd2:	2264      	movs	r2, #100	; 0x64
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	481f      	ldr	r0, [pc, #124]	; (8005d54 <f_GYRO+0xb8>)
 8005cd8:	f00d f908 	bl	8012eec <memset>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_gyro,sizeof(str_gyro),10);
			memset(str_gyro, 0, sizeof(str_gyro));
			flag_gyro = 0;
		}
	}
}
 8005cdc:	e030      	b.n	8005d40 <f_GYRO+0xa4>
			BSP_GYRO_GetXYZ(pfData);
 8005cde:	481b      	ldr	r0, [pc, #108]	; (8005d4c <f_GYRO+0xb0>)
 8005ce0:	f001 ffe0 	bl	8007ca4 <BSP_GYRO_GetXYZ>
			snprintf(str_gyro,100,"\033\143 X-axis = %.2f      Y-axis = %.2f      Z-axis = %.2f \r", pfData[0],pfData[1],pfData[2]);
 8005ce4:	4b19      	ldr	r3, [pc, #100]	; (8005d4c <f_GYRO+0xb0>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7fa fc2d 	bl	8000548 <__aeabi_f2d>
 8005cee:	4604      	mov	r4, r0
 8005cf0:	460d      	mov	r5, r1
 8005cf2:	4b16      	ldr	r3, [pc, #88]	; (8005d4c <f_GYRO+0xb0>)
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7fa fc26 	bl	8000548 <__aeabi_f2d>
 8005cfc:	4680      	mov	r8, r0
 8005cfe:	4689      	mov	r9, r1
 8005d00:	4b12      	ldr	r3, [pc, #72]	; (8005d4c <f_GYRO+0xb0>)
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7fa fc1f 	bl	8000548 <__aeabi_f2d>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005d12:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8005d16:	e9cd 4500 	strd	r4, r5, [sp]
 8005d1a:	4a10      	ldr	r2, [pc, #64]	; (8005d5c <f_GYRO+0xc0>)
 8005d1c:	2164      	movs	r1, #100	; 0x64
 8005d1e:	480d      	ldr	r0, [pc, #52]	; (8005d54 <f_GYRO+0xb8>)
 8005d20:	f00d fde4 	bl	80138ec <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_gyro,sizeof(str_gyro),10);
 8005d24:	230a      	movs	r3, #10
 8005d26:	2264      	movs	r2, #100	; 0x64
 8005d28:	490a      	ldr	r1, [pc, #40]	; (8005d54 <f_GYRO+0xb8>)
 8005d2a:	480b      	ldr	r0, [pc, #44]	; (8005d58 <f_GYRO+0xbc>)
 8005d2c:	f00b fc70 	bl	8011610 <HAL_UART_Transmit>
			memset(str_gyro, 0, sizeof(str_gyro));
 8005d30:	2264      	movs	r2, #100	; 0x64
 8005d32:	2100      	movs	r1, #0
 8005d34:	4807      	ldr	r0, [pc, #28]	; (8005d54 <f_GYRO+0xb8>)
 8005d36:	f00d f8d9 	bl	8012eec <memset>
			flag_gyro = 0;
 8005d3a:	4b03      	ldr	r3, [pc, #12]	; (8005d48 <f_GYRO+0xac>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	701a      	strb	r2, [r3, #0]
}
 8005d40:	bf00      	nop
 8005d42:	46bd      	mov	sp, r7
 8005d44:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005d48:	200004cb 	.word	0x200004cb
 8005d4c:	20000f84 	.word	0x20000f84
 8005d50:	080164fc 	.word	0x080164fc
 8005d54:	20000eb4 	.word	0x20000eb4
 8005d58:	20002b74 	.word	0x20002b74
 8005d5c:	0801655c 	.word	0x0801655c

08005d60 <f_MAGNETOMETERR>:
/*********************************************************** END **************************************************************************/

/******************************************This function use for extracting MAGNETOMETER data *********************************************/
void f_MAGNETOMETERR(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af02      	add	r7, sp, #8
	if(flag_mag)
 8005d66:	4b22      	ldr	r3, [pc, #136]	; (8005df0 <f_MAGNETOMETERR+0x90>)
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d03c      	beq.n	8005de8 <f_MAGNETOMETERR+0x88>
	{
		if(BSP_MAGNETO_Init())
 8005d6e:	f001 ffdf 	bl	8007d30 <BSP_MAGNETO_Init>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d013      	beq.n	8005da0 <f_MAGNETOMETERR+0x40>
		{
			BSP_MAGNETO_GetXYZ(pDataXYZ);
 8005d78:	481e      	ldr	r0, [pc, #120]	; (8005df4 <f_MAGNETOMETERR+0x94>)
 8005d7a:	f002 f805 	bl	8007d88 <BSP_MAGNETO_GetXYZ>

			snprintf(str_acc1,100,"\033\143 X-axis Error	Y-axis Error	Z-axis Error \r");
 8005d7e:	4a1e      	ldr	r2, [pc, #120]	; (8005df8 <f_MAGNETOMETERR+0x98>)
 8005d80:	2164      	movs	r1, #100	; 0x64
 8005d82:	481e      	ldr	r0, [pc, #120]	; (8005dfc <f_MAGNETOMETERR+0x9c>)
 8005d84:	f00d fdb2 	bl	80138ec <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_acc1,sizeof(str_acc1),10);
 8005d88:	230a      	movs	r3, #10
 8005d8a:	2264      	movs	r2, #100	; 0x64
 8005d8c:	491b      	ldr	r1, [pc, #108]	; (8005dfc <f_MAGNETOMETERR+0x9c>)
 8005d8e:	481c      	ldr	r0, [pc, #112]	; (8005e00 <f_MAGNETOMETERR+0xa0>)
 8005d90:	f00b fc3e 	bl	8011610 <HAL_UART_Transmit>
			memset(str_acc1, 0, sizeof(str_acc1));
 8005d94:	2264      	movs	r2, #100	; 0x64
 8005d96:	2100      	movs	r1, #0
 8005d98:	4818      	ldr	r0, [pc, #96]	; (8005dfc <f_MAGNETOMETERR+0x9c>)
 8005d9a:	f00d f8a7 	bl	8012eec <memset>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_acc1,sizeof(str_acc1),10);
			memset(str_acc1, 0, sizeof(str_acc1));
			flag_mag = 0;
		}
	}
}
 8005d9e:	e023      	b.n	8005de8 <f_MAGNETOMETERR+0x88>
			BSP_MAGNETO_GetXYZ(pDataXYZ);
 8005da0:	4814      	ldr	r0, [pc, #80]	; (8005df4 <f_MAGNETOMETERR+0x94>)
 8005da2:	f001 fff1 	bl	8007d88 <BSP_MAGNETO_GetXYZ>
			snprintf(str_acc1,100,"\033\143 X-axis = %d      Y-axis = %d      Z-axis = %d \r", pDataXYZ[0],pDataXYZ[1],pDataXYZ[2]);
 8005da6:	4b13      	ldr	r3, [pc, #76]	; (8005df4 <f_MAGNETOMETERR+0x94>)
 8005da8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005dac:	4619      	mov	r1, r3
 8005dae:	4b11      	ldr	r3, [pc, #68]	; (8005df4 <f_MAGNETOMETERR+0x94>)
 8005db0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005db4:	461a      	mov	r2, r3
 8005db6:	4b0f      	ldr	r3, [pc, #60]	; (8005df4 <f_MAGNETOMETERR+0x94>)
 8005db8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005dbc:	9301      	str	r3, [sp, #4]
 8005dbe:	9200      	str	r2, [sp, #0]
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	4a10      	ldr	r2, [pc, #64]	; (8005e04 <f_MAGNETOMETERR+0xa4>)
 8005dc4:	2164      	movs	r1, #100	; 0x64
 8005dc6:	480d      	ldr	r0, [pc, #52]	; (8005dfc <f_MAGNETOMETERR+0x9c>)
 8005dc8:	f00d fd90 	bl	80138ec <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_acc1,sizeof(str_acc1),10);
 8005dcc:	230a      	movs	r3, #10
 8005dce:	2264      	movs	r2, #100	; 0x64
 8005dd0:	490a      	ldr	r1, [pc, #40]	; (8005dfc <f_MAGNETOMETERR+0x9c>)
 8005dd2:	480b      	ldr	r0, [pc, #44]	; (8005e00 <f_MAGNETOMETERR+0xa0>)
 8005dd4:	f00b fc1c 	bl	8011610 <HAL_UART_Transmit>
			memset(str_acc1, 0, sizeof(str_acc1));
 8005dd8:	2264      	movs	r2, #100	; 0x64
 8005dda:	2100      	movs	r1, #0
 8005ddc:	4807      	ldr	r0, [pc, #28]	; (8005dfc <f_MAGNETOMETERR+0x9c>)
 8005dde:	f00d f885 	bl	8012eec <memset>
			flag_mag = 0;
 8005de2:	4b03      	ldr	r3, [pc, #12]	; (8005df0 <f_MAGNETOMETERR+0x90>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	701a      	strb	r2, [r3, #0]
}
 8005de8:	bf00      	nop
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	200004cc 	.word	0x200004cc
 8005df4:	20000f7c 	.word	0x20000f7c
 8005df8:	080164fc 	.word	0x080164fc
 8005dfc:	20000f18 	.word	0x20000f18
 8005e00:	20002b74 	.word	0x20002b74
 8005e04:	08016528 	.word	0x08016528

08005e08 <f_cur_mov>:
/*********************************************************** END **************************************************************************/


/*********************************************************** This function use for Cursor Move ********************************************/
void f_cur_mov(void)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	af00      	add	r7, sp, #0
	f_INT_count++;
 8005e0c:	4b35      	ldr	r3, [pc, #212]	; (8005ee4 <f_cur_mov+0xdc>)
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	3301      	adds	r3, #1
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	4b33      	ldr	r3, [pc, #204]	; (8005ee4 <f_cur_mov+0xdc>)
 8005e16:	701a      	strb	r2, [r3, #0]

	if(f_INT_count <= 8)											//Main Menu
 8005e18:	4b32      	ldr	r3, [pc, #200]	; (8005ee4 <f_cur_mov+0xdc>)
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b08      	cmp	r3, #8
 8005e1e:	d806      	bhi.n	8005e2e <f_cur_mov+0x26>
	{
		HAL_UART_Transmit(&huart1,com_dn,sizeof(com_dn),10);
 8005e20:	230a      	movs	r3, #10
 8005e22:	2204      	movs	r2, #4
 8005e24:	4930      	ldr	r1, [pc, #192]	; (8005ee8 <f_cur_mov+0xe0>)
 8005e26:	4831      	ldr	r0, [pc, #196]	; (8005eec <f_cur_mov+0xe4>)
 8005e28:	f00b fbf2 	bl	8011610 <HAL_UART_Transmit>
	}




}
 8005e2c:	e057      	b.n	8005ede <f_cur_mov+0xd6>
	else if(f_INT_count == 9)
 8005e2e:	4b2d      	ldr	r3, [pc, #180]	; (8005ee4 <f_cur_mov+0xdc>)
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	2b09      	cmp	r3, #9
 8005e34:	d109      	bne.n	8005e4a <f_cur_mov+0x42>
		HAL_UART_Transmit(&huart1,com_up,sizeof(com_up),10);
 8005e36:	230a      	movs	r3, #10
 8005e38:	2205      	movs	r2, #5
 8005e3a:	492d      	ldr	r1, [pc, #180]	; (8005ef0 <f_cur_mov+0xe8>)
 8005e3c:	482b      	ldr	r0, [pc, #172]	; (8005eec <f_cur_mov+0xe4>)
 8005e3e:	f00b fbe7 	bl	8011610 <HAL_UART_Transmit>
		f_INT_count=1;
 8005e42:	4b28      	ldr	r3, [pc, #160]	; (8005ee4 <f_cur_mov+0xdc>)
 8005e44:	2201      	movs	r2, #1
 8005e46:	701a      	strb	r2, [r3, #0]
}
 8005e48:	e049      	b.n	8005ede <f_cur_mov+0xd6>
	else if(f_INT_count <= 13)										//NFC Menu
 8005e4a:	4b26      	ldr	r3, [pc, #152]	; (8005ee4 <f_cur_mov+0xdc>)
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	2b0d      	cmp	r3, #13
 8005e50:	d806      	bhi.n	8005e60 <f_cur_mov+0x58>
		HAL_UART_Transmit(&huart1,com_dn,sizeof(com_dn),10);
 8005e52:	230a      	movs	r3, #10
 8005e54:	2204      	movs	r2, #4
 8005e56:	4924      	ldr	r1, [pc, #144]	; (8005ee8 <f_cur_mov+0xe0>)
 8005e58:	4824      	ldr	r0, [pc, #144]	; (8005eec <f_cur_mov+0xe4>)
 8005e5a:	f00b fbd9 	bl	8011610 <HAL_UART_Transmit>
}
 8005e5e:	e03e      	b.n	8005ede <f_cur_mov+0xd6>
	else if(f_INT_count == 14)
 8005e60:	4b20      	ldr	r3, [pc, #128]	; (8005ee4 <f_cur_mov+0xdc>)
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	2b0e      	cmp	r3, #14
 8005e66:	d109      	bne.n	8005e7c <f_cur_mov+0x74>
		HAL_UART_Transmit(&huart1,N_com_up,sizeof(N_com_up),10);
 8005e68:	230a      	movs	r3, #10
 8005e6a:	2205      	movs	r2, #5
 8005e6c:	4921      	ldr	r1, [pc, #132]	; (8005ef4 <f_cur_mov+0xec>)
 8005e6e:	481f      	ldr	r0, [pc, #124]	; (8005eec <f_cur_mov+0xe4>)
 8005e70:	f00b fbce 	bl	8011610 <HAL_UART_Transmit>
		f_INT_count=10;
 8005e74:	4b1b      	ldr	r3, [pc, #108]	; (8005ee4 <f_cur_mov+0xdc>)
 8005e76:	220a      	movs	r2, #10
 8005e78:	701a      	strb	r2, [r3, #0]
}
 8005e7a:	e030      	b.n	8005ede <f_cur_mov+0xd6>
	else if(f_INT_count <= 20)										//NFC Write Menu
 8005e7c:	4b19      	ldr	r3, [pc, #100]	; (8005ee4 <f_cur_mov+0xdc>)
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	2b14      	cmp	r3, #20
 8005e82:	d806      	bhi.n	8005e92 <f_cur_mov+0x8a>
		HAL_UART_Transmit(&huart1,com_dn,sizeof(com_dn),10);
 8005e84:	230a      	movs	r3, #10
 8005e86:	2204      	movs	r2, #4
 8005e88:	4917      	ldr	r1, [pc, #92]	; (8005ee8 <f_cur_mov+0xe0>)
 8005e8a:	4818      	ldr	r0, [pc, #96]	; (8005eec <f_cur_mov+0xe4>)
 8005e8c:	f00b fbc0 	bl	8011610 <HAL_UART_Transmit>
}
 8005e90:	e025      	b.n	8005ede <f_cur_mov+0xd6>
	else if(f_INT_count == 21)
 8005e92:	4b14      	ldr	r3, [pc, #80]	; (8005ee4 <f_cur_mov+0xdc>)
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	2b15      	cmp	r3, #21
 8005e98:	d109      	bne.n	8005eae <f_cur_mov+0xa6>
		HAL_UART_Transmit(&huart1,W_com_up,sizeof(W_com_up),10);
 8005e9a:	230a      	movs	r3, #10
 8005e9c:	2205      	movs	r2, #5
 8005e9e:	4916      	ldr	r1, [pc, #88]	; (8005ef8 <f_cur_mov+0xf0>)
 8005ea0:	4812      	ldr	r0, [pc, #72]	; (8005eec <f_cur_mov+0xe4>)
 8005ea2:	f00b fbb5 	bl	8011610 <HAL_UART_Transmit>
		f_INT_count=15;
 8005ea6:	4b0f      	ldr	r3, [pc, #60]	; (8005ee4 <f_cur_mov+0xdc>)
 8005ea8:	220f      	movs	r2, #15
 8005eaa:	701a      	strb	r2, [r3, #0]
}
 8005eac:	e017      	b.n	8005ede <f_cur_mov+0xd6>
	else if(f_INT_count <= 26)										//NFC Read Menu
 8005eae:	4b0d      	ldr	r3, [pc, #52]	; (8005ee4 <f_cur_mov+0xdc>)
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	2b1a      	cmp	r3, #26
 8005eb4:	d806      	bhi.n	8005ec4 <f_cur_mov+0xbc>
		HAL_UART_Transmit(&huart1,com_dn,sizeof(com_dn),10);
 8005eb6:	230a      	movs	r3, #10
 8005eb8:	2204      	movs	r2, #4
 8005eba:	490b      	ldr	r1, [pc, #44]	; (8005ee8 <f_cur_mov+0xe0>)
 8005ebc:	480b      	ldr	r0, [pc, #44]	; (8005eec <f_cur_mov+0xe4>)
 8005ebe:	f00b fba7 	bl	8011610 <HAL_UART_Transmit>
}
 8005ec2:	e00c      	b.n	8005ede <f_cur_mov+0xd6>
	else if(f_INT_count == 27)
 8005ec4:	4b07      	ldr	r3, [pc, #28]	; (8005ee4 <f_cur_mov+0xdc>)
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	2b1b      	cmp	r3, #27
 8005eca:	d108      	bne.n	8005ede <f_cur_mov+0xd6>
		HAL_UART_Transmit(&huart1,R_com_up,sizeof(R_com_up),10);
 8005ecc:	230a      	movs	r3, #10
 8005ece:	2205      	movs	r2, #5
 8005ed0:	490a      	ldr	r1, [pc, #40]	; (8005efc <f_cur_mov+0xf4>)
 8005ed2:	4806      	ldr	r0, [pc, #24]	; (8005eec <f_cur_mov+0xe4>)
 8005ed4:	f00b fb9c 	bl	8011610 <HAL_UART_Transmit>
		f_INT_count=22;
 8005ed8:	4b02      	ldr	r3, [pc, #8]	; (8005ee4 <f_cur_mov+0xdc>)
 8005eda:	2216      	movs	r2, #22
 8005edc:	701a      	strb	r2, [r3, #0]
}
 8005ede:	bf00      	nop
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	200004c5 	.word	0x200004c5
 8005ee8:	20000484 	.word	0x20000484
 8005eec:	20002b74 	.word	0x20002b74
 8005ef0:	2000047c 	.word	0x2000047c
 8005ef4:	20000488 	.word	0x20000488
 8005ef8:	20000490 	.word	0x20000490
 8005efc:	20000498 	.word	0x20000498

08005f00 <f_cur_sel>:
/*********************************************************** END **************************************************************************/

/*********************************************** This function use for Cursor Select ******************************************************/
void f_cur_sel(void)
{
 8005f00:	b480      	push	{r7}
 8005f02:	af00      	add	r7, sp, #0
	switch(f_INT_count)
 8005f04:	4b54      	ldr	r3, [pc, #336]	; (8006058 <f_cur_sel+0x158>)
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	2b1a      	cmp	r3, #26
 8005f0c:	f200 809e 	bhi.w	800604c <f_cur_sel+0x14c>
 8005f10:	a201      	add	r2, pc, #4	; (adr r2, 8005f18 <f_cur_sel+0x18>)
 8005f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f16:	bf00      	nop
 8005f18:	08005f85 	.word	0x08005f85
 8005f1c:	08005f8d 	.word	0x08005f8d
 8005f20:	08005f95 	.word	0x08005f95
 8005f24:	08005f9d 	.word	0x08005f9d
 8005f28:	08005fa5 	.word	0x08005fa5
 8005f2c:	08005fad 	.word	0x08005fad
 8005f30:	08005fb5 	.word	0x08005fb5
 8005f34:	08005fbd 	.word	0x08005fbd
 8005f38:	0800604d 	.word	0x0800604d
 8005f3c:	08005fc5 	.word	0x08005fc5
 8005f40:	08005fcd 	.word	0x08005fcd
 8005f44:	08005fd5 	.word	0x08005fd5
 8005f48:	08005fdd 	.word	0x08005fdd
 8005f4c:	0800604d 	.word	0x0800604d
 8005f50:	08005fe5 	.word	0x08005fe5
 8005f54:	08005fed 	.word	0x08005fed
 8005f58:	08005ff5 	.word	0x08005ff5
 8005f5c:	08005ffd 	.word	0x08005ffd
 8005f60:	08006005 	.word	0x08006005
 8005f64:	0800600d 	.word	0x0800600d
 8005f68:	08006015 	.word	0x08006015
 8005f6c:	0800601d 	.word	0x0800601d
 8005f70:	08006025 	.word	0x08006025
 8005f74:	0800602d 	.word	0x0800602d
 8005f78:	08006035 	.word	0x08006035
 8005f7c:	0800603d 	.word	0x0800603d
 8005f80:	08006045 	.word	0x08006045
	{
		case 1:
		{
			s_case = f_One;
 8005f84:	4b35      	ldr	r3, [pc, #212]	; (800605c <f_cur_sel+0x15c>)
 8005f86:	2231      	movs	r2, #49	; 0x31
 8005f88:	701a      	strb	r2, [r3, #0]
			break;
 8005f8a:	e05f      	b.n	800604c <f_cur_sel+0x14c>
		}
		case 2:
		{
			s_case =  f_Two;
 8005f8c:	4b33      	ldr	r3, [pc, #204]	; (800605c <f_cur_sel+0x15c>)
 8005f8e:	2232      	movs	r2, #50	; 0x32
 8005f90:	701a      	strb	r2, [r3, #0]
			break;
 8005f92:	e05b      	b.n	800604c <f_cur_sel+0x14c>
		}
		case 3:
		{
			s_case = f_Three;
 8005f94:	4b31      	ldr	r3, [pc, #196]	; (800605c <f_cur_sel+0x15c>)
 8005f96:	2233      	movs	r2, #51	; 0x33
 8005f98:	701a      	strb	r2, [r3, #0]
			break;
 8005f9a:	e057      	b.n	800604c <f_cur_sel+0x14c>
		}
		case 4:
		{
			s_case = f_Four;
 8005f9c:	4b2f      	ldr	r3, [pc, #188]	; (800605c <f_cur_sel+0x15c>)
 8005f9e:	2234      	movs	r2, #52	; 0x34
 8005fa0:	701a      	strb	r2, [r3, #0]
			break;
 8005fa2:	e053      	b.n	800604c <f_cur_sel+0x14c>
		}
		case 5:
		{
			s_case = f_Five;
 8005fa4:	4b2d      	ldr	r3, [pc, #180]	; (800605c <f_cur_sel+0x15c>)
 8005fa6:	2235      	movs	r2, #53	; 0x35
 8005fa8:	701a      	strb	r2, [r3, #0]
			break;
 8005faa:	e04f      	b.n	800604c <f_cur_sel+0x14c>
		}
		case 6:
		{
			s_case = f_Six;
 8005fac:	4b2b      	ldr	r3, [pc, #172]	; (800605c <f_cur_sel+0x15c>)
 8005fae:	2236      	movs	r2, #54	; 0x36
 8005fb0:	701a      	strb	r2, [r3, #0]
			break;
 8005fb2:	e04b      	b.n	800604c <f_cur_sel+0x14c>
		}
		case 7:
		{
			s_case = f_Seven;
 8005fb4:	4b29      	ldr	r3, [pc, #164]	; (800605c <f_cur_sel+0x15c>)
 8005fb6:	2237      	movs	r2, #55	; 0x37
 8005fb8:	701a      	strb	r2, [r3, #0]
			break;
 8005fba:	e047      	b.n	800604c <f_cur_sel+0x14c>
		}
		case 8:
		{
			s_case	= f_Eight;
 8005fbc:	4b27      	ldr	r3, [pc, #156]	; (800605c <f_cur_sel+0x15c>)
 8005fbe:	2238      	movs	r2, #56	; 0x38
 8005fc0:	701a      	strb	r2, [r3, #0]
			break;
 8005fc2:	e043      	b.n	800604c <f_cur_sel+0x14c>
		}
		case 10:
		{
			s_case	= f_One;
 8005fc4:	4b25      	ldr	r3, [pc, #148]	; (800605c <f_cur_sel+0x15c>)
 8005fc6:	2231      	movs	r2, #49	; 0x31
 8005fc8:	701a      	strb	r2, [r3, #0]
			break;
 8005fca:	e03f      	b.n	800604c <f_cur_sel+0x14c>
		}
		case 11:
		{
			s_case =  f_Two;
 8005fcc:	4b23      	ldr	r3, [pc, #140]	; (800605c <f_cur_sel+0x15c>)
 8005fce:	2232      	movs	r2, #50	; 0x32
 8005fd0:	701a      	strb	r2, [r3, #0]
			break;
 8005fd2:	e03b      	b.n	800604c <f_cur_sel+0x14c>
		}
		case 12:
		{
			s_case = f_Three;
 8005fd4:	4b21      	ldr	r3, [pc, #132]	; (800605c <f_cur_sel+0x15c>)
 8005fd6:	2233      	movs	r2, #51	; 0x33
 8005fd8:	701a      	strb	r2, [r3, #0]
			break;
 8005fda:	e037      	b.n	800604c <f_cur_sel+0x14c>
		}
		case 13:
		{
			s_case = f_Four;
 8005fdc:	4b1f      	ldr	r3, [pc, #124]	; (800605c <f_cur_sel+0x15c>)
 8005fde:	2234      	movs	r2, #52	; 0x34
 8005fe0:	701a      	strb	r2, [r3, #0]
			break;
 8005fe2:	e033      	b.n	800604c <f_cur_sel+0x14c>
		}
		case 15:
		{
			s_case	= f_One;
 8005fe4:	4b1d      	ldr	r3, [pc, #116]	; (800605c <f_cur_sel+0x15c>)
 8005fe6:	2231      	movs	r2, #49	; 0x31
 8005fe8:	701a      	strb	r2, [r3, #0]
			break;
 8005fea:	e02f      	b.n	800604c <f_cur_sel+0x14c>
		}
		case 16:
		{
			s_case =  f_Two;
 8005fec:	4b1b      	ldr	r3, [pc, #108]	; (800605c <f_cur_sel+0x15c>)
 8005fee:	2232      	movs	r2, #50	; 0x32
 8005ff0:	701a      	strb	r2, [r3, #0]
			break;
 8005ff2:	e02b      	b.n	800604c <f_cur_sel+0x14c>
		}
		case 17:
		{
			s_case = f_Three;
 8005ff4:	4b19      	ldr	r3, [pc, #100]	; (800605c <f_cur_sel+0x15c>)
 8005ff6:	2233      	movs	r2, #51	; 0x33
 8005ff8:	701a      	strb	r2, [r3, #0]
			break;
 8005ffa:	e027      	b.n	800604c <f_cur_sel+0x14c>
		}
		case 18:
		{
			s_case = f_Four;
 8005ffc:	4b17      	ldr	r3, [pc, #92]	; (800605c <f_cur_sel+0x15c>)
 8005ffe:	2234      	movs	r2, #52	; 0x34
 8006000:	701a      	strb	r2, [r3, #0]
			break;
 8006002:	e023      	b.n	800604c <f_cur_sel+0x14c>
		}
		case 19:
		{
			s_case = f_Five;
 8006004:	4b15      	ldr	r3, [pc, #84]	; (800605c <f_cur_sel+0x15c>)
 8006006:	2235      	movs	r2, #53	; 0x35
 8006008:	701a      	strb	r2, [r3, #0]
			break;
 800600a:	e01f      	b.n	800604c <f_cur_sel+0x14c>
		}
		case 20:
		{
			s_case = f_Six;
 800600c:	4b13      	ldr	r3, [pc, #76]	; (800605c <f_cur_sel+0x15c>)
 800600e:	2236      	movs	r2, #54	; 0x36
 8006010:	701a      	strb	r2, [r3, #0]
			break;
 8006012:	e01b      	b.n	800604c <f_cur_sel+0x14c>
		}
		case 21:
		{
			s_case = f_Seven;
 8006014:	4b11      	ldr	r3, [pc, #68]	; (800605c <f_cur_sel+0x15c>)
 8006016:	2237      	movs	r2, #55	; 0x37
 8006018:	701a      	strb	r2, [r3, #0]
			break;
 800601a:	e017      	b.n	800604c <f_cur_sel+0x14c>
		}
		case 22:
		{
			s_case	= f_One;
 800601c:	4b0f      	ldr	r3, [pc, #60]	; (800605c <f_cur_sel+0x15c>)
 800601e:	2231      	movs	r2, #49	; 0x31
 8006020:	701a      	strb	r2, [r3, #0]
			break;
 8006022:	e013      	b.n	800604c <f_cur_sel+0x14c>
		}
		case 23:
		{
			s_case =  f_Two;
 8006024:	4b0d      	ldr	r3, [pc, #52]	; (800605c <f_cur_sel+0x15c>)
 8006026:	2232      	movs	r2, #50	; 0x32
 8006028:	701a      	strb	r2, [r3, #0]
			break;
 800602a:	e00f      	b.n	800604c <f_cur_sel+0x14c>
		}
		case 24:
		{
			s_case = f_Three;
 800602c:	4b0b      	ldr	r3, [pc, #44]	; (800605c <f_cur_sel+0x15c>)
 800602e:	2233      	movs	r2, #51	; 0x33
 8006030:	701a      	strb	r2, [r3, #0]
			break;
 8006032:	e00b      	b.n	800604c <f_cur_sel+0x14c>
		}
		case 25:
		{
			s_case = f_Four;
 8006034:	4b09      	ldr	r3, [pc, #36]	; (800605c <f_cur_sel+0x15c>)
 8006036:	2234      	movs	r2, #52	; 0x34
 8006038:	701a      	strb	r2, [r3, #0]
			break;
 800603a:	e007      	b.n	800604c <f_cur_sel+0x14c>
		}
		case 26:
		{
			s_case = f_Five;
 800603c:	4b07      	ldr	r3, [pc, #28]	; (800605c <f_cur_sel+0x15c>)
 800603e:	2235      	movs	r2, #53	; 0x35
 8006040:	701a      	strb	r2, [r3, #0]
			break;
 8006042:	e003      	b.n	800604c <f_cur_sel+0x14c>
		}
		case 27:
		{
			s_case = f_Six;
 8006044:	4b05      	ldr	r3, [pc, #20]	; (800605c <f_cur_sel+0x15c>)
 8006046:	2236      	movs	r2, #54	; 0x36
 8006048:	701a      	strb	r2, [r3, #0]
			break;
 800604a:	bf00      	nop
		}
	}
}
 800604c:	bf00      	nop
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	200004c5 	.word	0x200004c5
 800605c:	20000f97 	.word	0x20000f97

08006060 <f_Menu>:
/*********************************************************** END **************************************************************************/
/****************************************** This function use for Printing MENU ***********************************************************/
int f_Menu(void)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1,msg3,sizeof(msg3),100);
 8006064:	2364      	movs	r3, #100	; 0x64
 8006066:	22bc      	movs	r2, #188	; 0xbc
 8006068:	490d      	ldr	r1, [pc, #52]	; (80060a0 <f_Menu+0x40>)
 800606a:	480e      	ldr	r0, [pc, #56]	; (80060a4 <f_Menu+0x44>)
 800606c:	f00b fad0 	bl	8011610 <HAL_UART_Transmit>
	f_INT_count=1;
 8006070:	4b0d      	ldr	r3, [pc, #52]	; (80060a8 <f_Menu+0x48>)
 8006072:	2201      	movs	r2, #1
 8006074:	701a      	strb	r2, [r3, #0]
	sw_flag = 1;
 8006076:	4b0d      	ldr	r3, [pc, #52]	; (80060ac <f_Menu+0x4c>)
 8006078:	2201      	movs	r2, #1
 800607a:	701a      	strb	r2, [r3, #0]
	s_case = 0;
 800607c:	4b0c      	ldr	r3, [pc, #48]	; (80060b0 <f_Menu+0x50>)
 800607e:	2200      	movs	r2, #0
 8006080:	701a      	strb	r2, [r3, #0]

	f_Menu_flag		= 1;
 8006082:	4b0c      	ldr	r3, [pc, #48]	; (80060b4 <f_Menu+0x54>)
 8006084:	2201      	movs	r2, #1
 8006086:	701a      	strb	r2, [r3, #0]
	f_NFC_flag		= 0;
 8006088:	4b0b      	ldr	r3, [pc, #44]	; (80060b8 <f_Menu+0x58>)
 800608a:	2200      	movs	r2, #0
 800608c:	701a      	strb	r2, [r3, #0]
	f_NFC_W_flag	= 0;
 800608e:	4b0b      	ldr	r3, [pc, #44]	; (80060bc <f_Menu+0x5c>)
 8006090:	2200      	movs	r2, #0
 8006092:	701a      	strb	r2, [r3, #0]
	f_NFC_R_flag	= 0;
 8006094:	4b0a      	ldr	r3, [pc, #40]	; (80060c0 <f_Menu+0x60>)
 8006096:	2200      	movs	r2, #0
 8006098:	701a      	strb	r2, [r3, #0]


	return 0;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	200001ec 	.word	0x200001ec
 80060a4:	20002b74 	.word	0x20002b74
 80060a8:	200004c5 	.word	0x200004c5
 80060ac:	20000f96 	.word	0x20000f96
 80060b0:	20000f97 	.word	0x20000f97
 80060b4:	200004c6 	.word	0x200004c6
 80060b8:	20000f98 	.word	0x20000f98
 80060bc:	20000f99 	.word	0x20000f99
 80060c0:	20000f9a 	.word	0x20000f9a

080060c4 <f_Switch>:
/*********************************************************** END **************************************************************************/

/************************************************ This function use for Switch  ***********************************************************/
int f_Switch(void)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	af00      	add	r7, sp, #0

	f_reading = HAL_GPIO_ReadPin (GPIOC, f_sw13_Pin);
 80060c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80060cc:	485d      	ldr	r0, [pc, #372]	; (8006244 <f_Switch+0x180>)
 80060ce:	f008 fa25 	bl	800e51c <HAL_GPIO_ReadPin>
 80060d2:	4603      	mov	r3, r0
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	4b5c      	ldr	r3, [pc, #368]	; (8006248 <f_Switch+0x184>)
 80060d8:	801a      	strh	r2, [r3, #0]

	if (f_reading != f_lastButtonState)
 80060da:	4b5b      	ldr	r3, [pc, #364]	; (8006248 <f_Switch+0x184>)
 80060dc:	881b      	ldrh	r3, [r3, #0]
 80060de:	461a      	mov	r2, r3
 80060e0:	4b5a      	ldr	r3, [pc, #360]	; (800624c <f_Switch+0x188>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d009      	beq.n	80060fc <f_Switch+0x38>
	{
		// reset the debouncing timer
		f_lastDebounceTime = (__HAL_TIM_GET_COUNTER(&htim17)/10);//millis
 80060e8:	4b59      	ldr	r3, [pc, #356]	; (8006250 <f_Switch+0x18c>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	4a59      	ldr	r2, [pc, #356]	; (8006254 <f_Switch+0x190>)
 80060f0:	fba2 2303 	umull	r2, r3, r2, r3
 80060f4:	08db      	lsrs	r3, r3, #3
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	4b57      	ldr	r3, [pc, #348]	; (8006258 <f_Switch+0x194>)
 80060fa:	801a      	strh	r2, [r3, #0]
	}
	if (((__HAL_TIM_GET_COUNTER(&htim17)/10) - f_lastDebounceTime) > f_debounceDelay)
 80060fc:	4b54      	ldr	r3, [pc, #336]	; (8006250 <f_Switch+0x18c>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006102:	4a54      	ldr	r2, [pc, #336]	; (8006254 <f_Switch+0x190>)
 8006104:	fba2 2303 	umull	r2, r3, r2, r3
 8006108:	08db      	lsrs	r3, r3, #3
 800610a:	4a53      	ldr	r2, [pc, #332]	; (8006258 <f_Switch+0x194>)
 800610c:	8812      	ldrh	r2, [r2, #0]
 800610e:	1a9b      	subs	r3, r3, r2
 8006110:	4a52      	ldr	r2, [pc, #328]	; (800625c <f_Switch+0x198>)
 8006112:	8812      	ldrh	r2, [r2, #0]
 8006114:	4293      	cmp	r3, r2
 8006116:	d90f      	bls.n	8006138 <f_Switch+0x74>
	{
	  // if the button state has changed:
	  if (f_reading != f_buttonState)
 8006118:	4b51      	ldr	r3, [pc, #324]	; (8006260 <f_Switch+0x19c>)
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	b29a      	uxth	r2, r3
 800611e:	4b4a      	ldr	r3, [pc, #296]	; (8006248 <f_Switch+0x184>)
 8006120:	881b      	ldrh	r3, [r3, #0]
 8006122:	429a      	cmp	r2, r3
 8006124:	d008      	beq.n	8006138 <f_Switch+0x74>
	  {
		f_buttonState = f_reading;
 8006126:	4b48      	ldr	r3, [pc, #288]	; (8006248 <f_Switch+0x184>)
 8006128:	881b      	ldrh	r3, [r3, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	bf14      	ite	ne
 800612e:	2301      	movne	r3, #1
 8006130:	2300      	moveq	r3, #0
 8006132:	b2da      	uxtb	r2, r3
 8006134:	4b4a      	ldr	r3, [pc, #296]	; (8006260 <f_Switch+0x19c>)
 8006136:	701a      	strb	r2, [r3, #0]
	  }
	}
	//printf("button stage : %d\n",f_buttonState)  //when switch is pressed


	if ((f_buttonState == 0) && (f_flag2 == 0))
 8006138:	4b49      	ldr	r3, [pc, #292]	; (8006260 <f_Switch+0x19c>)
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	f083 0301 	eor.w	r3, r3, #1
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d01c      	beq.n	8006180 <f_Switch+0xbc>
 8006146:	4b47      	ldr	r3, [pc, #284]	; (8006264 <f_Switch+0x1a0>)
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	f083 0301 	eor.w	r3, r3, #1
 800614e:	b2db      	uxtb	r3, r3
 8006150:	2b00      	cmp	r3, #0
 8006152:	d015      	beq.n	8006180 <f_Switch+0xbc>
	{
	  f_presstime = (__HAL_TIM_GET_COUNTER(&htim17)/10); //press time in millis
 8006154:	4b3e      	ldr	r3, [pc, #248]	; (8006250 <f_Switch+0x18c>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615a:	4a3e      	ldr	r2, [pc, #248]	; (8006254 <f_Switch+0x190>)
 800615c:	fba2 2303 	umull	r2, r3, r2, r3
 8006160:	08db      	lsrs	r3, r3, #3
 8006162:	b29a      	uxth	r2, r3
 8006164:	4b40      	ldr	r3, [pc, #256]	; (8006268 <f_Switch+0x1a4>)
 8006166:	801a      	strh	r2, [r3, #0]
	  f_flag1 = 0;
 8006168:	4b40      	ldr	r3, [pc, #256]	; (800626c <f_Switch+0x1a8>)
 800616a:	2200      	movs	r2, #0
 800616c:	701a      	strb	r2, [r3, #0]
	  f_flag2 = 1;
 800616e:	4b3d      	ldr	r3, [pc, #244]	; (8006264 <f_Switch+0x1a0>)
 8006170:	2201      	movs	r2, #1
 8006172:	701a      	strb	r2, [r3, #0]
	  f_tapCounter++; //tap counter will increase by 1
 8006174:	4b3e      	ldr	r3, [pc, #248]	; (8006270 <f_Switch+0x1ac>)
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	3301      	adds	r3, #1
 800617a:	b2da      	uxtb	r2, r3
 800617c:	4b3c      	ldr	r3, [pc, #240]	; (8006270 <f_Switch+0x1ac>)
 800617e:	701a      	strb	r2, [r3, #0]
	  //printf("Button Press : %d\n",f_tapCounter);
	}


	//when button is released
	if ((f_buttonState == 1) && (f_flag1 == 0))
 8006180:	4b37      	ldr	r3, [pc, #220]	; (8006260 <f_Switch+0x19c>)
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d01e      	beq.n	80061c6 <f_Switch+0x102>
 8006188:	4b38      	ldr	r3, [pc, #224]	; (800626c <f_Switch+0x1a8>)
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	f083 0301 	eor.w	r3, r3, #1
 8006190:	b2db      	uxtb	r3, r3
 8006192:	2b00      	cmp	r3, #0
 8006194:	d017      	beq.n	80061c6 <f_Switch+0x102>
	{
	  f_releasetime = (__HAL_TIM_GET_COUNTER(&htim17)/10); //release time in millis
 8006196:	4b2e      	ldr	r3, [pc, #184]	; (8006250 <f_Switch+0x18c>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619c:	4a2d      	ldr	r2, [pc, #180]	; (8006254 <f_Switch+0x190>)
 800619e:	fba2 2303 	umull	r2, r3, r2, r3
 80061a2:	08db      	lsrs	r3, r3, #3
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	4b33      	ldr	r3, [pc, #204]	; (8006274 <f_Switch+0x1b0>)
 80061a8:	801a      	strh	r2, [r3, #0]
	  f_flag1 = 1;
 80061aa:	4b30      	ldr	r3, [pc, #192]	; (800626c <f_Switch+0x1a8>)
 80061ac:	2201      	movs	r2, #1
 80061ae:	701a      	strb	r2, [r3, #0]
	  f_flag2 = 0;
 80061b0:	4b2c      	ldr	r3, [pc, #176]	; (8006264 <f_Switch+0x1a0>)
 80061b2:	2200      	movs	r2, #0
 80061b4:	701a      	strb	r2, [r3, #0]
	  f_timediff = f_releasetime - f_presstime; //the time gap between press and release
 80061b6:	4b2f      	ldr	r3, [pc, #188]	; (8006274 <f_Switch+0x1b0>)
 80061b8:	881a      	ldrh	r2, [r3, #0]
 80061ba:	4b2b      	ldr	r3, [pc, #172]	; (8006268 <f_Switch+0x1a4>)
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	4b2d      	ldr	r3, [pc, #180]	; (8006278 <f_Switch+0x1b4>)
 80061c4:	801a      	strh	r2, [r3, #0]
	  //printf(" Time gap between Button press and release : %d\n",f_timediff);
	}


  //wait for some time and if sw is in release position
	if (((__HAL_TIM_GET_COUNTER(&htim17)/10)- f_presstime) > 400 && f_buttonState == 1)
 80061c6:	4b22      	ldr	r3, [pc, #136]	; (8006250 <f_Switch+0x18c>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061cc:	4a21      	ldr	r2, [pc, #132]	; (8006254 <f_Switch+0x190>)
 80061ce:	fba2 2303 	umull	r2, r3, r2, r3
 80061d2:	08db      	lsrs	r3, r3, #3
 80061d4:	4a24      	ldr	r2, [pc, #144]	; (8006268 <f_Switch+0x1a4>)
 80061d6:	8812      	ldrh	r2, [r2, #0]
 80061d8:	1a9b      	subs	r3, r3, r2
 80061da:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80061de:	d929      	bls.n	8006234 <f_Switch+0x170>
 80061e0:	4b1f      	ldr	r3, [pc, #124]	; (8006260 <f_Switch+0x19c>)
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d025      	beq.n	8006234 <f_Switch+0x170>
	{
		  if (f_tapCounter == 1) //if tap counter is 1
 80061e8:	4b21      	ldr	r3, [pc, #132]	; (8006270 <f_Switch+0x1ac>)
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d114      	bne.n	800621a <f_Switch+0x156>
		  {
			if (f_timediff >= 400) //if time diff is larger than 400 then its a hold
 80061f0:	4b21      	ldr	r3, [pc, #132]	; (8006278 <f_Switch+0x1b4>)
 80061f2:	881b      	ldrh	r3, [r3, #0]
 80061f4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80061f8:	d305      	bcc.n	8006206 <f_Switch+0x142>
			{
				printf("Long press\n");
 80061fa:	4820      	ldr	r0, [pc, #128]	; (800627c <f_Switch+0x1b8>)
 80061fc:	f00d fb6e 	bl	80138dc <puts>
				f_cur_sel();
 8006200:	f7ff fe7e 	bl	8005f00 <f_cur_sel>
 8006204:	e013      	b.n	800622e <f_Switch+0x16a>
			}
			else //if timediff is less than 400 then its a single tap
			{
				printf("single tap\n");
 8006206:	481e      	ldr	r0, [pc, #120]	; (8006280 <f_Switch+0x1bc>)
 8006208:	f00d fb68 	bl	80138dc <puts>
				if(sw_flag)
 800620c:	4b1d      	ldr	r3, [pc, #116]	; (8006284 <f_Switch+0x1c0>)
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00c      	beq.n	800622e <f_Switch+0x16a>
				{
					f_cur_mov();
 8006214:	f7ff fdf8 	bl	8005e08 <f_cur_mov>
 8006218:	e009      	b.n	800622e <f_Switch+0x16a>
				}
			}
		  }
		  else if (f_tapCounter == 2 ) //if tapcounter is 2
 800621a:	4b15      	ldr	r3, [pc, #84]	; (8006270 <f_Switch+0x1ac>)
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	2b02      	cmp	r3, #2
 8006220:	d105      	bne.n	800622e <f_Switch+0x16a>
		  {
				printf("double tap\n");
 8006222:	4819      	ldr	r0, [pc, #100]	; (8006288 <f_Switch+0x1c4>)
 8006224:	f00d fb5a 	bl	80138dc <puts>
				s_case = f_escape;
 8006228:	4b18      	ldr	r3, [pc, #96]	; (800628c <f_Switch+0x1c8>)
 800622a:	221b      	movs	r2, #27
 800622c:	701a      	strb	r2, [r3, #0]
		  }

	  f_tapCounter = 0;
 800622e:	4b10      	ldr	r3, [pc, #64]	; (8006270 <f_Switch+0x1ac>)
 8006230:	2200      	movs	r2, #0
 8006232:	701a      	strb	r2, [r3, #0]
	}

	f_lastButtonState = f_reading;
 8006234:	4b04      	ldr	r3, [pc, #16]	; (8006248 <f_Switch+0x184>)
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	461a      	mov	r2, r3
 800623a:	4b04      	ldr	r3, [pc, #16]	; (800624c <f_Switch+0x188>)
 800623c:	601a      	str	r2, [r3, #0]

	return 0;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	bd80      	pop	{r7, pc}
 8006244:	48000800 	.word	0x48000800
 8006248:	20000f94 	.word	0x20000f94
 800624c:	200004c0 	.word	0x200004c0
 8006250:	20002b24 	.word	0x20002b24
 8006254:	cccccccd 	.word	0xcccccccd
 8006258:	20000f90 	.word	0x20000f90
 800625c:	200004be 	.word	0x200004be
 8006260:	200004c4 	.word	0x200004c4
 8006264:	20002acc 	.word	0x20002acc
 8006268:	20002b70 	.word	0x20002b70
 800626c:	20002bfd 	.word	0x20002bfd
 8006270:	20000f92 	.word	0x20000f92
 8006274:	20002c4c 	.word	0x20002c4c
 8006278:	20002aca 	.word	0x20002aca
 800627c:	08016598 	.word	0x08016598
 8006280:	080165a4 	.word	0x080165a4
 8006284:	20000f96 	.word	0x20000f96
 8006288:	080165b0 	.word	0x080165b0
 800628c:	20000f97 	.word	0x20000f97

08006290 <f_Invalid>:
/*********************************************************** END **************************************************************************/


/******************************************** This function use for Printing Invalid ******************************************************/
int f_Invalid(void)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	af00      	add	r7, sp, #0

	if(flag_error)
 8006294:	4b09      	ldr	r3, [pc, #36]	; (80062bc <f_Invalid+0x2c>)
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00c      	beq.n	80062b6 <f_Invalid+0x26>
	{
		HAL_UART_Transmit_IT(&huart1,(uint8_t*)Invalid,strlen(Invalid));
 800629c:	4808      	ldr	r0, [pc, #32]	; (80062c0 <f_Invalid+0x30>)
 800629e:	f7f9 ff97 	bl	80001d0 <strlen>
 80062a2:	4603      	mov	r3, r0
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	461a      	mov	r2, r3
 80062a8:	4905      	ldr	r1, [pc, #20]	; (80062c0 <f_Invalid+0x30>)
 80062aa:	4806      	ldr	r0, [pc, #24]	; (80062c4 <f_Invalid+0x34>)
 80062ac:	f00b fa44 	bl	8011738 <HAL_UART_Transmit_IT>
		flag_error = 0;
 80062b0:	4b02      	ldr	r3, [pc, #8]	; (80062bc <f_Invalid+0x2c>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	701a      	strb	r2, [r3, #0]
	}

return 0;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	200004d8 	.word	0x200004d8
 80062c0:	200004a0 	.word	0x200004a0
 80062c4:	20002b74 	.word	0x20002b74

080062c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80062cc:	f007 fc60 	bl	800db90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80062d0:	f000 fb32 	bl	8006938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80062d4:	f000 fc42 	bl	8006b5c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80062d8:	f000 fc10 	bl	8006afc <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80062dc:	f000 fb7e 	bl	80069dc <MX_I2C2_Init>
  MX_TIM16_Init();
 80062e0:	f000 fbbc 	bl	8006a5c <MX_TIM16_Init>
  MX_TIM17_Init();
 80062e4:	f000 fbe2 	bl	8006aac <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

	// Start timer
	HAL_TIM_Base_Start_IT(&htim16);
 80062e8:	48c7      	ldr	r0, [pc, #796]	; (8006608 <main+0x340>)
 80062ea:	f00a fed3 	bl	8011094 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim17);
 80062ee:	48c7      	ldr	r0, [pc, #796]	; (800660c <main+0x344>)
 80062f0:	f00a fe68 	bl	8010fc4 <HAL_TIM_Base_Start>

	BSP_TSENSOR_Init();
 80062f4:	f001 fd8e 	bl	8007e14 <BSP_TSENSOR_Init>
	BSP_HSENSOR_Init();
 80062f8:	f001 fcec 	bl	8007cd4 <BSP_HSENSOR_Init>
	BSP_PSENSOR_Init();
 80062fc:	f001 fd5c 	bl	8007db8 <BSP_PSENSOR_Init>
	BSP_ACCELERO_Init();
 8006300:	f001 fc38 	bl	8007b74 <BSP_ACCELERO_Init>
	BSP_GYRO_Init();
 8006304:	f001 fc8c 	bl	8007c20 <BSP_GYRO_Init>
	BSP_MAGNETO_Init();
 8006308:	f001 fd12 	bl	8007d30 <BSP_MAGNETO_Init>
	VL53L0X_PROXIMITY_Init();
 800630c:	f7ff fb0a 	bl	8005924 <VL53L0X_PROXIMITY_Init>

	while (TT4_Init() != SUCCESS);
 8006310:	bf00      	nop
 8006312:	f7fe fc27 	bl	8004b64 <TT4_Init>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1fa      	bne.n	8006312 <main+0x4a>

	HAL_UART_Transmit(&huart1,msg1,sizeof(msg1),1000);
 800631c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006320:	222e      	movs	r2, #46	; 0x2e
 8006322:	49bb      	ldr	r1, [pc, #748]	; (8006610 <main+0x348>)
 8006324:	48bb      	ldr	r0, [pc, #748]	; (8006614 <main+0x34c>)
 8006326:	f00b f973 	bl	8011610 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,msg2,sizeof(msg2),1000);
 800632a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800632e:	2219      	movs	r2, #25
 8006330:	49b9      	ldr	r1, [pc, #740]	; (8006618 <main+0x350>)
 8006332:	48b8      	ldr	r0, [pc, #736]	; (8006614 <main+0x34c>)
 8006334:	f00b f96c 	bl	8011610 <HAL_UART_Transmit>

	s_case = f_escape;
 8006338:	4bb8      	ldr	r3, [pc, #736]	; (800661c <main+0x354>)
 800633a:	221b      	movs	r2, #27
 800633c:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_IT(&huart1,rxData,1);
 800633e:	2201      	movs	r2, #1
 8006340:	49b7      	ldr	r1, [pc, #732]	; (8006620 <main+0x358>)
 8006342:	48b4      	ldr	r0, [pc, #720]	; (8006614 <main+0x34c>)
 8006344:	f00b fa66 	bl	8011814 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  NFC_check = HAL_GPIO_ReadPin (GPIOE, M24SR64_Y_GPO_Pin);
 8006348:	2110      	movs	r1, #16
 800634a:	48b6      	ldr	r0, [pc, #728]	; (8006624 <main+0x35c>)
 800634c:	f008 f8e6 	bl	800e51c <HAL_GPIO_ReadPin>
 8006350:	4603      	mov	r3, r0
 8006352:	461a      	mov	r2, r3
 8006354:	4bb4      	ldr	r3, [pc, #720]	; (8006628 <main+0x360>)
 8006356:	701a      	strb	r2, [r3, #0]
	  f_Switch();
 8006358:	f7ff feb4 	bl	80060c4 <f_Switch>

	  /*  This if condition is use for UART1 (Interrupt based) */
		if(newMsg)
 800635c:	4bb3      	ldr	r3, [pc, #716]	; (800662c <main+0x364>)
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d026      	beq.n	80063b2 <main+0xea>
		{

			size = strlen(rxBuffer);
 8006364:	48b2      	ldr	r0, [pc, #712]	; (8006630 <main+0x368>)
 8006366:	f7f9 ff33 	bl	80001d0 <strlen>
 800636a:	4603      	mov	r3, r0
 800636c:	b2da      	uxtb	r2, r3
 800636e:	4bb1      	ldr	r3, [pc, #708]	; (8006634 <main+0x36c>)
 8006370:	701a      	strb	r2, [r3, #0]
			printf("size demo : %d\n",size );
 8006372:	4bb0      	ldr	r3, [pc, #704]	; (8006634 <main+0x36c>)
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	4619      	mov	r1, r3
 8006378:	48af      	ldr	r0, [pc, #700]	; (8006638 <main+0x370>)
 800637a:	f00d fa29 	bl	80137d0 <iprintf>

			if(size == f_size)
 800637e:	4bad      	ldr	r3, [pc, #692]	; (8006634 <main+0x36c>)
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d10a      	bne.n	800639c <main+0xd4>
			{
				s_case= rxBuffer[0];
 8006386:	4baa      	ldr	r3, [pc, #680]	; (8006630 <main+0x368>)
 8006388:	781a      	ldrb	r2, [r3, #0]
 800638a:	4ba4      	ldr	r3, [pc, #656]	; (800661c <main+0x354>)
 800638c:	701a      	strb	r2, [r3, #0]
				printf("%d\n",s_case);
 800638e:	4ba3      	ldr	r3, [pc, #652]	; (800661c <main+0x354>)
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	4619      	mov	r1, r3
 8006394:	48a9      	ldr	r0, [pc, #676]	; (800663c <main+0x374>)
 8006396:	f00d fa1b 	bl	80137d0 <iprintf>
 800639a:	e002      	b.n	80063a2 <main+0xda>
			}
			else
			{
				s_case = f_error;
 800639c:	4b9f      	ldr	r3, [pc, #636]	; (800661c <main+0x354>)
 800639e:	2248      	movs	r2, #72	; 0x48
 80063a0:	701a      	strb	r2, [r3, #0]
			}

			memset(rxBuffer, 0, sizeof(rxBuffer));
 80063a2:	2205      	movs	r2, #5
 80063a4:	2100      	movs	r1, #0
 80063a6:	48a2      	ldr	r0, [pc, #648]	; (8006630 <main+0x368>)
 80063a8:	f00c fda0 	bl	8012eec <memset>
			newMsg=0;
 80063ac:	4b9f      	ldr	r3, [pc, #636]	; (800662c <main+0x364>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	701a      	strb	r2, [r3, #0]
		}

		/* This switch case is using for calling Sensor functions */
		if(f_Menu_flag)												// For main Menu
 80063b2:	4ba3      	ldr	r3, [pc, #652]	; (8006640 <main+0x378>)
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f000 80b9 	beq.w	800652e <main+0x266>
		{
			switch(s_case)
 80063bc:	4b97      	ldr	r3, [pc, #604]	; (800661c <main+0x354>)
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	2b38      	cmp	r3, #56	; 0x38
 80063c2:	f200 80b1 	bhi.w	8006528 <main+0x260>
 80063c6:	a201      	add	r2, pc, #4	; (adr r2, 80063cc <main+0x104>)
 80063c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063cc:	08006533 	.word	0x08006533
 80063d0:	08006529 	.word	0x08006529
 80063d4:	08006529 	.word	0x08006529
 80063d8:	08006529 	.word	0x08006529
 80063dc:	08006529 	.word	0x08006529
 80063e0:	08006529 	.word	0x08006529
 80063e4:	08006529 	.word	0x08006529
 80063e8:	08006529 	.word	0x08006529
 80063ec:	08006529 	.word	0x08006529
 80063f0:	08006529 	.word	0x08006529
 80063f4:	08006529 	.word	0x08006529
 80063f8:	08006529 	.word	0x08006529
 80063fc:	08006529 	.word	0x08006529
 8006400:	08006529 	.word	0x08006529
 8006404:	08006529 	.word	0x08006529
 8006408:	08006529 	.word	0x08006529
 800640c:	08006529 	.word	0x08006529
 8006410:	08006529 	.word	0x08006529
 8006414:	08006529 	.word	0x08006529
 8006418:	08006529 	.word	0x08006529
 800641c:	08006529 	.word	0x08006529
 8006420:	08006529 	.word	0x08006529
 8006424:	08006529 	.word	0x08006529
 8006428:	08006529 	.word	0x08006529
 800642c:	08006529 	.word	0x08006529
 8006430:	08006529 	.word	0x08006529
 8006434:	08006529 	.word	0x08006529
 8006438:	0800651d 	.word	0x0800651d
 800643c:	08006529 	.word	0x08006529
 8006440:	08006529 	.word	0x08006529
 8006444:	08006529 	.word	0x08006529
 8006448:	08006529 	.word	0x08006529
 800644c:	08006529 	.word	0x08006529
 8006450:	08006529 	.word	0x08006529
 8006454:	08006529 	.word	0x08006529
 8006458:	08006529 	.word	0x08006529
 800645c:	08006529 	.word	0x08006529
 8006460:	08006529 	.word	0x08006529
 8006464:	08006529 	.word	0x08006529
 8006468:	08006529 	.word	0x08006529
 800646c:	08006529 	.word	0x08006529
 8006470:	08006529 	.word	0x08006529
 8006474:	08006529 	.word	0x08006529
 8006478:	08006529 	.word	0x08006529
 800647c:	08006529 	.word	0x08006529
 8006480:	08006529 	.word	0x08006529
 8006484:	08006529 	.word	0x08006529
 8006488:	08006529 	.word	0x08006529
 800648c:	08006529 	.word	0x08006529
 8006490:	080064b1 	.word	0x080064b1
 8006494:	080064bd 	.word	0x080064bd
 8006498:	080064c9 	.word	0x080064c9
 800649c:	080064d5 	.word	0x080064d5
 80064a0:	080064e1 	.word	0x080064e1
 80064a4:	080064ed 	.word	0x080064ed
 80064a8:	080064f9 	.word	0x080064f9
 80064ac:	08006505 	.word	0x08006505
				{
					break;
				}
				case f_One:
				{
					sw_flag=0;
 80064b0:	4b64      	ldr	r3, [pc, #400]	; (8006644 <main+0x37c>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	701a      	strb	r2, [r3, #0]
					f_Temperature();
 80064b6:	f7ff faad 	bl	8005a14 <f_Temperature>
					break;
 80064ba:	e03b      	b.n	8006534 <main+0x26c>
				}
				case f_Two:
				{
					sw_flag=0;
 80064bc:	4b61      	ldr	r3, [pc, #388]	; (8006644 <main+0x37c>)
 80064be:	2200      	movs	r2, #0
 80064c0:	701a      	strb	r2, [r3, #0]
					f_Humidity();
 80064c2:	f7ff faf7 	bl	8005ab4 <f_Humidity>
					break;
 80064c6:	e035      	b.n	8006534 <main+0x26c>
				}
				case f_Three:
				{

					sw_flag=0;
 80064c8:	4b5e      	ldr	r3, [pc, #376]	; (8006644 <main+0x37c>)
 80064ca:	2200      	movs	r2, #0
 80064cc:	701a      	strb	r2, [r3, #0]
					f_Pressure();
 80064ce:	f7ff fb41 	bl	8005b54 <f_Pressure>
					break;
 80064d2:	e02f      	b.n	8006534 <main+0x26c>
				}
				case f_Four:
				{
					sw_flag=0;
 80064d4:	4b5b      	ldr	r3, [pc, #364]	; (8006644 <main+0x37c>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	701a      	strb	r2, [r3, #0]
					f_ACCELEROMETER();
 80064da:	f7ff fb8b 	bl	8005bf4 <f_ACCELEROMETER>
					break;
 80064de:	e029      	b.n	8006534 <main+0x26c>
				}
				case f_Five:
				{
					sw_flag=0;
 80064e0:	4b58      	ldr	r3, [pc, #352]	; (8006644 <main+0x37c>)
 80064e2:	2200      	movs	r2, #0
 80064e4:	701a      	strb	r2, [r3, #0]
					f_GYRO();
 80064e6:	f7ff fbd9 	bl	8005c9c <f_GYRO>
					break;
 80064ea:	e023      	b.n	8006534 <main+0x26c>
				}
				case f_Six:
				{
					sw_flag=0;
 80064ec:	4b55      	ldr	r3, [pc, #340]	; (8006644 <main+0x37c>)
 80064ee:	2200      	movs	r2, #0
 80064f0:	701a      	strb	r2, [r3, #0]
					f_MAGNETOMETERR();
 80064f2:	f7ff fc35 	bl	8005d60 <f_MAGNETOMETERR>
					break;
 80064f6:	e01d      	b.n	8006534 <main+0x26c>
				}
				case f_Seven:
				{
					sw_flag=0;
 80064f8:	4b52      	ldr	r3, [pc, #328]	; (8006644 <main+0x37c>)
 80064fa:	2200      	movs	r2, #0
 80064fc:	701a      	strb	r2, [r3, #0]
					Proximity_Test();
 80064fe:	f7ff f9e3 	bl	80058c8 <Proximity_Test>
					break;
 8006502:	e017      	b.n	8006534 <main+0x26c>
				}
				case f_Eight:
				{
					sw_flag=0;
 8006504:	4b4f      	ldr	r3, [pc, #316]	; (8006644 <main+0x37c>)
 8006506:	2200      	movs	r2, #0
 8006508:	701a      	strb	r2, [r3, #0]
					f_NFC_flag=1;
 800650a:	4b4f      	ldr	r3, [pc, #316]	; (8006648 <main+0x380>)
 800650c:	2201      	movs	r2, #1
 800650e:	701a      	strb	r2, [r3, #0]
					f_NFC();
 8006510:	f7fe fd0e 	bl	8004f30 <f_NFC>
					s_case=0;
 8006514:	4b41      	ldr	r3, [pc, #260]	; (800661c <main+0x354>)
 8006516:	2200      	movs	r2, #0
 8006518:	701a      	strb	r2, [r3, #0]
					break;
 800651a:	e00b      	b.n	8006534 <main+0x26c>
				}

				case f_escape:
				{
					sw_flag=0;
 800651c:	4b49      	ldr	r3, [pc, #292]	; (8006644 <main+0x37c>)
 800651e:	2200      	movs	r2, #0
 8006520:	701a      	strb	r2, [r3, #0]
					f_Menu();
 8006522:	f7ff fd9d 	bl	8006060 <f_Menu>
					break;
 8006526:	e005      	b.n	8006534 <main+0x26c>
				}
				default :
				{
					f_Invalid();
 8006528:	f7ff feb2 	bl	8006290 <f_Invalid>
 800652c:	e002      	b.n	8006534 <main+0x26c>
				}
			}
		}
 800652e:	bf00      	nop
 8006530:	e000      	b.n	8006534 <main+0x26c>
					break;
 8006532:	bf00      	nop

	/****************************************************/

		if(f_NFC_flag)												// For main NFC Menu
 8006534:	4b44      	ldr	r3, [pc, #272]	; (8006648 <main+0x380>)
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d063      	beq.n	8006604 <main+0x33c>
		{
			switch(s_case)
 800653c:	4b37      	ldr	r3, [pc, #220]	; (800661c <main+0x354>)
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	f000 8083 	beq.w	800664c <main+0x384>
 8006546:	2b00      	cmp	r3, #0
 8006548:	db59      	blt.n	80065fe <main+0x336>
 800654a:	2b34      	cmp	r3, #52	; 0x34
 800654c:	dc57      	bgt.n	80065fe <main+0x336>
 800654e:	2b1b      	cmp	r3, #27
 8006550:	db55      	blt.n	80065fe <main+0x336>
 8006552:	3b1b      	subs	r3, #27
 8006554:	2b19      	cmp	r3, #25
 8006556:	d852      	bhi.n	80065fe <main+0x336>
 8006558:	a201      	add	r2, pc, #4	; (adr r2, 8006560 <main+0x298>)
 800655a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655e:	bf00      	nop
 8006560:	080065f3 	.word	0x080065f3
 8006564:	080065ff 	.word	0x080065ff
 8006568:	080065ff 	.word	0x080065ff
 800656c:	080065ff 	.word	0x080065ff
 8006570:	080065ff 	.word	0x080065ff
 8006574:	080065ff 	.word	0x080065ff
 8006578:	080065ff 	.word	0x080065ff
 800657c:	080065ff 	.word	0x080065ff
 8006580:	080065ff 	.word	0x080065ff
 8006584:	080065ff 	.word	0x080065ff
 8006588:	080065ff 	.word	0x080065ff
 800658c:	080065ff 	.word	0x080065ff
 8006590:	080065ff 	.word	0x080065ff
 8006594:	080065ff 	.word	0x080065ff
 8006598:	080065ff 	.word	0x080065ff
 800659c:	080065ff 	.word	0x080065ff
 80065a0:	080065ff 	.word	0x080065ff
 80065a4:	080065ff 	.word	0x080065ff
 80065a8:	080065ff 	.word	0x080065ff
 80065ac:	080065ff 	.word	0x080065ff
 80065b0:	080065ff 	.word	0x080065ff
 80065b4:	080065ff 	.word	0x080065ff
 80065b8:	080065c9 	.word	0x080065c9
 80065bc:	080065cf 	.word	0x080065cf
 80065c0:	080065db 	.word	0x080065db
 80065c4:	080065e7 	.word	0x080065e7
				{
					break;
				}
				case f_One:
				{
					f_NFC_D();
 80065c8:	f7fe fce4 	bl	8004f94 <f_NFC_D>
					//s_case=0;
					break;
 80065cc:	e03f      	b.n	800664e <main+0x386>
				}
				case f_Two:
				{
					f_NFC_W();
 80065ce:	f7fe fd07 	bl	8004fe0 <f_NFC_W>
					s_case=0;
 80065d2:	4b12      	ldr	r3, [pc, #72]	; (800661c <main+0x354>)
 80065d4:	2200      	movs	r2, #0
 80065d6:	701a      	strb	r2, [r3, #0]
					break;
 80065d8:	e039      	b.n	800664e <main+0x386>
				}
				case f_Three:
				{
					f_NFC_R();
 80065da:	f7fe fd33 	bl	8005044 <f_NFC_R>
					s_case=0;
 80065de:	4b0f      	ldr	r3, [pc, #60]	; (800661c <main+0x354>)
 80065e0:	2200      	movs	r2, #0
 80065e2:	701a      	strb	r2, [r3, #0]
					break;
 80065e4:	e033      	b.n	800664e <main+0x386>
				}
				case f_Four:
				{
					sw_flag=0;
 80065e6:	4b17      	ldr	r3, [pc, #92]	; (8006644 <main+0x37c>)
 80065e8:	2200      	movs	r2, #0
 80065ea:	701a      	strb	r2, [r3, #0]
					f_Menu();
 80065ec:	f7ff fd38 	bl	8006060 <f_Menu>
					break;
 80065f0:	e02d      	b.n	800664e <main+0x386>
				}
				case f_escape:
				{
					sw_flag=0;
 80065f2:	4b14      	ldr	r3, [pc, #80]	; (8006644 <main+0x37c>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	701a      	strb	r2, [r3, #0]
					f_Menu();
 80065f8:	f7ff fd32 	bl	8006060 <f_Menu>
					break;
 80065fc:	e027      	b.n	800664e <main+0x386>
				}
				default :
				{
					f_Invalid();
 80065fe:	f7ff fe47 	bl	8006290 <f_Invalid>
 8006602:	e024      	b.n	800664e <main+0x386>
				}
			}
		}
 8006604:	bf00      	nop
 8006606:	e022      	b.n	800664e <main+0x386>
 8006608:	20002c00 	.word	0x20002c00
 800660c:	20002b24 	.word	0x20002b24
 8006610:	200001a0 	.word	0x200001a0
 8006614:	20002b74 	.word	0x20002b74
 8006618:	200001d0 	.word	0x200001d0
 800661c:	20000f97 	.word	0x20000f97
 8006620:	20002ac8 	.word	0x20002ac8
 8006624:	48001000 	.word	0x48001000
 8006628:	20000f9b 	.word	0x20000f9b
 800662c:	20000f9c 	.word	0x20000f9c
 8006630:	20002bf8 	.word	0x20002bf8
 8006634:	20000f9e 	.word	0x20000f9e
 8006638:	080165bc 	.word	0x080165bc
 800663c:	080165cc 	.word	0x080165cc
 8006640:	200004c6 	.word	0x200004c6
 8006644:	20000f96 	.word	0x20000f96
 8006648:	20000f98 	.word	0x20000f98
					break;
 800664c:	bf00      	nop

		if(f_NFC_W_flag)											// For main NFC Write Menu
 800664e:	4bb4      	ldr	r3, [pc, #720]	; (8006920 <main+0x658>)
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	f000 80b0 	beq.w	80067b8 <main+0x4f0>
		{
			switch(s_case)
 8006658:	4bb2      	ldr	r3, [pc, #712]	; (8006924 <main+0x65c>)
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	2b36      	cmp	r3, #54	; 0x36
 800665e:	f200 80a8 	bhi.w	80067b2 <main+0x4ea>
 8006662:	a201      	add	r2, pc, #4	; (adr r2, 8006668 <main+0x3a0>)
 8006664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006668:	080067bd 	.word	0x080067bd
 800666c:	080067b3 	.word	0x080067b3
 8006670:	080067b3 	.word	0x080067b3
 8006674:	080067b3 	.word	0x080067b3
 8006678:	080067b3 	.word	0x080067b3
 800667c:	080067b3 	.word	0x080067b3
 8006680:	080067b3 	.word	0x080067b3
 8006684:	080067b3 	.word	0x080067b3
 8006688:	080067b3 	.word	0x080067b3
 800668c:	080067b3 	.word	0x080067b3
 8006690:	080067b3 	.word	0x080067b3
 8006694:	080067b3 	.word	0x080067b3
 8006698:	080067b3 	.word	0x080067b3
 800669c:	080067b3 	.word	0x080067b3
 80066a0:	080067b3 	.word	0x080067b3
 80066a4:	080067b3 	.word	0x080067b3
 80066a8:	080067b3 	.word	0x080067b3
 80066ac:	080067b3 	.word	0x080067b3
 80066b0:	080067b3 	.word	0x080067b3
 80066b4:	080067b3 	.word	0x080067b3
 80066b8:	080067b3 	.word	0x080067b3
 80066bc:	080067b3 	.word	0x080067b3
 80066c0:	080067b3 	.word	0x080067b3
 80066c4:	080067b3 	.word	0x080067b3
 80066c8:	080067b3 	.word	0x080067b3
 80066cc:	080067b3 	.word	0x080067b3
 80066d0:	080067b3 	.word	0x080067b3
 80066d4:	080067a7 	.word	0x080067a7
 80066d8:	080067b3 	.word	0x080067b3
 80066dc:	080067b3 	.word	0x080067b3
 80066e0:	080067b3 	.word	0x080067b3
 80066e4:	080067b3 	.word	0x080067b3
 80066e8:	080067b3 	.word	0x080067b3
 80066ec:	080067b3 	.word	0x080067b3
 80066f0:	080067b3 	.word	0x080067b3
 80066f4:	080067b3 	.word	0x080067b3
 80066f8:	080067b3 	.word	0x080067b3
 80066fc:	080067b3 	.word	0x080067b3
 8006700:	080067b3 	.word	0x080067b3
 8006704:	080067b3 	.word	0x080067b3
 8006708:	080067b3 	.word	0x080067b3
 800670c:	080067b3 	.word	0x080067b3
 8006710:	080067b3 	.word	0x080067b3
 8006714:	080067b3 	.word	0x080067b3
 8006718:	080067b3 	.word	0x080067b3
 800671c:	080067b3 	.word	0x080067b3
 8006720:	080067b3 	.word	0x080067b3
 8006724:	080067b3 	.word	0x080067b3
 8006728:	080067b3 	.word	0x080067b3
 800672c:	08006745 	.word	0x08006745
 8006730:	08006753 	.word	0x08006753
 8006734:	08006761 	.word	0x08006761
 8006738:	0800676f 	.word	0x0800676f
 800673c:	0800677f 	.word	0x0800677f
 8006740:	0800678f 	.word	0x0800678f
				{
					break;
				}
				case f_One:
				{
					s_case=0;
 8006744:	4b77      	ldr	r3, [pc, #476]	; (8006924 <main+0x65c>)
 8006746:	2200      	movs	r2, #0
 8006748:	701a      	strb	r2, [r3, #0]
					NFC_examples[0].DemoFunc();
 800674a:	4b77      	ldr	r3, [pc, #476]	; (8006928 <main+0x660>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4798      	blx	r3
					break;
 8006750:	e035      	b.n	80067be <main+0x4f6>
				}
				case f_Two:
				{
					s_case=0;
 8006752:	4b74      	ldr	r3, [pc, #464]	; (8006924 <main+0x65c>)
 8006754:	2200      	movs	r2, #0
 8006756:	701a      	strb	r2, [r3, #0]
					NFC_examples[2].DemoFunc();
 8006758:	4b73      	ldr	r3, [pc, #460]	; (8006928 <main+0x660>)
 800675a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675c:	4798      	blx	r3
					break;
 800675e:	e02e      	b.n	80067be <main+0x4f6>
				}
				case f_Three:
				{
					s_case=0;
 8006760:	4b70      	ldr	r3, [pc, #448]	; (8006924 <main+0x65c>)
 8006762:	2200      	movs	r2, #0
 8006764:	701a      	strb	r2, [r3, #0]
					NFC_examples[4].DemoFunc();
 8006766:	4b70      	ldr	r3, [pc, #448]	; (8006928 <main+0x660>)
 8006768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800676a:	4798      	blx	r3
					break;
 800676c:	e027      	b.n	80067be <main+0x4f6>
				}
				case f_Four:
				{
					s_case=0;
 800676e:	4b6d      	ldr	r3, [pc, #436]	; (8006924 <main+0x65c>)
 8006770:	2200      	movs	r2, #0
 8006772:	701a      	strb	r2, [r3, #0]
					NFC_examples[6].DemoFunc();
 8006774:	4b6c      	ldr	r3, [pc, #432]	; (8006928 <main+0x660>)
 8006776:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800677a:	4798      	blx	r3
					break;
 800677c:	e01f      	b.n	80067be <main+0x4f6>
				}
				case f_Five:
				{
					s_case=0;
 800677e:	4b69      	ldr	r3, [pc, #420]	; (8006924 <main+0x65c>)
 8006780:	2200      	movs	r2, #0
 8006782:	701a      	strb	r2, [r3, #0]
					NFC_examples[8].DemoFunc();
 8006784:	4b68      	ldr	r3, [pc, #416]	; (8006928 <main+0x660>)
 8006786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800678a:	4798      	blx	r3
					break;
 800678c:	e017      	b.n	80067be <main+0x4f6>
				}
				case f_Six:
				{
					sw_flag=0;
 800678e:	4b67      	ldr	r3, [pc, #412]	; (800692c <main+0x664>)
 8006790:	2200      	movs	r2, #0
 8006792:	701a      	strb	r2, [r3, #0]
					f_NFC_flag=1;
 8006794:	4b66      	ldr	r3, [pc, #408]	; (8006930 <main+0x668>)
 8006796:	2201      	movs	r2, #1
 8006798:	701a      	strb	r2, [r3, #0]
					f_NFC();
 800679a:	f7fe fbc9 	bl	8004f30 <f_NFC>
					s_case=0;
 800679e:	4b61      	ldr	r3, [pc, #388]	; (8006924 <main+0x65c>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	701a      	strb	r2, [r3, #0]
					break;
 80067a4:	e00b      	b.n	80067be <main+0x4f6>
				}
				case f_escape:
				{
					sw_flag=0;
 80067a6:	4b61      	ldr	r3, [pc, #388]	; (800692c <main+0x664>)
 80067a8:	2200      	movs	r2, #0
 80067aa:	701a      	strb	r2, [r3, #0]
					f_Menu();
 80067ac:	f7ff fc58 	bl	8006060 <f_Menu>
					break;
 80067b0:	e005      	b.n	80067be <main+0x4f6>
				}
				default :
				{
					f_Invalid();
 80067b2:	f7ff fd6d 	bl	8006290 <f_Invalid>
 80067b6:	e002      	b.n	80067be <main+0x4f6>
				}

			}
		}
 80067b8:	bf00      	nop
 80067ba:	e000      	b.n	80067be <main+0x4f6>
					break;
 80067bc:	bf00      	nop
		if(f_NFC_R_flag)
 80067be:	4b5d      	ldr	r3, [pc, #372]	; (8006934 <main+0x66c>)
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	f000 80a7 	beq.w	8006916 <main+0x64e>
		{
			switch(s_case)
 80067c8:	4b56      	ldr	r3, [pc, #344]	; (8006924 <main+0x65c>)
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	2b35      	cmp	r3, #53	; 0x35
 80067ce:	f200 809f 	bhi.w	8006910 <main+0x648>
 80067d2:	a201      	add	r2, pc, #4	; (adr r2, 80067d8 <main+0x510>)
 80067d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d8:	0800691b 	.word	0x0800691b
 80067dc:	08006911 	.word	0x08006911
 80067e0:	08006911 	.word	0x08006911
 80067e4:	08006911 	.word	0x08006911
 80067e8:	08006911 	.word	0x08006911
 80067ec:	08006911 	.word	0x08006911
 80067f0:	08006911 	.word	0x08006911
 80067f4:	08006911 	.word	0x08006911
 80067f8:	08006911 	.word	0x08006911
 80067fc:	08006911 	.word	0x08006911
 8006800:	08006911 	.word	0x08006911
 8006804:	08006911 	.word	0x08006911
 8006808:	08006911 	.word	0x08006911
 800680c:	08006911 	.word	0x08006911
 8006810:	08006911 	.word	0x08006911
 8006814:	08006911 	.word	0x08006911
 8006818:	08006911 	.word	0x08006911
 800681c:	08006911 	.word	0x08006911
 8006820:	08006911 	.word	0x08006911
 8006824:	08006911 	.word	0x08006911
 8006828:	08006911 	.word	0x08006911
 800682c:	08006911 	.word	0x08006911
 8006830:	08006911 	.word	0x08006911
 8006834:	08006911 	.word	0x08006911
 8006838:	08006911 	.word	0x08006911
 800683c:	08006911 	.word	0x08006911
 8006840:	08006911 	.word	0x08006911
 8006844:	08006905 	.word	0x08006905
 8006848:	08006911 	.word	0x08006911
 800684c:	08006911 	.word	0x08006911
 8006850:	08006911 	.word	0x08006911
 8006854:	08006911 	.word	0x08006911
 8006858:	08006911 	.word	0x08006911
 800685c:	08006911 	.word	0x08006911
 8006860:	08006911 	.word	0x08006911
 8006864:	08006911 	.word	0x08006911
 8006868:	08006911 	.word	0x08006911
 800686c:	08006911 	.word	0x08006911
 8006870:	08006911 	.word	0x08006911
 8006874:	08006911 	.word	0x08006911
 8006878:	08006911 	.word	0x08006911
 800687c:	08006911 	.word	0x08006911
 8006880:	08006911 	.word	0x08006911
 8006884:	08006911 	.word	0x08006911
 8006888:	08006911 	.word	0x08006911
 800688c:	08006911 	.word	0x08006911
 8006890:	08006911 	.word	0x08006911
 8006894:	08006911 	.word	0x08006911
 8006898:	08006911 	.word	0x08006911
 800689c:	080068b1 	.word	0x080068b1
 80068a0:	080068bf 	.word	0x080068bf
 80068a4:	080068cd 	.word	0x080068cd
 80068a8:	080068dd 	.word	0x080068dd
 80068ac:	080068ed 	.word	0x080068ed
				{
					break;
				}
				case f_One:
				{
					s_case=0;
 80068b0:	4b1c      	ldr	r3, [pc, #112]	; (8006924 <main+0x65c>)
 80068b2:	2200      	movs	r2, #0
 80068b4:	701a      	strb	r2, [r3, #0]
					NFC_examples[1].DemoFunc();
 80068b6:	4b1c      	ldr	r3, [pc, #112]	; (8006928 <main+0x660>)
 80068b8:	69db      	ldr	r3, [r3, #28]
 80068ba:	4798      	blx	r3
					break;
 80068bc:	e02e      	b.n	800691c <main+0x654>
				}
				case f_Two:
				{
					s_case=0;
 80068be:	4b19      	ldr	r3, [pc, #100]	; (8006924 <main+0x65c>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	701a      	strb	r2, [r3, #0]
					NFC_examples[3].DemoFunc();
 80068c4:	4b18      	ldr	r3, [pc, #96]	; (8006928 <main+0x660>)
 80068c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068c8:	4798      	blx	r3
					break;
 80068ca:	e027      	b.n	800691c <main+0x654>
				}
				case f_Three:
				{
					s_case=0;
 80068cc:	4b15      	ldr	r3, [pc, #84]	; (8006924 <main+0x65c>)
 80068ce:	2200      	movs	r2, #0
 80068d0:	701a      	strb	r2, [r3, #0]
					NFC_examples[5].DemoFunc();
 80068d2:	4b15      	ldr	r3, [pc, #84]	; (8006928 <main+0x660>)
 80068d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068d8:	4798      	blx	r3
					break;
 80068da:	e01f      	b.n	800691c <main+0x654>
				}
				case f_Four:
				{
					s_case=0;
 80068dc:	4b11      	ldr	r3, [pc, #68]	; (8006924 <main+0x65c>)
 80068de:	2200      	movs	r2, #0
 80068e0:	701a      	strb	r2, [r3, #0]
					NFC_examples[7].DemoFunc();
 80068e2:	4b11      	ldr	r3, [pc, #68]	; (8006928 <main+0x660>)
 80068e4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80068e8:	4798      	blx	r3
					break;
 80068ea:	e017      	b.n	800691c <main+0x654>
				}
				case f_Five:
				{
					sw_flag=0;
 80068ec:	4b0f      	ldr	r3, [pc, #60]	; (800692c <main+0x664>)
 80068ee:	2200      	movs	r2, #0
 80068f0:	701a      	strb	r2, [r3, #0]
					f_NFC_flag=1;
 80068f2:	4b0f      	ldr	r3, [pc, #60]	; (8006930 <main+0x668>)
 80068f4:	2201      	movs	r2, #1
 80068f6:	701a      	strb	r2, [r3, #0]
					f_NFC();
 80068f8:	f7fe fb1a 	bl	8004f30 <f_NFC>
					s_case=0;
 80068fc:	4b09      	ldr	r3, [pc, #36]	; (8006924 <main+0x65c>)
 80068fe:	2200      	movs	r2, #0
 8006900:	701a      	strb	r2, [r3, #0]
					break;
 8006902:	e00b      	b.n	800691c <main+0x654>
				}
				case f_escape:
				{
					sw_flag=0;
 8006904:	4b09      	ldr	r3, [pc, #36]	; (800692c <main+0x664>)
 8006906:	2200      	movs	r2, #0
 8006908:	701a      	strb	r2, [r3, #0]
					f_Menu();
 800690a:	f7ff fba9 	bl	8006060 <f_Menu>
					break;
 800690e:	e005      	b.n	800691c <main+0x654>
				}
				default :
				{
					f_Invalid();
 8006910:	f7ff fcbe 	bl	8006290 <f_Invalid>
 8006914:	e518      	b.n	8006348 <main+0x80>
				}
			}
		}
 8006916:	bf00      	nop
 8006918:	e516      	b.n	8006348 <main+0x80>
					break;
 800691a:	bf00      	nop
	  NFC_check = HAL_GPIO_ReadPin (GPIOE, M24SR64_Y_GPO_Pin);
 800691c:	e514      	b.n	8006348 <main+0x80>
 800691e:	bf00      	nop
 8006920:	20000f99 	.word	0x20000f99
 8006924:	20000f97 	.word	0x20000f97
 8006928:	200005f4 	.word	0x200005f4
 800692c:	20000f96 	.word	0x20000f96
 8006930:	20000f98 	.word	0x20000f98
 8006934:	20000f9a 	.word	0x20000f9a

08006938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b096      	sub	sp, #88	; 0x58
 800693c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800693e:	f107 0314 	add.w	r3, r7, #20
 8006942:	2244      	movs	r2, #68	; 0x44
 8006944:	2100      	movs	r1, #0
 8006946:	4618      	mov	r0, r3
 8006948:	f00c fad0 	bl	8012eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800694c:	463b      	mov	r3, r7
 800694e:	2200      	movs	r2, #0
 8006950:	601a      	str	r2, [r3, #0]
 8006952:	605a      	str	r2, [r3, #4]
 8006954:	609a      	str	r2, [r3, #8]
 8006956:	60da      	str	r2, [r3, #12]
 8006958:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800695a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800695e:	f008 ffc9 	bl	800f8f4 <HAL_PWREx_ControlVoltageScaling>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8006968:	f000 fbe0 	bl	800712c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800696c:	2310      	movs	r3, #16
 800696e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8006970:	2301      	movs	r3, #1
 8006972:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8006974:	2300      	movs	r3, #0
 8006976:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8006978:	2360      	movs	r3, #96	; 0x60
 800697a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800697c:	2302      	movs	r3, #2
 800697e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8006980:	2301      	movs	r3, #1
 8006982:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8006984:	2301      	movs	r3, #1
 8006986:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8006988:	2328      	movs	r3, #40	; 0x28
 800698a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800698c:	2307      	movs	r3, #7
 800698e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8006990:	2302      	movs	r3, #2
 8006992:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006994:	2302      	movs	r3, #2
 8006996:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006998:	f107 0314 	add.w	r3, r7, #20
 800699c:	4618      	mov	r0, r3
 800699e:	f008 ffff 	bl	800f9a0 <HAL_RCC_OscConfig>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d001      	beq.n	80069ac <SystemClock_Config+0x74>
  {
    Error_Handler();
 80069a8:	f000 fbc0 	bl	800712c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80069ac:	230f      	movs	r3, #15
 80069ae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80069b0:	2303      	movs	r3, #3
 80069b2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80069b4:	2300      	movs	r3, #0
 80069b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80069b8:	2300      	movs	r3, #0
 80069ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80069bc:	2300      	movs	r3, #0
 80069be:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80069c0:	463b      	mov	r3, r7
 80069c2:	2104      	movs	r1, #4
 80069c4:	4618      	mov	r0, r3
 80069c6:	f009 fbc5 	bl	8010154 <HAL_RCC_ClockConfig>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d001      	beq.n	80069d4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80069d0:	f000 fbac 	bl	800712c <Error_Handler>
  }
}
 80069d4:	bf00      	nop
 80069d6:	3758      	adds	r7, #88	; 0x58
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80069e0:	4b1b      	ldr	r3, [pc, #108]	; (8006a50 <MX_I2C2_Init+0x74>)
 80069e2:	4a1c      	ldr	r2, [pc, #112]	; (8006a54 <MX_I2C2_Init+0x78>)
 80069e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80069e6:	4b1a      	ldr	r3, [pc, #104]	; (8006a50 <MX_I2C2_Init+0x74>)
 80069e8:	4a1b      	ldr	r2, [pc, #108]	; (8006a58 <MX_I2C2_Init+0x7c>)
 80069ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80069ec:	4b18      	ldr	r3, [pc, #96]	; (8006a50 <MX_I2C2_Init+0x74>)
 80069ee:	2200      	movs	r2, #0
 80069f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80069f2:	4b17      	ldr	r3, [pc, #92]	; (8006a50 <MX_I2C2_Init+0x74>)
 80069f4:	2201      	movs	r2, #1
 80069f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80069f8:	4b15      	ldr	r3, [pc, #84]	; (8006a50 <MX_I2C2_Init+0x74>)
 80069fa:	2200      	movs	r2, #0
 80069fc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80069fe:	4b14      	ldr	r3, [pc, #80]	; (8006a50 <MX_I2C2_Init+0x74>)
 8006a00:	2200      	movs	r2, #0
 8006a02:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006a04:	4b12      	ldr	r3, [pc, #72]	; (8006a50 <MX_I2C2_Init+0x74>)
 8006a06:	2200      	movs	r2, #0
 8006a08:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006a0a:	4b11      	ldr	r3, [pc, #68]	; (8006a50 <MX_I2C2_Init+0x74>)
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006a10:	4b0f      	ldr	r3, [pc, #60]	; (8006a50 <MX_I2C2_Init+0x74>)
 8006a12:	2200      	movs	r2, #0
 8006a14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006a16:	480e      	ldr	r0, [pc, #56]	; (8006a50 <MX_I2C2_Init+0x74>)
 8006a18:	f007 fdc8 	bl	800e5ac <HAL_I2C_Init>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d001      	beq.n	8006a26 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8006a22:	f000 fb83 	bl	800712c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006a26:	2100      	movs	r1, #0
 8006a28:	4809      	ldr	r0, [pc, #36]	; (8006a50 <MX_I2C2_Init+0x74>)
 8006a2a:	f008 febd 	bl	800f7a8 <HAL_I2CEx_ConfigAnalogFilter>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d001      	beq.n	8006a38 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8006a34:	f000 fb7a 	bl	800712c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006a38:	2100      	movs	r1, #0
 8006a3a:	4805      	ldr	r0, [pc, #20]	; (8006a50 <MX_I2C2_Init+0x74>)
 8006a3c:	f008 feff 	bl	800f83e <HAL_I2CEx_ConfigDigitalFilter>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d001      	beq.n	8006a4a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8006a46:	f000 fb71 	bl	800712c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006a4a:	bf00      	nop
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	20002ad0 	.word	0x20002ad0
 8006a54:	40005800 	.word	0x40005800
 8006a58:	10909cec 	.word	0x10909cec

08006a5c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8006a60:	4b10      	ldr	r3, [pc, #64]	; (8006aa4 <MX_TIM16_Init+0x48>)
 8006a62:	4a11      	ldr	r2, [pc, #68]	; (8006aa8 <MX_TIM16_Init+0x4c>)
 8006a64:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000-1;
 8006a66:	4b0f      	ldr	r3, [pc, #60]	; (8006aa4 <MX_TIM16_Init+0x48>)
 8006a68:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8006a6c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a6e:	4b0d      	ldr	r3, [pc, #52]	; (8006aa4 <MX_TIM16_Init+0x48>)
 8006a70:	2200      	movs	r2, #0
 8006a72:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = f_count;
 8006a74:	4b0b      	ldr	r3, [pc, #44]	; (8006aa4 <MX_TIM16_Init+0x48>)
 8006a76:	f242 7210 	movw	r2, #10000	; 0x2710
 8006a7a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a7c:	4b09      	ldr	r3, [pc, #36]	; (8006aa4 <MX_TIM16_Init+0x48>)
 8006a7e:	2200      	movs	r2, #0
 8006a80:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8006a82:	4b08      	ldr	r3, [pc, #32]	; (8006aa4 <MX_TIM16_Init+0x48>)
 8006a84:	2200      	movs	r2, #0
 8006a86:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a88:	4b06      	ldr	r3, [pc, #24]	; (8006aa4 <MX_TIM16_Init+0x48>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8006a8e:	4805      	ldr	r0, [pc, #20]	; (8006aa4 <MX_TIM16_Init+0x48>)
 8006a90:	f00a fa40 	bl	8010f14 <HAL_TIM_Base_Init>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d001      	beq.n	8006a9e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8006a9a:	f000 fb47 	bl	800712c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8006a9e:	bf00      	nop
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	20002c00 	.word	0x20002c00
 8006aa8:	40014400 	.word	0x40014400

08006aac <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8006ab0:	4b10      	ldr	r3, [pc, #64]	; (8006af4 <MX_TIM17_Init+0x48>)
 8006ab2:	4a11      	ldr	r2, [pc, #68]	; (8006af8 <MX_TIM17_Init+0x4c>)
 8006ab4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 8000-1;
 8006ab6:	4b0f      	ldr	r3, [pc, #60]	; (8006af4 <MX_TIM17_Init+0x48>)
 8006ab8:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8006abc:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006abe:	4b0d      	ldr	r3, [pc, #52]	; (8006af4 <MX_TIM17_Init+0x48>)
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8006ac4:	4b0b      	ldr	r3, [pc, #44]	; (8006af4 <MX_TIM17_Init+0x48>)
 8006ac6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006aca:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006acc:	4b09      	ldr	r3, [pc, #36]	; (8006af4 <MX_TIM17_Init+0x48>)
 8006ace:	2200      	movs	r2, #0
 8006ad0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8006ad2:	4b08      	ldr	r3, [pc, #32]	; (8006af4 <MX_TIM17_Init+0x48>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ad8:	4b06      	ldr	r3, [pc, #24]	; (8006af4 <MX_TIM17_Init+0x48>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8006ade:	4805      	ldr	r0, [pc, #20]	; (8006af4 <MX_TIM17_Init+0x48>)
 8006ae0:	f00a fa18 	bl	8010f14 <HAL_TIM_Base_Init>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d001      	beq.n	8006aee <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8006aea:	f000 fb1f 	bl	800712c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8006aee:	bf00      	nop
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	20002b24 	.word	0x20002b24
 8006af8:	40014800 	.word	0x40014800

08006afc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006b00:	4b14      	ldr	r3, [pc, #80]	; (8006b54 <MX_USART1_UART_Init+0x58>)
 8006b02:	4a15      	ldr	r2, [pc, #84]	; (8006b58 <MX_USART1_UART_Init+0x5c>)
 8006b04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006b06:	4b13      	ldr	r3, [pc, #76]	; (8006b54 <MX_USART1_UART_Init+0x58>)
 8006b08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006b0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006b0e:	4b11      	ldr	r3, [pc, #68]	; (8006b54 <MX_USART1_UART_Init+0x58>)
 8006b10:	2200      	movs	r2, #0
 8006b12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006b14:	4b0f      	ldr	r3, [pc, #60]	; (8006b54 <MX_USART1_UART_Init+0x58>)
 8006b16:	2200      	movs	r2, #0
 8006b18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006b1a:	4b0e      	ldr	r3, [pc, #56]	; (8006b54 <MX_USART1_UART_Init+0x58>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006b20:	4b0c      	ldr	r3, [pc, #48]	; (8006b54 <MX_USART1_UART_Init+0x58>)
 8006b22:	220c      	movs	r2, #12
 8006b24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006b26:	4b0b      	ldr	r3, [pc, #44]	; (8006b54 <MX_USART1_UART_Init+0x58>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006b2c:	4b09      	ldr	r3, [pc, #36]	; (8006b54 <MX_USART1_UART_Init+0x58>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006b32:	4b08      	ldr	r3, [pc, #32]	; (8006b54 <MX_USART1_UART_Init+0x58>)
 8006b34:	2200      	movs	r2, #0
 8006b36:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006b38:	4b06      	ldr	r3, [pc, #24]	; (8006b54 <MX_USART1_UART_Init+0x58>)
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006b3e:	4805      	ldr	r0, [pc, #20]	; (8006b54 <MX_USART1_UART_Init+0x58>)
 8006b40:	f00a fd18 	bl	8011574 <HAL_UART_Init>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d001      	beq.n	8006b4e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8006b4a:	f000 faef 	bl	800712c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006b4e:	bf00      	nop
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	20002b74 	.word	0x20002b74
 8006b58:	40013800 	.word	0x40013800

08006b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b08a      	sub	sp, #40	; 0x28
 8006b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b62:	f107 0314 	add.w	r3, r7, #20
 8006b66:	2200      	movs	r2, #0
 8006b68:	601a      	str	r2, [r3, #0]
 8006b6a:	605a      	str	r2, [r3, #4]
 8006b6c:	609a      	str	r2, [r3, #8]
 8006b6e:	60da      	str	r2, [r3, #12]
 8006b70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b72:	4bbc      	ldr	r3, [pc, #752]	; (8006e64 <MX_GPIO_Init+0x308>)
 8006b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b76:	4abb      	ldr	r2, [pc, #748]	; (8006e64 <MX_GPIO_Init+0x308>)
 8006b78:	f043 0310 	orr.w	r3, r3, #16
 8006b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b7e:	4bb9      	ldr	r3, [pc, #740]	; (8006e64 <MX_GPIO_Init+0x308>)
 8006b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b82:	f003 0310 	and.w	r3, r3, #16
 8006b86:	613b      	str	r3, [r7, #16]
 8006b88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b8a:	4bb6      	ldr	r3, [pc, #728]	; (8006e64 <MX_GPIO_Init+0x308>)
 8006b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b8e:	4ab5      	ldr	r2, [pc, #724]	; (8006e64 <MX_GPIO_Init+0x308>)
 8006b90:	f043 0304 	orr.w	r3, r3, #4
 8006b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b96:	4bb3      	ldr	r3, [pc, #716]	; (8006e64 <MX_GPIO_Init+0x308>)
 8006b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b9a:	f003 0304 	and.w	r3, r3, #4
 8006b9e:	60fb      	str	r3, [r7, #12]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ba2:	4bb0      	ldr	r3, [pc, #704]	; (8006e64 <MX_GPIO_Init+0x308>)
 8006ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ba6:	4aaf      	ldr	r2, [pc, #700]	; (8006e64 <MX_GPIO_Init+0x308>)
 8006ba8:	f043 0301 	orr.w	r3, r3, #1
 8006bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006bae:	4bad      	ldr	r3, [pc, #692]	; (8006e64 <MX_GPIO_Init+0x308>)
 8006bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bb2:	f003 0301 	and.w	r3, r3, #1
 8006bb6:	60bb      	str	r3, [r7, #8]
 8006bb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006bba:	4baa      	ldr	r3, [pc, #680]	; (8006e64 <MX_GPIO_Init+0x308>)
 8006bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bbe:	4aa9      	ldr	r2, [pc, #676]	; (8006e64 <MX_GPIO_Init+0x308>)
 8006bc0:	f043 0302 	orr.w	r3, r3, #2
 8006bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006bc6:	4ba7      	ldr	r3, [pc, #668]	; (8006e64 <MX_GPIO_Init+0x308>)
 8006bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bca:	f003 0302 	and.w	r3, r3, #2
 8006bce:	607b      	str	r3, [r7, #4]
 8006bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006bd2:	4ba4      	ldr	r3, [pc, #656]	; (8006e64 <MX_GPIO_Init+0x308>)
 8006bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bd6:	4aa3      	ldr	r2, [pc, #652]	; (8006e64 <MX_GPIO_Init+0x308>)
 8006bd8:	f043 0308 	orr.w	r3, r3, #8
 8006bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006bde:	4ba1      	ldr	r3, [pc, #644]	; (8006e64 <MX_GPIO_Init+0x308>)
 8006be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006be2:	f003 0308 	and.w	r3, r3, #8
 8006be6:	603b      	str	r3, [r7, #0]
 8006be8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8006bea:	2200      	movs	r2, #0
 8006bec:	f44f 7182 	mov.w	r1, #260	; 0x104
 8006bf0:	489d      	ldr	r0, [pc, #628]	; (8006e68 <MX_GPIO_Init+0x30c>)
 8006bf2:	f007 fcab 	bl	800e54c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f248 1104 	movw	r1, #33028	; 0x8104
 8006bfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006c00:	f007 fca4 	bl	800e54c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED14_Pin
 8006c04:	2200      	movs	r2, #0
 8006c06:	f24f 0114 	movw	r1, #61460	; 0xf014
 8006c0a:	4898      	ldr	r0, [pc, #608]	; (8006e6c <MX_GPIO_Init+0x310>)
 8006c0c:	f007 fc9e 	bl	800e54c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8006c10:	2200      	movs	r2, #0
 8006c12:	f241 0181 	movw	r1, #4225	; 0x1081
 8006c16:	4896      	ldr	r0, [pc, #600]	; (8006e70 <MX_GPIO_Init+0x314>)
 8006c18:	f007 fc98 	bl	800e54c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006c22:	4893      	ldr	r0, [pc, #588]	; (8006e70 <MX_GPIO_Init+0x314>)
 8006c24:	f007 fc92 	bl	800e54c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006c2e:	4891      	ldr	r0, [pc, #580]	; (8006e74 <MX_GPIO_Init+0x318>)
 8006c30:	f007 fc8c 	bl	800e54c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8006c34:	2201      	movs	r2, #1
 8006c36:	2120      	movs	r1, #32
 8006c38:	488c      	ldr	r0, [pc, #560]	; (8006e6c <MX_GPIO_Init+0x310>)
 8006c3a:	f007 fc87 	bl	800e54c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8006c3e:	2201      	movs	r2, #1
 8006c40:	2101      	movs	r1, #1
 8006c42:	4889      	ldr	r0, [pc, #548]	; (8006e68 <MX_GPIO_Init+0x30c>)
 8006c44:	f007 fc82 	bl	800e54c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8006c48:	f240 1305 	movw	r3, #261	; 0x105
 8006c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c52:	2300      	movs	r3, #0
 8006c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c56:	2300      	movs	r3, #0
 8006c58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006c5a:	f107 0314 	add.w	r3, r7, #20
 8006c5e:	4619      	mov	r1, r3
 8006c60:	4881      	ldr	r0, [pc, #516]	; (8006e68 <MX_GPIO_Init+0x30c>)
 8006c62:	f007 f9bd 	bl	800dfe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8006c66:	236a      	movs	r3, #106	; 0x6a
 8006c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006c6a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c70:	2300      	movs	r3, #0
 8006c72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006c74:	f107 0314 	add.w	r3, r7, #20
 8006c78:	4619      	mov	r1, r3
 8006c7a:	487b      	ldr	r0, [pc, #492]	; (8006e68 <MX_GPIO_Init+0x30c>)
 8006c7c:	f007 f9b0 	bl	800dfe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : M24SR64_Y_GPO_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_GPO_Pin;
 8006c80:	2310      	movs	r3, #16
 8006c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c84:	2300      	movs	r3, #0
 8006c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M24SR64_Y_GPO_GPIO_Port, &GPIO_InitStruct);
 8006c8c:	f107 0314 	add.w	r3, r7, #20
 8006c90:	4619      	mov	r1, r3
 8006c92:	4875      	ldr	r0, [pc, #468]	; (8006e68 <MX_GPIO_Init+0x30c>)
 8006c94:	f007 f9a4 	bl	800dfe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : f_sw13_Pin */
  GPIO_InitStruct.Pin = f_sw13_Pin;
 8006c98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(f_sw13_GPIO_Port, &GPIO_InitStruct);
 8006ca6:	f107 0314 	add.w	r3, r7, #20
 8006caa:	4619      	mov	r1, r3
 8006cac:	4871      	ldr	r0, [pc, #452]	; (8006e74 <MX_GPIO_Init+0x318>)
 8006cae:	f007 f997 	bl	800dfe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8006cb2:	233f      	movs	r3, #63	; 0x3f
 8006cb4:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8006cb6:	230b      	movs	r3, #11
 8006cb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006cbe:	f107 0314 	add.w	r3, r7, #20
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	486b      	ldr	r0, [pc, #428]	; (8006e74 <MX_GPIO_Init+0x318>)
 8006cc6:	f007 f98b 	bl	800dfe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cce:	2302      	movs	r3, #2
 8006cd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006cda:	2308      	movs	r3, #8
 8006cdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cde:	f107 0314 	add.w	r3, r7, #20
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006ce8:	f007 f97a 	bl	800dfe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8006cec:	f248 1304 	movw	r3, #33028	; 0x8104
 8006cf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cfe:	f107 0314 	add.w	r3, r7, #20
 8006d02:	4619      	mov	r1, r3
 8006d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d08:	f007 f96a 	bl	800dfe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8006d0c:	2308      	movs	r3, #8
 8006d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d10:	2302      	movs	r3, #2
 8006d12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d14:	2300      	movs	r3, #0
 8006d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8006d20:	f107 0314 	add.w	r3, r7, #20
 8006d24:	4619      	mov	r1, r3
 8006d26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d2a:	f007 f959 	bl	800dfe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8006d2e:	2310      	movs	r3, #16
 8006d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8006d32:	230b      	movs	r3, #11
 8006d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d36:	2300      	movs	r3, #0
 8006d38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8006d3a:	f107 0314 	add.w	r3, r7, #20
 8006d3e:	4619      	mov	r1, r3
 8006d40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d44:	f007 f94c 	bl	800dfe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8006d48:	23e0      	movs	r3, #224	; 0xe0
 8006d4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d50:	2300      	movs	r3, #0
 8006d52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d54:	2303      	movs	r3, #3
 8006d56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006d58:	2305      	movs	r3, #5
 8006d5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d5c:	f107 0314 	add.w	r3, r7, #20
 8006d60:	4619      	mov	r1, r3
 8006d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d66:	f007 f93b 	bl	800dfe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006d6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006d72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d74:	2300      	movs	r3, #0
 8006d76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8006d78:	f107 0314 	add.w	r3, r7, #20
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	483b      	ldr	r0, [pc, #236]	; (8006e6c <MX_GPIO_Init+0x310>)
 8006d80:	f007 f92e 	bl	800dfe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8006d84:	2302      	movs	r3, #2
 8006d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8006d88:	230b      	movs	r3, #11
 8006d8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8006d90:	f107 0314 	add.w	r3, r7, #20
 8006d94:	4619      	mov	r1, r3
 8006d96:	4835      	ldr	r0, [pc, #212]	; (8006e6c <MX_GPIO_Init+0x310>)
 8006d98:	f007 f922 	bl	800dfe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED14_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED14_Pin
 8006d9c:	f24f 0334 	movw	r3, #61492	; 0xf034
 8006da0:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006da2:	2301      	movs	r3, #1
 8006da4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006da6:	2300      	movs	r3, #0
 8006da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006daa:	2300      	movs	r3, #0
 8006dac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006dae:	f107 0314 	add.w	r3, r7, #20
 8006db2:	4619      	mov	r1, r3
 8006db4:	482d      	ldr	r0, [pc, #180]	; (8006e6c <MX_GPIO_Init+0x310>)
 8006db6:	f007 f913 	bl	800dfe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8006dba:	f44f 7320 	mov.w	r3, #640	; 0x280
 8006dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8006dcc:	2306      	movs	r3, #6
 8006dce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006dd0:	f107 0314 	add.w	r3, r7, #20
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	4824      	ldr	r0, [pc, #144]	; (8006e68 <MX_GPIO_Init+0x30c>)
 8006dd8:	f007 f902 	bl	800dfe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8006ddc:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8006de0:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006de2:	2302      	movs	r3, #2
 8006de4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006de6:	2300      	movs	r3, #0
 8006de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dea:	2303      	movs	r3, #3
 8006dec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8006dee:	230a      	movs	r3, #10
 8006df0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006df2:	f107 0314 	add.w	r3, r7, #20
 8006df6:	4619      	mov	r1, r3
 8006df8:	481b      	ldr	r0, [pc, #108]	; (8006e68 <MX_GPIO_Init+0x30c>)
 8006dfa:	f007 f8f1 	bl	800dfe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8006dfe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006e02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e04:	2302      	movs	r3, #2
 8006e06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006e10:	2307      	movs	r3, #7
 8006e12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e14:	f107 0314 	add.w	r3, r7, #20
 8006e18:	4619      	mov	r1, r3
 8006e1a:	4815      	ldr	r0, [pc, #84]	; (8006e70 <MX_GPIO_Init+0x314>)
 8006e1c:	f007 f8e0 	bl	800dfe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8006e20:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8006e24:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006e26:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006e2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e30:	f107 0314 	add.w	r3, r7, #20
 8006e34:	4619      	mov	r1, r3
 8006e36:	480e      	ldr	r0, [pc, #56]	; (8006e70 <MX_GPIO_Init+0x314>)
 8006e38:	f007 f8d2 	bl	800dfe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8006e3c:	f243 0381 	movw	r3, #12417	; 0x3081
 8006e40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e42:	2301      	movs	r3, #1
 8006e44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e46:	2300      	movs	r3, #0
 8006e48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e4e:	f107 0314 	add.w	r3, r7, #20
 8006e52:	4619      	mov	r1, r3
 8006e54:	4806      	ldr	r0, [pc, #24]	; (8006e70 <MX_GPIO_Init+0x314>)
 8006e56:	f007 f8c3 	bl	800dfe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VL53L0X_XSHUT_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin;
 8006e5a:	2340      	movs	r3, #64	; 0x40
 8006e5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	61bb      	str	r3, [r7, #24]
 8006e62:	e009      	b.n	8006e78 <MX_GPIO_Init+0x31c>
 8006e64:	40021000 	.word	0x40021000
 8006e68:	48001000 	.word	0x48001000
 8006e6c:	48000400 	.word	0x48000400
 8006e70:	48000c00 	.word	0x48000c00
 8006e74:	48000800 	.word	0x48000800
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 8006e80:	f107 0314 	add.w	r3, r7, #20
 8006e84:	4619      	mov	r1, r3
 8006e86:	484b      	ldr	r0, [pc, #300]	; (8006fb4 <MX_GPIO_Init+0x458>)
 8006e88:	f007 f8aa 	bl	800dfe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8006e8c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006e90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006e92:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e9c:	f107 0314 	add.w	r3, r7, #20
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	4844      	ldr	r0, [pc, #272]	; (8006fb4 <MX_GPIO_Init+0x458>)
 8006ea4:	f007 f89c 	bl	800dfe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = LED3_WIFI__LED4_BLE_Pin;
 8006ea8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006eac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED3_WIFI__LED4_BLE_GPIO_Port, &GPIO_InitStruct);
 8006eba:	f107 0314 	add.w	r3, r7, #20
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	483c      	ldr	r0, [pc, #240]	; (8006fb4 <MX_GPIO_Init+0x458>)
 8006ec2:	f007 f88d 	bl	800dfe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8006ec6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006eca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8006ed4:	f107 0314 	add.w	r3, r7, #20
 8006ed8:	4619      	mov	r1, r3
 8006eda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006ede:	f007 f87f 	bl	800dfe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8006ee2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006ee6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ee8:	2302      	movs	r3, #2
 8006eea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eec:	2300      	movs	r3, #0
 8006eee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006ef4:	230a      	movs	r3, #10
 8006ef6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ef8:	f107 0314 	add.w	r3, r7, #20
 8006efc:	4619      	mov	r1, r3
 8006efe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006f02:	f007 f86d 	bl	800dfe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8006f06:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006f0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f10:	2300      	movs	r3, #0
 8006f12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f14:	2303      	movs	r3, #3
 8006f16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006f18:	2306      	movs	r3, #6
 8006f1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f1c:	f107 0314 	add.w	r3, r7, #20
 8006f20:	4619      	mov	r1, r3
 8006f22:	4824      	ldr	r0, [pc, #144]	; (8006fb4 <MX_GPIO_Init+0x458>)
 8006f24:	f007 f85c 	bl	800dfe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8006f28:	2302      	movs	r3, #2
 8006f2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f30:	2300      	movs	r3, #0
 8006f32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f34:	2303      	movs	r3, #3
 8006f36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006f38:	2305      	movs	r3, #5
 8006f3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8006f3c:	f107 0314 	add.w	r3, r7, #20
 8006f40:	4619      	mov	r1, r3
 8006f42:	481d      	ldr	r0, [pc, #116]	; (8006fb8 <MX_GPIO_Init+0x45c>)
 8006f44:	f007 f84c 	bl	800dfe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8006f48:	2378      	movs	r3, #120	; 0x78
 8006f4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f4c:	2302      	movs	r3, #2
 8006f4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f50:	2300      	movs	r3, #0
 8006f52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f54:	2303      	movs	r3, #3
 8006f56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006f58:	2307      	movs	r3, #7
 8006f5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f5c:	f107 0314 	add.w	r3, r7, #20
 8006f60:	4619      	mov	r1, r3
 8006f62:	4815      	ldr	r0, [pc, #84]	; (8006fb8 <MX_GPIO_Init+0x45c>)
 8006f64:	f007 f83c 	bl	800dfe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8006f68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006f6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006f6e:	2312      	movs	r3, #18
 8006f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f72:	2300      	movs	r3, #0
 8006f74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f76:	2303      	movs	r3, #3
 8006f78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006f7a:	2304      	movs	r3, #4
 8006f7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f7e:	f107 0314 	add.w	r3, r7, #20
 8006f82:	4619      	mov	r1, r3
 8006f84:	480d      	ldr	r0, [pc, #52]	; (8006fbc <MX_GPIO_Init+0x460>)
 8006f86:	f007 f82b 	bl	800dfe0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	2100      	movs	r1, #0
 8006f8e:	2017      	movs	r0, #23
 8006f90:	f006 ff71 	bl	800de76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006f94:	2017      	movs	r0, #23
 8006f96:	f006 ff8a 	bl	800deae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	2100      	movs	r1, #0
 8006f9e:	2028      	movs	r0, #40	; 0x28
 8006fa0:	f006 ff69 	bl	800de76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006fa4:	2028      	movs	r0, #40	; 0x28
 8006fa6:	f006 ff82 	bl	800deae <HAL_NVIC_EnableIRQ>

}
 8006faa:	bf00      	nop
 8006fac:	3728      	adds	r7, #40	; 0x28
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	48000800 	.word	0x48000800
 8006fb8:	48000c00 	.word	0x48000c00
 8006fbc:	48000400 	.word	0x48000400

08006fc0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
    if(huart -> Instance == USART1)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a11      	ldr	r2, [pc, #68]	; (8007014 <HAL_UART_RxCpltCallback+0x54>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d11c      	bne.n	800700c <HAL_UART_RxCpltCallback+0x4c>
    {
    	if(rxData[0]!='\r')
 8006fd2:	4b11      	ldr	r3, [pc, #68]	; (8007018 <HAL_UART_RxCpltCallback+0x58>)
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	2b0d      	cmp	r3, #13
 8006fd8:	d00d      	beq.n	8006ff6 <HAL_UART_RxCpltCallback+0x36>
        {
            rxBuffer[rxIndex]=rxData[0];
 8006fda:	4b10      	ldr	r3, [pc, #64]	; (800701c <HAL_UART_RxCpltCallback+0x5c>)
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	461a      	mov	r2, r3
 8006fe0:	4b0d      	ldr	r3, [pc, #52]	; (8007018 <HAL_UART_RxCpltCallback+0x58>)
 8006fe2:	7819      	ldrb	r1, [r3, #0]
 8006fe4:	4b0e      	ldr	r3, [pc, #56]	; (8007020 <HAL_UART_RxCpltCallback+0x60>)
 8006fe6:	5499      	strb	r1, [r3, r2]
            rxIndex++;
 8006fe8:	4b0c      	ldr	r3, [pc, #48]	; (800701c <HAL_UART_RxCpltCallback+0x5c>)
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	3301      	adds	r3, #1
 8006fee:	b2da      	uxtb	r2, r3
 8006ff0:	4b0a      	ldr	r3, [pc, #40]	; (800701c <HAL_UART_RxCpltCallback+0x5c>)
 8006ff2:	701a      	strb	r2, [r3, #0]
 8006ff4:	e005      	b.n	8007002 <HAL_UART_RxCpltCallback+0x42>
        }
        else
        {
            newMsg=1;
 8006ff6:	4b0b      	ldr	r3, [pc, #44]	; (8007024 <HAL_UART_RxCpltCallback+0x64>)
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	701a      	strb	r2, [r3, #0]
            rxIndex=0;
 8006ffc:	4b07      	ldr	r3, [pc, #28]	; (800701c <HAL_UART_RxCpltCallback+0x5c>)
 8006ffe:	2200      	movs	r2, #0
 8007000:	701a      	strb	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(&huart1 ,rxData,1);
 8007002:	2201      	movs	r2, #1
 8007004:	4904      	ldr	r1, [pc, #16]	; (8007018 <HAL_UART_RxCpltCallback+0x58>)
 8007006:	4808      	ldr	r0, [pc, #32]	; (8007028 <HAL_UART_RxCpltCallback+0x68>)
 8007008:	f00a fc04 	bl	8011814 <HAL_UART_Receive_IT>
    }

}
 800700c:	bf00      	nop
 800700e:	3708      	adds	r7, #8
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	40013800 	.word	0x40013800
 8007018:	20002ac8 	.word	0x20002ac8
 800701c:	20000f9d 	.word	0x20000f9d
 8007020:	20002bf8 	.word	0x20002bf8
 8007024:	20000f9c 	.word	0x20000f9c
 8007028:	20002b74 	.word	0x20002b74

0800702c <HAL_TIM_PeriodElapsedCallback>:
/*This Callback function use for generating Timer(timer 16) delay  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  // Check the timer triggered this callback
	if(htim -> Instance == TIM16)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a1f      	ldr	r2, [pc, #124]	; (80070b8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d135      	bne.n	80070aa <HAL_TIM_PeriodElapsedCallback+0x7e>
	{
		flag_temp  		= 1;							//checking the timer callback
 800703e:	4b1f      	ldr	r3, [pc, #124]	; (80070bc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8007040:	2201      	movs	r2, #1
 8007042:	701a      	strb	r2, [r3, #0]
		flag_humi  		= 1;
 8007044:	4b1e      	ldr	r3, [pc, #120]	; (80070c0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8007046:	2201      	movs	r2, #1
 8007048:	701a      	strb	r2, [r3, #0]
		flag_pre   		= 1;
 800704a:	4b1e      	ldr	r3, [pc, #120]	; (80070c4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800704c:	2201      	movs	r2, #1
 800704e:	701a      	strb	r2, [r3, #0]
		flag_acce  		= 1;
 8007050:	4b1d      	ldr	r3, [pc, #116]	; (80070c8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8007052:	2201      	movs	r2, #1
 8007054:	701a      	strb	r2, [r3, #0]
		flag_gyro  		= 1;
 8007056:	4b1d      	ldr	r3, [pc, #116]	; (80070cc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8007058:	2201      	movs	r2, #1
 800705a:	701a      	strb	r2, [r3, #0]
		flag_mag   		= 1;
 800705c:	4b1c      	ldr	r3, [pc, #112]	; (80070d0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800705e:	2201      	movs	r2, #1
 8007060:	701a      	strb	r2, [r3, #0]
		flag_pro   		= 1;
 8007062:	4b1c      	ldr	r3, [pc, #112]	; (80070d4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8007064:	2201      	movs	r2, #1
 8007066:	701a      	strb	r2, [r3, #0]
		flag_Email 		= 1;
 8007068:	4b1b      	ldr	r3, [pc, #108]	; (80070d8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800706a:	2201      	movs	r2, #1
 800706c:	701a      	strb	r2, [r3, #0]
		flag_R_Email 	= 1;
 800706e:	4b1b      	ldr	r3, [pc, #108]	; (80070dc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8007070:	2201      	movs	r2, #1
 8007072:	701a      	strb	r2, [r3, #0]
		flag_Vcard		= 1;
 8007074:	4b1a      	ldr	r3, [pc, #104]	; (80070e0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8007076:	2201      	movs	r2, #1
 8007078:	701a      	strb	r2, [r3, #0]
		flag_R_Vcard	= 1;
 800707a:	4b1a      	ldr	r3, [pc, #104]	; (80070e4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800707c:	2201      	movs	r2, #1
 800707e:	701a      	strb	r2, [r3, #0]
		flag_URL		= 1;
 8007080:	4b19      	ldr	r3, [pc, #100]	; (80070e8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8007082:	2201      	movs	r2, #1
 8007084:	701a      	strb	r2, [r3, #0]
		flag_R_URL		= 1;
 8007086:	4b19      	ldr	r3, [pc, #100]	; (80070ec <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8007088:	2201      	movs	r2, #1
 800708a:	701a      	strb	r2, [r3, #0]
		flag_aar		= 1;
 800708c:	4b18      	ldr	r3, [pc, #96]	; (80070f0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800708e:	2201      	movs	r2, #1
 8007090:	701a      	strb	r2, [r3, #0]
		flag_sms		= 1;
 8007092:	4b18      	ldr	r3, [pc, #96]	; (80070f4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8007094:	2201      	movs	r2, #1
 8007096:	701a      	strb	r2, [r3, #0]
		flag_NFC		= 1;
 8007098:	4b17      	ldr	r3, [pc, #92]	; (80070f8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800709a:	2201      	movs	r2, #1
 800709c:	701a      	strb	r2, [r3, #0]
		flag_R_sms		= 1;
 800709e:	4b17      	ldr	r3, [pc, #92]	; (80070fc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80070a0:	2201      	movs	r2, #1
 80070a2:	701a      	strb	r2, [r3, #0]
		flag_error 		= 1;
 80070a4:	4b16      	ldr	r3, [pc, #88]	; (8007100 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80070a6:	2201      	movs	r2, #1
 80070a8:	701a      	strb	r2, [r3, #0]
	}
}
 80070aa:	bf00      	nop
 80070ac:	370c      	adds	r7, #12
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	40014400 	.word	0x40014400
 80070bc:	200004c7 	.word	0x200004c7
 80070c0:	200004c8 	.word	0x200004c8
 80070c4:	200004c9 	.word	0x200004c9
 80070c8:	200004ca 	.word	0x200004ca
 80070cc:	200004cb 	.word	0x200004cb
 80070d0:	200004cc 	.word	0x200004cc
 80070d4:	200004cd 	.word	0x200004cd
 80070d8:	200004ce 	.word	0x200004ce
 80070dc:	200004cf 	.word	0x200004cf
 80070e0:	200004d0 	.word	0x200004d0
 80070e4:	200004d1 	.word	0x200004d1
 80070e8:	200004d3 	.word	0x200004d3
 80070ec:	200004d4 	.word	0x200004d4
 80070f0:	200004d2 	.word	0x200004d2
 80070f4:	200004d5 	.word	0x200004d5
 80070f8:	200004d6 	.word	0x200004d6
 80070fc:	200004d7 	.word	0x200004d7
 8007100:	200004d8 	.word	0x200004d8

08007104 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	4603      	mov	r3, r0
 800710c:	80fb      	strh	r3, [r7, #6]


  if(GPIO_Pin == NFC_GPIO_GPO_PIN)
 800710e:	88fb      	ldrh	r3, [r7, #6]
 8007110:	2b10      	cmp	r3, #16
 8007112:	d104      	bne.n	800711e <HAL_GPIO_EXTI_Callback+0x1a>
  {
	  printf("in HAL_GPIO_EXTI_Callback\n");
 8007114:	4804      	ldr	r0, [pc, #16]	; (8007128 <HAL_GPIO_EXTI_Callback+0x24>)
 8007116:	f00c fbe1 	bl	80138dc <puts>
	  M24SR_GPO_Callback();
 800711a:	f7fa f919 	bl	8001350 <M24SR_GPO_Callback>
  }
}
 800711e:	bf00      	nop
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	080165d0 	.word	0x080165d0

0800712c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800712c:	b480      	push	{r7}
 800712e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007130:	b672      	cpsid	i
}
 8007132:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007134:	e7fe      	b.n	8007134 <Error_Handler+0x8>
	...

08007138 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800713e:	4b0f      	ldr	r3, [pc, #60]	; (800717c <HAL_MspInit+0x44>)
 8007140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007142:	4a0e      	ldr	r2, [pc, #56]	; (800717c <HAL_MspInit+0x44>)
 8007144:	f043 0301 	orr.w	r3, r3, #1
 8007148:	6613      	str	r3, [r2, #96]	; 0x60
 800714a:	4b0c      	ldr	r3, [pc, #48]	; (800717c <HAL_MspInit+0x44>)
 800714c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800714e:	f003 0301 	and.w	r3, r3, #1
 8007152:	607b      	str	r3, [r7, #4]
 8007154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007156:	4b09      	ldr	r3, [pc, #36]	; (800717c <HAL_MspInit+0x44>)
 8007158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800715a:	4a08      	ldr	r2, [pc, #32]	; (800717c <HAL_MspInit+0x44>)
 800715c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007160:	6593      	str	r3, [r2, #88]	; 0x58
 8007162:	4b06      	ldr	r3, [pc, #24]	; (800717c <HAL_MspInit+0x44>)
 8007164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800716a:	603b      	str	r3, [r7, #0]
 800716c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800716e:	bf00      	nop
 8007170:	370c      	adds	r7, #12
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	40021000 	.word	0x40021000

08007180 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b0ac      	sub	sp, #176	; 0xb0
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007188:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800718c:	2200      	movs	r2, #0
 800718e:	601a      	str	r2, [r3, #0]
 8007190:	605a      	str	r2, [r3, #4]
 8007192:	609a      	str	r2, [r3, #8]
 8007194:	60da      	str	r2, [r3, #12]
 8007196:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007198:	f107 0314 	add.w	r3, r7, #20
 800719c:	2288      	movs	r2, #136	; 0x88
 800719e:	2100      	movs	r1, #0
 80071a0:	4618      	mov	r0, r3
 80071a2:	f00b fea3 	bl	8012eec <memset>
  if(hi2c->Instance==I2C2)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a21      	ldr	r2, [pc, #132]	; (8007230 <HAL_I2C_MspInit+0xb0>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d13b      	bne.n	8007228 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80071b0:	2380      	movs	r3, #128	; 0x80
 80071b2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80071b4:	2300      	movs	r3, #0
 80071b6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80071b8:	f107 0314 	add.w	r3, r7, #20
 80071bc:	4618      	mov	r0, r3
 80071be:	f009 f9ed 	bl	801059c <HAL_RCCEx_PeriphCLKConfig>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d001      	beq.n	80071cc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80071c8:	f7ff ffb0 	bl	800712c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071cc:	4b19      	ldr	r3, [pc, #100]	; (8007234 <HAL_I2C_MspInit+0xb4>)
 80071ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071d0:	4a18      	ldr	r2, [pc, #96]	; (8007234 <HAL_I2C_MspInit+0xb4>)
 80071d2:	f043 0302 	orr.w	r3, r3, #2
 80071d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80071d8:	4b16      	ldr	r3, [pc, #88]	; (8007234 <HAL_I2C_MspInit+0xb4>)
 80071da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071dc:	f003 0302 	and.w	r3, r3, #2
 80071e0:	613b      	str	r3, [r7, #16]
 80071e2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80071e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80071e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80071ec:	2312      	movs	r3, #18
 80071ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071f2:	2300      	movs	r3, #0
 80071f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071f8:	2303      	movs	r3, #3
 80071fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80071fe:	2304      	movs	r3, #4
 8007200:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007204:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007208:	4619      	mov	r1, r3
 800720a:	480b      	ldr	r0, [pc, #44]	; (8007238 <HAL_I2C_MspInit+0xb8>)
 800720c:	f006 fee8 	bl	800dfe0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007210:	4b08      	ldr	r3, [pc, #32]	; (8007234 <HAL_I2C_MspInit+0xb4>)
 8007212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007214:	4a07      	ldr	r2, [pc, #28]	; (8007234 <HAL_I2C_MspInit+0xb4>)
 8007216:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800721a:	6593      	str	r3, [r2, #88]	; 0x58
 800721c:	4b05      	ldr	r3, [pc, #20]	; (8007234 <HAL_I2C_MspInit+0xb4>)
 800721e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007220:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007224:	60fb      	str	r3, [r7, #12]
 8007226:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8007228:	bf00      	nop
 800722a:	37b0      	adds	r7, #176	; 0xb0
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	40005800 	.word	0x40005800
 8007234:	40021000 	.word	0x40021000
 8007238:	48000400 	.word	0x48000400

0800723c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a0b      	ldr	r2, [pc, #44]	; (8007278 <HAL_I2C_MspDeInit+0x3c>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d10f      	bne.n	800726e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800724e:	4b0b      	ldr	r3, [pc, #44]	; (800727c <HAL_I2C_MspDeInit+0x40>)
 8007250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007252:	4a0a      	ldr	r2, [pc, #40]	; (800727c <HAL_I2C_MspDeInit+0x40>)
 8007254:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8007258:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 800725a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800725e:	4808      	ldr	r0, [pc, #32]	; (8007280 <HAL_I2C_MspDeInit+0x44>)
 8007260:	f007 f868 	bl	800e334 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8007264:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007268:	4805      	ldr	r0, [pc, #20]	; (8007280 <HAL_I2C_MspDeInit+0x44>)
 800726a:	f007 f863 	bl	800e334 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800726e:	bf00      	nop
 8007270:	3708      	adds	r7, #8
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	40005800 	.word	0x40005800
 800727c:	40021000 	.word	0x40021000
 8007280:	48000400 	.word	0x48000400

08007284 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a16      	ldr	r2, [pc, #88]	; (80072ec <HAL_TIM_Base_MspInit+0x68>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d114      	bne.n	80072c0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8007296:	4b16      	ldr	r3, [pc, #88]	; (80072f0 <HAL_TIM_Base_MspInit+0x6c>)
 8007298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800729a:	4a15      	ldr	r2, [pc, #84]	; (80072f0 <HAL_TIM_Base_MspInit+0x6c>)
 800729c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072a0:	6613      	str	r3, [r2, #96]	; 0x60
 80072a2:	4b13      	ldr	r3, [pc, #76]	; (80072f0 <HAL_TIM_Base_MspInit+0x6c>)
 80072a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072aa:	60fb      	str	r3, [r7, #12]
 80072ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80072ae:	2200      	movs	r2, #0
 80072b0:	2100      	movs	r1, #0
 80072b2:	2019      	movs	r0, #25
 80072b4:	f006 fddf 	bl	800de76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80072b8:	2019      	movs	r0, #25
 80072ba:	f006 fdf8 	bl	800deae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80072be:	e010      	b.n	80072e2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM17)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a0b      	ldr	r2, [pc, #44]	; (80072f4 <HAL_TIM_Base_MspInit+0x70>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d10b      	bne.n	80072e2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80072ca:	4b09      	ldr	r3, [pc, #36]	; (80072f0 <HAL_TIM_Base_MspInit+0x6c>)
 80072cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072ce:	4a08      	ldr	r2, [pc, #32]	; (80072f0 <HAL_TIM_Base_MspInit+0x6c>)
 80072d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80072d4:	6613      	str	r3, [r2, #96]	; 0x60
 80072d6:	4b06      	ldr	r3, [pc, #24]	; (80072f0 <HAL_TIM_Base_MspInit+0x6c>)
 80072d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072de:	60bb      	str	r3, [r7, #8]
 80072e0:	68bb      	ldr	r3, [r7, #8]
}
 80072e2:	bf00      	nop
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	40014400 	.word	0x40014400
 80072f0:	40021000 	.word	0x40021000
 80072f4:	40014800 	.word	0x40014800

080072f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b0ac      	sub	sp, #176	; 0xb0
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007300:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007304:	2200      	movs	r2, #0
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	605a      	str	r2, [r3, #4]
 800730a:	609a      	str	r2, [r3, #8]
 800730c:	60da      	str	r2, [r3, #12]
 800730e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007310:	f107 0314 	add.w	r3, r7, #20
 8007314:	2288      	movs	r2, #136	; 0x88
 8007316:	2100      	movs	r1, #0
 8007318:	4618      	mov	r0, r3
 800731a:	f00b fde7 	bl	8012eec <memset>
  if(huart->Instance==USART1)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a25      	ldr	r2, [pc, #148]	; (80073b8 <HAL_UART_MspInit+0xc0>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d142      	bne.n	80073ae <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007328:	2301      	movs	r3, #1
 800732a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800732c:	2300      	movs	r3, #0
 800732e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007330:	f107 0314 	add.w	r3, r7, #20
 8007334:	4618      	mov	r0, r3
 8007336:	f009 f931 	bl	801059c <HAL_RCCEx_PeriphCLKConfig>
 800733a:	4603      	mov	r3, r0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d001      	beq.n	8007344 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8007340:	f7ff fef4 	bl	800712c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007344:	4b1d      	ldr	r3, [pc, #116]	; (80073bc <HAL_UART_MspInit+0xc4>)
 8007346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007348:	4a1c      	ldr	r2, [pc, #112]	; (80073bc <HAL_UART_MspInit+0xc4>)
 800734a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800734e:	6613      	str	r3, [r2, #96]	; 0x60
 8007350:	4b1a      	ldr	r3, [pc, #104]	; (80073bc <HAL_UART_MspInit+0xc4>)
 8007352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007354:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007358:	613b      	str	r3, [r7, #16]
 800735a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800735c:	4b17      	ldr	r3, [pc, #92]	; (80073bc <HAL_UART_MspInit+0xc4>)
 800735e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007360:	4a16      	ldr	r2, [pc, #88]	; (80073bc <HAL_UART_MspInit+0xc4>)
 8007362:	f043 0302 	orr.w	r3, r3, #2
 8007366:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007368:	4b14      	ldr	r3, [pc, #80]	; (80073bc <HAL_UART_MspInit+0xc4>)
 800736a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800736c:	f003 0302 	and.w	r3, r3, #2
 8007370:	60fb      	str	r3, [r7, #12]
 8007372:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8007374:	23c0      	movs	r3, #192	; 0xc0
 8007376:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800737a:	2302      	movs	r3, #2
 800737c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007380:	2300      	movs	r3, #0
 8007382:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007386:	2303      	movs	r3, #3
 8007388:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800738c:	2307      	movs	r3, #7
 800738e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007392:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007396:	4619      	mov	r1, r3
 8007398:	4809      	ldr	r0, [pc, #36]	; (80073c0 <HAL_UART_MspInit+0xc8>)
 800739a:	f006 fe21 	bl	800dfe0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800739e:	2200      	movs	r2, #0
 80073a0:	2100      	movs	r1, #0
 80073a2:	2025      	movs	r0, #37	; 0x25
 80073a4:	f006 fd67 	bl	800de76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80073a8:	2025      	movs	r0, #37	; 0x25
 80073aa:	f006 fd80 	bl	800deae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80073ae:	bf00      	nop
 80073b0:	37b0      	adds	r7, #176	; 0xb0
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	40013800 	.word	0x40013800
 80073bc:	40021000 	.word	0x40021000
 80073c0:	48000400 	.word	0x48000400

080073c4 <EXTI4_IRQHandler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void EXTI4_IRQHandler(void)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(NFC_GPIO_GPO_PIN);
 80073c8:	2010      	movs	r0, #16
 80073ca:	f007 f8d7 	bl	800e57c <HAL_GPIO_EXTI_IRQHandler>
}
 80073ce:	bf00      	nop
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80073d2:	b480      	push	{r7}
 80073d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80073d6:	e7fe      	b.n	80073d6 <NMI_Handler+0x4>

080073d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80073d8:	b480      	push	{r7}
 80073da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80073dc:	e7fe      	b.n	80073dc <HardFault_Handler+0x4>

080073de <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80073de:	b480      	push	{r7}
 80073e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80073e2:	e7fe      	b.n	80073e2 <MemManage_Handler+0x4>

080073e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80073e4:	b480      	push	{r7}
 80073e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80073e8:	e7fe      	b.n	80073e8 <BusFault_Handler+0x4>

080073ea <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80073ea:	b480      	push	{r7}
 80073ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80073ee:	e7fe      	b.n	80073ee <UsageFault_Handler+0x4>

080073f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80073f0:	b480      	push	{r7}
 80073f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80073f4:	bf00      	nop
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80073fe:	b480      	push	{r7}
 8007400:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007402:	bf00      	nop
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800740c:	b480      	push	{r7}
 800740e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007410:	bf00      	nop
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr

0800741a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800741e:	f006 fc0b 	bl	800dc38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007422:	bf00      	nop
 8007424:	bd80      	pop	{r7, pc}

08007426 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800742a:	2020      	movs	r0, #32
 800742c:	f007 f8a6 	bl	800e57c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8007430:	2040      	movs	r0, #64	; 0x40
 8007432:	f007 f8a3 	bl	800e57c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8007436:	2080      	movs	r0, #128	; 0x80
 8007438:	f007 f8a0 	bl	800e57c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800743c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007440:	f007 f89c 	bl	800e57c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8007444:	bf00      	nop
 8007446:	bd80      	pop	{r7, pc}

08007448 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800744c:	4802      	ldr	r0, [pc, #8]	; (8007458 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800744e:	f009 fe91 	bl	8011174 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8007452:	bf00      	nop
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	20002c00 	.word	0x20002c00

0800745c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007460:	4802      	ldr	r0, [pc, #8]	; (800746c <USART1_IRQHandler+0x10>)
 8007462:	f00a fa2d 	bl	80118c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007466:	bf00      	nop
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	20002b74 	.word	0x20002b74

08007470 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8007474:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007478:	f007 f880 	bl	800e57c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800747c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007480:	f007 f87c 	bl	800e57c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8007484:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007488:	f007 f878 	bl	800e57c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800748c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007490:	f007 f874 	bl	800e57c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007494:	bf00      	nop
 8007496:	bd80      	pop	{r7, pc}

08007498 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	4603      	mov	r3, r0
 80074a0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80074a2:	4b0f      	ldr	r3, [pc, #60]	; (80074e0 <ITM_SendChar+0x48>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a0e      	ldr	r2, [pc, #56]	; (80074e0 <ITM_SendChar+0x48>)
 80074a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074ac:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80074ae:	4b0d      	ldr	r3, [pc, #52]	; (80074e4 <ITM_SendChar+0x4c>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a0c      	ldr	r2, [pc, #48]	; (80074e4 <ITM_SendChar+0x4c>)
 80074b4:	f043 0301 	orr.w	r3, r3, #1
 80074b8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80074ba:	bf00      	nop
 80074bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d0f8      	beq.n	80074bc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80074ca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80074ce:	79fb      	ldrb	r3, [r7, #7]
 80074d0:	6013      	str	r3, [r2, #0]
}
 80074d2:	bf00      	nop
 80074d4:	370c      	adds	r7, #12
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	e000edfc 	.word	0xe000edfc
 80074e4:	e0000e00 	.word	0xe0000e00

080074e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80074e8:	b480      	push	{r7}
 80074ea:	af00      	add	r7, sp, #0
	return 1;
 80074ec:	2301      	movs	r3, #1
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <_kill>:

int _kill(int pid, int sig)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007502:	f00b fcad 	bl	8012e60 <__errno>
 8007506:	4603      	mov	r3, r0
 8007508:	2216      	movs	r2, #22
 800750a:	601a      	str	r2, [r3, #0]
	return -1;
 800750c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007510:	4618      	mov	r0, r3
 8007512:	3708      	adds	r7, #8
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <_exit>:

void _exit (int status)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007520:	f04f 31ff 	mov.w	r1, #4294967295
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f7ff ffe7 	bl	80074f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800752a:	e7fe      	b.n	800752a <_exit+0x12>

0800752c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b086      	sub	sp, #24
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007538:	2300      	movs	r3, #0
 800753a:	617b      	str	r3, [r7, #20]
 800753c:	e00a      	b.n	8007554 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800753e:	f3af 8000 	nop.w
 8007542:	4601      	mov	r1, r0
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	1c5a      	adds	r2, r3, #1
 8007548:	60ba      	str	r2, [r7, #8]
 800754a:	b2ca      	uxtb	r2, r1
 800754c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	3301      	adds	r3, #1
 8007552:	617b      	str	r3, [r7, #20]
 8007554:	697a      	ldr	r2, [r7, #20]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	429a      	cmp	r2, r3
 800755a:	dbf0      	blt.n	800753e <_read+0x12>
	}

return len;
 800755c:	687b      	ldr	r3, [r7, #4]
}
 800755e:	4618      	mov	r0, r3
 8007560:	3718      	adds	r7, #24
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007566:	b580      	push	{r7, lr}
 8007568:	b086      	sub	sp, #24
 800756a:	af00      	add	r7, sp, #0
 800756c:	60f8      	str	r0, [r7, #12]
 800756e:	60b9      	str	r1, [r7, #8]
 8007570:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007572:	2300      	movs	r3, #0
 8007574:	617b      	str	r3, [r7, #20]
 8007576:	e009      	b.n	800758c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	1c5a      	adds	r2, r3, #1
 800757c:	60ba      	str	r2, [r7, #8]
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	4618      	mov	r0, r3
 8007582:	f7ff ff89 	bl	8007498 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	3301      	adds	r3, #1
 800758a:	617b      	str	r3, [r7, #20]
 800758c:	697a      	ldr	r2, [r7, #20]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	429a      	cmp	r2, r3
 8007592:	dbf1      	blt.n	8007578 <_write+0x12>
	}
	return len;
 8007594:	687b      	ldr	r3, [r7, #4]
}
 8007596:	4618      	mov	r0, r3
 8007598:	3718      	adds	r7, #24
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <_close>:

int _close(int file)
{
 800759e:	b480      	push	{r7}
 80075a0:	b083      	sub	sp, #12
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
	return -1;
 80075a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	370c      	adds	r7, #12
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80075b6:	b480      	push	{r7}
 80075b8:	b083      	sub	sp, #12
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
 80075be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80075c6:	605a      	str	r2, [r3, #4]
	return 0;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	370c      	adds	r7, #12
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr

080075d6 <_isatty>:

int _isatty(int file)
{
 80075d6:	b480      	push	{r7}
 80075d8:	b083      	sub	sp, #12
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
	return 1;
 80075de:	2301      	movs	r3, #1
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]
	return 0;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3714      	adds	r7, #20
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
	...

08007608 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b086      	sub	sp, #24
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007610:	4a14      	ldr	r2, [pc, #80]	; (8007664 <_sbrk+0x5c>)
 8007612:	4b15      	ldr	r3, [pc, #84]	; (8007668 <_sbrk+0x60>)
 8007614:	1ad3      	subs	r3, r2, r3
 8007616:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800761c:	4b13      	ldr	r3, [pc, #76]	; (800766c <_sbrk+0x64>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d102      	bne.n	800762a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007624:	4b11      	ldr	r3, [pc, #68]	; (800766c <_sbrk+0x64>)
 8007626:	4a12      	ldr	r2, [pc, #72]	; (8007670 <_sbrk+0x68>)
 8007628:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800762a:	4b10      	ldr	r3, [pc, #64]	; (800766c <_sbrk+0x64>)
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4413      	add	r3, r2
 8007632:	693a      	ldr	r2, [r7, #16]
 8007634:	429a      	cmp	r2, r3
 8007636:	d207      	bcs.n	8007648 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007638:	f00b fc12 	bl	8012e60 <__errno>
 800763c:	4603      	mov	r3, r0
 800763e:	220c      	movs	r2, #12
 8007640:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007642:	f04f 33ff 	mov.w	r3, #4294967295
 8007646:	e009      	b.n	800765c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007648:	4b08      	ldr	r3, [pc, #32]	; (800766c <_sbrk+0x64>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800764e:	4b07      	ldr	r3, [pc, #28]	; (800766c <_sbrk+0x64>)
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4413      	add	r3, r2
 8007656:	4a05      	ldr	r2, [pc, #20]	; (800766c <_sbrk+0x64>)
 8007658:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800765a:	68fb      	ldr	r3, [r7, #12]
}
 800765c:	4618      	mov	r0, r3
 800765e:	3718      	adds	r7, #24
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	20018000 	.word	0x20018000
 8007668:	00000400 	.word	0x00000400
 800766c:	20001914 	.word	0x20001914
 8007670:	20002cf8 	.word	0x20002cf8

08007674 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8007674:	b480      	push	{r7}
 8007676:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8007678:	4b06      	ldr	r3, [pc, #24]	; (8007694 <SystemInit+0x20>)
 800767a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800767e:	4a05      	ldr	r2, [pc, #20]	; (8007694 <SystemInit+0x20>)
 8007680:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007684:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8007688:	bf00      	nop
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	e000ed00 	.word	0xe000ed00

08007698 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8007698:	f8df d034 	ldr.w	sp, [pc, #52]	; 80076d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800769c:	f7ff ffea 	bl	8007674 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80076a0:	480c      	ldr	r0, [pc, #48]	; (80076d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80076a2:	490d      	ldr	r1, [pc, #52]	; (80076d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80076a4:	4a0d      	ldr	r2, [pc, #52]	; (80076dc <LoopForever+0xe>)
  movs r3, #0
 80076a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80076a8:	e002      	b.n	80076b0 <LoopCopyDataInit>

080076aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80076aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80076ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80076ae:	3304      	adds	r3, #4

080076b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80076b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80076b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80076b4:	d3f9      	bcc.n	80076aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80076b6:	4a0a      	ldr	r2, [pc, #40]	; (80076e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80076b8:	4c0a      	ldr	r4, [pc, #40]	; (80076e4 <LoopForever+0x16>)
  movs r3, #0
 80076ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80076bc:	e001      	b.n	80076c2 <LoopFillZerobss>

080076be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80076be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80076c0:	3204      	adds	r2, #4

080076c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80076c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80076c4:	d3fb      	bcc.n	80076be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80076c6:	f00b fbd1 	bl	8012e6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80076ca:	f7fe fdfd 	bl	80062c8 <main>

080076ce <LoopForever>:

LoopForever:
    b LoopForever
 80076ce:	e7fe      	b.n	80076ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80076d0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80076d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80076d8:	20000c4c 	.word	0x20000c4c
  ldr r2, =_sidata
 80076dc:	08016ffc 	.word	0x08016ffc
  ldr r2, =_sbss
 80076e0:	20000c4c 	.word	0x20000c4c
  ldr r4, =_ebss
 80076e4:	20002cf8 	.word	0x20002cf8

080076e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80076e8:	e7fe      	b.n	80076e8 <ADC1_2_IRQHandler>
	...

080076ec <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b08a      	sub	sp, #40	; 0x28
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80076f4:	4b27      	ldr	r3, [pc, #156]	; (8007794 <I2Cx_MspInit+0xa8>)
 80076f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076f8:	4a26      	ldr	r2, [pc, #152]	; (8007794 <I2Cx_MspInit+0xa8>)
 80076fa:	f043 0302 	orr.w	r3, r3, #2
 80076fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007700:	4b24      	ldr	r3, [pc, #144]	; (8007794 <I2Cx_MspInit+0xa8>)
 8007702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007704:	f003 0302 	and.w	r3, r3, #2
 8007708:	613b      	str	r3, [r7, #16]
 800770a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800770c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007710:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8007712:	2312      	movs	r3, #18
 8007714:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8007716:	2301      	movs	r3, #1
 8007718:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800771a:	2303      	movs	r3, #3
 800771c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800771e:	2304      	movs	r3, #4
 8007720:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8007722:	f107 0314 	add.w	r3, r7, #20
 8007726:	4619      	mov	r1, r3
 8007728:	481b      	ldr	r0, [pc, #108]	; (8007798 <I2Cx_MspInit+0xac>)
 800772a:	f006 fc59 	bl	800dfe0 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800772e:	f107 0314 	add.w	r3, r7, #20
 8007732:	4619      	mov	r1, r3
 8007734:	4818      	ldr	r0, [pc, #96]	; (8007798 <I2Cx_MspInit+0xac>)
 8007736:	f006 fc53 	bl	800dfe0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800773a:	4b16      	ldr	r3, [pc, #88]	; (8007794 <I2Cx_MspInit+0xa8>)
 800773c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800773e:	4a15      	ldr	r2, [pc, #84]	; (8007794 <I2Cx_MspInit+0xa8>)
 8007740:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007744:	6593      	str	r3, [r2, #88]	; 0x58
 8007746:	4b13      	ldr	r3, [pc, #76]	; (8007794 <I2Cx_MspInit+0xa8>)
 8007748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800774a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800774e:	60fb      	str	r3, [r7, #12]
 8007750:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8007752:	4b10      	ldr	r3, [pc, #64]	; (8007794 <I2Cx_MspInit+0xa8>)
 8007754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007756:	4a0f      	ldr	r2, [pc, #60]	; (8007794 <I2Cx_MspInit+0xa8>)
 8007758:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800775c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800775e:	4b0d      	ldr	r3, [pc, #52]	; (8007794 <I2Cx_MspInit+0xa8>)
 8007760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007762:	4a0c      	ldr	r2, [pc, #48]	; (8007794 <I2Cx_MspInit+0xa8>)
 8007764:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8007768:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800776a:	2200      	movs	r2, #0
 800776c:	210f      	movs	r1, #15
 800776e:	2021      	movs	r0, #33	; 0x21
 8007770:	f006 fb81 	bl	800de76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8007774:	2021      	movs	r0, #33	; 0x21
 8007776:	f006 fb9a 	bl	800deae <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800777a:	2200      	movs	r2, #0
 800777c:	210f      	movs	r1, #15
 800777e:	2022      	movs	r0, #34	; 0x22
 8007780:	f006 fb79 	bl	800de76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8007784:	2022      	movs	r0, #34	; 0x22
 8007786:	f006 fb92 	bl	800deae <HAL_NVIC_EnableIRQ>
}
 800778a:	bf00      	nop
 800778c:	3728      	adds	r7, #40	; 0x28
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	40021000 	.word	0x40021000
 8007798:	48000400 	.word	0x48000400

0800779c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a12      	ldr	r2, [pc, #72]	; (80077f0 <I2Cx_Init+0x54>)
 80077a8:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a11      	ldr	r2, [pc, #68]	; (80077f4 <I2Cx_Init+0x58>)
 80077ae:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2201      	movs	r2, #1
 80077ba:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f7ff ff89 	bl	80076ec <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f006 fee6 	bl	800e5ac <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80077e0:	2100      	movs	r1, #0
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f007 ffe0 	bl	800f7a8 <HAL_I2CEx_ConfigAnalogFilter>
}
 80077e8:	bf00      	nop
 80077ea:	3708      	adds	r7, #8
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	40005800 	.word	0x40005800
 80077f4:	00702681 	.word	0x00702681

080077f8 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b08a      	sub	sp, #40	; 0x28
 80077fc:	af04      	add	r7, sp, #16
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	4608      	mov	r0, r1
 8007802:	4611      	mov	r1, r2
 8007804:	461a      	mov	r2, r3
 8007806:	4603      	mov	r3, r0
 8007808:	72fb      	strb	r3, [r7, #11]
 800780a:	460b      	mov	r3, r1
 800780c:	813b      	strh	r3, [r7, #8]
 800780e:	4613      	mov	r3, r2
 8007810:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8007812:	2300      	movs	r3, #0
 8007814:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8007816:	7afb      	ldrb	r3, [r7, #11]
 8007818:	b299      	uxth	r1, r3
 800781a:	88f8      	ldrh	r0, [r7, #6]
 800781c:	893a      	ldrh	r2, [r7, #8]
 800781e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007822:	9302      	str	r3, [sp, #8]
 8007824:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007826:	9301      	str	r3, [sp, #4]
 8007828:	6a3b      	ldr	r3, [r7, #32]
 800782a:	9300      	str	r3, [sp, #0]
 800782c:	4603      	mov	r3, r0
 800782e:	68f8      	ldr	r0, [r7, #12]
 8007830:	f007 fa78 	bl	800ed24 <HAL_I2C_Mem_Read>
 8007834:	4603      	mov	r3, r0
 8007836:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8007838:	7dfb      	ldrb	r3, [r7, #23]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d004      	beq.n	8007848 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800783e:	7afb      	ldrb	r3, [r7, #11]
 8007840:	4619      	mov	r1, r3
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f000 f832 	bl	80078ac <I2Cx_Error>
  }
  return status;
 8007848:	7dfb      	ldrb	r3, [r7, #23]
}
 800784a:	4618      	mov	r0, r3
 800784c:	3718      	adds	r7, #24
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b08a      	sub	sp, #40	; 0x28
 8007856:	af04      	add	r7, sp, #16
 8007858:	60f8      	str	r0, [r7, #12]
 800785a:	4608      	mov	r0, r1
 800785c:	4611      	mov	r1, r2
 800785e:	461a      	mov	r2, r3
 8007860:	4603      	mov	r3, r0
 8007862:	72fb      	strb	r3, [r7, #11]
 8007864:	460b      	mov	r3, r1
 8007866:	813b      	strh	r3, [r7, #8]
 8007868:	4613      	mov	r3, r2
 800786a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800786c:	2300      	movs	r3, #0
 800786e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8007870:	7afb      	ldrb	r3, [r7, #11]
 8007872:	b299      	uxth	r1, r3
 8007874:	88f8      	ldrh	r0, [r7, #6]
 8007876:	893a      	ldrh	r2, [r7, #8]
 8007878:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800787c:	9302      	str	r3, [sp, #8]
 800787e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007880:	9301      	str	r3, [sp, #4]
 8007882:	6a3b      	ldr	r3, [r7, #32]
 8007884:	9300      	str	r3, [sp, #0]
 8007886:	4603      	mov	r3, r0
 8007888:	68f8      	ldr	r0, [r7, #12]
 800788a:	f007 f937 	bl	800eafc <HAL_I2C_Mem_Write>
 800788e:	4603      	mov	r3, r0
 8007890:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8007892:	7dfb      	ldrb	r3, [r7, #23]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d004      	beq.n	80078a2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8007898:	7afb      	ldrb	r3, [r7, #11]
 800789a:	4619      	mov	r1, r3
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f000 f805 	bl	80078ac <I2Cx_Error>
  }
  return status;
 80078a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3718      	adds	r7, #24
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	460b      	mov	r3, r1
 80078b6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f006 ff06 	bl	800e6ca <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f7ff ff6c 	bl	800779c <I2Cx_Init>
}
 80078c4:	bf00      	nop
 80078c6:	3708      	adds	r7, #8
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80078d0:	4802      	ldr	r0, [pc, #8]	; (80078dc <SENSOR_IO_Init+0x10>)
 80078d2:	f7ff ff63 	bl	800779c <I2Cx_Init>
}
 80078d6:	bf00      	nop
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	20002c50 	.word	0x20002c50

080078e0 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af02      	add	r7, sp, #8
 80078e6:	4603      	mov	r3, r0
 80078e8:	71fb      	strb	r3, [r7, #7]
 80078ea:	460b      	mov	r3, r1
 80078ec:	71bb      	strb	r3, [r7, #6]
 80078ee:	4613      	mov	r3, r2
 80078f0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80078f2:	79bb      	ldrb	r3, [r7, #6]
 80078f4:	b29a      	uxth	r2, r3
 80078f6:	79f9      	ldrb	r1, [r7, #7]
 80078f8:	2301      	movs	r3, #1
 80078fa:	9301      	str	r3, [sp, #4]
 80078fc:	1d7b      	adds	r3, r7, #5
 80078fe:	9300      	str	r3, [sp, #0]
 8007900:	2301      	movs	r3, #1
 8007902:	4803      	ldr	r0, [pc, #12]	; (8007910 <SENSOR_IO_Write+0x30>)
 8007904:	f7ff ffa5 	bl	8007852 <I2Cx_WriteMultiple>
}
 8007908:	bf00      	nop
 800790a:	3708      	adds	r7, #8
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	20002c50 	.word	0x20002c50

08007914 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b086      	sub	sp, #24
 8007918:	af02      	add	r7, sp, #8
 800791a:	4603      	mov	r3, r0
 800791c:	460a      	mov	r2, r1
 800791e:	71fb      	strb	r3, [r7, #7]
 8007920:	4613      	mov	r3, r2
 8007922:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8007924:	2300      	movs	r3, #0
 8007926:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8007928:	79bb      	ldrb	r3, [r7, #6]
 800792a:	b29a      	uxth	r2, r3
 800792c:	79f9      	ldrb	r1, [r7, #7]
 800792e:	2301      	movs	r3, #1
 8007930:	9301      	str	r3, [sp, #4]
 8007932:	f107 030f 	add.w	r3, r7, #15
 8007936:	9300      	str	r3, [sp, #0]
 8007938:	2301      	movs	r3, #1
 800793a:	4804      	ldr	r0, [pc, #16]	; (800794c <SENSOR_IO_Read+0x38>)
 800793c:	f7ff ff5c 	bl	80077f8 <I2Cx_ReadMultiple>

  return read_value;
 8007940:	7bfb      	ldrb	r3, [r7, #15]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	20002c50 	.word	0x20002c50

08007950 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af02      	add	r7, sp, #8
 8007956:	603a      	str	r2, [r7, #0]
 8007958:	461a      	mov	r2, r3
 800795a:	4603      	mov	r3, r0
 800795c:	71fb      	strb	r3, [r7, #7]
 800795e:	460b      	mov	r3, r1
 8007960:	71bb      	strb	r3, [r7, #6]
 8007962:	4613      	mov	r3, r2
 8007964:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8007966:	79bb      	ldrb	r3, [r7, #6]
 8007968:	b29a      	uxth	r2, r3
 800796a:	79f9      	ldrb	r1, [r7, #7]
 800796c:	88bb      	ldrh	r3, [r7, #4]
 800796e:	9301      	str	r3, [sp, #4]
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	9300      	str	r3, [sp, #0]
 8007974:	2301      	movs	r3, #1
 8007976:	4804      	ldr	r0, [pc, #16]	; (8007988 <SENSOR_IO_ReadMultiple+0x38>)
 8007978:	f7ff ff3e 	bl	80077f8 <I2Cx_ReadMultiple>
 800797c:	4603      	mov	r3, r0
 800797e:	b29b      	uxth	r3, r3
}
 8007980:	4618      	mov	r0, r3
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	20002c50 	.word	0x20002c50

0800798c <NFC_IO_Init>:
  * @brief  Initializes Sensors low level.
  * @param  GpoIrqEnable  0x0 is disable, otherwise enabled  
  * @retval None
  */
void NFC_IO_Init(uint8_t GpoIrqEnable)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b088      	sub	sp, #32
 8007990:	af00      	add	r7, sp, #0
 8007992:	4603      	mov	r3, r0
 8007994:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* I2C init */
  I2Cx_Init(&hI2cHandler);
 8007996:	4824      	ldr	r0, [pc, #144]	; (8007a28 <NFC_IO_Init+0x9c>)
 8007998:	f7ff ff00 	bl	800779c <I2Cx_Init>
  
  /* GPIO Ports Clock Enable */
  NFC_GPIO_CLK_ENABLE();
 800799c:	4b23      	ldr	r3, [pc, #140]	; (8007a2c <NFC_IO_Init+0xa0>)
 800799e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079a0:	4a22      	ldr	r2, [pc, #136]	; (8007a2c <NFC_IO_Init+0xa0>)
 80079a2:	f043 0310 	orr.w	r3, r3, #16
 80079a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80079a8:	4b20      	ldr	r3, [pc, #128]	; (8007a2c <NFC_IO_Init+0xa0>)
 80079aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079ac:	f003 0310 	and.w	r3, r3, #16
 80079b0:	60bb      	str	r3, [r7, #8]
 80079b2:	68bb      	ldr	r3, [r7, #8]
  
  /* Configure GPIO pins for GPO (PE4) */
  if(GpoIrqEnable == 0)
 80079b4:	79fb      	ldrb	r3, [r7, #7]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10e      	bne.n	80079d8 <NFC_IO_Init+0x4c>
  {
    GPIO_InitStruct.Pin = NFC_GPIO_GPO_PIN;
 80079ba:	2310      	movs	r3, #16
 80079bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT; 
 80079be:	2300      	movs	r3, #0
 80079c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80079c2:	2301      	movs	r3, #1
 80079c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079c6:	2303      	movs	r3, #3
 80079c8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(NFC_GPIO_GPO_PIN_PORT, &GPIO_InitStruct);
 80079ca:	f107 030c 	add.w	r3, r7, #12
 80079ce:	4619      	mov	r1, r3
 80079d0:	4817      	ldr	r0, [pc, #92]	; (8007a30 <NFC_IO_Init+0xa4>)
 80079d2:	f006 fb05 	bl	800dfe0 <HAL_GPIO_Init>
 80079d6:	e016      	b.n	8007a06 <NFC_IO_Init+0x7a>
  }
  else
  {
    GPIO_InitStruct.Pin = NFC_GPIO_GPO_PIN;
 80079d8:	2310      	movs	r3, #16
 80079da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80079dc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80079e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80079e2:	2301      	movs	r3, #1
 80079e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079e6:	2303      	movs	r3, #3
 80079e8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(NFC_GPIO_GPO_PIN_PORT, &GPIO_InitStruct);
 80079ea:	f107 030c 	add.w	r3, r7, #12
 80079ee:	4619      	mov	r1, r3
 80079f0:	480f      	ldr	r0, [pc, #60]	; (8007a30 <NFC_IO_Init+0xa4>)
 80079f2:	f006 faf5 	bl	800dfe0 <HAL_GPIO_Init>
    /* Enable and set EXTI4_IRQn Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(EXTI4_IRQn, 3, 0);
 80079f6:	2200      	movs	r2, #0
 80079f8:	2103      	movs	r1, #3
 80079fa:	200a      	movs	r0, #10
 80079fc:	f006 fa3b 	bl	800de76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI4_IRQn);    
 8007a00:	200a      	movs	r0, #10
 8007a02:	f006 fa54 	bl	800deae <HAL_NVIC_EnableIRQ>
  }
  
  /* Configure GPIO pins for DISABLE (PE2)*/
  GPIO_InitStruct.Pin = NFC_GPIO_RFDISABLE_PIN;
 8007a06:	2304      	movs	r3, #4
 8007a08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NFC_GPIO_RFDISABLE_PIN_PORT, &GPIO_InitStruct);
 8007a12:	f107 030c 	add.w	r3, r7, #12
 8007a16:	4619      	mov	r1, r3
 8007a18:	4805      	ldr	r0, [pc, #20]	; (8007a30 <NFC_IO_Init+0xa4>)
 8007a1a:	f006 fae1 	bl	800dfe0 <HAL_GPIO_Init>
}
 8007a1e:	bf00      	nop
 8007a20:	3720      	adds	r7, #32
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	20002c50 	.word	0x20002c50
 8007a2c:	40021000 	.word	0x40021000
 8007a30:	48001000 	.word	0x48001000

08007a34 <NFC_IO_ReadMultiple>:
  * @param  pBuffer  Pointer on the buffer to retrieve M24SR response
  * @param  Length  Length of the data
  * @retval Status  Success or Timeout
  */
uint16_t NFC_IO_ReadMultiple (uint8_t Addr, uint8_t *pBuffer, uint16_t Length )
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b086      	sub	sp, #24
 8007a38:	af02      	add	r7, sp, #8
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	6039      	str	r1, [r7, #0]
 8007a3e:	71fb      	strb	r3, [r7, #7]
 8007a40:	4613      	mov	r3, r2
 8007a42:	80bb      	strh	r3, [r7, #4]
  uint16_t status ;
    
    /* Before calling this function M24SR must be ready: check to detect potential issues */
  status = NFC_IO_IsDeviceReady(Addr, NFC_I2C_TRIALS);
 8007a44:	79fb      	ldrb	r3, [r7, #7]
 8007a46:	2101      	movs	r1, #1
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f000 f847 	bl	8007adc <NFC_IO_IsDeviceReady>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	81fb      	strh	r3, [r7, #14]
  if (status != NFC_I2C_STATUS_SUCCESS)
 8007a52:	89fb      	ldrh	r3, [r7, #14]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d001      	beq.n	8007a5c <NFC_IO_ReadMultiple+0x28>
  {
    return NFC_I2C_ERROR_TIMEOUT;
 8007a58:	2311      	movs	r3, #17
 8007a5a:	e00e      	b.n	8007a7a <NFC_IO_ReadMultiple+0x46>
  } 
    
  if( HAL_I2C_Master_Receive(&hI2cHandler, Addr, (uint8_t*)pBuffer, Length, NFC_I2C_TIMEOUT_STD) != HAL_OK)
 8007a5c:	79fb      	ldrb	r3, [r7, #7]
 8007a5e:	b299      	uxth	r1, r3
 8007a60:	88bb      	ldrh	r3, [r7, #4]
 8007a62:	2208      	movs	r2, #8
 8007a64:	9200      	str	r2, [sp, #0]
 8007a66:	683a      	ldr	r2, [r7, #0]
 8007a68:	4806      	ldr	r0, [pc, #24]	; (8007a84 <NFC_IO_ReadMultiple+0x50>)
 8007a6a:	f006 ff51 	bl	800e910 <HAL_I2C_Master_Receive>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d001      	beq.n	8007a78 <NFC_IO_ReadMultiple+0x44>
  {
    return NFC_I2C_ERROR_TIMEOUT;
 8007a74:	2311      	movs	r3, #17
 8007a76:	e000      	b.n	8007a7a <NFC_IO_ReadMultiple+0x46>
  }
    
  return NFC_I2C_STATUS_SUCCESS;    
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	20002c50 	.word	0x20002c50

08007a88 <NFC_IO_WriteMultiple>:
  * @param  pBuffer  pointer to the buffer to send to the M24SR
  * @param  Length  Length of the data
  * @retval Status  Success or Timeout
  */
uint16_t  NFC_IO_WriteMultiple (uint8_t Addr, uint8_t *pBuffer, uint16_t Length) 
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af02      	add	r7, sp, #8
 8007a8e:	4603      	mov	r3, r0
 8007a90:	6039      	str	r1, [r7, #0]
 8007a92:	71fb      	strb	r3, [r7, #7]
 8007a94:	4613      	mov	r3, r2
 8007a96:	80bb      	strh	r3, [r7, #4]
  uint16_t status ;
    
  /* Before calling this function M24SR must be ready: check to detect potential issues */
  status = NFC_IO_IsDeviceReady(Addr, NFC_I2C_TRIALS);
 8007a98:	79fb      	ldrb	r3, [r7, #7]
 8007a9a:	2101      	movs	r1, #1
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f000 f81d 	bl	8007adc <NFC_IO_IsDeviceReady>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	81fb      	strh	r3, [r7, #14]
  if (status != NFC_I2C_STATUS_SUCCESS)
 8007aa6:	89fb      	ldrh	r3, [r7, #14]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d001      	beq.n	8007ab0 <NFC_IO_WriteMultiple+0x28>
  {
    return NFC_I2C_ERROR_TIMEOUT;
 8007aac:	2311      	movs	r3, #17
 8007aae:	e00e      	b.n	8007ace <NFC_IO_WriteMultiple+0x46>
  } 
    
  if( HAL_I2C_Master_Transmit(&hI2cHandler, Addr, (uint8_t*)pBuffer, Length, NFC_I2C_TIMEOUT_STD) != HAL_OK)    
 8007ab0:	79fb      	ldrb	r3, [r7, #7]
 8007ab2:	b299      	uxth	r1, r3
 8007ab4:	88bb      	ldrh	r3, [r7, #4]
 8007ab6:	2208      	movs	r2, #8
 8007ab8:	9200      	str	r2, [sp, #0]
 8007aba:	683a      	ldr	r2, [r7, #0]
 8007abc:	4806      	ldr	r0, [pc, #24]	; (8007ad8 <NFC_IO_WriteMultiple+0x50>)
 8007abe:	f006 fe33 	bl	800e728 <HAL_I2C_Master_Transmit>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d001      	beq.n	8007acc <NFC_IO_WriteMultiple+0x44>
  {
    return NFC_I2C_ERROR_TIMEOUT;
 8007ac8:	2311      	movs	r3, #17
 8007aca:	e000      	b.n	8007ace <NFC_IO_WriteMultiple+0x46>
  }

  return NFC_I2C_STATUS_SUCCESS;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	20002c50 	.word	0x20002c50

08007adc <NFC_IO_IsDeviceReady>:
  * @param  Addr  M24SR I2C address
  * @param  Trials  Number of trials (currently not present in M24sr)
  * @retval Status  Success or Timeout
  */
uint16_t   NFC_IO_IsDeviceReady (uint8_t Addr, uint32_t Trials)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b086      	sub	sp, #24
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	6039      	str	r1, [r7, #0]
 8007ae6:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;
    uint32_t tickstart = 0;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	617b      	str	r3, [r7, #20]
    uint32_t currenttick = 0;
 8007aec:	2300      	movs	r3, #0
 8007aee:	613b      	str	r3, [r7, #16]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8007af0:	f006 f8b6 	bl	800dc60 <HAL_GetTick>
 8007af4:	6178      	str	r0, [r7, #20]
    
    /* Wait until M24SR is ready or timeout occurs */
    do
    {
        status = HAL_I2C_IsDeviceReady(&hI2cHandler, Addr, Trials, NFC_I2C_TIMEOUT_STD);
 8007af6:	79fb      	ldrb	r3, [r7, #7]
 8007af8:	b299      	uxth	r1, r3
 8007afa:	2308      	movs	r3, #8
 8007afc:	683a      	ldr	r2, [r7, #0]
 8007afe:	480d      	ldr	r0, [pc, #52]	; (8007b34 <NFC_IO_IsDeviceReady+0x58>)
 8007b00:	f007 fa2a 	bl	800ef58 <HAL_I2C_IsDeviceReady>
 8007b04:	4603      	mov	r3, r0
 8007b06:	73fb      	strb	r3, [r7, #15]
        currenttick = HAL_GetTick();
 8007b08:	f006 f8aa 	bl	800dc60 <HAL_GetTick>
 8007b0c:	6138      	str	r0, [r7, #16]
    } while( ( (currenttick - tickstart) < NFC_I2C_TIMEOUT_MAX) && (status != HAL_OK) );
 8007b0e:	693a      	ldr	r2, [r7, #16]
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	1ad3      	subs	r3, r2, r3
 8007b14:	2bc7      	cmp	r3, #199	; 0xc7
 8007b16:	d802      	bhi.n	8007b1e <NFC_IO_IsDeviceReady+0x42>
 8007b18:	7bfb      	ldrb	r3, [r7, #15]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1eb      	bne.n	8007af6 <NFC_IO_IsDeviceReady+0x1a>
    
    if (status != HAL_OK)
 8007b1e:	7bfb      	ldrb	r3, [r7, #15]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d001      	beq.n	8007b28 <NFC_IO_IsDeviceReady+0x4c>
    {
        return NFC_I2C_ERROR_TIMEOUT;
 8007b24:	2311      	movs	r3, #17
 8007b26:	e000      	b.n	8007b2a <NFC_IO_IsDeviceReady+0x4e>
    } 

    return NFC_I2C_STATUS_SUCCESS;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3718      	adds	r7, #24
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	20002c50 	.word	0x20002c50

08007b38 <NFC_IO_ReadState>:
/**
  * @brief  This function read the state of the M24SR GPO
  * @retval GPIO_PinState  state of the M24SR GPO
  */
void NFC_IO_ReadState(uint8_t * pPinState)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  *pPinState = (uint8_t)HAL_GPIO_ReadPin(NFC_GPIO_GPO_PIN_PORT,NFC_GPIO_GPO_PIN);
 8007b40:	2110      	movs	r1, #16
 8007b42:	4805      	ldr	r0, [pc, #20]	; (8007b58 <NFC_IO_ReadState+0x20>)
 8007b44:	f006 fcea 	bl	800e51c <HAL_GPIO_ReadPin>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	701a      	strb	r2, [r3, #0]
}
 8007b50:	bf00      	nop
 8007b52:	3708      	adds	r7, #8
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	48001000 	.word	0x48001000

08007b5c <NFC_IO_Delay>:
  * @brief  Delay function used in M24SR low level driver.
  * @param  Delay  Delay in ms
  * @retval None
  */
void NFC_IO_Delay(uint32_t Delay)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f006 f887 	bl	800dc78 <HAL_Delay>
}
 8007b6a:	bf00      	nop
 8007b6c:	3708      	adds	r7, #8
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
	...

08007b74 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8007b82:	4b19      	ldr	r3, [pc, #100]	; (8007be8 <BSP_ACCELERO_Init+0x74>)
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	4798      	blx	r3
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b6a      	cmp	r3, #106	; 0x6a
 8007b8c:	d002      	beq.n	8007b94 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	73fb      	strb	r3, [r7, #15]
 8007b92:	e024      	b.n	8007bde <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8007b94:	4b15      	ldr	r3, [pc, #84]	; (8007bec <BSP_ACCELERO_Init+0x78>)
 8007b96:	4a14      	ldr	r2, [pc, #80]	; (8007be8 <BSP_ACCELERO_Init+0x74>)
 8007b98:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8007b9a:	2330      	movs	r3, #48	; 0x30
 8007b9c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8007ba6:	2340      	movs	r3, #64	; 0x40
 8007ba8:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8007baa:	2300      	movs	r3, #0
 8007bac:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8007bb2:	797a      	ldrb	r2, [r7, #5]
 8007bb4:	7abb      	ldrb	r3, [r7, #10]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8007bbc:	7a3b      	ldrb	r3, [r7, #8]
 8007bbe:	f043 0304 	orr.w	r3, r3, #4
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	021b      	lsls	r3, r3, #8
 8007bc6:	b21a      	sxth	r2, r3
 8007bc8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	b21b      	sxth	r3, r3
 8007bd0:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8007bd2:	4b06      	ldr	r3, [pc, #24]	; (8007bec <BSP_ACCELERO_Init+0x78>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	89ba      	ldrh	r2, [r7, #12]
 8007bda:	4610      	mov	r0, r2
 8007bdc:	4798      	blx	r3
  }  

  return ret;
 8007bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	20000a0c 	.word	0x20000a0c
 8007bec:	20001918 	.word	0x20001918

08007bf0 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8007bf8:	4b08      	ldr	r3, [pc, #32]	; (8007c1c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d009      	beq.n	8007c14 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8007c00:	4b06      	ldr	r3, [pc, #24]	; (8007c1c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d004      	beq.n	8007c14 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8007c0a:	4b04      	ldr	r3, [pc, #16]	; (8007c1c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	4798      	blx	r3
    }
  }
}
 8007c14:	bf00      	nop
 8007c16:	3708      	adds	r7, #8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	20001918 	.word	0x20001918

08007c20 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8007c2e:	4b1b      	ldr	r3, [pc, #108]	; (8007c9c <BSP_GYRO_Init+0x7c>)
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	4798      	blx	r3
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b6a      	cmp	r3, #106	; 0x6a
 8007c38:	d002      	beq.n	8007c40 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	73fb      	strb	r3, [r7, #15]
 8007c3e:	e028      	b.n	8007c92 <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8007c40:	4b17      	ldr	r3, [pc, #92]	; (8007ca0 <BSP_GYRO_Init+0x80>)
 8007c42:	4a16      	ldr	r2, [pc, #88]	; (8007c9c <BSP_GYRO_Init+0x7c>)
 8007c44:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8007c46:	2300      	movs	r3, #0
 8007c48:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8007c4a:	2330      	movs	r3, #48	; 0x30
 8007c4c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8007c52:	2300      	movs	r3, #0
 8007c54:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8007c56:	2340      	movs	r3, #64	; 0x40
 8007c58:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8007c5e:	230c      	movs	r3, #12
 8007c60:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8007c62:	7aba      	ldrb	r2, [r7, #10]
 8007c64:	797b      	ldrb	r3, [r7, #5]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8007c6c:	7a3b      	ldrb	r3, [r7, #8]
 8007c6e:	f043 0304 	orr.w	r3, r3, #4
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	021b      	lsls	r3, r3, #8
 8007c76:	b21a      	sxth	r2, r3
 8007c78:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	b21b      	sxth	r3, r3
 8007c80:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8007c82:	4b07      	ldr	r3, [pc, #28]	; (8007ca0 <BSP_GYRO_Init+0x80>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	89ba      	ldrh	r2, [r7, #12]
 8007c8a:	4610      	mov	r0, r2
 8007c8c:	4798      	blx	r3
    
    ret = GYRO_OK;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8007c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3710      	adds	r7, #16
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	20000a40 	.word	0x20000a40
 8007ca0:	2000191c 	.word	0x2000191c

08007ca4 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8007cac:	4b08      	ldr	r3, [pc, #32]	; (8007cd0 <BSP_GYRO_GetXYZ+0x2c>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d009      	beq.n	8007cc8 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8007cb4:	4b06      	ldr	r3, [pc, #24]	; (8007cd0 <BSP_GYRO_GetXYZ+0x2c>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d004      	beq.n	8007cc8 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8007cbe:	4b04      	ldr	r3, [pc, #16]	; (8007cd0 <BSP_GYRO_GetXYZ+0x2c>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	4798      	blx	r3
    }
  }
}
 8007cc8:	bf00      	nop
 8007cca:	3708      	adds	r7, #8
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	2000191c 	.word	0x2000191c

08007cd4 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8007cda:	4b0c      	ldr	r3, [pc, #48]	; (8007d0c <BSP_HSENSOR_Init+0x38>)
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	20be      	movs	r0, #190	; 0xbe
 8007ce0:	4798      	blx	r3
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2bbc      	cmp	r3, #188	; 0xbc
 8007ce6:	d002      	beq.n	8007cee <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	607b      	str	r3, [r7, #4]
 8007cec:	e009      	b.n	8007d02 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8007cee:	4b08      	ldr	r3, [pc, #32]	; (8007d10 <BSP_HSENSOR_Init+0x3c>)
 8007cf0:	4a06      	ldr	r2, [pc, #24]	; (8007d0c <BSP_HSENSOR_Init+0x38>)
 8007cf2:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8007cf4:	4b06      	ldr	r3, [pc, #24]	; (8007d10 <BSP_HSENSOR_Init+0x3c>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	20be      	movs	r0, #190	; 0xbe
 8007cfc:	4798      	blx	r3
    ret = HSENSOR_OK;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8007d02:	687b      	ldr	r3, [r7, #4]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3708      	adds	r7, #8
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	200009b0 	.word	0x200009b0
 8007d10:	20001920 	.word	0x20001920

08007d14 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8007d14:	b580      	push	{r7, lr}
 8007d16:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8007d18:	4b04      	ldr	r3, [pc, #16]	; (8007d2c <BSP_HSENSOR_ReadHumidity+0x18>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	20be      	movs	r0, #190	; 0xbe
 8007d20:	4798      	blx	r3
 8007d22:	eef0 7a40 	vmov.f32	s15, s0
}
 8007d26:	eeb0 0a67 	vmov.f32	s0, s15
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	20001920 	.word	0x20001920

08007d30 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8007d36:	2300      	movs	r3, #0
 8007d38:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8007d3a:	4b11      	ldr	r3, [pc, #68]	; (8007d80 <BSP_MAGNETO_Init+0x50>)
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	4798      	blx	r3
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b3d      	cmp	r3, #61	; 0x3d
 8007d44:	d002      	beq.n	8007d4c <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	71fb      	strb	r3, [r7, #7]
 8007d4a:	e013      	b.n	8007d74 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8007d4c:	4b0d      	ldr	r3, [pc, #52]	; (8007d84 <BSP_MAGNETO_Init+0x54>)
 8007d4e:	4a0c      	ldr	r2, [pc, #48]	; (8007d80 <BSP_MAGNETO_Init+0x50>)
 8007d50:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8007d52:	2358      	movs	r3, #88	; 0x58
 8007d54:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8007d56:	2300      	movs	r3, #0
 8007d58:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8007d5e:	2308      	movs	r3, #8
 8007d60:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8007d62:	2340      	movs	r3, #64	; 0x40
 8007d64:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8007d66:	4b07      	ldr	r3, [pc, #28]	; (8007d84 <BSP_MAGNETO_Init+0x54>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	463a      	mov	r2, r7
 8007d6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007d72:	4798      	blx	r3
  } 

  return ret;  
 8007d74:	79fb      	ldrb	r3, [r7, #7]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3708      	adds	r7, #8
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	200009cc 	.word	0x200009cc
 8007d84:	20001924 	.word	0x20001924

08007d88 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8007d90:	4b08      	ldr	r3, [pc, #32]	; (8007db4 <BSP_MAGNETO_GetXYZ+0x2c>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d009      	beq.n	8007dac <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8007d98:	4b06      	ldr	r3, [pc, #24]	; (8007db4 <BSP_MAGNETO_GetXYZ+0x2c>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d004      	beq.n	8007dac <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8007da2:	4b04      	ldr	r3, [pc, #16]	; (8007db4 <BSP_MAGNETO_GetXYZ+0x2c>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	4798      	blx	r3
    }
  }
}
 8007dac:	bf00      	nop
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	20001924 	.word	0x20001924

08007db8 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8007dbe:	4b0c      	ldr	r3, [pc, #48]	; (8007df0 <BSP_PSENSOR_Init+0x38>)
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	20ba      	movs	r0, #186	; 0xba
 8007dc4:	4798      	blx	r3
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2bb1      	cmp	r3, #177	; 0xb1
 8007dca:	d002      	beq.n	8007dd2 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	607b      	str	r3, [r7, #4]
 8007dd0:	e009      	b.n	8007de6 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8007dd2:	4b08      	ldr	r3, [pc, #32]	; (8007df4 <BSP_PSENSOR_Init+0x3c>)
 8007dd4:	4a06      	ldr	r2, [pc, #24]	; (8007df0 <BSP_PSENSOR_Init+0x38>)
 8007dd6:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8007dd8:	4b06      	ldr	r3, [pc, #24]	; (8007df4 <BSP_PSENSOR_Init+0x3c>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	20ba      	movs	r0, #186	; 0xba
 8007de0:	4798      	blx	r3
    ret = PSENSOR_OK;
 8007de2:	2300      	movs	r3, #0
 8007de4:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8007de6:	687b      	ldr	r3, [r7, #4]
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	20000a00 	.word	0x20000a00
 8007df4:	20001928 	.word	0x20001928

08007df8 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8007dfc:	4b04      	ldr	r3, [pc, #16]	; (8007e10 <BSP_PSENSOR_ReadPressure+0x18>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	20ba      	movs	r0, #186	; 0xba
 8007e04:	4798      	blx	r3
 8007e06:	eef0 7a40 	vmov.f32	s15, s0
}
 8007e0a:	eeb0 0a67 	vmov.f32	s0, s15
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	20001928 	.word	0x20001928

08007e14 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8007e1e:	4b09      	ldr	r3, [pc, #36]	; (8007e44 <BSP_TSENSOR_Init+0x30>)
 8007e20:	4a09      	ldr	r2, [pc, #36]	; (8007e48 <BSP_TSENSOR_Init+0x34>)
 8007e22:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8007e24:	f7ff fd52 	bl	80078cc <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8007e28:	4b06      	ldr	r3, [pc, #24]	; (8007e44 <BSP_TSENSOR_Init+0x30>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2100      	movs	r1, #0
 8007e30:	20be      	movs	r0, #190	; 0xbe
 8007e32:	4798      	blx	r3

  ret = TSENSOR_OK;
 8007e34:	2300      	movs	r3, #0
 8007e36:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8007e38:	79fb      	ldrb	r3, [r7, #7]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3708      	adds	r7, #8
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	2000192c 	.word	0x2000192c
 8007e48:	200009bc 	.word	0x200009bc

08007e4c <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8007e50:	4b04      	ldr	r3, [pc, #16]	; (8007e64 <BSP_TSENSOR_ReadTemp+0x18>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	20be      	movs	r0, #190	; 0xbe
 8007e58:	4798      	blx	r3
 8007e5a:	eef0 7a40 	vmov.f32	s15, s0
}
 8007e5e:	eeb0 0a67 	vmov.f32	s0, s15
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	2000192c 	.word	0x2000192c

08007e68 <VL53L0X_GetDeviceInfo>:

}

VL53L0X_Error VL53L0X_GetDeviceInfo(VL53L0X_DEV Dev,
	VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e72:	2300      	movs	r3, #0
 8007e74:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 8007e76:	6839      	ldr	r1, [r7, #0]
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f004 fdd5 	bl	800ca28 <VL53L0X_get_device_info>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b084      	sub	sp, #16
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
 8007e96:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8007e9c:	6839      	ldr	r1, [r7, #0]
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f001 fc53 	bl	800974a <VL53L0X_get_offset_calibration_data_micro_meter>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8007ea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8007eb4:	b5b0      	push	{r4, r5, r7, lr}
 8007eb6:	b094      	sub	sp, #80	; 0x50
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8007ec2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d107      	bne.n	8007eda <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8007eca:	2200      	movs	r2, #0
 8007ecc:	2188      	movs	r1, #136	; 0x88
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f004 ff6a 	bl	800cda8 <VL53L0X_WrByte>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007ee8:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007ef2:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a71      	ldr	r2, [pc, #452]	; (80080c0 <VL53L0X_DataInit+0x20c>)
 8007efa:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a70      	ldr	r2, [pc, #448]	; (80080c4 <VL53L0X_DataInit+0x210>)
 8007f02:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8007f0c:	f107 0308 	add.w	r3, r7, #8
 8007f10:	4619      	mov	r1, r3
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 fa5a 	bl	80083cc <VL53L0X_GetDeviceParameters>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (Status == VL53L0X_ERROR_NONE) {
 8007f1e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d112      	bne.n	8007f4c <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8007f26:	2300      	movs	r3, #0
 8007f28:	723b      	strb	r3, [r7, #8]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	727b      	strb	r3, [r7, #9]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f103 0410 	add.w	r4, r3, #16
 8007f34:	f107 0508 	add.w	r5, r7, #8
 8007f38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f44:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007f48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2264      	movs	r2, #100	; 0x64
 8007f50:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f44f 7261 	mov.w	r2, #900	; 0x384
 8007f5a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007f64:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8007f6e:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2201      	movs	r2, #1
 8007f76:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f7e:	e014      	b.n	8007faa <VL53L0X_DataInit+0xf6>
		if (Status == VL53L0X_ERROR_NONE)
 8007f80:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d114      	bne.n	8007fb2 <VL53L0X_DataInit+0xfe>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8007f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	4619      	mov	r1, r3
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 fd67 	bl	8008a64 <VL53L0X_SetLimitCheckEnable>
 8007f96:	4603      	mov	r3, r0
 8007f98:	461a      	mov	r2, r3
 8007f9a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007fa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fac:	2b05      	cmp	r3, #5
 8007fae:	dde7      	ble.n	8007f80 <VL53L0X_DataInit+0xcc>
 8007fb0:	e000      	b.n	8007fb4 <VL53L0X_DataInit+0x100>
		else
			break;
 8007fb2:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8007fb4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d107      	bne.n	8007fcc <VL53L0X_DataInit+0x118>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	2102      	movs	r1, #2
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fd4f 	bl	8008a64 <VL53L0X_SetLimitCheckEnable>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8007fcc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d107      	bne.n	8007fe4 <VL53L0X_DataInit+0x130>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	2103      	movs	r1, #3
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 fd43 	bl	8008a64 <VL53L0X_SetLimitCheckEnable>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8007fe4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d107      	bne.n	8007ffc <VL53L0X_DataInit+0x148>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007fec:	2200      	movs	r2, #0
 8007fee:	2104      	movs	r1, #4
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 fd37 	bl	8008a64 <VL53L0X_SetLimitCheckEnable>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8007ffc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008000:	2b00      	cmp	r3, #0
 8008002:	d107      	bne.n	8008014 <VL53L0X_DataInit+0x160>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008004:	2200      	movs	r2, #0
 8008006:	2105      	movs	r1, #5
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 fd2b 	bl	8008a64 <VL53L0X_SetLimitCheckEnable>
 800800e:	4603      	mov	r3, r0
 8008010:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8008014:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008018:	2b00      	cmp	r3, #0
 800801a:	d108      	bne.n	800802e <VL53L0X_DataInit+0x17a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800801c:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8008020:	2100      	movs	r1, #0
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 fdce 	bl	8008bc4 <VL53L0X_SetLimitCheckValue>
 8008028:	4603      	mov	r3, r0
 800802a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800802e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008032:	2b00      	cmp	r3, #0
 8008034:	d108      	bne.n	8008048 <VL53L0X_DataInit+0x194>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8008036:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800803a:	2101      	movs	r1, #1
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 fdc1 	bl	8008bc4 <VL53L0X_SetLimitCheckValue>
 8008042:	4603      	mov	r3, r0
 8008044:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008048:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800804c:	2b00      	cmp	r3, #0
 800804e:	d108      	bne.n	8008062 <VL53L0X_DataInit+0x1ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8008050:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8008054:	2102      	movs	r1, #2
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fdb4 	bl	8008bc4 <VL53L0X_SetLimitCheckValue>
 800805c:	4603      	mov	r3, r0
 800805e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008062:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008066:	2b00      	cmp	r3, #0
 8008068:	d107      	bne.n	800807a <VL53L0X_DataInit+0x1c6>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800806a:	2200      	movs	r2, #0
 800806c:	2103      	movs	r1, #3
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 fda8 	bl	8008bc4 <VL53L0X_SetLimitCheckValue>
 8008074:	4603      	mov	r3, r0
 8008076:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800807a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800807e:	2b00      	cmp	r3, #0
 8008080:	d10f      	bne.n	80080a2 <VL53L0X_DataInit+0x1ee>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	22ff      	movs	r2, #255	; 0xff
 8008086:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800808a:	22ff      	movs	r2, #255	; 0xff
 800808c:	2101      	movs	r1, #1
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f004 fe8a 	bl	800cda8 <VL53L0X_WrByte>
 8008094:	4603      	mov	r3, r0
 8008096:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2201      	movs	r2, #1
 800809e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 80080a2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d103      	bne.n	80080b2 <VL53L0X_DataInit+0x1fe>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 80080b2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3750      	adds	r7, #80	; 0x50
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bdb0      	pop	{r4, r5, r7, pc}
 80080be:	bf00      	nop
 80080c0:	00016b85 	.word	0x00016b85
 80080c4:	000970a4 	.word	0x000970a4

080080c8 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80080c8:	b5b0      	push	{r4, r5, r7, lr}
 80080ca:	b09e      	sub	sp, #120	; 0x78
 80080cc:	af02      	add	r7, sp, #8
 80080ce:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80080d0:	2300      	movs	r3, #0
 80080d2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80080d6:	f107 031c 	add.w	r3, r7, #28
 80080da:	2240      	movs	r2, #64	; 0x40
 80080dc:	2100      	movs	r1, #0
 80080de:	4618      	mov	r0, r3
 80080e0:	f00a ff04 	bl	8012eec <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80080e4:	2300      	movs	r3, #0
 80080e6:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80080e8:	2300      	movs	r3, #0
 80080ea:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80080ec:	2300      	movs	r3, #0
 80080ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80080f2:	2300      	movs	r3, #0
 80080f4:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 80080f6:	2300      	movs	r3, #0
 80080f8:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80080fa:	2300      	movs	r3, #0
 80080fc:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80080fe:	2300      	movs	r3, #0
 8008100:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	FixPoint1616_t seqTimeoutMilliSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8008104:	2101      	movs	r1, #1
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f002 fa72 	bl	800a5f0 <VL53L0X_get_info_from_device>
 800810c:	4603      	mov	r3, r0
 800810e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8008118:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8008120:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8008124:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008128:	2b01      	cmp	r3, #1
 800812a:	d80d      	bhi.n	8008148 <VL53L0X_StaticInit+0x80>
 800812c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008130:	2b01      	cmp	r3, #1
 8008132:	d102      	bne.n	800813a <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8008134:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008136:	2b20      	cmp	r3, #32
 8008138:	d806      	bhi.n	8008148 <VL53L0X_StaticInit+0x80>
 800813a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800813e:	2b00      	cmp	r3, #0
 8008140:	d10e      	bne.n	8008160 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8008142:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008144:	2b0c      	cmp	r3, #12
 8008146:	d90b      	bls.n	8008160 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8008148:	f107 0218 	add.w	r2, r7, #24
 800814c:	f107 0314 	add.w	r3, r7, #20
 8008150:	4619      	mov	r1, r3
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f001 fcf4 	bl	8009b40 <VL53L0X_perform_ref_spad_management>
 8008158:	4603      	mov	r3, r0
 800815a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800815e:	e009      	b.n	8008174 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8008160:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008164:	461a      	mov	r2, r3
 8008166:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f001 fef5 	bl	8009f58 <VL53L0X_set_reference_spads>
 800816e:	4603      	mov	r3, r0
 8008170:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8008174:	4b94      	ldr	r3, [pc, #592]	; (80083c8 <VL53L0X_StaticInit+0x300>)
 8008176:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8008178:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10f      	bne.n	80081a0 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8008186:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800818a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800818e:	2b00      	cmp	r3, #0
 8008190:	d104      	bne.n	800819c <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8008198:	66bb      	str	r3, [r7, #104]	; 0x68
 800819a:	e001      	b.n	80081a0 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800819c:	4b8a      	ldr	r3, [pc, #552]	; (80083c8 <VL53L0X_StaticInit+0x300>)
 800819e:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 80081a0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d106      	bne.n	80081b6 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80081a8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f003 fdca 	bl	800bd44 <VL53L0X_load_tuning_settings>
 80081b0:	4603      	mov	r3, r0
 80081b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80081b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d10a      	bne.n	80081d4 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80081be:	2300      	movs	r3, #0
 80081c0:	9300      	str	r3, [sp, #0]
 80081c2:	2304      	movs	r3, #4
 80081c4:	2200      	movs	r2, #0
 80081c6:	2100      	movs	r1, #0
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f001 f8ed 	bl	80093a8 <VL53L0X_SetGpioConfig>
 80081ce:	4603      	mov	r3, r0
 80081d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80081d4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d121      	bne.n	8008220 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80081dc:	2201      	movs	r2, #1
 80081de:	21ff      	movs	r1, #255	; 0xff
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f004 fde1 	bl	800cda8 <VL53L0X_WrByte>
 80081e6:	4603      	mov	r3, r0
 80081e8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80081ec:	f107 031a 	add.w	r3, r7, #26
 80081f0:	461a      	mov	r2, r3
 80081f2:	2184      	movs	r1, #132	; 0x84
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f004 fd63 	bl	800ccc0 <VL53L0X_RdWord>
 80081fa:	4603      	mov	r3, r0
 80081fc:	461a      	mov	r2, r3
 80081fe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008202:	4313      	orrs	r3, r2
 8008204:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008208:	2200      	movs	r2, #0
 800820a:	21ff      	movs	r1, #255	; 0xff
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f004 fdcb 	bl	800cda8 <VL53L0X_WrByte>
 8008212:	4603      	mov	r3, r0
 8008214:	461a      	mov	r2, r3
 8008216:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800821a:	4313      	orrs	r3, r2
 800821c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008220:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008224:	2b00      	cmp	r3, #0
 8008226:	d105      	bne.n	8008234 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8008228:	8b7b      	ldrh	r3, [r7, #26]
 800822a:	011b      	lsls	r3, r3, #4
 800822c:	461a      	mov	r2, r3
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8008234:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008238:	2b00      	cmp	r3, #0
 800823a:	d108      	bne.n	800824e <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800823c:	f107 031c 	add.w	r3, r7, #28
 8008240:	4619      	mov	r1, r3
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 f8c2 	bl	80083cc <VL53L0X_GetDeviceParameters>
 8008248:	4603      	mov	r3, r0
 800824a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800824e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008252:	2b00      	cmp	r3, #0
 8008254:	d110      	bne.n	8008278 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8008256:	f107 0319 	add.w	r3, r7, #25
 800825a:	4619      	mov	r1, r3
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 f984 	bl	800856a <VL53L0X_GetFractionEnable>
 8008262:	4603      	mov	r3, r0
 8008264:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8008268:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800826c:	2b00      	cmp	r3, #0
 800826e:	d103      	bne.n	8008278 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8008270:	7e7a      	ldrb	r2, [r7, #25]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8008278:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10e      	bne.n	800829e <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f103 0410 	add.w	r4, r3, #16
 8008286:	f107 051c 	add.w	r5, r7, #28
 800828a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800828c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800828e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008292:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008294:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008296:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800829a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800829e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d111      	bne.n	80082ca <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 80082a6:	f107 0319 	add.w	r3, r7, #25
 80082aa:	461a      	mov	r2, r3
 80082ac:	2101      	movs	r1, #1
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f004 fc7f 	bl	800cbb2 <VL53L0X_RdByte>
 80082b4:	4603      	mov	r3, r0
 80082b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80082ba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d103      	bne.n	80082ca <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80082c2:	7e7a      	ldrb	r2, [r7, #25]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80082ca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d107      	bne.n	80082e2 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80082d2:	2200      	movs	r2, #0
 80082d4:	2100      	movs	r1, #0
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 f9bc 	bl	8008654 <VL53L0X_SetSequenceStepEnable>
 80082dc:	4603      	mov	r3, r0
 80082de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80082e2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d107      	bne.n	80082fa <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80082ea:	2200      	movs	r2, #0
 80082ec:	2102      	movs	r1, #2
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 f9b0 	bl	8008654 <VL53L0X_SetSequenceStepEnable>
 80082f4:	4603      	mov	r3, r0
 80082f6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80082fa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d103      	bne.n	800830a <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2203      	movs	r2, #3
 8008306:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800830a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800830e:	2b00      	cmp	r3, #0
 8008310:	d109      	bne.n	8008326 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8008312:	f107 0313 	add.w	r3, r7, #19
 8008316:	461a      	mov	r2, r3
 8008318:	2100      	movs	r1, #0
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 f982 	bl	8008624 <VL53L0X_GetVcselPulsePeriod>
 8008320:	4603      	mov	r3, r0
 8008322:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008326:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800832a:	2b00      	cmp	r3, #0
 800832c:	d103      	bne.n	8008336 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800832e:	7cfa      	ldrb	r2, [r7, #19]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8008336:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800833a:	2b00      	cmp	r3, #0
 800833c:	d109      	bne.n	8008352 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800833e:	f107 0313 	add.w	r3, r7, #19
 8008342:	461a      	mov	r2, r3
 8008344:	2101      	movs	r1, #1
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 f96c 	bl	8008624 <VL53L0X_GetVcselPulsePeriod>
 800834c:	4603      	mov	r3, r0
 800834e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008352:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008356:	2b00      	cmp	r3, #0
 8008358:	d103      	bne.n	8008362 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800835a:	7cfa      	ldrb	r2, [r7, #19]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8008362:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008366:	2b00      	cmp	r3, #0
 8008368:	d109      	bne.n	800837e <VL53L0X_StaticInit+0x2b6>
		Status = VL53L0X_GetSequenceStepTimeout(
 800836a:	f107 030c 	add.w	r3, r7, #12
 800836e:	461a      	mov	r2, r3
 8008370:	2103      	movs	r1, #3
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 faba 	bl	80088ec <VL53L0X_GetSequenceStepTimeout>
 8008378:	4603      	mov	r3, r0
 800837a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800837e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008382:	2b00      	cmp	r3, #0
 8008384:	d103      	bne.n	800838e <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800838e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008392:	2b00      	cmp	r3, #0
 8008394:	d109      	bne.n	80083aa <VL53L0X_StaticInit+0x2e2>
		Status = VL53L0X_GetSequenceStepTimeout(
 8008396:	f107 030c 	add.w	r3, r7, #12
 800839a:	461a      	mov	r2, r3
 800839c:	2104      	movs	r1, #4
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 faa4 	bl	80088ec <VL53L0X_GetSequenceStepTimeout>
 80083a4:	4603      	mov	r3, r0
 80083a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80083aa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d103      	bne.n	80083ba <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80083ba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3770      	adds	r7, #112	; 0x70
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bdb0      	pop	{r4, r5, r7, pc}
 80083c6:	bf00      	nop
 80083c8:	200006f4 	.word	0x200006f4

080083cc <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80083d6:	2300      	movs	r3, #0
 80083d8:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	4619      	mov	r1, r3
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 f8b0 	bl	8008544 <VL53L0X_GetDeviceMode>
 80083e4:	4603      	mov	r3, r0
 80083e6:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80083e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d107      	bne.n	8008400 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	3308      	adds	r3, #8
 80083f4:	4619      	mov	r1, r3
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 fab8 	bl	800896c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80083fc:	4603      	mov	r3, r0
 80083fe:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8008400:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d102      	bne.n	800840e <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	2200      	movs	r2, #0
 800840c:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800840e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d107      	bne.n	8008426 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	3310      	adds	r3, #16
 800841a:	4619      	mov	r1, r3
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 faee 	bl	80089fe <VL53L0X_GetXTalkCompensationRateMegaCps>
 8008422:	4603      	mov	r3, r0
 8008424:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8008426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d107      	bne.n	800843e <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	3314      	adds	r3, #20
 8008432:	4619      	mov	r1, r3
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f7ff fd2a 	bl	8007e8e <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800843a:	4603      	mov	r3, r0
 800843c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800843e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d134      	bne.n	80084b0 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008446:	2300      	movs	r3, #0
 8008448:	60bb      	str	r3, [r7, #8]
 800844a:	e02a      	b.n	80084a2 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800844c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d12a      	bne.n	80084aa <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	b299      	uxth	r1, r3
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	3308      	adds	r3, #8
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	683a      	ldr	r2, [r7, #0]
 8008460:	4413      	add	r3, r2
 8008462:	3304      	adds	r3, #4
 8008464:	461a      	mov	r2, r3
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 fc0e 	bl	8008c88 <VL53L0X_GetLimitCheckValue>
 800846c:	4603      	mov	r3, r0
 800846e:	461a      	mov	r2, r3
 8008470:	7bfb      	ldrb	r3, [r7, #15]
 8008472:	4313      	orrs	r3, r2
 8008474:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8008476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d117      	bne.n	80084ae <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	b299      	uxth	r1, r3
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	3318      	adds	r3, #24
 8008486:	683a      	ldr	r2, [r7, #0]
 8008488:	4413      	add	r3, r2
 800848a:	461a      	mov	r2, r3
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 fb75 	bl	8008b7c <VL53L0X_GetLimitCheckEnable>
 8008492:	4603      	mov	r3, r0
 8008494:	461a      	mov	r2, r3
 8008496:	7bfb      	ldrb	r3, [r7, #15]
 8008498:	4313      	orrs	r3, r2
 800849a:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	3301      	adds	r3, #1
 80084a0:	60bb      	str	r3, [r7, #8]
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	2b05      	cmp	r3, #5
 80084a6:	ddd1      	ble.n	800844c <VL53L0X_GetDeviceParameters+0x80>
 80084a8:	e002      	b.n	80084b0 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 80084aa:	bf00      	nop
 80084ac:	e000      	b.n	80084b0 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80084ae:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80084b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d107      	bne.n	80084c8 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	333c      	adds	r3, #60	; 0x3c
 80084bc:	4619      	mov	r1, r3
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 fc70 	bl	8008da4 <VL53L0X_GetWrapAroundCheckEnable>
 80084c4:	4603      	mov	r3, r0
 80084c6:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80084c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d107      	bne.n	80084e0 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	3304      	adds	r3, #4
 80084d4:	4619      	mov	r1, r3
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 f879 	bl	80085ce <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80084dc:	4603      	mov	r3, r0
 80084de:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80084e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3710      	adds	r7, #16
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b085      	sub	sp, #20
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	460b      	mov	r3, r1
 80084f6:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80084f8:	2300      	movs	r3, #0
 80084fa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80084fc:	78fb      	ldrb	r3, [r7, #3]
 80084fe:	2b15      	cmp	r3, #21
 8008500:	bf8c      	ite	hi
 8008502:	2201      	movhi	r2, #1
 8008504:	2200      	movls	r2, #0
 8008506:	b2d2      	uxtb	r2, r2
 8008508:	2a00      	cmp	r2, #0
 800850a:	d10e      	bne.n	800852a <VL53L0X_SetDeviceMode+0x3e>
 800850c:	2201      	movs	r2, #1
 800850e:	409a      	lsls	r2, r3
 8008510:	4b0b      	ldr	r3, [pc, #44]	; (8008540 <VL53L0X_SetDeviceMode+0x54>)
 8008512:	4013      	ands	r3, r2
 8008514:	2b00      	cmp	r3, #0
 8008516:	bf14      	ite	ne
 8008518:	2301      	movne	r3, #1
 800851a:	2300      	moveq	r3, #0
 800851c:	b2db      	uxtb	r3, r3
 800851e:	2b00      	cmp	r3, #0
 8008520:	d003      	beq.n	800852a <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	78fa      	ldrb	r2, [r7, #3]
 8008526:	741a      	strb	r2, [r3, #16]
		break;
 8008528:	e001      	b.n	800852e <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800852a:	23f8      	movs	r3, #248	; 0xf8
 800852c:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800852e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008532:	4618      	mov	r0, r3
 8008534:	3714      	adds	r7, #20
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr
 800853e:	bf00      	nop
 8008540:	0030000b 	.word	0x0030000b

08008544 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8008544:	b480      	push	{r7}
 8008546:	b085      	sub	sp, #20
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800854e:	2300      	movs	r3, #0
 8008550:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	7c1a      	ldrb	r2, [r3, #16]
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800855a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800855e:	4618      	mov	r0, r3
 8008560:	3714      	adds	r7, #20
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr

0800856a <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b084      	sub	sp, #16
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
 8008572:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008574:	2300      	movs	r3, #0
 8008576:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8008578:	683a      	ldr	r2, [r7, #0]
 800857a:	2109      	movs	r1, #9
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f004 fb18 	bl	800cbb2 <VL53L0X_RdByte>
 8008582:	4603      	mov	r3, r0
 8008584:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d106      	bne.n	800859c <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	f003 0301 	and.w	r3, r3, #1
 8008596:	b2da      	uxtb	r2, r3
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800859c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3710      	adds	r7, #16
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80085b2:	2300      	movs	r3, #0
 80085b4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80085b6:	6839      	ldr	r1, [r7, #0]
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f003 fa32 	bl	800ba22 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 80085be:	4603      	mov	r3, r0
 80085c0:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 80085c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b084      	sub	sp, #16
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
 80085d6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80085d8:	2300      	movs	r3, #0
 80085da:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80085dc:	6839      	ldr	r1, [r7, #0]
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f003 faff 	bl	800bbe2 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80085e4:	4603      	mov	r3, r0
 80085e6:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80085e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3710      	adds	r7, #16
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	460b      	mov	r3, r1
 80085fe:	70fb      	strb	r3, [r7, #3]
 8008600:	4613      	mov	r3, r2
 8008602:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008604:	2300      	movs	r3, #0
 8008606:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8008608:	78ba      	ldrb	r2, [r7, #2]
 800860a:	78fb      	ldrb	r3, [r7, #3]
 800860c:	4619      	mov	r1, r3
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f002 ff47 	bl	800b4a2 <VL53L0X_set_vcsel_pulse_period>
 8008614:	4603      	mov	r3, r0
 8008616:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8008618:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	460b      	mov	r3, r1
 800862e:	607a      	str	r2, [r7, #4]
 8008630:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008632:	2300      	movs	r3, #0
 8008634:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8008636:	7afb      	ldrb	r3, [r7, #11]
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	4619      	mov	r1, r3
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f003 f9b9 	bl	800b9b4 <VL53L0X_get_vcsel_pulse_period>
 8008642:	4603      	mov	r3, r0
 8008644:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8008646:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800864a:	4618      	mov	r0, r3
 800864c:	3718      	adds	r7, #24
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
	...

08008654 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b086      	sub	sp, #24
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	460b      	mov	r3, r1
 800865e:	70fb      	strb	r3, [r7, #3]
 8008660:	4613      	mov	r3, r2
 8008662:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008664:	2300      	movs	r3, #0
 8008666:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008668:	2300      	movs	r3, #0
 800866a:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800866c:	2300      	movs	r3, #0
 800866e:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008670:	f107 030f 	add.w	r3, r7, #15
 8008674:	461a      	mov	r2, r3
 8008676:	2101      	movs	r1, #1
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f004 fa9a 	bl	800cbb2 <VL53L0X_RdByte>
 800867e:	4603      	mov	r3, r0
 8008680:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8008682:	7bfb      	ldrb	r3, [r7, #15]
 8008684:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8008686:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d15a      	bne.n	8008744 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800868e:	78bb      	ldrb	r3, [r7, #2]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d12b      	bne.n	80086ec <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8008694:	78fb      	ldrb	r3, [r7, #3]
 8008696:	2b04      	cmp	r3, #4
 8008698:	d825      	bhi.n	80086e6 <VL53L0X_SetSequenceStepEnable+0x92>
 800869a:	a201      	add	r2, pc, #4	; (adr r2, 80086a0 <VL53L0X_SetSequenceStepEnable+0x4c>)
 800869c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a0:	080086b5 	.word	0x080086b5
 80086a4:	080086bf 	.word	0x080086bf
 80086a8:	080086c9 	.word	0x080086c9
 80086ac:	080086d3 	.word	0x080086d3
 80086b0:	080086dd 	.word	0x080086dd
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80086b4:	7dbb      	ldrb	r3, [r7, #22]
 80086b6:	f043 0310 	orr.w	r3, r3, #16
 80086ba:	75bb      	strb	r3, [r7, #22]
				break;
 80086bc:	e043      	b.n	8008746 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 80086be:	7dbb      	ldrb	r3, [r7, #22]
 80086c0:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80086c4:	75bb      	strb	r3, [r7, #22]
				break;
 80086c6:	e03e      	b.n	8008746 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 80086c8:	7dbb      	ldrb	r3, [r7, #22]
 80086ca:	f043 0304 	orr.w	r3, r3, #4
 80086ce:	75bb      	strb	r3, [r7, #22]
				break;
 80086d0:	e039      	b.n	8008746 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 80086d2:	7dbb      	ldrb	r3, [r7, #22]
 80086d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086d8:	75bb      	strb	r3, [r7, #22]
				break;
 80086da:	e034      	b.n	8008746 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 80086dc:	7dbb      	ldrb	r3, [r7, #22]
 80086de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80086e2:	75bb      	strb	r3, [r7, #22]
				break;
 80086e4:	e02f      	b.n	8008746 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80086e6:	23fc      	movs	r3, #252	; 0xfc
 80086e8:	75fb      	strb	r3, [r7, #23]
 80086ea:	e02c      	b.n	8008746 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 80086ec:	78fb      	ldrb	r3, [r7, #3]
 80086ee:	2b04      	cmp	r3, #4
 80086f0:	d825      	bhi.n	800873e <VL53L0X_SetSequenceStepEnable+0xea>
 80086f2:	a201      	add	r2, pc, #4	; (adr r2, 80086f8 <VL53L0X_SetSequenceStepEnable+0xa4>)
 80086f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f8:	0800870d 	.word	0x0800870d
 80086fc:	08008717 	.word	0x08008717
 8008700:	08008721 	.word	0x08008721
 8008704:	0800872b 	.word	0x0800872b
 8008708:	08008735 	.word	0x08008735
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800870c:	7dbb      	ldrb	r3, [r7, #22]
 800870e:	f023 0310 	bic.w	r3, r3, #16
 8008712:	75bb      	strb	r3, [r7, #22]
				break;
 8008714:	e017      	b.n	8008746 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8008716:	7dbb      	ldrb	r3, [r7, #22]
 8008718:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800871c:	75bb      	strb	r3, [r7, #22]
				break;
 800871e:	e012      	b.n	8008746 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8008720:	7dbb      	ldrb	r3, [r7, #22]
 8008722:	f023 0304 	bic.w	r3, r3, #4
 8008726:	75bb      	strb	r3, [r7, #22]
				break;
 8008728:	e00d      	b.n	8008746 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800872a:	7dbb      	ldrb	r3, [r7, #22]
 800872c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008730:	75bb      	strb	r3, [r7, #22]
				break;
 8008732:	e008      	b.n	8008746 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8008734:	7dbb      	ldrb	r3, [r7, #22]
 8008736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800873a:	75bb      	strb	r3, [r7, #22]
				break;
 800873c:	e003      	b.n	8008746 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800873e:	23fc      	movs	r3, #252	; 0xfc
 8008740:	75fb      	strb	r3, [r7, #23]
 8008742:	e000      	b.n	8008746 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8008744:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8008746:	7bfb      	ldrb	r3, [r7, #15]
 8008748:	7dba      	ldrb	r2, [r7, #22]
 800874a:	429a      	cmp	r2, r3
 800874c:	d01e      	beq.n	800878c <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800874e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d107      	bne.n	8008766 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8008756:	7dbb      	ldrb	r3, [r7, #22]
 8008758:	461a      	mov	r2, r3
 800875a:	2101      	movs	r1, #1
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f004 fb23 	bl	800cda8 <VL53L0X_WrByte>
 8008762:	4603      	mov	r3, r0
 8008764:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8008766:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d103      	bne.n	8008776 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	7dba      	ldrb	r2, [r7, #22]
 8008772:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8008776:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d106      	bne.n	800878c <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	695b      	ldr	r3, [r3, #20]
 8008782:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8008784:	6939      	ldr	r1, [r7, #16]
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f7ff ff0e 	bl	80085a8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800878c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008790:	4618      	mov	r0, r3
 8008792:	3718      	adds	r7, #24
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8008798:	b480      	push	{r7}
 800879a:	b087      	sub	sp, #28
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	607b      	str	r3, [r7, #4]
 80087a2:	460b      	mov	r3, r1
 80087a4:	72fb      	strb	r3, [r7, #11]
 80087a6:	4613      	mov	r3, r2
 80087a8:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80087aa:	2300      	movs	r3, #0
 80087ac:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80087b4:	7afb      	ldrb	r3, [r7, #11]
 80087b6:	2b04      	cmp	r3, #4
 80087b8:	d836      	bhi.n	8008828 <sequence_step_enabled+0x90>
 80087ba:	a201      	add	r2, pc, #4	; (adr r2, 80087c0 <sequence_step_enabled+0x28>)
 80087bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c0:	080087d5 	.word	0x080087d5
 80087c4:	080087e7 	.word	0x080087e7
 80087c8:	080087f9 	.word	0x080087f9
 80087cc:	0800880b 	.word	0x0800880b
 80087d0:	0800881d 	.word	0x0800881d
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 80087d4:	7abb      	ldrb	r3, [r7, #10]
 80087d6:	111b      	asrs	r3, r3, #4
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	f003 0301 	and.w	r3, r3, #1
 80087de:	b2da      	uxtb	r2, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	701a      	strb	r2, [r3, #0]
		break;
 80087e4:	e022      	b.n	800882c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 80087e6:	7abb      	ldrb	r3, [r7, #10]
 80087e8:	10db      	asrs	r3, r3, #3
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	f003 0301 	and.w	r3, r3, #1
 80087f0:	b2da      	uxtb	r2, r3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	701a      	strb	r2, [r3, #0]
		break;
 80087f6:	e019      	b.n	800882c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80087f8:	7abb      	ldrb	r3, [r7, #10]
 80087fa:	109b      	asrs	r3, r3, #2
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	f003 0301 	and.w	r3, r3, #1
 8008802:	b2da      	uxtb	r2, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	701a      	strb	r2, [r3, #0]
		break;
 8008808:	e010      	b.n	800882c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800880a:	7abb      	ldrb	r3, [r7, #10]
 800880c:	119b      	asrs	r3, r3, #6
 800880e:	b2db      	uxtb	r3, r3
 8008810:	f003 0301 	and.w	r3, r3, #1
 8008814:	b2da      	uxtb	r2, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	701a      	strb	r2, [r3, #0]
		break;
 800881a:	e007      	b.n	800882c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800881c:	7abb      	ldrb	r3, [r7, #10]
 800881e:	09db      	lsrs	r3, r3, #7
 8008820:	b2da      	uxtb	r2, r3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	701a      	strb	r2, [r3, #0]
		break;
 8008826:	e001      	b.n	800882c <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008828:	23fc      	movs	r3, #252	; 0xfc
 800882a:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800882c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008830:	4618      	mov	r0, r3
 8008832:	371c      	adds	r7, #28
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008846:	2300      	movs	r3, #0
 8008848:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800884a:	2300      	movs	r3, #0
 800884c:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800884e:	f107 030e 	add.w	r3, r7, #14
 8008852:	461a      	mov	r2, r3
 8008854:	2101      	movs	r1, #1
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f004 f9ab 	bl	800cbb2 <VL53L0X_RdByte>
 800885c:	4603      	mov	r3, r0
 800885e:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8008860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d107      	bne.n	8008878 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8008868:	7bba      	ldrb	r2, [r7, #14]
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	2100      	movs	r1, #0
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f7ff ff92 	bl	8008798 <sequence_step_enabled>
 8008874:	4603      	mov	r3, r0
 8008876:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008878:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d108      	bne.n	8008892 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8008880:	7bba      	ldrb	r2, [r7, #14]
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	3302      	adds	r3, #2
 8008886:	2101      	movs	r1, #1
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f7ff ff85 	bl	8008798 <sequence_step_enabled>
 800888e:	4603      	mov	r3, r0
 8008890:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d108      	bne.n	80088ac <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800889a:	7bba      	ldrb	r2, [r7, #14]
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	3301      	adds	r3, #1
 80088a0:	2102      	movs	r1, #2
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f7ff ff78 	bl	8008798 <sequence_step_enabled>
 80088a8:	4603      	mov	r3, r0
 80088aa:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80088ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d108      	bne.n	80088c6 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80088b4:	7bba      	ldrb	r2, [r7, #14]
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	3303      	adds	r3, #3
 80088ba:	2103      	movs	r1, #3
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f7ff ff6b 	bl	8008798 <sequence_step_enabled>
 80088c2:	4603      	mov	r3, r0
 80088c4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80088c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d108      	bne.n	80088e0 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 80088ce:	7bba      	ldrb	r2, [r7, #14]
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	3304      	adds	r3, #4
 80088d4:	2104      	movs	r1, #4
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f7ff ff5e 	bl	8008798 <sequence_step_enabled>
 80088dc:	4603      	mov	r3, r0
 80088de:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80088e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3710      	adds	r7, #16
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <VL53L0X_GetSequenceStepTimeout>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepTimeout(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, FixPoint1616_t *pTimeOutMilliSecs)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b088      	sub	sp, #32
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	460b      	mov	r3, r1
 80088f6:	607a      	str	r2, [r7, #4]
 80088f8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80088fa:	2300      	movs	r3, #0
 80088fc:	77fb      	strb	r3, [r7, #31]
	uint32_t TimeoutMicroSeconds;
	uint32_t WholeNumber_ms = 0;
 80088fe:	2300      	movs	r3, #0
 8008900:	61bb      	str	r3, [r7, #24]
	uint32_t Fraction_ms = 0;
 8008902:	2300      	movs	r3, #0
 8008904:	617b      	str	r3, [r7, #20]
	LOG_FUNCTION_START("");

	Status = get_sequence_step_timeout(Dev, SequenceStepId,
 8008906:	f107 0210 	add.w	r2, r7, #16
 800890a:	7afb      	ldrb	r3, [r7, #11]
 800890c:	4619      	mov	r1, r3
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f002 fbf2 	bl	800b0f8 <get_sequence_step_timeout>
 8008914:	4603      	mov	r3, r0
 8008916:	77fb      	strb	r3, [r7, #31]
		&TimeoutMicroSeconds);
	if (Status == VL53L0X_ERROR_NONE) {
 8008918:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d11c      	bne.n	800895a <VL53L0X_GetSequenceStepTimeout+0x6e>
		WholeNumber_ms = TimeoutMicroSeconds / 1000;
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	4a11      	ldr	r2, [pc, #68]	; (8008968 <VL53L0X_GetSequenceStepTimeout+0x7c>)
 8008924:	fba2 2303 	umull	r2, r3, r2, r3
 8008928:	099b      	lsrs	r3, r3, #6
 800892a:	61bb      	str	r3, [r7, #24]
		Fraction_ms = TimeoutMicroSeconds - (WholeNumber_ms * 1000);
 800892c:	693a      	ldr	r2, [r7, #16]
 800892e:	69bb      	ldr	r3, [r7, #24]
 8008930:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008934:	fb01 f303 	mul.w	r3, r1, r3
 8008938:	1ad3      	subs	r3, r2, r3
 800893a:	617b      	str	r3, [r7, #20]
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 800893c:	69bb      	ldr	r3, [r7, #24]
 800893e:	0419      	lsls	r1, r3, #16
			+ (((Fraction_ms * 0xffff) + 500) / 1000);
 8008940:	697a      	ldr	r2, [r7, #20]
 8008942:	4613      	mov	r3, r2
 8008944:	041b      	lsls	r3, r3, #16
 8008946:	1a9b      	subs	r3, r3, r2
 8008948:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800894c:	4a06      	ldr	r2, [pc, #24]	; (8008968 <VL53L0X_GetSequenceStepTimeout+0x7c>)
 800894e:	fba2 2303 	umull	r2, r3, r2, r3
 8008952:	099b      	lsrs	r3, r3, #6
 8008954:	18ca      	adds	r2, r1, r3
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800895a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800895e:	4618      	mov	r0, r3
 8008960:	3720      	adds	r7, #32
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	10624dd3 	.word	0x10624dd3

0800896c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008976:	2300      	movs	r3, #0
 8008978:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800897a:	f107 030c 	add.w	r3, r7, #12
 800897e:	461a      	mov	r2, r3
 8008980:	21f8      	movs	r1, #248	; 0xf8
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f004 f99c 	bl	800ccc0 <VL53L0X_RdWord>
 8008988:	4603      	mov	r3, r0
 800898a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800898c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d108      	bne.n	80089a6 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8008994:	f107 0308 	add.w	r3, r7, #8
 8008998:	461a      	mov	r2, r3
 800899a:	2104      	movs	r1, #4
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f004 f9c7 	bl	800cd30 <VL53L0X_RdDWord>
 80089a2:	4603      	mov	r3, r0
 80089a4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80089a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d10c      	bne.n	80089c8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80089ae:	89bb      	ldrh	r3, [r7, #12]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d005      	beq.n	80089c0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	89ba      	ldrh	r2, [r7, #12]
 80089b8:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80089c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3710      	adds	r7, #16
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80089de:	2300      	movs	r3, #0
 80089e0:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	7f1b      	ldrb	r3, [r3, #28]
 80089e6:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	7bba      	ldrb	r2, [r7, #14]
 80089ec:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80089ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3714      	adds	r7, #20
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr

080089fe <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b086      	sub	sp, #24
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
 8008a06:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8008a0c:	f107 030e 	add.w	r3, r7, #14
 8008a10:	461a      	mov	r2, r3
 8008a12:	2120      	movs	r1, #32
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f004 f953 	bl	800ccc0 <VL53L0X_RdWord>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8008a1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d118      	bne.n	8008a58 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8008a26:	89fb      	ldrh	r3, [r7, #14]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d109      	bne.n	8008a40 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6a1b      	ldr	r3, [r3, #32]
 8008a30:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	693a      	ldr	r2, [r7, #16]
 8008a36:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	771a      	strb	r2, [r3, #28]
 8008a3e:	e00b      	b.n	8008a58 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8008a40:	89fb      	ldrh	r3, [r7, #14]
 8008a42:	00db      	lsls	r3, r3, #3
 8008a44:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	693a      	ldr	r2, [r7, #16]
 8008a4a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	693a      	ldr	r2, [r7, #16]
 8008a50:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2201      	movs	r2, #1
 8008a56:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008a58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3718      	adds	r7, #24
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b086      	sub	sp, #24
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	807b      	strh	r3, [r7, #2]
 8008a70:	4613      	mov	r3, r2
 8008a72:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a74:	2300      	movs	r3, #0
 8008a76:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8008a80:	2300      	movs	r3, #0
 8008a82:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8008a84:	887b      	ldrh	r3, [r7, #2]
 8008a86:	2b05      	cmp	r3, #5
 8008a88:	d902      	bls.n	8008a90 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008a8a:	23fc      	movs	r3, #252	; 0xfc
 8008a8c:	75fb      	strb	r3, [r7, #23]
 8008a8e:	e05b      	b.n	8008b48 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8008a90:	787b      	ldrb	r3, [r7, #1]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d106      	bne.n	8008aa4 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8008a96:	2300      	movs	r3, #0
 8008a98:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	73bb      	strb	r3, [r7, #14]
 8008aa2:	e00a      	b.n	8008aba <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008aa4:	887b      	ldrh	r3, [r7, #2]
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	330c      	adds	r3, #12
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	4413      	add	r3, r2
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8008aba:	887b      	ldrh	r3, [r7, #2]
 8008abc:	2b05      	cmp	r3, #5
 8008abe:	d841      	bhi.n	8008b44 <VL53L0X_SetLimitCheckEnable+0xe0>
 8008ac0:	a201      	add	r2, pc, #4	; (adr r2, 8008ac8 <VL53L0X_SetLimitCheckEnable+0x64>)
 8008ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac6:	bf00      	nop
 8008ac8:	08008ae1 	.word	0x08008ae1
 8008acc:	08008aeb 	.word	0x08008aeb
 8008ad0:	08008b01 	.word	0x08008b01
 8008ad4:	08008b0b 	.word	0x08008b0b
 8008ad8:	08008b15 	.word	0x08008b15
 8008adc:	08008b2d 	.word	0x08008b2d

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	7bfa      	ldrb	r2, [r7, #15]
 8008ae4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8008ae8:	e02e      	b.n	8008b48 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	461a      	mov	r2, r3
 8008af2:	2144      	movs	r1, #68	; 0x44
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f004 f97b 	bl	800cdf0 <VL53L0X_WrWord>
 8008afa:	4603      	mov	r3, r0
 8008afc:	75fb      	strb	r3, [r7, #23]

			break;
 8008afe:	e023      	b.n	8008b48 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	7bfa      	ldrb	r2, [r7, #15]
 8008b04:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8008b08:	e01e      	b.n	8008b48 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	7bfa      	ldrb	r2, [r7, #15]
 8008b0e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8008b12:	e019      	b.n	8008b48 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8008b14:	7bbb      	ldrb	r3, [r7, #14]
 8008b16:	005b      	lsls	r3, r3, #1
 8008b18:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8008b1a:	7b7b      	ldrb	r3, [r7, #13]
 8008b1c:	22fe      	movs	r2, #254	; 0xfe
 8008b1e:	2160      	movs	r1, #96	; 0x60
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f004 f98f 	bl	800ce44 <VL53L0X_UpdateByte>
 8008b26:	4603      	mov	r3, r0
 8008b28:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8008b2a:	e00d      	b.n	8008b48 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8008b2c:	7bbb      	ldrb	r3, [r7, #14]
 8008b2e:	011b      	lsls	r3, r3, #4
 8008b30:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8008b32:	7b7b      	ldrb	r3, [r7, #13]
 8008b34:	22ef      	movs	r2, #239	; 0xef
 8008b36:	2160      	movs	r1, #96	; 0x60
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f004 f983 	bl	800ce44 <VL53L0X_UpdateByte>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8008b42:	e001      	b.n	8008b48 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008b44:	23fc      	movs	r3, #252	; 0xfc
 8008b46:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008b48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d10f      	bne.n	8008b70 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8008b50:	787b      	ldrb	r3, [r7, #1]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d106      	bne.n	8008b64 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008b56:	887b      	ldrh	r3, [r7, #2]
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008b62:	e005      	b.n	8008b70 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008b64:	887b      	ldrh	r3, [r7, #2]
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	4413      	add	r3, r2
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008b70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3718      	adds	r7, #24
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b087      	sub	sp, #28
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	460b      	mov	r3, r1
 8008b86:	607a      	str	r2, [r7, #4]
 8008b88:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8008b8e:	897b      	ldrh	r3, [r7, #10]
 8008b90:	2b05      	cmp	r3, #5
 8008b92:	d905      	bls.n	8008ba0 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008b94:	23fc      	movs	r3, #252	; 0xfc
 8008b96:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	701a      	strb	r2, [r3, #0]
 8008b9e:	e008      	b.n	8008bb2 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008ba0:	897b      	ldrh	r3, [r7, #10]
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008baa:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	7dba      	ldrb	r2, [r7, #22]
 8008bb0:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008bb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	371c      	adds	r7, #28
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr
	...

08008bc4 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b086      	sub	sp, #24
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	460b      	mov	r3, r1
 8008bce:	607a      	str	r2, [r7, #4]
 8008bd0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8008bd6:	897b      	ldrh	r3, [r7, #10]
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	4413      	add	r3, r2
 8008bdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008be0:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8008be2:	7dbb      	ldrb	r3, [r7, #22]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d107      	bne.n	8008bf8 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008be8:	897b      	ldrh	r3, [r7, #10]
 8008bea:	68fa      	ldr	r2, [r7, #12]
 8008bec:	330c      	adds	r3, #12
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	4413      	add	r3, r2
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	605a      	str	r2, [r3, #4]
 8008bf6:	e040      	b.n	8008c7a <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8008bf8:	897b      	ldrh	r3, [r7, #10]
 8008bfa:	2b05      	cmp	r3, #5
 8008bfc:	d830      	bhi.n	8008c60 <VL53L0X_SetLimitCheckValue+0x9c>
 8008bfe:	a201      	add	r2, pc, #4	; (adr r2, 8008c04 <VL53L0X_SetLimitCheckValue+0x40>)
 8008c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c04:	08008c1d 	.word	0x08008c1d
 8008c08:	08008c25 	.word	0x08008c25
 8008c0c:	08008c3b 	.word	0x08008c3b
 8008c10:	08008c43 	.word	0x08008c43
 8008c14:	08008c4b 	.word	0x08008c4b
 8008c18:	08008c4b 	.word	0x08008c4b

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8008c22:	e01f      	b.n	8008c64 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	2144      	movs	r1, #68	; 0x44
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f004 f8de 	bl	800cdf0 <VL53L0X_WrWord>
 8008c34:	4603      	mov	r3, r0
 8008c36:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8008c38:	e014      	b.n	8008c64 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8008c40:	e010      	b.n	8008c64 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8008c48:	e00c      	b.n	8008c64 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	461a      	mov	r2, r3
 8008c52:	2164      	movs	r1, #100	; 0x64
 8008c54:	68f8      	ldr	r0, [r7, #12]
 8008c56:	f004 f8cb 	bl	800cdf0 <VL53L0X_WrWord>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8008c5e:	e001      	b.n	8008c64 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008c60:	23fc      	movs	r3, #252	; 0xfc
 8008c62:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8008c64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d106      	bne.n	8008c7a <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008c6c:	897b      	ldrh	r3, [r7, #10]
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	330c      	adds	r3, #12
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	4413      	add	r3, r2
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008c7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3718      	adds	r7, #24
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop

08008c88 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b088      	sub	sp, #32
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	460b      	mov	r3, r1
 8008c92:	607a      	str	r2, [r7, #4]
 8008c94:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c96:	2300      	movs	r3, #0
 8008c98:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8008c9e:	897b      	ldrh	r3, [r7, #10]
 8008ca0:	2b05      	cmp	r3, #5
 8008ca2:	d847      	bhi.n	8008d34 <VL53L0X_GetLimitCheckValue+0xac>
 8008ca4:	a201      	add	r2, pc, #4	; (adr r2, 8008cac <VL53L0X_GetLimitCheckValue+0x24>)
 8008ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008caa:	bf00      	nop
 8008cac:	08008cc5 	.word	0x08008cc5
 8008cb0:	08008cd1 	.word	0x08008cd1
 8008cb4:	08008cf7 	.word	0x08008cf7
 8008cb8:	08008d03 	.word	0x08008d03
 8008cbc:	08008d0f 	.word	0x08008d0f
 8008cc0:	08008d0f 	.word	0x08008d0f

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cc8:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	77bb      	strb	r3, [r7, #30]
		break;
 8008cce:	e033      	b.n	8008d38 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8008cd0:	f107 0316 	add.w	r3, r7, #22
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	2144      	movs	r1, #68	; 0x44
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	f003 fff1 	bl	800ccc0 <VL53L0X_RdWord>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8008ce2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d102      	bne.n	8008cf0 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8008cea:	8afb      	ldrh	r3, [r7, #22]
 8008cec:	025b      	lsls	r3, r3, #9
 8008cee:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	77bb      	strb	r3, [r7, #30]
		break;
 8008cf4:	e020      	b.n	8008d38 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cfa:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	77bb      	strb	r3, [r7, #30]
		break;
 8008d00:	e01a      	b.n	8008d38 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d06:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	77bb      	strb	r3, [r7, #30]
		break;
 8008d0c:	e014      	b.n	8008d38 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8008d0e:	f107 0316 	add.w	r3, r7, #22
 8008d12:	461a      	mov	r2, r3
 8008d14:	2164      	movs	r1, #100	; 0x64
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f003 ffd2 	bl	800ccc0 <VL53L0X_RdWord>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8008d20:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d102      	bne.n	8008d2e <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8008d28:	8afb      	ldrh	r3, [r7, #22]
 8008d2a:	025b      	lsls	r3, r3, #9
 8008d2c:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	77bb      	strb	r3, [r7, #30]
		break;
 8008d32:	e001      	b.n	8008d38 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008d34:	23fc      	movs	r3, #252	; 0xfc
 8008d36:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008d38:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d12a      	bne.n	8008d96 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8008d40:	7fbb      	ldrb	r3, [r7, #30]
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d124      	bne.n	8008d90 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d110      	bne.n	8008d6e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8008d4c:	897b      	ldrh	r3, [r7, #10]
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	330c      	adds	r3, #12
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	4413      	add	r3, r2
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	69ba      	ldr	r2, [r7, #24]
 8008d5e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8008d60:	897b      	ldrh	r3, [r7, #10]
 8008d62:	68fa      	ldr	r2, [r7, #12]
 8008d64:	4413      	add	r3, r2
 8008d66:	2200      	movs	r2, #0
 8008d68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008d6c:	e013      	b.n	8008d96 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	69ba      	ldr	r2, [r7, #24]
 8008d72:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8008d74:	897b      	ldrh	r3, [r7, #10]
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	330c      	adds	r3, #12
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	4413      	add	r3, r2
 8008d7e:	69ba      	ldr	r2, [r7, #24]
 8008d80:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8008d82:	897b      	ldrh	r3, [r7, #10]
 8008d84:	68fa      	ldr	r2, [r7, #12]
 8008d86:	4413      	add	r3, r2
 8008d88:	2201      	movs	r2, #1
 8008d8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008d8e:	e002      	b.n	8008d96 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	69ba      	ldr	r2, [r7, #24]
 8008d94:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008d96:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3720      	adds	r7, #32
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop

08008da4 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008dae:	2300      	movs	r3, #0
 8008db0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8008db2:	f107 030e 	add.w	r3, r7, #14
 8008db6:	461a      	mov	r2, r3
 8008db8:	2101      	movs	r1, #1
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f003 fef9 	bl	800cbb2 <VL53L0X_RdByte>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8008dc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d10e      	bne.n	8008dea <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8008dcc:	7bba      	ldrb	r2, [r7, #14]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8008dd4:	7bbb      	ldrb	r3, [r7, #14]
 8008dd6:	b25b      	sxtb	r3, r3
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	da03      	bge.n	8008de4 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	2201      	movs	r2, #1
 8008de0:	701a      	strb	r2, [r3, #0]
 8008de2:	e002      	b.n	8008dea <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	2200      	movs	r2, #0
 8008de8:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d104      	bne.n	8008dfc <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	781a      	ldrb	r2, [r3, #0]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3710      	adds	r7, #16
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e10:	2300      	movs	r3, #0
 8008e12:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8008e14:	f107 030e 	add.w	r3, r7, #14
 8008e18:	4619      	mov	r1, r3
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f7ff fb92 	bl	8008544 <VL53L0X_GetDeviceMode>
 8008e20:	4603      	mov	r3, r0
 8008e22:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8008e24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d107      	bne.n	8008e3c <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8008e2c:	7bbb      	ldrb	r3, [r7, #14]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d104      	bne.n	8008e3c <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 f898 	bl	8008f68 <VL53L0X_StartMeasurement>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8008e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d104      	bne.n	8008e4e <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f001 fb09 	bl	800a45c <VL53L0X_measurement_poll_for_completion>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8008e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d106      	bne.n	8008e64 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8008e56:	7bbb      	ldrb	r3, [r7, #14]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d103      	bne.n	8008e64 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2203      	movs	r2, #3
 8008e60:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8008e64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3710      	adds	r7, #16
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b086      	sub	sp, #24
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8008e80:	2301      	movs	r3, #1
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	68b9      	ldr	r1, [r7, #8]
 8008e86:	68f8      	ldr	r0, [r7, #12]
 8008e88:	f001 faab 	bl	800a3e2 <VL53L0X_perform_ref_calibration>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8008e90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3718      	adds	r7, #24
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b086      	sub	sp, #24
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8008eb2:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8008eb4:	7dbb      	ldrb	r3, [r7, #22]
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d005      	beq.n	8008ec6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8008eba:	7dbb      	ldrb	r3, [r7, #22]
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d002      	beq.n	8008ec6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8008ec0:	7dbb      	ldrb	r3, [r7, #22]
 8008ec2:	2b03      	cmp	r3, #3
 8008ec4:	d147      	bne.n	8008f56 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8008ec6:	f107 030c 	add.w	r3, r7, #12
 8008eca:	f107 0210 	add.w	r2, r7, #16
 8008ece:	2101      	movs	r1, #1
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 fb8d 	bl	80095f0 <VL53L0X_GetInterruptThresholds>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8008ee0:	d803      	bhi.n	8008eea <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8008ee2:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8008ee4:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8008ee8:	d935      	bls.n	8008f56 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8008eea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d131      	bne.n	8008f56 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8008ef2:	78fb      	ldrb	r3, [r7, #3]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d006      	beq.n	8008f06 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8008ef8:	491a      	ldr	r1, [pc, #104]	; (8008f64 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f002 ff22 	bl	800bd44 <VL53L0X_load_tuning_settings>
 8008f00:	4603      	mov	r3, r0
 8008f02:	75fb      	strb	r3, [r7, #23]
 8008f04:	e027      	b.n	8008f56 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8008f06:	2204      	movs	r2, #4
 8008f08:	21ff      	movs	r1, #255	; 0xff
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f003 ff4c 	bl	800cda8 <VL53L0X_WrByte>
 8008f10:	4603      	mov	r3, r0
 8008f12:	461a      	mov	r2, r3
 8008f14:	7dfb      	ldrb	r3, [r7, #23]
 8008f16:	4313      	orrs	r3, r2
 8008f18:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	2170      	movs	r1, #112	; 0x70
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f003 ff42 	bl	800cda8 <VL53L0X_WrByte>
 8008f24:	4603      	mov	r3, r0
 8008f26:	461a      	mov	r2, r3
 8008f28:	7dfb      	ldrb	r3, [r7, #23]
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008f2e:	2200      	movs	r2, #0
 8008f30:	21ff      	movs	r1, #255	; 0xff
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f003 ff38 	bl	800cda8 <VL53L0X_WrByte>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	7dfb      	ldrb	r3, [r7, #23]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008f42:	2200      	movs	r2, #0
 8008f44:	2180      	movs	r1, #128	; 0x80
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f003 ff2e 	bl	800cda8 <VL53L0X_WrByte>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	461a      	mov	r2, r3
 8008f50:	7dfb      	ldrb	r3, [r7, #23]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8008f56:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3718      	adds	r7, #24
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	200007e8 	.word	0x200007e8

08008f68 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b086      	sub	sp, #24
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f70:	2300      	movs	r3, #0
 8008f72:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8008f74:	2301      	movs	r3, #1
 8008f76:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8008f78:	f107 030e 	add.w	r3, r7, #14
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f7ff fae0 	bl	8008544 <VL53L0X_GetDeviceMode>

	switch (DeviceMode) {
 8008f84:	7bbb      	ldrb	r3, [r7, #14]
 8008f86:	2b03      	cmp	r3, #3
 8008f88:	d052      	beq.n	8009030 <VL53L0X_StartMeasurement+0xc8>
 8008f8a:	2b03      	cmp	r3, #3
 8008f8c:	dc6a      	bgt.n	8009064 <VL53L0X_StartMeasurement+0xfc>
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d002      	beq.n	8008f98 <VL53L0X_StartMeasurement+0x30>
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d032      	beq.n	8008ffc <VL53L0X_StartMeasurement+0x94>
 8008f96:	e065      	b.n	8009064 <VL53L0X_StartMeasurement+0xfc>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8008f98:	2201      	movs	r2, #1
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f003 ff03 	bl	800cda8 <VL53L0X_WrByte>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8008fa6:	7bfb      	ldrb	r3, [r7, #15]
 8008fa8:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8008faa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d15b      	bne.n	800906a <VL53L0X_StartMeasurement+0x102>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d008      	beq.n	8008fce <VL53L0X_StartMeasurement+0x66>
					Status = VL53L0X_RdByte(Dev,
 8008fbc:	f107 030d 	add.w	r3, r7, #13
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f003 fdf4 	bl	800cbb2 <VL53L0X_RdByte>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8008fd4:	7b7a      	ldrb	r2, [r7, #13]
 8008fd6:	7bfb      	ldrb	r3, [r7, #15]
 8008fd8:	4013      	ands	r3, r2
 8008fda:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8008fdc:	7bfa      	ldrb	r2, [r7, #15]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d106      	bne.n	8008ff0 <VL53L0X_StartMeasurement+0x88>
				&& (Status == VL53L0X_ERROR_NONE)
 8008fe2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d102      	bne.n	8008ff0 <VL53L0X_StartMeasurement+0x88>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	2bc7      	cmp	r3, #199	; 0xc7
 8008fee:	d9e2      	bls.n	8008fb6 <VL53L0X_StartMeasurement+0x4e>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	2bc7      	cmp	r3, #199	; 0xc7
 8008ff4:	d939      	bls.n	800906a <VL53L0X_StartMeasurement+0x102>
				Status = VL53L0X_ERROR_TIME_OUT;
 8008ff6:	23f9      	movs	r3, #249	; 0xf9
 8008ff8:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8008ffa:	e036      	b.n	800906a <VL53L0X_StartMeasurement+0x102>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8008ffc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d105      	bne.n	8009010 <VL53L0X_StartMeasurement+0xa8>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8009004:	2101      	movs	r1, #1
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f7ff ff48 	bl	8008e9c <VL53L0X_CheckAndLoadInterruptSettings>
 800900c:	4603      	mov	r3, r0
 800900e:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8009010:	2202      	movs	r2, #2
 8009012:	2100      	movs	r1, #0
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f003 fec7 	bl	800cda8 <VL53L0X_WrByte>
 800901a:	4603      	mov	r3, r0
 800901c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800901e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d123      	bne.n	800906e <VL53L0X_StartMeasurement+0x106>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2204      	movs	r2, #4
 800902a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800902e:	e01e      	b.n	800906e <VL53L0X_StartMeasurement+0x106>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8009030:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d105      	bne.n	8009044 <VL53L0X_StartMeasurement+0xdc>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8009038:	2101      	movs	r1, #1
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f7ff ff2e 	bl	8008e9c <VL53L0X_CheckAndLoadInterruptSettings>
 8009040:	4603      	mov	r3, r0
 8009042:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8009044:	2204      	movs	r2, #4
 8009046:	2100      	movs	r1, #0
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f003 fead 	bl	800cda8 <VL53L0X_WrByte>
 800904e:	4603      	mov	r3, r0
 8009050:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8009052:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d10b      	bne.n	8009072 <VL53L0X_StartMeasurement+0x10a>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2204      	movs	r2, #4
 800905e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8009062:	e006      	b.n	8009072 <VL53L0X_StartMeasurement+0x10a>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8009064:	23f8      	movs	r3, #248	; 0xf8
 8009066:	75fb      	strb	r3, [r7, #23]
 8009068:	e004      	b.n	8009074 <VL53L0X_StartMeasurement+0x10c>
		break;
 800906a:	bf00      	nop
 800906c:	e002      	b.n	8009074 <VL53L0X_StartMeasurement+0x10c>
		break;
 800906e:	bf00      	nop
 8009070:	e000      	b.n	8009074 <VL53L0X_StartMeasurement+0x10c>
		break;
 8009072:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8009074:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3718      	adds	r7, #24
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800908a:	2300      	movs	r3, #0
 800908c:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8009094:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8009096:	7bbb      	ldrb	r3, [r7, #14]
 8009098:	2b04      	cmp	r3, #4
 800909a:	d112      	bne.n	80090c2 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800909c:	f107 0308 	add.w	r3, r7, #8
 80090a0:	4619      	mov	r1, r3
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 fb1a 	bl	80096dc <VL53L0X_GetInterruptMaskStatus>
 80090a8:	4603      	mov	r3, r0
 80090aa:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	2b04      	cmp	r3, #4
 80090b0:	d103      	bne.n	80090ba <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	2201      	movs	r2, #1
 80090b6:	701a      	strb	r2, [r3, #0]
 80090b8:	e01c      	b.n	80090f4 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	2200      	movs	r2, #0
 80090be:	701a      	strb	r2, [r3, #0]
 80090c0:	e018      	b.n	80090f4 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 80090c2:	f107 030d 	add.w	r3, r7, #13
 80090c6:	461a      	mov	r2, r3
 80090c8:	2114      	movs	r1, #20
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f003 fd71 	bl	800cbb2 <VL53L0X_RdByte>
 80090d0:	4603      	mov	r3, r0
 80090d2:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 80090d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d10b      	bne.n	80090f4 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 80090dc:	7b7b      	ldrb	r3, [r7, #13]
 80090de:	f003 0301 	and.w	r3, r3, #1
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d003      	beq.n	80090ee <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	2201      	movs	r2, #1
 80090ea:	701a      	strb	r2, [r3, #0]
 80090ec:	e002      	b.n	80090f4 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	2200      	movs	r2, #0
 80090f2:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80090f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3710      	adds	r7, #16
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8009100:	b5b0      	push	{r4, r5, r7, lr}
 8009102:	b096      	sub	sp, #88	; 0x58
 8009104:	af02      	add	r7, sp, #8
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800910a:	2300      	movs	r3, #0
 800910c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8009110:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009114:	230c      	movs	r3, #12
 8009116:	2114      	movs	r1, #20
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f003 fda5 	bl	800cc68 <VL53L0X_ReadMulti>
 800911e:	4603      	mov	r3, r0
 8009120:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8009124:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8009128:	2b00      	cmp	r3, #0
 800912a:	f040 80d1 	bne.w	80092d0 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	2200      	movs	r2, #0
 8009132:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	2200      	movs	r2, #0
 8009138:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800913a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800913e:	b29b      	uxth	r3, r3
 8009140:	021b      	lsls	r3, r3, #8
 8009142:	b29a      	uxth	r2, r3
 8009144:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009148:	b29b      	uxth	r3, r3
 800914a:	4413      	add	r3, r2
 800914c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	2200      	movs	r2, #0
 8009154:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8009156:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800915a:	b29b      	uxth	r3, r3
 800915c:	021b      	lsls	r3, r3, #8
 800915e:	b29a      	uxth	r2, r3
 8009160:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009164:	b29b      	uxth	r3, r3
 8009166:	4413      	add	r3, r2
 8009168:	b29b      	uxth	r3, r3
 800916a:	025b      	lsls	r3, r3, #9
 800916c:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009172:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8009174:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009178:	b29b      	uxth	r3, r3
 800917a:	021b      	lsls	r3, r3, #8
 800917c:	b29a      	uxth	r2, r3
 800917e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8009182:	b29b      	uxth	r3, r3
 8009184:	4413      	add	r3, r2
 8009186:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800918a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800918e:	025b      	lsls	r3, r3, #9
 8009190:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8009196:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800919a:	b29b      	uxth	r3, r3
 800919c:	021b      	lsls	r3, r3, #8
 800919e:	b29a      	uxth	r2, r3
 80091a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	4413      	add	r3, r2
 80091a8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80091b2:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 80091b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80091b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 80091c2:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 80091ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 80091ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80091d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091d4:	d046      	beq.n	8009264 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 80091d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80091d8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80091dc:	fb02 f303 	mul.w	r3, r2, r3
 80091e0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80091e4:	4a57      	ldr	r2, [pc, #348]	; (8009344 <VL53L0X_GetRangingMeasurementData+0x244>)
 80091e6:	fb82 1203 	smull	r1, r2, r2, r3
 80091ea:	1192      	asrs	r2, r2, #6
 80091ec:	17db      	asrs	r3, r3, #31
 80091ee:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 80091f0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6a1b      	ldr	r3, [r3, #32]
 80091f8:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	7f1b      	ldrb	r3, [r3, #28]
 80091fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8009202:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009206:	2b00      	cmp	r3, #0
 8009208:	d02c      	beq.n	8009264 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800920a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800920c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8009210:	fb02 f303 	mul.w	r3, r2, r3
 8009214:	121a      	asrs	r2, r3, #8
					<= 0) {
 8009216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8009218:	429a      	cmp	r2, r3
 800921a:	d10d      	bne.n	8009238 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 800921c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009220:	2b00      	cmp	r3, #0
 8009222:	d004      	beq.n	800922e <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8009224:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8009228:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800922c:	e016      	b.n	800925c <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800922e:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8009232:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009236:	e011      	b.n	800925c <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8009238:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800923c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800923e:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8009242:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009244:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8009248:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800924c:	121b      	asrs	r3, r3, #8
 800924e:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8009250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009252:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8009254:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8009258:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800925c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009260:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8009264:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00d      	beq.n	8009288 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800926c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009270:	089b      	lsrs	r3, r3, #2
 8009272:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8009278:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800927c:	b2db      	uxtb	r3, r3
 800927e:	019b      	lsls	r3, r3, #6
 8009280:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	75da      	strb	r2, [r3, #23]
 8009286:	e006      	b.n	8009296 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800928e:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	2200      	movs	r2, #0
 8009294:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8009296:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800929a:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800929e:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80092a2:	9301      	str	r3, [sp, #4]
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	9300      	str	r3, [sp, #0]
 80092a8:	4613      	mov	r3, r2
 80092aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f003 f9ab 	bl	800c608 <VL53L0X_get_pal_range_status>
 80092b2:	4603      	mov	r3, r0
 80092b4:	461a      	mov	r2, r3
 80092b6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80092ba:	4313      	orrs	r3, r2
 80092bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 80092c0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d103      	bne.n	80092d0 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 80092c8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80092d0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d12f      	bne.n	8009338 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f107 040c 	add.w	r4, r7, #12
 80092de:	f103 0550 	add.w	r5, r3, #80	; 0x50
 80092e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80092e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80092e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80092ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 80092f2:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 80092f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8009300:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8009306:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800930c:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8009312:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8009318:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800931e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8009328:	f107 050c 	add.w	r5, r7, #12
 800932c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800932e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009330:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009334:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009338:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800933c:	4618      	mov	r0, r3
 800933e:	3750      	adds	r7, #80	; 0x50
 8009340:	46bd      	mov	sp, r7
 8009342:	bdb0      	pop	{r4, r5, r7, pc}
 8009344:	10624dd3 	.word	0x10624dd3

08009348 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009352:	2300      	movs	r3, #0
 8009354:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8009356:	2100      	movs	r1, #0
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f7ff f8c7 	bl	80084ec <VL53L0X_SetDeviceMode>
 800935e:	4603      	mov	r3, r0
 8009360:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d104      	bne.n	8009374 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f7ff fd4c 	bl	8008e08 <VL53L0X_PerformSingleMeasurement>
 8009370:	4603      	mov	r3, r0
 8009372:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8009374:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d105      	bne.n	8009388 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800937c:	6839      	ldr	r1, [r7, #0]
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f7ff febe 	bl	8009100 <VL53L0X_GetRangingMeasurementData>
 8009384:	4603      	mov	r3, r0
 8009386:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8009388:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d105      	bne.n	800939c <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8009390:	2100      	movs	r1, #0
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 f962 	bl	800965c <VL53L0X_ClearInterruptMask>
 8009398:	4603      	mov	r3, r0
 800939a:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800939c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3710      	adds	r7, #16
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	4608      	mov	r0, r1
 80093b2:	4611      	mov	r1, r2
 80093b4:	461a      	mov	r2, r3
 80093b6:	4603      	mov	r3, r0
 80093b8:	70fb      	strb	r3, [r7, #3]
 80093ba:	460b      	mov	r3, r1
 80093bc:	70bb      	strb	r3, [r7, #2]
 80093be:	4613      	mov	r3, r2
 80093c0:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80093c2:	2300      	movs	r3, #0
 80093c4:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 80093c6:	78fb      	ldrb	r3, [r7, #3]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d002      	beq.n	80093d2 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 80093cc:	23f6      	movs	r3, #246	; 0xf6
 80093ce:	73fb      	strb	r3, [r7, #15]
 80093d0:	e107      	b.n	80095e2 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80093d2:	78bb      	ldrb	r3, [r7, #2]
 80093d4:	2b14      	cmp	r3, #20
 80093d6:	d110      	bne.n	80093fa <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80093d8:	7e3b      	ldrb	r3, [r7, #24]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d102      	bne.n	80093e4 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 80093de:	2310      	movs	r3, #16
 80093e0:	73bb      	strb	r3, [r7, #14]
 80093e2:	e001      	b.n	80093e8 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 80093e4:	2301      	movs	r3, #1
 80093e6:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 80093e8:	7bbb      	ldrb	r3, [r7, #14]
 80093ea:	461a      	mov	r2, r3
 80093ec:	2184      	movs	r1, #132	; 0x84
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f003 fcda 	bl	800cda8 <VL53L0X_WrByte>
 80093f4:	4603      	mov	r3, r0
 80093f6:	73fb      	strb	r3, [r7, #15]
 80093f8:	e0f3      	b.n	80095e2 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 80093fa:	78bb      	ldrb	r3, [r7, #2]
 80093fc:	2b15      	cmp	r3, #21
 80093fe:	f040 8097 	bne.w	8009530 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009402:	2201      	movs	r2, #1
 8009404:	21ff      	movs	r1, #255	; 0xff
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f003 fcce 	bl	800cda8 <VL53L0X_WrByte>
 800940c:	4603      	mov	r3, r0
 800940e:	461a      	mov	r2, r3
 8009410:	7bfb      	ldrb	r3, [r7, #15]
 8009412:	4313      	orrs	r3, r2
 8009414:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009416:	2200      	movs	r2, #0
 8009418:	2100      	movs	r1, #0
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f003 fcc4 	bl	800cda8 <VL53L0X_WrByte>
 8009420:	4603      	mov	r3, r0
 8009422:	461a      	mov	r2, r3
 8009424:	7bfb      	ldrb	r3, [r7, #15]
 8009426:	4313      	orrs	r3, r2
 8009428:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800942a:	2200      	movs	r2, #0
 800942c:	21ff      	movs	r1, #255	; 0xff
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f003 fcba 	bl	800cda8 <VL53L0X_WrByte>
 8009434:	4603      	mov	r3, r0
 8009436:	461a      	mov	r2, r3
 8009438:	7bfb      	ldrb	r3, [r7, #15]
 800943a:	4313      	orrs	r3, r2
 800943c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800943e:	2201      	movs	r2, #1
 8009440:	2180      	movs	r1, #128	; 0x80
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f003 fcb0 	bl	800cda8 <VL53L0X_WrByte>
 8009448:	4603      	mov	r3, r0
 800944a:	461a      	mov	r2, r3
 800944c:	7bfb      	ldrb	r3, [r7, #15]
 800944e:	4313      	orrs	r3, r2
 8009450:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8009452:	2202      	movs	r2, #2
 8009454:	2185      	movs	r1, #133	; 0x85
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f003 fca6 	bl	800cda8 <VL53L0X_WrByte>
 800945c:	4603      	mov	r3, r0
 800945e:	461a      	mov	r2, r3
 8009460:	7bfb      	ldrb	r3, [r7, #15]
 8009462:	4313      	orrs	r3, r2
 8009464:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8009466:	2204      	movs	r2, #4
 8009468:	21ff      	movs	r1, #255	; 0xff
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f003 fc9c 	bl	800cda8 <VL53L0X_WrByte>
 8009470:	4603      	mov	r3, r0
 8009472:	461a      	mov	r2, r3
 8009474:	7bfb      	ldrb	r3, [r7, #15]
 8009476:	4313      	orrs	r3, r2
 8009478:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800947a:	2200      	movs	r2, #0
 800947c:	21cd      	movs	r1, #205	; 0xcd
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f003 fc92 	bl	800cda8 <VL53L0X_WrByte>
 8009484:	4603      	mov	r3, r0
 8009486:	461a      	mov	r2, r3
 8009488:	7bfb      	ldrb	r3, [r7, #15]
 800948a:	4313      	orrs	r3, r2
 800948c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800948e:	2211      	movs	r2, #17
 8009490:	21cc      	movs	r1, #204	; 0xcc
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f003 fc88 	bl	800cda8 <VL53L0X_WrByte>
 8009498:	4603      	mov	r3, r0
 800949a:	461a      	mov	r2, r3
 800949c:	7bfb      	ldrb	r3, [r7, #15]
 800949e:	4313      	orrs	r3, r2
 80094a0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80094a2:	2207      	movs	r2, #7
 80094a4:	21ff      	movs	r1, #255	; 0xff
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f003 fc7e 	bl	800cda8 <VL53L0X_WrByte>
 80094ac:	4603      	mov	r3, r0
 80094ae:	461a      	mov	r2, r3
 80094b0:	7bfb      	ldrb	r3, [r7, #15]
 80094b2:	4313      	orrs	r3, r2
 80094b4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80094b6:	2200      	movs	r2, #0
 80094b8:	21be      	movs	r1, #190	; 0xbe
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f003 fc74 	bl	800cda8 <VL53L0X_WrByte>
 80094c0:	4603      	mov	r3, r0
 80094c2:	461a      	mov	r2, r3
 80094c4:	7bfb      	ldrb	r3, [r7, #15]
 80094c6:	4313      	orrs	r3, r2
 80094c8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80094ca:	2206      	movs	r2, #6
 80094cc:	21ff      	movs	r1, #255	; 0xff
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f003 fc6a 	bl	800cda8 <VL53L0X_WrByte>
 80094d4:	4603      	mov	r3, r0
 80094d6:	461a      	mov	r2, r3
 80094d8:	7bfb      	ldrb	r3, [r7, #15]
 80094da:	4313      	orrs	r3, r2
 80094dc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80094de:	2209      	movs	r2, #9
 80094e0:	21cc      	movs	r1, #204	; 0xcc
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f003 fc60 	bl	800cda8 <VL53L0X_WrByte>
 80094e8:	4603      	mov	r3, r0
 80094ea:	461a      	mov	r2, r3
 80094ec:	7bfb      	ldrb	r3, [r7, #15]
 80094ee:	4313      	orrs	r3, r2
 80094f0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80094f2:	2200      	movs	r2, #0
 80094f4:	21ff      	movs	r1, #255	; 0xff
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f003 fc56 	bl	800cda8 <VL53L0X_WrByte>
 80094fc:	4603      	mov	r3, r0
 80094fe:	461a      	mov	r2, r3
 8009500:	7bfb      	ldrb	r3, [r7, #15]
 8009502:	4313      	orrs	r3, r2
 8009504:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009506:	2201      	movs	r2, #1
 8009508:	21ff      	movs	r1, #255	; 0xff
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f003 fc4c 	bl	800cda8 <VL53L0X_WrByte>
 8009510:	4603      	mov	r3, r0
 8009512:	461a      	mov	r2, r3
 8009514:	7bfb      	ldrb	r3, [r7, #15]
 8009516:	4313      	orrs	r3, r2
 8009518:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800951a:	2200      	movs	r2, #0
 800951c:	2100      	movs	r1, #0
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f003 fc42 	bl	800cda8 <VL53L0X_WrByte>
 8009524:	4603      	mov	r3, r0
 8009526:	461a      	mov	r2, r3
 8009528:	7bfb      	ldrb	r3, [r7, #15]
 800952a:	4313      	orrs	r3, r2
 800952c:	73fb      	strb	r3, [r7, #15]
 800952e:	e058      	b.n	80095e2 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8009530:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d121      	bne.n	800957c <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8009538:	787b      	ldrb	r3, [r7, #1]
 800953a:	2b04      	cmp	r3, #4
 800953c:	d81b      	bhi.n	8009576 <VL53L0X_SetGpioConfig+0x1ce>
 800953e:	a201      	add	r2, pc, #4	; (adr r2, 8009544 <VL53L0X_SetGpioConfig+0x19c>)
 8009540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009544:	08009559 	.word	0x08009559
 8009548:	0800955f 	.word	0x0800955f
 800954c:	08009565 	.word	0x08009565
 8009550:	0800956b 	.word	0x0800956b
 8009554:	08009571 	.word	0x08009571
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8009558:	2300      	movs	r3, #0
 800955a:	73bb      	strb	r3, [r7, #14]
				break;
 800955c:	e00f      	b.n	800957e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800955e:	2301      	movs	r3, #1
 8009560:	73bb      	strb	r3, [r7, #14]
				break;
 8009562:	e00c      	b.n	800957e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8009564:	2302      	movs	r3, #2
 8009566:	73bb      	strb	r3, [r7, #14]
				break;
 8009568:	e009      	b.n	800957e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800956a:	2303      	movs	r3, #3
 800956c:	73bb      	strb	r3, [r7, #14]
				break;
 800956e:	e006      	b.n	800957e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8009570:	2304      	movs	r3, #4
 8009572:	73bb      	strb	r3, [r7, #14]
				break;
 8009574:	e003      	b.n	800957e <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8009576:	23f5      	movs	r3, #245	; 0xf5
 8009578:	73fb      	strb	r3, [r7, #15]
 800957a:	e000      	b.n	800957e <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800957c:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800957e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d107      	bne.n	8009596 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8009586:	7bbb      	ldrb	r3, [r7, #14]
 8009588:	461a      	mov	r2, r3
 800958a:	210a      	movs	r1, #10
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f003 fc0b 	bl	800cda8 <VL53L0X_WrByte>
 8009592:	4603      	mov	r3, r0
 8009594:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8009596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d10f      	bne.n	80095be <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800959e:	7e3b      	ldrb	r3, [r7, #24]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d102      	bne.n	80095aa <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 80095a4:	2300      	movs	r3, #0
 80095a6:	73bb      	strb	r3, [r7, #14]
 80095a8:	e001      	b.n	80095ae <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 80095aa:	2310      	movs	r3, #16
 80095ac:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80095ae:	7bbb      	ldrb	r3, [r7, #14]
 80095b0:	22ef      	movs	r2, #239	; 0xef
 80095b2:	2184      	movs	r1, #132	; 0x84
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f003 fc45 	bl	800ce44 <VL53L0X_UpdateByte>
 80095ba:	4603      	mov	r3, r0
 80095bc:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 80095be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d103      	bne.n	80095ce <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	787a      	ldrb	r2, [r7, #1]
 80095ca:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 80095ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d105      	bne.n	80095e2 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80095d6:	2100      	movs	r1, #0
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 f83f 	bl	800965c <VL53L0X_ClearInterruptMask>
 80095de:	4603      	mov	r3, r0
 80095e0:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 80095e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop

080095f0 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b086      	sub	sp, #24
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	607a      	str	r2, [r7, #4]
 80095fa:	603b      	str	r3, [r7, #0]
 80095fc:	460b      	mov	r3, r1
 80095fe:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009600:	2300      	movs	r3, #0
 8009602:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8009604:	f107 0314 	add.w	r3, r7, #20
 8009608:	461a      	mov	r2, r3
 800960a:	210e      	movs	r1, #14
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f003 fb57 	bl	800ccc0 <VL53L0X_RdWord>
 8009612:	4603      	mov	r3, r0
 8009614:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8009616:	8abb      	ldrh	r3, [r7, #20]
 8009618:	045b      	lsls	r3, r3, #17
 800961a:	461a      	mov	r2, r3
 800961c:	4b0e      	ldr	r3, [pc, #56]	; (8009658 <VL53L0X_GetInterruptThresholds+0x68>)
 800961e:	4013      	ands	r3, r2
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8009624:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d10f      	bne.n	800964c <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800962c:	f107 0314 	add.w	r3, r7, #20
 8009630:	461a      	mov	r2, r3
 8009632:	210c      	movs	r1, #12
 8009634:	68f8      	ldr	r0, [r7, #12]
 8009636:	f003 fb43 	bl	800ccc0 <VL53L0X_RdWord>
 800963a:	4603      	mov	r3, r0
 800963c:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800963e:	8abb      	ldrh	r3, [r7, #20]
 8009640:	045b      	lsls	r3, r3, #17
 8009642:	461a      	mov	r2, r3
 8009644:	4b04      	ldr	r3, [pc, #16]	; (8009658 <VL53L0X_GetInterruptThresholds+0x68>)
 8009646:	4013      	ands	r3, r2
		*pThresholdHigh =
 8009648:	683a      	ldr	r2, [r7, #0]
 800964a:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800964c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3718      	adds	r7, #24
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}
 8009658:	1ffe0000 	.word	0x1ffe0000

0800965c <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009666:	2300      	movs	r3, #0
 8009668:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800966a:	2300      	movs	r3, #0
 800966c:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800966e:	2201      	movs	r2, #1
 8009670:	210b      	movs	r1, #11
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f003 fb98 	bl	800cda8 <VL53L0X_WrByte>
 8009678:	4603      	mov	r3, r0
 800967a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800967c:	2200      	movs	r2, #0
 800967e:	210b      	movs	r1, #11
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f003 fb91 	bl	800cda8 <VL53L0X_WrByte>
 8009686:	4603      	mov	r3, r0
 8009688:	461a      	mov	r2, r3
 800968a:	7bfb      	ldrb	r3, [r7, #15]
 800968c:	4313      	orrs	r3, r2
 800968e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8009690:	f107 030d 	add.w	r3, r7, #13
 8009694:	461a      	mov	r2, r3
 8009696:	2113      	movs	r1, #19
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f003 fa8a 	bl	800cbb2 <VL53L0X_RdByte>
 800969e:	4603      	mov	r3, r0
 80096a0:	461a      	mov	r2, r3
 80096a2:	7bfb      	ldrb	r3, [r7, #15]
 80096a4:	4313      	orrs	r3, r2
 80096a6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80096a8:	7bbb      	ldrb	r3, [r7, #14]
 80096aa:	3301      	adds	r3, #1
 80096ac:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 80096ae:	7b7b      	ldrb	r3, [r7, #13]
 80096b0:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d006      	beq.n	80096c6 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 80096b8:	7bbb      	ldrb	r3, [r7, #14]
 80096ba:	2b02      	cmp	r3, #2
 80096bc:	d803      	bhi.n	80096c6 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 80096be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d0d3      	beq.n	800966e <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 80096c6:	7bbb      	ldrb	r3, [r7, #14]
 80096c8:	2b02      	cmp	r3, #2
 80096ca:	d901      	bls.n	80096d0 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 80096cc:	23f4      	movs	r3, #244	; 0xf4
 80096ce:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80096d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3710      	adds	r7, #16
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80096e6:	2300      	movs	r3, #0
 80096e8:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 80096ea:	f107 030e 	add.w	r3, r7, #14
 80096ee:	461a      	mov	r2, r3
 80096f0:	2113      	movs	r1, #19
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f003 fa5d 	bl	800cbb2 <VL53L0X_RdByte>
 80096f8:	4603      	mov	r3, r0
 80096fa:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 80096fc:	7bbb      	ldrb	r3, [r7, #14]
 80096fe:	f003 0207 	and.w	r2, r3, #7
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8009706:	7bbb      	ldrb	r3, [r7, #14]
 8009708:	f003 0318 	and.w	r3, r3, #24
 800970c:	2b00      	cmp	r3, #0
 800970e:	d001      	beq.n	8009714 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8009710:	23fa      	movs	r3, #250	; 0xfa
 8009712:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8009714:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009718:	4618      	mov	r0, r3
 800971a:	3710      	adds	r7, #16
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b086      	sub	sp, #24
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800972c:	2300      	movs	r3, #0
 800972e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	68b9      	ldr	r1, [r7, #8]
 8009734:	68f8      	ldr	r0, [r7, #12]
 8009736:	f000 fa03 	bl	8009b40 <VL53L0X_perform_ref_spad_management>
 800973a:	4603      	mov	r3, r0
 800973c:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800973e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009742:	4618      	mov	r0, r3
 8009744:	3718      	adds	r7, #24
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}

0800974a <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800974a:	b580      	push	{r7, lr}
 800974c:	b084      	sub	sp, #16
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
 8009752:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009754:	2300      	movs	r3, #0
 8009756:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8009758:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800975c:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800975e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009762:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8009764:	f107 0308 	add.w	r3, r7, #8
 8009768:	461a      	mov	r2, r3
 800976a:	2128      	movs	r1, #40	; 0x28
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f003 faa7 	bl	800ccc0 <VL53L0X_RdWord>
 8009772:	4603      	mov	r3, r0
 8009774:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8009776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d11e      	bne.n	80097bc <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800977e:	893b      	ldrh	r3, [r7, #8]
 8009780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009784:	b29b      	uxth	r3, r3
 8009786:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8009788:	893b      	ldrh	r3, [r7, #8]
 800978a:	461a      	mov	r2, r3
 800978c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009790:	429a      	cmp	r2, r3
 8009792:	dd0b      	ble.n	80097ac <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8009794:	893a      	ldrh	r2, [r7, #8]
 8009796:	897b      	ldrh	r3, [r7, #10]
 8009798:	1ad3      	subs	r3, r2, r3
 800979a:	b29b      	uxth	r3, r3
 800979c:	b21b      	sxth	r3, r3
 800979e:	461a      	mov	r2, r3
					* 250;
 80097a0:	23fa      	movs	r3, #250	; 0xfa
 80097a2:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	601a      	str	r2, [r3, #0]
 80097aa:	e007      	b.n	80097bc <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80097ac:	893b      	ldrh	r3, [r7, #8]
 80097ae:	b21b      	sxth	r3, r3
 80097b0:	461a      	mov	r2, r3
 80097b2:	23fa      	movs	r3, #250	; 0xfa
 80097b4:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	601a      	str	r2, [r3, #0]

	}

	return Status;
 80097bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3710      	adds	r7, #16
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b08b      	sub	sp, #44	; 0x2c
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	607a      	str	r2, [r7, #4]
 80097d4:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 80097d6:	2308      	movs	r3, #8
 80097d8:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 80097da:	2300      	movs	r3, #0
 80097dc:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	f04f 32ff 	mov.w	r2, #4294967295
 80097e4:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	69bb      	ldr	r3, [r7, #24]
 80097ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80097ee:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	69ba      	ldr	r2, [r7, #24]
 80097f4:	fbb3 f2f2 	udiv	r2, r3, r2
 80097f8:	69b9      	ldr	r1, [r7, #24]
 80097fa:	fb01 f202 	mul.w	r2, r1, r2
 80097fe:	1a9b      	subs	r3, r3, r2
 8009800:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	627b      	str	r3, [r7, #36]	; 0x24
 8009806:	e030      	b.n	800986a <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8009808:	2300      	movs	r3, #0
 800980a:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009810:	4413      	add	r3, r2
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8009816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	429a      	cmp	r2, r3
 800981c:	d11e      	bne.n	800985c <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800981e:	7ffa      	ldrb	r2, [r7, #31]
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	fa42 f303 	asr.w	r3, r2, r3
 8009826:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800982c:	e016      	b.n	800985c <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800982e:	7ffb      	ldrb	r3, [r7, #31]
 8009830:	f003 0301 	and.w	r3, r3, #1
 8009834:	2b00      	cmp	r3, #0
 8009836:	d00b      	beq.n	8009850 <get_next_good_spad+0x88>
				success = 1;
 8009838:	2301      	movs	r3, #1
 800983a:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800983c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983e:	69ba      	ldr	r2, [r7, #24]
 8009840:	fb02 f203 	mul.w	r2, r2, r3
 8009844:	6a3b      	ldr	r3, [r7, #32]
 8009846:	4413      	add	r3, r2
 8009848:	461a      	mov	r2, r3
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	601a      	str	r2, [r3, #0]
				break;
 800984e:	e009      	b.n	8009864 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8009850:	7ffb      	ldrb	r3, [r7, #31]
 8009852:	085b      	lsrs	r3, r3, #1
 8009854:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8009856:	6a3b      	ldr	r3, [r7, #32]
 8009858:	3301      	adds	r3, #1
 800985a:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800985c:	6a3a      	ldr	r2, [r7, #32]
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	429a      	cmp	r2, r3
 8009862:	d3e4      	bcc.n	800982e <get_next_good_spad+0x66>
				coarseIndex++) {
 8009864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009866:	3301      	adds	r3, #1
 8009868:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800986a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	429a      	cmp	r2, r3
 8009870:	d202      	bcs.n	8009878 <get_next_good_spad+0xb0>
 8009872:	7fbb      	ldrb	r3, [r7, #30]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d0c7      	beq.n	8009808 <get_next_good_spad+0x40>
		}
	}
}
 8009878:	bf00      	nop
 800987a:	372c      	adds	r7, #44	; 0x2c
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr

08009884 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800988c:	2301      	movs	r3, #1
 800988e:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	099b      	lsrs	r3, r3, #6
 8009894:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8009896:	4a07      	ldr	r2, [pc, #28]	; (80098b4 <is_aperture+0x30>)
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d101      	bne.n	80098a6 <is_aperture+0x22>
		isAperture = 0;
 80098a2:	2300      	movs	r3, #0
 80098a4:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80098a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3714      	adds	r7, #20
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr
 80098b4:	200009a0 	.word	0x200009a0

080098b8 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b089      	sub	sp, #36	; 0x24
 80098bc:	af00      	add	r7, sp, #0
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80098c4:	2300      	movs	r3, #0
 80098c6:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 80098c8:	2308      	movs	r3, #8
 80098ca:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	69bb      	ldr	r3, [r7, #24]
 80098d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80098d4:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	69ba      	ldr	r2, [r7, #24]
 80098da:	fbb3 f2f2 	udiv	r2, r3, r2
 80098de:	69b9      	ldr	r1, [r7, #24]
 80098e0:	fb01 f202 	mul.w	r2, r1, r2
 80098e4:	1a9b      	subs	r3, r3, r2
 80098e6:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 80098e8:	697a      	ldr	r2, [r7, #20]
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d302      	bcc.n	80098f6 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 80098f0:	23ce      	movs	r3, #206	; 0xce
 80098f2:	77fb      	strb	r3, [r7, #31]
 80098f4:	e010      	b.n	8009918 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 80098f6:	68fa      	ldr	r2, [r7, #12]
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	4413      	add	r3, r2
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	b25a      	sxtb	r2, r3
 8009900:	2101      	movs	r1, #1
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	fa01 f303 	lsl.w	r3, r1, r3
 8009908:	b25b      	sxtb	r3, r3
 800990a:	4313      	orrs	r3, r2
 800990c:	b259      	sxtb	r1, r3
 800990e:	68fa      	ldr	r2, [r7, #12]
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	4413      	add	r3, r2
 8009914:	b2ca      	uxtb	r2, r1
 8009916:	701a      	strb	r2, [r3, #0]

	return status;
 8009918:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800991c:	4618      	mov	r0, r3
 800991e:	3724      	adds	r7, #36	; 0x24
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8009932:	2306      	movs	r3, #6
 8009934:	683a      	ldr	r2, [r7, #0]
 8009936:	21b0      	movs	r1, #176	; 0xb0
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f003 f965 	bl	800cc08 <VL53L0X_WriteMulti>
 800993e:	4603      	mov	r3, r0
 8009940:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8009942:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009946:	4618      	mov	r0, r3
 8009948:	3710      	adds	r7, #16
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}

0800994e <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800994e:	b580      	push	{r7, lr}
 8009950:	b084      	sub	sp, #16
 8009952:	af00      	add	r7, sp, #0
 8009954:	6078      	str	r0, [r7, #4]
 8009956:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8009958:	2306      	movs	r3, #6
 800995a:	683a      	ldr	r2, [r7, #0]
 800995c:	21b0      	movs	r1, #176	; 0xb0
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f003 f982 	bl	800cc68 <VL53L0X_ReadMulti>
 8009964:	4603      	mov	r3, r0
 8009966:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8009968:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800996c:	4618      	mov	r0, r3
 800996e:	3710      	adds	r7, #16
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b08c      	sub	sp, #48	; 0x30
 8009978:	af00      	add	r7, sp, #0
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	607a      	str	r2, [r7, #4]
 800997e:	603b      	str	r3, [r7, #0]
 8009980:	460b      	mov	r3, r1
 8009982:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009984:	2300      	movs	r3, #0
 8009986:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800998a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800998c:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800998e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009990:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8009992:	2300      	movs	r3, #0
 8009994:	62bb      	str	r3, [r7, #40]	; 0x28
 8009996:	e02b      	b.n	80099f0 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8009998:	f107 031c 	add.w	r3, r7, #28
 800999c:	6a3a      	ldr	r2, [r7, #32]
 800999e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f7ff ff11 	bl	80097c8 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80099a6:	69fb      	ldr	r3, [r7, #28]
 80099a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ac:	d103      	bne.n	80099b6 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80099ae:	23ce      	movs	r3, #206	; 0xce
 80099b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80099b4:	e020      	b.n	80099f8 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80099b6:	69fb      	ldr	r3, [r7, #28]
 80099b8:	461a      	mov	r2, r3
 80099ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099bc:	4413      	add	r3, r2
 80099be:	4618      	mov	r0, r3
 80099c0:	f7ff ff60 	bl	8009884 <is_aperture>
 80099c4:	4603      	mov	r3, r0
 80099c6:	461a      	mov	r2, r3
 80099c8:	7afb      	ldrb	r3, [r7, #11]
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d003      	beq.n	80099d6 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80099ce:	23ce      	movs	r3, #206	; 0xce
 80099d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80099d4:	e010      	b.n	80099f8 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 80099d6:	69fb      	ldr	r3, [r7, #28]
 80099d8:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 80099da:	6a3a      	ldr	r2, [r7, #32]
 80099dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80099de:	6838      	ldr	r0, [r7, #0]
 80099e0:	f7ff ff6a 	bl	80098b8 <enable_spad_bit>
		currentSpad++;
 80099e4:	6a3b      	ldr	r3, [r7, #32]
 80099e6:	3301      	adds	r3, #1
 80099e8:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80099ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ec:	3301      	adds	r3, #1
 80099ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80099f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d3cf      	bcc.n	8009998 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 80099f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099fa:	6a3a      	ldr	r2, [r7, #32]
 80099fc:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 80099fe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d106      	bne.n	8009a14 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8009a06:	6839      	ldr	r1, [r7, #0]
 8009a08:	68f8      	ldr	r0, [r7, #12]
 8009a0a:	f7ff ff8d 	bl	8009928 <set_ref_spad_map>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8009a14:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d121      	bne.n	8009a60 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8009a1c:	f107 0314 	add.w	r3, r7, #20
 8009a20:	4619      	mov	r1, r3
 8009a22:	68f8      	ldr	r0, [r7, #12]
 8009a24:	f7ff ff93 	bl	800994e <get_ref_spad_map>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8009a32:	e011      	b.n	8009a58 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8009a34:	683a      	ldr	r2, [r7, #0]
 8009a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a38:	4413      	add	r3, r2
 8009a3a:	781a      	ldrb	r2, [r3, #0]
 8009a3c:	f107 0114 	add.w	r1, r7, #20
 8009a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a42:	440b      	add	r3, r1
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d003      	beq.n	8009a52 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009a4a:	23ce      	movs	r3, #206	; 0xce
 8009a4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8009a50:	e006      	b.n	8009a60 <enable_ref_spads+0xec>
			}
			i++;
 8009a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a54:	3301      	adds	r3, #1
 8009a56:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8009a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d3e9      	bcc.n	8009a34 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8009a60:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3730      	adds	r7, #48	; 0x30
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b08a      	sub	sp, #40	; 0x28
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009a76:	2300      	movs	r3, #0
 8009a78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009a88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8009a8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d107      	bne.n	8009aa4 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8009a94:	22c0      	movs	r2, #192	; 0xc0
 8009a96:	2101      	movs	r1, #1
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f003 f985 	bl	800cda8 <VL53L0X_WrByte>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8009aa4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d108      	bne.n	8009abe <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8009aac:	f107 0308 	add.w	r3, r7, #8
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f7ff fc48 	bl	8009348 <VL53L0X_PerformSingleRangingMeasurement>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8009abe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d107      	bne.n	8009ad6 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	21ff      	movs	r1, #255	; 0xff
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f003 f96c 	bl	800cda8 <VL53L0X_WrByte>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8009ad6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d107      	bne.n	8009aee <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8009ade:	683a      	ldr	r2, [r7, #0]
 8009ae0:	21b6      	movs	r1, #182	; 0xb6
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f003 f8ec 	bl	800ccc0 <VL53L0X_RdWord>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8009aee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d107      	bne.n	8009b06 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009af6:	2200      	movs	r2, #0
 8009af8:	21ff      	movs	r1, #255	; 0xff
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f003 f954 	bl	800cda8 <VL53L0X_WrByte>
 8009b00:	4603      	mov	r3, r0
 8009b02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8009b06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d112      	bne.n	8009b34 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009b0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b12:	461a      	mov	r2, r3
 8009b14:	2101      	movs	r1, #1
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f003 f946 	bl	800cda8 <VL53L0X_WrByte>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8009b22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d104      	bne.n	8009b34 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009b30:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8009b34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3728      	adds	r7, #40	; 0x28
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8009b40:	b590      	push	{r4, r7, lr}
 8009b42:	b09d      	sub	sp, #116	; 0x74
 8009b44:	af06      	add	r7, sp, #24
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8009b52:	23b4      	movs	r3, #180	; 0xb4
 8009b54:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8009b58:	2303      	movs	r3, #3
 8009b5a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8009b5c:	232c      	movs	r3, #44	; 0x2c
 8009b5e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8009b60:	2300      	movs	r3, #0
 8009b62:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8009b64:	2300      	movs	r3, #0
 8009b66:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8009b6c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8009b70:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8009b72:	2300      	movs	r3, #0
 8009b74:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8009b76:	2300      	movs	r3, #0
 8009b78:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8009b7a:	2306      	movs	r3, #6
 8009b7c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8009b82:	2300      	movs	r3, #0
 8009b84:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8009b86:	2300      	movs	r3, #0
 8009b88:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8009b90:	2300      	movs	r3, #0
 8009b92:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8009b94:	2300      	movs	r3, #0
 8009b96:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f8b3 313a 	ldrh.w	r3, [r3, #314]	; 0x13a
 8009ba4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	64bb      	str	r3, [r7, #72]	; 0x48
 8009baa:	e009      	b.n	8009bc0 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8009bac:	68fa      	ldr	r2, [r7, #12]
 8009bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bb0:	4413      	add	r3, r2
 8009bb2:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8009bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8009bc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d3f1      	bcc.n	8009bac <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009bc8:	2201      	movs	r2, #1
 8009bca:	21ff      	movs	r1, #255	; 0xff
 8009bcc:	68f8      	ldr	r0, [r7, #12]
 8009bce:	f003 f8eb 	bl	800cda8 <VL53L0X_WrByte>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8009bd8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d107      	bne.n	8009bf0 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8009be0:	2200      	movs	r2, #0
 8009be2:	214f      	movs	r1, #79	; 0x4f
 8009be4:	68f8      	ldr	r0, [r7, #12]
 8009be6:	f003 f8df 	bl	800cda8 <VL53L0X_WrByte>
 8009bea:	4603      	mov	r3, r0
 8009bec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8009bf0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d107      	bne.n	8009c08 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8009bf8:	222c      	movs	r2, #44	; 0x2c
 8009bfa:	214e      	movs	r1, #78	; 0x4e
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	f003 f8d3 	bl	800cda8 <VL53L0X_WrByte>
 8009c02:	4603      	mov	r3, r0
 8009c04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8009c08:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d107      	bne.n	8009c20 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009c10:	2200      	movs	r2, #0
 8009c12:	21ff      	movs	r1, #255	; 0xff
 8009c14:	68f8      	ldr	r0, [r7, #12]
 8009c16:	f003 f8c7 	bl	800cda8 <VL53L0X_WrByte>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8009c20:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d109      	bne.n	8009c3c <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8009c28:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	21b6      	movs	r1, #182	; 0xb6
 8009c30:	68f8      	ldr	r0, [r7, #12]
 8009c32:	f003 f8b9 	bl	800cda8 <VL53L0X_WrByte>
 8009c36:	4603      	mov	r3, r0
 8009c38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8009c3c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d107      	bne.n	8009c54 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8009c44:	2200      	movs	r2, #0
 8009c46:	2180      	movs	r1, #128	; 0x80
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	f003 f8ad 	bl	800cda8 <VL53L0X_WrByte>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8009c54:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d10a      	bne.n	8009c72 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8009c5c:	f107 0210 	add.w	r2, r7, #16
 8009c60:	f107 0111 	add.w	r1, r7, #17
 8009c64:	2300      	movs	r3, #0
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	f000 fbbb 	bl	800a3e2 <VL53L0X_perform_ref_calibration>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8009c72:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d121      	bne.n	8009cbe <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8009c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c80:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8009c82:	2300      	movs	r3, #0
 8009c84:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8009c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c88:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8009c96:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009c9a:	f107 0218 	add.w	r2, r7, #24
 8009c9e:	9204      	str	r2, [sp, #16]
 8009ca0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ca2:	9203      	str	r2, [sp, #12]
 8009ca4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009ca6:	9202      	str	r2, [sp, #8]
 8009ca8:	9301      	str	r3, [sp, #4]
 8009caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cac:	9300      	str	r3, [sp, #0]
 8009cae:	4623      	mov	r3, r4
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	68f8      	ldr	r0, [r7, #12]
 8009cb4:	f7ff fe5e 	bl	8009974 <enable_ref_spads>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009cbe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d174      	bne.n	8009db0 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8009cc6:	69bb      	ldr	r3, [r7, #24]
 8009cc8:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8009cca:	f107 0312 	add.w	r3, r7, #18
 8009cce:	4619      	mov	r1, r3
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f7ff fecb 	bl	8009a6c <perform_ref_signal_measurement>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8009cdc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d161      	bne.n	8009da8 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8009ce4:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8009ce6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d25d      	bcs.n	8009da8 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8009cec:	2300      	movs	r3, #0
 8009cee:	64bb      	str	r3, [r7, #72]	; 0x48
 8009cf0:	e009      	b.n	8009d06 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8009cf2:	68fa      	ldr	r2, [r7, #12]
 8009cf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cf6:	4413      	add	r3, r2
 8009cf8:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8009d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d02:	3301      	adds	r3, #1
 8009d04:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d3f1      	bcc.n	8009cf2 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8009d0e:	e002      	b.n	8009d16 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8009d10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d12:	3301      	adds	r3, #1
 8009d14:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8009d16:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8009d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d1c:	4413      	add	r3, r2
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7ff fdb0 	bl	8009884 <is_aperture>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d103      	bne.n	8009d32 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8009d2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d3ee      	bcc.n	8009d10 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8009d32:	2301      	movs	r3, #1
 8009d34:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8009d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d38:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8009d46:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009d4a:	f107 0218 	add.w	r2, r7, #24
 8009d4e:	9204      	str	r2, [sp, #16]
 8009d50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d52:	9203      	str	r2, [sp, #12]
 8009d54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009d56:	9202      	str	r2, [sp, #8]
 8009d58:	9301      	str	r3, [sp, #4]
 8009d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d5c:	9300      	str	r3, [sp, #0]
 8009d5e:	4623      	mov	r3, r4
 8009d60:	4602      	mov	r2, r0
 8009d62:	68f8      	ldr	r0, [r7, #12]
 8009d64:	f7ff fe06 	bl	8009974 <enable_ref_spads>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8009d6e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d11b      	bne.n	8009dae <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8009d76:	69bb      	ldr	r3, [r7, #24]
 8009d78:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8009d7a:	f107 0312 	add.w	r3, r7, #18
 8009d7e:	4619      	mov	r1, r3
 8009d80:	68f8      	ldr	r0, [r7, #12]
 8009d82:	f7ff fe73 	bl	8009a6c <perform_ref_signal_measurement>
 8009d86:	4603      	mov	r3, r0
 8009d88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8009d8c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d10c      	bne.n	8009dae <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8009d94:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8009d96:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d208      	bcs.n	8009dae <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8009da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009da4:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8009da6:	e002      	b.n	8009dae <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8009da8:	2300      	movs	r3, #0
 8009daa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009dac:	e000      	b.n	8009db0 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8009dae:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8009db0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	f040 80af 	bne.w	8009f18 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8009dba:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8009dbc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	f240 80aa 	bls.w	8009f18 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8009dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dc6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8009dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dcc:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8009dd4:	f107 031c 	add.w	r3, r7, #28
 8009dd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f009 f878 	bl	8012ed0 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8009de0:	8a7b      	ldrh	r3, [r7, #18]
 8009de2:	461a      	mov	r2, r3
 8009de4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009de6:	1ad3      	subs	r3, r2, r3
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	bfb8      	it	lt
 8009dec:	425b      	neglt	r3, r3
 8009dee:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8009df0:	2300      	movs	r3, #0
 8009df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8009df6:	e086      	b.n	8009f06 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8009dfe:	f107 0314 	add.w	r3, r7, #20
 8009e02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009e04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e06:	f7ff fcdf 	bl	80097c8 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e10:	d103      	bne.n	8009e1a <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009e12:	23ce      	movs	r3, #206	; 0xce
 8009e14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8009e18:	e07e      	b.n	8009f18 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8009e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	63fb      	str	r3, [r7, #60]	; 0x3c

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8009e20:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009e24:	697a      	ldr	r2, [r7, #20]
 8009e26:	4413      	add	r3, r2
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f7ff fd2b 	bl	8009884 <is_aperture>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	461a      	mov	r2, r3
 8009e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d003      	beq.n	8009e40 <VL53L0X_perform_ref_spad_management+0x300>
					needAptSpads) {
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009e38:	23ce      	movs	r3, #206	; 0xce
 8009e3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8009e3e:	e06b      	b.n	8009f18 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			currentSpadIndex = nextGoodSpad;
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8009e4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009e4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7ff fd32 	bl	80098b8 <enable_spad_bit>
 8009e54:	4603      	mov	r3, r0
 8009e56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8009e5a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d10c      	bne.n	8009e7c <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8009e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e64:	3301      	adds	r3, #1
 8009e66:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8009e6e:	4619      	mov	r1, r3
 8009e70:	68f8      	ldr	r0, [r7, #12]
 8009e72:	f7ff fd59 	bl	8009928 <set_ref_spad_map>
 8009e76:	4603      	mov	r3, r0
 8009e78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8009e7c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d146      	bne.n	8009f12 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8009e84:	f107 0312 	add.w	r3, r7, #18
 8009e88:	4619      	mov	r1, r3
 8009e8a:	68f8      	ldr	r0, [r7, #12]
 8009e8c:	f7ff fdee 	bl	8009a6c <perform_ref_signal_measurement>
 8009e90:	4603      	mov	r3, r0
 8009e92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8009e96:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d13b      	bne.n	8009f16 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8009e9e:	8a7b      	ldrh	r3, [r7, #18]
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009ea4:	1ad3      	subs	r3, r2, r3
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	bfb8      	it	lt
 8009eaa:	425b      	neglt	r3, r3
 8009eac:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8009eae:	8a7b      	ldrh	r3, [r7, #18]
 8009eb0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d21c      	bcs.n	8009ef0 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8009eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d914      	bls.n	8009ee8 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8009ebe:	f107 031c 	add.w	r3, r7, #28
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	68f8      	ldr	r0, [r7, #12]
 8009ec6:	f7ff fd2f 	bl	8009928 <set_ref_spad_map>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8009ed6:	f107 011c 	add.w	r1, r7, #28
 8009eda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009edc:	4618      	mov	r0, r3
 8009ede:	f008 fff7 	bl	8012ed0 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8009ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ee4:	3b01      	subs	r3, #1
 8009ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eee:	e00a      	b.n	8009f06 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8009ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef2:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8009efa:	f107 031c 	add.w	r3, r7, #28
 8009efe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f00:	4618      	mov	r0, r3
 8009f02:	f008 ffe5 	bl	8012ed0 <memcpy>
		while (!complete) {
 8009f06:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	f43f af74 	beq.w	8009df8 <VL53L0X_perform_ref_spad_management+0x2b8>
 8009f10:	e002      	b.n	8009f18 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8009f12:	bf00      	nop
 8009f14:	e000      	b.n	8009f18 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8009f16:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009f18:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d115      	bne.n	8009f4c <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f24:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8009f2c:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2201      	movs	r2, #1
 8009f32:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	b2da      	uxtb	r2, r3
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	781a      	ldrb	r2, [r3, #0]
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8009f4c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	375c      	adds	r7, #92	; 0x5c
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd90      	pop	{r4, r7, pc}

08009f58 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8009f58:	b590      	push	{r4, r7, lr}
 8009f5a:	b093      	sub	sp, #76	; 0x4c
 8009f5c:	af06      	add	r7, sp, #24
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	60b9      	str	r1, [r7, #8]
 8009f62:	4613      	mov	r3, r2
 8009f64:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f66:	2300      	movs	r3, #0
 8009f68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8009f70:	23b4      	movs	r3, #180	; 0xb4
 8009f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8009f76:	2306      	movs	r3, #6
 8009f78:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8009f7a:	232c      	movs	r3, #44	; 0x2c
 8009f7c:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009f7e:	2201      	movs	r2, #1
 8009f80:	21ff      	movs	r1, #255	; 0xff
 8009f82:	68f8      	ldr	r0, [r7, #12]
 8009f84:	f002 ff10 	bl	800cda8 <VL53L0X_WrByte>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8009f8e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d107      	bne.n	8009fa6 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8009f96:	2200      	movs	r2, #0
 8009f98:	214f      	movs	r1, #79	; 0x4f
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f002 ff04 	bl	800cda8 <VL53L0X_WrByte>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8009fa6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d107      	bne.n	8009fbe <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8009fae:	222c      	movs	r2, #44	; 0x2c
 8009fb0:	214e      	movs	r1, #78	; 0x4e
 8009fb2:	68f8      	ldr	r0, [r7, #12]
 8009fb4:	f002 fef8 	bl	800cda8 <VL53L0X_WrByte>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8009fbe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d107      	bne.n	8009fd6 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	21ff      	movs	r1, #255	; 0xff
 8009fca:	68f8      	ldr	r0, [r7, #12]
 8009fcc:	f002 feec 	bl	800cda8 <VL53L0X_WrByte>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8009fd6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d109      	bne.n	8009ff2 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8009fde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	21b6      	movs	r1, #182	; 0xb6
 8009fe6:	68f8      	ldr	r0, [r7, #12]
 8009fe8:	f002 fede 	bl	800cda8 <VL53L0X_WrByte>
 8009fec:	4603      	mov	r3, r0
 8009fee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8009ff6:	e009      	b.n	800a00c <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8009ff8:	68fa      	ldr	r2, [r7, #12]
 8009ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffc:	4413      	add	r3, r2
 8009ffe:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800a002:	2200      	movs	r2, #0
 800a004:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800a006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a008:	3301      	adds	r3, #1
 800a00a:	627b      	str	r3, [r7, #36]	; 0x24
 800a00c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a00e:	69fb      	ldr	r3, [r7, #28]
 800a010:	429a      	cmp	r2, r3
 800a012:	d3f1      	bcc.n	8009ff8 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800a014:	79fb      	ldrb	r3, [r7, #7]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d011      	beq.n	800a03e <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800a01a:	e002      	b.n	800a022 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800a01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a01e:	3301      	adds	r3, #1
 800a020:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800a022:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800a026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a028:	4413      	add	r3, r2
 800a02a:	4618      	mov	r0, r3
 800a02c:	f7ff fc2a 	bl	8009884 <is_aperture>
 800a030:	4603      	mov	r3, r0
 800a032:	2b00      	cmp	r3, #0
 800a034:	d103      	bne.n	800a03e <VL53L0X_set_reference_spads+0xe6>
 800a036:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a038:	69bb      	ldr	r3, [r7, #24]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d3ee      	bcc.n	800a01c <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800a04a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a04e:	79f9      	ldrb	r1, [r7, #7]
 800a050:	f107 0214 	add.w	r2, r7, #20
 800a054:	9204      	str	r2, [sp, #16]
 800a056:	68ba      	ldr	r2, [r7, #8]
 800a058:	9203      	str	r2, [sp, #12]
 800a05a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a05c:	9202      	str	r2, [sp, #8]
 800a05e:	9301      	str	r3, [sp, #4]
 800a060:	69fb      	ldr	r3, [r7, #28]
 800a062:	9300      	str	r3, [sp, #0]
 800a064:	4623      	mov	r3, r4
 800a066:	4602      	mov	r2, r0
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f7ff fc83 	bl	8009974 <enable_ref_spads>
 800a06e:	4603      	mov	r3, r0
 800a070:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800a074:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d10c      	bne.n	800a096 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2201      	movs	r2, #1
 800a080:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	b2da      	uxtb	r2, r3
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	79fa      	ldrb	r2, [r7, #7]
 800a092:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800a096:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3734      	adds	r7, #52	; 0x34
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd90      	pop	{r4, r7, pc}

0800a0a2 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b084      	sub	sp, #16
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a0b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d10a      	bne.n	800a0d0 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800a0ba:	78fb      	ldrb	r3, [r7, #3]
 800a0bc:	f043 0301 	orr.w	r3, r3, #1
 800a0c0:	b2db      	uxtb	r3, r3
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	2100      	movs	r1, #0
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f002 fe6e 	bl	800cda8 <VL53L0X_WrByte>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800a0d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d104      	bne.n	800a0e2 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 f9bf 	bl	800a45c <VL53L0X_measurement_poll_for_completion>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a0e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d105      	bne.n	800a0f6 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800a0ea:	2100      	movs	r1, #0
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f7ff fab5 	bl	800965c <VL53L0X_ClearInterruptMask>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a0f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d106      	bne.n	800a10c <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800a0fe:	2200      	movs	r2, #0
 800a100:	2100      	movs	r1, #0
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f002 fe50 	bl	800cda8 <VL53L0X_WrByte>
 800a108:	4603      	mov	r3, r0
 800a10a:	73fb      	strb	r3, [r7, #15]

	return Status;
 800a10c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a110:	4618      	mov	r0, r3
 800a112:	3710      	adds	r7, #16
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	4608      	mov	r0, r1
 800a122:	4611      	mov	r1, r2
 800a124:	461a      	mov	r2, r3
 800a126:	4603      	mov	r3, r0
 800a128:	70fb      	strb	r3, [r7, #3]
 800a12a:	460b      	mov	r3, r1
 800a12c:	70bb      	strb	r3, [r7, #2]
 800a12e:	4613      	mov	r3, r2
 800a130:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a132:	2300      	movs	r3, #0
 800a134:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800a136:	2300      	movs	r3, #0
 800a138:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a13a:	2201      	movs	r2, #1
 800a13c:	21ff      	movs	r1, #255	; 0xff
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f002 fe32 	bl	800cda8 <VL53L0X_WrByte>
 800a144:	4603      	mov	r3, r0
 800a146:	461a      	mov	r2, r3
 800a148:	7bfb      	ldrb	r3, [r7, #15]
 800a14a:	4313      	orrs	r3, r2
 800a14c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a14e:	2200      	movs	r2, #0
 800a150:	2100      	movs	r1, #0
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f002 fe28 	bl	800cda8 <VL53L0X_WrByte>
 800a158:	4603      	mov	r3, r0
 800a15a:	461a      	mov	r2, r3
 800a15c:	7bfb      	ldrb	r3, [r7, #15]
 800a15e:	4313      	orrs	r3, r2
 800a160:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a162:	2200      	movs	r2, #0
 800a164:	21ff      	movs	r1, #255	; 0xff
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f002 fe1e 	bl	800cda8 <VL53L0X_WrByte>
 800a16c:	4603      	mov	r3, r0
 800a16e:	461a      	mov	r2, r3
 800a170:	7bfb      	ldrb	r3, [r7, #15]
 800a172:	4313      	orrs	r3, r2
 800a174:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800a176:	78fb      	ldrb	r3, [r7, #3]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d01e      	beq.n	800a1ba <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800a17c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d009      	beq.n	800a198 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800a184:	69ba      	ldr	r2, [r7, #24]
 800a186:	21cb      	movs	r1, #203	; 0xcb
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f002 fd12 	bl	800cbb2 <VL53L0X_RdByte>
 800a18e:	4603      	mov	r3, r0
 800a190:	461a      	mov	r2, r3
 800a192:	7bfb      	ldrb	r3, [r7, #15]
 800a194:	4313      	orrs	r3, r2
 800a196:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800a198:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d02a      	beq.n	800a1f6 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800a1a0:	f107 030e 	add.w	r3, r7, #14
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	21ee      	movs	r1, #238	; 0xee
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f002 fd02 	bl	800cbb2 <VL53L0X_RdByte>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	7bfb      	ldrb	r3, [r7, #15]
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	73fb      	strb	r3, [r7, #15]
 800a1b8:	e01d      	b.n	800a1f6 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800a1ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d00a      	beq.n	800a1d8 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800a1c2:	78bb      	ldrb	r3, [r7, #2]
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	21cb      	movs	r1, #203	; 0xcb
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f002 fded 	bl	800cda8 <VL53L0X_WrByte>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	7bfb      	ldrb	r3, [r7, #15]
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800a1d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d00a      	beq.n	800a1f6 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800a1e0:	787b      	ldrb	r3, [r7, #1]
 800a1e2:	2280      	movs	r2, #128	; 0x80
 800a1e4:	21ee      	movs	r1, #238	; 0xee
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f002 fe2c 	bl	800ce44 <VL53L0X_UpdateByte>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	7bfb      	ldrb	r3, [r7, #15]
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	21ff      	movs	r1, #255	; 0xff
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f002 fdd4 	bl	800cda8 <VL53L0X_WrByte>
 800a200:	4603      	mov	r3, r0
 800a202:	461a      	mov	r2, r3
 800a204:	7bfb      	ldrb	r3, [r7, #15]
 800a206:	4313      	orrs	r3, r2
 800a208:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a20a:	2201      	movs	r2, #1
 800a20c:	2100      	movs	r1, #0
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f002 fdca 	bl	800cda8 <VL53L0X_WrByte>
 800a214:	4603      	mov	r3, r0
 800a216:	461a      	mov	r2, r3
 800a218:	7bfb      	ldrb	r3, [r7, #15]
 800a21a:	4313      	orrs	r3, r2
 800a21c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a21e:	2200      	movs	r2, #0
 800a220:	21ff      	movs	r1, #255	; 0xff
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f002 fdc0 	bl	800cda8 <VL53L0X_WrByte>
 800a228:	4603      	mov	r3, r0
 800a22a:	461a      	mov	r2, r3
 800a22c:	7bfb      	ldrb	r3, [r7, #15]
 800a22e:	4313      	orrs	r3, r2
 800a230:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800a232:	7bbb      	ldrb	r3, [r7, #14]
 800a234:	f023 0310 	bic.w	r3, r3, #16
 800a238:	b2da      	uxtb	r2, r3
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	701a      	strb	r2, [r3, #0]

	return Status;
 800a23e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a242:	4618      	mov	r0, r3
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}

0800a24a <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800a24a:	b580      	push	{r7, lr}
 800a24c:	b08a      	sub	sp, #40	; 0x28
 800a24e:	af04      	add	r7, sp, #16
 800a250:	60f8      	str	r0, [r7, #12]
 800a252:	60b9      	str	r1, [r7, #8]
 800a254:	4611      	mov	r1, r2
 800a256:	461a      	mov	r2, r3
 800a258:	460b      	mov	r3, r1
 800a25a:	71fb      	strb	r3, [r7, #7]
 800a25c:	4613      	mov	r3, r2
 800a25e:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a260:	2300      	movs	r3, #0
 800a262:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a264:	2300      	movs	r3, #0
 800a266:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800a268:	2300      	movs	r3, #0
 800a26a:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800a26c:	2300      	movs	r3, #0
 800a26e:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800a270:	2300      	movs	r3, #0
 800a272:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800a274:	79bb      	ldrb	r3, [r7, #6]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d003      	beq.n	800a282 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a280:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800a282:	2201      	movs	r2, #1
 800a284:	2101      	movs	r1, #1
 800a286:	68f8      	ldr	r0, [r7, #12]
 800a288:	f002 fd8e 	bl	800cda8 <VL53L0X_WrByte>
 800a28c:	4603      	mov	r3, r0
 800a28e:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800a290:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d105      	bne.n	800a2a4 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800a298:	2140      	movs	r1, #64	; 0x40
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	f7ff ff01 	bl	800a0a2 <VL53L0X_perform_single_ref_calibration>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800a2a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d115      	bne.n	800a2d8 <VL53L0X_perform_vhv_calibration+0x8e>
 800a2ac:	79fb      	ldrb	r3, [r7, #7]
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d112      	bne.n	800a2d8 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800a2b2:	7d39      	ldrb	r1, [r7, #20]
 800a2b4:	7d7a      	ldrb	r2, [r7, #21]
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	9303      	str	r3, [sp, #12]
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	9302      	str	r3, [sp, #8]
 800a2be:	f107 0313 	add.w	r3, r7, #19
 800a2c2:	9301      	str	r3, [sp, #4]
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	9300      	str	r3, [sp, #0]
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	2101      	movs	r1, #1
 800a2cc:	68f8      	ldr	r0, [r7, #12]
 800a2ce:	f7ff ff23 	bl	800a118 <VL53L0X_ref_calibration_io>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	75fb      	strb	r3, [r7, #23]
 800a2d6:	e002      	b.n	800a2de <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800a2de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d112      	bne.n	800a30c <VL53L0X_perform_vhv_calibration+0xc2>
 800a2e6:	79bb      	ldrb	r3, [r7, #6]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d00f      	beq.n	800a30c <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a2ec:	7dbb      	ldrb	r3, [r7, #22]
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	2101      	movs	r1, #1
 800a2f2:	68f8      	ldr	r0, [r7, #12]
 800a2f4:	f002 fd58 	bl	800cda8 <VL53L0X_WrByte>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800a2fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d103      	bne.n	800a30c <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	7dba      	ldrb	r2, [r7, #22]
 800a308:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800a30c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a310:	4618      	mov	r0, r3
 800a312:	3718      	adds	r7, #24
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b08a      	sub	sp, #40	; 0x28
 800a31c:	af04      	add	r7, sp, #16
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	4611      	mov	r1, r2
 800a324:	461a      	mov	r2, r3
 800a326:	460b      	mov	r3, r1
 800a328:	71fb      	strb	r3, [r7, #7]
 800a32a:	4613      	mov	r3, r2
 800a32c:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a32e:	2300      	movs	r3, #0
 800a330:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a332:	2300      	movs	r3, #0
 800a334:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800a336:	2300      	movs	r3, #0
 800a338:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800a33a:	2300      	movs	r3, #0
 800a33c:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800a33e:	79bb      	ldrb	r3, [r7, #6]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d003      	beq.n	800a34c <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a34a:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800a34c:	2202      	movs	r2, #2
 800a34e:	2101      	movs	r1, #1
 800a350:	68f8      	ldr	r0, [r7, #12]
 800a352:	f002 fd29 	bl	800cda8 <VL53L0X_WrByte>
 800a356:	4603      	mov	r3, r0
 800a358:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800a35a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d105      	bne.n	800a36e <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800a362:	2100      	movs	r1, #0
 800a364:	68f8      	ldr	r0, [r7, #12]
 800a366:	f7ff fe9c 	bl	800a0a2 <VL53L0X_perform_single_ref_calibration>
 800a36a:	4603      	mov	r3, r0
 800a36c:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800a36e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d115      	bne.n	800a3a2 <VL53L0X_perform_phase_calibration+0x8a>
 800a376:	79fb      	ldrb	r3, [r7, #7]
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d112      	bne.n	800a3a2 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800a37c:	7d39      	ldrb	r1, [r7, #20]
 800a37e:	7d7a      	ldrb	r2, [r7, #21]
 800a380:	2301      	movs	r3, #1
 800a382:	9303      	str	r3, [sp, #12]
 800a384:	2300      	movs	r3, #0
 800a386:	9302      	str	r3, [sp, #8]
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	9301      	str	r3, [sp, #4]
 800a38c:	f107 0313 	add.w	r3, r7, #19
 800a390:	9300      	str	r3, [sp, #0]
 800a392:	460b      	mov	r3, r1
 800a394:	2101      	movs	r1, #1
 800a396:	68f8      	ldr	r0, [r7, #12]
 800a398:	f7ff febe 	bl	800a118 <VL53L0X_ref_calibration_io>
 800a39c:	4603      	mov	r3, r0
 800a39e:	75fb      	strb	r3, [r7, #23]
 800a3a0:	e002      	b.n	800a3a8 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800a3a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d112      	bne.n	800a3d6 <VL53L0X_perform_phase_calibration+0xbe>
 800a3b0:	79bb      	ldrb	r3, [r7, #6]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d00f      	beq.n	800a3d6 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a3b6:	7dbb      	ldrb	r3, [r7, #22]
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	2101      	movs	r1, #1
 800a3bc:	68f8      	ldr	r0, [r7, #12]
 800a3be:	f002 fcf3 	bl	800cda8 <VL53L0X_WrByte>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800a3c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d103      	bne.n	800a3d6 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	7dba      	ldrb	r2, [r7, #22]
 800a3d2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800a3d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3718      	adds	r7, #24
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b086      	sub	sp, #24
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	60f8      	str	r0, [r7, #12]
 800a3ea:	60b9      	str	r1, [r7, #8]
 800a3ec:	607a      	str	r2, [r7, #4]
 800a3ee:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a3fe:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800a400:	78fa      	ldrb	r2, [r7, #3]
 800a402:	2300      	movs	r3, #0
 800a404:	68b9      	ldr	r1, [r7, #8]
 800a406:	68f8      	ldr	r0, [r7, #12]
 800a408:	f7ff ff1f 	bl	800a24a <VL53L0X_perform_vhv_calibration>
 800a40c:	4603      	mov	r3, r0
 800a40e:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800a410:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d107      	bne.n	800a428 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800a418:	78fa      	ldrb	r2, [r7, #3]
 800a41a:	2300      	movs	r3, #0
 800a41c:	6879      	ldr	r1, [r7, #4]
 800a41e:	68f8      	ldr	r0, [r7, #12]
 800a420:	f7ff ff7a 	bl	800a318 <VL53L0X_perform_phase_calibration>
 800a424:	4603      	mov	r3, r0
 800a426:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800a428:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d10f      	bne.n	800a450 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a430:	7dbb      	ldrb	r3, [r7, #22]
 800a432:	461a      	mov	r2, r3
 800a434:	2101      	movs	r1, #1
 800a436:	68f8      	ldr	r0, [r7, #12]
 800a438:	f002 fcb6 	bl	800cda8 <VL53L0X_WrByte>
 800a43c:	4603      	mov	r3, r0
 800a43e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800a440:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d103      	bne.n	800a450 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	7dba      	ldrb	r2, [r7, #22]
 800a44c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800a450:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a454:	4618      	mov	r0, r3
 800a456:	3718      	adds	r7, #24
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b086      	sub	sp, #24
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a464:	2300      	movs	r3, #0
 800a466:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800a468:	2300      	movs	r3, #0
 800a46a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800a46c:	2300      	movs	r3, #0
 800a46e:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800a470:	f107 030f 	add.w	r3, r7, #15
 800a474:	4619      	mov	r1, r3
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f7fe fe02 	bl	8009080 <VL53L0X_GetMeasurementDataReady>
 800a47c:	4603      	mov	r3, r0
 800a47e:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800a480:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d10f      	bne.n	800a4a8 <VL53L0X_measurement_poll_for_completion+0x4c>
			break; /* the error is set */

		if (NewDataReady == 1)
 800a488:	7bfb      	ldrb	r3, [r7, #15]
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d00e      	beq.n	800a4ac <VL53L0X_measurement_poll_for_completion+0x50>
			break; /* done note that status == 0 */

		LoopNb++;
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	3301      	adds	r3, #1
 800a492:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	2bc7      	cmp	r3, #199	; 0xc7
 800a498:	d902      	bls.n	800a4a0 <VL53L0X_measurement_poll_for_completion+0x44>
			Status = VL53L0X_ERROR_TIME_OUT;
 800a49a:	23f9      	movs	r3, #249	; 0xf9
 800a49c:	75fb      	strb	r3, [r7, #23]
			break;
 800a49e:	e006      	b.n	800a4ae <VL53L0X_measurement_poll_for_completion+0x52>
		}

		VL53L0X_PollingDelay(Dev);
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f002 fd03 	bl	800ceac <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800a4a6:	e7e3      	b.n	800a470 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800a4a8:	bf00      	nop
 800a4aa:	e000      	b.n	800a4ae <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */
 800a4ac:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800a4ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3718      	adds	r7, #24
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}

0800a4ba <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800a4ba:	b480      	push	{r7}
 800a4bc:	b085      	sub	sp, #20
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800a4c8:	79fb      	ldrb	r3, [r7, #7]
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	b2db      	uxtb	r3, r3
 800a4ce:	005b      	lsls	r3, r3, #1
 800a4d0:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800a4d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3714      	adds	r7, #20
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr

0800a4e0 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800a4ee:	79fb      	ldrb	r3, [r7, #7]
 800a4f0:	085b      	lsrs	r3, r3, #1
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	3b01      	subs	r3, #1
 800a4f6:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800a4f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3714      	adds	r7, #20
 800a4fe:	46bd      	mov	sp, r7
 800a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a504:	4770      	bx	lr

0800a506 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800a506:	b480      	push	{r7}
 800a508:	b085      	sub	sp, #20
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800a50e:	2300      	movs	r3, #0
 800a510:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800a512:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a516:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800a518:	e002      	b.n	800a520 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	089b      	lsrs	r3, r3, #2
 800a51e:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800a520:	68ba      	ldr	r2, [r7, #8]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	429a      	cmp	r2, r3
 800a526:	d8f8      	bhi.n	800a51a <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800a528:	e017      	b.n	800a55a <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	4413      	add	r3, r2
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	429a      	cmp	r2, r3
 800a534:	d30b      	bcc.n	800a54e <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800a536:	68fa      	ldr	r2, [r7, #12]
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	4413      	add	r3, r2
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	1ad3      	subs	r3, r2, r3
 800a540:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	085b      	lsrs	r3, r3, #1
 800a546:	68ba      	ldr	r2, [r7, #8]
 800a548:	4413      	add	r3, r2
 800a54a:	60fb      	str	r3, [r7, #12]
 800a54c:	e002      	b.n	800a554 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	085b      	lsrs	r3, r3, #1
 800a552:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	089b      	lsrs	r3, r3, #2
 800a558:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d1e4      	bne.n	800a52a <VL53L0X_isqrt+0x24>
	}

	return res;
 800a560:	68fb      	ldr	r3, [r7, #12]
}
 800a562:	4618      	mov	r0, r3
 800a564:	3714      	adds	r7, #20
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr

0800a56e <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800a56e:	b580      	push	{r7, lr}
 800a570:	b086      	sub	sp, #24
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a576:	2300      	movs	r3, #0
 800a578:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800a57a:	2200      	movs	r2, #0
 800a57c:	2183      	movs	r1, #131	; 0x83
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f002 fc12 	bl	800cda8 <VL53L0X_WrByte>
 800a584:	4603      	mov	r3, r0
 800a586:	461a      	mov	r2, r3
 800a588:	7dfb      	ldrb	r3, [r7, #23]
 800a58a:	4313      	orrs	r3, r2
 800a58c:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800a58e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d11c      	bne.n	800a5d0 <VL53L0X_device_read_strobe+0x62>
		LoopNb = 0;
 800a596:	2300      	movs	r3, #0
 800a598:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800a59a:	f107 030f 	add.w	r3, r7, #15
 800a59e:	461a      	mov	r2, r3
 800a5a0:	2183      	movs	r1, #131	; 0x83
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f002 fb05 	bl	800cbb2 <VL53L0X_RdByte>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800a5ac:	7bfb      	ldrb	r3, [r7, #15]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d109      	bne.n	800a5c6 <VL53L0X_device_read_strobe+0x58>
 800a5b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d105      	bne.n	800a5c6 <VL53L0X_device_read_strobe+0x58>
					break;

			LoopNb = LoopNb + 1;
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	3301      	adds	r3, #1
 800a5be:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	2bc7      	cmp	r3, #199	; 0xc7
 800a5c4:	d9e9      	bls.n	800a59a <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	2bc7      	cmp	r3, #199	; 0xc7
 800a5ca:	d901      	bls.n	800a5d0 <VL53L0X_device_read_strobe+0x62>
			Status = VL53L0X_ERROR_TIME_OUT;
 800a5cc:	23f9      	movs	r3, #249	; 0xf9
 800a5ce:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	2183      	movs	r1, #131	; 0x83
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f002 fbe7 	bl	800cda8 <VL53L0X_WrByte>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	461a      	mov	r2, r3
 800a5de:	7dfb      	ldrb	r3, [r7, #23]
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800a5e4:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3718      	adds	r7, #24
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b098      	sub	sp, #96	; 0x60
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	460b      	mov	r3, r1
 800a5fa:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800a602:	2300      	movs	r3, #0
 800a604:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800a608:	2300      	movs	r3, #0
 800a60a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800a60e:	2300      	movs	r3, #0
 800a610:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800a612:	2300      	movs	r3, #0
 800a614:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800a616:	2300      	movs	r3, #0
 800a618:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800a61a:	2300      	movs	r3, #0
 800a61c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800a620:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800a624:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800a626:	2300      	movs	r3, #0
 800a628:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800a62a:	2300      	movs	r3, #0
 800a62c:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800a62e:	2300      	movs	r3, #0
 800a630:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800a638:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800a63c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a640:	2b07      	cmp	r3, #7
 800a642:	f000 8408 	beq.w	800ae56 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a646:	2201      	movs	r2, #1
 800a648:	2180      	movs	r1, #128	; 0x80
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f002 fbac 	bl	800cda8 <VL53L0X_WrByte>
 800a650:	4603      	mov	r3, r0
 800a652:	461a      	mov	r2, r3
 800a654:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a658:	4313      	orrs	r3, r2
 800a65a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a65e:	2201      	movs	r2, #1
 800a660:	21ff      	movs	r1, #255	; 0xff
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f002 fba0 	bl	800cda8 <VL53L0X_WrByte>
 800a668:	4603      	mov	r3, r0
 800a66a:	461a      	mov	r2, r3
 800a66c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a670:	4313      	orrs	r3, r2
 800a672:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a676:	2200      	movs	r2, #0
 800a678:	2100      	movs	r1, #0
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f002 fb94 	bl	800cda8 <VL53L0X_WrByte>
 800a680:	4603      	mov	r3, r0
 800a682:	461a      	mov	r2, r3
 800a684:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a688:	4313      	orrs	r3, r2
 800a68a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800a68e:	2206      	movs	r2, #6
 800a690:	21ff      	movs	r1, #255	; 0xff
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f002 fb88 	bl	800cda8 <VL53L0X_WrByte>
 800a698:	4603      	mov	r3, r0
 800a69a:	461a      	mov	r2, r3
 800a69c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6a0:	4313      	orrs	r3, r2
 800a6a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800a6a6:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	2183      	movs	r1, #131	; 0x83
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f002 fa7f 	bl	800cbb2 <VL53L0X_RdByte>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800a6c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a6c6:	f043 0304 	orr.w	r3, r3, #4
 800a6ca:	b2db      	uxtb	r3, r3
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	2183      	movs	r1, #131	; 0x83
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f002 fb69 	bl	800cda8 <VL53L0X_WrByte>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	461a      	mov	r2, r3
 800a6da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800a6e4:	2207      	movs	r2, #7
 800a6e6:	21ff      	movs	r1, #255	; 0xff
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f002 fb5d 	bl	800cda8 <VL53L0X_WrByte>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	2181      	movs	r1, #129	; 0x81
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f002 fb51 	bl	800cda8 <VL53L0X_WrByte>
 800a706:	4603      	mov	r3, r0
 800a708:	461a      	mov	r2, r3
 800a70a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a70e:	4313      	orrs	r3, r2
 800a710:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f002 fbc9 	bl	800ceac <VL53L0X_PollingDelay>
 800a71a:	4603      	mov	r3, r0
 800a71c:	461a      	mov	r2, r3
 800a71e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a722:	4313      	orrs	r3, r2
 800a724:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a728:	2201      	movs	r2, #1
 800a72a:	2180      	movs	r1, #128	; 0x80
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f002 fb3b 	bl	800cda8 <VL53L0X_WrByte>
 800a732:	4603      	mov	r3, r0
 800a734:	461a      	mov	r2, r3
 800a736:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a73a:	4313      	orrs	r3, r2
 800a73c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800a740:	78fb      	ldrb	r3, [r7, #3]
 800a742:	f003 0301 	and.w	r3, r3, #1
 800a746:	2b00      	cmp	r3, #0
 800a748:	f000 8098 	beq.w	800a87c <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800a74c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a750:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800a754:	2b00      	cmp	r3, #0
 800a756:	f040 8091 	bne.w	800a87c <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800a75a:	226b      	movs	r2, #107	; 0x6b
 800a75c:	2194      	movs	r1, #148	; 0x94
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f002 fb22 	bl	800cda8 <VL53L0X_WrByte>
 800a764:	4603      	mov	r3, r0
 800a766:	461a      	mov	r2, r3
 800a768:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a76c:	4313      	orrs	r3, r2
 800a76e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f7ff fefb 	bl	800a56e <VL53L0X_device_read_strobe>
 800a778:	4603      	mov	r3, r0
 800a77a:	461a      	mov	r2, r3
 800a77c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a780:	4313      	orrs	r3, r2
 800a782:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a786:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a78a:	461a      	mov	r2, r3
 800a78c:	2190      	movs	r1, #144	; 0x90
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f002 face 	bl	800cd30 <VL53L0X_RdDWord>
 800a794:	4603      	mov	r3, r0
 800a796:	461a      	mov	r2, r3
 800a798:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a79c:	4313      	orrs	r3, r2
 800a79e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800a7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a4:	0a1b      	lsrs	r3, r3, #8
 800a7a6:	b2db      	uxtb	r3, r3
 800a7a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7ac:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800a7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b2:	0bdb      	lsrs	r3, r3, #15
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	f003 0301 	and.w	r3, r3, #1
 800a7ba:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800a7be:	2224      	movs	r2, #36	; 0x24
 800a7c0:	2194      	movs	r1, #148	; 0x94
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f002 faf0 	bl	800cda8 <VL53L0X_WrByte>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f7ff fec9 	bl	800a56e <VL53L0X_device_read_strobe>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	461a      	mov	r2, r3
 800a7e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a7ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	2190      	movs	r1, #144	; 0x90
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f002 fa9c 	bl	800cd30 <VL53L0X_RdDWord>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a800:	4313      	orrs	r3, r2
 800a802:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800a806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a808:	0e1b      	lsrs	r3, r3, #24
 800a80a:	b2db      	uxtb	r3, r3
 800a80c:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800a80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a810:	0c1b      	lsrs	r3, r3, #16
 800a812:	b2db      	uxtb	r3, r3
 800a814:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800a816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a818:	0a1b      	lsrs	r3, r3, #8
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800a81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a820:	b2db      	uxtb	r3, r3
 800a822:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800a824:	2225      	movs	r2, #37	; 0x25
 800a826:	2194      	movs	r1, #148	; 0x94
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f002 fabd 	bl	800cda8 <VL53L0X_WrByte>
 800a82e:	4603      	mov	r3, r0
 800a830:	461a      	mov	r2, r3
 800a832:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a836:	4313      	orrs	r3, r2
 800a838:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f7ff fe96 	bl	800a56e <VL53L0X_device_read_strobe>
 800a842:	4603      	mov	r3, r0
 800a844:	461a      	mov	r2, r3
 800a846:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a84a:	4313      	orrs	r3, r2
 800a84c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a850:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a854:	461a      	mov	r2, r3
 800a856:	2190      	movs	r1, #144	; 0x90
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f002 fa69 	bl	800cd30 <VL53L0X_RdDWord>
 800a85e:	4603      	mov	r3, r0
 800a860:	461a      	mov	r2, r3
 800a862:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a866:	4313      	orrs	r3, r2
 800a868:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800a86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86e:	0e1b      	lsrs	r3, r3, #24
 800a870:	b2db      	uxtb	r3, r3
 800a872:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800a874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a876:	0c1b      	lsrs	r3, r3, #16
 800a878:	b2db      	uxtb	r3, r3
 800a87a:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800a87c:	78fb      	ldrb	r3, [r7, #3]
 800a87e:	f003 0302 	and.w	r3, r3, #2
 800a882:	2b00      	cmp	r3, #0
 800a884:	f000 8189 	beq.w	800ab9a <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800a888:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a88c:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800a890:	2b00      	cmp	r3, #0
 800a892:	f040 8182 	bne.w	800ab9a <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800a896:	2202      	movs	r2, #2
 800a898:	2194      	movs	r1, #148	; 0x94
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f002 fa84 	bl	800cda8 <VL53L0X_WrByte>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8a8:	4313      	orrs	r3, r2
 800a8aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f7ff fe5d 	bl	800a56e <VL53L0X_device_read_strobe>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8bc:	4313      	orrs	r3, r2
 800a8be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800a8c2:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	2190      	movs	r1, #144	; 0x90
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f002 f971 	bl	800cbb2 <VL53L0X_RdByte>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800a8de:	227b      	movs	r2, #123	; 0x7b
 800a8e0:	2194      	movs	r1, #148	; 0x94
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f002 fa60 	bl	800cda8 <VL53L0X_WrByte>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f7ff fe39 	bl	800a56e <VL53L0X_device_read_strobe>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	461a      	mov	r2, r3
 800a900:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a904:	4313      	orrs	r3, r2
 800a906:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800a90a:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800a90e:	461a      	mov	r2, r3
 800a910:	2190      	movs	r1, #144	; 0x90
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f002 f94d 	bl	800cbb2 <VL53L0X_RdByte>
 800a918:	4603      	mov	r3, r0
 800a91a:	461a      	mov	r2, r3
 800a91c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a920:	4313      	orrs	r3, r2
 800a922:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800a926:	2277      	movs	r2, #119	; 0x77
 800a928:	2194      	movs	r1, #148	; 0x94
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f002 fa3c 	bl	800cda8 <VL53L0X_WrByte>
 800a930:	4603      	mov	r3, r0
 800a932:	461a      	mov	r2, r3
 800a934:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a938:	4313      	orrs	r3, r2
 800a93a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f7ff fe15 	bl	800a56e <VL53L0X_device_read_strobe>
 800a944:	4603      	mov	r3, r0
 800a946:	461a      	mov	r2, r3
 800a948:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a94c:	4313      	orrs	r3, r2
 800a94e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a952:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a956:	461a      	mov	r2, r3
 800a958:	2190      	movs	r1, #144	; 0x90
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f002 f9e8 	bl	800cd30 <VL53L0X_RdDWord>
 800a960:	4603      	mov	r3, r0
 800a962:	461a      	mov	r2, r3
 800a964:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a968:	4313      	orrs	r3, r2
 800a96a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800a96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a970:	0e5b      	lsrs	r3, r3, #25
 800a972:	b2db      	uxtb	r3, r3
 800a974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800a97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a97e:	0c9b      	lsrs	r3, r3, #18
 800a980:	b2db      	uxtb	r3, r3
 800a982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a986:	b2db      	uxtb	r3, r3
 800a988:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800a98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a98c:	0adb      	lsrs	r3, r3, #11
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a994:	b2db      	uxtb	r3, r3
 800a996:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800a998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99a:	091b      	lsrs	r3, r3, #4
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800a9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a8:	b2db      	uxtb	r3, r3
 800a9aa:	00db      	lsls	r3, r3, #3
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800a9b8:	2278      	movs	r2, #120	; 0x78
 800a9ba:	2194      	movs	r1, #148	; 0x94
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f002 f9f3 	bl	800cda8 <VL53L0X_WrByte>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f7ff fdcc 	bl	800a56e <VL53L0X_device_read_strobe>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	461a      	mov	r2, r3
 800a9da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a9e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	2190      	movs	r1, #144	; 0x90
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f002 f99f 	bl	800cd30 <VL53L0X_RdDWord>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800aa00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa02:	0f5b      	lsrs	r3, r3, #29
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa0a:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800aa0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aa10:	4413      	add	r3, r2
 800aa12:	b2db      	uxtb	r3, r3
 800aa14:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800aa16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa18:	0d9b      	lsrs	r3, r3, #22
 800aa1a:	b2db      	uxtb	r3, r3
 800aa1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800aa24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa26:	0bdb      	lsrs	r3, r3, #15
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800aa32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa34:	0a1b      	lsrs	r3, r3, #8
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa3c:	b2db      	uxtb	r3, r3
 800aa3e:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800aa40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa42:	085b      	lsrs	r3, r3, #1
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800aa4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	019b      	lsls	r3, r3, #6
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa5a:	b2db      	uxtb	r3, r3
 800aa5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800aa60:	2279      	movs	r2, #121	; 0x79
 800aa62:	2194      	movs	r1, #148	; 0x94
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f002 f99f 	bl	800cda8 <VL53L0X_WrByte>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa72:	4313      	orrs	r3, r2
 800aa74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f7ff fd78 	bl	800a56e <VL53L0X_device_read_strobe>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	461a      	mov	r2, r3
 800aa82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa86:	4313      	orrs	r3, r2
 800aa88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800aa8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aa90:	461a      	mov	r2, r3
 800aa92:	2190      	movs	r1, #144	; 0x90
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f002 f94b 	bl	800cd30 <VL53L0X_RdDWord>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800aaa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaaa:	0e9b      	lsrs	r3, r3, #26
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aab2:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800aab4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aab8:	4413      	add	r3, r2
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800aabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac0:	0cdb      	lsrs	r3, r3, #19
 800aac2:	b2db      	uxtb	r3, r3
 800aac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800aacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aace:	0b1b      	lsrs	r3, r3, #12
 800aad0:	b2db      	uxtb	r3, r3
 800aad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800aada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aadc:	095b      	lsrs	r3, r3, #5
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800aae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	009b      	lsls	r3, r3, #2
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800aaf4:	b2db      	uxtb	r3, r3
 800aaf6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800aafa:	227a      	movs	r2, #122	; 0x7a
 800aafc:	2194      	movs	r1, #148	; 0x94
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f002 f952 	bl	800cda8 <VL53L0X_WrByte>
 800ab04:	4603      	mov	r3, r0
 800ab06:	461a      	mov	r2, r3
 800ab08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab0c:	4313      	orrs	r3, r2
 800ab0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f7ff fd2b 	bl	800a56e <VL53L0X_device_read_strobe>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab20:	4313      	orrs	r3, r2
 800ab22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ab26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	2190      	movs	r1, #144	; 0x90
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f002 f8fe 	bl	800cd30 <VL53L0X_RdDWord>
 800ab34:	4603      	mov	r3, r0
 800ab36:	461a      	mov	r2, r3
 800ab38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800ab42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab44:	0f9b      	lsrs	r3, r3, #30
 800ab46:	b2db      	uxtb	r3, r3
 800ab48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab4c:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800ab4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ab52:	4413      	add	r3, r2
 800ab54:	b2db      	uxtb	r3, r3
 800ab56:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800ab58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5a:	0ddb      	lsrs	r3, r3, #23
 800ab5c:	b2db      	uxtb	r3, r3
 800ab5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab62:	b2db      	uxtb	r3, r3
 800ab64:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800ab66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab68:	0c1b      	lsrs	r3, r3, #16
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800ab74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab76:	0a5b      	lsrs	r3, r3, #9
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800ab84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab86:	089b      	lsrs	r3, r3, #2
 800ab88:	b2db      	uxtb	r3, r3
 800ab8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800ab94:	2300      	movs	r3, #0
 800ab96:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800ab9a:	78fb      	ldrb	r3, [r7, #3]
 800ab9c:	f003 0304 	and.w	r3, r3, #4
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	f000 80f1 	beq.w	800ad88 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800aba6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800abaa:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800abae:	2b00      	cmp	r3, #0
 800abb0:	f040 80ea 	bne.w	800ad88 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800abb4:	227b      	movs	r2, #123	; 0x7b
 800abb6:	2194      	movs	r1, #148	; 0x94
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f002 f8f5 	bl	800cda8 <VL53L0X_WrByte>
 800abbe:	4603      	mov	r3, r0
 800abc0:	461a      	mov	r2, r3
 800abc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abc6:	4313      	orrs	r3, r2
 800abc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f7ff fcce 	bl	800a56e <VL53L0X_device_read_strobe>
 800abd2:	4603      	mov	r3, r0
 800abd4:	461a      	mov	r2, r3
 800abd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abda:	4313      	orrs	r3, r2
 800abdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800abe0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800abe4:	461a      	mov	r2, r3
 800abe6:	2190      	movs	r1, #144	; 0x90
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f002 f8a1 	bl	800cd30 <VL53L0X_RdDWord>
 800abee:	4603      	mov	r3, r0
 800abf0:	461a      	mov	r2, r3
 800abf2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abf6:	4313      	orrs	r3, r2
 800abf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800abfc:	227c      	movs	r2, #124	; 0x7c
 800abfe:	2194      	movs	r1, #148	; 0x94
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f002 f8d1 	bl	800cda8 <VL53L0X_WrByte>
 800ac06:	4603      	mov	r3, r0
 800ac08:	461a      	mov	r2, r3
 800ac0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f7ff fcaa 	bl	800a56e <VL53L0X_device_read_strobe>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac22:	4313      	orrs	r3, r2
 800ac24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800ac28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac2c:	461a      	mov	r2, r3
 800ac2e:	2190      	movs	r1, #144	; 0x90
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f002 f87d 	bl	800cd30 <VL53L0X_RdDWord>
 800ac36:	4603      	mov	r3, r0
 800ac38:	461a      	mov	r2, r3
 800ac3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800ac44:	2273      	movs	r2, #115	; 0x73
 800ac46:	2194      	movs	r1, #148	; 0x94
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f002 f8ad 	bl	800cda8 <VL53L0X_WrByte>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	461a      	mov	r2, r3
 800ac52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac56:	4313      	orrs	r3, r2
 800ac58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f7ff fc86 	bl	800a56e <VL53L0X_device_read_strobe>
 800ac62:	4603      	mov	r3, r0
 800ac64:	461a      	mov	r2, r3
 800ac66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ac70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ac74:	461a      	mov	r2, r3
 800ac76:	2190      	movs	r1, #144	; 0x90
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f002 f859 	bl	800cd30 <VL53L0X_RdDWord>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	461a      	mov	r2, r3
 800ac82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac86:	4313      	orrs	r3, r2
 800ac88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x000000ff) << 8;
 800ac8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac8e:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800ac90:	b29b      	uxth	r3, r3
 800ac92:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800ac94:	2274      	movs	r2, #116	; 0x74
 800ac96:	2194      	movs	r1, #148	; 0x94
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f002 f885 	bl	800cda8 <VL53L0X_WrByte>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	461a      	mov	r2, r3
 800aca2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aca6:	4313      	orrs	r3, r2
 800aca8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f7ff fc5e 	bl	800a56e <VL53L0X_device_read_strobe>
 800acb2:	4603      	mov	r3, r0
 800acb4:	461a      	mov	r2, r3
 800acb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800acba:	4313      	orrs	r3, r2
 800acbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800acc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800acc4:	461a      	mov	r2, r3
 800acc6:	2190      	movs	r1, #144	; 0x90
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f002 f831 	bl	800cd30 <VL53L0X_RdDWord>
 800acce:	4603      	mov	r3, r0
 800acd0:	461a      	mov	r2, r3
 800acd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800acd6:	4313      	orrs	r3, r2
 800acd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800acdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acde:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800ace0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ace2:	4313      	orrs	r3, r2
 800ace4:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800ace6:	2275      	movs	r2, #117	; 0x75
 800ace8:	2194      	movs	r1, #148	; 0x94
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f002 f85c 	bl	800cda8 <VL53L0X_WrByte>
 800acf0:	4603      	mov	r3, r0
 800acf2:	461a      	mov	r2, r3
 800acf4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800acf8:	4313      	orrs	r3, r2
 800acfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f7ff fc35 	bl	800a56e <VL53L0X_device_read_strobe>
 800ad04:	4603      	mov	r3, r0
 800ad06:	461a      	mov	r2, r3
 800ad08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ad12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ad16:	461a      	mov	r2, r3
 800ad18:	2190      	movs	r1, #144	; 0x90
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f002 f808 	bl	800cd30 <VL53L0X_RdDWord>
 800ad20:	4603      	mov	r3, r0
 800ad22:	461a      	mov	r2, r3
 800ad24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
							<< 8;
 800ad2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad30:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800ad36:	2276      	movs	r2, #118	; 0x76
 800ad38:	2194      	movs	r1, #148	; 0x94
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f002 f834 	bl	800cda8 <VL53L0X_WrByte>
 800ad40:	4603      	mov	r3, r0
 800ad42:	461a      	mov	r2, r3
 800ad44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f7ff fc0d 	bl	800a56e <VL53L0X_device_read_strobe>
 800ad54:	4603      	mov	r3, r0
 800ad56:	461a      	mov	r2, r3
 800ad58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ad62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ad66:	461a      	mov	r2, r3
 800ad68:	2190      	movs	r1, #144	; 0x90
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f001 ffe0 	bl	800cd30 <VL53L0X_RdDWord>
 800ad70:	4603      	mov	r3, r0
 800ad72:	461a      	mov	r2, r3
 800ad74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800ad7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad80:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800ad82:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ad84:	4313      	orrs	r3, r2
 800ad86:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800ad88:	2200      	movs	r2, #0
 800ad8a:	2181      	movs	r1, #129	; 0x81
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f002 f80b 	bl	800cda8 <VL53L0X_WrByte>
 800ad92:	4603      	mov	r3, r0
 800ad94:	461a      	mov	r2, r3
 800ad96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800ada0:	2206      	movs	r2, #6
 800ada2:	21ff      	movs	r1, #255	; 0xff
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f001 ffff 	bl	800cda8 <VL53L0X_WrByte>
 800adaa:	4603      	mov	r3, r0
 800adac:	461a      	mov	r2, r3
 800adae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800adb2:	4313      	orrs	r3, r2
 800adb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800adb8:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800adbc:	461a      	mov	r2, r3
 800adbe:	2183      	movs	r1, #131	; 0x83
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f001 fef6 	bl	800cbb2 <VL53L0X_RdByte>
 800adc6:	4603      	mov	r3, r0
 800adc8:	461a      	mov	r2, r3
 800adca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800adce:	4313      	orrs	r3, r2
 800add0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800add4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800add8:	f023 0304 	bic.w	r3, r3, #4
 800addc:	b2db      	uxtb	r3, r3
 800adde:	461a      	mov	r2, r3
 800ade0:	2183      	movs	r1, #131	; 0x83
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f001 ffe0 	bl	800cda8 <VL53L0X_WrByte>
 800ade8:	4603      	mov	r3, r0
 800adea:	461a      	mov	r2, r3
 800adec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800adf0:	4313      	orrs	r3, r2
 800adf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800adf6:	2201      	movs	r2, #1
 800adf8:	21ff      	movs	r1, #255	; 0xff
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f001 ffd4 	bl	800cda8 <VL53L0X_WrByte>
 800ae00:	4603      	mov	r3, r0
 800ae02:	461a      	mov	r2, r3
 800ae04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800ae0e:	2201      	movs	r2, #1
 800ae10:	2100      	movs	r1, #0
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f001 ffc8 	bl	800cda8 <VL53L0X_WrByte>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae20:	4313      	orrs	r3, r2
 800ae22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ae26:	2200      	movs	r2, #0
 800ae28:	21ff      	movs	r1, #255	; 0xff
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f001 ffbc 	bl	800cda8 <VL53L0X_WrByte>
 800ae30:	4603      	mov	r3, r0
 800ae32:	461a      	mov	r2, r3
 800ae34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800ae3e:	2200      	movs	r2, #0
 800ae40:	2180      	movs	r1, #128	; 0x80
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f001 ffb0 	bl	800cda8 <VL53L0X_WrByte>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae50:	4313      	orrs	r3, r2
 800ae52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800ae56:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	f040 808f 	bne.w	800af7e <VL53L0X_get_info_from_device+0x98e>
 800ae60:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ae64:	2b07      	cmp	r3, #7
 800ae66:	f000 808a 	beq.w	800af7e <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800ae6a:	78fb      	ldrb	r3, [r7, #3]
 800ae6c:	f003 0301 	and.w	r3, r3, #1
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d024      	beq.n	800aebe <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800ae74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ae78:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d11e      	bne.n	800aebe <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800ae86:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800ae90:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800ae94:	2300      	movs	r3, #0
 800ae96:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae98:	e00e      	b.n	800aeb8 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800ae9a:	f107 0208 	add.w	r2, r7, #8
 800ae9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aea0:	4413      	add	r3, r2
 800aea2:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aea8:	4413      	add	r3, r2
 800aeaa:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800aeae:	460a      	mov	r2, r1
 800aeb0:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800aeb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aeb4:	3301      	adds	r3, #1
 800aeb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aeb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aeba:	2b05      	cmp	r3, #5
 800aebc:	dded      	ble.n	800ae9a <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800aebe:	78fb      	ldrb	r3, [r7, #3]
 800aec0:	f003 0302 	and.w	r3, r3, #2
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d018      	beq.n	800aefa <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800aec8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aecc:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d112      	bne.n	800aefa <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800aed4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800aede:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	33f3      	adds	r3, #243	; 0xf3
 800aeec:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800aeee:	f107 0310 	add.w	r3, r7, #16
 800aef2:	4619      	mov	r1, r3
 800aef4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aef6:	f008 fd2d 	bl	8013954 <strcpy>

		}

		if (((option & 4) == 4) &&
 800aefa:	78fb      	ldrb	r3, [r7, #3]
 800aefc:	f003 0304 	and.w	r3, r3, #4
 800af00:	2b00      	cmp	r3, #0
 800af02:	d030      	beq.n	800af66 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800af04:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800af08:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d12a      	bne.n	800af66 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800af10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800af18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800af20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af22:	025b      	lsls	r3, r3, #9
 800af24:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af2a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800af2e:	2300      	movs	r3, #0
 800af30:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800af34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af36:	2b00      	cmp	r3, #0
 800af38:	d011      	beq.n	800af5e <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800af3a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800af3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af3e:	1ad3      	subs	r3, r2, r3
 800af40:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800af42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800af48:	fb02 f303 	mul.w	r3, r2, r3
 800af4c:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800af4e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800af52:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800af56:	425b      	negs	r3, r3
 800af58:	b29b      	uxth	r3, r3
 800af5a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800af5e:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800af66:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800af6a:	78fb      	ldrb	r3, [r7, #3]
 800af6c:	4313      	orrs	r3, r2
 800af6e:	b2db      	uxtb	r3, r3
 800af70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800af74:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800af7e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800af82:	4618      	mov	r0, r3
 800af84:	3760      	adds	r7, #96	; 0x60
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}

0800af8a <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800af8a:	b480      	push	{r7}
 800af8c:	b087      	sub	sp, #28
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
 800af92:	460b      	mov	r3, r1
 800af94:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800af96:	f240 6277 	movw	r2, #1655	; 0x677
 800af9a:	f04f 0300 	mov.w	r3, #0
 800af9e:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800afa2:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800afa6:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800afa8:	78fb      	ldrb	r3, [r7, #3]
 800afaa:	68fa      	ldr	r2, [r7, #12]
 800afac:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800afb0:	693a      	ldr	r2, [r7, #16]
 800afb2:	fb02 f303 	mul.w	r3, r2, r3
 800afb6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800afb8:	68bb      	ldr	r3, [r7, #8]
}
 800afba:	4618      	mov	r0, r3
 800afbc:	371c      	adds	r7, #28
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr

0800afc6 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800afc6:	b480      	push	{r7}
 800afc8:	b087      	sub	sp, #28
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800afce:	2300      	movs	r3, #0
 800afd0:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800afd2:	2300      	movs	r3, #0
 800afd4:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800afd6:	2300      	movs	r3, #0
 800afd8:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d017      	beq.n	800b010 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	3b01      	subs	r3, #1
 800afe4:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800afe6:	e005      	b.n	800aff4 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	085b      	lsrs	r3, r3, #1
 800afec:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800afee:	89fb      	ldrh	r3, [r7, #14]
 800aff0:	3301      	adds	r3, #1
 800aff2:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800affa:	2b00      	cmp	r3, #0
 800affc:	d1f4      	bne.n	800afe8 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800affe:	89fb      	ldrh	r3, [r7, #14]
 800b000:	021b      	lsls	r3, r3, #8
 800b002:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	b29b      	uxth	r3, r3
 800b008:	b2db      	uxtb	r3, r3
 800b00a:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800b00c:	4413      	add	r3, r2
 800b00e:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800b010:	8afb      	ldrh	r3, [r7, #22]

}
 800b012:	4618      	mov	r0, r3
 800b014:	371c      	adds	r7, #28
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr

0800b01e <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800b01e:	b480      	push	{r7}
 800b020:	b085      	sub	sp, #20
 800b022:	af00      	add	r7, sp, #0
 800b024:	4603      	mov	r3, r0
 800b026:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800b028:	2300      	movs	r3, #0
 800b02a:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b02c:	88fb      	ldrh	r3, [r7, #6]
 800b02e:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800b030:	88fa      	ldrh	r2, [r7, #6]
 800b032:	0a12      	lsrs	r2, r2, #8
 800b034:	b292      	uxth	r2, r2
 800b036:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b038:	3301      	adds	r3, #1
 800b03a:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800b03c:	68fb      	ldr	r3, [r7, #12]
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3714      	adds	r7, #20
 800b042:	46bd      	mov	sp, r7
 800b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b048:	4770      	bx	lr
	...

0800b04c <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b088      	sub	sp, #32
 800b050:	af00      	add	r7, sp, #0
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	4613      	mov	r3, r2
 800b058:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800b05a:	2300      	movs	r3, #0
 800b05c:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800b05e:	79fb      	ldrb	r3, [r7, #7]
 800b060:	4619      	mov	r1, r3
 800b062:	68f8      	ldr	r0, [r7, #12]
 800b064:	f7ff ff91 	bl	800af8a <VL53L0X_calc_macro_period_ps>
 800b068:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800b06a:	69bb      	ldr	r3, [r7, #24]
 800b06c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b070:	4a0a      	ldr	r2, [pc, #40]	; (800b09c <VL53L0X_calc_timeout_mclks+0x50>)
 800b072:	fba2 2303 	umull	r2, r3, r2, r3
 800b076:	099b      	lsrs	r3, r3, #6
 800b078:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b080:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	085b      	lsrs	r3, r3, #1
 800b088:	441a      	add	r2, r3
	timeout_period_mclks =
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b090:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 800b092:	69fb      	ldr	r3, [r7, #28]
}
 800b094:	4618      	mov	r0, r3
 800b096:	3720      	adds	r7, #32
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}
 800b09c:	10624dd3 	.word	0x10624dd3

0800b0a0 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b086      	sub	sp, #24
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	460b      	mov	r3, r1
 800b0aa:	807b      	strh	r3, [r7, #2]
 800b0ac:	4613      	mov	r3, r2
 800b0ae:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800b0b4:	787b      	ldrb	r3, [r7, #1]
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f7ff ff66 	bl	800af8a <VL53L0X_calc_macro_period_ps>
 800b0be:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b0c6:	4a0b      	ldr	r2, [pc, #44]	; (800b0f4 <VL53L0X_calc_timeout_us+0x54>)
 800b0c8:	fba2 2303 	umull	r2, r3, r2, r3
 800b0cc:	099b      	lsrs	r3, r3, #6
 800b0ce:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns)
 800b0d0:	887b      	ldrh	r3, [r7, #2]
 800b0d2:	68fa      	ldr	r2, [r7, #12]
 800b0d4:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / 1000;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	085b      	lsrs	r3, r3, #1
 800b0dc:	4413      	add	r3, r2
	actual_timeout_period_us =
 800b0de:	4a05      	ldr	r2, [pc, #20]	; (800b0f4 <VL53L0X_calc_timeout_us+0x54>)
 800b0e0:	fba2 2303 	umull	r2, r3, r2, r3
 800b0e4:	099b      	lsrs	r3, r3, #6
 800b0e6:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800b0e8:	697b      	ldr	r3, [r7, #20]
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3718      	adds	r7, #24
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop
 800b0f4:	10624dd3 	.word	0x10624dd3

0800b0f8 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b08c      	sub	sp, #48	; 0x30
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	60f8      	str	r0, [r7, #12]
 800b100:	460b      	mov	r3, r1
 800b102:	607a      	str	r2, [r7, #4]
 800b104:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b106:	2300      	movs	r3, #0
 800b108:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800b10c:	2300      	movs	r3, #0
 800b10e:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800b112:	2300      	movs	r3, #0
 800b114:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800b116:	2300      	movs	r3, #0
 800b118:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800b11a:	2300      	movs	r3, #0
 800b11c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800b11e:	7afb      	ldrb	r3, [r7, #11]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d005      	beq.n	800b130 <get_sequence_step_timeout+0x38>
 800b124:	7afb      	ldrb	r3, [r7, #11]
 800b126:	2b01      	cmp	r3, #1
 800b128:	d002      	beq.n	800b130 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800b12a:	7afb      	ldrb	r3, [r7, #11]
 800b12c:	2b02      	cmp	r3, #2
 800b12e:	d128      	bne.n	800b182 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b130:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b134:	461a      	mov	r2, r3
 800b136:	2100      	movs	r1, #0
 800b138:	68f8      	ldr	r0, [r7, #12]
 800b13a:	f7fd fa73 	bl	8008624 <VL53L0X_GetVcselPulsePeriod>
 800b13e:	4603      	mov	r3, r0
 800b140:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800b144:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d109      	bne.n	800b160 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800b14c:	f107 0320 	add.w	r3, r7, #32
 800b150:	461a      	mov	r2, r3
 800b152:	2146      	movs	r1, #70	; 0x46
 800b154:	68f8      	ldr	r0, [r7, #12]
 800b156:	f001 fd2c 	bl	800cbb2 <VL53L0X_RdByte>
 800b15a:	4603      	mov	r3, r0
 800b15c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800b160:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b164:	b29b      	uxth	r3, r3
 800b166:	4618      	mov	r0, r3
 800b168:	f7ff ff59 	bl	800b01e <VL53L0X_decode_timeout>
 800b16c:	4603      	mov	r3, r0
 800b16e:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800b170:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b174:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b176:	4619      	mov	r1, r3
 800b178:	68f8      	ldr	r0, [r7, #12]
 800b17a:	f7ff ff91 	bl	800b0a0 <VL53L0X_calc_timeout_us>
 800b17e:	62b8      	str	r0, [r7, #40]	; 0x28
 800b180:	e092      	b.n	800b2a8 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800b182:	7afb      	ldrb	r3, [r7, #11]
 800b184:	2b03      	cmp	r3, #3
 800b186:	d135      	bne.n	800b1f4 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b188:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b18c:	461a      	mov	r2, r3
 800b18e:	2100      	movs	r1, #0
 800b190:	68f8      	ldr	r0, [r7, #12]
 800b192:	f7fd fa47 	bl	8008624 <VL53L0X_GetVcselPulsePeriod>
 800b196:	4603      	mov	r3, r0
 800b198:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800b19c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	f040 8081 	bne.w	800b2a8 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b1a6:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	2100      	movs	r1, #0
 800b1ae:	68f8      	ldr	r0, [r7, #12]
 800b1b0:	f7fd fa38 	bl	8008624 <VL53L0X_GetVcselPulsePeriod>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800b1ba:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d109      	bne.n	800b1d6 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800b1c2:	f107 031e 	add.w	r3, r7, #30
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	2151      	movs	r1, #81	; 0x51
 800b1ca:	68f8      	ldr	r0, [r7, #12]
 800b1cc:	f001 fd78 	bl	800ccc0 <VL53L0X_RdWord>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800b1d6:	8bfb      	ldrh	r3, [r7, #30]
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7ff ff20 	bl	800b01e <VL53L0X_decode_timeout>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800b1e2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b1e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	68f8      	ldr	r0, [r7, #12]
 800b1ec:	f7ff ff58 	bl	800b0a0 <VL53L0X_calc_timeout_us>
 800b1f0:	62b8      	str	r0, [r7, #40]	; 0x28
 800b1f2:	e059      	b.n	800b2a8 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800b1f4:	7afb      	ldrb	r3, [r7, #11]
 800b1f6:	2b04      	cmp	r3, #4
 800b1f8:	d156      	bne.n	800b2a8 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800b1fa:	f107 0314 	add.w	r3, r7, #20
 800b1fe:	4619      	mov	r1, r3
 800b200:	68f8      	ldr	r0, [r7, #12]
 800b202:	f7fd fb1b 	bl	800883c <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800b206:	2300      	movs	r3, #0
 800b208:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800b20a:	7dfb      	ldrb	r3, [r7, #23]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d01d      	beq.n	800b24c <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b210:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b214:	461a      	mov	r2, r3
 800b216:	2100      	movs	r1, #0
 800b218:	68f8      	ldr	r0, [r7, #12]
 800b21a:	f7fd fa03 	bl	8008624 <VL53L0X_GetVcselPulsePeriod>
 800b21e:	4603      	mov	r3, r0
 800b220:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800b224:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d10f      	bne.n	800b24c <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800b22c:	f107 031e 	add.w	r3, r7, #30
 800b230:	461a      	mov	r2, r3
 800b232:	2151      	movs	r1, #81	; 0x51
 800b234:	68f8      	ldr	r0, [r7, #12]
 800b236:	f001 fd43 	bl	800ccc0 <VL53L0X_RdWord>
 800b23a:	4603      	mov	r3, r0
 800b23c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800b240:	8bfb      	ldrh	r3, [r7, #30]
 800b242:	4618      	mov	r0, r3
 800b244:	f7ff feeb 	bl	800b01e <VL53L0X_decode_timeout>
 800b248:	4603      	mov	r3, r0
 800b24a:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800b24c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b250:	2b00      	cmp	r3, #0
 800b252:	d109      	bne.n	800b268 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b254:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b258:	461a      	mov	r2, r3
 800b25a:	2101      	movs	r1, #1
 800b25c:	68f8      	ldr	r0, [r7, #12]
 800b25e:	f7fd f9e1 	bl	8008624 <VL53L0X_GetVcselPulsePeriod>
 800b262:	4603      	mov	r3, r0
 800b264:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800b268:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d10f      	bne.n	800b290 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800b270:	f107 031c 	add.w	r3, r7, #28
 800b274:	461a      	mov	r2, r3
 800b276:	2171      	movs	r1, #113	; 0x71
 800b278:	68f8      	ldr	r0, [r7, #12]
 800b27a:	f001 fd21 	bl	800ccc0 <VL53L0X_RdWord>
 800b27e:	4603      	mov	r3, r0
 800b280:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800b284:	8bbb      	ldrh	r3, [r7, #28]
 800b286:	4618      	mov	r0, r3
 800b288:	f7ff fec9 	bl	800b01e <VL53L0X_decode_timeout>
 800b28c:	4603      	mov	r3, r0
 800b28e:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800b290:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b292:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b294:	1ad3      	subs	r3, r2, r3
 800b296:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800b298:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b29c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b29e:	4619      	mov	r1, r3
 800b2a0:	68f8      	ldr	r0, [r7, #12]
 800b2a2:	f7ff fefd 	bl	800b0a0 <VL53L0X_calc_timeout_us>
 800b2a6:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2ac:	601a      	str	r2, [r3, #0]

	return Status;
 800b2ae:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3730      	adds	r7, #48	; 0x30
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}

0800b2ba <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800b2ba:	b580      	push	{r7, lr}
 800b2bc:	b08a      	sub	sp, #40	; 0x28
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	60f8      	str	r0, [r7, #12]
 800b2c2:	460b      	mov	r3, r1
 800b2c4:	607a      	str	r2, [r7, #4]
 800b2c6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800b2ce:	7afb      	ldrb	r3, [r7, #11]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d005      	beq.n	800b2e0 <set_sequence_step_timeout+0x26>
 800b2d4:	7afb      	ldrb	r3, [r7, #11]
 800b2d6:	2b01      	cmp	r3, #1
 800b2d8:	d002      	beq.n	800b2e0 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800b2da:	7afb      	ldrb	r3, [r7, #11]
 800b2dc:	2b02      	cmp	r3, #2
 800b2de:	d138      	bne.n	800b352 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b2e0:	f107 031d 	add.w	r3, r7, #29
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	2100      	movs	r1, #0
 800b2e8:	68f8      	ldr	r0, [r7, #12]
 800b2ea:	f7fd f99b 	bl	8008624 <VL53L0X_GetVcselPulsePeriod>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800b2f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d11a      	bne.n	800b332 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800b2fc:	7f7b      	ldrb	r3, [r7, #29]
 800b2fe:	461a      	mov	r2, r3
 800b300:	6879      	ldr	r1, [r7, #4]
 800b302:	68f8      	ldr	r0, [r7, #12]
 800b304:	f7ff fea2 	bl	800b04c <VL53L0X_calc_timeout_mclks>
 800b308:	4603      	mov	r3, r0
 800b30a:	83fb      	strh	r3, [r7, #30]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800b30c:	8bfb      	ldrh	r3, [r7, #30]
 800b30e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b312:	d903      	bls.n	800b31c <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800b314:	23ff      	movs	r3, #255	; 0xff
 800b316:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b31a:	e004      	b.n	800b326 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800b31c:	8bfb      	ldrh	r3, [r7, #30]
 800b31e:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800b320:	3b01      	subs	r3, #1
 800b322:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b326:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b32a:	b29a      	uxth	r2, r3
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800b332:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b336:	2b00      	cmp	r3, #0
 800b338:	f040 80ad 	bne.w	800b496 <set_sequence_step_timeout+0x1dc>
			Status = VL53L0X_WrByte(Dev,
 800b33c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b340:	461a      	mov	r2, r3
 800b342:	2146      	movs	r1, #70	; 0x46
 800b344:	68f8      	ldr	r0, [r7, #12]
 800b346:	f001 fd2f 	bl	800cda8 <VL53L0X_WrByte>
 800b34a:	4603      	mov	r3, r0
 800b34c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800b350:	e0a1      	b.n	800b496 <set_sequence_step_timeout+0x1dc>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800b352:	7afb      	ldrb	r3, [r7, #11]
 800b354:	2b03      	cmp	r3, #3
 800b356:	d135      	bne.n	800b3c4 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800b358:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d11b      	bne.n	800b398 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b360:	f107 031d 	add.w	r3, r7, #29
 800b364:	461a      	mov	r2, r3
 800b366:	2100      	movs	r1, #0
 800b368:	68f8      	ldr	r0, [r7, #12]
 800b36a:	f7fd f95b 	bl	8008624 <VL53L0X_GetVcselPulsePeriod>
 800b36e:	4603      	mov	r3, r0
 800b370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800b374:	7f7b      	ldrb	r3, [r7, #29]
 800b376:	461a      	mov	r2, r3
 800b378:	6879      	ldr	r1, [r7, #4]
 800b37a:	68f8      	ldr	r0, [r7, #12]
 800b37c:	f7ff fe66 	bl	800b04c <VL53L0X_calc_timeout_mclks>
 800b380:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800b382:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800b384:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b386:	4618      	mov	r0, r3
 800b388:	f7ff fe1d 	bl	800afc6 <VL53L0X_encode_timeout>
 800b38c:	4603      	mov	r3, r0
 800b38e:	837b      	strh	r3, [r7, #26]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b390:	8b7a      	ldrh	r2, [r7, #26]
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800b398:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d108      	bne.n	800b3b2 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800b3a0:	8b7b      	ldrh	r3, [r7, #26]
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	2151      	movs	r1, #81	; 0x51
 800b3a6:	68f8      	ldr	r0, [r7, #12]
 800b3a8:	f001 fd22 	bl	800cdf0 <VL53L0X_WrWord>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800b3b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d16d      	bne.n	800b496 <set_sequence_step_timeout+0x1dc>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800b3c2:	e068      	b.n	800b496 <set_sequence_step_timeout+0x1dc>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800b3c4:	7afb      	ldrb	r3, [r7, #11]
 800b3c6:	2b04      	cmp	r3, #4
 800b3c8:	d162      	bne.n	800b490 <set_sequence_step_timeout+0x1d6>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800b3ca:	f107 0314 	add.w	r3, r7, #20
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	f7fd fa33 	bl	800883c <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800b3da:	7dfb      	ldrb	r3, [r7, #23]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d01d      	beq.n	800b41c <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b3e0:	f107 031d 	add.w	r3, r7, #29
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	2100      	movs	r1, #0
 800b3e8:	68f8      	ldr	r0, [r7, #12]
 800b3ea:	f7fd f91b 	bl	8008624 <VL53L0X_GetVcselPulsePeriod>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800b3f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d10f      	bne.n	800b41c <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800b3fc:	f107 031a 	add.w	r3, r7, #26
 800b400:	461a      	mov	r2, r3
 800b402:	2151      	movs	r1, #81	; 0x51
 800b404:	68f8      	ldr	r0, [r7, #12]
 800b406:	f001 fc5b 	bl	800ccc0 <VL53L0X_RdWord>
 800b40a:	4603      	mov	r3, r0
 800b40c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800b410:	8b7b      	ldrh	r3, [r7, #26]
 800b412:	4618      	mov	r0, r3
 800b414:	f7ff fe03 	bl	800b01e <VL53L0X_decode_timeout>
 800b418:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800b41a:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800b41c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b420:	2b00      	cmp	r3, #0
 800b422:	d109      	bne.n	800b438 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b424:	f107 031d 	add.w	r3, r7, #29
 800b428:	461a      	mov	r2, r3
 800b42a:	2101      	movs	r1, #1
 800b42c:	68f8      	ldr	r0, [r7, #12]
 800b42e:	f7fd f8f9 	bl	8008624 <VL53L0X_GetVcselPulsePeriod>
 800b432:	4603      	mov	r3, r0
 800b434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800b438:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d12a      	bne.n	800b496 <set_sequence_step_timeout+0x1dc>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800b440:	7f7b      	ldrb	r3, [r7, #29]
 800b442:	461a      	mov	r2, r3
 800b444:	6879      	ldr	r1, [r7, #4]
 800b446:	68f8      	ldr	r0, [r7, #12]
 800b448:	f7ff fe00 	bl	800b04c <VL53L0X_calc_timeout_mclks>
 800b44c:	4603      	mov	r3, r0
				FinalRangeTimeOutMClks =
 800b44e:	847b      	strh	r3, [r7, #34]	; 0x22
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800b450:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b452:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b454:	4413      	add	r3, r2
 800b456:	847b      	strh	r3, [r7, #34]	; 0x22

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800b458:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7ff fdb3 	bl	800afc6 <VL53L0X_encode_timeout>
 800b460:	4603      	mov	r3, r0
 800b462:	843b      	strh	r3, [r7, #32]

				if (Status == VL53L0X_ERROR_NONE) {
 800b464:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d108      	bne.n	800b47e <set_sequence_step_timeout+0x1c4>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800b46c:	8c3b      	ldrh	r3, [r7, #32]
 800b46e:	461a      	mov	r2, r3
 800b470:	2171      	movs	r1, #113	; 0x71
 800b472:	68f8      	ldr	r0, [r7, #12]
 800b474:	f001 fcbc 	bl	800cdf0 <VL53L0X_WrWord>
 800b478:	4603      	mov	r3, r0
 800b47a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800b47e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b482:	2b00      	cmp	r3, #0
 800b484:	d107      	bne.n	800b496 <set_sequence_step_timeout+0x1dc>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800b48e:	e002      	b.n	800b496 <set_sequence_step_timeout+0x1dc>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b490:	23fc      	movs	r3, #252	; 0xfc
 800b492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800b496:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3728      	adds	r7, #40	; 0x28
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}

0800b4a2 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800b4a2:	b580      	push	{r7, lr}
 800b4a4:	b08a      	sub	sp, #40	; 0x28
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	6078      	str	r0, [r7, #4]
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	70fb      	strb	r3, [r7, #3]
 800b4ae:	4613      	mov	r3, r2
 800b4b0:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800b4b8:	230c      	movs	r3, #12
 800b4ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800b4be:	2312      	movs	r3, #18
 800b4c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800b4c4:	2308      	movs	r3, #8
 800b4c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800b4ca:	230e      	movs	r3, #14
 800b4cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800b4d4:	78bb      	ldrb	r3, [r7, #2]
 800b4d6:	f003 0301 	and.w	r3, r3, #1
 800b4da:	b2db      	uxtb	r3, r3
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d003      	beq.n	800b4e8 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b4e0:	23fc      	movs	r3, #252	; 0xfc
 800b4e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b4e6:	e020      	b.n	800b52a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800b4e8:	78fb      	ldrb	r3, [r7, #3]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d10d      	bne.n	800b50a <VL53L0X_set_vcsel_pulse_period+0x68>
 800b4ee:	78ba      	ldrb	r2, [r7, #2]
 800b4f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d304      	bcc.n	800b502 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800b4f8:	78ba      	ldrb	r2, [r7, #2]
 800b4fa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b4fe:	429a      	cmp	r2, r3
 800b500:	d903      	bls.n	800b50a <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b502:	23fc      	movs	r3, #252	; 0xfc
 800b504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b508:	e00f      	b.n	800b52a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800b50a:	78fb      	ldrb	r3, [r7, #3]
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d10c      	bne.n	800b52a <VL53L0X_set_vcsel_pulse_period+0x88>
 800b510:	78ba      	ldrb	r2, [r7, #2]
 800b512:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b516:	429a      	cmp	r2, r3
 800b518:	d304      	bcc.n	800b524 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800b51a:	78ba      	ldrb	r2, [r7, #2]
 800b51c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b520:	429a      	cmp	r2, r3
 800b522:	d902      	bls.n	800b52a <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b524:	23fc      	movs	r3, #252	; 0xfc
 800b526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800b52a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d002      	beq.n	800b538 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800b532:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b536:	e239      	b.n	800b9ac <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800b538:	78fb      	ldrb	r3, [r7, #3]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d150      	bne.n	800b5e0 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800b53e:	78bb      	ldrb	r3, [r7, #2]
 800b540:	2b0c      	cmp	r3, #12
 800b542:	d110      	bne.n	800b566 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800b544:	2218      	movs	r2, #24
 800b546:	2157      	movs	r1, #87	; 0x57
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f001 fc2d 	bl	800cda8 <VL53L0X_WrByte>
 800b54e:	4603      	mov	r3, r0
 800b550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800b554:	2208      	movs	r2, #8
 800b556:	2156      	movs	r1, #86	; 0x56
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f001 fc25 	bl	800cda8 <VL53L0X_WrByte>
 800b55e:	4603      	mov	r3, r0
 800b560:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b564:	e17f      	b.n	800b866 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800b566:	78bb      	ldrb	r3, [r7, #2]
 800b568:	2b0e      	cmp	r3, #14
 800b56a:	d110      	bne.n	800b58e <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800b56c:	2230      	movs	r2, #48	; 0x30
 800b56e:	2157      	movs	r1, #87	; 0x57
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f001 fc19 	bl	800cda8 <VL53L0X_WrByte>
 800b576:	4603      	mov	r3, r0
 800b578:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800b57c:	2208      	movs	r2, #8
 800b57e:	2156      	movs	r1, #86	; 0x56
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f001 fc11 	bl	800cda8 <VL53L0X_WrByte>
 800b586:	4603      	mov	r3, r0
 800b588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b58c:	e16b      	b.n	800b866 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800b58e:	78bb      	ldrb	r3, [r7, #2]
 800b590:	2b10      	cmp	r3, #16
 800b592:	d110      	bne.n	800b5b6 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800b594:	2240      	movs	r2, #64	; 0x40
 800b596:	2157      	movs	r1, #87	; 0x57
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f001 fc05 	bl	800cda8 <VL53L0X_WrByte>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800b5a4:	2208      	movs	r2, #8
 800b5a6:	2156      	movs	r1, #86	; 0x56
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f001 fbfd 	bl	800cda8 <VL53L0X_WrByte>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b5b4:	e157      	b.n	800b866 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800b5b6:	78bb      	ldrb	r3, [r7, #2]
 800b5b8:	2b12      	cmp	r3, #18
 800b5ba:	f040 8154 	bne.w	800b866 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800b5be:	2250      	movs	r2, #80	; 0x50
 800b5c0:	2157      	movs	r1, #87	; 0x57
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f001 fbf0 	bl	800cda8 <VL53L0X_WrByte>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800b5ce:	2208      	movs	r2, #8
 800b5d0:	2156      	movs	r1, #86	; 0x56
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f001 fbe8 	bl	800cda8 <VL53L0X_WrByte>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b5de:	e142      	b.n	800b866 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800b5e0:	78fb      	ldrb	r3, [r7, #3]
 800b5e2:	2b01      	cmp	r3, #1
 800b5e4:	f040 813f 	bne.w	800b866 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800b5e8:	78bb      	ldrb	r3, [r7, #2]
 800b5ea:	2b08      	cmp	r3, #8
 800b5ec:	d14c      	bne.n	800b688 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800b5ee:	2210      	movs	r2, #16
 800b5f0:	2148      	movs	r1, #72	; 0x48
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f001 fbd8 	bl	800cda8 <VL53L0X_WrByte>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800b5fe:	2208      	movs	r2, #8
 800b600:	2147      	movs	r1, #71	; 0x47
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f001 fbd0 	bl	800cda8 <VL53L0X_WrByte>
 800b608:	4603      	mov	r3, r0
 800b60a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800b60e:	2202      	movs	r2, #2
 800b610:	2132      	movs	r1, #50	; 0x32
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f001 fbc8 	bl	800cda8 <VL53L0X_WrByte>
 800b618:	4603      	mov	r3, r0
 800b61a:	461a      	mov	r2, r3
 800b61c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b620:	4313      	orrs	r3, r2
 800b622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800b626:	220c      	movs	r2, #12
 800b628:	2130      	movs	r1, #48	; 0x30
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f001 fbbc 	bl	800cda8 <VL53L0X_WrByte>
 800b630:	4603      	mov	r3, r0
 800b632:	461a      	mov	r2, r3
 800b634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b638:	4313      	orrs	r3, r2
 800b63a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b63e:	2201      	movs	r2, #1
 800b640:	21ff      	movs	r1, #255	; 0xff
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f001 fbb0 	bl	800cda8 <VL53L0X_WrByte>
 800b648:	4603      	mov	r3, r0
 800b64a:	461a      	mov	r2, r3
 800b64c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b650:	4313      	orrs	r3, r2
 800b652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800b656:	2230      	movs	r2, #48	; 0x30
 800b658:	2130      	movs	r1, #48	; 0x30
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f001 fba4 	bl	800cda8 <VL53L0X_WrByte>
 800b660:	4603      	mov	r3, r0
 800b662:	461a      	mov	r2, r3
 800b664:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b668:	4313      	orrs	r3, r2
 800b66a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b66e:	2200      	movs	r2, #0
 800b670:	21ff      	movs	r1, #255	; 0xff
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f001 fb98 	bl	800cda8 <VL53L0X_WrByte>
 800b678:	4603      	mov	r3, r0
 800b67a:	461a      	mov	r2, r3
 800b67c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b680:	4313      	orrs	r3, r2
 800b682:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b686:	e0ee      	b.n	800b866 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800b688:	78bb      	ldrb	r3, [r7, #2]
 800b68a:	2b0a      	cmp	r3, #10
 800b68c:	d14c      	bne.n	800b728 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800b68e:	2228      	movs	r2, #40	; 0x28
 800b690:	2148      	movs	r1, #72	; 0x48
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f001 fb88 	bl	800cda8 <VL53L0X_WrByte>
 800b698:	4603      	mov	r3, r0
 800b69a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800b69e:	2208      	movs	r2, #8
 800b6a0:	2147      	movs	r1, #71	; 0x47
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f001 fb80 	bl	800cda8 <VL53L0X_WrByte>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800b6ae:	2203      	movs	r2, #3
 800b6b0:	2132      	movs	r1, #50	; 0x32
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f001 fb78 	bl	800cda8 <VL53L0X_WrByte>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6c0:	4313      	orrs	r3, r2
 800b6c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800b6c6:	2209      	movs	r2, #9
 800b6c8:	2130      	movs	r1, #48	; 0x30
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f001 fb6c 	bl	800cda8 <VL53L0X_WrByte>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	461a      	mov	r2, r3
 800b6d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b6de:	2201      	movs	r2, #1
 800b6e0:	21ff      	movs	r1, #255	; 0xff
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f001 fb60 	bl	800cda8 <VL53L0X_WrByte>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6f0:	4313      	orrs	r3, r2
 800b6f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800b6f6:	2220      	movs	r2, #32
 800b6f8:	2130      	movs	r1, #48	; 0x30
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f001 fb54 	bl	800cda8 <VL53L0X_WrByte>
 800b700:	4603      	mov	r3, r0
 800b702:	461a      	mov	r2, r3
 800b704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b708:	4313      	orrs	r3, r2
 800b70a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b70e:	2200      	movs	r2, #0
 800b710:	21ff      	movs	r1, #255	; 0xff
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f001 fb48 	bl	800cda8 <VL53L0X_WrByte>
 800b718:	4603      	mov	r3, r0
 800b71a:	461a      	mov	r2, r3
 800b71c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b720:	4313      	orrs	r3, r2
 800b722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b726:	e09e      	b.n	800b866 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800b728:	78bb      	ldrb	r3, [r7, #2]
 800b72a:	2b0c      	cmp	r3, #12
 800b72c:	d14c      	bne.n	800b7c8 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800b72e:	2238      	movs	r2, #56	; 0x38
 800b730:	2148      	movs	r1, #72	; 0x48
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f001 fb38 	bl	800cda8 <VL53L0X_WrByte>
 800b738:	4603      	mov	r3, r0
 800b73a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800b73e:	2208      	movs	r2, #8
 800b740:	2147      	movs	r1, #71	; 0x47
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f001 fb30 	bl	800cda8 <VL53L0X_WrByte>
 800b748:	4603      	mov	r3, r0
 800b74a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800b74e:	2203      	movs	r2, #3
 800b750:	2132      	movs	r1, #50	; 0x32
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f001 fb28 	bl	800cda8 <VL53L0X_WrByte>
 800b758:	4603      	mov	r3, r0
 800b75a:	461a      	mov	r2, r3
 800b75c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b760:	4313      	orrs	r3, r2
 800b762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800b766:	2208      	movs	r2, #8
 800b768:	2130      	movs	r1, #48	; 0x30
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f001 fb1c 	bl	800cda8 <VL53L0X_WrByte>
 800b770:	4603      	mov	r3, r0
 800b772:	461a      	mov	r2, r3
 800b774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b778:	4313      	orrs	r3, r2
 800b77a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b77e:	2201      	movs	r2, #1
 800b780:	21ff      	movs	r1, #255	; 0xff
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f001 fb10 	bl	800cda8 <VL53L0X_WrByte>
 800b788:	4603      	mov	r3, r0
 800b78a:	461a      	mov	r2, r3
 800b78c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b790:	4313      	orrs	r3, r2
 800b792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800b796:	2220      	movs	r2, #32
 800b798:	2130      	movs	r1, #48	; 0x30
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f001 fb04 	bl	800cda8 <VL53L0X_WrByte>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7a8:	4313      	orrs	r3, r2
 800b7aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	21ff      	movs	r1, #255	; 0xff
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f001 faf8 	bl	800cda8 <VL53L0X_WrByte>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b7c6:	e04e      	b.n	800b866 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800b7c8:	78bb      	ldrb	r3, [r7, #2]
 800b7ca:	2b0e      	cmp	r3, #14
 800b7cc:	d14b      	bne.n	800b866 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800b7ce:	2248      	movs	r2, #72	; 0x48
 800b7d0:	2148      	movs	r1, #72	; 0x48
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f001 fae8 	bl	800cda8 <VL53L0X_WrByte>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800b7de:	2208      	movs	r2, #8
 800b7e0:	2147      	movs	r1, #71	; 0x47
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f001 fae0 	bl	800cda8 <VL53L0X_WrByte>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800b7ee:	2203      	movs	r2, #3
 800b7f0:	2132      	movs	r1, #50	; 0x32
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f001 fad8 	bl	800cda8 <VL53L0X_WrByte>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	461a      	mov	r2, r3
 800b7fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b800:	4313      	orrs	r3, r2
 800b802:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800b806:	2207      	movs	r2, #7
 800b808:	2130      	movs	r1, #48	; 0x30
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f001 facc 	bl	800cda8 <VL53L0X_WrByte>
 800b810:	4603      	mov	r3, r0
 800b812:	461a      	mov	r2, r3
 800b814:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b818:	4313      	orrs	r3, r2
 800b81a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b81e:	2201      	movs	r2, #1
 800b820:	21ff      	movs	r1, #255	; 0xff
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f001 fac0 	bl	800cda8 <VL53L0X_WrByte>
 800b828:	4603      	mov	r3, r0
 800b82a:	461a      	mov	r2, r3
 800b82c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b830:	4313      	orrs	r3, r2
 800b832:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800b836:	2220      	movs	r2, #32
 800b838:	2130      	movs	r1, #48	; 0x30
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f001 fab4 	bl	800cda8 <VL53L0X_WrByte>
 800b840:	4603      	mov	r3, r0
 800b842:	461a      	mov	r2, r3
 800b844:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b848:	4313      	orrs	r3, r2
 800b84a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b84e:	2200      	movs	r2, #0
 800b850:	21ff      	movs	r1, #255	; 0xff
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f001 faa8 	bl	800cda8 <VL53L0X_WrByte>
 800b858:	4603      	mov	r3, r0
 800b85a:	461a      	mov	r2, r3
 800b85c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b860:	4313      	orrs	r3, r2
 800b862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800b866:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d17f      	bne.n	800b96e <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800b86e:	78bb      	ldrb	r3, [r7, #2]
 800b870:	4618      	mov	r0, r3
 800b872:	f7fe fe35 	bl	800a4e0 <VL53L0X_encode_vcsel_period>
 800b876:	4603      	mov	r3, r0
 800b878:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800b87c:	78fb      	ldrb	r3, [r7, #3]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d002      	beq.n	800b888 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800b882:	2b01      	cmp	r3, #1
 800b884:	d045      	beq.n	800b912 <VL53L0X_set_vcsel_pulse_period+0x470>
 800b886:	e06e      	b.n	800b966 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800b888:	f107 0314 	add.w	r3, r7, #20
 800b88c:	461a      	mov	r2, r3
 800b88e:	2103      	movs	r1, #3
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f7ff fc31 	bl	800b0f8 <get_sequence_step_timeout>
 800b896:	4603      	mov	r3, r0
 800b898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800b89c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d109      	bne.n	800b8b8 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800b8a4:	f107 0310 	add.w	r3, r7, #16
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	2102      	movs	r1, #2
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f7ff fc23 	bl	800b0f8 <get_sequence_step_timeout>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800b8b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d109      	bne.n	800b8d4 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800b8c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	2150      	movs	r1, #80	; 0x50
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f001 fa6d 	bl	800cda8 <VL53L0X_WrByte>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800b8d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d108      	bne.n	800b8ee <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	461a      	mov	r2, r3
 800b8e0:	2103      	movs	r1, #3
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f7ff fce9 	bl	800b2ba <set_sequence_step_timeout>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800b8ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d108      	bne.n	800b908 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	2102      	movs	r1, #2
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f7ff fcdc 	bl	800b2ba <set_sequence_step_timeout>
 800b902:	4603      	mov	r3, r0
 800b904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	78ba      	ldrb	r2, [r7, #2]
 800b90c:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800b910:	e02e      	b.n	800b970 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800b912:	f107 0318 	add.w	r3, r7, #24
 800b916:	461a      	mov	r2, r3
 800b918:	2104      	movs	r1, #4
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f7ff fbec 	bl	800b0f8 <get_sequence_step_timeout>
 800b920:	4603      	mov	r3, r0
 800b922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800b926:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d109      	bne.n	800b942 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800b92e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b932:	461a      	mov	r2, r3
 800b934:	2170      	movs	r1, #112	; 0x70
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f001 fa36 	bl	800cda8 <VL53L0X_WrByte>
 800b93c:	4603      	mov	r3, r0
 800b93e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800b942:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b946:	2b00      	cmp	r3, #0
 800b948:	d108      	bne.n	800b95c <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800b94a:	69bb      	ldr	r3, [r7, #24]
 800b94c:	461a      	mov	r2, r3
 800b94e:	2104      	movs	r1, #4
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f7ff fcb2 	bl	800b2ba <set_sequence_step_timeout>
 800b956:	4603      	mov	r3, r0
 800b958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	78ba      	ldrb	r2, [r7, #2]
 800b960:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800b964:	e004      	b.n	800b970 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b966:	23fc      	movs	r3, #252	; 0xfc
 800b968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b96c:	e000      	b.n	800b970 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800b96e:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800b970:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b974:	2b00      	cmp	r3, #0
 800b976:	d109      	bne.n	800b98c <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	695b      	ldr	r3, [r3, #20]
 800b97c:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800b97e:	69f9      	ldr	r1, [r7, #28]
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f7fc fe11 	bl	80085a8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800b986:	4603      	mov	r3, r0
 800b988:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800b98c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b990:	2b00      	cmp	r3, #0
 800b992:	d109      	bne.n	800b9a8 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800b994:	f107 010f 	add.w	r1, r7, #15
 800b998:	2301      	movs	r3, #1
 800b99a:	2200      	movs	r2, #0
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f7fe fcbb 	bl	800a318 <VL53L0X_perform_phase_calibration>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800b9a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3728      	adds	r7, #40	; 0x28
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b086      	sub	sp, #24
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	460b      	mov	r3, r1
 800b9be:	607a      	str	r2, [r7, #4]
 800b9c0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800b9c6:	7afb      	ldrb	r3, [r7, #11]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d002      	beq.n	800b9d2 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	d00a      	beq.n	800b9e6 <VL53L0X_get_vcsel_pulse_period+0x32>
 800b9d0:	e013      	b.n	800b9fa <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800b9d2:	f107 0316 	add.w	r3, r7, #22
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	2150      	movs	r1, #80	; 0x50
 800b9da:	68f8      	ldr	r0, [r7, #12]
 800b9dc:	f001 f8e9 	bl	800cbb2 <VL53L0X_RdByte>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800b9e4:	e00b      	b.n	800b9fe <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800b9e6:	f107 0316 	add.w	r3, r7, #22
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	2170      	movs	r1, #112	; 0x70
 800b9ee:	68f8      	ldr	r0, [r7, #12]
 800b9f0:	f001 f8df 	bl	800cbb2 <VL53L0X_RdByte>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800b9f8:	e001      	b.n	800b9fe <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b9fa:	23fc      	movs	r3, #252	; 0xfc
 800b9fc:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800b9fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d107      	bne.n	800ba16 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800ba06:	7dbb      	ldrb	r3, [r7, #22]
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f7fe fd56 	bl	800a4ba <VL53L0X_decode_vcsel_period>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	701a      	strb	r2, [r3, #0]

	return Status;
 800ba16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3718      	adds	r7, #24
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}

0800ba22 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800ba22:	b580      	push	{r7, lr}
 800ba24:	b092      	sub	sp, #72	; 0x48
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
 800ba2a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800ba32:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ba36:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1320;
 800ba38:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 800ba3c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800ba3e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800ba42:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800ba44:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ba48:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800ba4a:	f240 234e 	movw	r3, #590	; 0x24e
 800ba4e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800ba50:	f240 23b2 	movw	r3, #690	; 0x2b2
 800ba54:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800ba56:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ba5a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800ba5c:	f240 2326 	movw	r3, #550	; 0x226
 800ba60:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800ba62:	2300      	movs	r3, #0
 800ba64:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800ba66:	f644 6320 	movw	r3, #20000	; 0x4e20
 800ba6a:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800ba70:	683a      	ldr	r2, [r7, #0]
 800ba72:	6a3b      	ldr	r3, [r7, #32]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d205      	bcs.n	800ba84 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ba78:	23fc      	movs	r3, #252	; 0xfc
 800ba7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800ba7e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ba82:	e0aa      	b.n	800bbda <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800ba84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ba86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba88:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800ba8a:	683a      	ldr	r2, [r7, #0]
 800ba8c:	1ad3      	subs	r3, r2, r3
 800ba8e:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800ba90:	f107 0314 	add.w	r3, r7, #20
 800ba94:	4619      	mov	r1, r3
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f7fc fed0 	bl	800883c <VL53L0X_GetSequenceStepEnables>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800baa2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d15b      	bne.n	800bb62 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800baaa:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800baac:	2b00      	cmp	r3, #0
 800baae:	d105      	bne.n	800babc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800bab0:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d102      	bne.n	800babc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800bab6:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d052      	beq.n	800bb62 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800babc:	f107 0310 	add.w	r3, r7, #16
 800bac0:	461a      	mov	r2, r3
 800bac2:	2102      	movs	r1, #2
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f7ff fb17 	bl	800b0f8 <get_sequence_step_timeout>
 800baca:	4603      	mov	r3, r0
 800bacc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800bad0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d002      	beq.n	800bade <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800bad8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800badc:	e07d      	b.n	800bbda <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800bade:	7d3b      	ldrb	r3, [r7, #20]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d00f      	beq.n	800bb04 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800bae4:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800bae6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bae8:	4413      	add	r3, r2
 800baea:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800baec:	69fa      	ldr	r2, [r7, #28]
 800baee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d204      	bcs.n	800bafe <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800baf4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800baf6:	69fb      	ldr	r3, [r7, #28]
 800baf8:	1ad3      	subs	r3, r2, r3
 800bafa:	643b      	str	r3, [r7, #64]	; 0x40
 800bafc:	e002      	b.n	800bb04 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bafe:	23fc      	movs	r3, #252	; 0xfc
 800bb00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800bb04:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d002      	beq.n	800bb12 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800bb0c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800bb10:	e063      	b.n	800bbda <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800bb12:	7dbb      	ldrb	r3, [r7, #22]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d011      	beq.n	800bb3c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800bb18:	693a      	ldr	r2, [r7, #16]
 800bb1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb1c:	4413      	add	r3, r2
 800bb1e:	005b      	lsls	r3, r3, #1
 800bb20:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800bb22:	69fa      	ldr	r2, [r7, #28]
 800bb24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d204      	bcs.n	800bb34 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800bb2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bb2c:	69fb      	ldr	r3, [r7, #28]
 800bb2e:	1ad3      	subs	r3, r2, r3
 800bb30:	643b      	str	r3, [r7, #64]	; 0x40
 800bb32:	e016      	b.n	800bb62 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bb34:	23fc      	movs	r3, #252	; 0xfc
 800bb36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800bb3a:	e012      	b.n	800bb62 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800bb3c:	7d7b      	ldrb	r3, [r7, #21]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d00f      	beq.n	800bb62 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb46:	4413      	add	r3, r2
 800bb48:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800bb4a:	69fa      	ldr	r2, [r7, #28]
 800bb4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d204      	bcs.n	800bb5c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800bb52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bb54:	69fb      	ldr	r3, [r7, #28]
 800bb56:	1ad3      	subs	r3, r2, r3
 800bb58:	643b      	str	r3, [r7, #64]	; 0x40
 800bb5a:	e002      	b.n	800bb62 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bb5c:	23fc      	movs	r3, #252	; 0xfc
 800bb5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800bb62:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d002      	beq.n	800bb70 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800bb6a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800bb6e:	e034      	b.n	800bbda <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800bb70:	7dfb      	ldrb	r3, [r7, #23]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d019      	beq.n	800bbaa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800bb76:	f107 030c 	add.w	r3, r7, #12
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	2103      	movs	r1, #3
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f7ff faba 	bl	800b0f8 <get_sequence_step_timeout>
 800bb84:	4603      	mov	r3, r0
 800bb86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb8e:	4413      	add	r3, r2
 800bb90:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800bb92:	69fa      	ldr	r2, [r7, #28]
 800bb94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d204      	bcs.n	800bba4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800bb9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bb9c:	69fb      	ldr	r3, [r7, #28]
 800bb9e:	1ad3      	subs	r3, r2, r3
 800bba0:	643b      	str	r3, [r7, #64]	; 0x40
 800bba2:	e002      	b.n	800bbaa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bba4:	23fc      	movs	r3, #252	; 0xfc
 800bba6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800bbaa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d111      	bne.n	800bbd6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800bbb2:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d00e      	beq.n	800bbd6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800bbb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbbc:	1ad3      	subs	r3, r2, r3
 800bbbe:	643b      	str	r3, [r7, #64]	; 0x40
		* budget and the sum of all other timeouts within the sequence.
		* If there is no room for the final range timeout, then an error
		* will be set. Otherwise the remaining time will be applied to
		* the final range.
		*/
		Status = set_sequence_step_timeout(Dev,
 800bbc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bbc2:	2104      	movs	r1, #4
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f7ff fb78 	bl	800b2ba <set_sequence_step_timeout>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			   VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			   FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	683a      	ldr	r2, [r7, #0]
 800bbd4:	615a      	str	r2, [r3, #20]
			   MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800bbd6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3748      	adds	r7, #72	; 0x48
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800bbe2:	b580      	push	{r7, lr}
 800bbe4:	b090      	sub	sp, #64	; 0x40
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
 800bbea:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bbec:	2300      	movs	r3, #0
 800bbee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800bbf2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800bbf6:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800bbf8:	f240 7376 	movw	r3, #1910	; 0x776
 800bbfc:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800bbfe:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800bc02:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800bc04:	f44f 7325 	mov.w	r3, #660	; 0x294
 800bc08:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800bc0a:	f240 234e 	movw	r3, #590	; 0x24e
 800bc0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800bc10:	f240 23b2 	movw	r3, #690	; 0x2b2
 800bc14:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800bc16:	f44f 7325 	mov.w	r3, #660	; 0x294
 800bc1a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800bc1c:	f240 2326 	movw	r3, #550	; 0x226
 800bc20:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800bc22:	2300      	movs	r3, #0
 800bc24:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800bc26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc2a:	441a      	add	r2, r3
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800bc30:	f107 0318 	add.w	r3, r7, #24
 800bc34:	4619      	mov	r1, r3
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f7fc fe00 	bl	800883c <VL53L0X_GetSequenceStepEnables>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800bc42:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d002      	beq.n	800bc50 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800bc4a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bc4e:	e075      	b.n	800bd3c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800bc50:	7e3b      	ldrb	r3, [r7, #24]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d105      	bne.n	800bc62 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800bc56:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d102      	bne.n	800bc62 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800bc5c:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d030      	beq.n	800bcc4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800bc62:	f107 0310 	add.w	r3, r7, #16
 800bc66:	461a      	mov	r2, r3
 800bc68:	2102      	movs	r1, #2
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f7ff fa44 	bl	800b0f8 <get_sequence_step_timeout>
 800bc70:	4603      	mov	r3, r0
 800bc72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800bc76:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d122      	bne.n	800bcc4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800bc7e:	7e3b      	ldrb	r3, [r7, #24]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d007      	beq.n	800bc94 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800bc88:	6939      	ldr	r1, [r7, #16]
 800bc8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc8c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800bc8e:	441a      	add	r2, r3
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800bc94:	7ebb      	ldrb	r3, [r7, #26]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d009      	beq.n	800bcae <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800bc9e:	6939      	ldr	r1, [r7, #16]
 800bca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca2:	440b      	add	r3, r1
 800bca4:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800bca6:	441a      	add	r2, r3
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	601a      	str	r2, [r3, #0]
 800bcac:	e00a      	b.n	800bcc4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800bcae:	7e7b      	ldrb	r3, [r7, #25]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d007      	beq.n	800bcc4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800bcb8:	6939      	ldr	r1, [r7, #16]
 800bcba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcbc:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800bcbe:	441a      	add	r2, r3
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bcc4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d114      	bne.n	800bcf6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800bccc:	7efb      	ldrb	r3, [r7, #27]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d011      	beq.n	800bcf6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800bcd2:	f107 030c 	add.w	r3, r7, #12
 800bcd6:	461a      	mov	r2, r3
 800bcd8:	2103      	movs	r1, #3
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f7ff fa0c 	bl	800b0f8 <get_sequence_step_timeout>
 800bce0:	4603      	mov	r3, r0
 800bce2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800bcea:	68f9      	ldr	r1, [r7, #12]
 800bcec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcee:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800bcf0:	441a      	add	r2, r3
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bcf6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d114      	bne.n	800bd28 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800bcfe:	7f3b      	ldrb	r3, [r7, #28]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d011      	beq.n	800bd28 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800bd04:	f107 0314 	add.w	r3, r7, #20
 800bd08:	461a      	mov	r2, r3
 800bd0a:	2104      	movs	r1, #4
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f7ff f9f3 	bl	800b0f8 <get_sequence_step_timeout>
 800bd12:	4603      	mov	r3, r0
 800bd14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800bd1c:	6979      	ldr	r1, [r7, #20]
 800bd1e:	6a3b      	ldr	r3, [r7, #32]
 800bd20:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800bd22:	441a      	add	r2, r3
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bd28:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d103      	bne.n	800bd38 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	681a      	ldr	r2, [r3, #0]
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bd38:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3740      	adds	r7, #64	; 0x40
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}

0800bd44 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b088      	sub	sp, #32
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800bd52:	2300      	movs	r3, #0
 800bd54:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800bd56:	e0c6      	b.n	800bee6 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	683a      	ldr	r2, [r7, #0]
 800bd5c:	4413      	add	r3, r2
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	74fb      	strb	r3, [r7, #19]
		Index++;
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	3301      	adds	r3, #1
 800bd66:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800bd68:	7cfb      	ldrb	r3, [r7, #19]
 800bd6a:	2bff      	cmp	r3, #255	; 0xff
 800bd6c:	f040 808d 	bne.w	800be8a <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	683a      	ldr	r2, [r7, #0]
 800bd74:	4413      	add	r3, r2
 800bd76:	781b      	ldrb	r3, [r3, #0]
 800bd78:	747b      	strb	r3, [r7, #17]
			Index++;
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	3301      	adds	r3, #1
 800bd7e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800bd80:	7c7b      	ldrb	r3, [r7, #17]
 800bd82:	2b03      	cmp	r3, #3
 800bd84:	d87e      	bhi.n	800be84 <VL53L0X_load_tuning_settings+0x140>
 800bd86:	a201      	add	r2, pc, #4	; (adr r2, 800bd8c <VL53L0X_load_tuning_settings+0x48>)
 800bd88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd8c:	0800bd9d 	.word	0x0800bd9d
 800bd90:	0800bdd7 	.word	0x0800bdd7
 800bd94:	0800be11 	.word	0x0800be11
 800bd98:	0800be4b 	.word	0x0800be4b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	683a      	ldr	r2, [r7, #0]
 800bda0:	4413      	add	r3, r2
 800bda2:	781b      	ldrb	r3, [r3, #0]
 800bda4:	743b      	strb	r3, [r7, #16]
				Index++;
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	3301      	adds	r3, #1
 800bdaa:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	683a      	ldr	r2, [r7, #0]
 800bdb0:	4413      	add	r3, r2
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	73fb      	strb	r3, [r7, #15]
				Index++;
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	3301      	adds	r3, #1
 800bdba:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800bdbc:	7c3b      	ldrb	r3, [r7, #16]
 800bdbe:	b29b      	uxth	r3, r3
 800bdc0:	021b      	lsls	r3, r3, #8
 800bdc2:	b29a      	uxth	r2, r3
 800bdc4:	7bfb      	ldrb	r3, [r7, #15]
 800bdc6:	b29b      	uxth	r3, r3
 800bdc8:	4413      	add	r3, r2
 800bdca:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	89ba      	ldrh	r2, [r7, #12]
 800bdd0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800bdd4:	e087      	b.n	800bee6 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	683a      	ldr	r2, [r7, #0]
 800bdda:	4413      	add	r3, r2
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	743b      	strb	r3, [r7, #16]
				Index++;
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	3301      	adds	r3, #1
 800bde4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	683a      	ldr	r2, [r7, #0]
 800bdea:	4413      	add	r3, r2
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	73fb      	strb	r3, [r7, #15]
				Index++;
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	3301      	adds	r3, #1
 800bdf4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800bdf6:	7c3b      	ldrb	r3, [r7, #16]
 800bdf8:	b29b      	uxth	r3, r3
 800bdfa:	021b      	lsls	r3, r3, #8
 800bdfc:	b29a      	uxth	r2, r3
 800bdfe:	7bfb      	ldrb	r3, [r7, #15]
 800be00:	b29b      	uxth	r3, r3
 800be02:	4413      	add	r3, r2
 800be04:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	89ba      	ldrh	r2, [r7, #12]
 800be0a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800be0e:	e06a      	b.n	800bee6 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	683a      	ldr	r2, [r7, #0]
 800be14:	4413      	add	r3, r2
 800be16:	781b      	ldrb	r3, [r3, #0]
 800be18:	743b      	strb	r3, [r7, #16]
				Index++;
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	3301      	adds	r3, #1
 800be1e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	683a      	ldr	r2, [r7, #0]
 800be24:	4413      	add	r3, r2
 800be26:	781b      	ldrb	r3, [r3, #0]
 800be28:	73fb      	strb	r3, [r7, #15]
				Index++;
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	3301      	adds	r3, #1
 800be2e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800be30:	7c3b      	ldrb	r3, [r7, #16]
 800be32:	b29b      	uxth	r3, r3
 800be34:	021b      	lsls	r3, r3, #8
 800be36:	b29a      	uxth	r2, r3
 800be38:	7bfb      	ldrb	r3, [r7, #15]
 800be3a:	b29b      	uxth	r3, r3
 800be3c:	4413      	add	r3, r2
 800be3e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	89ba      	ldrh	r2, [r7, #12]
 800be44:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800be48:	e04d      	b.n	800bee6 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	683a      	ldr	r2, [r7, #0]
 800be4e:	4413      	add	r3, r2
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	743b      	strb	r3, [r7, #16]
				Index++;
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	3301      	adds	r3, #1
 800be58:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	683a      	ldr	r2, [r7, #0]
 800be5e:	4413      	add	r3, r2
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	73fb      	strb	r3, [r7, #15]
				Index++;
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	3301      	adds	r3, #1
 800be68:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800be6a:	7c3b      	ldrb	r3, [r7, #16]
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	021b      	lsls	r3, r3, #8
 800be70:	b29a      	uxth	r2, r3
 800be72:	7bfb      	ldrb	r3, [r7, #15]
 800be74:	b29b      	uxth	r3, r3
 800be76:	4413      	add	r3, r2
 800be78:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	89ba      	ldrh	r2, [r7, #12]
 800be7e:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
				break;
 800be82:	e030      	b.n	800bee6 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800be84:	23fc      	movs	r3, #252	; 0xfc
 800be86:	77fb      	strb	r3, [r7, #31]
 800be88:	e02d      	b.n	800bee6 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800be8a:	7cfb      	ldrb	r3, [r7, #19]
 800be8c:	2b04      	cmp	r3, #4
 800be8e:	d828      	bhi.n	800bee2 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	683a      	ldr	r2, [r7, #0]
 800be94:	4413      	add	r3, r2
 800be96:	781b      	ldrb	r3, [r3, #0]
 800be98:	74bb      	strb	r3, [r7, #18]
			Index++;
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	3301      	adds	r3, #1
 800be9e:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800bea0:	2300      	movs	r3, #0
 800bea2:	61bb      	str	r3, [r7, #24]
 800bea4:	e00f      	b.n	800bec6 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	683a      	ldr	r2, [r7, #0]
 800beaa:	4413      	add	r3, r2
 800beac:	7819      	ldrb	r1, [r3, #0]
 800beae:	f107 0208 	add.w	r2, r7, #8
 800beb2:	69bb      	ldr	r3, [r7, #24]
 800beb4:	4413      	add	r3, r2
 800beb6:	460a      	mov	r2, r1
 800beb8:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	3301      	adds	r3, #1
 800bebe:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800bec0:	69bb      	ldr	r3, [r7, #24]
 800bec2:	3301      	adds	r3, #1
 800bec4:	61bb      	str	r3, [r7, #24]
 800bec6:	7cfb      	ldrb	r3, [r7, #19]
 800bec8:	69ba      	ldr	r2, [r7, #24]
 800beca:	429a      	cmp	r2, r3
 800becc:	dbeb      	blt.n	800bea6 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800bece:	7cfb      	ldrb	r3, [r7, #19]
 800bed0:	f107 0208 	add.w	r2, r7, #8
 800bed4:	7cb9      	ldrb	r1, [r7, #18]
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 fe96 	bl	800cc08 <VL53L0X_WriteMulti>
 800bedc:	4603      	mov	r3, r0
 800bede:	77fb      	strb	r3, [r7, #31]
 800bee0:	e001      	b.n	800bee6 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bee2:	23fc      	movs	r3, #252	; 0xfc
 800bee4:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	683a      	ldr	r2, [r7, #0]
 800beea:	4413      	add	r3, r2
 800beec:	781b      	ldrb	r3, [r3, #0]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d004      	beq.n	800befc <VL53L0X_load_tuning_settings+0x1b8>
 800bef2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	f43f af2e 	beq.w	800bd58 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800befc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3720      	adds	r7, #32
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}

0800bf08 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b088      	sub	sp, #32
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf14:	2300      	movs	r3, #0
 800bf16:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800bf1e:	f107 0313 	add.w	r3, r7, #19
 800bf22:	4619      	mov	r1, r3
 800bf24:	68f8      	ldr	r0, [r7, #12]
 800bf26:	f7fc fd55 	bl	80089d4 <VL53L0X_GetXTalkCompensationEnable>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800bf2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d111      	bne.n	800bf5a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800bf36:	7cfb      	ldrb	r3, [r7, #19]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d00e      	beq.n	800bf5a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	6a1b      	ldr	r3, [r3, #32]
 800bf40:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	8a9b      	ldrh	r3, [r3, #20]
 800bf46:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800bf48:	69bb      	ldr	r3, [r7, #24]
 800bf4a:	fb02 f303 	mul.w	r3, r2, r3
 800bf4e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	3380      	adds	r3, #128	; 0x80
 800bf54:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800bf5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3720      	adds	r7, #32
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}

0800bf66 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800bf66:	b580      	push	{r7, lr}
 800bf68:	b086      	sub	sp, #24
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	60f8      	str	r0, [r7, #12]
 800bf6e:	60b9      	str	r1, [r7, #8]
 800bf70:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf72:	2300      	movs	r3, #0
 800bf74:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800bf7e:	f107 0310 	add.w	r3, r7, #16
 800bf82:	461a      	mov	r2, r3
 800bf84:	68b9      	ldr	r1, [r7, #8]
 800bf86:	68f8      	ldr	r0, [r7, #12]
 800bf88:	f7ff ffbe 	bl	800bf08 <VL53L0X_get_total_xtalk_rate>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800bf90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d105      	bne.n	800bfa4 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681a      	ldr	r2, [r3, #0]
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	441a      	add	r2, r3
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	601a      	str	r2, [r3, #0]

	return Status;
 800bfa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3718      	adds	r7, #24
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}

0800bfb0 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b09a      	sub	sp, #104	; 0x68
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	60f8      	str	r0, [r7, #12]
 800bfb8:	60b9      	str	r1, [r7, #8]
 800bfba:	607a      	str	r2, [r7, #4]
 800bfbc:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800bfbe:	2312      	movs	r3, #18
 800bfc0:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800bfc2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bfc6:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800bfc8:	2342      	movs	r3, #66	; 0x42
 800bfca:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800bfcc:	2306      	movs	r3, #6
 800bfce:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800bfd0:	2307      	movs	r3, #7
 800bfd2:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
	dmaxCalRange_mm =
 800bfe0:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800bfe8:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800bfea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfee:	fb02 f303 	mul.w	r3, r2, r3
 800bff2:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800bff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bff6:	3380      	adds	r3, #128	; 0x80
 800bff8:	0a1b      	lsrs	r3, r3, #8
 800bffa:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800bffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bffe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c000:	fb02 f303 	mul.w	r3, r2, r3
 800c004:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800c006:	2300      	movs	r3, #0
 800c008:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d01a      	beq.n	800c046 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	029b      	lsls	r3, r3, #10
 800c014:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800c01a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c01c:	4413      	add	r3, r2
 800c01e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800c020:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	fbb2 f3f3 	udiv	r3, r2, r3
 800c028:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800c02a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c02c:	4613      	mov	r3, r2
 800c02e:	005b      	lsls	r3, r3, #1
 800c030:	4413      	add	r3, r2
 800c032:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800c034:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c036:	fb03 f303 	mul.w	r3, r3, r3
 800c03a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800c03c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c03e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c042:	0c1b      	lsrs	r3, r3, #16
 800c044:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c04a:	fb02 f303 	mul.w	r3, r2, r3
 800c04e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800c050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c052:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c056:	0c1b      	lsrs	r3, r3, #16
 800c058:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800c05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c05c:	fb03 f303 	mul.w	r3, r3, r3
 800c060:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800c062:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c064:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c068:	0c1b      	lsrs	r3, r3, #16
 800c06a:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800c06c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c06e:	085a      	lsrs	r2, r3, #1
 800c070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c072:	441a      	add	r2, r3
 800c074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c076:	fbb2 f3f3 	udiv	r3, r2, r3
 800c07a:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800c07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c07e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c080:	fb02 f303 	mul.w	r3, r2, r3
 800c084:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800c086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c08c:	d302      	bcc.n	800c094 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800c08e:	4b54      	ldr	r3, [pc, #336]	; (800c1e0 <VL53L0X_calc_dmax+0x230>)
 800c090:	663b      	str	r3, [r7, #96]	; 0x60
 800c092:	e015      	b.n	800c0c0 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800c094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c096:	085a      	lsrs	r2, r3, #1
 800c098:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c09a:	441a      	add	r2, r3
 800c09c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c09e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0a2:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800c0a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c0a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c0a8:	fb02 f303 	mul.w	r3, r2, r3
 800c0ac:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800c0ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c0b0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c0b4:	0c1b      	lsrs	r3, r3, #16
 800c0b6:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800c0b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c0ba:	fb03 f303 	mul.w	r3, r3, r3
 800c0be:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800c0c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0c2:	039b      	lsls	r3, r3, #14
 800c0c4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c0c8:	4a46      	ldr	r2, [pc, #280]	; (800c1e4 <VL53L0X_calc_dmax+0x234>)
 800c0ca:	fba2 2303 	umull	r2, r3, r2, r3
 800c0ce:	099b      	lsrs	r3, r3, #6
 800c0d0:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800c0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d4:	fb03 f303 	mul.w	r3, r3, r3
 800c0d8:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800c0da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0dc:	fb03 f303 	mul.w	r3, r3, r3
 800c0e0:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800c0e2:	6a3b      	ldr	r3, [r7, #32]
 800c0e4:	3308      	adds	r3, #8
 800c0e6:	091b      	lsrs	r3, r3, #4
 800c0e8:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800c0ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0ec:	6a3b      	ldr	r3, [r7, #32]
 800c0ee:	1ad3      	subs	r3, r2, r3
 800c0f0:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800c0f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0f4:	4613      	mov	r3, r2
 800c0f6:	005b      	lsls	r3, r3, #1
 800c0f8:	4413      	add	r3, r2
 800c0fa:	011b      	lsls	r3, r3, #4
 800c0fc:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800c0fe:	69fb      	ldr	r3, [r7, #28]
 800c100:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c104:	0b9b      	lsrs	r3, r3, #14
 800c106:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800c108:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c10a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c10c:	4413      	add	r3, r2
 800c10e:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800c110:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c112:	085b      	lsrs	r3, r3, #1
 800c114:	69ba      	ldr	r2, [r7, #24]
 800c116:	4413      	add	r3, r2
 800c118:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800c11a:	69ba      	ldr	r2, [r7, #24]
 800c11c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c11e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c122:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800c124:	69bb      	ldr	r3, [r7, #24]
 800c126:	039b      	lsls	r3, r3, #14
 800c128:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800c12a:	69fb      	ldr	r3, [r7, #28]
 800c12c:	085b      	lsrs	r3, r3, #1
 800c12e:	69ba      	ldr	r2, [r7, #24]
 800c130:	4413      	add	r3, r2
 800c132:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800c134:	69ba      	ldr	r2, [r7, #24]
 800c136:	69fb      	ldr	r3, [r7, #28]
 800c138:	fbb2 f3f3 	udiv	r3, r2, r3
 800c13c:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800c13e:	69bb      	ldr	r3, [r7, #24]
 800c140:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c142:	fb02 f303 	mul.w	r3, r2, r3
 800c146:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800c148:	69bb      	ldr	r3, [r7, #24]
 800c14a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c14e:	4a25      	ldr	r2, [pc, #148]	; (800c1e4 <VL53L0X_calc_dmax+0x234>)
 800c150:	fba2 2303 	umull	r2, r3, r2, r3
 800c154:	099b      	lsrs	r3, r3, #6
 800c156:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800c158:	69bb      	ldr	r3, [r7, #24]
 800c15a:	011b      	lsls	r3, r3, #4
 800c15c:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800c15e:	69bb      	ldr	r3, [r7, #24]
 800c160:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c164:	4a1f      	ldr	r2, [pc, #124]	; (800c1e4 <VL53L0X_calc_dmax+0x234>)
 800c166:	fba2 2303 	umull	r2, r3, r2, r3
 800c16a:	099b      	lsrs	r3, r3, #6
 800c16c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800c16e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c170:	3380      	adds	r3, #128	; 0x80
 800c172:	0a1b      	lsrs	r3, r3, #8
 800c174:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d008      	beq.n	800c18e <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	085a      	lsrs	r2, r3, #1
 800c180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c182:	441a      	add	r2, r3
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	fbb2 f3f3 	udiv	r3, r2, r3
 800c18a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c18c:	e001      	b.n	800c192 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800c18e:	2300      	movs	r3, #0
 800c190:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800c192:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c194:	f7fe f9b7 	bl	800a506 <VL53L0X_isqrt>
 800c198:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800c19a:	69bb      	ldr	r3, [r7, #24]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d008      	beq.n	800c1b2 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800c1a0:	69bb      	ldr	r3, [r7, #24]
 800c1a2:	085a      	lsrs	r2, r3, #1
 800c1a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1a6:	441a      	add	r2, r3
 800c1a8:	69bb      	ldr	r3, [r7, #24]
 800c1aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c1b0:	e001      	b.n	800c1b6 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800c1b6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c1b8:	f7fe f9a5 	bl	800a506 <VL53L0X_isqrt>
 800c1bc:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800c1be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c1c0:	693a      	ldr	r2, [r7, #16]
 800c1c2:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800c1c4:	693a      	ldr	r2, [r7, #16]
 800c1c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	d902      	bls.n	800c1d2 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800c1cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c1ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c1d0:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800c1d2:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	3768      	adds	r7, #104	; 0x68
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}
 800c1de:	bf00      	nop
 800c1e0:	fff00000 	.word	0xfff00000
 800c1e4:	10624dd3 	.word	0x10624dd3

0800c1e8 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b0b2      	sub	sp, #200	; 0xc8
 800c1ec:	af04      	add	r7, sp, #16
 800c1ee:	60f8      	str	r0, [r7, #12]
 800c1f0:	60b9      	str	r1, [r7, #8]
 800c1f2:	607a      	str	r2, [r7, #4]
 800c1f4:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800c1f6:	f44f 7348 	mov.w	r3, #800	; 0x320
 800c1fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800c1fe:	f44f 7316 	mov.w	r3, #600	; 0x258
 800c202:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800c206:	2342      	movs	r3, #66	; 0x42
 800c208:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800c20c:	f241 235c 	movw	r3, #4700	; 0x125c
 800c210:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800c214:	4b6b      	ldr	r3, [pc, #428]	; (800c3c4 <VL53L0X_calc_sigma_estimate+0x1dc>)
 800c216:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800c21a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800c21e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800c222:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800c226:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c22a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c22e:	67fb      	str	r3, [r7, #124]	; 0x7c
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800c230:	4b65      	ldr	r3, [pc, #404]	; (800c3c8 <VL53L0X_calc_sigma_estimate+0x1e0>)
 800c232:	67bb      	str	r3, [r7, #120]	; 0x78
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800c234:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c238:	677b      	str	r3, [r7, #116]	; 0x74
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800c23a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800c23e:	673b      	str	r3, [r7, #112]	; 0x70
	const uint32_t cPllPeriod_ps			= 1655;
 800c240:	f240 6377 	movw	r3, #1655	; 0x677
 800c244:	66fb      	str	r3, [r7, #108]	; 0x6c
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c246:	2300      	movs	r3, #0
 800c248:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
	 *	- SigmaEstEffAmbWidth
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	6a1b      	ldr	r3, [r3, #32]
 800c250:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	691b      	ldr	r3, [r3, #16]
 800c256:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c25a:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800c25e:	0c1b      	lsrs	r3, r3, #16
 800c260:	66bb      	str	r3, [r7, #104]	; 0x68

	correctedSignalRate_mcps =
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	68db      	ldr	r3, [r3, #12]
 800c266:	667b      	str	r3, [r7, #100]	; 0x64
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800c268:	f107 0310 	add.w	r3, r7, #16
 800c26c:	461a      	mov	r2, r3
 800c26e:	68b9      	ldr	r1, [r7, #8]
 800c270:	68f8      	ldr	r0, [r7, #12]
 800c272:	f7ff fe78 	bl	800bf66 <VL53L0X_get_total_signal_rate>
 800c276:	4603      	mov	r3, r0
 800c278:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800c27c:	f107 0314 	add.w	r3, r7, #20
 800c280:	461a      	mov	r2, r3
 800c282:	68b9      	ldr	r1, [r7, #8]
 800c284:	68f8      	ldr	r0, [r7, #12]
 800c286:	f7ff fe3f 	bl	800bf08 <VL53L0X_get_total_xtalk_rate>
 800c28a:	4603      	mov	r3, r0
 800c28c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c296:	fb02 f303 	mul.w	r3, r2, r3
 800c29a:	663b      	str	r3, [r7, #96]	; 0x60
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800c29c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c29e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c2a2:	0c1b      	lsrs	r3, r3, #16
 800c2a4:	663b      	str	r3, [r7, #96]	; 0x60

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c2ac:	fb02 f303 	mul.w	r3, r2, r3
 800c2b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800c2b4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800c2b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d902      	bls.n	800c2c4 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800c2be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c2c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	if (Status == VL53L0X_ERROR_NONE) {
 800c2c4:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d164      	bne.n	800c396 <VL53L0X_calc_sigma_estimate+0x1ae>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c2d2:	65fb      	str	r3, [r7, #92]	; 0x5c
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800c2da:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800c2de:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800c2e6:	68f8      	ldr	r0, [r7, #12]
 800c2e8:	f7fe feb0 	bl	800b04c <VL53L0X_calc_timeout_mclks>
 800c2ec:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c2f4:	653b      	str	r3, [r7, #80]	; 0x50
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800c2fc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800c300:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c304:	461a      	mov	r2, r3
 800c306:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c308:	68f8      	ldr	r0, [r7, #12]
 800c30a:	f7fe fe9f 	bl	800b04c <VL53L0X_calc_timeout_mclks>
 800c30e:	64b8      	str	r0, [r7, #72]	; 0x48
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800c310:	2303      	movs	r3, #3
 800c312:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		if (finalRangeVcselPCLKS == 8)
 800c316:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800c31a:	2b08      	cmp	r3, #8
 800c31c:	d102      	bne.n	800c324 <VL53L0X_calc_sigma_estimate+0x13c>
			vcselWidth = 2;
 800c31e:	2302      	movs	r3, #2
 800c320:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800c324:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c328:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800c32a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c32e:	fb02 f303 	mul.w	r3, r2, r3
 800c332:	02db      	lsls	r3, r3, #11
 800c334:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800c338:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c33c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c340:	4a22      	ldr	r2, [pc, #136]	; (800c3cc <VL53L0X_calc_sigma_estimate+0x1e4>)
 800c342:	fba2 2303 	umull	r2, r3, r2, r3
 800c346:	099b      	lsrs	r3, r3, #6
 800c348:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us *= cPllPeriod_ps;
 800c34c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c350:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c352:	fb02 f303 	mul.w	r3, r2, r3
 800c356:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800c35a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c35e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c362:	4a1a      	ldr	r2, [pc, #104]	; (800c3cc <VL53L0X_calc_sigma_estimate+0x1e4>)
 800c364:	fba2 2303 	umull	r2, r3, r2, r3
 800c368:	099b      	lsrs	r3, r3, #6
 800c36a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	3380      	adds	r3, #128	; 0x80
 800c372:	0a1b      	lsrs	r3, r3, #8
 800c374:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800c376:	693a      	ldr	r2, [r7, #16]
 800c378:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c37c:	fb02 f303 	mul.w	r3, r2, r3
 800c380:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800c384:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c388:	3380      	adds	r3, #128	; 0x80
 800c38a:	0a1b      	lsrs	r3, r3, #8
 800c38c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	021b      	lsls	r3, r3, #8
 800c394:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800c396:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d002      	beq.n	800c3a4 <VL53L0X_calc_sigma_estimate+0x1bc>
		LOG_FUNCTION_END(Status);
		return Status;
 800c39e:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800c3a2:	e127      	b.n	800c5f4 <VL53L0X_calc_sigma_estimate+0x40c>
	}

	if (peakSignalRate_kcps == 0) {
 800c3a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d112      	bne.n	800c3d0 <VL53L0X_calc_sigma_estimate+0x1e8>
		*pSigmaEstimate = cSigmaEstMax;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c3b0:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c3b8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		*pDmax_mm = 0;
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	601a      	str	r2, [r3, #0]
 800c3c2:	e115      	b.n	800c5f0 <VL53L0X_calc_sigma_estimate+0x408>
 800c3c4:	028f87ae 	.word	0x028f87ae
 800c3c8:	0006999a 	.word	0x0006999a
 800c3cc:	10624dd3 	.word	0x10624dd3
	} else {
		if (vcselTotalEventsRtn < 1)
 800c3d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d102      	bne.n	800c3de <VL53L0X_calc_sigma_estimate+0x1f6>
			vcselTotalEventsRtn = 1;
 800c3d8:	2301      	movs	r3, #1
 800c3da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		 * deltaT_ps represents the time of flight in pico secs for the
		 * current range measurement, using the "TOF per mm" constant
		 * (in ps).
		 */

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800c3de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c3e2:	647b      	str	r3, [r7, #68]	; 0x44

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800c3e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c3e6:	041a      	lsls	r2, r3, #16
 800c3e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c3ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800c3f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c3f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d902      	bls.n	800c402 <VL53L0X_calc_sigma_estimate+0x21a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800c3fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c3fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800c402:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c406:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800c40a:	fb02 f303 	mul.w	r3, r2, r3
 800c40e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800c412:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c416:	4613      	mov	r3, r2
 800c418:	005b      	lsls	r3, r3, #1
 800c41a:	4413      	add	r3, r2
 800c41c:	009b      	lsls	r3, r3, #2
 800c41e:	4618      	mov	r0, r3
 800c420:	f7fe f871 	bl	800a506 <VL53L0X_isqrt>
 800c424:	4603      	mov	r3, r0
 800c426:	005b      	lsls	r3, r3, #1
 800c428:	643b      	str	r3, [r7, #64]	; 0x40

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	891b      	ldrh	r3, [r3, #8]
 800c42e:	461a      	mov	r2, r3
 800c430:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c432:	fb02 f303 	mul.w	r3, r2, r3
 800c436:	63fb      	str	r3, [r7, #60]	; 0x3c
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800c438:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c43a:	041a      	lsls	r2, r3, #16
 800c43c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c440:	1ad3      	subs	r3, r2, r3
			xTalkCompRate_kcps) + 500)/1000;
 800c442:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800c446:	4a6d      	ldr	r2, [pc, #436]	; (800c5fc <VL53L0X_calc_sigma_estimate+0x414>)
 800c448:	fba2 2303 	umull	r2, r3, r2, r3
 800c44c:	099b      	lsrs	r3, r3, #6
 800c44e:	63bb      	str	r3, [r7, #56]	; 0x38

		/* vcselRate + xtalkCompRate */
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 800c450:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c452:	041a      	lsls	r2, r3, #16
 800c454:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c458:	4413      	add	r3, r2
			xTalkCompRate_kcps) + 500)/1000;
 800c45a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 800c45e:	4a67      	ldr	r2, [pc, #412]	; (800c5fc <VL53L0X_calc_sigma_estimate+0x414>)
 800c460:	fba2 2303 	umull	r2, r3, r2, r3
 800c464:	099b      	lsrs	r3, r3, #6
 800c466:	637b      	str	r3, [r7, #52]	; 0x34

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800c468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c46a:	021b      	lsls	r3, r3, #8
 800c46c:	63bb      	str	r3, [r7, #56]	; 0x38

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800c46e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c472:	fbb2 f3f3 	udiv	r3, r2, r3
 800c476:	2b00      	cmp	r3, #0
 800c478:	bfb8      	it	lt
 800c47a:	425b      	neglt	r3, r3
 800c47c:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800c47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c480:	021b      	lsls	r3, r3, #8
 800c482:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint1616/uint32 = FixPoint1616 */
		pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800c484:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c486:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c48a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c48e:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*
		 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
		 * values are small enough such that32 bits will not be
		 * exceeded.
		 */
		pwMult *= ((1 << 16) - xTalkCorrection);
 800c490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c492:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800c496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c498:	fb02 f303 	mul.w	r3, r2, r3
 800c49c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint3232 >> 16) = FixPoint1616 */
		pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800c49e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c4a2:	4413      	add	r3, r2
 800c4a4:	0c1b      	lsrs	r3, r3, #16
 800c4a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
		pwMult += (1 << 16);
 800c4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4aa:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c4ae:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*
		 * At this point the value will be 1.xx, therefore if we square
		 * the value this will exceed 32 bits. To address this perform
		 * a single shift to the right before the multiplication.
		 */
		pwMult >>= 1;
 800c4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b2:	085b      	lsrs	r3, r3, #1
 800c4b4:	62fb      	str	r3, [r7, #44]	; 0x2c
		/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
		pwMult = pwMult * pwMult;
 800c4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b8:	fb03 f303 	mul.w	r3, r3, r3
 800c4bc:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint3430 >> 14) = Fix1616 */
		pwMult >>= 14;
 800c4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c0:	0b9b      	lsrs	r3, r3, #14
 800c4c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800c4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c4c8:	fb02 f303 	mul.w	r3, r2, r3
 800c4cc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800c4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c4d4:	0c1b      	lsrs	r3, r3, #16
 800c4d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800c4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4da:	fb03 f303 	mul.w	r3, r3, r3
 800c4de:	62bb      	str	r3, [r7, #40]	; 0x28

		sqr2 = sigmaEstimateP2;
 800c4e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c4e4:	627b      	str	r3, [r7, #36]	; 0x24

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800c4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c4ec:	0c1b      	lsrs	r3, r3, #16
 800c4ee:	627b      	str	r3, [r7, #36]	; 0x24

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800c4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f2:	fb03 f303 	mul.w	r3, r3, r3
 800c4f6:	627b      	str	r3, [r7, #36]	; 0x24

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800c4f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4fc:	4413      	add	r3, r2
 800c4fe:	623b      	str	r3, [r7, #32]

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800c500:	6a38      	ldr	r0, [r7, #32]
 800c502:	f7fe f800 	bl	800a506 <VL53L0X_isqrt>
 800c506:	61f8      	str	r0, [r7, #28]

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800c508:	69fb      	ldr	r3, [r7, #28]
 800c50a:	041b      	lsls	r3, r3, #16
 800c50c:	61fb      	str	r3, [r7, #28]
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800c50e:	69fb      	ldr	r3, [r7, #28]
 800c510:	3332      	adds	r3, #50	; 0x32
 800c512:	4a3b      	ldr	r2, [pc, #236]	; (800c600 <VL53L0X_calc_sigma_estimate+0x418>)
 800c514:	fba2 2303 	umull	r2, r3, r2, r3
 800c518:	095a      	lsrs	r2, r3, #5
 800c51a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c51c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c520:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800c524:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c528:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800c52c:	fb02 f303 	mul.w	r3, r2, r3
 800c530:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800c534:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c538:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800c53c:	3308      	adds	r3, #8
 800c53e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		sigmaEstRtn		 /= 10000;
 800c542:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c546:	4a2f      	ldr	r2, [pc, #188]	; (800c604 <VL53L0X_calc_sigma_estimate+0x41c>)
 800c548:	fba2 2303 	umull	r2, r3, r2, r3
 800c54c:	0b5b      	lsrs	r3, r3, #13
 800c54e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800c552:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c556:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d903      	bls.n	800c566 <VL53L0X_calc_sigma_estimate+0x37e>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800c55e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c562:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800c566:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c56a:	fb03 f303 	mul.w	r3, r3, r3
 800c56e:	62bb      	str	r3, [r7, #40]	; 0x28
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = cSigmaEstRef * cSigmaEstRef;
 800c570:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c574:	fb03 f303 	mul.w	r3, r3, r3
 800c578:	627b      	str	r3, [r7, #36]	; 0x24

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800c57a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c57e:	4413      	add	r3, r2
 800c580:	4618      	mov	r0, r3
 800c582:	f7fd ffc0 	bl	800a506 <VL53L0X_isqrt>
 800c586:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800c588:	69bb      	ldr	r3, [r7, #24]
 800c58a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c58e:	fb02 f303 	mul.w	r3, r2, r3
 800c592:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800c596:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d009      	beq.n	800c5b0 <VL53L0X_calc_sigma_estimate+0x3c8>
 800c59c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d005      	beq.n	800c5b0 <VL53L0X_calc_sigma_estimate+0x3c8>
 800c5a4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c5a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d903      	bls.n	800c5b8 <VL53L0X_calc_sigma_estimate+0x3d0>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800c5b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c5b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c5be:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681a      	ldr	r2, [r3, #0]
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		Status = VL53L0X_calc_dmax(
 800c5ca:	6939      	ldr	r1, [r7, #16]
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	9303      	str	r3, [sp, #12]
 800c5d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c5d4:	9302      	str	r3, [sp, #8]
 800c5d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c5da:	9301      	str	r3, [sp, #4]
 800c5dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5de:	9300      	str	r3, [sp, #0]
 800c5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c5e4:	68f8      	ldr	r0, [r7, #12]
 800c5e6:	f7ff fce3 	bl	800bfb0 <VL53L0X_calc_dmax>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c5f0:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	37b8      	adds	r7, #184	; 0xb8
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}
 800c5fc:	10624dd3 	.word	0x10624dd3
 800c600:	51eb851f 	.word	0x51eb851f
 800c604:	d1b71759 	.word	0xd1b71759

0800c608 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b090      	sub	sp, #64	; 0x40
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	60f8      	str	r0, [r7, #12]
 800c610:	607a      	str	r2, [r7, #4]
 800c612:	461a      	mov	r2, r3
 800c614:	460b      	mov	r3, r1
 800c616:	72fb      	strb	r3, [r7, #11]
 800c618:	4613      	mov	r3, r2
 800c61a:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c61c:	2300      	movs	r3, #0
 800c61e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800c622:	2300      	movs	r3, #0
 800c624:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800c628:	2300      	movs	r3, #0
 800c62a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800c62e:	2300      	movs	r3, #0
 800c630:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800c634:	2300      	movs	r3, #0
 800c636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800c63a:	2300      	movs	r3, #0
 800c63c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800c640:	2300      	movs	r3, #0
 800c642:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800c646:	2300      	movs	r3, #0
 800c648:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800c64c:	2300      	movs	r3, #0
 800c64e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800c652:	2300      	movs	r3, #0
 800c654:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800c656:	2300      	movs	r3, #0
 800c658:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800c65a:	7afb      	ldrb	r3, [r7, #11]
 800c65c:	10db      	asrs	r3, r3, #3
 800c65e:	b2db      	uxtb	r3, r3
 800c660:	f003 030f 	and.w	r3, r3, #15
 800c664:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800c668:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d017      	beq.n	800c6a0 <VL53L0X_get_pal_range_status+0x98>
 800c670:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c674:	2b05      	cmp	r3, #5
 800c676:	d013      	beq.n	800c6a0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800c678:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c67c:	2b07      	cmp	r3, #7
 800c67e:	d00f      	beq.n	800c6a0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800c680:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c684:	2b0c      	cmp	r3, #12
 800c686:	d00b      	beq.n	800c6a0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800c688:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c68c:	2b0d      	cmp	r3, #13
 800c68e:	d007      	beq.n	800c6a0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800c690:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c694:	2b0e      	cmp	r3, #14
 800c696:	d003      	beq.n	800c6a0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800c698:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c69c:	2b0f      	cmp	r3, #15
 800c69e:	d103      	bne.n	800c6a8 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800c6a6:	e002      	b.n	800c6ae <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	}

	/* LastSignalRefMcps */
	if (Status == VL53L0X_ERROR_NONE)
 800c6ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d107      	bne.n	800c6c6 <VL53L0X_get_pal_range_status+0xbe>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	21ff      	movs	r1, #255	; 0xff
 800c6ba:	68f8      	ldr	r0, [r7, #12]
 800c6bc:	f000 fb74 	bl	800cda8 <VL53L0X_WrByte>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status == VL53L0X_ERROR_NONE)
 800c6c6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d109      	bne.n	800c6e2 <VL53L0X_get_pal_range_status+0xda>
		Status = VL53L0X_RdWord(Dev,
 800c6ce:	f107 0316 	add.w	r3, r7, #22
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	21b6      	movs	r1, #182	; 0xb6
 800c6d6:	68f8      	ldr	r0, [r7, #12]
 800c6d8:	f000 faf2 	bl	800ccc0 <VL53L0X_RdWord>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			&tmpWord);

	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800c6e2:	8afb      	ldrh	r3, [r7, #22]
 800c6e4:	025b      	lsls	r3, r3, #9
 800c6e6:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (Status == VL53L0X_ERROR_NONE)
 800c6e8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d107      	bne.n	800c700 <VL53L0X_get_pal_range_status+0xf8>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	21ff      	movs	r1, #255	; 0xff
 800c6f4:	68f8      	ldr	r0, [r7, #12]
 800c6f6:	f000 fb57 	bl	800cda8 <VL53L0X_WrByte>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c704:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800c708:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d109      	bne.n	800c724 <VL53L0X_get_pal_range_status+0x11c>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c710:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800c714:	461a      	mov	r2, r3
 800c716:	2100      	movs	r1, #0
 800c718:	68f8      	ldr	r0, [r7, #12]
 800c71a:	f7fc fa2f 	bl	8008b7c <VL53L0X_GetLimitCheckEnable>
 800c71e:	4603      	mov	r3, r0
 800c720:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800c724:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d02e      	beq.n	800c78a <VL53L0X_get_pal_range_status+0x182>
 800c72c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c730:	2b00      	cmp	r3, #0
 800c732:	d12a      	bne.n	800c78a <VL53L0X_get_pal_range_status+0x182>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800c734:	f107 0310 	add.w	r3, r7, #16
 800c738:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c73c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c73e:	68f8      	ldr	r0, [r7, #12]
 800c740:	f7ff fd52 	bl	800c1e8 <VL53L0X_calc_sigma_estimate>
 800c744:	4603      	mov	r3, r0
 800c746:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800c74a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d103      	bne.n	800c75a <VL53L0X_get_pal_range_status+0x152>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	b29a      	uxth	r2, r3
 800c756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c758:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800c75a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d113      	bne.n	800c78a <VL53L0X_get_pal_range_status+0x182>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800c762:	f107 0320 	add.w	r3, r7, #32
 800c766:	461a      	mov	r2, r3
 800c768:	2100      	movs	r1, #0
 800c76a:	68f8      	ldr	r0, [r7, #12]
 800c76c:	f7fc fa8c 	bl	8008c88 <VL53L0X_GetLimitCheckValue>
 800c770:	4603      	mov	r3, r0
 800c772:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800c776:	6a3b      	ldr	r3, [r7, #32]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d006      	beq.n	800c78a <VL53L0X_get_pal_range_status+0x182>
				(SigmaEstimate > SigmaLimitValue))
 800c77c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c77e:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800c780:	429a      	cmp	r2, r3
 800c782:	d902      	bls.n	800c78a <VL53L0X_get_pal_range_status+0x182>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800c784:	2301      	movs	r3, #1
 800c786:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800c78a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d109      	bne.n	800c7a6 <VL53L0X_get_pal_range_status+0x19e>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c792:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800c796:	461a      	mov	r2, r3
 800c798:	2102      	movs	r1, #2
 800c79a:	68f8      	ldr	r0, [r7, #12]
 800c79c:	f7fc f9ee 	bl	8008b7c <VL53L0X_GetLimitCheckEnable>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800c7a6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d017      	beq.n	800c7de <VL53L0X_get_pal_range_status+0x1d6>
 800c7ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d113      	bne.n	800c7de <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800c7b6:	f107 031c 	add.w	r3, r7, #28
 800c7ba:	461a      	mov	r2, r3
 800c7bc:	2102      	movs	r1, #2
 800c7be:	68f8      	ldr	r0, [r7, #12]
 800c7c0:	f7fc fa62 	bl	8008c88 <VL53L0X_GetLimitCheckValue>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		if ((SignalRefClipValue > 0) &&
 800c7ca:	69fb      	ldr	r3, [r7, #28]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d006      	beq.n	800c7de <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800c7d0:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800c7d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d902      	bls.n	800c7de <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800c7d8:	2301      	movs	r3, #1
 800c7da:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800c7de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d109      	bne.n	800c7fa <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c7e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c7ea:	461a      	mov	r2, r3
 800c7ec:	2103      	movs	r1, #3
 800c7ee:	68f8      	ldr	r0, [r7, #12]
 800c7f0:	f7fc f9c4 	bl	8008b7c <VL53L0X_GetLimitCheckEnable>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800c7fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d023      	beq.n	800c84a <VL53L0X_get_pal_range_status+0x242>
 800c802:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c806:	2b00      	cmp	r3, #0
 800c808:	d11f      	bne.n	800c84a <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800c80a:	893b      	ldrh	r3, [r7, #8]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d102      	bne.n	800c816 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800c810:	2300      	movs	r3, #0
 800c812:	637b      	str	r3, [r7, #52]	; 0x34
 800c814:	e005      	b.n	800c822 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	021a      	lsls	r2, r3, #8
 800c81a:	893b      	ldrh	r3, [r7, #8]
 800c81c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c820:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800c822:	f107 0318 	add.w	r3, r7, #24
 800c826:	461a      	mov	r2, r3
 800c828:	2103      	movs	r1, #3
 800c82a:	68f8      	ldr	r0, [r7, #12]
 800c82c:	f7fc fa2c 	bl	8008c88 <VL53L0X_GetLimitCheckValue>
 800c830:	4603      	mov	r3, r0
 800c832:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800c836:	69bb      	ldr	r3, [r7, #24]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d006      	beq.n	800c84a <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800c83c:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800c83e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c840:	429a      	cmp	r2, r3
 800c842:	d202      	bcs.n	800c84a <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800c844:	2301      	movs	r3, #1
 800c846:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c84a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d14a      	bne.n	800c8e8 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800c852:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800c856:	2b01      	cmp	r3, #1
 800c858:	d103      	bne.n	800c862 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800c85a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c85c:	22ff      	movs	r2, #255	; 0xff
 800c85e:	701a      	strb	r2, [r3, #0]
 800c860:	e042      	b.n	800c8e8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800c862:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c866:	2b01      	cmp	r3, #1
 800c868:	d007      	beq.n	800c87a <VL53L0X_get_pal_range_status+0x272>
 800c86a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c86e:	2b02      	cmp	r3, #2
 800c870:	d003      	beq.n	800c87a <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800c872:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c876:	2b03      	cmp	r3, #3
 800c878:	d103      	bne.n	800c882 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800c87a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c87c:	2205      	movs	r2, #5
 800c87e:	701a      	strb	r2, [r3, #0]
 800c880:	e032      	b.n	800c8e8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800c882:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c886:	2b06      	cmp	r3, #6
 800c888:	d003      	beq.n	800c892 <VL53L0X_get_pal_range_status+0x28a>
 800c88a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c88e:	2b09      	cmp	r3, #9
 800c890:	d103      	bne.n	800c89a <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800c892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c894:	2204      	movs	r2, #4
 800c896:	701a      	strb	r2, [r3, #0]
 800c898:	e026      	b.n	800c8e8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800c89a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c89e:	2b08      	cmp	r3, #8
 800c8a0:	d007      	beq.n	800c8b2 <VL53L0X_get_pal_range_status+0x2aa>
 800c8a2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c8a6:	2b0a      	cmp	r3, #10
 800c8a8:	d003      	beq.n	800c8b2 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800c8aa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c8ae:	2b01      	cmp	r3, #1
 800c8b0:	d103      	bne.n	800c8ba <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800c8b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8b4:	2203      	movs	r2, #3
 800c8b6:	701a      	strb	r2, [r3, #0]
 800c8b8:	e016      	b.n	800c8e8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800c8ba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c8be:	2b04      	cmp	r3, #4
 800c8c0:	d003      	beq.n	800c8ca <VL53L0X_get_pal_range_status+0x2c2>
 800c8c2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c8c6:	2b01      	cmp	r3, #1
 800c8c8:	d103      	bne.n	800c8d2 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800c8ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8cc:	2202      	movs	r2, #2
 800c8ce:	701a      	strb	r2, [r3, #0]
 800c8d0:	e00a      	b.n	800c8e8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800c8d2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800c8d6:	2b01      	cmp	r3, #1
 800c8d8:	d103      	bne.n	800c8e2 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800c8da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8dc:	2201      	movs	r2, #1
 800c8de:	701a      	strb	r2, [r3, #0]
 800c8e0:	e002      	b.n	800c8e8 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800c8e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800c8e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d102      	bne.n	800c8f6 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800c8f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c8f6:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800c8fa:	461a      	mov	r2, r3
 800c8fc:	2101      	movs	r1, #1
 800c8fe:	68f8      	ldr	r0, [r7, #12]
 800c900:	f7fc f93c 	bl	8008b7c <VL53L0X_GetLimitCheckEnable>
 800c904:	4603      	mov	r3, r0
 800c906:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800c90a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d14f      	bne.n	800c9b2 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800c912:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c916:	2b00      	cmp	r3, #0
 800c918:	d003      	beq.n	800c922 <VL53L0X_get_pal_range_status+0x31a>
 800c91a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800c91e:	2b01      	cmp	r3, #1
 800c920:	d103      	bne.n	800c92a <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800c922:	2301      	movs	r3, #1
 800c924:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c928:	e002      	b.n	800c930 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800c92a:	2300      	movs	r3, #0
 800c92c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800c936:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800c93a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c93e:	2b04      	cmp	r3, #4
 800c940:	d003      	beq.n	800c94a <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800c942:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800c946:	2b00      	cmp	r3, #0
 800c948:	d103      	bne.n	800c952 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800c94a:	2301      	movs	r3, #1
 800c94c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c950:	e002      	b.n	800c958 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800c952:	2300      	movs	r3, #0
 800c954:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800c95e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800c962:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800c966:	2b00      	cmp	r3, #0
 800c968:	d003      	beq.n	800c972 <VL53L0X_get_pal_range_status+0x36a>
 800c96a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c96e:	2b01      	cmp	r3, #1
 800c970:	d103      	bne.n	800c97a <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800c972:	2301      	movs	r3, #1
 800c974:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c978:	e002      	b.n	800c980 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800c97a:	2300      	movs	r3, #0
 800c97c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800c986:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800c98a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d003      	beq.n	800c99a <VL53L0X_get_pal_range_status+0x392>
 800c992:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c996:	2b01      	cmp	r3, #1
 800c998:	d103      	bne.n	800c9a2 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800c99a:	2301      	movs	r3, #1
 800c99c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9a0:	e002      	b.n	800c9a8 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800c9ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c9b2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3740      	adds	r7, #64	; 0x40
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}

0800c9be <VL53L0X_check_part_used>:


VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
		uint8_t *Revision,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 800c9be:	b580      	push	{r7, lr}
 800c9c0:	b086      	sub	sp, #24
 800c9c2:	af00      	add	r7, sp, #0
 800c9c4:	60f8      	str	r0, [r7, #12]
 800c9c6:	60b9      	str	r1, [r7, #8]
 800c9c8:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	75fb      	strb	r3, [r7, #23]
	uint8_t ModuleIdInt;
	char *ProductId_tmp;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 2);
 800c9ce:	2102      	movs	r1, #2
 800c9d0:	68f8      	ldr	r0, [r7, #12]
 800c9d2:	f7fd fe0d 	bl	800a5f0 <VL53L0X_get_info_from_device>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE) {
 800c9da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d11c      	bne.n	800ca1c <VL53L0X_check_part_used+0x5e>
		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 800c9e8:	75bb      	strb	r3, [r7, #22]

	if (ModuleIdInt == 0) {
 800c9ea:	7dbb      	ldrb	r3, [r7, #22]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d107      	bne.n	800ca00 <VL53L0X_check_part_used+0x42>
		*Revision = 0;
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	701a      	strb	r2, [r3, #0]
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	3340      	adds	r3, #64	; 0x40
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	701a      	strb	r2, [r3, #0]
 800c9fe:	e00d      	b.n	800ca1c <VL53L0X_check_part_used+0x5e>
	} else {
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	701a      	strb	r2, [r3, #0]
		ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	33f3      	adds	r3, #243	; 0xf3
 800ca0e:	613b      	str	r3, [r7, #16]
			ProductId);
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	3340      	adds	r3, #64	; 0x40
 800ca14:	6939      	ldr	r1, [r7, #16]
 800ca16:	4618      	mov	r0, r3
 800ca18:	f006 ff9c 	bl	8013954 <strcpy>
	}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ca1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3718      	adds	r7, #24
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}

0800ca28 <VL53L0X_get_device_info>:


VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 800ca28:	b5b0      	push	{r4, r5, r7, lr}
 800ca2a:	b084      	sub	sp, #16
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ca32:	2300      	movs	r3, #0
 800ca34:	73fb      	strb	r3, [r7, #15]
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 800ca36:	f107 030d 	add.w	r3, r7, #13
 800ca3a:	683a      	ldr	r2, [r7, #0]
 800ca3c:	4619      	mov	r1, r3
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f7ff ffbd 	bl	800c9be <VL53L0X_check_part_used>
 800ca44:	4603      	mov	r3, r0
 800ca46:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE) {
 800ca48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d13b      	bne.n	800cac8 <VL53L0X_get_device_info+0xa0>
		if (Revision == 0) {
 800ca50:	7b7b      	ldrb	r3, [r7, #13]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d108      	bne.n	800ca68 <VL53L0X_get_device_info+0x40>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	4a30      	ldr	r2, [pc, #192]	; (800cb1c <VL53L0X_get_device_info+0xf4>)
 800ca5a:	461c      	mov	r4, r3
 800ca5c:	4613      	mov	r3, r2
 800ca5e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ca60:	6020      	str	r0, [r4, #0]
 800ca62:	6061      	str	r1, [r4, #4]
 800ca64:	60a2      	str	r2, [r4, #8]
 800ca66:	e027      	b.n	800cab8 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS0);
		} else if ((Revision <= 34) && (Revision != 32)) {
 800ca68:	7b7b      	ldrb	r3, [r7, #13]
 800ca6a:	2b22      	cmp	r3, #34	; 0x22
 800ca6c:	d80b      	bhi.n	800ca86 <VL53L0X_get_device_info+0x5e>
 800ca6e:	7b7b      	ldrb	r3, [r7, #13]
 800ca70:	2b20      	cmp	r3, #32
 800ca72:	d008      	beq.n	800ca86 <VL53L0X_get_device_info+0x5e>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	4a2a      	ldr	r2, [pc, #168]	; (800cb20 <VL53L0X_get_device_info+0xf8>)
 800ca78:	461c      	mov	r4, r3
 800ca7a:	4613      	mov	r3, r2
 800ca7c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ca7e:	6020      	str	r0, [r4, #0]
 800ca80:	6061      	str	r1, [r4, #4]
 800ca82:	60a2      	str	r2, [r4, #8]
 800ca84:	e018      	b.n	800cab8 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
		} else if (Revision < 39) {
 800ca86:	7b7b      	ldrb	r3, [r7, #13]
 800ca88:	2b26      	cmp	r3, #38	; 0x26
 800ca8a:	d808      	bhi.n	800ca9e <VL53L0X_get_device_info+0x76>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	4a25      	ldr	r2, [pc, #148]	; (800cb24 <VL53L0X_get_device_info+0xfc>)
 800ca90:	461c      	mov	r4, r3
 800ca92:	4613      	mov	r3, r2
 800ca94:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ca96:	6020      	str	r0, [r4, #0]
 800ca98:	6061      	str	r1, [r4, #4]
 800ca9a:	60a2      	str	r2, [r4, #8]
 800ca9c:	e00c      	b.n	800cab8 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
		} else {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	4a21      	ldr	r2, [pc, #132]	; (800cb28 <VL53L0X_get_device_info+0x100>)
 800caa2:	461d      	mov	r5, r3
 800caa4:	4614      	mov	r4, r2
 800caa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800caa8:	6028      	str	r0, [r5, #0]
 800caaa:	6069      	str	r1, [r5, #4]
 800caac:	60aa      	str	r2, [r5, #8]
 800caae:	60eb      	str	r3, [r5, #12]
 800cab0:	6820      	ldr	r0, [r4, #0]
 800cab2:	6128      	str	r0, [r5, #16]
 800cab4:	7923      	ldrb	r3, [r4, #4]
 800cab6:	752b      	strb	r3, [r5, #20]
					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
		}

		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	3320      	adds	r3, #32
 800cabc:	491b      	ldr	r1, [pc, #108]	; (800cb2c <VL53L0X_get_device_info+0x104>)
 800cabe:	461a      	mov	r2, r3
 800cac0:	460b      	mov	r3, r1
 800cac2:	cb03      	ldmia	r3!, {r0, r1}
 800cac4:	6010      	str	r0, [r2, #0]
 800cac6:	6051      	str	r1, [r2, #4]
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800cac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d108      	bne.n	800cae2 <VL53L0X_get_device_info+0xba>
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	3360      	adds	r3, #96	; 0x60
 800cad4:	461a      	mov	r2, r3
 800cad6:	21c0      	movs	r1, #192	; 0xc0
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f000 f86a 	bl	800cbb2 <VL53L0X_RdByte>
 800cade:	4603      	mov	r3, r0
 800cae0:	73fb      	strb	r3, [r7, #15]
				&pVL53L0X_DeviceInfo->ProductType);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800cae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d112      	bne.n	800cb10 <VL53L0X_get_device_info+0xe8>
		Status = VL53L0X_RdByte(Dev,
 800caea:	f107 030e 	add.w	r3, r7, #14
 800caee:	461a      	mov	r2, r3
 800caf0:	21c2      	movs	r1, #194	; 0xc2
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f000 f85d 	bl	800cbb2 <VL53L0X_RdByte>
 800caf8:	4603      	mov	r3, r0
 800cafa:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	2201      	movs	r2, #1
 800cb00:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
					(revision_id & 0xF0) >> 4;
 800cb04:	7bbb      	ldrb	r3, [r7, #14]
 800cb06:	091b      	lsrs	r3, r3, #4
 800cb08:	b2da      	uxtb	r2, r3
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	}

	return Status;
 800cb10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3710      	adds	r7, #16
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bdb0      	pop	{r4, r5, r7, pc}
 800cb1c:	080165ec 	.word	0x080165ec
 800cb20:	080165f8 	.word	0x080165f8
 800cb24:	08016604 	.word	0x08016604
 800cb28:	08016610 	.word	0x08016610
 800cb2c:	08016628 	.word	0x08016628

0800cb30 <_I2CWrite>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
    
int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b088      	sub	sp, #32
 800cb34:	af02      	add	r7, sp, #8
 800cb36:	60f8      	str	r0, [r7, #12]
 800cb38:	60b9      	str	r1, [r7, #8]
 800cb3a:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	330a      	adds	r3, #10
 800cb40:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800cb4e:	b299      	uxth	r1, r3
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	b29a      	uxth	r2, r3
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	9300      	str	r3, [sp, #0]
 800cb58:	4613      	mov	r3, r2
 800cb5a:	68ba      	ldr	r2, [r7, #8]
 800cb5c:	f001 fde4 	bl	800e728 <HAL_I2C_Master_Transmit>
 800cb60:	4603      	mov	r3, r0
 800cb62:	613b      	str	r3, [r7, #16]
    
    return status;
 800cb64:	693b      	ldr	r3, [r7, #16]
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3718      	adds	r7, #24
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}

0800cb6e <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800cb6e:	b580      	push	{r7, lr}
 800cb70:	b088      	sub	sp, #32
 800cb72:	af02      	add	r7, sp, #8
 800cb74:	60f8      	str	r0, [r7, #12]
 800cb76:	60b9      	str	r1, [r7, #8]
 800cb78:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	330a      	adds	r3, #10
 800cb7e:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800cb8c:	f043 0301 	orr.w	r3, r3, #1
 800cb90:	b2db      	uxtb	r3, r3
 800cb92:	b299      	uxth	r1, r3
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	b29a      	uxth	r2, r3
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	9300      	str	r3, [sp, #0]
 800cb9c:	4613      	mov	r3, r2
 800cb9e:	68ba      	ldr	r2, [r7, #8]
 800cba0:	f001 feb6 	bl	800e910 <HAL_I2C_Master_Receive>
 800cba4:	4603      	mov	r3, r0
 800cba6:	613b      	str	r3, [r7, #16]
    
    return status;
 800cba8:	693b      	ldr	r3, [r7, #16]
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3718      	adds	r7, #24
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}

0800cbb2 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800cbb2:	b580      	push	{r7, lr}
 800cbb4:	b086      	sub	sp, #24
 800cbb6:	af00      	add	r7, sp, #0
 800cbb8:	60f8      	str	r0, [r7, #12]
 800cbba:	460b      	mov	r3, r1
 800cbbc:	607a      	str	r2, [r7, #4]
 800cbbe:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800cbc4:	f107 030b 	add.w	r3, r7, #11
 800cbc8:	2201      	movs	r2, #1
 800cbca:	4619      	mov	r1, r3
 800cbcc:	68f8      	ldr	r0, [r7, #12]
 800cbce:	f7ff ffaf 	bl	800cb30 <_I2CWrite>
 800cbd2:	6138      	str	r0, [r7, #16]
    
    if( status_int ){
 800cbd4:	693b      	ldr	r3, [r7, #16]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d002      	beq.n	800cbe0 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cbda:	23ec      	movs	r3, #236	; 0xec
 800cbdc:	75fb      	strb	r3, [r7, #23]
        goto done;
 800cbde:	e00c      	b.n	800cbfa <VL53L0X_RdByte+0x48>
    }
    
    status_int = _I2CRead(Dev, data, 1);
 800cbe0:	2201      	movs	r2, #1
 800cbe2:	6879      	ldr	r1, [r7, #4]
 800cbe4:	68f8      	ldr	r0, [r7, #12]
 800cbe6:	f7ff ffc2 	bl	800cb6e <_I2CRead>
 800cbea:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d002      	beq.n	800cbf8 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cbf2:	23ec      	movs	r3, #236	; 0xec
 800cbf4:	75fb      	strb	r3, [r7, #23]
 800cbf6:	e000      	b.n	800cbfa <VL53L0X_RdByte+0x48>
    }
done:
 800cbf8:	bf00      	nop
    return Status;
 800cbfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3718      	adds	r7, #24
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}
	...

0800cc08 <VL53L0X_WriteMulti>:

uint8_t _I2CBuffer[64];


// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b086      	sub	sp, #24
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	60f8      	str	r0, [r7, #12]
 800cc10:	607a      	str	r2, [r7, #4]
 800cc12:	603b      	str	r3, [r7, #0]
 800cc14:	460b      	mov	r3, r1
 800cc16:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	75fb      	strb	r3, [r7, #23]
    
    if (count > sizeof(_I2CBuffer) - 1) {
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	2b3f      	cmp	r3, #63	; 0x3f
 800cc20:	d902      	bls.n	800cc28 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800cc22:	f06f 0303 	mvn.w	r3, #3
 800cc26:	e016      	b.n	800cc56 <VL53L0X_WriteMulti+0x4e>
    }
    
    _I2CBuffer[0] = index;
 800cc28:	4a0d      	ldr	r2, [pc, #52]	; (800cc60 <VL53L0X_WriteMulti+0x58>)
 800cc2a:	7afb      	ldrb	r3, [r7, #11]
 800cc2c:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800cc2e:	683a      	ldr	r2, [r7, #0]
 800cc30:	6879      	ldr	r1, [r7, #4]
 800cc32:	480c      	ldr	r0, [pc, #48]	; (800cc64 <VL53L0X_WriteMulti+0x5c>)
 800cc34:	f006 f94c 	bl	8012ed0 <memcpy>
    
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	3301      	adds	r3, #1
 800cc3c:	461a      	mov	r2, r3
 800cc3e:	4908      	ldr	r1, [pc, #32]	; (800cc60 <VL53L0X_WriteMulti+0x58>)
 800cc40:	68f8      	ldr	r0, [r7, #12]
 800cc42:	f7ff ff75 	bl	800cb30 <_I2CWrite>
 800cc46:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d001      	beq.n	800cc52 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cc4e:	23ec      	movs	r3, #236	; 0xec
 800cc50:	75fb      	strb	r3, [r7, #23]
    }
    
    return Status;
 800cc52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3718      	adds	r7, #24
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}
 800cc5e:	bf00      	nop
 800cc60:	20002ca4 	.word	0x20002ca4
 800cc64:	20002ca5 	.word	0x20002ca5

0800cc68 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b086      	sub	sp, #24
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	60f8      	str	r0, [r7, #12]
 800cc70:	607a      	str	r2, [r7, #4]
 800cc72:	603b      	str	r3, [r7, #0]
 800cc74:	460b      	mov	r3, r1
 800cc76:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    
    status_int = _I2CWrite(Dev, &index, 1);
 800cc7c:	f107 030b 	add.w	r3, r7, #11
 800cc80:	2201      	movs	r2, #1
 800cc82:	4619      	mov	r1, r3
 800cc84:	68f8      	ldr	r0, [r7, #12]
 800cc86:	f7ff ff53 	bl	800cb30 <_I2CWrite>
 800cc8a:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800cc8c:	693b      	ldr	r3, [r7, #16]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d002      	beq.n	800cc98 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cc92:	23ec      	movs	r3, #236	; 0xec
 800cc94:	75fb      	strb	r3, [r7, #23]
        goto done;
 800cc96:	e00c      	b.n	800ccb2 <VL53L0X_ReadMulti+0x4a>
    }
    
    status_int = _I2CRead(Dev, pdata, count);
 800cc98:	683a      	ldr	r2, [r7, #0]
 800cc9a:	6879      	ldr	r1, [r7, #4]
 800cc9c:	68f8      	ldr	r0, [r7, #12]
 800cc9e:	f7ff ff66 	bl	800cb6e <_I2CRead>
 800cca2:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800cca4:	693b      	ldr	r3, [r7, #16]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d002      	beq.n	800ccb0 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ccaa:	23ec      	movs	r3, #236	; 0xec
 800ccac:	75fb      	strb	r3, [r7, #23]
 800ccae:	e000      	b.n	800ccb2 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800ccb0:	bf00      	nop
    return Status;
 800ccb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3718      	adds	r7, #24
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}
	...

0800ccc0 <VL53L0X_RdWord>:


VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b086      	sub	sp, #24
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	60f8      	str	r0, [r7, #12]
 800ccc8:	460b      	mov	r3, r1
 800ccca:	607a      	str	r2, [r7, #4]
 800cccc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800ccd2:	f107 030b 	add.w	r3, r7, #11
 800ccd6:	2201      	movs	r2, #1
 800ccd8:	4619      	mov	r1, r3
 800ccda:	68f8      	ldr	r0, [r7, #12]
 800ccdc:	f7ff ff28 	bl	800cb30 <_I2CWrite>
 800cce0:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800cce2:	693b      	ldr	r3, [r7, #16]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d002      	beq.n	800ccee <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cce8:	23ec      	movs	r3, #236	; 0xec
 800ccea:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ccec:	e017      	b.n	800cd1e <VL53L0X_RdWord+0x5e>
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800ccee:	2202      	movs	r2, #2
 800ccf0:	490e      	ldr	r1, [pc, #56]	; (800cd2c <VL53L0X_RdWord+0x6c>)
 800ccf2:	68f8      	ldr	r0, [r7, #12]
 800ccf4:	f7ff ff3b 	bl	800cb6e <_I2CRead>
 800ccf8:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d002      	beq.n	800cd06 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cd00:	23ec      	movs	r3, #236	; 0xec
 800cd02:	75fb      	strb	r3, [r7, #23]
        goto done;
 800cd04:	e00b      	b.n	800cd1e <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800cd06:	4b09      	ldr	r3, [pc, #36]	; (800cd2c <VL53L0X_RdWord+0x6c>)
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	b29b      	uxth	r3, r3
 800cd0c:	021b      	lsls	r3, r3, #8
 800cd0e:	b29a      	uxth	r2, r3
 800cd10:	4b06      	ldr	r3, [pc, #24]	; (800cd2c <VL53L0X_RdWord+0x6c>)
 800cd12:	785b      	ldrb	r3, [r3, #1]
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	4413      	add	r3, r2
 800cd18:	b29a      	uxth	r2, r3
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	801a      	strh	r2, [r3, #0]
done:
    return Status;
 800cd1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	3718      	adds	r7, #24
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	bf00      	nop
 800cd2c:	20002ca4 	.word	0x20002ca4

0800cd30 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b086      	sub	sp, #24
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	60f8      	str	r0, [r7, #12]
 800cd38:	460b      	mov	r3, r1
 800cd3a:	607a      	str	r2, [r7, #4]
 800cd3c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800cd42:	f107 030b 	add.w	r3, r7, #11
 800cd46:	2201      	movs	r2, #1
 800cd48:	4619      	mov	r1, r3
 800cd4a:	68f8      	ldr	r0, [r7, #12]
 800cd4c:	f7ff fef0 	bl	800cb30 <_I2CWrite>
 800cd50:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d002      	beq.n	800cd5e <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cd58:	23ec      	movs	r3, #236	; 0xec
 800cd5a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800cd5c:	e01b      	b.n	800cd96 <VL53L0X_RdDWord+0x66>
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800cd5e:	2204      	movs	r2, #4
 800cd60:	4910      	ldr	r1, [pc, #64]	; (800cda4 <VL53L0X_RdDWord+0x74>)
 800cd62:	68f8      	ldr	r0, [r7, #12]
 800cd64:	f7ff ff03 	bl	800cb6e <_I2CRead>
 800cd68:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d002      	beq.n	800cd76 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cd70:	23ec      	movs	r3, #236	; 0xec
 800cd72:	75fb      	strb	r3, [r7, #23]
        goto done;
 800cd74:	e00f      	b.n	800cd96 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800cd76:	4b0b      	ldr	r3, [pc, #44]	; (800cda4 <VL53L0X_RdDWord+0x74>)
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	061a      	lsls	r2, r3, #24
 800cd7c:	4b09      	ldr	r3, [pc, #36]	; (800cda4 <VL53L0X_RdDWord+0x74>)
 800cd7e:	785b      	ldrb	r3, [r3, #1]
 800cd80:	041b      	lsls	r3, r3, #16
 800cd82:	441a      	add	r2, r3
 800cd84:	4b07      	ldr	r3, [pc, #28]	; (800cda4 <VL53L0X_RdDWord+0x74>)
 800cd86:	789b      	ldrb	r3, [r3, #2]
 800cd88:	021b      	lsls	r3, r3, #8
 800cd8a:	4413      	add	r3, r2
 800cd8c:	4a05      	ldr	r2, [pc, #20]	; (800cda4 <VL53L0X_RdDWord+0x74>)
 800cd8e:	78d2      	ldrb	r2, [r2, #3]
 800cd90:	441a      	add	r2, r3
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	601a      	str	r2, [r3, #0]

done:
    return Status;
 800cd96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3718      	adds	r7, #24
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
 800cda2:	bf00      	nop
 800cda4:	20002ca4 	.word	0x20002ca4

0800cda8 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b084      	sub	sp, #16
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
 800cdb0:	460b      	mov	r3, r1
 800cdb2:	70fb      	strb	r3, [r7, #3]
 800cdb4:	4613      	mov	r3, r2
 800cdb6:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800cdbc:	4a0b      	ldr	r2, [pc, #44]	; (800cdec <VL53L0X_WrByte+0x44>)
 800cdbe:	78fb      	ldrb	r3, [r7, #3]
 800cdc0:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800cdc2:	4a0a      	ldr	r2, [pc, #40]	; (800cdec <VL53L0X_WrByte+0x44>)
 800cdc4:	78bb      	ldrb	r3, [r7, #2]
 800cdc6:	7053      	strb	r3, [r2, #1]

    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800cdc8:	2202      	movs	r2, #2
 800cdca:	4908      	ldr	r1, [pc, #32]	; (800cdec <VL53L0X_WrByte+0x44>)
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f7ff feaf 	bl	800cb30 <_I2CWrite>
 800cdd2:	60b8      	str	r0, [r7, #8]
    
    if (status_int != 0) {
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d001      	beq.n	800cdde <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cdda:	23ec      	movs	r3, #236	; 0xec
 800cddc:	73fb      	strb	r3, [r7, #15]
    }
    
    return Status;
 800cdde:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	3710      	adds	r7, #16
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}
 800cdea:	bf00      	nop
 800cdec:	20002ca4 	.word	0x20002ca4

0800cdf0 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b084      	sub	sp, #16
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
 800cdf8:	460b      	mov	r3, r1
 800cdfa:	70fb      	strb	r3, [r7, #3]
 800cdfc:	4613      	mov	r3, r2
 800cdfe:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ce00:	2300      	movs	r3, #0
 800ce02:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800ce04:	4a0e      	ldr	r2, [pc, #56]	; (800ce40 <VL53L0X_WrWord+0x50>)
 800ce06:	78fb      	ldrb	r3, [r7, #3]
 800ce08:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800ce0a:	883b      	ldrh	r3, [r7, #0]
 800ce0c:	0a1b      	lsrs	r3, r3, #8
 800ce0e:	b29b      	uxth	r3, r3
 800ce10:	b2da      	uxtb	r2, r3
 800ce12:	4b0b      	ldr	r3, [pc, #44]	; (800ce40 <VL53L0X_WrWord+0x50>)
 800ce14:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800ce16:	883b      	ldrh	r3, [r7, #0]
 800ce18:	b2da      	uxtb	r2, r3
 800ce1a:	4b09      	ldr	r3, [pc, #36]	; (800ce40 <VL53L0X_WrWord+0x50>)
 800ce1c:	709a      	strb	r2, [r3, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800ce1e:	2203      	movs	r2, #3
 800ce20:	4907      	ldr	r1, [pc, #28]	; (800ce40 <VL53L0X_WrWord+0x50>)
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f7ff fe84 	bl	800cb30 <_I2CWrite>
 800ce28:	60b8      	str	r0, [r7, #8]
    
    if (status_int != 0) {
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d001      	beq.n	800ce34 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ce30:	23ec      	movs	r3, #236	; 0xec
 800ce32:	73fb      	strb	r3, [r7, #15]
    }
    
    return Status;
 800ce34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3710      	adds	r7, #16
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}
 800ce40:	20002ca4 	.word	0x20002ca4

0800ce44 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b084      	sub	sp, #16
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
 800ce4c:	4608      	mov	r0, r1
 800ce4e:	4611      	mov	r1, r2
 800ce50:	461a      	mov	r2, r3
 800ce52:	4603      	mov	r3, r0
 800ce54:	70fb      	strb	r3, [r7, #3]
 800ce56:	460b      	mov	r3, r1
 800ce58:	70bb      	strb	r3, [r7, #2]
 800ce5a:	4613      	mov	r3, r2
 800ce5c:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800ce62:	f107 020e 	add.w	r2, r7, #14
 800ce66:	78fb      	ldrb	r3, [r7, #3]
 800ce68:	4619      	mov	r1, r3
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f7ff fea1 	bl	800cbb2 <VL53L0X_RdByte>
 800ce70:	4603      	mov	r3, r0
 800ce72:	73fb      	strb	r3, [r7, #15]
    
    if (Status) {
 800ce74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d110      	bne.n	800ce9e <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    
    data = (data & AndData) | OrData;
 800ce7c:	7bba      	ldrb	r2, [r7, #14]
 800ce7e:	78bb      	ldrb	r3, [r7, #2]
 800ce80:	4013      	ands	r3, r2
 800ce82:	b2da      	uxtb	r2, r3
 800ce84:	787b      	ldrb	r3, [r7, #1]
 800ce86:	4313      	orrs	r3, r2
 800ce88:	b2db      	uxtb	r3, r3
 800ce8a:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800ce8c:	7bba      	ldrb	r2, [r7, #14]
 800ce8e:	78fb      	ldrb	r3, [r7, #3]
 800ce90:	4619      	mov	r1, r3
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f7ff ff88 	bl	800cda8 <VL53L0X_WrByte>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	73fb      	strb	r3, [r7, #15]
 800ce9c:	e000      	b.n	800cea0 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800ce9e:	bf00      	nop
done:
    return Status;
 800cea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	3710      	adds	r7, #16
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}

0800ceac <VL53L0X_PollingDelay>:
    }

    return Status;
}

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b084      	sub	sp, #16
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800ceb8:	2002      	movs	r0, #2
 800ceba:	f000 fedd 	bl	800dc78 <HAL_Delay>
    return status;
 800cebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	3710      	adds	r7, #16
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}
	...

0800cecc <SetupSingleShot>:

/**
 *  Setup all detected sensors for single shot mode and setup ranging configuration
 */
void SetupSingleShot(VL53L0X_Dev_t Dev)
{
 800cecc:	b084      	sub	sp, #16
 800cece:	b580      	push	{r7, lr}
 800ced0:	b088      	sub	sp, #32
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 800ced8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  int status;
  uint8_t VhvSettings;
  uint8_t PhaseCal;
  uint32_t refSpadCount;
	uint8_t isApertureSpads;
	FixPoint1616_t signalLimit = (FixPoint1616_t)(0.25*65536);
 800cedc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cee0:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 800cee2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800cee6:	61bb      	str	r3, [r7, #24]
	uint32_t timingBudget = 33000;
 800cee8:	f248 03e8 	movw	r3, #33000	; 0x80e8
 800ceec:	617b      	str	r3, [r7, #20]
	uint8_t preRangeVcselPeriod = 14;
 800ceee:	230e      	movs	r3, #14
 800cef0:	74fb      	strb	r3, [r7, #19]
	uint8_t finalRangeVcselPeriod = 10;
 800cef2:	230a      	movs	r3, #10
 800cef4:	74bb      	strb	r3, [r7, #18]

                          
  if( Dev.Present){
 800cef6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	f000 80ac 	beq.w	800d058 <SetupSingleShot+0x18c>
    status=VL53L0X_StaticInit(&Dev);
 800cf00:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800cf04:	f7fb f8e0 	bl	80080c8 <VL53L0X_StaticInit>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	60fb      	str	r3, [r7, #12]
    if( status ){
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d002      	beq.n	800cf18 <SetupSingleShot+0x4c>
      printf("VL53L0X_StaticInit failed\n");
 800cf12:	4855      	ldr	r0, [pc, #340]	; (800d068 <SetupSingleShot+0x19c>)
 800cf14:	f006 fce2 	bl	80138dc <puts>
    }
    
    status = VL53L0X_PerformRefCalibration(&Dev, &VhvSettings, &PhaseCal);
 800cf18:	f107 020a 	add.w	r2, r7, #10
 800cf1c:	f107 030b 	add.w	r3, r7, #11
 800cf20:	4619      	mov	r1, r3
 800cf22:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800cf26:	f7fb ffa3 	bl	8008e70 <VL53L0X_PerformRefCalibration>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	60fb      	str	r3, [r7, #12]
    
    if( status ){
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d002      	beq.n	800cf3a <SetupSingleShot+0x6e>
      printf("VL53L0X_PerformRefCalibration failed\n");
 800cf34:	484d      	ldr	r0, [pc, #308]	; (800d06c <SetupSingleShot+0x1a0>)
 800cf36:	f006 fcd1 	bl	80138dc <puts>
    }
    
    status = VL53L0X_PerformRefSpadManagement(&Dev, &refSpadCount, &isApertureSpads);
 800cf3a:	1cfa      	adds	r2, r7, #3
 800cf3c:	1d3b      	adds	r3, r7, #4
 800cf3e:	4619      	mov	r1, r3
 800cf40:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800cf44:	f7fc fbec 	bl	8009720 <VL53L0X_PerformRefSpadManagement>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	60fb      	str	r3, [r7, #12]
    if( status ){
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d002      	beq.n	800cf58 <SetupSingleShot+0x8c>
      printf("VL53L0X_PerformRefSpadManagement failed\n");
 800cf52:	4847      	ldr	r0, [pc, #284]	; (800d070 <SetupSingleShot+0x1a4>)
 800cf54:	f006 fcc2 	bl	80138dc <puts>
    }
    
    status = VL53L0X_SetDeviceMode(&Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
 800cf58:	2100      	movs	r1, #0
 800cf5a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800cf5e:	f7fb fac5 	bl	80084ec <VL53L0X_SetDeviceMode>
 800cf62:	4603      	mov	r3, r0
 800cf64:	60fb      	str	r3, [r7, #12]
    if( status ){
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d002      	beq.n	800cf72 <SetupSingleShot+0xa6>
      printf("VL53L0X_SetDeviceMode failed\n");
 800cf6c:	4841      	ldr	r0, [pc, #260]	; (800d074 <SetupSingleShot+0x1a8>)
 800cf6e:	f006 fcb5 	bl	80138dc <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(&Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1); // Enable Sigma limit
 800cf72:	2201      	movs	r2, #1
 800cf74:	2100      	movs	r1, #0
 800cf76:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800cf7a:	f7fb fd73 	bl	8008a64 <VL53L0X_SetLimitCheckEnable>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	60fb      	str	r3, [r7, #12]
    if( status ){
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d002      	beq.n	800cf8e <SetupSingleShot+0xc2>
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 800cf88:	483b      	ldr	r0, [pc, #236]	; (800d078 <SetupSingleShot+0x1ac>)
 800cf8a:	f006 fca7 	bl	80138dc <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(&Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); // Enable Signa limit
 800cf8e:	2201      	movs	r2, #1
 800cf90:	2101      	movs	r1, #1
 800cf92:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800cf96:	f7fb fd65 	bl	8008a64 <VL53L0X_SetLimitCheckEnable>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	60fb      	str	r3, [r7, #12]
    if( status ){
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d002      	beq.n	800cfaa <SetupSingleShot+0xde>
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 800cfa4:	4834      	ldr	r0, [pc, #208]	; (800d078 <SetupSingleShot+0x1ac>)
 800cfa6:	f006 fc99 	bl	80138dc <puts>
    }
    
    /* Ranging configuration */
    signalLimit = (FixPoint1616_t)(0.1*65536);
 800cfaa:	f641 1399 	movw	r3, #6553	; 0x1999
 800cfae:	61fb      	str	r3, [r7, #28]
    sigmaLimit = (FixPoint1616_t)(60*65536);
 800cfb0:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800cfb4:	61bb      	str	r3, [r7, #24]
    timingBudget = 33000;
 800cfb6:	f248 03e8 	movw	r3, #33000	; 0x80e8
 800cfba:	617b      	str	r3, [r7, #20]
    preRangeVcselPeriod = 18;
 800cfbc:	2312      	movs	r3, #18
 800cfbe:	74fb      	strb	r3, [r7, #19]
    finalRangeVcselPeriod = 14;
 800cfc0:	230e      	movs	r3, #14
 800cfc2:	74bb      	strb	r3, [r7, #18]
    
    status = VL53L0X_SetLimitCheckValue(&Dev,  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 800cfc4:	69fa      	ldr	r2, [r7, #28]
 800cfc6:	2101      	movs	r1, #1
 800cfc8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800cfcc:	f7fb fdfa 	bl	8008bc4 <VL53L0X_SetLimitCheckValue>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	60fb      	str	r3, [r7, #12]
    
    if( status ){
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d002      	beq.n	800cfe0 <SetupSingleShot+0x114>
      printf("VL53L0X_SetLimitCheckValue failed\n");
 800cfda:	4828      	ldr	r0, [pc, #160]	; (800d07c <SetupSingleShot+0x1b0>)
 800cfdc:	f006 fc7e 	bl	80138dc <puts>
    }
    
    status = VL53L0X_SetLimitCheckValue(&Dev,  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 800cfe0:	69ba      	ldr	r2, [r7, #24]
 800cfe2:	2100      	movs	r1, #0
 800cfe4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800cfe8:	f7fb fdec 	bl	8008bc4 <VL53L0X_SetLimitCheckValue>
 800cfec:	4603      	mov	r3, r0
 800cfee:	60fb      	str	r3, [r7, #12]
    if( status ){
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d002      	beq.n	800cffc <SetupSingleShot+0x130>
      printf("VL53L0X_SetLimitCheckValue failed\n");
 800cff6:	4821      	ldr	r0, [pc, #132]	; (800d07c <SetupSingleShot+0x1b0>)
 800cff8:	f006 fc70 	bl	80138dc <puts>
    }
    
    status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(&Dev,  timingBudget);
 800cffc:	6979      	ldr	r1, [r7, #20]
 800cffe:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800d002:	f7fb fad1 	bl	80085a8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800d006:	4603      	mov	r3, r0
 800d008:	60fb      	str	r3, [r7, #12]
    if( status ){
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d002      	beq.n	800d016 <SetupSingleShot+0x14a>
      printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed\n");
 800d010:	481b      	ldr	r0, [pc, #108]	; (800d080 <SetupSingleShot+0x1b4>)
 800d012:	f006 fc63 	bl	80138dc <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(&Dev,  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 800d016:	7cfb      	ldrb	r3, [r7, #19]
 800d018:	461a      	mov	r2, r3
 800d01a:	2100      	movs	r1, #0
 800d01c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800d020:	f7fb fae8 	bl	80085f4 <VL53L0X_SetVcselPulsePeriod>
 800d024:	4603      	mov	r3, r0
 800d026:	60fb      	str	r3, [r7, #12]
    if( status ){
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d002      	beq.n	800d034 <SetupSingleShot+0x168>
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 800d02e:	4815      	ldr	r0, [pc, #84]	; (800d084 <SetupSingleShot+0x1b8>)
 800d030:	f006 fc54 	bl	80138dc <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(&Dev,  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 800d034:	7cbb      	ldrb	r3, [r7, #18]
 800d036:	461a      	mov	r2, r3
 800d038:	2101      	movs	r1, #1
 800d03a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800d03e:	f7fb fad9 	bl	80085f4 <VL53L0X_SetVcselPulsePeriod>
 800d042:	4603      	mov	r3, r0
 800d044:	60fb      	str	r3, [r7, #12]
    if( status ){
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d002      	beq.n	800d052 <SetupSingleShot+0x186>
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 800d04c:	480d      	ldr	r0, [pc, #52]	; (800d084 <SetupSingleShot+0x1b8>)
 800d04e:	f006 fc45 	bl	80138dc <puts>
    }
    
    Dev.LeakyFirst=1;
 800d052:	2301      	movs	r3, #1
 800d054:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
  }
}
 800d058:	bf00      	nop
 800d05a:	3720      	adds	r7, #32
 800d05c:	46bd      	mov	sp, r7
 800d05e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d062:	b004      	add	sp, #16
 800d064:	4770      	bx	lr
 800d066:	bf00      	nop
 800d068:	08016a90 	.word	0x08016a90
 800d06c:	08016aac 	.word	0x08016aac
 800d070:	08016ad4 	.word	0x08016ad4
 800d074:	08016afc 	.word	0x08016afc
 800d078:	08016b1c 	.word	0x08016b1c
 800d07c:	08016b40 	.word	0x08016b40
 800d080:	08016b64 	.word	0x08016b64
 800d084:	08016b9c 	.word	0x08016b9c

0800d088 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b084      	sub	sp, #16
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	4603      	mov	r3, r0
 800d090:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800d092:	88fb      	ldrh	r3, [r7, #6]
 800d094:	b2db      	uxtb	r3, r3
 800d096:	2120      	movs	r1, #32
 800d098:	4618      	mov	r0, r3
 800d09a:	f7fa fc3b 	bl	8007914 <SENSOR_IO_Read>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800d0a2:	7bfb      	ldrb	r3, [r7, #15]
 800d0a4:	f023 0304 	bic.w	r3, r3, #4
 800d0a8:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800d0aa:	7bfb      	ldrb	r3, [r7, #15]
 800d0ac:	f043 0304 	orr.w	r3, r3, #4
 800d0b0:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800d0b2:	7bfb      	ldrb	r3, [r7, #15]
 800d0b4:	f023 0303 	bic.w	r3, r3, #3
 800d0b8:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800d0ba:	7bfb      	ldrb	r3, [r7, #15]
 800d0bc:	f043 0301 	orr.w	r3, r3, #1
 800d0c0:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800d0c2:	7bfb      	ldrb	r3, [r7, #15]
 800d0c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d0c8:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800d0ca:	88fb      	ldrh	r3, [r7, #6]
 800d0cc:	b2db      	uxtb	r3, r3
 800d0ce:	7bfa      	ldrb	r2, [r7, #15]
 800d0d0:	2120      	movs	r1, #32
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f7fa fc04 	bl	80078e0 <SENSOR_IO_Write>
}
 800d0d8:	bf00      	nop
 800d0da:	3710      	adds	r7, #16
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}

0800d0e0 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b084      	sub	sp, #16
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 800d0ee:	f7fa fbed 	bl	80078cc <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800d0f2:	88fb      	ldrh	r3, [r7, #6]
 800d0f4:	b2db      	uxtb	r3, r3
 800d0f6:	210f      	movs	r1, #15
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f7fa fc0b 	bl	8007914 <SENSOR_IO_Read>
 800d0fe:	4603      	mov	r3, r0
 800d100:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800d102:	7bfb      	ldrb	r3, [r7, #15]
}
 800d104:	4618      	mov	r0, r3
 800d106:	3710      	adds	r7, #16
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}

0800d10c <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b088      	sub	sp, #32
 800d110:	af00      	add	r7, sp, #0
 800d112:	4603      	mov	r3, r0
 800d114:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 800d116:	88fb      	ldrh	r3, [r7, #6]
 800d118:	b2d8      	uxtb	r0, r3
 800d11a:	f107 020c 	add.w	r2, r7, #12
 800d11e:	2302      	movs	r3, #2
 800d120:	21b0      	movs	r1, #176	; 0xb0
 800d122:	f7fa fc15 	bl	8007950 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 800d126:	7b3b      	ldrb	r3, [r7, #12]
 800d128:	085b      	lsrs	r3, r3, #1
 800d12a:	b2db      	uxtb	r3, r3
 800d12c:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 800d12e:	7b7b      	ldrb	r3, [r7, #13]
 800d130:	085b      	lsrs	r3, r3, #1
 800d132:	b2db      	uxtb	r3, r3
 800d134:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 800d136:	88fb      	ldrh	r3, [r7, #6]
 800d138:	b2d8      	uxtb	r0, r3
 800d13a:	f107 020c 	add.w	r2, r7, #12
 800d13e:	2302      	movs	r3, #2
 800d140:	21b6      	movs	r1, #182	; 0xb6
 800d142:	f7fa fc05 	bl	8007950 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800d146:	7b7b      	ldrb	r3, [r7, #13]
 800d148:	021b      	lsls	r3, r3, #8
 800d14a:	b21a      	sxth	r2, r3
 800d14c:	7b3b      	ldrb	r3, [r7, #12]
 800d14e:	b21b      	sxth	r3, r3
 800d150:	4313      	orrs	r3, r2
 800d152:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 800d154:	88fb      	ldrh	r3, [r7, #6]
 800d156:	b2d8      	uxtb	r0, r3
 800d158:	f107 020c 	add.w	r2, r7, #12
 800d15c:	2302      	movs	r3, #2
 800d15e:	21ba      	movs	r1, #186	; 0xba
 800d160:	f7fa fbf6 	bl	8007950 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800d164:	7b7b      	ldrb	r3, [r7, #13]
 800d166:	021b      	lsls	r3, r3, #8
 800d168:	b21a      	sxth	r2, r3
 800d16a:	7b3b      	ldrb	r3, [r7, #12]
 800d16c:	b21b      	sxth	r3, r3
 800d16e:	4313      	orrs	r3, r2
 800d170:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800d172:	88fb      	ldrh	r3, [r7, #6]
 800d174:	b2d8      	uxtb	r0, r3
 800d176:	f107 020c 	add.w	r2, r7, #12
 800d17a:	2302      	movs	r3, #2
 800d17c:	21a8      	movs	r1, #168	; 0xa8
 800d17e:	f7fa fbe7 	bl	8007950 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800d182:	7b7b      	ldrb	r3, [r7, #13]
 800d184:	021b      	lsls	r3, r3, #8
 800d186:	b21a      	sxth	r2, r3
 800d188:	7b3b      	ldrb	r3, [r7, #12]
 800d18a:	b21b      	sxth	r3, r3
 800d18c:	4313      	orrs	r3, r2
 800d18e:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 800d190:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d194:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d198:	1ad3      	subs	r3, r2, r3
 800d19a:	ee07 3a90 	vmov	s15, r3
 800d19e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d1a2:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800d1a6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d1aa:	1ad3      	subs	r3, r2, r3
 800d1ac:	ee07 3a90 	vmov	s15, r3
 800d1b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d1b4:	ee67 6a27 	vmul.f32	s13, s14, s15
 800d1b8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800d1bc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d1c0:	1ad3      	subs	r3, r2, r3
 800d1c2:	ee07 3a90 	vmov	s15, r3
 800d1c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d1ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1ce:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d1d2:	ee07 3a90 	vmov	s15, r3
 800d1d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d1da:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d1de:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 800d1e2:	edd7 7a04 	vldr	s15, [r7, #16]
 800d1e6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800d1ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d1ee:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800d1f2:	edd7 7a04 	vldr	s15, [r7, #16]
 800d1f6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800d23c <HTS221_H_ReadHumidity+0x130>
 800d1fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d1fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d202:	dd01      	ble.n	800d208 <HTS221_H_ReadHumidity+0xfc>
 800d204:	4b0e      	ldr	r3, [pc, #56]	; (800d240 <HTS221_H_ReadHumidity+0x134>)
 800d206:	e00a      	b.n	800d21e <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 800d208:	edd7 7a04 	vldr	s15, [r7, #16]
 800d20c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d214:	d502      	bpl.n	800d21c <HTS221_H_ReadHumidity+0x110>
 800d216:	f04f 0300 	mov.w	r3, #0
 800d21a:	e000      	b.n	800d21e <HTS221_H_ReadHumidity+0x112>
 800d21c:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 800d21e:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 800d220:	edd7 7a04 	vldr	s15, [r7, #16]
 800d224:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800d228:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d22c:	eef0 7a66 	vmov.f32	s15, s13
}
 800d230:	eeb0 0a67 	vmov.f32	s0, s15
 800d234:	3720      	adds	r7, #32
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
 800d23a:	bf00      	nop
 800d23c:	447a0000 	.word	0x447a0000
 800d240:	447a0000 	.word	0x447a0000

0800d244 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 800d244:	b580      	push	{r7, lr}
 800d246:	b084      	sub	sp, #16
 800d248:	af00      	add	r7, sp, #0
 800d24a:	4603      	mov	r3, r0
 800d24c:	6039      	str	r1, [r7, #0]
 800d24e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800d250:	88fb      	ldrh	r3, [r7, #6]
 800d252:	b2db      	uxtb	r3, r3
 800d254:	2120      	movs	r1, #32
 800d256:	4618      	mov	r0, r3
 800d258:	f7fa fb5c 	bl	8007914 <SENSOR_IO_Read>
 800d25c:	4603      	mov	r3, r0
 800d25e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800d260:	7bfb      	ldrb	r3, [r7, #15]
 800d262:	f023 0304 	bic.w	r3, r3, #4
 800d266:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800d268:	7bfb      	ldrb	r3, [r7, #15]
 800d26a:	f043 0304 	orr.w	r3, r3, #4
 800d26e:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800d270:	7bfb      	ldrb	r3, [r7, #15]
 800d272:	f023 0303 	bic.w	r3, r3, #3
 800d276:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800d278:	7bfb      	ldrb	r3, [r7, #15]
 800d27a:	f043 0301 	orr.w	r3, r3, #1
 800d27e:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800d280:	7bfb      	ldrb	r3, [r7, #15]
 800d282:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d286:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800d288:	88fb      	ldrh	r3, [r7, #6]
 800d28a:	b2db      	uxtb	r3, r3
 800d28c:	7bfa      	ldrb	r2, [r7, #15]
 800d28e:	2120      	movs	r1, #32
 800d290:	4618      	mov	r0, r3
 800d292:	f7fa fb25 	bl	80078e0 <SENSOR_IO_Write>
}
 800d296:	bf00      	nop
 800d298:	3710      	adds	r7, #16
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}

0800d29e <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800d29e:	b580      	push	{r7, lr}
 800d2a0:	b088      	sub	sp, #32
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 800d2a8:	88fb      	ldrh	r3, [r7, #6]
 800d2aa:	b2d8      	uxtb	r0, r3
 800d2ac:	f107 0208 	add.w	r2, r7, #8
 800d2b0:	2302      	movs	r3, #2
 800d2b2:	21b2      	movs	r1, #178	; 0xb2
 800d2b4:	f7fa fb4c 	bl	8007950 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 800d2b8:	88fb      	ldrh	r3, [r7, #6]
 800d2ba:	b2db      	uxtb	r3, r3
 800d2bc:	2135      	movs	r1, #53	; 0x35
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7fa fb28 	bl	8007914 <SENSOR_IO_Read>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 800d2c8:	7ffb      	ldrb	r3, [r7, #31]
 800d2ca:	021b      	lsls	r3, r3, #8
 800d2cc:	b21b      	sxth	r3, r3
 800d2ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d2d2:	b21a      	sxth	r2, r3
 800d2d4:	7a3b      	ldrb	r3, [r7, #8]
 800d2d6:	b21b      	sxth	r3, r3
 800d2d8:	4313      	orrs	r3, r2
 800d2da:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800d2dc:	7ffb      	ldrb	r3, [r7, #31]
 800d2de:	019b      	lsls	r3, r3, #6
 800d2e0:	b21b      	sxth	r3, r3
 800d2e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d2e6:	b21a      	sxth	r2, r3
 800d2e8:	7a7b      	ldrb	r3, [r7, #9]
 800d2ea:	b21b      	sxth	r3, r3
 800d2ec:	4313      	orrs	r3, r2
 800d2ee:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 800d2f0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800d2f4:	10db      	asrs	r3, r3, #3
 800d2f6:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 800d2f8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d2fc:	10db      	asrs	r3, r3, #3
 800d2fe:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 800d300:	88fb      	ldrh	r3, [r7, #6]
 800d302:	b2d8      	uxtb	r0, r3
 800d304:	f107 0208 	add.w	r2, r7, #8
 800d308:	2304      	movs	r3, #4
 800d30a:	21bc      	movs	r1, #188	; 0xbc
 800d30c:	f7fa fb20 	bl	8007950 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800d310:	7a7b      	ldrb	r3, [r7, #9]
 800d312:	021b      	lsls	r3, r3, #8
 800d314:	b21a      	sxth	r2, r3
 800d316:	7a3b      	ldrb	r3, [r7, #8]
 800d318:	b21b      	sxth	r3, r3
 800d31a:	4313      	orrs	r3, r2
 800d31c:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800d31e:	7afb      	ldrb	r3, [r7, #11]
 800d320:	021b      	lsls	r3, r3, #8
 800d322:	b21a      	sxth	r2, r3
 800d324:	7abb      	ldrb	r3, [r7, #10]
 800d326:	b21b      	sxth	r3, r3
 800d328:	4313      	orrs	r3, r2
 800d32a:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 800d32c:	88fb      	ldrh	r3, [r7, #6]
 800d32e:	b2d8      	uxtb	r0, r3
 800d330:	f107 0208 	add.w	r2, r7, #8
 800d334:	2302      	movs	r3, #2
 800d336:	21aa      	movs	r1, #170	; 0xaa
 800d338:	f7fa fb0a 	bl	8007950 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800d33c:	7a7b      	ldrb	r3, [r7, #9]
 800d33e:	021b      	lsls	r3, r3, #8
 800d340:	b21a      	sxth	r2, r3
 800d342:	7a3b      	ldrb	r3, [r7, #8]
 800d344:	b21b      	sxth	r3, r3
 800d346:	4313      	orrs	r3, r2
 800d348:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800d34a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800d34e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800d352:	1ad3      	subs	r3, r2, r3
 800d354:	ee07 3a90 	vmov	s15, r3
 800d358:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d35c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d360:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800d364:	1ad3      	subs	r3, r2, r3
 800d366:	ee07 3a90 	vmov	s15, r3
 800d36a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d36e:	ee67 6a27 	vmul.f32	s13, s14, s15
 800d372:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800d376:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800d37a:	1ad3      	subs	r3, r2, r3
 800d37c:	ee07 3a90 	vmov	s15, r3
 800d380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d384:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d388:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800d38c:	ee07 3a90 	vmov	s15, r3
 800d390:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d394:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d398:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	ee07 3a90 	vmov	s15, r3
}
 800d3a2:	eeb0 0a67 	vmov.f32	s0, s15
 800d3a6:	3720      	adds	r7, #32
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}

0800d3ac <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b082      	sub	sp, #8
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	463b      	mov	r3, r7
 800d3b4:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 800d3b8:	783b      	ldrb	r3, [r7, #0]
 800d3ba:	461a      	mov	r2, r3
 800d3bc:	2120      	movs	r1, #32
 800d3be:	203c      	movs	r0, #60	; 0x3c
 800d3c0:	f7fa fa8e 	bl	80078e0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 800d3c4:	787b      	ldrb	r3, [r7, #1]
 800d3c6:	461a      	mov	r2, r3
 800d3c8:	2121      	movs	r1, #33	; 0x21
 800d3ca:	203c      	movs	r0, #60	; 0x3c
 800d3cc:	f7fa fa88 	bl	80078e0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 800d3d0:	78bb      	ldrb	r3, [r7, #2]
 800d3d2:	461a      	mov	r2, r3
 800d3d4:	2122      	movs	r1, #34	; 0x22
 800d3d6:	203c      	movs	r0, #60	; 0x3c
 800d3d8:	f7fa fa82 	bl	80078e0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 800d3dc:	78fb      	ldrb	r3, [r7, #3]
 800d3de:	461a      	mov	r2, r3
 800d3e0:	2123      	movs	r1, #35	; 0x23
 800d3e2:	203c      	movs	r0, #60	; 0x3c
 800d3e4:	f7fa fa7c 	bl	80078e0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 800d3e8:	793b      	ldrb	r3, [r7, #4]
 800d3ea:	461a      	mov	r2, r3
 800d3ec:	2124      	movs	r1, #36	; 0x24
 800d3ee:	203c      	movs	r0, #60	; 0x3c
 800d3f0:	f7fa fa76 	bl	80078e0 <SENSOR_IO_Write>
}
 800d3f4:	bf00      	nop
 800d3f6:	3708      	adds	r7, #8
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}

0800d3fc <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b082      	sub	sp, #8
 800d400:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800d402:	2300      	movs	r3, #0
 800d404:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800d406:	2122      	movs	r1, #34	; 0x22
 800d408:	203c      	movs	r0, #60	; 0x3c
 800d40a:	f7fa fa83 	bl	8007914 <SENSOR_IO_Read>
 800d40e:	4603      	mov	r3, r0
 800d410:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 800d412:	79fb      	ldrb	r3, [r7, #7]
 800d414:	f023 0303 	bic.w	r3, r3, #3
 800d418:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 800d41a:	79fb      	ldrb	r3, [r7, #7]
 800d41c:	f043 0303 	orr.w	r3, r3, #3
 800d420:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 800d422:	79fb      	ldrb	r3, [r7, #7]
 800d424:	461a      	mov	r2, r3
 800d426:	2122      	movs	r1, #34	; 0x22
 800d428:	203c      	movs	r0, #60	; 0x3c
 800d42a:	f7fa fa59 	bl	80078e0 <SENSOR_IO_Write>
}
 800d42e:	bf00      	nop
 800d430:	3708      	adds	r7, #8
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}

0800d436 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 800d436:	b580      	push	{r7, lr}
 800d438:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 800d43a:	f7fa fa47 	bl	80078cc <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 800d43e:	210f      	movs	r1, #15
 800d440:	203c      	movs	r0, #60	; 0x3c
 800d442:	f7fa fa67 	bl	8007914 <SENSOR_IO_Read>
 800d446:	4603      	mov	r3, r0
}
 800d448:	4618      	mov	r0, r3
 800d44a:	bd80      	pop	{r7, pc}

0800d44c <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b084      	sub	sp, #16
 800d450:	af00      	add	r7, sp, #0
 800d452:	4603      	mov	r3, r0
 800d454:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 800d456:	2300      	movs	r3, #0
 800d458:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800d45a:	2122      	movs	r1, #34	; 0x22
 800d45c:	203c      	movs	r0, #60	; 0x3c
 800d45e:	f7fa fa59 	bl	8007914 <SENSOR_IO_Read>
 800d462:	4603      	mov	r3, r0
 800d464:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 800d466:	7bfb      	ldrb	r3, [r7, #15]
 800d468:	f023 0320 	bic.w	r3, r3, #32
 800d46c:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800d46e:	88fb      	ldrh	r3, [r7, #6]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d003      	beq.n	800d47c <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 800d474:	7bfb      	ldrb	r3, [r7, #15]
 800d476:	f043 0320 	orr.w	r3, r3, #32
 800d47a:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 800d47c:	7bfb      	ldrb	r3, [r7, #15]
 800d47e:	461a      	mov	r2, r3
 800d480:	2122      	movs	r1, #34	; 0x22
 800d482:	203c      	movs	r0, #60	; 0x3c
 800d484:	f7fa fa2c 	bl	80078e0 <SENSOR_IO_Write>
}
 800d488:	bf00      	nop
 800d48a:	3710      	adds	r7, #16
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}

0800d490 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b088      	sub	sp, #32
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 800d498:	2300      	movs	r3, #0
 800d49a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800d49c:	2300      	movs	r3, #0
 800d49e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800d4a0:	f04f 0300 	mov.w	r3, #0
 800d4a4:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 800d4a6:	2121      	movs	r1, #33	; 0x21
 800d4a8:	203c      	movs	r0, #60	; 0x3c
 800d4aa:	f7fa fa33 	bl	8007914 <SENSOR_IO_Read>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 800d4b2:	f107 0208 	add.w	r2, r7, #8
 800d4b6:	2306      	movs	r3, #6
 800d4b8:	21a8      	movs	r1, #168	; 0xa8
 800d4ba:	203c      	movs	r0, #60	; 0x3c
 800d4bc:	f7fa fa48 	bl	8007950 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	77fb      	strb	r3, [r7, #31]
 800d4c4:	e01f      	b.n	800d506 <LIS3MDL_MagReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800d4c6:	7ffb      	ldrb	r3, [r7, #31]
 800d4c8:	005b      	lsls	r3, r3, #1
 800d4ca:	3301      	adds	r3, #1
 800d4cc:	f107 0220 	add.w	r2, r7, #32
 800d4d0:	4413      	add	r3, r2
 800d4d2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800d4d6:	b29b      	uxth	r3, r3
 800d4d8:	021b      	lsls	r3, r3, #8
 800d4da:	b29a      	uxth	r2, r3
 800d4dc:	7ffb      	ldrb	r3, [r7, #31]
 800d4de:	005b      	lsls	r3, r3, #1
 800d4e0:	f107 0120 	add.w	r1, r7, #32
 800d4e4:	440b      	add	r3, r1
 800d4e6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800d4ea:	b29b      	uxth	r3, r3
 800d4ec:	4413      	add	r3, r2
 800d4ee:	b29a      	uxth	r2, r3
 800d4f0:	7ffb      	ldrb	r3, [r7, #31]
 800d4f2:	b212      	sxth	r2, r2
 800d4f4:	005b      	lsls	r3, r3, #1
 800d4f6:	f107 0120 	add.w	r1, r7, #32
 800d4fa:	440b      	add	r3, r1
 800d4fc:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800d500:	7ffb      	ldrb	r3, [r7, #31]
 800d502:	3301      	adds	r3, #1
 800d504:	77fb      	strb	r3, [r7, #31]
 800d506:	7ffb      	ldrb	r3, [r7, #31]
 800d508:	2b02      	cmp	r3, #2
 800d50a:	d9dc      	bls.n	800d4c6 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 800d50c:	7dfb      	ldrb	r3, [r7, #23]
 800d50e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d512:	2b60      	cmp	r3, #96	; 0x60
 800d514:	d013      	beq.n	800d53e <LIS3MDL_MagReadXYZ+0xae>
 800d516:	2b60      	cmp	r3, #96	; 0x60
 800d518:	dc14      	bgt.n	800d544 <LIS3MDL_MagReadXYZ+0xb4>
 800d51a:	2b40      	cmp	r3, #64	; 0x40
 800d51c:	d00c      	beq.n	800d538 <LIS3MDL_MagReadXYZ+0xa8>
 800d51e:	2b40      	cmp	r3, #64	; 0x40
 800d520:	dc10      	bgt.n	800d544 <LIS3MDL_MagReadXYZ+0xb4>
 800d522:	2b00      	cmp	r3, #0
 800d524:	d002      	beq.n	800d52c <LIS3MDL_MagReadXYZ+0x9c>
 800d526:	2b20      	cmp	r3, #32
 800d528:	d003      	beq.n	800d532 <LIS3MDL_MagReadXYZ+0xa2>
 800d52a:	e00b      	b.n	800d544 <LIS3MDL_MagReadXYZ+0xb4>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 800d52c:	4b19      	ldr	r3, [pc, #100]	; (800d594 <LIS3MDL_MagReadXYZ+0x104>)
 800d52e:	61bb      	str	r3, [r7, #24]
    break;
 800d530:	e008      	b.n	800d544 <LIS3MDL_MagReadXYZ+0xb4>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 800d532:	4b19      	ldr	r3, [pc, #100]	; (800d598 <LIS3MDL_MagReadXYZ+0x108>)
 800d534:	61bb      	str	r3, [r7, #24]
    break;
 800d536:	e005      	b.n	800d544 <LIS3MDL_MagReadXYZ+0xb4>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 800d538:	4b18      	ldr	r3, [pc, #96]	; (800d59c <LIS3MDL_MagReadXYZ+0x10c>)
 800d53a:	61bb      	str	r3, [r7, #24]
    break;
 800d53c:	e002      	b.n	800d544 <LIS3MDL_MagReadXYZ+0xb4>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 800d53e:	4b18      	ldr	r3, [pc, #96]	; (800d5a0 <LIS3MDL_MagReadXYZ+0x110>)
 800d540:	61bb      	str	r3, [r7, #24]
    break;    
 800d542:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 800d544:	2300      	movs	r3, #0
 800d546:	77fb      	strb	r3, [r7, #31]
 800d548:	e01b      	b.n	800d582 <LIS3MDL_MagReadXYZ+0xf2>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800d54a:	7ffb      	ldrb	r3, [r7, #31]
 800d54c:	005b      	lsls	r3, r3, #1
 800d54e:	f107 0220 	add.w	r2, r7, #32
 800d552:	4413      	add	r3, r2
 800d554:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800d558:	ee07 3a90 	vmov	s15, r3
 800d55c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d560:	edd7 7a06 	vldr	s15, [r7, #24]
 800d564:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d568:	7ffb      	ldrb	r3, [r7, #31]
 800d56a:	005b      	lsls	r3, r3, #1
 800d56c:	687a      	ldr	r2, [r7, #4]
 800d56e:	4413      	add	r3, r2
 800d570:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d574:	ee17 2a90 	vmov	r2, s15
 800d578:	b212      	sxth	r2, r2
 800d57a:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800d57c:	7ffb      	ldrb	r3, [r7, #31]
 800d57e:	3301      	adds	r3, #1
 800d580:	77fb      	strb	r3, [r7, #31]
 800d582:	7ffb      	ldrb	r3, [r7, #31]
 800d584:	2b02      	cmp	r3, #2
 800d586:	d9e0      	bls.n	800d54a <LIS3MDL_MagReadXYZ+0xba>
  }
}
 800d588:	bf00      	nop
 800d58a:	bf00      	nop
 800d58c:	3720      	adds	r7, #32
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}
 800d592:	bf00      	nop
 800d594:	3e0f5c29 	.word	0x3e0f5c29
 800d598:	3e947ae1 	.word	0x3e947ae1
 800d59c:	3edc28f6 	.word	0x3edc28f6
 800d5a0:	3f147ae1 	.word	0x3f147ae1

0800d5a4 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b082      	sub	sp, #8
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 800d5ae:	88fb      	ldrh	r3, [r7, #6]
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f000 f87b 	bl	800d6ac <LPS22HB_Init>
}
 800d5b6:	bf00      	nop
 800d5b8:	3708      	adds	r7, #8
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}

0800d5be <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 800d5be:	b580      	push	{r7, lr}
 800d5c0:	b084      	sub	sp, #16
 800d5c2:	af00      	add	r7, sp, #0
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 800d5cc:	f7fa f97e 	bl	80078cc <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 800d5d0:	88fb      	ldrh	r3, [r7, #6]
 800d5d2:	b2db      	uxtb	r3, r3
 800d5d4:	210f      	movs	r1, #15
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f7fa f99c 	bl	8007914 <SENSOR_IO_Read>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800d5e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3710      	adds	r7, #16
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}
	...

0800d5ec <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 800d5ec:	b590      	push	{r4, r7, lr}
 800d5ee:	b087      	sub	sp, #28
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	74fb      	strb	r3, [r7, #19]
 800d5fe:	e013      	b.n	800d628 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 800d600:	88fb      	ldrh	r3, [r7, #6]
 800d602:	b2da      	uxtb	r2, r3
 800d604:	7cfb      	ldrb	r3, [r7, #19]
 800d606:	3328      	adds	r3, #40	; 0x28
 800d608:	b2db      	uxtb	r3, r3
 800d60a:	7cfc      	ldrb	r4, [r7, #19]
 800d60c:	4619      	mov	r1, r3
 800d60e:	4610      	mov	r0, r2
 800d610:	f7fa f980 	bl	8007914 <SENSOR_IO_Read>
 800d614:	4603      	mov	r3, r0
 800d616:	461a      	mov	r2, r3
 800d618:	f107 0318 	add.w	r3, r7, #24
 800d61c:	4423      	add	r3, r4
 800d61e:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 800d622:	7cfb      	ldrb	r3, [r7, #19]
 800d624:	3301      	adds	r3, #1
 800d626:	74fb      	strb	r3, [r7, #19]
 800d628:	7cfb      	ldrb	r3, [r7, #19]
 800d62a:	2b02      	cmp	r3, #2
 800d62c:	d9e8      	bls.n	800d600 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 800d62e:	2300      	movs	r3, #0
 800d630:	74fb      	strb	r3, [r7, #19]
 800d632:	e010      	b.n	800d656 <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 800d634:	7cfb      	ldrb	r3, [r7, #19]
 800d636:	f107 0218 	add.w	r2, r7, #24
 800d63a:	4413      	add	r3, r2
 800d63c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800d640:	461a      	mov	r2, r3
 800d642:	7cfb      	ldrb	r3, [r7, #19]
 800d644:	00db      	lsls	r3, r3, #3
 800d646:	fa02 f303 	lsl.w	r3, r2, r3
 800d64a:	697a      	ldr	r2, [r7, #20]
 800d64c:	4313      	orrs	r3, r2
 800d64e:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 800d650:	7cfb      	ldrb	r3, [r7, #19]
 800d652:	3301      	adds	r3, #1
 800d654:	74fb      	strb	r3, [r7, #19]
 800d656:	7cfb      	ldrb	r3, [r7, #19]
 800d658:	2b02      	cmp	r3, #2
 800d65a:	d9eb      	bls.n	800d634 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 800d65c:	697b      	ldr	r3, [r7, #20]
 800d65e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d662:	2b00      	cmp	r3, #0
 800d664:	d003      	beq.n	800d66e <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d66c:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 800d66e:	697b      	ldr	r3, [r7, #20]
 800d670:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	2264      	movs	r2, #100	; 0x64
 800d676:	fb02 f303 	mul.w	r3, r2, r3
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	da01      	bge.n	800d682 <LPS22HB_P_ReadPressure+0x96>
 800d67e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800d682:	131b      	asrs	r3, r3, #12
 800d684:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	ee07 3a90 	vmov	s15, r3
 800d68c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d690:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800d6a8 <LPS22HB_P_ReadPressure+0xbc>
 800d694:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d698:	eef0 7a66 	vmov.f32	s15, s13
}
 800d69c:	eeb0 0a67 	vmov.f32	s0, s15
 800d6a0:	371c      	adds	r7, #28
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd90      	pop	{r4, r7, pc}
 800d6a6:	bf00      	nop
 800d6a8:	42c80000 	.word	0x42c80000

0800d6ac <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b084      	sub	sp, #16
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 800d6b6:	88fb      	ldrh	r3, [r7, #6]
 800d6b8:	b2db      	uxtb	r3, r3
 800d6ba:	211a      	movs	r1, #26
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f7fa f929 	bl	8007914 <SENSOR_IO_Read>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 800d6c6:	7bfb      	ldrb	r3, [r7, #15]
 800d6c8:	f023 0301 	bic.w	r3, r3, #1
 800d6cc:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 800d6ce:	7bfb      	ldrb	r3, [r7, #15]
 800d6d0:	f043 0301 	orr.w	r3, r3, #1
 800d6d4:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 800d6d6:	88fb      	ldrh	r3, [r7, #6]
 800d6d8:	b2db      	uxtb	r3, r3
 800d6da:	7bfa      	ldrb	r2, [r7, #15]
 800d6dc:	211a      	movs	r1, #26
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f7fa f8fe 	bl	80078e0 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 800d6e4:	88fb      	ldrh	r3, [r7, #6]
 800d6e6:	b2db      	uxtb	r3, r3
 800d6e8:	2110      	movs	r1, #16
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f7fa f912 	bl	8007914 <SENSOR_IO_Read>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 800d6f4:	7bfb      	ldrb	r3, [r7, #15]
 800d6f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d6fa:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 800d6fc:	7bfb      	ldrb	r3, [r7, #15]
 800d6fe:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800d702:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 800d704:	7bfb      	ldrb	r3, [r7, #15]
 800d706:	f023 0302 	bic.w	r3, r3, #2
 800d70a:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 800d70c:	7bfb      	ldrb	r3, [r7, #15]
 800d70e:	f043 0302 	orr.w	r3, r3, #2
 800d712:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 800d714:	88fb      	ldrh	r3, [r7, #6]
 800d716:	b2db      	uxtb	r3, r3
 800d718:	7bfa      	ldrb	r2, [r7, #15]
 800d71a:	2110      	movs	r1, #16
 800d71c:	4618      	mov	r0, r3
 800d71e:	f7fa f8df 	bl	80078e0 <SENSOR_IO_Write>
}  
 800d722:	bf00      	nop
 800d724:	3710      	adds	r7, #16
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}

0800d72a <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 800d72a:	b580      	push	{r7, lr}
 800d72c:	b084      	sub	sp, #16
 800d72e:	af00      	add	r7, sp, #0
 800d730:	4603      	mov	r3, r0
 800d732:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800d734:	2300      	movs	r3, #0
 800d736:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800d738:	2110      	movs	r1, #16
 800d73a:	20d4      	movs	r0, #212	; 0xd4
 800d73c:	f7fa f8ea 	bl	8007914 <SENSOR_IO_Read>
 800d740:	4603      	mov	r3, r0
 800d742:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800d744:	88fb      	ldrh	r3, [r7, #6]
 800d746:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800d748:	7bbb      	ldrb	r3, [r7, #14]
 800d74a:	f003 0303 	and.w	r3, r3, #3
 800d74e:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800d750:	7bba      	ldrb	r2, [r7, #14]
 800d752:	7bfb      	ldrb	r3, [r7, #15]
 800d754:	4313      	orrs	r3, r2
 800d756:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800d758:	7bbb      	ldrb	r3, [r7, #14]
 800d75a:	461a      	mov	r2, r3
 800d75c:	2110      	movs	r1, #16
 800d75e:	20d4      	movs	r0, #212	; 0xd4
 800d760:	f7fa f8be 	bl	80078e0 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800d764:	2112      	movs	r1, #18
 800d766:	20d4      	movs	r0, #212	; 0xd4
 800d768:	f7fa f8d4 	bl	8007914 <SENSOR_IO_Read>
 800d76c:	4603      	mov	r3, r0
 800d76e:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800d770:	88fb      	ldrh	r3, [r7, #6]
 800d772:	0a1b      	lsrs	r3, r3, #8
 800d774:	b29b      	uxth	r3, r3
 800d776:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800d778:	7bbb      	ldrb	r3, [r7, #14]
 800d77a:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800d77e:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800d780:	7bba      	ldrb	r2, [r7, #14]
 800d782:	7bfb      	ldrb	r3, [r7, #15]
 800d784:	4313      	orrs	r3, r2
 800d786:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800d788:	7bbb      	ldrb	r3, [r7, #14]
 800d78a:	461a      	mov	r2, r3
 800d78c:	2112      	movs	r1, #18
 800d78e:	20d4      	movs	r0, #212	; 0xd4
 800d790:	f7fa f8a6 	bl	80078e0 <SENSOR_IO_Write>
}
 800d794:	bf00      	nop
 800d796:	3710      	adds	r7, #16
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}

0800d79c <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b082      	sub	sp, #8
 800d7a0:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800d7a6:	2110      	movs	r1, #16
 800d7a8:	20d4      	movs	r0, #212	; 0xd4
 800d7aa:	f7fa f8b3 	bl	8007914 <SENSOR_IO_Read>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800d7b2:	79fb      	ldrb	r3, [r7, #7]
 800d7b4:	f003 030f 	and.w	r3, r3, #15
 800d7b8:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800d7ba:	79fb      	ldrb	r3, [r7, #7]
 800d7bc:	461a      	mov	r2, r3
 800d7be:	2110      	movs	r1, #16
 800d7c0:	20d4      	movs	r0, #212	; 0xd4
 800d7c2:	f7fa f88d 	bl	80078e0 <SENSOR_IO_Write>
}
 800d7c6:	bf00      	nop
 800d7c8:	3708      	adds	r7, #8
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}

0800d7ce <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 800d7ce:	b580      	push	{r7, lr}
 800d7d0:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 800d7d2:	f7fa f87b 	bl	80078cc <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800d7d6:	210f      	movs	r1, #15
 800d7d8:	20d4      	movs	r0, #212	; 0xd4
 800d7da:	f7fa f89b 	bl	8007914 <SENSOR_IO_Read>
 800d7de:	4603      	mov	r3, r0
}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	bd80      	pop	{r7, pc}

0800d7e4 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b084      	sub	sp, #16
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 800d7f2:	2115      	movs	r1, #21
 800d7f4:	20d4      	movs	r0, #212	; 0xd4
 800d7f6:	f7fa f88d 	bl	8007914 <SENSOR_IO_Read>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 800d7fe:	7bfb      	ldrb	r3, [r7, #15]
 800d800:	f023 0310 	bic.w	r3, r3, #16
 800d804:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800d806:	88fb      	ldrh	r3, [r7, #6]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d003      	beq.n	800d814 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 800d80c:	7bfb      	ldrb	r3, [r7, #15]
 800d80e:	f043 0310 	orr.w	r3, r3, #16
 800d812:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 800d814:	7bfb      	ldrb	r3, [r7, #15]
 800d816:	461a      	mov	r2, r3
 800d818:	2115      	movs	r1, #21
 800d81a:	20d4      	movs	r0, #212	; 0xd4
 800d81c:	f7fa f860 	bl	80078e0 <SENSOR_IO_Write>
}
 800d820:	bf00      	nop
 800d822:	3710      	adds	r7, #16
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}

0800d828 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b088      	sub	sp, #32
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 800d830:	2300      	movs	r3, #0
 800d832:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800d834:	2300      	movs	r3, #0
 800d836:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800d838:	f04f 0300 	mov.w	r3, #0
 800d83c:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800d83e:	2110      	movs	r1, #16
 800d840:	20d4      	movs	r0, #212	; 0xd4
 800d842:	f7fa f867 	bl	8007914 <SENSOR_IO_Read>
 800d846:	4603      	mov	r3, r0
 800d848:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800d84a:	f107 0208 	add.w	r2, r7, #8
 800d84e:	2306      	movs	r3, #6
 800d850:	2128      	movs	r1, #40	; 0x28
 800d852:	20d4      	movs	r0, #212	; 0xd4
 800d854:	f7fa f87c 	bl	8007950 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800d858:	2300      	movs	r3, #0
 800d85a:	77fb      	strb	r3, [r7, #31]
 800d85c:	e01f      	b.n	800d89e <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800d85e:	7ffb      	ldrb	r3, [r7, #31]
 800d860:	005b      	lsls	r3, r3, #1
 800d862:	3301      	adds	r3, #1
 800d864:	f107 0220 	add.w	r2, r7, #32
 800d868:	4413      	add	r3, r2
 800d86a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800d86e:	b29b      	uxth	r3, r3
 800d870:	021b      	lsls	r3, r3, #8
 800d872:	b29a      	uxth	r2, r3
 800d874:	7ffb      	ldrb	r3, [r7, #31]
 800d876:	005b      	lsls	r3, r3, #1
 800d878:	f107 0120 	add.w	r1, r7, #32
 800d87c:	440b      	add	r3, r1
 800d87e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800d882:	b29b      	uxth	r3, r3
 800d884:	4413      	add	r3, r2
 800d886:	b29a      	uxth	r2, r3
 800d888:	7ffb      	ldrb	r3, [r7, #31]
 800d88a:	b212      	sxth	r2, r2
 800d88c:	005b      	lsls	r3, r3, #1
 800d88e:	f107 0120 	add.w	r1, r7, #32
 800d892:	440b      	add	r3, r1
 800d894:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800d898:	7ffb      	ldrb	r3, [r7, #31]
 800d89a:	3301      	adds	r3, #1
 800d89c:	77fb      	strb	r3, [r7, #31]
 800d89e:	7ffb      	ldrb	r3, [r7, #31]
 800d8a0:	2b02      	cmp	r3, #2
 800d8a2:	d9dc      	bls.n	800d85e <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800d8a4:	7dfb      	ldrb	r3, [r7, #23]
 800d8a6:	f003 030c 	and.w	r3, r3, #12
 800d8aa:	2b0c      	cmp	r3, #12
 800d8ac:	d828      	bhi.n	800d900 <LSM6DSL_AccReadXYZ+0xd8>
 800d8ae:	a201      	add	r2, pc, #4	; (adr r2, 800d8b4 <LSM6DSL_AccReadXYZ+0x8c>)
 800d8b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8b4:	0800d8e9 	.word	0x0800d8e9
 800d8b8:	0800d901 	.word	0x0800d901
 800d8bc:	0800d901 	.word	0x0800d901
 800d8c0:	0800d901 	.word	0x0800d901
 800d8c4:	0800d8fb 	.word	0x0800d8fb
 800d8c8:	0800d901 	.word	0x0800d901
 800d8cc:	0800d901 	.word	0x0800d901
 800d8d0:	0800d901 	.word	0x0800d901
 800d8d4:	0800d8ef 	.word	0x0800d8ef
 800d8d8:	0800d901 	.word	0x0800d901
 800d8dc:	0800d901 	.word	0x0800d901
 800d8e0:	0800d901 	.word	0x0800d901
 800d8e4:	0800d8f5 	.word	0x0800d8f5
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 800d8e8:	4b19      	ldr	r3, [pc, #100]	; (800d950 <LSM6DSL_AccReadXYZ+0x128>)
 800d8ea:	61bb      	str	r3, [r7, #24]
    break;
 800d8ec:	e008      	b.n	800d900 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800d8ee:	4b19      	ldr	r3, [pc, #100]	; (800d954 <LSM6DSL_AccReadXYZ+0x12c>)
 800d8f0:	61bb      	str	r3, [r7, #24]
    break;
 800d8f2:	e005      	b.n	800d900 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 800d8f4:	4b18      	ldr	r3, [pc, #96]	; (800d958 <LSM6DSL_AccReadXYZ+0x130>)
 800d8f6:	61bb      	str	r3, [r7, #24]
    break;
 800d8f8:	e002      	b.n	800d900 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800d8fa:	4b18      	ldr	r3, [pc, #96]	; (800d95c <LSM6DSL_AccReadXYZ+0x134>)
 800d8fc:	61bb      	str	r3, [r7, #24]
    break;    
 800d8fe:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800d900:	2300      	movs	r3, #0
 800d902:	77fb      	strb	r3, [r7, #31]
 800d904:	e01b      	b.n	800d93e <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800d906:	7ffb      	ldrb	r3, [r7, #31]
 800d908:	005b      	lsls	r3, r3, #1
 800d90a:	f107 0220 	add.w	r2, r7, #32
 800d90e:	4413      	add	r3, r2
 800d910:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800d914:	ee07 3a90 	vmov	s15, r3
 800d918:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d91c:	edd7 7a06 	vldr	s15, [r7, #24]
 800d920:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d924:	7ffb      	ldrb	r3, [r7, #31]
 800d926:	005b      	lsls	r3, r3, #1
 800d928:	687a      	ldr	r2, [r7, #4]
 800d92a:	4413      	add	r3, r2
 800d92c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d930:	ee17 2a90 	vmov	r2, s15
 800d934:	b212      	sxth	r2, r2
 800d936:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800d938:	7ffb      	ldrb	r3, [r7, #31]
 800d93a:	3301      	adds	r3, #1
 800d93c:	77fb      	strb	r3, [r7, #31]
 800d93e:	7ffb      	ldrb	r3, [r7, #31]
 800d940:	2b02      	cmp	r3, #2
 800d942:	d9e0      	bls.n	800d906 <LSM6DSL_AccReadXYZ+0xde>
  }
}
 800d944:	bf00      	nop
 800d946:	bf00      	nop
 800d948:	3720      	adds	r7, #32
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}
 800d94e:	bf00      	nop
 800d950:	3d79db23 	.word	0x3d79db23
 800d954:	3df9db23 	.word	0x3df9db23
 800d958:	3e79db23 	.word	0x3e79db23
 800d95c:	3ef9db23 	.word	0x3ef9db23

0800d960 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 800d960:	b580      	push	{r7, lr}
 800d962:	b084      	sub	sp, #16
 800d964:	af00      	add	r7, sp, #0
 800d966:	4603      	mov	r3, r0
 800d968:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800d96a:	2300      	movs	r3, #0
 800d96c:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800d96e:	2111      	movs	r1, #17
 800d970:	20d4      	movs	r0, #212	; 0xd4
 800d972:	f7f9 ffcf 	bl	8007914 <SENSOR_IO_Read>
 800d976:	4603      	mov	r3, r0
 800d978:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800d97a:	88fb      	ldrh	r3, [r7, #6]
 800d97c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800d97e:	7bbb      	ldrb	r3, [r7, #14]
 800d980:	f003 0303 	and.w	r3, r3, #3
 800d984:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800d986:	7bba      	ldrb	r2, [r7, #14]
 800d988:	7bfb      	ldrb	r3, [r7, #15]
 800d98a:	4313      	orrs	r3, r2
 800d98c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 800d98e:	7bbb      	ldrb	r3, [r7, #14]
 800d990:	461a      	mov	r2, r3
 800d992:	2111      	movs	r1, #17
 800d994:	20d4      	movs	r0, #212	; 0xd4
 800d996:	f7f9 ffa3 	bl	80078e0 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800d99a:	2112      	movs	r1, #18
 800d99c:	20d4      	movs	r0, #212	; 0xd4
 800d99e:	f7f9 ffb9 	bl	8007914 <SENSOR_IO_Read>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800d9a6:	88fb      	ldrh	r3, [r7, #6]
 800d9a8:	0a1b      	lsrs	r3, r3, #8
 800d9aa:	b29b      	uxth	r3, r3
 800d9ac:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800d9ae:	7bbb      	ldrb	r3, [r7, #14]
 800d9b0:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800d9b4:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800d9b6:	7bba      	ldrb	r2, [r7, #14]
 800d9b8:	7bfb      	ldrb	r3, [r7, #15]
 800d9ba:	4313      	orrs	r3, r2
 800d9bc:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800d9be:	7bbb      	ldrb	r3, [r7, #14]
 800d9c0:	461a      	mov	r2, r3
 800d9c2:	2112      	movs	r1, #18
 800d9c4:	20d4      	movs	r0, #212	; 0xd4
 800d9c6:	f7f9 ff8b 	bl	80078e0 <SENSOR_IO_Write>
}
 800d9ca:	bf00      	nop
 800d9cc:	3710      	adds	r7, #16
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}

0800d9d2 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 800d9d2:	b580      	push	{r7, lr}
 800d9d4:	b082      	sub	sp, #8
 800d9d6:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800d9d8:	2300      	movs	r3, #0
 800d9da:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800d9dc:	2111      	movs	r1, #17
 800d9de:	20d4      	movs	r0, #212	; 0xd4
 800d9e0:	f7f9 ff98 	bl	8007914 <SENSOR_IO_Read>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800d9e8:	79fb      	ldrb	r3, [r7, #7]
 800d9ea:	f003 030f 	and.w	r3, r3, #15
 800d9ee:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 800d9f0:	79fb      	ldrb	r3, [r7, #7]
 800d9f2:	461a      	mov	r2, r3
 800d9f4:	2111      	movs	r1, #17
 800d9f6:	20d4      	movs	r0, #212	; 0xd4
 800d9f8:	f7f9 ff72 	bl	80078e0 <SENSOR_IO_Write>
}
 800d9fc:	bf00      	nop
 800d9fe:	3708      	adds	r7, #8
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}

0800da04 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 800da08:	f7f9 ff60 	bl	80078cc <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 800da0c:	210f      	movs	r1, #15
 800da0e:	20d4      	movs	r0, #212	; 0xd4
 800da10:	f7f9 ff80 	bl	8007914 <SENSOR_IO_Read>
 800da14:	4603      	mov	r3, r0
}
 800da16:	4618      	mov	r0, r3
 800da18:	bd80      	pop	{r7, pc}

0800da1a <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 800da1a:	b580      	push	{r7, lr}
 800da1c:	b084      	sub	sp, #16
 800da1e:	af00      	add	r7, sp, #0
 800da20:	4603      	mov	r3, r0
 800da22:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800da24:	2300      	movs	r3, #0
 800da26:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 800da28:	2116      	movs	r1, #22
 800da2a:	20d4      	movs	r0, #212	; 0xd4
 800da2c:	f7f9 ff72 	bl	8007914 <SENSOR_IO_Read>
 800da30:	4603      	mov	r3, r0
 800da32:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 800da34:	7bfb      	ldrb	r3, [r7, #15]
 800da36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da3a:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800da3c:	88fb      	ldrh	r3, [r7, #6]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d003      	beq.n	800da4a <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 800da42:	7bfb      	ldrb	r3, [r7, #15]
 800da44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800da48:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 800da4a:	7bfb      	ldrb	r3, [r7, #15]
 800da4c:	461a      	mov	r2, r3
 800da4e:	2116      	movs	r1, #22
 800da50:	20d4      	movs	r0, #212	; 0xd4
 800da52:	f7f9 ff45 	bl	80078e0 <SENSOR_IO_Write>
}
 800da56:	bf00      	nop
 800da58:	3710      	adds	r7, #16
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}
	...

0800da60 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b088      	sub	sp, #32
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 800da68:	2300      	movs	r3, #0
 800da6a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800da6c:	2300      	movs	r3, #0
 800da6e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800da70:	f04f 0300 	mov.w	r3, #0
 800da74:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800da76:	2111      	movs	r1, #17
 800da78:	20d4      	movs	r0, #212	; 0xd4
 800da7a:	f7f9 ff4b 	bl	8007914 <SENSOR_IO_Read>
 800da7e:	4603      	mov	r3, r0
 800da80:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 800da82:	f107 0208 	add.w	r2, r7, #8
 800da86:	2306      	movs	r3, #6
 800da88:	2122      	movs	r1, #34	; 0x22
 800da8a:	20d4      	movs	r0, #212	; 0xd4
 800da8c:	f7f9 ff60 	bl	8007950 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800da90:	2300      	movs	r3, #0
 800da92:	77fb      	strb	r3, [r7, #31]
 800da94:	e01f      	b.n	800dad6 <LSM6DSL_GyroReadXYZAngRate+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800da96:	7ffb      	ldrb	r3, [r7, #31]
 800da98:	005b      	lsls	r3, r3, #1
 800da9a:	3301      	adds	r3, #1
 800da9c:	f107 0220 	add.w	r2, r7, #32
 800daa0:	4413      	add	r3, r2
 800daa2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800daa6:	b29b      	uxth	r3, r3
 800daa8:	021b      	lsls	r3, r3, #8
 800daaa:	b29a      	uxth	r2, r3
 800daac:	7ffb      	ldrb	r3, [r7, #31]
 800daae:	005b      	lsls	r3, r3, #1
 800dab0:	f107 0120 	add.w	r1, r7, #32
 800dab4:	440b      	add	r3, r1
 800dab6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800daba:	b29b      	uxth	r3, r3
 800dabc:	4413      	add	r3, r2
 800dabe:	b29a      	uxth	r2, r3
 800dac0:	7ffb      	ldrb	r3, [r7, #31]
 800dac2:	b212      	sxth	r2, r2
 800dac4:	005b      	lsls	r3, r3, #1
 800dac6:	f107 0120 	add.w	r1, r7, #32
 800daca:	440b      	add	r3, r1
 800dacc:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800dad0:	7ffb      	ldrb	r3, [r7, #31]
 800dad2:	3301      	adds	r3, #1
 800dad4:	77fb      	strb	r3, [r7, #31]
 800dad6:	7ffb      	ldrb	r3, [r7, #31]
 800dad8:	2b02      	cmp	r3, #2
 800dada:	d9dc      	bls.n	800da96 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 800dadc:	7dfb      	ldrb	r3, [r7, #23]
 800dade:	f003 030c 	and.w	r3, r3, #12
 800dae2:	2b0c      	cmp	r3, #12
 800dae4:	d828      	bhi.n	800db38 <LSM6DSL_GyroReadXYZAngRate+0xd8>
 800dae6:	a201      	add	r2, pc, #4	; (adr r2, 800daec <LSM6DSL_GyroReadXYZAngRate+0x8c>)
 800dae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daec:	0800db21 	.word	0x0800db21
 800daf0:	0800db39 	.word	0x0800db39
 800daf4:	0800db39 	.word	0x0800db39
 800daf8:	0800db39 	.word	0x0800db39
 800dafc:	0800db27 	.word	0x0800db27
 800db00:	0800db39 	.word	0x0800db39
 800db04:	0800db39 	.word	0x0800db39
 800db08:	0800db39 	.word	0x0800db39
 800db0c:	0800db2d 	.word	0x0800db2d
 800db10:	0800db39 	.word	0x0800db39
 800db14:	0800db39 	.word	0x0800db39
 800db18:	0800db39 	.word	0x0800db39
 800db1c:	0800db33 	.word	0x0800db33
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 800db20:	4b17      	ldr	r3, [pc, #92]	; (800db80 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 800db22:	61bb      	str	r3, [r7, #24]
    break;
 800db24:	e008      	b.n	800db38 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 800db26:	4b17      	ldr	r3, [pc, #92]	; (800db84 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 800db28:	61bb      	str	r3, [r7, #24]
    break;
 800db2a:	e005      	b.n	800db38 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 800db2c:	4b16      	ldr	r3, [pc, #88]	; (800db88 <LSM6DSL_GyroReadXYZAngRate+0x128>)
 800db2e:	61bb      	str	r3, [r7, #24]
    break;
 800db30:	e002      	b.n	800db38 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 800db32:	4b16      	ldr	r3, [pc, #88]	; (800db8c <LSM6DSL_GyroReadXYZAngRate+0x12c>)
 800db34:	61bb      	str	r3, [r7, #24]
    break;    
 800db36:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800db38:	2300      	movs	r3, #0
 800db3a:	77fb      	strb	r3, [r7, #31]
 800db3c:	e017      	b.n	800db6e <LSM6DSL_GyroReadXYZAngRate+0x10e>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 800db3e:	7ffb      	ldrb	r3, [r7, #31]
 800db40:	005b      	lsls	r3, r3, #1
 800db42:	f107 0220 	add.w	r2, r7, #32
 800db46:	4413      	add	r3, r2
 800db48:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800db4c:	ee07 3a90 	vmov	s15, r3
 800db50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800db54:	7ffb      	ldrb	r3, [r7, #31]
 800db56:	009b      	lsls	r3, r3, #2
 800db58:	687a      	ldr	r2, [r7, #4]
 800db5a:	4413      	add	r3, r2
 800db5c:	edd7 7a06 	vldr	s15, [r7, #24]
 800db60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db64:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 800db68:	7ffb      	ldrb	r3, [r7, #31]
 800db6a:	3301      	adds	r3, #1
 800db6c:	77fb      	strb	r3, [r7, #31]
 800db6e:	7ffb      	ldrb	r3, [r7, #31]
 800db70:	2b02      	cmp	r3, #2
 800db72:	d9e4      	bls.n	800db3e <LSM6DSL_GyroReadXYZAngRate+0xde>
  }
}
 800db74:	bf00      	nop
 800db76:	bf00      	nop
 800db78:	3720      	adds	r7, #32
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}
 800db7e:	bf00      	nop
 800db80:	410c0000 	.word	0x410c0000
 800db84:	418c0000 	.word	0x418c0000
 800db88:	420c0000 	.word	0x420c0000
 800db8c:	428c0000 	.word	0x428c0000

0800db90 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b082      	sub	sp, #8
 800db94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800db96:	2300      	movs	r3, #0
 800db98:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800db9a:	2003      	movs	r0, #3
 800db9c:	f000 f960 	bl	800de60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800dba0:	2000      	movs	r0, #0
 800dba2:	f000 f80d 	bl	800dbc0 <HAL_InitTick>
 800dba6:	4603      	mov	r3, r0
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d002      	beq.n	800dbb2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800dbac:	2301      	movs	r3, #1
 800dbae:	71fb      	strb	r3, [r7, #7]
 800dbb0:	e001      	b.n	800dbb6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800dbb2:	f7f9 fac1 	bl	8007138 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800dbb6:	79fb      	ldrb	r3, [r7, #7]
}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	3708      	adds	r7, #8
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}

0800dbc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b084      	sub	sp, #16
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800dbcc:	4b17      	ldr	r3, [pc, #92]	; (800dc2c <HAL_InitTick+0x6c>)
 800dbce:	781b      	ldrb	r3, [r3, #0]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d023      	beq.n	800dc1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800dbd4:	4b16      	ldr	r3, [pc, #88]	; (800dc30 <HAL_InitTick+0x70>)
 800dbd6:	681a      	ldr	r2, [r3, #0]
 800dbd8:	4b14      	ldr	r3, [pc, #80]	; (800dc2c <HAL_InitTick+0x6c>)
 800dbda:	781b      	ldrb	r3, [r3, #0]
 800dbdc:	4619      	mov	r1, r3
 800dbde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dbe2:	fbb3 f3f1 	udiv	r3, r3, r1
 800dbe6:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbea:	4618      	mov	r0, r3
 800dbec:	f000 f96d 	bl	800deca <HAL_SYSTICK_Config>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d10f      	bne.n	800dc16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2b0f      	cmp	r3, #15
 800dbfa:	d809      	bhi.n	800dc10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	6879      	ldr	r1, [r7, #4]
 800dc00:	f04f 30ff 	mov.w	r0, #4294967295
 800dc04:	f000 f937 	bl	800de76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800dc08:	4a0a      	ldr	r2, [pc, #40]	; (800dc34 <HAL_InitTick+0x74>)
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	6013      	str	r3, [r2, #0]
 800dc0e:	e007      	b.n	800dc20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800dc10:	2301      	movs	r3, #1
 800dc12:	73fb      	strb	r3, [r7, #15]
 800dc14:	e004      	b.n	800dc20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800dc16:	2301      	movs	r3, #1
 800dc18:	73fb      	strb	r3, [r7, #15]
 800dc1a:	e001      	b.n	800dc20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800dc20:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc22:	4618      	mov	r0, r3
 800dc24:	3710      	adds	r7, #16
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}
 800dc2a:	bf00      	nop
 800dc2c:	20000a78 	.word	0x20000a78
 800dc30:	200006f0 	.word	0x200006f0
 800dc34:	20000a74 	.word	0x20000a74

0800dc38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800dc38:	b480      	push	{r7}
 800dc3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800dc3c:	4b06      	ldr	r3, [pc, #24]	; (800dc58 <HAL_IncTick+0x20>)
 800dc3e:	781b      	ldrb	r3, [r3, #0]
 800dc40:	461a      	mov	r2, r3
 800dc42:	4b06      	ldr	r3, [pc, #24]	; (800dc5c <HAL_IncTick+0x24>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	4413      	add	r3, r2
 800dc48:	4a04      	ldr	r2, [pc, #16]	; (800dc5c <HAL_IncTick+0x24>)
 800dc4a:	6013      	str	r3, [r2, #0]
}
 800dc4c:	bf00      	nop
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc54:	4770      	bx	lr
 800dc56:	bf00      	nop
 800dc58:	20000a78 	.word	0x20000a78
 800dc5c:	20002ce4 	.word	0x20002ce4

0800dc60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800dc60:	b480      	push	{r7}
 800dc62:	af00      	add	r7, sp, #0
  return uwTick;
 800dc64:	4b03      	ldr	r3, [pc, #12]	; (800dc74 <HAL_GetTick+0x14>)
 800dc66:	681b      	ldr	r3, [r3, #0]
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc70:	4770      	bx	lr
 800dc72:	bf00      	nop
 800dc74:	20002ce4 	.word	0x20002ce4

0800dc78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b084      	sub	sp, #16
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800dc80:	f7ff ffee 	bl	800dc60 <HAL_GetTick>
 800dc84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc90:	d005      	beq.n	800dc9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800dc92:	4b0a      	ldr	r3, [pc, #40]	; (800dcbc <HAL_Delay+0x44>)
 800dc94:	781b      	ldrb	r3, [r3, #0]
 800dc96:	461a      	mov	r2, r3
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	4413      	add	r3, r2
 800dc9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800dc9e:	bf00      	nop
 800dca0:	f7ff ffde 	bl	800dc60 <HAL_GetTick>
 800dca4:	4602      	mov	r2, r0
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	1ad3      	subs	r3, r2, r3
 800dcaa:	68fa      	ldr	r2, [r7, #12]
 800dcac:	429a      	cmp	r2, r3
 800dcae:	d8f7      	bhi.n	800dca0 <HAL_Delay+0x28>
  {
  }
}
 800dcb0:	bf00      	nop
 800dcb2:	bf00      	nop
 800dcb4:	3710      	adds	r7, #16
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	bd80      	pop	{r7, pc}
 800dcba:	bf00      	nop
 800dcbc:	20000a78 	.word	0x20000a78

0800dcc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800dcc0:	b480      	push	{r7}
 800dcc2:	b085      	sub	sp, #20
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f003 0307 	and.w	r3, r3, #7
 800dcce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800dcd0:	4b0c      	ldr	r3, [pc, #48]	; (800dd04 <__NVIC_SetPriorityGrouping+0x44>)
 800dcd2:	68db      	ldr	r3, [r3, #12]
 800dcd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800dcd6:	68ba      	ldr	r2, [r7, #8]
 800dcd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800dcdc:	4013      	ands	r3, r2
 800dcde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800dce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800dcec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dcf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800dcf2:	4a04      	ldr	r2, [pc, #16]	; (800dd04 <__NVIC_SetPriorityGrouping+0x44>)
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	60d3      	str	r3, [r2, #12]
}
 800dcf8:	bf00      	nop
 800dcfa:	3714      	adds	r7, #20
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd02:	4770      	bx	lr
 800dd04:	e000ed00 	.word	0xe000ed00

0800dd08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800dd08:	b480      	push	{r7}
 800dd0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800dd0c:	4b04      	ldr	r3, [pc, #16]	; (800dd20 <__NVIC_GetPriorityGrouping+0x18>)
 800dd0e:	68db      	ldr	r3, [r3, #12]
 800dd10:	0a1b      	lsrs	r3, r3, #8
 800dd12:	f003 0307 	and.w	r3, r3, #7
}
 800dd16:	4618      	mov	r0, r3
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1e:	4770      	bx	lr
 800dd20:	e000ed00 	.word	0xe000ed00

0800dd24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800dd24:	b480      	push	{r7}
 800dd26:	b083      	sub	sp, #12
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800dd2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	db0b      	blt.n	800dd4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800dd36:	79fb      	ldrb	r3, [r7, #7]
 800dd38:	f003 021f 	and.w	r2, r3, #31
 800dd3c:	4907      	ldr	r1, [pc, #28]	; (800dd5c <__NVIC_EnableIRQ+0x38>)
 800dd3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd42:	095b      	lsrs	r3, r3, #5
 800dd44:	2001      	movs	r0, #1
 800dd46:	fa00 f202 	lsl.w	r2, r0, r2
 800dd4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800dd4e:	bf00      	nop
 800dd50:	370c      	adds	r7, #12
 800dd52:	46bd      	mov	sp, r7
 800dd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd58:	4770      	bx	lr
 800dd5a:	bf00      	nop
 800dd5c:	e000e100 	.word	0xe000e100

0800dd60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800dd60:	b480      	push	{r7}
 800dd62:	b083      	sub	sp, #12
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	4603      	mov	r3, r0
 800dd68:	6039      	str	r1, [r7, #0]
 800dd6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800dd6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	db0a      	blt.n	800dd8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	b2da      	uxtb	r2, r3
 800dd78:	490c      	ldr	r1, [pc, #48]	; (800ddac <__NVIC_SetPriority+0x4c>)
 800dd7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd7e:	0112      	lsls	r2, r2, #4
 800dd80:	b2d2      	uxtb	r2, r2
 800dd82:	440b      	add	r3, r1
 800dd84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800dd88:	e00a      	b.n	800dda0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	b2da      	uxtb	r2, r3
 800dd8e:	4908      	ldr	r1, [pc, #32]	; (800ddb0 <__NVIC_SetPriority+0x50>)
 800dd90:	79fb      	ldrb	r3, [r7, #7]
 800dd92:	f003 030f 	and.w	r3, r3, #15
 800dd96:	3b04      	subs	r3, #4
 800dd98:	0112      	lsls	r2, r2, #4
 800dd9a:	b2d2      	uxtb	r2, r2
 800dd9c:	440b      	add	r3, r1
 800dd9e:	761a      	strb	r2, [r3, #24]
}
 800dda0:	bf00      	nop
 800dda2:	370c      	adds	r7, #12
 800dda4:	46bd      	mov	sp, r7
 800dda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddaa:	4770      	bx	lr
 800ddac:	e000e100 	.word	0xe000e100
 800ddb0:	e000ed00 	.word	0xe000ed00

0800ddb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ddb4:	b480      	push	{r7}
 800ddb6:	b089      	sub	sp, #36	; 0x24
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	60f8      	str	r0, [r7, #12]
 800ddbc:	60b9      	str	r1, [r7, #8]
 800ddbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	f003 0307 	and.w	r3, r3, #7
 800ddc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ddc8:	69fb      	ldr	r3, [r7, #28]
 800ddca:	f1c3 0307 	rsb	r3, r3, #7
 800ddce:	2b04      	cmp	r3, #4
 800ddd0:	bf28      	it	cs
 800ddd2:	2304      	movcs	r3, #4
 800ddd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ddd6:	69fb      	ldr	r3, [r7, #28]
 800ddd8:	3304      	adds	r3, #4
 800ddda:	2b06      	cmp	r3, #6
 800dddc:	d902      	bls.n	800dde4 <NVIC_EncodePriority+0x30>
 800ddde:	69fb      	ldr	r3, [r7, #28]
 800dde0:	3b03      	subs	r3, #3
 800dde2:	e000      	b.n	800dde6 <NVIC_EncodePriority+0x32>
 800dde4:	2300      	movs	r3, #0
 800dde6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800dde8:	f04f 32ff 	mov.w	r2, #4294967295
 800ddec:	69bb      	ldr	r3, [r7, #24]
 800ddee:	fa02 f303 	lsl.w	r3, r2, r3
 800ddf2:	43da      	mvns	r2, r3
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	401a      	ands	r2, r3
 800ddf8:	697b      	ldr	r3, [r7, #20]
 800ddfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ddfc:	f04f 31ff 	mov.w	r1, #4294967295
 800de00:	697b      	ldr	r3, [r7, #20]
 800de02:	fa01 f303 	lsl.w	r3, r1, r3
 800de06:	43d9      	mvns	r1, r3
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800de0c:	4313      	orrs	r3, r2
         );
}
 800de0e:	4618      	mov	r0, r3
 800de10:	3724      	adds	r7, #36	; 0x24
 800de12:	46bd      	mov	sp, r7
 800de14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de18:	4770      	bx	lr
	...

0800de1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b082      	sub	sp, #8
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	3b01      	subs	r3, #1
 800de28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800de2c:	d301      	bcc.n	800de32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800de2e:	2301      	movs	r3, #1
 800de30:	e00f      	b.n	800de52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800de32:	4a0a      	ldr	r2, [pc, #40]	; (800de5c <SysTick_Config+0x40>)
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	3b01      	subs	r3, #1
 800de38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800de3a:	210f      	movs	r1, #15
 800de3c:	f04f 30ff 	mov.w	r0, #4294967295
 800de40:	f7ff ff8e 	bl	800dd60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800de44:	4b05      	ldr	r3, [pc, #20]	; (800de5c <SysTick_Config+0x40>)
 800de46:	2200      	movs	r2, #0
 800de48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800de4a:	4b04      	ldr	r3, [pc, #16]	; (800de5c <SysTick_Config+0x40>)
 800de4c:	2207      	movs	r2, #7
 800de4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800de50:	2300      	movs	r3, #0
}
 800de52:	4618      	mov	r0, r3
 800de54:	3708      	adds	r7, #8
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
 800de5a:	bf00      	nop
 800de5c:	e000e010 	.word	0xe000e010

0800de60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b082      	sub	sp, #8
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	f7ff ff29 	bl	800dcc0 <__NVIC_SetPriorityGrouping>
}
 800de6e:	bf00      	nop
 800de70:	3708      	adds	r7, #8
 800de72:	46bd      	mov	sp, r7
 800de74:	bd80      	pop	{r7, pc}

0800de76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800de76:	b580      	push	{r7, lr}
 800de78:	b086      	sub	sp, #24
 800de7a:	af00      	add	r7, sp, #0
 800de7c:	4603      	mov	r3, r0
 800de7e:	60b9      	str	r1, [r7, #8]
 800de80:	607a      	str	r2, [r7, #4]
 800de82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800de84:	2300      	movs	r3, #0
 800de86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800de88:	f7ff ff3e 	bl	800dd08 <__NVIC_GetPriorityGrouping>
 800de8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800de8e:	687a      	ldr	r2, [r7, #4]
 800de90:	68b9      	ldr	r1, [r7, #8]
 800de92:	6978      	ldr	r0, [r7, #20]
 800de94:	f7ff ff8e 	bl	800ddb4 <NVIC_EncodePriority>
 800de98:	4602      	mov	r2, r0
 800de9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de9e:	4611      	mov	r1, r2
 800dea0:	4618      	mov	r0, r3
 800dea2:	f7ff ff5d 	bl	800dd60 <__NVIC_SetPriority>
}
 800dea6:	bf00      	nop
 800dea8:	3718      	adds	r7, #24
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}

0800deae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800deae:	b580      	push	{r7, lr}
 800deb0:	b082      	sub	sp, #8
 800deb2:	af00      	add	r7, sp, #0
 800deb4:	4603      	mov	r3, r0
 800deb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800deb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800debc:	4618      	mov	r0, r3
 800debe:	f7ff ff31 	bl	800dd24 <__NVIC_EnableIRQ>
}
 800dec2:	bf00      	nop
 800dec4:	3708      	adds	r7, #8
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}

0800deca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800deca:	b580      	push	{r7, lr}
 800decc:	b082      	sub	sp, #8
 800dece:	af00      	add	r7, sp, #0
 800ded0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f7ff ffa2 	bl	800de1c <SysTick_Config>
 800ded8:	4603      	mov	r3, r0
}
 800deda:	4618      	mov	r0, r3
 800dedc:	3708      	adds	r7, #8
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}

0800dee2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800dee2:	b480      	push	{r7}
 800dee4:	b085      	sub	sp, #20
 800dee6:	af00      	add	r7, sp, #0
 800dee8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800deea:	2300      	movs	r3, #0
 800deec:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800def4:	b2db      	uxtb	r3, r3
 800def6:	2b02      	cmp	r3, #2
 800def8:	d008      	beq.n	800df0c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2204      	movs	r2, #4
 800defe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2200      	movs	r2, #0
 800df04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800df08:	2301      	movs	r3, #1
 800df0a:	e022      	b.n	800df52 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	681a      	ldr	r2, [r3, #0]
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	f022 020e 	bic.w	r2, r2, #14
 800df1a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	681a      	ldr	r2, [r3, #0]
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	f022 0201 	bic.w	r2, r2, #1
 800df2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df30:	f003 021c 	and.w	r2, r3, #28
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df38:	2101      	movs	r1, #1
 800df3a:	fa01 f202 	lsl.w	r2, r1, r2
 800df3e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2201      	movs	r2, #1
 800df44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2200      	movs	r2, #0
 800df4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800df50:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800df52:	4618      	mov	r0, r3
 800df54:	3714      	adds	r7, #20
 800df56:	46bd      	mov	sp, r7
 800df58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5c:	4770      	bx	lr

0800df5e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800df5e:	b580      	push	{r7, lr}
 800df60:	b084      	sub	sp, #16
 800df62:	af00      	add	r7, sp, #0
 800df64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800df66:	2300      	movs	r3, #0
 800df68:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800df70:	b2db      	uxtb	r3, r3
 800df72:	2b02      	cmp	r3, #2
 800df74:	d005      	beq.n	800df82 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	2204      	movs	r2, #4
 800df7a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800df7c:	2301      	movs	r3, #1
 800df7e:	73fb      	strb	r3, [r7, #15]
 800df80:	e029      	b.n	800dfd6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	681a      	ldr	r2, [r3, #0]
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	f022 020e 	bic.w	r2, r2, #14
 800df90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	681a      	ldr	r2, [r3, #0]
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	f022 0201 	bic.w	r2, r2, #1
 800dfa0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfa6:	f003 021c 	and.w	r2, r3, #28
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfae:	2101      	movs	r1, #1
 800dfb0:	fa01 f202 	lsl.w	r2, r1, r2
 800dfb4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2201      	movs	r2, #1
 800dfba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d003      	beq.n	800dfd6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	4798      	blx	r3
    }
  }
  return status;
 800dfd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfd8:	4618      	mov	r0, r3
 800dfda:	3710      	adds	r7, #16
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}

0800dfe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	b087      	sub	sp, #28
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
 800dfe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800dfea:	2300      	movs	r3, #0
 800dfec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800dfee:	e17f      	b.n	800e2f0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	681a      	ldr	r2, [r3, #0]
 800dff4:	2101      	movs	r1, #1
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	fa01 f303 	lsl.w	r3, r1, r3
 800dffc:	4013      	ands	r3, r2
 800dffe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	2b00      	cmp	r3, #0
 800e004:	f000 8171 	beq.w	800e2ea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	685b      	ldr	r3, [r3, #4]
 800e00c:	f003 0303 	and.w	r3, r3, #3
 800e010:	2b01      	cmp	r3, #1
 800e012:	d005      	beq.n	800e020 <HAL_GPIO_Init+0x40>
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	685b      	ldr	r3, [r3, #4]
 800e018:	f003 0303 	and.w	r3, r3, #3
 800e01c:	2b02      	cmp	r3, #2
 800e01e:	d130      	bne.n	800e082 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	689b      	ldr	r3, [r3, #8]
 800e024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	005b      	lsls	r3, r3, #1
 800e02a:	2203      	movs	r2, #3
 800e02c:	fa02 f303 	lsl.w	r3, r2, r3
 800e030:	43db      	mvns	r3, r3
 800e032:	693a      	ldr	r2, [r7, #16]
 800e034:	4013      	ands	r3, r2
 800e036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	68da      	ldr	r2, [r3, #12]
 800e03c:	697b      	ldr	r3, [r7, #20]
 800e03e:	005b      	lsls	r3, r3, #1
 800e040:	fa02 f303 	lsl.w	r3, r2, r3
 800e044:	693a      	ldr	r2, [r7, #16]
 800e046:	4313      	orrs	r3, r2
 800e048:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	693a      	ldr	r2, [r7, #16]
 800e04e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	685b      	ldr	r3, [r3, #4]
 800e054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e056:	2201      	movs	r2, #1
 800e058:	697b      	ldr	r3, [r7, #20]
 800e05a:	fa02 f303 	lsl.w	r3, r2, r3
 800e05e:	43db      	mvns	r3, r3
 800e060:	693a      	ldr	r2, [r7, #16]
 800e062:	4013      	ands	r3, r2
 800e064:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	685b      	ldr	r3, [r3, #4]
 800e06a:	091b      	lsrs	r3, r3, #4
 800e06c:	f003 0201 	and.w	r2, r3, #1
 800e070:	697b      	ldr	r3, [r7, #20]
 800e072:	fa02 f303 	lsl.w	r3, r2, r3
 800e076:	693a      	ldr	r2, [r7, #16]
 800e078:	4313      	orrs	r3, r2
 800e07a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	693a      	ldr	r2, [r7, #16]
 800e080:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	685b      	ldr	r3, [r3, #4]
 800e086:	f003 0303 	and.w	r3, r3, #3
 800e08a:	2b03      	cmp	r3, #3
 800e08c:	d118      	bne.n	800e0c0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e092:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800e094:	2201      	movs	r2, #1
 800e096:	697b      	ldr	r3, [r7, #20]
 800e098:	fa02 f303 	lsl.w	r3, r2, r3
 800e09c:	43db      	mvns	r3, r3
 800e09e:	693a      	ldr	r2, [r7, #16]
 800e0a0:	4013      	ands	r3, r2
 800e0a2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	685b      	ldr	r3, [r3, #4]
 800e0a8:	08db      	lsrs	r3, r3, #3
 800e0aa:	f003 0201 	and.w	r2, r3, #1
 800e0ae:	697b      	ldr	r3, [r7, #20]
 800e0b0:	fa02 f303 	lsl.w	r3, r2, r3
 800e0b4:	693a      	ldr	r2, [r7, #16]
 800e0b6:	4313      	orrs	r3, r2
 800e0b8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	693a      	ldr	r2, [r7, #16]
 800e0be:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	685b      	ldr	r3, [r3, #4]
 800e0c4:	f003 0303 	and.w	r3, r3, #3
 800e0c8:	2b03      	cmp	r3, #3
 800e0ca:	d017      	beq.n	800e0fc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	68db      	ldr	r3, [r3, #12]
 800e0d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	005b      	lsls	r3, r3, #1
 800e0d6:	2203      	movs	r2, #3
 800e0d8:	fa02 f303 	lsl.w	r3, r2, r3
 800e0dc:	43db      	mvns	r3, r3
 800e0de:	693a      	ldr	r2, [r7, #16]
 800e0e0:	4013      	ands	r3, r2
 800e0e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	689a      	ldr	r2, [r3, #8]
 800e0e8:	697b      	ldr	r3, [r7, #20]
 800e0ea:	005b      	lsls	r3, r3, #1
 800e0ec:	fa02 f303 	lsl.w	r3, r2, r3
 800e0f0:	693a      	ldr	r2, [r7, #16]
 800e0f2:	4313      	orrs	r3, r2
 800e0f4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	693a      	ldr	r2, [r7, #16]
 800e0fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	685b      	ldr	r3, [r3, #4]
 800e100:	f003 0303 	and.w	r3, r3, #3
 800e104:	2b02      	cmp	r3, #2
 800e106:	d123      	bne.n	800e150 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	08da      	lsrs	r2, r3, #3
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	3208      	adds	r2, #8
 800e110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e114:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800e116:	697b      	ldr	r3, [r7, #20]
 800e118:	f003 0307 	and.w	r3, r3, #7
 800e11c:	009b      	lsls	r3, r3, #2
 800e11e:	220f      	movs	r2, #15
 800e120:	fa02 f303 	lsl.w	r3, r2, r3
 800e124:	43db      	mvns	r3, r3
 800e126:	693a      	ldr	r2, [r7, #16]
 800e128:	4013      	ands	r3, r2
 800e12a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	691a      	ldr	r2, [r3, #16]
 800e130:	697b      	ldr	r3, [r7, #20]
 800e132:	f003 0307 	and.w	r3, r3, #7
 800e136:	009b      	lsls	r3, r3, #2
 800e138:	fa02 f303 	lsl.w	r3, r2, r3
 800e13c:	693a      	ldr	r2, [r7, #16]
 800e13e:	4313      	orrs	r3, r2
 800e140:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	08da      	lsrs	r2, r3, #3
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	3208      	adds	r2, #8
 800e14a:	6939      	ldr	r1, [r7, #16]
 800e14c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800e156:	697b      	ldr	r3, [r7, #20]
 800e158:	005b      	lsls	r3, r3, #1
 800e15a:	2203      	movs	r2, #3
 800e15c:	fa02 f303 	lsl.w	r3, r2, r3
 800e160:	43db      	mvns	r3, r3
 800e162:	693a      	ldr	r2, [r7, #16]
 800e164:	4013      	ands	r3, r2
 800e166:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	685b      	ldr	r3, [r3, #4]
 800e16c:	f003 0203 	and.w	r2, r3, #3
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	005b      	lsls	r3, r3, #1
 800e174:	fa02 f303 	lsl.w	r3, r2, r3
 800e178:	693a      	ldr	r2, [r7, #16]
 800e17a:	4313      	orrs	r3, r2
 800e17c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	693a      	ldr	r2, [r7, #16]
 800e182:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	685b      	ldr	r3, [r3, #4]
 800e188:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	f000 80ac 	beq.w	800e2ea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e192:	4b5f      	ldr	r3, [pc, #380]	; (800e310 <HAL_GPIO_Init+0x330>)
 800e194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e196:	4a5e      	ldr	r2, [pc, #376]	; (800e310 <HAL_GPIO_Init+0x330>)
 800e198:	f043 0301 	orr.w	r3, r3, #1
 800e19c:	6613      	str	r3, [r2, #96]	; 0x60
 800e19e:	4b5c      	ldr	r3, [pc, #368]	; (800e310 <HAL_GPIO_Init+0x330>)
 800e1a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e1a2:	f003 0301 	and.w	r3, r3, #1
 800e1a6:	60bb      	str	r3, [r7, #8]
 800e1a8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800e1aa:	4a5a      	ldr	r2, [pc, #360]	; (800e314 <HAL_GPIO_Init+0x334>)
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	089b      	lsrs	r3, r3, #2
 800e1b0:	3302      	adds	r3, #2
 800e1b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800e1b8:	697b      	ldr	r3, [r7, #20]
 800e1ba:	f003 0303 	and.w	r3, r3, #3
 800e1be:	009b      	lsls	r3, r3, #2
 800e1c0:	220f      	movs	r2, #15
 800e1c2:	fa02 f303 	lsl.w	r3, r2, r3
 800e1c6:	43db      	mvns	r3, r3
 800e1c8:	693a      	ldr	r2, [r7, #16]
 800e1ca:	4013      	ands	r3, r2
 800e1cc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800e1d4:	d025      	beq.n	800e222 <HAL_GPIO_Init+0x242>
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	4a4f      	ldr	r2, [pc, #316]	; (800e318 <HAL_GPIO_Init+0x338>)
 800e1da:	4293      	cmp	r3, r2
 800e1dc:	d01f      	beq.n	800e21e <HAL_GPIO_Init+0x23e>
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	4a4e      	ldr	r2, [pc, #312]	; (800e31c <HAL_GPIO_Init+0x33c>)
 800e1e2:	4293      	cmp	r3, r2
 800e1e4:	d019      	beq.n	800e21a <HAL_GPIO_Init+0x23a>
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	4a4d      	ldr	r2, [pc, #308]	; (800e320 <HAL_GPIO_Init+0x340>)
 800e1ea:	4293      	cmp	r3, r2
 800e1ec:	d013      	beq.n	800e216 <HAL_GPIO_Init+0x236>
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	4a4c      	ldr	r2, [pc, #304]	; (800e324 <HAL_GPIO_Init+0x344>)
 800e1f2:	4293      	cmp	r3, r2
 800e1f4:	d00d      	beq.n	800e212 <HAL_GPIO_Init+0x232>
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	4a4b      	ldr	r2, [pc, #300]	; (800e328 <HAL_GPIO_Init+0x348>)
 800e1fa:	4293      	cmp	r3, r2
 800e1fc:	d007      	beq.n	800e20e <HAL_GPIO_Init+0x22e>
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	4a4a      	ldr	r2, [pc, #296]	; (800e32c <HAL_GPIO_Init+0x34c>)
 800e202:	4293      	cmp	r3, r2
 800e204:	d101      	bne.n	800e20a <HAL_GPIO_Init+0x22a>
 800e206:	2306      	movs	r3, #6
 800e208:	e00c      	b.n	800e224 <HAL_GPIO_Init+0x244>
 800e20a:	2307      	movs	r3, #7
 800e20c:	e00a      	b.n	800e224 <HAL_GPIO_Init+0x244>
 800e20e:	2305      	movs	r3, #5
 800e210:	e008      	b.n	800e224 <HAL_GPIO_Init+0x244>
 800e212:	2304      	movs	r3, #4
 800e214:	e006      	b.n	800e224 <HAL_GPIO_Init+0x244>
 800e216:	2303      	movs	r3, #3
 800e218:	e004      	b.n	800e224 <HAL_GPIO_Init+0x244>
 800e21a:	2302      	movs	r3, #2
 800e21c:	e002      	b.n	800e224 <HAL_GPIO_Init+0x244>
 800e21e:	2301      	movs	r3, #1
 800e220:	e000      	b.n	800e224 <HAL_GPIO_Init+0x244>
 800e222:	2300      	movs	r3, #0
 800e224:	697a      	ldr	r2, [r7, #20]
 800e226:	f002 0203 	and.w	r2, r2, #3
 800e22a:	0092      	lsls	r2, r2, #2
 800e22c:	4093      	lsls	r3, r2
 800e22e:	693a      	ldr	r2, [r7, #16]
 800e230:	4313      	orrs	r3, r2
 800e232:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800e234:	4937      	ldr	r1, [pc, #220]	; (800e314 <HAL_GPIO_Init+0x334>)
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	089b      	lsrs	r3, r3, #2
 800e23a:	3302      	adds	r3, #2
 800e23c:	693a      	ldr	r2, [r7, #16]
 800e23e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800e242:	4b3b      	ldr	r3, [pc, #236]	; (800e330 <HAL_GPIO_Init+0x350>)
 800e244:	689b      	ldr	r3, [r3, #8]
 800e246:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	43db      	mvns	r3, r3
 800e24c:	693a      	ldr	r2, [r7, #16]
 800e24e:	4013      	ands	r3, r2
 800e250:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	685b      	ldr	r3, [r3, #4]
 800e256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d003      	beq.n	800e266 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800e25e:	693a      	ldr	r2, [r7, #16]
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	4313      	orrs	r3, r2
 800e264:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800e266:	4a32      	ldr	r2, [pc, #200]	; (800e330 <HAL_GPIO_Init+0x350>)
 800e268:	693b      	ldr	r3, [r7, #16]
 800e26a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800e26c:	4b30      	ldr	r3, [pc, #192]	; (800e330 <HAL_GPIO_Init+0x350>)
 800e26e:	68db      	ldr	r3, [r3, #12]
 800e270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	43db      	mvns	r3, r3
 800e276:	693a      	ldr	r2, [r7, #16]
 800e278:	4013      	ands	r3, r2
 800e27a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	685b      	ldr	r3, [r3, #4]
 800e280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e284:	2b00      	cmp	r3, #0
 800e286:	d003      	beq.n	800e290 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800e288:	693a      	ldr	r2, [r7, #16]
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	4313      	orrs	r3, r2
 800e28e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800e290:	4a27      	ldr	r2, [pc, #156]	; (800e330 <HAL_GPIO_Init+0x350>)
 800e292:	693b      	ldr	r3, [r7, #16]
 800e294:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800e296:	4b26      	ldr	r3, [pc, #152]	; (800e330 <HAL_GPIO_Init+0x350>)
 800e298:	685b      	ldr	r3, [r3, #4]
 800e29a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	43db      	mvns	r3, r3
 800e2a0:	693a      	ldr	r2, [r7, #16]
 800e2a2:	4013      	ands	r3, r2
 800e2a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	685b      	ldr	r3, [r3, #4]
 800e2aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d003      	beq.n	800e2ba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800e2b2:	693a      	ldr	r2, [r7, #16]
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	4313      	orrs	r3, r2
 800e2b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800e2ba:	4a1d      	ldr	r2, [pc, #116]	; (800e330 <HAL_GPIO_Init+0x350>)
 800e2bc:	693b      	ldr	r3, [r7, #16]
 800e2be:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800e2c0:	4b1b      	ldr	r3, [pc, #108]	; (800e330 <HAL_GPIO_Init+0x350>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	43db      	mvns	r3, r3
 800e2ca:	693a      	ldr	r2, [r7, #16]
 800e2cc:	4013      	ands	r3, r2
 800e2ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	685b      	ldr	r3, [r3, #4]
 800e2d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d003      	beq.n	800e2e4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800e2dc:	693a      	ldr	r2, [r7, #16]
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	4313      	orrs	r3, r2
 800e2e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800e2e4:	4a12      	ldr	r2, [pc, #72]	; (800e330 <HAL_GPIO_Init+0x350>)
 800e2e6:	693b      	ldr	r3, [r7, #16]
 800e2e8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800e2ea:	697b      	ldr	r3, [r7, #20]
 800e2ec:	3301      	adds	r3, #1
 800e2ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	681a      	ldr	r2, [r3, #0]
 800e2f4:	697b      	ldr	r3, [r7, #20]
 800e2f6:	fa22 f303 	lsr.w	r3, r2, r3
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	f47f ae78 	bne.w	800dff0 <HAL_GPIO_Init+0x10>
  }
}
 800e300:	bf00      	nop
 800e302:	bf00      	nop
 800e304:	371c      	adds	r7, #28
 800e306:	46bd      	mov	sp, r7
 800e308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30c:	4770      	bx	lr
 800e30e:	bf00      	nop
 800e310:	40021000 	.word	0x40021000
 800e314:	40010000 	.word	0x40010000
 800e318:	48000400 	.word	0x48000400
 800e31c:	48000800 	.word	0x48000800
 800e320:	48000c00 	.word	0x48000c00
 800e324:	48001000 	.word	0x48001000
 800e328:	48001400 	.word	0x48001400
 800e32c:	48001800 	.word	0x48001800
 800e330:	40010400 	.word	0x40010400

0800e334 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800e334:	b480      	push	{r7}
 800e336:	b087      	sub	sp, #28
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
 800e33c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800e33e:	2300      	movs	r3, #0
 800e340:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800e342:	e0cd      	b.n	800e4e0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800e344:	2201      	movs	r2, #1
 800e346:	697b      	ldr	r3, [r7, #20]
 800e348:	fa02 f303 	lsl.w	r3, r2, r3
 800e34c:	683a      	ldr	r2, [r7, #0]
 800e34e:	4013      	ands	r3, r2
 800e350:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800e352:	693b      	ldr	r3, [r7, #16]
 800e354:	2b00      	cmp	r3, #0
 800e356:	f000 80c0 	beq.w	800e4da <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800e35a:	4a68      	ldr	r2, [pc, #416]	; (800e4fc <HAL_GPIO_DeInit+0x1c8>)
 800e35c:	697b      	ldr	r3, [r7, #20]
 800e35e:	089b      	lsrs	r3, r3, #2
 800e360:	3302      	adds	r3, #2
 800e362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e366:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800e368:	697b      	ldr	r3, [r7, #20]
 800e36a:	f003 0303 	and.w	r3, r3, #3
 800e36e:	009b      	lsls	r3, r3, #2
 800e370:	220f      	movs	r2, #15
 800e372:	fa02 f303 	lsl.w	r3, r2, r3
 800e376:	68fa      	ldr	r2, [r7, #12]
 800e378:	4013      	ands	r3, r2
 800e37a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800e382:	d025      	beq.n	800e3d0 <HAL_GPIO_DeInit+0x9c>
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	4a5e      	ldr	r2, [pc, #376]	; (800e500 <HAL_GPIO_DeInit+0x1cc>)
 800e388:	4293      	cmp	r3, r2
 800e38a:	d01f      	beq.n	800e3cc <HAL_GPIO_DeInit+0x98>
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	4a5d      	ldr	r2, [pc, #372]	; (800e504 <HAL_GPIO_DeInit+0x1d0>)
 800e390:	4293      	cmp	r3, r2
 800e392:	d019      	beq.n	800e3c8 <HAL_GPIO_DeInit+0x94>
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	4a5c      	ldr	r2, [pc, #368]	; (800e508 <HAL_GPIO_DeInit+0x1d4>)
 800e398:	4293      	cmp	r3, r2
 800e39a:	d013      	beq.n	800e3c4 <HAL_GPIO_DeInit+0x90>
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	4a5b      	ldr	r2, [pc, #364]	; (800e50c <HAL_GPIO_DeInit+0x1d8>)
 800e3a0:	4293      	cmp	r3, r2
 800e3a2:	d00d      	beq.n	800e3c0 <HAL_GPIO_DeInit+0x8c>
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	4a5a      	ldr	r2, [pc, #360]	; (800e510 <HAL_GPIO_DeInit+0x1dc>)
 800e3a8:	4293      	cmp	r3, r2
 800e3aa:	d007      	beq.n	800e3bc <HAL_GPIO_DeInit+0x88>
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	4a59      	ldr	r2, [pc, #356]	; (800e514 <HAL_GPIO_DeInit+0x1e0>)
 800e3b0:	4293      	cmp	r3, r2
 800e3b2:	d101      	bne.n	800e3b8 <HAL_GPIO_DeInit+0x84>
 800e3b4:	2306      	movs	r3, #6
 800e3b6:	e00c      	b.n	800e3d2 <HAL_GPIO_DeInit+0x9e>
 800e3b8:	2307      	movs	r3, #7
 800e3ba:	e00a      	b.n	800e3d2 <HAL_GPIO_DeInit+0x9e>
 800e3bc:	2305      	movs	r3, #5
 800e3be:	e008      	b.n	800e3d2 <HAL_GPIO_DeInit+0x9e>
 800e3c0:	2304      	movs	r3, #4
 800e3c2:	e006      	b.n	800e3d2 <HAL_GPIO_DeInit+0x9e>
 800e3c4:	2303      	movs	r3, #3
 800e3c6:	e004      	b.n	800e3d2 <HAL_GPIO_DeInit+0x9e>
 800e3c8:	2302      	movs	r3, #2
 800e3ca:	e002      	b.n	800e3d2 <HAL_GPIO_DeInit+0x9e>
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	e000      	b.n	800e3d2 <HAL_GPIO_DeInit+0x9e>
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	697a      	ldr	r2, [r7, #20]
 800e3d4:	f002 0203 	and.w	r2, r2, #3
 800e3d8:	0092      	lsls	r2, r2, #2
 800e3da:	4093      	lsls	r3, r2
 800e3dc:	68fa      	ldr	r2, [r7, #12]
 800e3de:	429a      	cmp	r2, r3
 800e3e0:	d132      	bne.n	800e448 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800e3e2:	4b4d      	ldr	r3, [pc, #308]	; (800e518 <HAL_GPIO_DeInit+0x1e4>)
 800e3e4:	681a      	ldr	r2, [r3, #0]
 800e3e6:	693b      	ldr	r3, [r7, #16]
 800e3e8:	43db      	mvns	r3, r3
 800e3ea:	494b      	ldr	r1, [pc, #300]	; (800e518 <HAL_GPIO_DeInit+0x1e4>)
 800e3ec:	4013      	ands	r3, r2
 800e3ee:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800e3f0:	4b49      	ldr	r3, [pc, #292]	; (800e518 <HAL_GPIO_DeInit+0x1e4>)
 800e3f2:	685a      	ldr	r2, [r3, #4]
 800e3f4:	693b      	ldr	r3, [r7, #16]
 800e3f6:	43db      	mvns	r3, r3
 800e3f8:	4947      	ldr	r1, [pc, #284]	; (800e518 <HAL_GPIO_DeInit+0x1e4>)
 800e3fa:	4013      	ands	r3, r2
 800e3fc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800e3fe:	4b46      	ldr	r3, [pc, #280]	; (800e518 <HAL_GPIO_DeInit+0x1e4>)
 800e400:	68da      	ldr	r2, [r3, #12]
 800e402:	693b      	ldr	r3, [r7, #16]
 800e404:	43db      	mvns	r3, r3
 800e406:	4944      	ldr	r1, [pc, #272]	; (800e518 <HAL_GPIO_DeInit+0x1e4>)
 800e408:	4013      	ands	r3, r2
 800e40a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800e40c:	4b42      	ldr	r3, [pc, #264]	; (800e518 <HAL_GPIO_DeInit+0x1e4>)
 800e40e:	689a      	ldr	r2, [r3, #8]
 800e410:	693b      	ldr	r3, [r7, #16]
 800e412:	43db      	mvns	r3, r3
 800e414:	4940      	ldr	r1, [pc, #256]	; (800e518 <HAL_GPIO_DeInit+0x1e4>)
 800e416:	4013      	ands	r3, r2
 800e418:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800e41a:	697b      	ldr	r3, [r7, #20]
 800e41c:	f003 0303 	and.w	r3, r3, #3
 800e420:	009b      	lsls	r3, r3, #2
 800e422:	220f      	movs	r2, #15
 800e424:	fa02 f303 	lsl.w	r3, r2, r3
 800e428:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800e42a:	4a34      	ldr	r2, [pc, #208]	; (800e4fc <HAL_GPIO_DeInit+0x1c8>)
 800e42c:	697b      	ldr	r3, [r7, #20]
 800e42e:	089b      	lsrs	r3, r3, #2
 800e430:	3302      	adds	r3, #2
 800e432:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	43da      	mvns	r2, r3
 800e43a:	4830      	ldr	r0, [pc, #192]	; (800e4fc <HAL_GPIO_DeInit+0x1c8>)
 800e43c:	697b      	ldr	r3, [r7, #20]
 800e43e:	089b      	lsrs	r3, r3, #2
 800e440:	400a      	ands	r2, r1
 800e442:	3302      	adds	r3, #2
 800e444:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681a      	ldr	r2, [r3, #0]
 800e44c:	697b      	ldr	r3, [r7, #20]
 800e44e:	005b      	lsls	r3, r3, #1
 800e450:	2103      	movs	r1, #3
 800e452:	fa01 f303 	lsl.w	r3, r1, r3
 800e456:	431a      	orrs	r2, r3
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800e45c:	697b      	ldr	r3, [r7, #20]
 800e45e:	08da      	lsrs	r2, r3, #3
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	3208      	adds	r2, #8
 800e464:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e468:	697b      	ldr	r3, [r7, #20]
 800e46a:	f003 0307 	and.w	r3, r3, #7
 800e46e:	009b      	lsls	r3, r3, #2
 800e470:	220f      	movs	r2, #15
 800e472:	fa02 f303 	lsl.w	r3, r2, r3
 800e476:	43db      	mvns	r3, r3
 800e478:	697a      	ldr	r2, [r7, #20]
 800e47a:	08d2      	lsrs	r2, r2, #3
 800e47c:	4019      	ands	r1, r3
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	3208      	adds	r2, #8
 800e482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	689a      	ldr	r2, [r3, #8]
 800e48a:	697b      	ldr	r3, [r7, #20]
 800e48c:	005b      	lsls	r3, r3, #1
 800e48e:	2103      	movs	r1, #3
 800e490:	fa01 f303 	lsl.w	r3, r1, r3
 800e494:	43db      	mvns	r3, r3
 800e496:	401a      	ands	r2, r3
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	685a      	ldr	r2, [r3, #4]
 800e4a0:	2101      	movs	r1, #1
 800e4a2:	697b      	ldr	r3, [r7, #20]
 800e4a4:	fa01 f303 	lsl.w	r3, r1, r3
 800e4a8:	43db      	mvns	r3, r3
 800e4aa:	401a      	ands	r2, r3
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	68da      	ldr	r2, [r3, #12]
 800e4b4:	697b      	ldr	r3, [r7, #20]
 800e4b6:	005b      	lsls	r3, r3, #1
 800e4b8:	2103      	movs	r1, #3
 800e4ba:	fa01 f303 	lsl.w	r3, r1, r3
 800e4be:	43db      	mvns	r3, r3
 800e4c0:	401a      	ands	r2, r3
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4ca:	2101      	movs	r1, #1
 800e4cc:	697b      	ldr	r3, [r7, #20]
 800e4ce:	fa01 f303 	lsl.w	r3, r1, r3
 800e4d2:	43db      	mvns	r3, r3
 800e4d4:	401a      	ands	r2, r3
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	3301      	adds	r3, #1
 800e4de:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800e4e0:	683a      	ldr	r2, [r7, #0]
 800e4e2:	697b      	ldr	r3, [r7, #20]
 800e4e4:	fa22 f303 	lsr.w	r3, r2, r3
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	f47f af2b 	bne.w	800e344 <HAL_GPIO_DeInit+0x10>
  }
}
 800e4ee:	bf00      	nop
 800e4f0:	bf00      	nop
 800e4f2:	371c      	adds	r7, #28
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fa:	4770      	bx	lr
 800e4fc:	40010000 	.word	0x40010000
 800e500:	48000400 	.word	0x48000400
 800e504:	48000800 	.word	0x48000800
 800e508:	48000c00 	.word	0x48000c00
 800e50c:	48001000 	.word	0x48001000
 800e510:	48001400 	.word	0x48001400
 800e514:	48001800 	.word	0x48001800
 800e518:	40010400 	.word	0x40010400

0800e51c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800e51c:	b480      	push	{r7}
 800e51e:	b085      	sub	sp, #20
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
 800e524:	460b      	mov	r3, r1
 800e526:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	691a      	ldr	r2, [r3, #16]
 800e52c:	887b      	ldrh	r3, [r7, #2]
 800e52e:	4013      	ands	r3, r2
 800e530:	2b00      	cmp	r3, #0
 800e532:	d002      	beq.n	800e53a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800e534:	2301      	movs	r3, #1
 800e536:	73fb      	strb	r3, [r7, #15]
 800e538:	e001      	b.n	800e53e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800e53a:	2300      	movs	r3, #0
 800e53c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e53e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e540:	4618      	mov	r0, r3
 800e542:	3714      	adds	r7, #20
 800e544:	46bd      	mov	sp, r7
 800e546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54a:	4770      	bx	lr

0800e54c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e54c:	b480      	push	{r7}
 800e54e:	b083      	sub	sp, #12
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
 800e554:	460b      	mov	r3, r1
 800e556:	807b      	strh	r3, [r7, #2]
 800e558:	4613      	mov	r3, r2
 800e55a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800e55c:	787b      	ldrb	r3, [r7, #1]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d003      	beq.n	800e56a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800e562:	887a      	ldrh	r2, [r7, #2]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800e568:	e002      	b.n	800e570 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800e56a:	887a      	ldrh	r2, [r7, #2]
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800e570:	bf00      	nop
 800e572:	370c      	adds	r7, #12
 800e574:	46bd      	mov	sp, r7
 800e576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57a:	4770      	bx	lr

0800e57c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b082      	sub	sp, #8
 800e580:	af00      	add	r7, sp, #0
 800e582:	4603      	mov	r3, r0
 800e584:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800e586:	4b08      	ldr	r3, [pc, #32]	; (800e5a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800e588:	695a      	ldr	r2, [r3, #20]
 800e58a:	88fb      	ldrh	r3, [r7, #6]
 800e58c:	4013      	ands	r3, r2
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d006      	beq.n	800e5a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800e592:	4a05      	ldr	r2, [pc, #20]	; (800e5a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800e594:	88fb      	ldrh	r3, [r7, #6]
 800e596:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800e598:	88fb      	ldrh	r3, [r7, #6]
 800e59a:	4618      	mov	r0, r3
 800e59c:	f7f8 fdb2 	bl	8007104 <HAL_GPIO_EXTI_Callback>
  }
}
 800e5a0:	bf00      	nop
 800e5a2:	3708      	adds	r7, #8
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}
 800e5a8:	40010400 	.word	0x40010400

0800e5ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b082      	sub	sp, #8
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d101      	bne.n	800e5be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	e081      	b.n	800e6c2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e5c4:	b2db      	uxtb	r3, r3
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d106      	bne.n	800e5d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800e5d2:	6878      	ldr	r0, [r7, #4]
 800e5d4:	f7f8 fdd4 	bl	8007180 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2224      	movs	r2, #36	; 0x24
 800e5dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	681a      	ldr	r2, [r3, #0]
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	f022 0201 	bic.w	r2, r2, #1
 800e5ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	685a      	ldr	r2, [r3, #4]
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800e5fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	689a      	ldr	r2, [r3, #8]
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e60c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	68db      	ldr	r3, [r3, #12]
 800e612:	2b01      	cmp	r3, #1
 800e614:	d107      	bne.n	800e626 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	689a      	ldr	r2, [r3, #8]
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e622:	609a      	str	r2, [r3, #8]
 800e624:	e006      	b.n	800e634 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	689a      	ldr	r2, [r3, #8]
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800e632:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	68db      	ldr	r3, [r3, #12]
 800e638:	2b02      	cmp	r3, #2
 800e63a:	d104      	bne.n	800e646 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e644:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	685b      	ldr	r3, [r3, #4]
 800e64c:	687a      	ldr	r2, [r7, #4]
 800e64e:	6812      	ldr	r2, [r2, #0]
 800e650:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e654:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e658:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	68da      	ldr	r2, [r3, #12]
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e668:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	691a      	ldr	r2, [r3, #16]
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	695b      	ldr	r3, [r3, #20]
 800e672:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	699b      	ldr	r3, [r3, #24]
 800e67a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	430a      	orrs	r2, r1
 800e682:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	69d9      	ldr	r1, [r3, #28]
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	6a1a      	ldr	r2, [r3, #32]
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	430a      	orrs	r2, r1
 800e692:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	681a      	ldr	r2, [r3, #0]
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	f042 0201 	orr.w	r2, r2, #1
 800e6a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2220      	movs	r2, #32
 800e6ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800e6c0:	2300      	movs	r3, #0
}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	3708      	adds	r7, #8
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}

0800e6ca <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800e6ca:	b580      	push	{r7, lr}
 800e6cc:	b082      	sub	sp, #8
 800e6ce:	af00      	add	r7, sp, #0
 800e6d0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d101      	bne.n	800e6dc <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800e6d8:	2301      	movs	r3, #1
 800e6da:	e021      	b.n	800e720 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2224      	movs	r2, #36	; 0x24
 800e6e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	681a      	ldr	r2, [r3, #0]
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	f022 0201 	bic.w	r2, r2, #1
 800e6f2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800e6f4:	6878      	ldr	r0, [r7, #4]
 800e6f6:	f7f8 fda1 	bl	800723c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	2200      	movs	r2, #0
 800e704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2200      	movs	r2, #0
 800e70c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2200      	movs	r2, #0
 800e712:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	2200      	movs	r2, #0
 800e71a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800e71e:	2300      	movs	r3, #0
}
 800e720:	4618      	mov	r0, r3
 800e722:	3708      	adds	r7, #8
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}

0800e728 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b088      	sub	sp, #32
 800e72c:	af02      	add	r7, sp, #8
 800e72e:	60f8      	str	r0, [r7, #12]
 800e730:	607a      	str	r2, [r7, #4]
 800e732:	461a      	mov	r2, r3
 800e734:	460b      	mov	r3, r1
 800e736:	817b      	strh	r3, [r7, #10]
 800e738:	4613      	mov	r3, r2
 800e73a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e742:	b2db      	uxtb	r3, r3
 800e744:	2b20      	cmp	r3, #32
 800e746:	f040 80da 	bne.w	800e8fe <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e750:	2b01      	cmp	r3, #1
 800e752:	d101      	bne.n	800e758 <HAL_I2C_Master_Transmit+0x30>
 800e754:	2302      	movs	r3, #2
 800e756:	e0d3      	b.n	800e900 <HAL_I2C_Master_Transmit+0x1d8>
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	2201      	movs	r2, #1
 800e75c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e760:	f7ff fa7e 	bl	800dc60 <HAL_GetTick>
 800e764:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e766:	697b      	ldr	r3, [r7, #20]
 800e768:	9300      	str	r3, [sp, #0]
 800e76a:	2319      	movs	r3, #25
 800e76c:	2201      	movs	r2, #1
 800e76e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e772:	68f8      	ldr	r0, [r7, #12]
 800e774:	f000 fdc4 	bl	800f300 <I2C_WaitOnFlagUntilTimeout>
 800e778:	4603      	mov	r3, r0
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d001      	beq.n	800e782 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800e77e:	2301      	movs	r3, #1
 800e780:	e0be      	b.n	800e900 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	2221      	movs	r2, #33	; 0x21
 800e786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	2210      	movs	r2, #16
 800e78e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	2200      	movs	r2, #0
 800e796:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	687a      	ldr	r2, [r7, #4]
 800e79c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	893a      	ldrh	r2, [r7, #8]
 800e7a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e7ae:	b29b      	uxth	r3, r3
 800e7b0:	2bff      	cmp	r3, #255	; 0xff
 800e7b2:	d90e      	bls.n	800e7d2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	22ff      	movs	r2, #255	; 0xff
 800e7b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e7be:	b2da      	uxtb	r2, r3
 800e7c0:	8979      	ldrh	r1, [r7, #10]
 800e7c2:	4b51      	ldr	r3, [pc, #324]	; (800e908 <HAL_I2C_Master_Transmit+0x1e0>)
 800e7c4:	9300      	str	r3, [sp, #0]
 800e7c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e7ca:	68f8      	ldr	r0, [r7, #12]
 800e7cc:	f000 ffba 	bl	800f744 <I2C_TransferConfig>
 800e7d0:	e06c      	b.n	800e8ac <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e7d6:	b29a      	uxth	r2, r3
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e7e0:	b2da      	uxtb	r2, r3
 800e7e2:	8979      	ldrh	r1, [r7, #10]
 800e7e4:	4b48      	ldr	r3, [pc, #288]	; (800e908 <HAL_I2C_Master_Transmit+0x1e0>)
 800e7e6:	9300      	str	r3, [sp, #0]
 800e7e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e7ec:	68f8      	ldr	r0, [r7, #12]
 800e7ee:	f000 ffa9 	bl	800f744 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800e7f2:	e05b      	b.n	800e8ac <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e7f4:	697a      	ldr	r2, [r7, #20]
 800e7f6:	6a39      	ldr	r1, [r7, #32]
 800e7f8:	68f8      	ldr	r0, [r7, #12]
 800e7fa:	f000 fdc1 	bl	800f380 <I2C_WaitOnTXISFlagUntilTimeout>
 800e7fe:	4603      	mov	r3, r0
 800e800:	2b00      	cmp	r3, #0
 800e802:	d001      	beq.n	800e808 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800e804:	2301      	movs	r3, #1
 800e806:	e07b      	b.n	800e900 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e80c:	781a      	ldrb	r2, [r3, #0]
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e818:	1c5a      	adds	r2, r3, #1
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e822:	b29b      	uxth	r3, r3
 800e824:	3b01      	subs	r3, #1
 800e826:	b29a      	uxth	r2, r3
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e830:	3b01      	subs	r3, #1
 800e832:	b29a      	uxth	r2, r3
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e83c:	b29b      	uxth	r3, r3
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d034      	beq.n	800e8ac <HAL_I2C_Master_Transmit+0x184>
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e846:	2b00      	cmp	r3, #0
 800e848:	d130      	bne.n	800e8ac <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e84a:	697b      	ldr	r3, [r7, #20]
 800e84c:	9300      	str	r3, [sp, #0]
 800e84e:	6a3b      	ldr	r3, [r7, #32]
 800e850:	2200      	movs	r2, #0
 800e852:	2180      	movs	r1, #128	; 0x80
 800e854:	68f8      	ldr	r0, [r7, #12]
 800e856:	f000 fd53 	bl	800f300 <I2C_WaitOnFlagUntilTimeout>
 800e85a:	4603      	mov	r3, r0
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d001      	beq.n	800e864 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800e860:	2301      	movs	r3, #1
 800e862:	e04d      	b.n	800e900 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e868:	b29b      	uxth	r3, r3
 800e86a:	2bff      	cmp	r3, #255	; 0xff
 800e86c:	d90e      	bls.n	800e88c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	22ff      	movs	r2, #255	; 0xff
 800e872:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e878:	b2da      	uxtb	r2, r3
 800e87a:	8979      	ldrh	r1, [r7, #10]
 800e87c:	2300      	movs	r3, #0
 800e87e:	9300      	str	r3, [sp, #0]
 800e880:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e884:	68f8      	ldr	r0, [r7, #12]
 800e886:	f000 ff5d 	bl	800f744 <I2C_TransferConfig>
 800e88a:	e00f      	b.n	800e8ac <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e890:	b29a      	uxth	r2, r3
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e89a:	b2da      	uxtb	r2, r3
 800e89c:	8979      	ldrh	r1, [r7, #10]
 800e89e:	2300      	movs	r3, #0
 800e8a0:	9300      	str	r3, [sp, #0]
 800e8a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e8a6:	68f8      	ldr	r0, [r7, #12]
 800e8a8:	f000 ff4c 	bl	800f744 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e8b0:	b29b      	uxth	r3, r3
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d19e      	bne.n	800e7f4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e8b6:	697a      	ldr	r2, [r7, #20]
 800e8b8:	6a39      	ldr	r1, [r7, #32]
 800e8ba:	68f8      	ldr	r0, [r7, #12]
 800e8bc:	f000 fda0 	bl	800f400 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d001      	beq.n	800e8ca <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800e8c6:	2301      	movs	r3, #1
 800e8c8:	e01a      	b.n	800e900 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	2220      	movs	r2, #32
 800e8d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	6859      	ldr	r1, [r3, #4]
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	681a      	ldr	r2, [r3, #0]
 800e8dc:	4b0b      	ldr	r3, [pc, #44]	; (800e90c <HAL_I2C_Master_Transmit+0x1e4>)
 800e8de:	400b      	ands	r3, r1
 800e8e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	2220      	movs	r2, #32
 800e8e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	e000      	b.n	800e900 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800e8fe:	2302      	movs	r3, #2
  }
}
 800e900:	4618      	mov	r0, r3
 800e902:	3718      	adds	r7, #24
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}
 800e908:	80002000 	.word	0x80002000
 800e90c:	fe00e800 	.word	0xfe00e800

0800e910 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b088      	sub	sp, #32
 800e914:	af02      	add	r7, sp, #8
 800e916:	60f8      	str	r0, [r7, #12]
 800e918:	607a      	str	r2, [r7, #4]
 800e91a:	461a      	mov	r2, r3
 800e91c:	460b      	mov	r3, r1
 800e91e:	817b      	strh	r3, [r7, #10]
 800e920:	4613      	mov	r3, r2
 800e922:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e92a:	b2db      	uxtb	r3, r3
 800e92c:	2b20      	cmp	r3, #32
 800e92e:	f040 80db 	bne.w	800eae8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e938:	2b01      	cmp	r3, #1
 800e93a:	d101      	bne.n	800e940 <HAL_I2C_Master_Receive+0x30>
 800e93c:	2302      	movs	r3, #2
 800e93e:	e0d4      	b.n	800eaea <HAL_I2C_Master_Receive+0x1da>
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	2201      	movs	r2, #1
 800e944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e948:	f7ff f98a 	bl	800dc60 <HAL_GetTick>
 800e94c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e94e:	697b      	ldr	r3, [r7, #20]
 800e950:	9300      	str	r3, [sp, #0]
 800e952:	2319      	movs	r3, #25
 800e954:	2201      	movs	r2, #1
 800e956:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e95a:	68f8      	ldr	r0, [r7, #12]
 800e95c:	f000 fcd0 	bl	800f300 <I2C_WaitOnFlagUntilTimeout>
 800e960:	4603      	mov	r3, r0
 800e962:	2b00      	cmp	r3, #0
 800e964:	d001      	beq.n	800e96a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800e966:	2301      	movs	r3, #1
 800e968:	e0bf      	b.n	800eaea <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	2222      	movs	r2, #34	; 0x22
 800e96e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	2210      	movs	r2, #16
 800e976:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	2200      	movs	r2, #0
 800e97e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	687a      	ldr	r2, [r7, #4]
 800e984:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	893a      	ldrh	r2, [r7, #8]
 800e98a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	2200      	movs	r2, #0
 800e990:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e996:	b29b      	uxth	r3, r3
 800e998:	2bff      	cmp	r3, #255	; 0xff
 800e99a:	d90e      	bls.n	800e9ba <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	22ff      	movs	r2, #255	; 0xff
 800e9a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e9a6:	b2da      	uxtb	r2, r3
 800e9a8:	8979      	ldrh	r1, [r7, #10]
 800e9aa:	4b52      	ldr	r3, [pc, #328]	; (800eaf4 <HAL_I2C_Master_Receive+0x1e4>)
 800e9ac:	9300      	str	r3, [sp, #0]
 800e9ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e9b2:	68f8      	ldr	r0, [r7, #12]
 800e9b4:	f000 fec6 	bl	800f744 <I2C_TransferConfig>
 800e9b8:	e06d      	b.n	800ea96 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e9be:	b29a      	uxth	r2, r3
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e9c8:	b2da      	uxtb	r2, r3
 800e9ca:	8979      	ldrh	r1, [r7, #10]
 800e9cc:	4b49      	ldr	r3, [pc, #292]	; (800eaf4 <HAL_I2C_Master_Receive+0x1e4>)
 800e9ce:	9300      	str	r3, [sp, #0]
 800e9d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e9d4:	68f8      	ldr	r0, [r7, #12]
 800e9d6:	f000 feb5 	bl	800f744 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800e9da:	e05c      	b.n	800ea96 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e9dc:	697a      	ldr	r2, [r7, #20]
 800e9de:	6a39      	ldr	r1, [r7, #32]
 800e9e0:	68f8      	ldr	r0, [r7, #12]
 800e9e2:	f000 fd49 	bl	800f478 <I2C_WaitOnRXNEFlagUntilTimeout>
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d001      	beq.n	800e9f0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800e9ec:	2301      	movs	r3, #1
 800e9ee:	e07c      	b.n	800eaea <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9fa:	b2d2      	uxtb	r2, r2
 800e9fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea02:	1c5a      	adds	r2, r3, #1
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ea0c:	3b01      	subs	r3, #1
 800ea0e:	b29a      	uxth	r2, r3
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ea18:	b29b      	uxth	r3, r3
 800ea1a:	3b01      	subs	r3, #1
 800ea1c:	b29a      	uxth	r2, r3
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ea26:	b29b      	uxth	r3, r3
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d034      	beq.n	800ea96 <HAL_I2C_Master_Receive+0x186>
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d130      	bne.n	800ea96 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	9300      	str	r3, [sp, #0]
 800ea38:	6a3b      	ldr	r3, [r7, #32]
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	2180      	movs	r1, #128	; 0x80
 800ea3e:	68f8      	ldr	r0, [r7, #12]
 800ea40:	f000 fc5e 	bl	800f300 <I2C_WaitOnFlagUntilTimeout>
 800ea44:	4603      	mov	r3, r0
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d001      	beq.n	800ea4e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	e04d      	b.n	800eaea <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ea52:	b29b      	uxth	r3, r3
 800ea54:	2bff      	cmp	r3, #255	; 0xff
 800ea56:	d90e      	bls.n	800ea76 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	22ff      	movs	r2, #255	; 0xff
 800ea5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ea62:	b2da      	uxtb	r2, r3
 800ea64:	8979      	ldrh	r1, [r7, #10]
 800ea66:	2300      	movs	r3, #0
 800ea68:	9300      	str	r3, [sp, #0]
 800ea6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ea6e:	68f8      	ldr	r0, [r7, #12]
 800ea70:	f000 fe68 	bl	800f744 <I2C_TransferConfig>
 800ea74:	e00f      	b.n	800ea96 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ea7a:	b29a      	uxth	r2, r3
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ea84:	b2da      	uxtb	r2, r3
 800ea86:	8979      	ldrh	r1, [r7, #10]
 800ea88:	2300      	movs	r3, #0
 800ea8a:	9300      	str	r3, [sp, #0]
 800ea8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ea90:	68f8      	ldr	r0, [r7, #12]
 800ea92:	f000 fe57 	bl	800f744 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ea9a:	b29b      	uxth	r3, r3
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d19d      	bne.n	800e9dc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800eaa0:	697a      	ldr	r2, [r7, #20]
 800eaa2:	6a39      	ldr	r1, [r7, #32]
 800eaa4:	68f8      	ldr	r0, [r7, #12]
 800eaa6:	f000 fcab 	bl	800f400 <I2C_WaitOnSTOPFlagUntilTimeout>
 800eaaa:	4603      	mov	r3, r0
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d001      	beq.n	800eab4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800eab0:	2301      	movs	r3, #1
 800eab2:	e01a      	b.n	800eaea <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	2220      	movs	r2, #32
 800eaba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	6859      	ldr	r1, [r3, #4]
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	681a      	ldr	r2, [r3, #0]
 800eac6:	4b0c      	ldr	r3, [pc, #48]	; (800eaf8 <HAL_I2C_Master_Receive+0x1e8>)
 800eac8:	400b      	ands	r3, r1
 800eaca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	2220      	movs	r2, #32
 800ead0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	2200      	movs	r2, #0
 800ead8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	2200      	movs	r2, #0
 800eae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800eae4:	2300      	movs	r3, #0
 800eae6:	e000      	b.n	800eaea <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800eae8:	2302      	movs	r3, #2
  }
}
 800eaea:	4618      	mov	r0, r3
 800eaec:	3718      	adds	r7, #24
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}
 800eaf2:	bf00      	nop
 800eaf4:	80002400 	.word	0x80002400
 800eaf8:	fe00e800 	.word	0xfe00e800

0800eafc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b088      	sub	sp, #32
 800eb00:	af02      	add	r7, sp, #8
 800eb02:	60f8      	str	r0, [r7, #12]
 800eb04:	4608      	mov	r0, r1
 800eb06:	4611      	mov	r1, r2
 800eb08:	461a      	mov	r2, r3
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	817b      	strh	r3, [r7, #10]
 800eb0e:	460b      	mov	r3, r1
 800eb10:	813b      	strh	r3, [r7, #8]
 800eb12:	4613      	mov	r3, r2
 800eb14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eb1c:	b2db      	uxtb	r3, r3
 800eb1e:	2b20      	cmp	r3, #32
 800eb20:	f040 80f9 	bne.w	800ed16 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800eb24:	6a3b      	ldr	r3, [r7, #32]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d002      	beq.n	800eb30 <HAL_I2C_Mem_Write+0x34>
 800eb2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d105      	bne.n	800eb3c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eb36:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800eb38:	2301      	movs	r3, #1
 800eb3a:	e0ed      	b.n	800ed18 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eb42:	2b01      	cmp	r3, #1
 800eb44:	d101      	bne.n	800eb4a <HAL_I2C_Mem_Write+0x4e>
 800eb46:	2302      	movs	r3, #2
 800eb48:	e0e6      	b.n	800ed18 <HAL_I2C_Mem_Write+0x21c>
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	2201      	movs	r2, #1
 800eb4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800eb52:	f7ff f885 	bl	800dc60 <HAL_GetTick>
 800eb56:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800eb58:	697b      	ldr	r3, [r7, #20]
 800eb5a:	9300      	str	r3, [sp, #0]
 800eb5c:	2319      	movs	r3, #25
 800eb5e:	2201      	movs	r2, #1
 800eb60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800eb64:	68f8      	ldr	r0, [r7, #12]
 800eb66:	f000 fbcb 	bl	800f300 <I2C_WaitOnFlagUntilTimeout>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d001      	beq.n	800eb74 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800eb70:	2301      	movs	r3, #1
 800eb72:	e0d1      	b.n	800ed18 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	2221      	movs	r2, #33	; 0x21
 800eb78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	2240      	movs	r2, #64	; 0x40
 800eb80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	2200      	movs	r2, #0
 800eb88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	6a3a      	ldr	r2, [r7, #32]
 800eb8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eb94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	2200      	movs	r2, #0
 800eb9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800eb9c:	88f8      	ldrh	r0, [r7, #6]
 800eb9e:	893a      	ldrh	r2, [r7, #8]
 800eba0:	8979      	ldrh	r1, [r7, #10]
 800eba2:	697b      	ldr	r3, [r7, #20]
 800eba4:	9301      	str	r3, [sp, #4]
 800eba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eba8:	9300      	str	r3, [sp, #0]
 800ebaa:	4603      	mov	r3, r0
 800ebac:	68f8      	ldr	r0, [r7, #12]
 800ebae:	f000 fadb 	bl	800f168 <I2C_RequestMemoryWrite>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d005      	beq.n	800ebc4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	2200      	movs	r2, #0
 800ebbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	e0a9      	b.n	800ed18 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ebc8:	b29b      	uxth	r3, r3
 800ebca:	2bff      	cmp	r3, #255	; 0xff
 800ebcc:	d90e      	bls.n	800ebec <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	22ff      	movs	r2, #255	; 0xff
 800ebd2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ebd8:	b2da      	uxtb	r2, r3
 800ebda:	8979      	ldrh	r1, [r7, #10]
 800ebdc:	2300      	movs	r3, #0
 800ebde:	9300      	str	r3, [sp, #0]
 800ebe0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ebe4:	68f8      	ldr	r0, [r7, #12]
 800ebe6:	f000 fdad 	bl	800f744 <I2C_TransferConfig>
 800ebea:	e00f      	b.n	800ec0c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ebf0:	b29a      	uxth	r2, r3
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ebfa:	b2da      	uxtb	r2, r3
 800ebfc:	8979      	ldrh	r1, [r7, #10]
 800ebfe:	2300      	movs	r3, #0
 800ec00:	9300      	str	r3, [sp, #0]
 800ec02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ec06:	68f8      	ldr	r0, [r7, #12]
 800ec08:	f000 fd9c 	bl	800f744 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ec0c:	697a      	ldr	r2, [r7, #20]
 800ec0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ec10:	68f8      	ldr	r0, [r7, #12]
 800ec12:	f000 fbb5 	bl	800f380 <I2C_WaitOnTXISFlagUntilTimeout>
 800ec16:	4603      	mov	r3, r0
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d001      	beq.n	800ec20 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	e07b      	b.n	800ed18 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec24:	781a      	ldrb	r2, [r3, #0]
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec30:	1c5a      	adds	r2, r3, #1
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ec3a:	b29b      	uxth	r3, r3
 800ec3c:	3b01      	subs	r3, #1
 800ec3e:	b29a      	uxth	r2, r3
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec48:	3b01      	subs	r3, #1
 800ec4a:	b29a      	uxth	r2, r3
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ec54:	b29b      	uxth	r3, r3
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d034      	beq.n	800ecc4 <HAL_I2C_Mem_Write+0x1c8>
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d130      	bne.n	800ecc4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	9300      	str	r3, [sp, #0]
 800ec66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec68:	2200      	movs	r2, #0
 800ec6a:	2180      	movs	r1, #128	; 0x80
 800ec6c:	68f8      	ldr	r0, [r7, #12]
 800ec6e:	f000 fb47 	bl	800f300 <I2C_WaitOnFlagUntilTimeout>
 800ec72:	4603      	mov	r3, r0
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d001      	beq.n	800ec7c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800ec78:	2301      	movs	r3, #1
 800ec7a:	e04d      	b.n	800ed18 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ec80:	b29b      	uxth	r3, r3
 800ec82:	2bff      	cmp	r3, #255	; 0xff
 800ec84:	d90e      	bls.n	800eca4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	22ff      	movs	r2, #255	; 0xff
 800ec8a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec90:	b2da      	uxtb	r2, r3
 800ec92:	8979      	ldrh	r1, [r7, #10]
 800ec94:	2300      	movs	r3, #0
 800ec96:	9300      	str	r3, [sp, #0]
 800ec98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ec9c:	68f8      	ldr	r0, [r7, #12]
 800ec9e:	f000 fd51 	bl	800f744 <I2C_TransferConfig>
 800eca2:	e00f      	b.n	800ecc4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800eca8:	b29a      	uxth	r2, r3
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ecb2:	b2da      	uxtb	r2, r3
 800ecb4:	8979      	ldrh	r1, [r7, #10]
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	9300      	str	r3, [sp, #0]
 800ecba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ecbe:	68f8      	ldr	r0, [r7, #12]
 800ecc0:	f000 fd40 	bl	800f744 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ecc8:	b29b      	uxth	r3, r3
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d19e      	bne.n	800ec0c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ecce:	697a      	ldr	r2, [r7, #20]
 800ecd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ecd2:	68f8      	ldr	r0, [r7, #12]
 800ecd4:	f000 fb94 	bl	800f400 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ecd8:	4603      	mov	r3, r0
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d001      	beq.n	800ece2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800ecde:	2301      	movs	r3, #1
 800ece0:	e01a      	b.n	800ed18 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	2220      	movs	r2, #32
 800ece8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	6859      	ldr	r1, [r3, #4]
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	681a      	ldr	r2, [r3, #0]
 800ecf4:	4b0a      	ldr	r3, [pc, #40]	; (800ed20 <HAL_I2C_Mem_Write+0x224>)
 800ecf6:	400b      	ands	r3, r1
 800ecf8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	2220      	movs	r2, #32
 800ecfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	2200      	movs	r2, #0
 800ed06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ed12:	2300      	movs	r3, #0
 800ed14:	e000      	b.n	800ed18 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800ed16:	2302      	movs	r3, #2
  }
}
 800ed18:	4618      	mov	r0, r3
 800ed1a:	3718      	adds	r7, #24
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}
 800ed20:	fe00e800 	.word	0xfe00e800

0800ed24 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b088      	sub	sp, #32
 800ed28:	af02      	add	r7, sp, #8
 800ed2a:	60f8      	str	r0, [r7, #12]
 800ed2c:	4608      	mov	r0, r1
 800ed2e:	4611      	mov	r1, r2
 800ed30:	461a      	mov	r2, r3
 800ed32:	4603      	mov	r3, r0
 800ed34:	817b      	strh	r3, [r7, #10]
 800ed36:	460b      	mov	r3, r1
 800ed38:	813b      	strh	r3, [r7, #8]
 800ed3a:	4613      	mov	r3, r2
 800ed3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ed44:	b2db      	uxtb	r3, r3
 800ed46:	2b20      	cmp	r3, #32
 800ed48:	f040 80fd 	bne.w	800ef46 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800ed4c:	6a3b      	ldr	r3, [r7, #32]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d002      	beq.n	800ed58 <HAL_I2C_Mem_Read+0x34>
 800ed52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d105      	bne.n	800ed64 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ed5e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800ed60:	2301      	movs	r3, #1
 800ed62:	e0f1      	b.n	800ef48 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ed6a:	2b01      	cmp	r3, #1
 800ed6c:	d101      	bne.n	800ed72 <HAL_I2C_Mem_Read+0x4e>
 800ed6e:	2302      	movs	r3, #2
 800ed70:	e0ea      	b.n	800ef48 <HAL_I2C_Mem_Read+0x224>
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	2201      	movs	r2, #1
 800ed76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ed7a:	f7fe ff71 	bl	800dc60 <HAL_GetTick>
 800ed7e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	9300      	str	r3, [sp, #0]
 800ed84:	2319      	movs	r3, #25
 800ed86:	2201      	movs	r2, #1
 800ed88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ed8c:	68f8      	ldr	r0, [r7, #12]
 800ed8e:	f000 fab7 	bl	800f300 <I2C_WaitOnFlagUntilTimeout>
 800ed92:	4603      	mov	r3, r0
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d001      	beq.n	800ed9c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800ed98:	2301      	movs	r3, #1
 800ed9a:	e0d5      	b.n	800ef48 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	2222      	movs	r2, #34	; 0x22
 800eda0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	2240      	movs	r2, #64	; 0x40
 800eda8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	2200      	movs	r2, #0
 800edb0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	6a3a      	ldr	r2, [r7, #32]
 800edb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800edbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	2200      	movs	r2, #0
 800edc2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800edc4:	88f8      	ldrh	r0, [r7, #6]
 800edc6:	893a      	ldrh	r2, [r7, #8]
 800edc8:	8979      	ldrh	r1, [r7, #10]
 800edca:	697b      	ldr	r3, [r7, #20]
 800edcc:	9301      	str	r3, [sp, #4]
 800edce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edd0:	9300      	str	r3, [sp, #0]
 800edd2:	4603      	mov	r3, r0
 800edd4:	68f8      	ldr	r0, [r7, #12]
 800edd6:	f000 fa1b 	bl	800f210 <I2C_RequestMemoryRead>
 800edda:	4603      	mov	r3, r0
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d005      	beq.n	800edec <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	2200      	movs	r2, #0
 800ede4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800ede8:	2301      	movs	r3, #1
 800edea:	e0ad      	b.n	800ef48 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800edf0:	b29b      	uxth	r3, r3
 800edf2:	2bff      	cmp	r3, #255	; 0xff
 800edf4:	d90e      	bls.n	800ee14 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	22ff      	movs	r2, #255	; 0xff
 800edfa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ee00:	b2da      	uxtb	r2, r3
 800ee02:	8979      	ldrh	r1, [r7, #10]
 800ee04:	4b52      	ldr	r3, [pc, #328]	; (800ef50 <HAL_I2C_Mem_Read+0x22c>)
 800ee06:	9300      	str	r3, [sp, #0]
 800ee08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ee0c:	68f8      	ldr	r0, [r7, #12]
 800ee0e:	f000 fc99 	bl	800f744 <I2C_TransferConfig>
 800ee12:	e00f      	b.n	800ee34 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ee18:	b29a      	uxth	r2, r3
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ee22:	b2da      	uxtb	r2, r3
 800ee24:	8979      	ldrh	r1, [r7, #10]
 800ee26:	4b4a      	ldr	r3, [pc, #296]	; (800ef50 <HAL_I2C_Mem_Read+0x22c>)
 800ee28:	9300      	str	r3, [sp, #0]
 800ee2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ee2e:	68f8      	ldr	r0, [r7, #12]
 800ee30:	f000 fc88 	bl	800f744 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	9300      	str	r3, [sp, #0]
 800ee38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	2104      	movs	r1, #4
 800ee3e:	68f8      	ldr	r0, [r7, #12]
 800ee40:	f000 fa5e 	bl	800f300 <I2C_WaitOnFlagUntilTimeout>
 800ee44:	4603      	mov	r3, r0
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d001      	beq.n	800ee4e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800ee4a:	2301      	movs	r3, #1
 800ee4c:	e07c      	b.n	800ef48 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee58:	b2d2      	uxtb	r2, r2
 800ee5a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee60:	1c5a      	adds	r2, r3, #1
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ee6a:	3b01      	subs	r3, #1
 800ee6c:	b29a      	uxth	r2, r3
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ee76:	b29b      	uxth	r3, r3
 800ee78:	3b01      	subs	r3, #1
 800ee7a:	b29a      	uxth	r2, r3
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ee84:	b29b      	uxth	r3, r3
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d034      	beq.n	800eef4 <HAL_I2C_Mem_Read+0x1d0>
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d130      	bne.n	800eef4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ee92:	697b      	ldr	r3, [r7, #20]
 800ee94:	9300      	str	r3, [sp, #0]
 800ee96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee98:	2200      	movs	r2, #0
 800ee9a:	2180      	movs	r1, #128	; 0x80
 800ee9c:	68f8      	ldr	r0, [r7, #12]
 800ee9e:	f000 fa2f 	bl	800f300 <I2C_WaitOnFlagUntilTimeout>
 800eea2:	4603      	mov	r3, r0
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d001      	beq.n	800eeac <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800eea8:	2301      	movs	r3, #1
 800eeaa:	e04d      	b.n	800ef48 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800eeb0:	b29b      	uxth	r3, r3
 800eeb2:	2bff      	cmp	r3, #255	; 0xff
 800eeb4:	d90e      	bls.n	800eed4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	22ff      	movs	r2, #255	; 0xff
 800eeba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eec0:	b2da      	uxtb	r2, r3
 800eec2:	8979      	ldrh	r1, [r7, #10]
 800eec4:	2300      	movs	r3, #0
 800eec6:	9300      	str	r3, [sp, #0]
 800eec8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800eecc:	68f8      	ldr	r0, [r7, #12]
 800eece:	f000 fc39 	bl	800f744 <I2C_TransferConfig>
 800eed2:	e00f      	b.n	800eef4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800eed8:	b29a      	uxth	r2, r3
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eee2:	b2da      	uxtb	r2, r3
 800eee4:	8979      	ldrh	r1, [r7, #10]
 800eee6:	2300      	movs	r3, #0
 800eee8:	9300      	str	r3, [sp, #0]
 800eeea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800eeee:	68f8      	ldr	r0, [r7, #12]
 800eef0:	f000 fc28 	bl	800f744 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800eef8:	b29b      	uxth	r3, r3
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d19a      	bne.n	800ee34 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800eefe:	697a      	ldr	r2, [r7, #20]
 800ef00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ef02:	68f8      	ldr	r0, [r7, #12]
 800ef04:	f000 fa7c 	bl	800f400 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d001      	beq.n	800ef12 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800ef0e:	2301      	movs	r3, #1
 800ef10:	e01a      	b.n	800ef48 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	2220      	movs	r2, #32
 800ef18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	6859      	ldr	r1, [r3, #4]
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	681a      	ldr	r2, [r3, #0]
 800ef24:	4b0b      	ldr	r3, [pc, #44]	; (800ef54 <HAL_I2C_Mem_Read+0x230>)
 800ef26:	400b      	ands	r3, r1
 800ef28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	2220      	movs	r2, #32
 800ef2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	2200      	movs	r2, #0
 800ef36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ef42:	2300      	movs	r3, #0
 800ef44:	e000      	b.n	800ef48 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800ef46:	2302      	movs	r3, #2
  }
}
 800ef48:	4618      	mov	r0, r3
 800ef4a:	3718      	adds	r7, #24
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bd80      	pop	{r7, pc}
 800ef50:	80002400 	.word	0x80002400
 800ef54:	fe00e800 	.word	0xfe00e800

0800ef58 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b08a      	sub	sp, #40	; 0x28
 800ef5c:	af02      	add	r7, sp, #8
 800ef5e:	60f8      	str	r0, [r7, #12]
 800ef60:	607a      	str	r2, [r7, #4]
 800ef62:	603b      	str	r3, [r7, #0]
 800ef64:	460b      	mov	r3, r1
 800ef66:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800ef68:	2300      	movs	r3, #0
 800ef6a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ef72:	b2db      	uxtb	r3, r3
 800ef74:	2b20      	cmp	r3, #32
 800ef76:	f040 80f1 	bne.w	800f15c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	699b      	ldr	r3, [r3, #24]
 800ef80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ef84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef88:	d101      	bne.n	800ef8e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800ef8a:	2302      	movs	r3, #2
 800ef8c:	e0e7      	b.n	800f15e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ef94:	2b01      	cmp	r3, #1
 800ef96:	d101      	bne.n	800ef9c <HAL_I2C_IsDeviceReady+0x44>
 800ef98:	2302      	movs	r3, #2
 800ef9a:	e0e0      	b.n	800f15e <HAL_I2C_IsDeviceReady+0x206>
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	2201      	movs	r2, #1
 800efa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	2224      	movs	r2, #36	; 0x24
 800efa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	2200      	movs	r2, #0
 800efb0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	68db      	ldr	r3, [r3, #12]
 800efb6:	2b01      	cmp	r3, #1
 800efb8:	d107      	bne.n	800efca <HAL_I2C_IsDeviceReady+0x72>
 800efba:	897b      	ldrh	r3, [r7, #10]
 800efbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800efc0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800efc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800efc8:	e004      	b.n	800efd4 <HAL_I2C_IsDeviceReady+0x7c>
 800efca:	897b      	ldrh	r3, [r7, #10]
 800efcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800efd0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800efd4:	68fa      	ldr	r2, [r7, #12]
 800efd6:	6812      	ldr	r2, [r2, #0]
 800efd8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800efda:	f7fe fe41 	bl	800dc60 <HAL_GetTick>
 800efde:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	699b      	ldr	r3, [r3, #24]
 800efe6:	f003 0320 	and.w	r3, r3, #32
 800efea:	2b20      	cmp	r3, #32
 800efec:	bf0c      	ite	eq
 800efee:	2301      	moveq	r3, #1
 800eff0:	2300      	movne	r3, #0
 800eff2:	b2db      	uxtb	r3, r3
 800eff4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	699b      	ldr	r3, [r3, #24]
 800effc:	f003 0310 	and.w	r3, r3, #16
 800f000:	2b10      	cmp	r3, #16
 800f002:	bf0c      	ite	eq
 800f004:	2301      	moveq	r3, #1
 800f006:	2300      	movne	r3, #0
 800f008:	b2db      	uxtb	r3, r3
 800f00a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800f00c:	e034      	b.n	800f078 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f014:	d01a      	beq.n	800f04c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800f016:	f7fe fe23 	bl	800dc60 <HAL_GetTick>
 800f01a:	4602      	mov	r2, r0
 800f01c:	69bb      	ldr	r3, [r7, #24]
 800f01e:	1ad3      	subs	r3, r2, r3
 800f020:	683a      	ldr	r2, [r7, #0]
 800f022:	429a      	cmp	r2, r3
 800f024:	d302      	bcc.n	800f02c <HAL_I2C_IsDeviceReady+0xd4>
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d10f      	bne.n	800f04c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	2220      	movs	r2, #32
 800f030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f038:	f043 0220 	orr.w	r2, r3, #32
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	2200      	movs	r2, #0
 800f044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800f048:	2301      	movs	r3, #1
 800f04a:	e088      	b.n	800f15e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	699b      	ldr	r3, [r3, #24]
 800f052:	f003 0320 	and.w	r3, r3, #32
 800f056:	2b20      	cmp	r3, #32
 800f058:	bf0c      	ite	eq
 800f05a:	2301      	moveq	r3, #1
 800f05c:	2300      	movne	r3, #0
 800f05e:	b2db      	uxtb	r3, r3
 800f060:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	699b      	ldr	r3, [r3, #24]
 800f068:	f003 0310 	and.w	r3, r3, #16
 800f06c:	2b10      	cmp	r3, #16
 800f06e:	bf0c      	ite	eq
 800f070:	2301      	moveq	r3, #1
 800f072:	2300      	movne	r3, #0
 800f074:	b2db      	uxtb	r3, r3
 800f076:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800f078:	7ffb      	ldrb	r3, [r7, #31]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d102      	bne.n	800f084 <HAL_I2C_IsDeviceReady+0x12c>
 800f07e:	7fbb      	ldrb	r3, [r7, #30]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d0c4      	beq.n	800f00e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	699b      	ldr	r3, [r3, #24]
 800f08a:	f003 0310 	and.w	r3, r3, #16
 800f08e:	2b10      	cmp	r3, #16
 800f090:	d01a      	beq.n	800f0c8 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800f092:	69bb      	ldr	r3, [r7, #24]
 800f094:	9300      	str	r3, [sp, #0]
 800f096:	683b      	ldr	r3, [r7, #0]
 800f098:	2200      	movs	r2, #0
 800f09a:	2120      	movs	r1, #32
 800f09c:	68f8      	ldr	r0, [r7, #12]
 800f09e:	f000 f92f 	bl	800f300 <I2C_WaitOnFlagUntilTimeout>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d001      	beq.n	800f0ac <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800f0a8:	2301      	movs	r3, #1
 800f0aa:	e058      	b.n	800f15e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	2220      	movs	r2, #32
 800f0b2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	2220      	movs	r2, #32
 800f0b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	2200      	movs	r2, #0
 800f0c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	e04a      	b.n	800f15e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800f0c8:	69bb      	ldr	r3, [r7, #24]
 800f0ca:	9300      	str	r3, [sp, #0]
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	2120      	movs	r1, #32
 800f0d2:	68f8      	ldr	r0, [r7, #12]
 800f0d4:	f000 f914 	bl	800f300 <I2C_WaitOnFlagUntilTimeout>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d001      	beq.n	800f0e2 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800f0de:	2301      	movs	r3, #1
 800f0e0:	e03d      	b.n	800f15e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	2210      	movs	r2, #16
 800f0e8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	2220      	movs	r2, #32
 800f0f0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800f0f2:	697b      	ldr	r3, [r7, #20]
 800f0f4:	687a      	ldr	r2, [r7, #4]
 800f0f6:	429a      	cmp	r2, r3
 800f0f8:	d118      	bne.n	800f12c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	685a      	ldr	r2, [r3, #4]
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f108:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800f10a:	69bb      	ldr	r3, [r7, #24]
 800f10c:	9300      	str	r3, [sp, #0]
 800f10e:	683b      	ldr	r3, [r7, #0]
 800f110:	2200      	movs	r2, #0
 800f112:	2120      	movs	r1, #32
 800f114:	68f8      	ldr	r0, [r7, #12]
 800f116:	f000 f8f3 	bl	800f300 <I2C_WaitOnFlagUntilTimeout>
 800f11a:	4603      	mov	r3, r0
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d001      	beq.n	800f124 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800f120:	2301      	movs	r3, #1
 800f122:	e01c      	b.n	800f15e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	2220      	movs	r2, #32
 800f12a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800f12c:	697b      	ldr	r3, [r7, #20]
 800f12e:	3301      	adds	r3, #1
 800f130:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	687a      	ldr	r2, [r7, #4]
 800f136:	429a      	cmp	r2, r3
 800f138:	f63f af3b 	bhi.w	800efb2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	2220      	movs	r2, #32
 800f140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f148:	f043 0220 	orr.w	r2, r3, #32
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	2200      	movs	r2, #0
 800f154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800f158:	2301      	movs	r3, #1
 800f15a:	e000      	b.n	800f15e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800f15c:	2302      	movs	r3, #2
  }
}
 800f15e:	4618      	mov	r0, r3
 800f160:	3720      	adds	r7, #32
 800f162:	46bd      	mov	sp, r7
 800f164:	bd80      	pop	{r7, pc}
	...

0800f168 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b086      	sub	sp, #24
 800f16c:	af02      	add	r7, sp, #8
 800f16e:	60f8      	str	r0, [r7, #12]
 800f170:	4608      	mov	r0, r1
 800f172:	4611      	mov	r1, r2
 800f174:	461a      	mov	r2, r3
 800f176:	4603      	mov	r3, r0
 800f178:	817b      	strh	r3, [r7, #10]
 800f17a:	460b      	mov	r3, r1
 800f17c:	813b      	strh	r3, [r7, #8]
 800f17e:	4613      	mov	r3, r2
 800f180:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800f182:	88fb      	ldrh	r3, [r7, #6]
 800f184:	b2da      	uxtb	r2, r3
 800f186:	8979      	ldrh	r1, [r7, #10]
 800f188:	4b20      	ldr	r3, [pc, #128]	; (800f20c <I2C_RequestMemoryWrite+0xa4>)
 800f18a:	9300      	str	r3, [sp, #0]
 800f18c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f190:	68f8      	ldr	r0, [r7, #12]
 800f192:	f000 fad7 	bl	800f744 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f196:	69fa      	ldr	r2, [r7, #28]
 800f198:	69b9      	ldr	r1, [r7, #24]
 800f19a:	68f8      	ldr	r0, [r7, #12]
 800f19c:	f000 f8f0 	bl	800f380 <I2C_WaitOnTXISFlagUntilTimeout>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d001      	beq.n	800f1aa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800f1a6:	2301      	movs	r3, #1
 800f1a8:	e02c      	b.n	800f204 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800f1aa:	88fb      	ldrh	r3, [r7, #6]
 800f1ac:	2b01      	cmp	r3, #1
 800f1ae:	d105      	bne.n	800f1bc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f1b0:	893b      	ldrh	r3, [r7, #8]
 800f1b2:	b2da      	uxtb	r2, r3
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	629a      	str	r2, [r3, #40]	; 0x28
 800f1ba:	e015      	b.n	800f1e8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800f1bc:	893b      	ldrh	r3, [r7, #8]
 800f1be:	0a1b      	lsrs	r3, r3, #8
 800f1c0:	b29b      	uxth	r3, r3
 800f1c2:	b2da      	uxtb	r2, r3
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f1ca:	69fa      	ldr	r2, [r7, #28]
 800f1cc:	69b9      	ldr	r1, [r7, #24]
 800f1ce:	68f8      	ldr	r0, [r7, #12]
 800f1d0:	f000 f8d6 	bl	800f380 <I2C_WaitOnTXISFlagUntilTimeout>
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d001      	beq.n	800f1de <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800f1da:	2301      	movs	r3, #1
 800f1dc:	e012      	b.n	800f204 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f1de:	893b      	ldrh	r3, [r7, #8]
 800f1e0:	b2da      	uxtb	r2, r3
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800f1e8:	69fb      	ldr	r3, [r7, #28]
 800f1ea:	9300      	str	r3, [sp, #0]
 800f1ec:	69bb      	ldr	r3, [r7, #24]
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	2180      	movs	r1, #128	; 0x80
 800f1f2:	68f8      	ldr	r0, [r7, #12]
 800f1f4:	f000 f884 	bl	800f300 <I2C_WaitOnFlagUntilTimeout>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d001      	beq.n	800f202 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800f1fe:	2301      	movs	r3, #1
 800f200:	e000      	b.n	800f204 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800f202:	2300      	movs	r3, #0
}
 800f204:	4618      	mov	r0, r3
 800f206:	3710      	adds	r7, #16
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}
 800f20c:	80002000 	.word	0x80002000

0800f210 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b086      	sub	sp, #24
 800f214:	af02      	add	r7, sp, #8
 800f216:	60f8      	str	r0, [r7, #12]
 800f218:	4608      	mov	r0, r1
 800f21a:	4611      	mov	r1, r2
 800f21c:	461a      	mov	r2, r3
 800f21e:	4603      	mov	r3, r0
 800f220:	817b      	strh	r3, [r7, #10]
 800f222:	460b      	mov	r3, r1
 800f224:	813b      	strh	r3, [r7, #8]
 800f226:	4613      	mov	r3, r2
 800f228:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800f22a:	88fb      	ldrh	r3, [r7, #6]
 800f22c:	b2da      	uxtb	r2, r3
 800f22e:	8979      	ldrh	r1, [r7, #10]
 800f230:	4b20      	ldr	r3, [pc, #128]	; (800f2b4 <I2C_RequestMemoryRead+0xa4>)
 800f232:	9300      	str	r3, [sp, #0]
 800f234:	2300      	movs	r3, #0
 800f236:	68f8      	ldr	r0, [r7, #12]
 800f238:	f000 fa84 	bl	800f744 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f23c:	69fa      	ldr	r2, [r7, #28]
 800f23e:	69b9      	ldr	r1, [r7, #24]
 800f240:	68f8      	ldr	r0, [r7, #12]
 800f242:	f000 f89d 	bl	800f380 <I2C_WaitOnTXISFlagUntilTimeout>
 800f246:	4603      	mov	r3, r0
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d001      	beq.n	800f250 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800f24c:	2301      	movs	r3, #1
 800f24e:	e02c      	b.n	800f2aa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800f250:	88fb      	ldrh	r3, [r7, #6]
 800f252:	2b01      	cmp	r3, #1
 800f254:	d105      	bne.n	800f262 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f256:	893b      	ldrh	r3, [r7, #8]
 800f258:	b2da      	uxtb	r2, r3
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	629a      	str	r2, [r3, #40]	; 0x28
 800f260:	e015      	b.n	800f28e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800f262:	893b      	ldrh	r3, [r7, #8]
 800f264:	0a1b      	lsrs	r3, r3, #8
 800f266:	b29b      	uxth	r3, r3
 800f268:	b2da      	uxtb	r2, r3
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f270:	69fa      	ldr	r2, [r7, #28]
 800f272:	69b9      	ldr	r1, [r7, #24]
 800f274:	68f8      	ldr	r0, [r7, #12]
 800f276:	f000 f883 	bl	800f380 <I2C_WaitOnTXISFlagUntilTimeout>
 800f27a:	4603      	mov	r3, r0
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d001      	beq.n	800f284 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800f280:	2301      	movs	r3, #1
 800f282:	e012      	b.n	800f2aa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f284:	893b      	ldrh	r3, [r7, #8]
 800f286:	b2da      	uxtb	r2, r3
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800f28e:	69fb      	ldr	r3, [r7, #28]
 800f290:	9300      	str	r3, [sp, #0]
 800f292:	69bb      	ldr	r3, [r7, #24]
 800f294:	2200      	movs	r2, #0
 800f296:	2140      	movs	r1, #64	; 0x40
 800f298:	68f8      	ldr	r0, [r7, #12]
 800f29a:	f000 f831 	bl	800f300 <I2C_WaitOnFlagUntilTimeout>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d001      	beq.n	800f2a8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800f2a4:	2301      	movs	r3, #1
 800f2a6:	e000      	b.n	800f2aa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800f2a8:	2300      	movs	r3, #0
}
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	3710      	adds	r7, #16
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bd80      	pop	{r7, pc}
 800f2b2:	bf00      	nop
 800f2b4:	80002000 	.word	0x80002000

0800f2b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800f2b8:	b480      	push	{r7}
 800f2ba:	b083      	sub	sp, #12
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	699b      	ldr	r3, [r3, #24]
 800f2c6:	f003 0302 	and.w	r3, r3, #2
 800f2ca:	2b02      	cmp	r3, #2
 800f2cc:	d103      	bne.n	800f2d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	699b      	ldr	r3, [r3, #24]
 800f2dc:	f003 0301 	and.w	r3, r3, #1
 800f2e0:	2b01      	cmp	r3, #1
 800f2e2:	d007      	beq.n	800f2f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	699a      	ldr	r2, [r3, #24]
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	f042 0201 	orr.w	r2, r2, #1
 800f2f2:	619a      	str	r2, [r3, #24]
  }
}
 800f2f4:	bf00      	nop
 800f2f6:	370c      	adds	r7, #12
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fe:	4770      	bx	lr

0800f300 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b084      	sub	sp, #16
 800f304:	af00      	add	r7, sp, #0
 800f306:	60f8      	str	r0, [r7, #12]
 800f308:	60b9      	str	r1, [r7, #8]
 800f30a:	603b      	str	r3, [r7, #0]
 800f30c:	4613      	mov	r3, r2
 800f30e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f310:	e022      	b.n	800f358 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f318:	d01e      	beq.n	800f358 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f31a:	f7fe fca1 	bl	800dc60 <HAL_GetTick>
 800f31e:	4602      	mov	r2, r0
 800f320:	69bb      	ldr	r3, [r7, #24]
 800f322:	1ad3      	subs	r3, r2, r3
 800f324:	683a      	ldr	r2, [r7, #0]
 800f326:	429a      	cmp	r2, r3
 800f328:	d302      	bcc.n	800f330 <I2C_WaitOnFlagUntilTimeout+0x30>
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d113      	bne.n	800f358 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f334:	f043 0220 	orr.w	r2, r3, #32
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	2220      	movs	r2, #32
 800f340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	2200      	movs	r2, #0
 800f348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	2200      	movs	r2, #0
 800f350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800f354:	2301      	movs	r3, #1
 800f356:	e00f      	b.n	800f378 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	699a      	ldr	r2, [r3, #24]
 800f35e:	68bb      	ldr	r3, [r7, #8]
 800f360:	4013      	ands	r3, r2
 800f362:	68ba      	ldr	r2, [r7, #8]
 800f364:	429a      	cmp	r2, r3
 800f366:	bf0c      	ite	eq
 800f368:	2301      	moveq	r3, #1
 800f36a:	2300      	movne	r3, #0
 800f36c:	b2db      	uxtb	r3, r3
 800f36e:	461a      	mov	r2, r3
 800f370:	79fb      	ldrb	r3, [r7, #7]
 800f372:	429a      	cmp	r2, r3
 800f374:	d0cd      	beq.n	800f312 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f376:	2300      	movs	r3, #0
}
 800f378:	4618      	mov	r0, r3
 800f37a:	3710      	adds	r7, #16
 800f37c:	46bd      	mov	sp, r7
 800f37e:	bd80      	pop	{r7, pc}

0800f380 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b084      	sub	sp, #16
 800f384:	af00      	add	r7, sp, #0
 800f386:	60f8      	str	r0, [r7, #12]
 800f388:	60b9      	str	r1, [r7, #8]
 800f38a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800f38c:	e02c      	b.n	800f3e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800f38e:	687a      	ldr	r2, [r7, #4]
 800f390:	68b9      	ldr	r1, [r7, #8]
 800f392:	68f8      	ldr	r0, [r7, #12]
 800f394:	f000 f8ea 	bl	800f56c <I2C_IsErrorOccurred>
 800f398:	4603      	mov	r3, r0
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d001      	beq.n	800f3a2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800f39e:	2301      	movs	r3, #1
 800f3a0:	e02a      	b.n	800f3f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f3a2:	68bb      	ldr	r3, [r7, #8]
 800f3a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3a8:	d01e      	beq.n	800f3e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f3aa:	f7fe fc59 	bl	800dc60 <HAL_GetTick>
 800f3ae:	4602      	mov	r2, r0
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	1ad3      	subs	r3, r2, r3
 800f3b4:	68ba      	ldr	r2, [r7, #8]
 800f3b6:	429a      	cmp	r2, r3
 800f3b8:	d302      	bcc.n	800f3c0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800f3ba:	68bb      	ldr	r3, [r7, #8]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d113      	bne.n	800f3e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3c4:	f043 0220 	orr.w	r2, r3, #32
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	2220      	movs	r2, #32
 800f3d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	2200      	movs	r2, #0
 800f3e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800f3e4:	2301      	movs	r3, #1
 800f3e6:	e007      	b.n	800f3f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	699b      	ldr	r3, [r3, #24]
 800f3ee:	f003 0302 	and.w	r3, r3, #2
 800f3f2:	2b02      	cmp	r3, #2
 800f3f4:	d1cb      	bne.n	800f38e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800f3f6:	2300      	movs	r3, #0
}
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	3710      	adds	r7, #16
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	bd80      	pop	{r7, pc}

0800f400 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b084      	sub	sp, #16
 800f404:	af00      	add	r7, sp, #0
 800f406:	60f8      	str	r0, [r7, #12]
 800f408:	60b9      	str	r1, [r7, #8]
 800f40a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800f40c:	e028      	b.n	800f460 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800f40e:	687a      	ldr	r2, [r7, #4]
 800f410:	68b9      	ldr	r1, [r7, #8]
 800f412:	68f8      	ldr	r0, [r7, #12]
 800f414:	f000 f8aa 	bl	800f56c <I2C_IsErrorOccurred>
 800f418:	4603      	mov	r3, r0
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d001      	beq.n	800f422 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800f41e:	2301      	movs	r3, #1
 800f420:	e026      	b.n	800f470 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f422:	f7fe fc1d 	bl	800dc60 <HAL_GetTick>
 800f426:	4602      	mov	r2, r0
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	1ad3      	subs	r3, r2, r3
 800f42c:	68ba      	ldr	r2, [r7, #8]
 800f42e:	429a      	cmp	r2, r3
 800f430:	d302      	bcc.n	800f438 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800f432:	68bb      	ldr	r3, [r7, #8]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d113      	bne.n	800f460 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f43c:	f043 0220 	orr.w	r2, r3, #32
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	2220      	movs	r2, #32
 800f448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	2200      	movs	r2, #0
 800f450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	2200      	movs	r2, #0
 800f458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800f45c:	2301      	movs	r3, #1
 800f45e:	e007      	b.n	800f470 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	699b      	ldr	r3, [r3, #24]
 800f466:	f003 0320 	and.w	r3, r3, #32
 800f46a:	2b20      	cmp	r3, #32
 800f46c:	d1cf      	bne.n	800f40e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800f46e:	2300      	movs	r3, #0
}
 800f470:	4618      	mov	r0, r3
 800f472:	3710      	adds	r7, #16
 800f474:	46bd      	mov	sp, r7
 800f476:	bd80      	pop	{r7, pc}

0800f478 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b084      	sub	sp, #16
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	60f8      	str	r0, [r7, #12]
 800f480:	60b9      	str	r1, [r7, #8]
 800f482:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800f484:	e064      	b.n	800f550 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800f486:	687a      	ldr	r2, [r7, #4]
 800f488:	68b9      	ldr	r1, [r7, #8]
 800f48a:	68f8      	ldr	r0, [r7, #12]
 800f48c:	f000 f86e 	bl	800f56c <I2C_IsErrorOccurred>
 800f490:	4603      	mov	r3, r0
 800f492:	2b00      	cmp	r3, #0
 800f494:	d001      	beq.n	800f49a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800f496:	2301      	movs	r3, #1
 800f498:	e062      	b.n	800f560 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	699b      	ldr	r3, [r3, #24]
 800f4a0:	f003 0320 	and.w	r3, r3, #32
 800f4a4:	2b20      	cmp	r3, #32
 800f4a6:	d138      	bne.n	800f51a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	699b      	ldr	r3, [r3, #24]
 800f4ae:	f003 0304 	and.w	r3, r3, #4
 800f4b2:	2b04      	cmp	r3, #4
 800f4b4:	d105      	bne.n	800f4c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d001      	beq.n	800f4c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800f4be:	2300      	movs	r3, #0
 800f4c0:	e04e      	b.n	800f560 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	699b      	ldr	r3, [r3, #24]
 800f4c8:	f003 0310 	and.w	r3, r3, #16
 800f4cc:	2b10      	cmp	r3, #16
 800f4ce:	d107      	bne.n	800f4e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	2210      	movs	r2, #16
 800f4d6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	2204      	movs	r2, #4
 800f4dc:	645a      	str	r2, [r3, #68]	; 0x44
 800f4de:	e002      	b.n	800f4e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	2220      	movs	r2, #32
 800f4ec:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	6859      	ldr	r1, [r3, #4]
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	681a      	ldr	r2, [r3, #0]
 800f4f8:	4b1b      	ldr	r3, [pc, #108]	; (800f568 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800f4fa:	400b      	ands	r3, r1
 800f4fc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	2220      	movs	r2, #32
 800f502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	2200      	movs	r2, #0
 800f50a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	2200      	movs	r2, #0
 800f512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800f516:	2301      	movs	r3, #1
 800f518:	e022      	b.n	800f560 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f51a:	f7fe fba1 	bl	800dc60 <HAL_GetTick>
 800f51e:	4602      	mov	r2, r0
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	1ad3      	subs	r3, r2, r3
 800f524:	68ba      	ldr	r2, [r7, #8]
 800f526:	429a      	cmp	r2, r3
 800f528:	d302      	bcc.n	800f530 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800f52a:	68bb      	ldr	r3, [r7, #8]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d10f      	bne.n	800f550 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f534:	f043 0220 	orr.w	r2, r3, #32
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	2220      	movs	r2, #32
 800f540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	2200      	movs	r2, #0
 800f548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800f54c:	2301      	movs	r3, #1
 800f54e:	e007      	b.n	800f560 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	699b      	ldr	r3, [r3, #24]
 800f556:	f003 0304 	and.w	r3, r3, #4
 800f55a:	2b04      	cmp	r3, #4
 800f55c:	d193      	bne.n	800f486 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800f55e:	2300      	movs	r3, #0
}
 800f560:	4618      	mov	r0, r3
 800f562:	3710      	adds	r7, #16
 800f564:	46bd      	mov	sp, r7
 800f566:	bd80      	pop	{r7, pc}
 800f568:	fe00e800 	.word	0xfe00e800

0800f56c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b08a      	sub	sp, #40	; 0x28
 800f570:	af00      	add	r7, sp, #0
 800f572:	60f8      	str	r0, [r7, #12]
 800f574:	60b9      	str	r1, [r7, #8]
 800f576:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f578:	2300      	movs	r3, #0
 800f57a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	699b      	ldr	r3, [r3, #24]
 800f584:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800f586:	2300      	movs	r3, #0
 800f588:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800f58e:	69bb      	ldr	r3, [r7, #24]
 800f590:	f003 0310 	and.w	r3, r3, #16
 800f594:	2b00      	cmp	r3, #0
 800f596:	d075      	beq.n	800f684 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	2210      	movs	r2, #16
 800f59e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800f5a0:	e056      	b.n	800f650 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5a8:	d052      	beq.n	800f650 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800f5aa:	f7fe fb59 	bl	800dc60 <HAL_GetTick>
 800f5ae:	4602      	mov	r2, r0
 800f5b0:	69fb      	ldr	r3, [r7, #28]
 800f5b2:	1ad3      	subs	r3, r2, r3
 800f5b4:	68ba      	ldr	r2, [r7, #8]
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	d302      	bcc.n	800f5c0 <I2C_IsErrorOccurred+0x54>
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d147      	bne.n	800f650 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	685b      	ldr	r3, [r3, #4]
 800f5c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f5ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f5d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	699b      	ldr	r3, [r3, #24]
 800f5da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f5de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f5e2:	d12e      	bne.n	800f642 <I2C_IsErrorOccurred+0xd6>
 800f5e4:	697b      	ldr	r3, [r7, #20]
 800f5e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f5ea:	d02a      	beq.n	800f642 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800f5ec:	7cfb      	ldrb	r3, [r7, #19]
 800f5ee:	2b20      	cmp	r3, #32
 800f5f0:	d027      	beq.n	800f642 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	685a      	ldr	r2, [r3, #4]
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f600:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800f602:	f7fe fb2d 	bl	800dc60 <HAL_GetTick>
 800f606:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800f608:	e01b      	b.n	800f642 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800f60a:	f7fe fb29 	bl	800dc60 <HAL_GetTick>
 800f60e:	4602      	mov	r2, r0
 800f610:	69fb      	ldr	r3, [r7, #28]
 800f612:	1ad3      	subs	r3, r2, r3
 800f614:	2b19      	cmp	r3, #25
 800f616:	d914      	bls.n	800f642 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f61c:	f043 0220 	orr.w	r2, r3, #32
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	2220      	movs	r2, #32
 800f628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	2200      	movs	r2, #0
 800f630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	2200      	movs	r2, #0
 800f638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800f63c:	2301      	movs	r3, #1
 800f63e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	699b      	ldr	r3, [r3, #24]
 800f648:	f003 0320 	and.w	r3, r3, #32
 800f64c:	2b20      	cmp	r3, #32
 800f64e:	d1dc      	bne.n	800f60a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	699b      	ldr	r3, [r3, #24]
 800f656:	f003 0320 	and.w	r3, r3, #32
 800f65a:	2b20      	cmp	r3, #32
 800f65c:	d003      	beq.n	800f666 <I2C_IsErrorOccurred+0xfa>
 800f65e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f662:	2b00      	cmp	r3, #0
 800f664:	d09d      	beq.n	800f5a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800f666:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d103      	bne.n	800f676 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	2220      	movs	r2, #32
 800f674:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800f676:	6a3b      	ldr	r3, [r7, #32]
 800f678:	f043 0304 	orr.w	r3, r3, #4
 800f67c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800f67e:	2301      	movs	r3, #1
 800f680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	699b      	ldr	r3, [r3, #24]
 800f68a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800f68c:	69bb      	ldr	r3, [r7, #24]
 800f68e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f692:	2b00      	cmp	r3, #0
 800f694:	d00b      	beq.n	800f6ae <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800f696:	6a3b      	ldr	r3, [r7, #32]
 800f698:	f043 0301 	orr.w	r3, r3, #1
 800f69c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f6a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800f6a8:	2301      	movs	r3, #1
 800f6aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800f6ae:	69bb      	ldr	r3, [r7, #24]
 800f6b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d00b      	beq.n	800f6d0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800f6b8:	6a3b      	ldr	r3, [r7, #32]
 800f6ba:	f043 0308 	orr.w	r3, r3, #8
 800f6be:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f6c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800f6d0:	69bb      	ldr	r3, [r7, #24]
 800f6d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d00b      	beq.n	800f6f2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800f6da:	6a3b      	ldr	r3, [r7, #32]
 800f6dc:	f043 0302 	orr.w	r3, r3, #2
 800f6e0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f6ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800f6ec:	2301      	movs	r3, #1
 800f6ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800f6f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d01c      	beq.n	800f734 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f6fa:	68f8      	ldr	r0, [r7, #12]
 800f6fc:	f7ff fddc 	bl	800f2b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	6859      	ldr	r1, [r3, #4]
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	681a      	ldr	r2, [r3, #0]
 800f70a:	4b0d      	ldr	r3, [pc, #52]	; (800f740 <I2C_IsErrorOccurred+0x1d4>)
 800f70c:	400b      	ands	r3, r1
 800f70e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f714:	6a3b      	ldr	r3, [r7, #32]
 800f716:	431a      	orrs	r2, r3
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	2220      	movs	r2, #32
 800f720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	2200      	movs	r2, #0
 800f728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	2200      	movs	r2, #0
 800f730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800f734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800f738:	4618      	mov	r0, r3
 800f73a:	3728      	adds	r7, #40	; 0x28
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}
 800f740:	fe00e800 	.word	0xfe00e800

0800f744 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800f744:	b480      	push	{r7}
 800f746:	b087      	sub	sp, #28
 800f748:	af00      	add	r7, sp, #0
 800f74a:	60f8      	str	r0, [r7, #12]
 800f74c:	607b      	str	r3, [r7, #4]
 800f74e:	460b      	mov	r3, r1
 800f750:	817b      	strh	r3, [r7, #10]
 800f752:	4613      	mov	r3, r2
 800f754:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800f756:	897b      	ldrh	r3, [r7, #10]
 800f758:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800f75c:	7a7b      	ldrb	r3, [r7, #9]
 800f75e:	041b      	lsls	r3, r3, #16
 800f760:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800f764:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800f76a:	6a3b      	ldr	r3, [r7, #32]
 800f76c:	4313      	orrs	r3, r2
 800f76e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f772:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	685a      	ldr	r2, [r3, #4]
 800f77a:	6a3b      	ldr	r3, [r7, #32]
 800f77c:	0d5b      	lsrs	r3, r3, #21
 800f77e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800f782:	4b08      	ldr	r3, [pc, #32]	; (800f7a4 <I2C_TransferConfig+0x60>)
 800f784:	430b      	orrs	r3, r1
 800f786:	43db      	mvns	r3, r3
 800f788:	ea02 0103 	and.w	r1, r2, r3
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	697a      	ldr	r2, [r7, #20]
 800f792:	430a      	orrs	r2, r1
 800f794:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800f796:	bf00      	nop
 800f798:	371c      	adds	r7, #28
 800f79a:	46bd      	mov	sp, r7
 800f79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a0:	4770      	bx	lr
 800f7a2:	bf00      	nop
 800f7a4:	03ff63ff 	.word	0x03ff63ff

0800f7a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800f7a8:	b480      	push	{r7}
 800f7aa:	b083      	sub	sp, #12
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
 800f7b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f7b8:	b2db      	uxtb	r3, r3
 800f7ba:	2b20      	cmp	r3, #32
 800f7bc:	d138      	bne.n	800f830 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f7c4:	2b01      	cmp	r3, #1
 800f7c6:	d101      	bne.n	800f7cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800f7c8:	2302      	movs	r3, #2
 800f7ca:	e032      	b.n	800f832 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2201      	movs	r2, #1
 800f7d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2224      	movs	r2, #36	; 0x24
 800f7d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	681a      	ldr	r2, [r3, #0]
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	f022 0201 	bic.w	r2, r2, #1
 800f7ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	681a      	ldr	r2, [r3, #0]
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f7fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	6819      	ldr	r1, [r3, #0]
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	683a      	ldr	r2, [r7, #0]
 800f808:	430a      	orrs	r2, r1
 800f80a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	681a      	ldr	r2, [r3, #0]
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	f042 0201 	orr.w	r2, r2, #1
 800f81a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	2220      	movs	r2, #32
 800f820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	2200      	movs	r2, #0
 800f828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800f82c:	2300      	movs	r3, #0
 800f82e:	e000      	b.n	800f832 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800f830:	2302      	movs	r3, #2
  }
}
 800f832:	4618      	mov	r0, r3
 800f834:	370c      	adds	r7, #12
 800f836:	46bd      	mov	sp, r7
 800f838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83c:	4770      	bx	lr

0800f83e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800f83e:	b480      	push	{r7}
 800f840:	b085      	sub	sp, #20
 800f842:	af00      	add	r7, sp, #0
 800f844:	6078      	str	r0, [r7, #4]
 800f846:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f84e:	b2db      	uxtb	r3, r3
 800f850:	2b20      	cmp	r3, #32
 800f852:	d139      	bne.n	800f8c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f85a:	2b01      	cmp	r3, #1
 800f85c:	d101      	bne.n	800f862 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800f85e:	2302      	movs	r3, #2
 800f860:	e033      	b.n	800f8ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	2201      	movs	r2, #1
 800f866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	2224      	movs	r2, #36	; 0x24
 800f86e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	681a      	ldr	r2, [r3, #0]
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	f022 0201 	bic.w	r2, r2, #1
 800f880:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800f890:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800f892:	683b      	ldr	r3, [r7, #0]
 800f894:	021b      	lsls	r3, r3, #8
 800f896:	68fa      	ldr	r2, [r7, #12]
 800f898:	4313      	orrs	r3, r2
 800f89a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	68fa      	ldr	r2, [r7, #12]
 800f8a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	681a      	ldr	r2, [r3, #0]
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	f042 0201 	orr.w	r2, r2, #1
 800f8b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	2220      	movs	r2, #32
 800f8b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2200      	movs	r2, #0
 800f8c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	e000      	b.n	800f8ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800f8c8:	2302      	movs	r3, #2
  }
}
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	3714      	adds	r7, #20
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d4:	4770      	bx	lr
	...

0800f8d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800f8d8:	b480      	push	{r7}
 800f8da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800f8dc:	4b04      	ldr	r3, [pc, #16]	; (800f8f0 <HAL_PWREx_GetVoltageRange+0x18>)
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ec:	4770      	bx	lr
 800f8ee:	bf00      	nop
 800f8f0:	40007000 	.word	0x40007000

0800f8f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800f8f4:	b480      	push	{r7}
 800f8f6:	b085      	sub	sp, #20
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f902:	d130      	bne.n	800f966 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800f904:	4b23      	ldr	r3, [pc, #140]	; (800f994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f90c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f910:	d038      	beq.n	800f984 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800f912:	4b20      	ldr	r3, [pc, #128]	; (800f994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800f91a:	4a1e      	ldr	r2, [pc, #120]	; (800f994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f91c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f920:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800f922:	4b1d      	ldr	r3, [pc, #116]	; (800f998 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	2232      	movs	r2, #50	; 0x32
 800f928:	fb02 f303 	mul.w	r3, r2, r3
 800f92c:	4a1b      	ldr	r2, [pc, #108]	; (800f99c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800f92e:	fba2 2303 	umull	r2, r3, r2, r3
 800f932:	0c9b      	lsrs	r3, r3, #18
 800f934:	3301      	adds	r3, #1
 800f936:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800f938:	e002      	b.n	800f940 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	3b01      	subs	r3, #1
 800f93e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800f940:	4b14      	ldr	r3, [pc, #80]	; (800f994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f942:	695b      	ldr	r3, [r3, #20]
 800f944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f94c:	d102      	bne.n	800f954 <HAL_PWREx_ControlVoltageScaling+0x60>
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d1f2      	bne.n	800f93a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800f954:	4b0f      	ldr	r3, [pc, #60]	; (800f994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f956:	695b      	ldr	r3, [r3, #20]
 800f958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f95c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f960:	d110      	bne.n	800f984 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800f962:	2303      	movs	r3, #3
 800f964:	e00f      	b.n	800f986 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800f966:	4b0b      	ldr	r3, [pc, #44]	; (800f994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f96e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f972:	d007      	beq.n	800f984 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800f974:	4b07      	ldr	r3, [pc, #28]	; (800f994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800f97c:	4a05      	ldr	r2, [pc, #20]	; (800f994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f97e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f982:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800f984:	2300      	movs	r3, #0
}
 800f986:	4618      	mov	r0, r3
 800f988:	3714      	adds	r7, #20
 800f98a:	46bd      	mov	sp, r7
 800f98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f990:	4770      	bx	lr
 800f992:	bf00      	nop
 800f994:	40007000 	.word	0x40007000
 800f998:	200006f0 	.word	0x200006f0
 800f99c:	431bde83 	.word	0x431bde83

0800f9a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b088      	sub	sp, #32
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d101      	bne.n	800f9b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f9ae:	2301      	movs	r3, #1
 800f9b0:	e3c6      	b.n	8010140 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f9b2:	4ba1      	ldr	r3, [pc, #644]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800f9b4:	689b      	ldr	r3, [r3, #8]
 800f9b6:	f003 030c 	and.w	r3, r3, #12
 800f9ba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f9bc:	4b9e      	ldr	r3, [pc, #632]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800f9be:	68db      	ldr	r3, [r3, #12]
 800f9c0:	f003 0303 	and.w	r3, r3, #3
 800f9c4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	f003 0310 	and.w	r3, r3, #16
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	f000 80e4 	beq.w	800fb9c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800f9d4:	69bb      	ldr	r3, [r7, #24]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d007      	beq.n	800f9ea <HAL_RCC_OscConfig+0x4a>
 800f9da:	69bb      	ldr	r3, [r7, #24]
 800f9dc:	2b0c      	cmp	r3, #12
 800f9de:	f040 808b 	bne.w	800faf8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800f9e2:	697b      	ldr	r3, [r7, #20]
 800f9e4:	2b01      	cmp	r3, #1
 800f9e6:	f040 8087 	bne.w	800faf8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800f9ea:	4b93      	ldr	r3, [pc, #588]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	f003 0302 	and.w	r3, r3, #2
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d005      	beq.n	800fa02 <HAL_RCC_OscConfig+0x62>
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	699b      	ldr	r3, [r3, #24]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d101      	bne.n	800fa02 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800f9fe:	2301      	movs	r3, #1
 800fa00:	e39e      	b.n	8010140 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	6a1a      	ldr	r2, [r3, #32]
 800fa06:	4b8c      	ldr	r3, [pc, #560]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	f003 0308 	and.w	r3, r3, #8
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d004      	beq.n	800fa1c <HAL_RCC_OscConfig+0x7c>
 800fa12:	4b89      	ldr	r3, [pc, #548]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fa1a:	e005      	b.n	800fa28 <HAL_RCC_OscConfig+0x88>
 800fa1c:	4b86      	ldr	r3, [pc, #536]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fa1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fa22:	091b      	lsrs	r3, r3, #4
 800fa24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fa28:	4293      	cmp	r3, r2
 800fa2a:	d223      	bcs.n	800fa74 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	6a1b      	ldr	r3, [r3, #32]
 800fa30:	4618      	mov	r0, r3
 800fa32:	f000 fd53 	bl	80104dc <RCC_SetFlashLatencyFromMSIRange>
 800fa36:	4603      	mov	r3, r0
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d001      	beq.n	800fa40 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800fa3c:	2301      	movs	r3, #1
 800fa3e:	e37f      	b.n	8010140 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fa40:	4b7d      	ldr	r3, [pc, #500]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	4a7c      	ldr	r2, [pc, #496]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fa46:	f043 0308 	orr.w	r3, r3, #8
 800fa4a:	6013      	str	r3, [r2, #0]
 800fa4c:	4b7a      	ldr	r3, [pc, #488]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	6a1b      	ldr	r3, [r3, #32]
 800fa58:	4977      	ldr	r1, [pc, #476]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fa5a:	4313      	orrs	r3, r2
 800fa5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fa5e:	4b76      	ldr	r3, [pc, #472]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fa60:	685b      	ldr	r3, [r3, #4]
 800fa62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	69db      	ldr	r3, [r3, #28]
 800fa6a:	021b      	lsls	r3, r3, #8
 800fa6c:	4972      	ldr	r1, [pc, #456]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fa6e:	4313      	orrs	r3, r2
 800fa70:	604b      	str	r3, [r1, #4]
 800fa72:	e025      	b.n	800fac0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fa74:	4b70      	ldr	r3, [pc, #448]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	4a6f      	ldr	r2, [pc, #444]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fa7a:	f043 0308 	orr.w	r3, r3, #8
 800fa7e:	6013      	str	r3, [r2, #0]
 800fa80:	4b6d      	ldr	r3, [pc, #436]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	6a1b      	ldr	r3, [r3, #32]
 800fa8c:	496a      	ldr	r1, [pc, #424]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fa8e:	4313      	orrs	r3, r2
 800fa90:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fa92:	4b69      	ldr	r3, [pc, #420]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fa94:	685b      	ldr	r3, [r3, #4]
 800fa96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	69db      	ldr	r3, [r3, #28]
 800fa9e:	021b      	lsls	r3, r3, #8
 800faa0:	4965      	ldr	r1, [pc, #404]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800faa2:	4313      	orrs	r3, r2
 800faa4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800faa6:	69bb      	ldr	r3, [r7, #24]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d109      	bne.n	800fac0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	6a1b      	ldr	r3, [r3, #32]
 800fab0:	4618      	mov	r0, r3
 800fab2:	f000 fd13 	bl	80104dc <RCC_SetFlashLatencyFromMSIRange>
 800fab6:	4603      	mov	r3, r0
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d001      	beq.n	800fac0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800fabc:	2301      	movs	r3, #1
 800fabe:	e33f      	b.n	8010140 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800fac0:	f000 fc48 	bl	8010354 <HAL_RCC_GetSysClockFreq>
 800fac4:	4602      	mov	r2, r0
 800fac6:	4b5c      	ldr	r3, [pc, #368]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fac8:	689b      	ldr	r3, [r3, #8]
 800faca:	091b      	lsrs	r3, r3, #4
 800facc:	f003 030f 	and.w	r3, r3, #15
 800fad0:	495a      	ldr	r1, [pc, #360]	; (800fc3c <HAL_RCC_OscConfig+0x29c>)
 800fad2:	5ccb      	ldrb	r3, [r1, r3]
 800fad4:	f003 031f 	and.w	r3, r3, #31
 800fad8:	fa22 f303 	lsr.w	r3, r2, r3
 800fadc:	4a58      	ldr	r2, [pc, #352]	; (800fc40 <HAL_RCC_OscConfig+0x2a0>)
 800fade:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800fae0:	4b58      	ldr	r3, [pc, #352]	; (800fc44 <HAL_RCC_OscConfig+0x2a4>)
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	4618      	mov	r0, r3
 800fae6:	f7fe f86b 	bl	800dbc0 <HAL_InitTick>
 800faea:	4603      	mov	r3, r0
 800faec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800faee:	7bfb      	ldrb	r3, [r7, #15]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d052      	beq.n	800fb9a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800faf4:	7bfb      	ldrb	r3, [r7, #15]
 800faf6:	e323      	b.n	8010140 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	699b      	ldr	r3, [r3, #24]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d032      	beq.n	800fb66 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800fb00:	4b4d      	ldr	r3, [pc, #308]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	4a4c      	ldr	r2, [pc, #304]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fb06:	f043 0301 	orr.w	r3, r3, #1
 800fb0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800fb0c:	f7fe f8a8 	bl	800dc60 <HAL_GetTick>
 800fb10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800fb12:	e008      	b.n	800fb26 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800fb14:	f7fe f8a4 	bl	800dc60 <HAL_GetTick>
 800fb18:	4602      	mov	r2, r0
 800fb1a:	693b      	ldr	r3, [r7, #16]
 800fb1c:	1ad3      	subs	r3, r2, r3
 800fb1e:	2b02      	cmp	r3, #2
 800fb20:	d901      	bls.n	800fb26 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800fb22:	2303      	movs	r3, #3
 800fb24:	e30c      	b.n	8010140 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800fb26:	4b44      	ldr	r3, [pc, #272]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	f003 0302 	and.w	r3, r3, #2
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d0f0      	beq.n	800fb14 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fb32:	4b41      	ldr	r3, [pc, #260]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	4a40      	ldr	r2, [pc, #256]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fb38:	f043 0308 	orr.w	r3, r3, #8
 800fb3c:	6013      	str	r3, [r2, #0]
 800fb3e:	4b3e      	ldr	r3, [pc, #248]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	6a1b      	ldr	r3, [r3, #32]
 800fb4a:	493b      	ldr	r1, [pc, #236]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fb4c:	4313      	orrs	r3, r2
 800fb4e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fb50:	4b39      	ldr	r3, [pc, #228]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fb52:	685b      	ldr	r3, [r3, #4]
 800fb54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	69db      	ldr	r3, [r3, #28]
 800fb5c:	021b      	lsls	r3, r3, #8
 800fb5e:	4936      	ldr	r1, [pc, #216]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fb60:	4313      	orrs	r3, r2
 800fb62:	604b      	str	r3, [r1, #4]
 800fb64:	e01a      	b.n	800fb9c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800fb66:	4b34      	ldr	r3, [pc, #208]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	4a33      	ldr	r2, [pc, #204]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fb6c:	f023 0301 	bic.w	r3, r3, #1
 800fb70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800fb72:	f7fe f875 	bl	800dc60 <HAL_GetTick>
 800fb76:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800fb78:	e008      	b.n	800fb8c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800fb7a:	f7fe f871 	bl	800dc60 <HAL_GetTick>
 800fb7e:	4602      	mov	r2, r0
 800fb80:	693b      	ldr	r3, [r7, #16]
 800fb82:	1ad3      	subs	r3, r2, r3
 800fb84:	2b02      	cmp	r3, #2
 800fb86:	d901      	bls.n	800fb8c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800fb88:	2303      	movs	r3, #3
 800fb8a:	e2d9      	b.n	8010140 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800fb8c:	4b2a      	ldr	r3, [pc, #168]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	f003 0302 	and.w	r3, r3, #2
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d1f0      	bne.n	800fb7a <HAL_RCC_OscConfig+0x1da>
 800fb98:	e000      	b.n	800fb9c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800fb9a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	f003 0301 	and.w	r3, r3, #1
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d074      	beq.n	800fc92 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800fba8:	69bb      	ldr	r3, [r7, #24]
 800fbaa:	2b08      	cmp	r3, #8
 800fbac:	d005      	beq.n	800fbba <HAL_RCC_OscConfig+0x21a>
 800fbae:	69bb      	ldr	r3, [r7, #24]
 800fbb0:	2b0c      	cmp	r3, #12
 800fbb2:	d10e      	bne.n	800fbd2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800fbb4:	697b      	ldr	r3, [r7, #20]
 800fbb6:	2b03      	cmp	r3, #3
 800fbb8:	d10b      	bne.n	800fbd2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fbba:	4b1f      	ldr	r3, [pc, #124]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d064      	beq.n	800fc90 <HAL_RCC_OscConfig+0x2f0>
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	685b      	ldr	r3, [r3, #4]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d160      	bne.n	800fc90 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800fbce:	2301      	movs	r3, #1
 800fbd0:	e2b6      	b.n	8010140 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	685b      	ldr	r3, [r3, #4]
 800fbd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fbda:	d106      	bne.n	800fbea <HAL_RCC_OscConfig+0x24a>
 800fbdc:	4b16      	ldr	r3, [pc, #88]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	4a15      	ldr	r2, [pc, #84]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fbe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fbe6:	6013      	str	r3, [r2, #0]
 800fbe8:	e01d      	b.n	800fc26 <HAL_RCC_OscConfig+0x286>
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	685b      	ldr	r3, [r3, #4]
 800fbee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800fbf2:	d10c      	bne.n	800fc0e <HAL_RCC_OscConfig+0x26e>
 800fbf4:	4b10      	ldr	r3, [pc, #64]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	4a0f      	ldr	r2, [pc, #60]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fbfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800fbfe:	6013      	str	r3, [r2, #0]
 800fc00:	4b0d      	ldr	r3, [pc, #52]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	4a0c      	ldr	r2, [pc, #48]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fc06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fc0a:	6013      	str	r3, [r2, #0]
 800fc0c:	e00b      	b.n	800fc26 <HAL_RCC_OscConfig+0x286>
 800fc0e:	4b0a      	ldr	r3, [pc, #40]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	4a09      	ldr	r2, [pc, #36]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fc14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fc18:	6013      	str	r3, [r2, #0]
 800fc1a:	4b07      	ldr	r3, [pc, #28]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	4a06      	ldr	r2, [pc, #24]	; (800fc38 <HAL_RCC_OscConfig+0x298>)
 800fc20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fc24:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	685b      	ldr	r3, [r3, #4]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d01c      	beq.n	800fc68 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fc2e:	f7fe f817 	bl	800dc60 <HAL_GetTick>
 800fc32:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800fc34:	e011      	b.n	800fc5a <HAL_RCC_OscConfig+0x2ba>
 800fc36:	bf00      	nop
 800fc38:	40021000 	.word	0x40021000
 800fc3c:	08016bc0 	.word	0x08016bc0
 800fc40:	200006f0 	.word	0x200006f0
 800fc44:	20000a74 	.word	0x20000a74
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800fc48:	f7fe f80a 	bl	800dc60 <HAL_GetTick>
 800fc4c:	4602      	mov	r2, r0
 800fc4e:	693b      	ldr	r3, [r7, #16]
 800fc50:	1ad3      	subs	r3, r2, r3
 800fc52:	2b64      	cmp	r3, #100	; 0x64
 800fc54:	d901      	bls.n	800fc5a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800fc56:	2303      	movs	r3, #3
 800fc58:	e272      	b.n	8010140 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800fc5a:	4baf      	ldr	r3, [pc, #700]	; (800ff18 <HAL_RCC_OscConfig+0x578>)
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d0f0      	beq.n	800fc48 <HAL_RCC_OscConfig+0x2a8>
 800fc66:	e014      	b.n	800fc92 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fc68:	f7fd fffa 	bl	800dc60 <HAL_GetTick>
 800fc6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800fc6e:	e008      	b.n	800fc82 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800fc70:	f7fd fff6 	bl	800dc60 <HAL_GetTick>
 800fc74:	4602      	mov	r2, r0
 800fc76:	693b      	ldr	r3, [r7, #16]
 800fc78:	1ad3      	subs	r3, r2, r3
 800fc7a:	2b64      	cmp	r3, #100	; 0x64
 800fc7c:	d901      	bls.n	800fc82 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800fc7e:	2303      	movs	r3, #3
 800fc80:	e25e      	b.n	8010140 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800fc82:	4ba5      	ldr	r3, [pc, #660]	; (800ff18 <HAL_RCC_OscConfig+0x578>)
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d1f0      	bne.n	800fc70 <HAL_RCC_OscConfig+0x2d0>
 800fc8e:	e000      	b.n	800fc92 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fc90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	f003 0302 	and.w	r3, r3, #2
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d060      	beq.n	800fd60 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800fc9e:	69bb      	ldr	r3, [r7, #24]
 800fca0:	2b04      	cmp	r3, #4
 800fca2:	d005      	beq.n	800fcb0 <HAL_RCC_OscConfig+0x310>
 800fca4:	69bb      	ldr	r3, [r7, #24]
 800fca6:	2b0c      	cmp	r3, #12
 800fca8:	d119      	bne.n	800fcde <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800fcaa:	697b      	ldr	r3, [r7, #20]
 800fcac:	2b02      	cmp	r3, #2
 800fcae:	d116      	bne.n	800fcde <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800fcb0:	4b99      	ldr	r3, [pc, #612]	; (800ff18 <HAL_RCC_OscConfig+0x578>)
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d005      	beq.n	800fcc8 <HAL_RCC_OscConfig+0x328>
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	68db      	ldr	r3, [r3, #12]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d101      	bne.n	800fcc8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800fcc4:	2301      	movs	r3, #1
 800fcc6:	e23b      	b.n	8010140 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fcc8:	4b93      	ldr	r3, [pc, #588]	; (800ff18 <HAL_RCC_OscConfig+0x578>)
 800fcca:	685b      	ldr	r3, [r3, #4]
 800fccc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	691b      	ldr	r3, [r3, #16]
 800fcd4:	061b      	lsls	r3, r3, #24
 800fcd6:	4990      	ldr	r1, [pc, #576]	; (800ff18 <HAL_RCC_OscConfig+0x578>)
 800fcd8:	4313      	orrs	r3, r2
 800fcda:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800fcdc:	e040      	b.n	800fd60 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	68db      	ldr	r3, [r3, #12]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d023      	beq.n	800fd2e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800fce6:	4b8c      	ldr	r3, [pc, #560]	; (800ff18 <HAL_RCC_OscConfig+0x578>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	4a8b      	ldr	r2, [pc, #556]	; (800ff18 <HAL_RCC_OscConfig+0x578>)
 800fcec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fcf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fcf2:	f7fd ffb5 	bl	800dc60 <HAL_GetTick>
 800fcf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800fcf8:	e008      	b.n	800fd0c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fcfa:	f7fd ffb1 	bl	800dc60 <HAL_GetTick>
 800fcfe:	4602      	mov	r2, r0
 800fd00:	693b      	ldr	r3, [r7, #16]
 800fd02:	1ad3      	subs	r3, r2, r3
 800fd04:	2b02      	cmp	r3, #2
 800fd06:	d901      	bls.n	800fd0c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800fd08:	2303      	movs	r3, #3
 800fd0a:	e219      	b.n	8010140 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800fd0c:	4b82      	ldr	r3, [pc, #520]	; (800ff18 <HAL_RCC_OscConfig+0x578>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d0f0      	beq.n	800fcfa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fd18:	4b7f      	ldr	r3, [pc, #508]	; (800ff18 <HAL_RCC_OscConfig+0x578>)
 800fd1a:	685b      	ldr	r3, [r3, #4]
 800fd1c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	691b      	ldr	r3, [r3, #16]
 800fd24:	061b      	lsls	r3, r3, #24
 800fd26:	497c      	ldr	r1, [pc, #496]	; (800ff18 <HAL_RCC_OscConfig+0x578>)
 800fd28:	4313      	orrs	r3, r2
 800fd2a:	604b      	str	r3, [r1, #4]
 800fd2c:	e018      	b.n	800fd60 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800fd2e:	4b7a      	ldr	r3, [pc, #488]	; (800ff18 <HAL_RCC_OscConfig+0x578>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	4a79      	ldr	r2, [pc, #484]	; (800ff18 <HAL_RCC_OscConfig+0x578>)
 800fd34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fd38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fd3a:	f7fd ff91 	bl	800dc60 <HAL_GetTick>
 800fd3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800fd40:	e008      	b.n	800fd54 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fd42:	f7fd ff8d 	bl	800dc60 <HAL_GetTick>
 800fd46:	4602      	mov	r2, r0
 800fd48:	693b      	ldr	r3, [r7, #16]
 800fd4a:	1ad3      	subs	r3, r2, r3
 800fd4c:	2b02      	cmp	r3, #2
 800fd4e:	d901      	bls.n	800fd54 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800fd50:	2303      	movs	r3, #3
 800fd52:	e1f5      	b.n	8010140 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800fd54:	4b70      	ldr	r3, [pc, #448]	; (800ff18 <HAL_RCC_OscConfig+0x578>)
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d1f0      	bne.n	800fd42 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	f003 0308 	and.w	r3, r3, #8
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d03c      	beq.n	800fde6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	695b      	ldr	r3, [r3, #20]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d01c      	beq.n	800fdae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800fd74:	4b68      	ldr	r3, [pc, #416]	; (800ff18 <HAL_RCC_OscConfig+0x578>)
 800fd76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fd7a:	4a67      	ldr	r2, [pc, #412]	; (800ff18 <HAL_RCC_OscConfig+0x578>)
 800fd7c:	f043 0301 	orr.w	r3, r3, #1
 800fd80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fd84:	f7fd ff6c 	bl	800dc60 <HAL_GetTick>
 800fd88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800fd8a:	e008      	b.n	800fd9e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800fd8c:	f7fd ff68 	bl	800dc60 <HAL_GetTick>
 800fd90:	4602      	mov	r2, r0
 800fd92:	693b      	ldr	r3, [r7, #16]
 800fd94:	1ad3      	subs	r3, r2, r3
 800fd96:	2b02      	cmp	r3, #2
 800fd98:	d901      	bls.n	800fd9e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800fd9a:	2303      	movs	r3, #3
 800fd9c:	e1d0      	b.n	8010140 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800fd9e:	4b5e      	ldr	r3, [pc, #376]	; (800ff18 <HAL_RCC_OscConfig+0x578>)
 800fda0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fda4:	f003 0302 	and.w	r3, r3, #2
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d0ef      	beq.n	800fd8c <HAL_RCC_OscConfig+0x3ec>
 800fdac:	e01b      	b.n	800fde6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800fdae:	4b5a      	ldr	r3, [pc, #360]	; (800ff18 <HAL_RCC_OscConfig+0x578>)
 800fdb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fdb4:	4a58      	ldr	r2, [pc, #352]	; (800ff18 <HAL_RCC_OscConfig+0x578>)
 800fdb6:	f023 0301 	bic.w	r3, r3, #1
 800fdba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fdbe:	f7fd ff4f 	bl	800dc60 <HAL_GetTick>
 800fdc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800fdc4:	e008      	b.n	800fdd8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800fdc6:	f7fd ff4b 	bl	800dc60 <HAL_GetTick>
 800fdca:	4602      	mov	r2, r0
 800fdcc:	693b      	ldr	r3, [r7, #16]
 800fdce:	1ad3      	subs	r3, r2, r3
 800fdd0:	2b02      	cmp	r3, #2
 800fdd2:	d901      	bls.n	800fdd8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800fdd4:	2303      	movs	r3, #3
 800fdd6:	e1b3      	b.n	8010140 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800fdd8:	4b4f      	ldr	r3, [pc, #316]	; (800ff18 <HAL_RCC_OscConfig+0x578>)
 800fdda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fdde:	f003 0302 	and.w	r3, r3, #2
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d1ef      	bne.n	800fdc6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	f003 0304 	and.w	r3, r3, #4
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	f000 80a6 	beq.w	800ff40 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800fdf8:	4b47      	ldr	r3, [pc, #284]	; (800ff18 <HAL_RCC_OscConfig+0x578>)
 800fdfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fdfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d10d      	bne.n	800fe20 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fe04:	4b44      	ldr	r3, [pc, #272]	; (800ff18 <HAL_RCC_OscConfig+0x578>)
 800fe06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe08:	4a43      	ldr	r2, [pc, #268]	; (800ff18 <HAL_RCC_OscConfig+0x578>)
 800fe0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fe0e:	6593      	str	r3, [r2, #88]	; 0x58
 800fe10:	4b41      	ldr	r3, [pc, #260]	; (800ff18 <HAL_RCC_OscConfig+0x578>)
 800fe12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fe18:	60bb      	str	r3, [r7, #8]
 800fe1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800fe1c:	2301      	movs	r3, #1
 800fe1e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800fe20:	4b3e      	ldr	r3, [pc, #248]	; (800ff1c <HAL_RCC_OscConfig+0x57c>)
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d118      	bne.n	800fe5e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800fe2c:	4b3b      	ldr	r3, [pc, #236]	; (800ff1c <HAL_RCC_OscConfig+0x57c>)
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	4a3a      	ldr	r2, [pc, #232]	; (800ff1c <HAL_RCC_OscConfig+0x57c>)
 800fe32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fe36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800fe38:	f7fd ff12 	bl	800dc60 <HAL_GetTick>
 800fe3c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800fe3e:	e008      	b.n	800fe52 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fe40:	f7fd ff0e 	bl	800dc60 <HAL_GetTick>
 800fe44:	4602      	mov	r2, r0
 800fe46:	693b      	ldr	r3, [r7, #16]
 800fe48:	1ad3      	subs	r3, r2, r3
 800fe4a:	2b02      	cmp	r3, #2
 800fe4c:	d901      	bls.n	800fe52 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800fe4e:	2303      	movs	r3, #3
 800fe50:	e176      	b.n	8010140 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800fe52:	4b32      	ldr	r3, [pc, #200]	; (800ff1c <HAL_RCC_OscConfig+0x57c>)
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d0f0      	beq.n	800fe40 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	689b      	ldr	r3, [r3, #8]
 800fe62:	2b01      	cmp	r3, #1
 800fe64:	d108      	bne.n	800fe78 <HAL_RCC_OscConfig+0x4d8>
 800fe66:	4b2c      	ldr	r3, [pc, #176]	; (800ff18 <HAL_RCC_OscConfig+0x578>)
 800fe68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe6c:	4a2a      	ldr	r2, [pc, #168]	; (800ff18 <HAL_RCC_OscConfig+0x578>)
 800fe6e:	f043 0301 	orr.w	r3, r3, #1
 800fe72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800fe76:	e024      	b.n	800fec2 <HAL_RCC_OscConfig+0x522>
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	689b      	ldr	r3, [r3, #8]
 800fe7c:	2b05      	cmp	r3, #5
 800fe7e:	d110      	bne.n	800fea2 <HAL_RCC_OscConfig+0x502>
 800fe80:	4b25      	ldr	r3, [pc, #148]	; (800ff18 <HAL_RCC_OscConfig+0x578>)
 800fe82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe86:	4a24      	ldr	r2, [pc, #144]	; (800ff18 <HAL_RCC_OscConfig+0x578>)
 800fe88:	f043 0304 	orr.w	r3, r3, #4
 800fe8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800fe90:	4b21      	ldr	r3, [pc, #132]	; (800ff18 <HAL_RCC_OscConfig+0x578>)
 800fe92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe96:	4a20      	ldr	r2, [pc, #128]	; (800ff18 <HAL_RCC_OscConfig+0x578>)
 800fe98:	f043 0301 	orr.w	r3, r3, #1
 800fe9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800fea0:	e00f      	b.n	800fec2 <HAL_RCC_OscConfig+0x522>
 800fea2:	4b1d      	ldr	r3, [pc, #116]	; (800ff18 <HAL_RCC_OscConfig+0x578>)
 800fea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fea8:	4a1b      	ldr	r2, [pc, #108]	; (800ff18 <HAL_RCC_OscConfig+0x578>)
 800feaa:	f023 0301 	bic.w	r3, r3, #1
 800feae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800feb2:	4b19      	ldr	r3, [pc, #100]	; (800ff18 <HAL_RCC_OscConfig+0x578>)
 800feb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800feb8:	4a17      	ldr	r2, [pc, #92]	; (800ff18 <HAL_RCC_OscConfig+0x578>)
 800feba:	f023 0304 	bic.w	r3, r3, #4
 800febe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	689b      	ldr	r3, [r3, #8]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d016      	beq.n	800fef8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800feca:	f7fd fec9 	bl	800dc60 <HAL_GetTick>
 800fece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800fed0:	e00a      	b.n	800fee8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fed2:	f7fd fec5 	bl	800dc60 <HAL_GetTick>
 800fed6:	4602      	mov	r2, r0
 800fed8:	693b      	ldr	r3, [r7, #16]
 800feda:	1ad3      	subs	r3, r2, r3
 800fedc:	f241 3288 	movw	r2, #5000	; 0x1388
 800fee0:	4293      	cmp	r3, r2
 800fee2:	d901      	bls.n	800fee8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800fee4:	2303      	movs	r3, #3
 800fee6:	e12b      	b.n	8010140 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800fee8:	4b0b      	ldr	r3, [pc, #44]	; (800ff18 <HAL_RCC_OscConfig+0x578>)
 800feea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800feee:	f003 0302 	and.w	r3, r3, #2
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d0ed      	beq.n	800fed2 <HAL_RCC_OscConfig+0x532>
 800fef6:	e01a      	b.n	800ff2e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fef8:	f7fd feb2 	bl	800dc60 <HAL_GetTick>
 800fefc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800fefe:	e00f      	b.n	800ff20 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ff00:	f7fd feae 	bl	800dc60 <HAL_GetTick>
 800ff04:	4602      	mov	r2, r0
 800ff06:	693b      	ldr	r3, [r7, #16]
 800ff08:	1ad3      	subs	r3, r2, r3
 800ff0a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ff0e:	4293      	cmp	r3, r2
 800ff10:	d906      	bls.n	800ff20 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800ff12:	2303      	movs	r3, #3
 800ff14:	e114      	b.n	8010140 <HAL_RCC_OscConfig+0x7a0>
 800ff16:	bf00      	nop
 800ff18:	40021000 	.word	0x40021000
 800ff1c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ff20:	4b89      	ldr	r3, [pc, #548]	; (8010148 <HAL_RCC_OscConfig+0x7a8>)
 800ff22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff26:	f003 0302 	and.w	r3, r3, #2
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d1e8      	bne.n	800ff00 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ff2e:	7ffb      	ldrb	r3, [r7, #31]
 800ff30:	2b01      	cmp	r3, #1
 800ff32:	d105      	bne.n	800ff40 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ff34:	4b84      	ldr	r3, [pc, #528]	; (8010148 <HAL_RCC_OscConfig+0x7a8>)
 800ff36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff38:	4a83      	ldr	r2, [pc, #524]	; (8010148 <HAL_RCC_OscConfig+0x7a8>)
 800ff3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ff3e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	f000 80fa 	beq.w	801013e <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff4e:	2b02      	cmp	r3, #2
 800ff50:	f040 80d0 	bne.w	80100f4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800ff54:	4b7c      	ldr	r3, [pc, #496]	; (8010148 <HAL_RCC_OscConfig+0x7a8>)
 800ff56:	68db      	ldr	r3, [r3, #12]
 800ff58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ff5a:	697b      	ldr	r3, [r7, #20]
 800ff5c:	f003 0203 	and.w	r2, r3, #3
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff64:	429a      	cmp	r2, r3
 800ff66:	d130      	bne.n	800ffca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ff68:	697b      	ldr	r3, [r7, #20]
 800ff6a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff72:	3b01      	subs	r3, #1
 800ff74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ff76:	429a      	cmp	r2, r3
 800ff78:	d127      	bne.n	800ffca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ff7a:	697b      	ldr	r3, [r7, #20]
 800ff7c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff84:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ff86:	429a      	cmp	r2, r3
 800ff88:	d11f      	bne.n	800ffca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800ff8a:	697b      	ldr	r3, [r7, #20]
 800ff8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ff90:	687a      	ldr	r2, [r7, #4]
 800ff92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ff94:	2a07      	cmp	r2, #7
 800ff96:	bf14      	ite	ne
 800ff98:	2201      	movne	r2, #1
 800ff9a:	2200      	moveq	r2, #0
 800ff9c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ff9e:	4293      	cmp	r3, r2
 800ffa0:	d113      	bne.n	800ffca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ffa2:	697b      	ldr	r3, [r7, #20]
 800ffa4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ffac:	085b      	lsrs	r3, r3, #1
 800ffae:	3b01      	subs	r3, #1
 800ffb0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800ffb2:	429a      	cmp	r2, r3
 800ffb4:	d109      	bne.n	800ffca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ffb6:	697b      	ldr	r3, [r7, #20]
 800ffb8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffc0:	085b      	lsrs	r3, r3, #1
 800ffc2:	3b01      	subs	r3, #1
 800ffc4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ffc6:	429a      	cmp	r2, r3
 800ffc8:	d06e      	beq.n	80100a8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ffca:	69bb      	ldr	r3, [r7, #24]
 800ffcc:	2b0c      	cmp	r3, #12
 800ffce:	d069      	beq.n	80100a4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800ffd0:	4b5d      	ldr	r3, [pc, #372]	; (8010148 <HAL_RCC_OscConfig+0x7a8>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d105      	bne.n	800ffe8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800ffdc:	4b5a      	ldr	r3, [pc, #360]	; (8010148 <HAL_RCC_OscConfig+0x7a8>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d001      	beq.n	800ffec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800ffe8:	2301      	movs	r3, #1
 800ffea:	e0a9      	b.n	8010140 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800ffec:	4b56      	ldr	r3, [pc, #344]	; (8010148 <HAL_RCC_OscConfig+0x7a8>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	4a55      	ldr	r2, [pc, #340]	; (8010148 <HAL_RCC_OscConfig+0x7a8>)
 800fff2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fff6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800fff8:	f7fd fe32 	bl	800dc60 <HAL_GetTick>
 800fffc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fffe:	e008      	b.n	8010012 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010000:	f7fd fe2e 	bl	800dc60 <HAL_GetTick>
 8010004:	4602      	mov	r2, r0
 8010006:	693b      	ldr	r3, [r7, #16]
 8010008:	1ad3      	subs	r3, r2, r3
 801000a:	2b02      	cmp	r3, #2
 801000c:	d901      	bls.n	8010012 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 801000e:	2303      	movs	r3, #3
 8010010:	e096      	b.n	8010140 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8010012:	4b4d      	ldr	r3, [pc, #308]	; (8010148 <HAL_RCC_OscConfig+0x7a8>)
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801001a:	2b00      	cmp	r3, #0
 801001c:	d1f0      	bne.n	8010000 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801001e:	4b4a      	ldr	r3, [pc, #296]	; (8010148 <HAL_RCC_OscConfig+0x7a8>)
 8010020:	68da      	ldr	r2, [r3, #12]
 8010022:	4b4a      	ldr	r3, [pc, #296]	; (801014c <HAL_RCC_OscConfig+0x7ac>)
 8010024:	4013      	ands	r3, r2
 8010026:	687a      	ldr	r2, [r7, #4]
 8010028:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 801002a:	687a      	ldr	r2, [r7, #4]
 801002c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801002e:	3a01      	subs	r2, #1
 8010030:	0112      	lsls	r2, r2, #4
 8010032:	4311      	orrs	r1, r2
 8010034:	687a      	ldr	r2, [r7, #4]
 8010036:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010038:	0212      	lsls	r2, r2, #8
 801003a:	4311      	orrs	r1, r2
 801003c:	687a      	ldr	r2, [r7, #4]
 801003e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8010040:	0852      	lsrs	r2, r2, #1
 8010042:	3a01      	subs	r2, #1
 8010044:	0552      	lsls	r2, r2, #21
 8010046:	4311      	orrs	r1, r2
 8010048:	687a      	ldr	r2, [r7, #4]
 801004a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801004c:	0852      	lsrs	r2, r2, #1
 801004e:	3a01      	subs	r2, #1
 8010050:	0652      	lsls	r2, r2, #25
 8010052:	4311      	orrs	r1, r2
 8010054:	687a      	ldr	r2, [r7, #4]
 8010056:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8010058:	0912      	lsrs	r2, r2, #4
 801005a:	0452      	lsls	r2, r2, #17
 801005c:	430a      	orrs	r2, r1
 801005e:	493a      	ldr	r1, [pc, #232]	; (8010148 <HAL_RCC_OscConfig+0x7a8>)
 8010060:	4313      	orrs	r3, r2
 8010062:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8010064:	4b38      	ldr	r3, [pc, #224]	; (8010148 <HAL_RCC_OscConfig+0x7a8>)
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	4a37      	ldr	r2, [pc, #220]	; (8010148 <HAL_RCC_OscConfig+0x7a8>)
 801006a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801006e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8010070:	4b35      	ldr	r3, [pc, #212]	; (8010148 <HAL_RCC_OscConfig+0x7a8>)
 8010072:	68db      	ldr	r3, [r3, #12]
 8010074:	4a34      	ldr	r2, [pc, #208]	; (8010148 <HAL_RCC_OscConfig+0x7a8>)
 8010076:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801007a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 801007c:	f7fd fdf0 	bl	800dc60 <HAL_GetTick>
 8010080:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8010082:	e008      	b.n	8010096 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010084:	f7fd fdec 	bl	800dc60 <HAL_GetTick>
 8010088:	4602      	mov	r2, r0
 801008a:	693b      	ldr	r3, [r7, #16]
 801008c:	1ad3      	subs	r3, r2, r3
 801008e:	2b02      	cmp	r3, #2
 8010090:	d901      	bls.n	8010096 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8010092:	2303      	movs	r3, #3
 8010094:	e054      	b.n	8010140 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8010096:	4b2c      	ldr	r3, [pc, #176]	; (8010148 <HAL_RCC_OscConfig+0x7a8>)
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d0f0      	beq.n	8010084 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80100a2:	e04c      	b.n	801013e <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80100a4:	2301      	movs	r3, #1
 80100a6:	e04b      	b.n	8010140 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80100a8:	4b27      	ldr	r3, [pc, #156]	; (8010148 <HAL_RCC_OscConfig+0x7a8>)
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d144      	bne.n	801013e <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80100b4:	4b24      	ldr	r3, [pc, #144]	; (8010148 <HAL_RCC_OscConfig+0x7a8>)
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	4a23      	ldr	r2, [pc, #140]	; (8010148 <HAL_RCC_OscConfig+0x7a8>)
 80100ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80100be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80100c0:	4b21      	ldr	r3, [pc, #132]	; (8010148 <HAL_RCC_OscConfig+0x7a8>)
 80100c2:	68db      	ldr	r3, [r3, #12]
 80100c4:	4a20      	ldr	r2, [pc, #128]	; (8010148 <HAL_RCC_OscConfig+0x7a8>)
 80100c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80100ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80100cc:	f7fd fdc8 	bl	800dc60 <HAL_GetTick>
 80100d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80100d2:	e008      	b.n	80100e6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80100d4:	f7fd fdc4 	bl	800dc60 <HAL_GetTick>
 80100d8:	4602      	mov	r2, r0
 80100da:	693b      	ldr	r3, [r7, #16]
 80100dc:	1ad3      	subs	r3, r2, r3
 80100de:	2b02      	cmp	r3, #2
 80100e0:	d901      	bls.n	80100e6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80100e2:	2303      	movs	r3, #3
 80100e4:	e02c      	b.n	8010140 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80100e6:	4b18      	ldr	r3, [pc, #96]	; (8010148 <HAL_RCC_OscConfig+0x7a8>)
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d0f0      	beq.n	80100d4 <HAL_RCC_OscConfig+0x734>
 80100f2:	e024      	b.n	801013e <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80100f4:	69bb      	ldr	r3, [r7, #24]
 80100f6:	2b0c      	cmp	r3, #12
 80100f8:	d01f      	beq.n	801013a <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80100fa:	4b13      	ldr	r3, [pc, #76]	; (8010148 <HAL_RCC_OscConfig+0x7a8>)
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	4a12      	ldr	r2, [pc, #72]	; (8010148 <HAL_RCC_OscConfig+0x7a8>)
 8010100:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010106:	f7fd fdab 	bl	800dc60 <HAL_GetTick>
 801010a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801010c:	e008      	b.n	8010120 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801010e:	f7fd fda7 	bl	800dc60 <HAL_GetTick>
 8010112:	4602      	mov	r2, r0
 8010114:	693b      	ldr	r3, [r7, #16]
 8010116:	1ad3      	subs	r3, r2, r3
 8010118:	2b02      	cmp	r3, #2
 801011a:	d901      	bls.n	8010120 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 801011c:	2303      	movs	r3, #3
 801011e:	e00f      	b.n	8010140 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8010120:	4b09      	ldr	r3, [pc, #36]	; (8010148 <HAL_RCC_OscConfig+0x7a8>)
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010128:	2b00      	cmp	r3, #0
 801012a:	d1f0      	bne.n	801010e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 801012c:	4b06      	ldr	r3, [pc, #24]	; (8010148 <HAL_RCC_OscConfig+0x7a8>)
 801012e:	68da      	ldr	r2, [r3, #12]
 8010130:	4905      	ldr	r1, [pc, #20]	; (8010148 <HAL_RCC_OscConfig+0x7a8>)
 8010132:	4b07      	ldr	r3, [pc, #28]	; (8010150 <HAL_RCC_OscConfig+0x7b0>)
 8010134:	4013      	ands	r3, r2
 8010136:	60cb      	str	r3, [r1, #12]
 8010138:	e001      	b.n	801013e <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 801013a:	2301      	movs	r3, #1
 801013c:	e000      	b.n	8010140 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 801013e:	2300      	movs	r3, #0
}
 8010140:	4618      	mov	r0, r3
 8010142:	3720      	adds	r7, #32
 8010144:	46bd      	mov	sp, r7
 8010146:	bd80      	pop	{r7, pc}
 8010148:	40021000 	.word	0x40021000
 801014c:	f99d808c 	.word	0xf99d808c
 8010150:	feeefffc 	.word	0xfeeefffc

08010154 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b084      	sub	sp, #16
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
 801015c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d101      	bne.n	8010168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010164:	2301      	movs	r3, #1
 8010166:	e0e7      	b.n	8010338 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8010168:	4b75      	ldr	r3, [pc, #468]	; (8010340 <HAL_RCC_ClockConfig+0x1ec>)
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	f003 0307 	and.w	r3, r3, #7
 8010170:	683a      	ldr	r2, [r7, #0]
 8010172:	429a      	cmp	r2, r3
 8010174:	d910      	bls.n	8010198 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010176:	4b72      	ldr	r3, [pc, #456]	; (8010340 <HAL_RCC_ClockConfig+0x1ec>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	f023 0207 	bic.w	r2, r3, #7
 801017e:	4970      	ldr	r1, [pc, #448]	; (8010340 <HAL_RCC_ClockConfig+0x1ec>)
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	4313      	orrs	r3, r2
 8010184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010186:	4b6e      	ldr	r3, [pc, #440]	; (8010340 <HAL_RCC_ClockConfig+0x1ec>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	f003 0307 	and.w	r3, r3, #7
 801018e:	683a      	ldr	r2, [r7, #0]
 8010190:	429a      	cmp	r2, r3
 8010192:	d001      	beq.n	8010198 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8010194:	2301      	movs	r3, #1
 8010196:	e0cf      	b.n	8010338 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	f003 0302 	and.w	r3, r3, #2
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d010      	beq.n	80101c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	689a      	ldr	r2, [r3, #8]
 80101a8:	4b66      	ldr	r3, [pc, #408]	; (8010344 <HAL_RCC_ClockConfig+0x1f0>)
 80101aa:	689b      	ldr	r3, [r3, #8]
 80101ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80101b0:	429a      	cmp	r2, r3
 80101b2:	d908      	bls.n	80101c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80101b4:	4b63      	ldr	r3, [pc, #396]	; (8010344 <HAL_RCC_ClockConfig+0x1f0>)
 80101b6:	689b      	ldr	r3, [r3, #8]
 80101b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	689b      	ldr	r3, [r3, #8]
 80101c0:	4960      	ldr	r1, [pc, #384]	; (8010344 <HAL_RCC_ClockConfig+0x1f0>)
 80101c2:	4313      	orrs	r3, r2
 80101c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	f003 0301 	and.w	r3, r3, #1
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d04c      	beq.n	801026c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	685b      	ldr	r3, [r3, #4]
 80101d6:	2b03      	cmp	r3, #3
 80101d8:	d107      	bne.n	80101ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80101da:	4b5a      	ldr	r3, [pc, #360]	; (8010344 <HAL_RCC_ClockConfig+0x1f0>)
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d121      	bne.n	801022a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80101e6:	2301      	movs	r3, #1
 80101e8:	e0a6      	b.n	8010338 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	685b      	ldr	r3, [r3, #4]
 80101ee:	2b02      	cmp	r3, #2
 80101f0:	d107      	bne.n	8010202 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80101f2:	4b54      	ldr	r3, [pc, #336]	; (8010344 <HAL_RCC_ClockConfig+0x1f0>)
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d115      	bne.n	801022a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80101fe:	2301      	movs	r3, #1
 8010200:	e09a      	b.n	8010338 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	685b      	ldr	r3, [r3, #4]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d107      	bne.n	801021a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801020a:	4b4e      	ldr	r3, [pc, #312]	; (8010344 <HAL_RCC_ClockConfig+0x1f0>)
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	f003 0302 	and.w	r3, r3, #2
 8010212:	2b00      	cmp	r3, #0
 8010214:	d109      	bne.n	801022a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8010216:	2301      	movs	r3, #1
 8010218:	e08e      	b.n	8010338 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801021a:	4b4a      	ldr	r3, [pc, #296]	; (8010344 <HAL_RCC_ClockConfig+0x1f0>)
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010222:	2b00      	cmp	r3, #0
 8010224:	d101      	bne.n	801022a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8010226:	2301      	movs	r3, #1
 8010228:	e086      	b.n	8010338 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801022a:	4b46      	ldr	r3, [pc, #280]	; (8010344 <HAL_RCC_ClockConfig+0x1f0>)
 801022c:	689b      	ldr	r3, [r3, #8]
 801022e:	f023 0203 	bic.w	r2, r3, #3
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	685b      	ldr	r3, [r3, #4]
 8010236:	4943      	ldr	r1, [pc, #268]	; (8010344 <HAL_RCC_ClockConfig+0x1f0>)
 8010238:	4313      	orrs	r3, r2
 801023a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801023c:	f7fd fd10 	bl	800dc60 <HAL_GetTick>
 8010240:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010242:	e00a      	b.n	801025a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010244:	f7fd fd0c 	bl	800dc60 <HAL_GetTick>
 8010248:	4602      	mov	r2, r0
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	1ad3      	subs	r3, r2, r3
 801024e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010252:	4293      	cmp	r3, r2
 8010254:	d901      	bls.n	801025a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8010256:	2303      	movs	r3, #3
 8010258:	e06e      	b.n	8010338 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801025a:	4b3a      	ldr	r3, [pc, #232]	; (8010344 <HAL_RCC_ClockConfig+0x1f0>)
 801025c:	689b      	ldr	r3, [r3, #8]
 801025e:	f003 020c 	and.w	r2, r3, #12
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	685b      	ldr	r3, [r3, #4]
 8010266:	009b      	lsls	r3, r3, #2
 8010268:	429a      	cmp	r2, r3
 801026a:	d1eb      	bne.n	8010244 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	f003 0302 	and.w	r3, r3, #2
 8010274:	2b00      	cmp	r3, #0
 8010276:	d010      	beq.n	801029a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	689a      	ldr	r2, [r3, #8]
 801027c:	4b31      	ldr	r3, [pc, #196]	; (8010344 <HAL_RCC_ClockConfig+0x1f0>)
 801027e:	689b      	ldr	r3, [r3, #8]
 8010280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010284:	429a      	cmp	r2, r3
 8010286:	d208      	bcs.n	801029a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010288:	4b2e      	ldr	r3, [pc, #184]	; (8010344 <HAL_RCC_ClockConfig+0x1f0>)
 801028a:	689b      	ldr	r3, [r3, #8]
 801028c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	689b      	ldr	r3, [r3, #8]
 8010294:	492b      	ldr	r1, [pc, #172]	; (8010344 <HAL_RCC_ClockConfig+0x1f0>)
 8010296:	4313      	orrs	r3, r2
 8010298:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801029a:	4b29      	ldr	r3, [pc, #164]	; (8010340 <HAL_RCC_ClockConfig+0x1ec>)
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	f003 0307 	and.w	r3, r3, #7
 80102a2:	683a      	ldr	r2, [r7, #0]
 80102a4:	429a      	cmp	r2, r3
 80102a6:	d210      	bcs.n	80102ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80102a8:	4b25      	ldr	r3, [pc, #148]	; (8010340 <HAL_RCC_ClockConfig+0x1ec>)
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	f023 0207 	bic.w	r2, r3, #7
 80102b0:	4923      	ldr	r1, [pc, #140]	; (8010340 <HAL_RCC_ClockConfig+0x1ec>)
 80102b2:	683b      	ldr	r3, [r7, #0]
 80102b4:	4313      	orrs	r3, r2
 80102b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80102b8:	4b21      	ldr	r3, [pc, #132]	; (8010340 <HAL_RCC_ClockConfig+0x1ec>)
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	f003 0307 	and.w	r3, r3, #7
 80102c0:	683a      	ldr	r2, [r7, #0]
 80102c2:	429a      	cmp	r2, r3
 80102c4:	d001      	beq.n	80102ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80102c6:	2301      	movs	r3, #1
 80102c8:	e036      	b.n	8010338 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	f003 0304 	and.w	r3, r3, #4
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d008      	beq.n	80102e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80102d6:	4b1b      	ldr	r3, [pc, #108]	; (8010344 <HAL_RCC_ClockConfig+0x1f0>)
 80102d8:	689b      	ldr	r3, [r3, #8]
 80102da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	68db      	ldr	r3, [r3, #12]
 80102e2:	4918      	ldr	r1, [pc, #96]	; (8010344 <HAL_RCC_ClockConfig+0x1f0>)
 80102e4:	4313      	orrs	r3, r2
 80102e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	f003 0308 	and.w	r3, r3, #8
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d009      	beq.n	8010308 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80102f4:	4b13      	ldr	r3, [pc, #76]	; (8010344 <HAL_RCC_ClockConfig+0x1f0>)
 80102f6:	689b      	ldr	r3, [r3, #8]
 80102f8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	691b      	ldr	r3, [r3, #16]
 8010300:	00db      	lsls	r3, r3, #3
 8010302:	4910      	ldr	r1, [pc, #64]	; (8010344 <HAL_RCC_ClockConfig+0x1f0>)
 8010304:	4313      	orrs	r3, r2
 8010306:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8010308:	f000 f824 	bl	8010354 <HAL_RCC_GetSysClockFreq>
 801030c:	4602      	mov	r2, r0
 801030e:	4b0d      	ldr	r3, [pc, #52]	; (8010344 <HAL_RCC_ClockConfig+0x1f0>)
 8010310:	689b      	ldr	r3, [r3, #8]
 8010312:	091b      	lsrs	r3, r3, #4
 8010314:	f003 030f 	and.w	r3, r3, #15
 8010318:	490b      	ldr	r1, [pc, #44]	; (8010348 <HAL_RCC_ClockConfig+0x1f4>)
 801031a:	5ccb      	ldrb	r3, [r1, r3]
 801031c:	f003 031f 	and.w	r3, r3, #31
 8010320:	fa22 f303 	lsr.w	r3, r2, r3
 8010324:	4a09      	ldr	r2, [pc, #36]	; (801034c <HAL_RCC_ClockConfig+0x1f8>)
 8010326:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8010328:	4b09      	ldr	r3, [pc, #36]	; (8010350 <HAL_RCC_ClockConfig+0x1fc>)
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	4618      	mov	r0, r3
 801032e:	f7fd fc47 	bl	800dbc0 <HAL_InitTick>
 8010332:	4603      	mov	r3, r0
 8010334:	72fb      	strb	r3, [r7, #11]

  return status;
 8010336:	7afb      	ldrb	r3, [r7, #11]
}
 8010338:	4618      	mov	r0, r3
 801033a:	3710      	adds	r7, #16
 801033c:	46bd      	mov	sp, r7
 801033e:	bd80      	pop	{r7, pc}
 8010340:	40022000 	.word	0x40022000
 8010344:	40021000 	.word	0x40021000
 8010348:	08016bc0 	.word	0x08016bc0
 801034c:	200006f0 	.word	0x200006f0
 8010350:	20000a74 	.word	0x20000a74

08010354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010354:	b480      	push	{r7}
 8010356:	b089      	sub	sp, #36	; 0x24
 8010358:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 801035a:	2300      	movs	r3, #0
 801035c:	61fb      	str	r3, [r7, #28]
 801035e:	2300      	movs	r3, #0
 8010360:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010362:	4b3e      	ldr	r3, [pc, #248]	; (801045c <HAL_RCC_GetSysClockFreq+0x108>)
 8010364:	689b      	ldr	r3, [r3, #8]
 8010366:	f003 030c 	and.w	r3, r3, #12
 801036a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 801036c:	4b3b      	ldr	r3, [pc, #236]	; (801045c <HAL_RCC_GetSysClockFreq+0x108>)
 801036e:	68db      	ldr	r3, [r3, #12]
 8010370:	f003 0303 	and.w	r3, r3, #3
 8010374:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8010376:	693b      	ldr	r3, [r7, #16]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d005      	beq.n	8010388 <HAL_RCC_GetSysClockFreq+0x34>
 801037c:	693b      	ldr	r3, [r7, #16]
 801037e:	2b0c      	cmp	r3, #12
 8010380:	d121      	bne.n	80103c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	2b01      	cmp	r3, #1
 8010386:	d11e      	bne.n	80103c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8010388:	4b34      	ldr	r3, [pc, #208]	; (801045c <HAL_RCC_GetSysClockFreq+0x108>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	f003 0308 	and.w	r3, r3, #8
 8010390:	2b00      	cmp	r3, #0
 8010392:	d107      	bne.n	80103a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8010394:	4b31      	ldr	r3, [pc, #196]	; (801045c <HAL_RCC_GetSysClockFreq+0x108>)
 8010396:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801039a:	0a1b      	lsrs	r3, r3, #8
 801039c:	f003 030f 	and.w	r3, r3, #15
 80103a0:	61fb      	str	r3, [r7, #28]
 80103a2:	e005      	b.n	80103b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80103a4:	4b2d      	ldr	r3, [pc, #180]	; (801045c <HAL_RCC_GetSysClockFreq+0x108>)
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	091b      	lsrs	r3, r3, #4
 80103aa:	f003 030f 	and.w	r3, r3, #15
 80103ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80103b0:	4a2b      	ldr	r2, [pc, #172]	; (8010460 <HAL_RCC_GetSysClockFreq+0x10c>)
 80103b2:	69fb      	ldr	r3, [r7, #28]
 80103b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80103ba:	693b      	ldr	r3, [r7, #16]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d10d      	bne.n	80103dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80103c0:	69fb      	ldr	r3, [r7, #28]
 80103c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80103c4:	e00a      	b.n	80103dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80103c6:	693b      	ldr	r3, [r7, #16]
 80103c8:	2b04      	cmp	r3, #4
 80103ca:	d102      	bne.n	80103d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80103cc:	4b25      	ldr	r3, [pc, #148]	; (8010464 <HAL_RCC_GetSysClockFreq+0x110>)
 80103ce:	61bb      	str	r3, [r7, #24]
 80103d0:	e004      	b.n	80103dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80103d2:	693b      	ldr	r3, [r7, #16]
 80103d4:	2b08      	cmp	r3, #8
 80103d6:	d101      	bne.n	80103dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80103d8:	4b23      	ldr	r3, [pc, #140]	; (8010468 <HAL_RCC_GetSysClockFreq+0x114>)
 80103da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80103dc:	693b      	ldr	r3, [r7, #16]
 80103de:	2b0c      	cmp	r3, #12
 80103e0:	d134      	bne.n	801044c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80103e2:	4b1e      	ldr	r3, [pc, #120]	; (801045c <HAL_RCC_GetSysClockFreq+0x108>)
 80103e4:	68db      	ldr	r3, [r3, #12]
 80103e6:	f003 0303 	and.w	r3, r3, #3
 80103ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80103ec:	68bb      	ldr	r3, [r7, #8]
 80103ee:	2b02      	cmp	r3, #2
 80103f0:	d003      	beq.n	80103fa <HAL_RCC_GetSysClockFreq+0xa6>
 80103f2:	68bb      	ldr	r3, [r7, #8]
 80103f4:	2b03      	cmp	r3, #3
 80103f6:	d003      	beq.n	8010400 <HAL_RCC_GetSysClockFreq+0xac>
 80103f8:	e005      	b.n	8010406 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80103fa:	4b1a      	ldr	r3, [pc, #104]	; (8010464 <HAL_RCC_GetSysClockFreq+0x110>)
 80103fc:	617b      	str	r3, [r7, #20]
      break;
 80103fe:	e005      	b.n	801040c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8010400:	4b19      	ldr	r3, [pc, #100]	; (8010468 <HAL_RCC_GetSysClockFreq+0x114>)
 8010402:	617b      	str	r3, [r7, #20]
      break;
 8010404:	e002      	b.n	801040c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8010406:	69fb      	ldr	r3, [r7, #28]
 8010408:	617b      	str	r3, [r7, #20]
      break;
 801040a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801040c:	4b13      	ldr	r3, [pc, #76]	; (801045c <HAL_RCC_GetSysClockFreq+0x108>)
 801040e:	68db      	ldr	r3, [r3, #12]
 8010410:	091b      	lsrs	r3, r3, #4
 8010412:	f003 0307 	and.w	r3, r3, #7
 8010416:	3301      	adds	r3, #1
 8010418:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 801041a:	4b10      	ldr	r3, [pc, #64]	; (801045c <HAL_RCC_GetSysClockFreq+0x108>)
 801041c:	68db      	ldr	r3, [r3, #12]
 801041e:	0a1b      	lsrs	r3, r3, #8
 8010420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010424:	697a      	ldr	r2, [r7, #20]
 8010426:	fb02 f203 	mul.w	r2, r2, r3
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010430:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8010432:	4b0a      	ldr	r3, [pc, #40]	; (801045c <HAL_RCC_GetSysClockFreq+0x108>)
 8010434:	68db      	ldr	r3, [r3, #12]
 8010436:	0e5b      	lsrs	r3, r3, #25
 8010438:	f003 0303 	and.w	r3, r3, #3
 801043c:	3301      	adds	r3, #1
 801043e:	005b      	lsls	r3, r3, #1
 8010440:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8010442:	697a      	ldr	r2, [r7, #20]
 8010444:	683b      	ldr	r3, [r7, #0]
 8010446:	fbb2 f3f3 	udiv	r3, r2, r3
 801044a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 801044c:	69bb      	ldr	r3, [r7, #24]
}
 801044e:	4618      	mov	r0, r3
 8010450:	3724      	adds	r7, #36	; 0x24
 8010452:	46bd      	mov	sp, r7
 8010454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010458:	4770      	bx	lr
 801045a:	bf00      	nop
 801045c:	40021000 	.word	0x40021000
 8010460:	08016bd8 	.word	0x08016bd8
 8010464:	00f42400 	.word	0x00f42400
 8010468:	007a1200 	.word	0x007a1200

0801046c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801046c:	b480      	push	{r7}
 801046e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010470:	4b03      	ldr	r3, [pc, #12]	; (8010480 <HAL_RCC_GetHCLKFreq+0x14>)
 8010472:	681b      	ldr	r3, [r3, #0]
}
 8010474:	4618      	mov	r0, r3
 8010476:	46bd      	mov	sp, r7
 8010478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047c:	4770      	bx	lr
 801047e:	bf00      	nop
 8010480:	200006f0 	.word	0x200006f0

08010484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010484:	b580      	push	{r7, lr}
 8010486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8010488:	f7ff fff0 	bl	801046c <HAL_RCC_GetHCLKFreq>
 801048c:	4602      	mov	r2, r0
 801048e:	4b06      	ldr	r3, [pc, #24]	; (80104a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010490:	689b      	ldr	r3, [r3, #8]
 8010492:	0a1b      	lsrs	r3, r3, #8
 8010494:	f003 0307 	and.w	r3, r3, #7
 8010498:	4904      	ldr	r1, [pc, #16]	; (80104ac <HAL_RCC_GetPCLK1Freq+0x28>)
 801049a:	5ccb      	ldrb	r3, [r1, r3]
 801049c:	f003 031f 	and.w	r3, r3, #31
 80104a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80104a4:	4618      	mov	r0, r3
 80104a6:	bd80      	pop	{r7, pc}
 80104a8:	40021000 	.word	0x40021000
 80104ac:	08016bd0 	.word	0x08016bd0

080104b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80104b4:	f7ff ffda 	bl	801046c <HAL_RCC_GetHCLKFreq>
 80104b8:	4602      	mov	r2, r0
 80104ba:	4b06      	ldr	r3, [pc, #24]	; (80104d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80104bc:	689b      	ldr	r3, [r3, #8]
 80104be:	0adb      	lsrs	r3, r3, #11
 80104c0:	f003 0307 	and.w	r3, r3, #7
 80104c4:	4904      	ldr	r1, [pc, #16]	; (80104d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80104c6:	5ccb      	ldrb	r3, [r1, r3]
 80104c8:	f003 031f 	and.w	r3, r3, #31
 80104cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80104d0:	4618      	mov	r0, r3
 80104d2:	bd80      	pop	{r7, pc}
 80104d4:	40021000 	.word	0x40021000
 80104d8:	08016bd0 	.word	0x08016bd0

080104dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b086      	sub	sp, #24
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80104e4:	2300      	movs	r3, #0
 80104e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80104e8:	4b2a      	ldr	r3, [pc, #168]	; (8010594 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80104ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80104ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d003      	beq.n	80104fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80104f4:	f7ff f9f0 	bl	800f8d8 <HAL_PWREx_GetVoltageRange>
 80104f8:	6178      	str	r0, [r7, #20]
 80104fa:	e014      	b.n	8010526 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80104fc:	4b25      	ldr	r3, [pc, #148]	; (8010594 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80104fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010500:	4a24      	ldr	r2, [pc, #144]	; (8010594 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010506:	6593      	str	r3, [r2, #88]	; 0x58
 8010508:	4b22      	ldr	r3, [pc, #136]	; (8010594 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801050a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801050c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010510:	60fb      	str	r3, [r7, #12]
 8010512:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8010514:	f7ff f9e0 	bl	800f8d8 <HAL_PWREx_GetVoltageRange>
 8010518:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 801051a:	4b1e      	ldr	r3, [pc, #120]	; (8010594 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801051c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801051e:	4a1d      	ldr	r2, [pc, #116]	; (8010594 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010524:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8010526:	697b      	ldr	r3, [r7, #20]
 8010528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801052c:	d10b      	bne.n	8010546 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	2b80      	cmp	r3, #128	; 0x80
 8010532:	d919      	bls.n	8010568 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2ba0      	cmp	r3, #160	; 0xa0
 8010538:	d902      	bls.n	8010540 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801053a:	2302      	movs	r3, #2
 801053c:	613b      	str	r3, [r7, #16]
 801053e:	e013      	b.n	8010568 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8010540:	2301      	movs	r3, #1
 8010542:	613b      	str	r3, [r7, #16]
 8010544:	e010      	b.n	8010568 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	2b80      	cmp	r3, #128	; 0x80
 801054a:	d902      	bls.n	8010552 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 801054c:	2303      	movs	r3, #3
 801054e:	613b      	str	r3, [r7, #16]
 8010550:	e00a      	b.n	8010568 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	2b80      	cmp	r3, #128	; 0x80
 8010556:	d102      	bne.n	801055e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8010558:	2302      	movs	r3, #2
 801055a:	613b      	str	r3, [r7, #16]
 801055c:	e004      	b.n	8010568 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	2b70      	cmp	r3, #112	; 0x70
 8010562:	d101      	bne.n	8010568 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8010564:	2301      	movs	r3, #1
 8010566:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8010568:	4b0b      	ldr	r3, [pc, #44]	; (8010598 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	f023 0207 	bic.w	r2, r3, #7
 8010570:	4909      	ldr	r1, [pc, #36]	; (8010598 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8010572:	693b      	ldr	r3, [r7, #16]
 8010574:	4313      	orrs	r3, r2
 8010576:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8010578:	4b07      	ldr	r3, [pc, #28]	; (8010598 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	f003 0307 	and.w	r3, r3, #7
 8010580:	693a      	ldr	r2, [r7, #16]
 8010582:	429a      	cmp	r2, r3
 8010584:	d001      	beq.n	801058a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8010586:	2301      	movs	r3, #1
 8010588:	e000      	b.n	801058c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 801058a:	2300      	movs	r3, #0
}
 801058c:	4618      	mov	r0, r3
 801058e:	3718      	adds	r7, #24
 8010590:	46bd      	mov	sp, r7
 8010592:	bd80      	pop	{r7, pc}
 8010594:	40021000 	.word	0x40021000
 8010598:	40022000 	.word	0x40022000

0801059c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b086      	sub	sp, #24
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80105a4:	2300      	movs	r3, #0
 80105a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80105a8:	2300      	movs	r3, #0
 80105aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d041      	beq.n	801063c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80105bc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80105c0:	d02a      	beq.n	8010618 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80105c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80105c6:	d824      	bhi.n	8010612 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80105c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80105cc:	d008      	beq.n	80105e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80105ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80105d2:	d81e      	bhi.n	8010612 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d00a      	beq.n	80105ee <HAL_RCCEx_PeriphCLKConfig+0x52>
 80105d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80105dc:	d010      	beq.n	8010600 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80105de:	e018      	b.n	8010612 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80105e0:	4b86      	ldr	r3, [pc, #536]	; (80107fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80105e2:	68db      	ldr	r3, [r3, #12]
 80105e4:	4a85      	ldr	r2, [pc, #532]	; (80107fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80105e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80105ea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80105ec:	e015      	b.n	801061a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	3304      	adds	r3, #4
 80105f2:	2100      	movs	r1, #0
 80105f4:	4618      	mov	r0, r3
 80105f6:	f000 fabb 	bl	8010b70 <RCCEx_PLLSAI1_Config>
 80105fa:	4603      	mov	r3, r0
 80105fc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80105fe:	e00c      	b.n	801061a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	3320      	adds	r3, #32
 8010604:	2100      	movs	r1, #0
 8010606:	4618      	mov	r0, r3
 8010608:	f000 fba6 	bl	8010d58 <RCCEx_PLLSAI2_Config>
 801060c:	4603      	mov	r3, r0
 801060e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8010610:	e003      	b.n	801061a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010612:	2301      	movs	r3, #1
 8010614:	74fb      	strb	r3, [r7, #19]
      break;
 8010616:	e000      	b.n	801061a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8010618:	bf00      	nop
    }

    if(ret == HAL_OK)
 801061a:	7cfb      	ldrb	r3, [r7, #19]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d10b      	bne.n	8010638 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8010620:	4b76      	ldr	r3, [pc, #472]	; (80107fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010626:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801062e:	4973      	ldr	r1, [pc, #460]	; (80107fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010630:	4313      	orrs	r3, r2
 8010632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8010636:	e001      	b.n	801063c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010638:	7cfb      	ldrb	r3, [r7, #19]
 801063a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010644:	2b00      	cmp	r3, #0
 8010646:	d041      	beq.n	80106cc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801064c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010650:	d02a      	beq.n	80106a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8010652:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010656:	d824      	bhi.n	80106a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8010658:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801065c:	d008      	beq.n	8010670 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 801065e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010662:	d81e      	bhi.n	80106a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8010664:	2b00      	cmp	r3, #0
 8010666:	d00a      	beq.n	801067e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8010668:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801066c:	d010      	beq.n	8010690 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 801066e:	e018      	b.n	80106a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8010670:	4b62      	ldr	r3, [pc, #392]	; (80107fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010672:	68db      	ldr	r3, [r3, #12]
 8010674:	4a61      	ldr	r2, [pc, #388]	; (80107fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801067a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 801067c:	e015      	b.n	80106aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	3304      	adds	r3, #4
 8010682:	2100      	movs	r1, #0
 8010684:	4618      	mov	r0, r3
 8010686:	f000 fa73 	bl	8010b70 <RCCEx_PLLSAI1_Config>
 801068a:	4603      	mov	r3, r0
 801068c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 801068e:	e00c      	b.n	80106aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	3320      	adds	r3, #32
 8010694:	2100      	movs	r1, #0
 8010696:	4618      	mov	r0, r3
 8010698:	f000 fb5e 	bl	8010d58 <RCCEx_PLLSAI2_Config>
 801069c:	4603      	mov	r3, r0
 801069e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80106a0:	e003      	b.n	80106aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80106a2:	2301      	movs	r3, #1
 80106a4:	74fb      	strb	r3, [r7, #19]
      break;
 80106a6:	e000      	b.n	80106aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80106a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80106aa:	7cfb      	ldrb	r3, [r7, #19]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d10b      	bne.n	80106c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80106b0:	4b52      	ldr	r3, [pc, #328]	; (80107fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80106b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80106b6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80106be:	494f      	ldr	r1, [pc, #316]	; (80107fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80106c0:	4313      	orrs	r3, r2
 80106c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80106c6:	e001      	b.n	80106cc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80106c8:	7cfb      	ldrb	r3, [r7, #19]
 80106ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	f000 80a0 	beq.w	801081a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80106da:	2300      	movs	r3, #0
 80106dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80106de:	4b47      	ldr	r3, [pc, #284]	; (80107fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80106e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80106e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d101      	bne.n	80106ee <HAL_RCCEx_PeriphCLKConfig+0x152>
 80106ea:	2301      	movs	r3, #1
 80106ec:	e000      	b.n	80106f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80106ee:	2300      	movs	r3, #0
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d00d      	beq.n	8010710 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80106f4:	4b41      	ldr	r3, [pc, #260]	; (80107fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80106f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80106f8:	4a40      	ldr	r2, [pc, #256]	; (80107fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80106fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80106fe:	6593      	str	r3, [r2, #88]	; 0x58
 8010700:	4b3e      	ldr	r3, [pc, #248]	; (80107fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010708:	60bb      	str	r3, [r7, #8]
 801070a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801070c:	2301      	movs	r3, #1
 801070e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010710:	4b3b      	ldr	r3, [pc, #236]	; (8010800 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	4a3a      	ldr	r2, [pc, #232]	; (8010800 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8010716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801071a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801071c:	f7fd faa0 	bl	800dc60 <HAL_GetTick>
 8010720:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8010722:	e009      	b.n	8010738 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010724:	f7fd fa9c 	bl	800dc60 <HAL_GetTick>
 8010728:	4602      	mov	r2, r0
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	1ad3      	subs	r3, r2, r3
 801072e:	2b02      	cmp	r3, #2
 8010730:	d902      	bls.n	8010738 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8010732:	2303      	movs	r3, #3
 8010734:	74fb      	strb	r3, [r7, #19]
        break;
 8010736:	e005      	b.n	8010744 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8010738:	4b31      	ldr	r3, [pc, #196]	; (8010800 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010740:	2b00      	cmp	r3, #0
 8010742:	d0ef      	beq.n	8010724 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8010744:	7cfb      	ldrb	r3, [r7, #19]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d15c      	bne.n	8010804 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801074a:	4b2c      	ldr	r3, [pc, #176]	; (80107fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801074c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010750:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010754:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8010756:	697b      	ldr	r3, [r7, #20]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d01f      	beq.n	801079c <HAL_RCCEx_PeriphCLKConfig+0x200>
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010762:	697a      	ldr	r2, [r7, #20]
 8010764:	429a      	cmp	r2, r3
 8010766:	d019      	beq.n	801079c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8010768:	4b24      	ldr	r3, [pc, #144]	; (80107fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801076a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801076e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010772:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8010774:	4b21      	ldr	r3, [pc, #132]	; (80107fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801077a:	4a20      	ldr	r2, [pc, #128]	; (80107fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801077c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8010784:	4b1d      	ldr	r3, [pc, #116]	; (80107fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801078a:	4a1c      	ldr	r2, [pc, #112]	; (80107fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801078c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8010794:	4a19      	ldr	r2, [pc, #100]	; (80107fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010796:	697b      	ldr	r3, [r7, #20]
 8010798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801079c:	697b      	ldr	r3, [r7, #20]
 801079e:	f003 0301 	and.w	r3, r3, #1
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d016      	beq.n	80107d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80107a6:	f7fd fa5b 	bl	800dc60 <HAL_GetTick>
 80107aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80107ac:	e00b      	b.n	80107c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80107ae:	f7fd fa57 	bl	800dc60 <HAL_GetTick>
 80107b2:	4602      	mov	r2, r0
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	1ad3      	subs	r3, r2, r3
 80107b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80107bc:	4293      	cmp	r3, r2
 80107be:	d902      	bls.n	80107c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80107c0:	2303      	movs	r3, #3
 80107c2:	74fb      	strb	r3, [r7, #19]
            break;
 80107c4:	e006      	b.n	80107d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80107c6:	4b0d      	ldr	r3, [pc, #52]	; (80107fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80107c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80107cc:	f003 0302 	and.w	r3, r3, #2
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d0ec      	beq.n	80107ae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80107d4:	7cfb      	ldrb	r3, [r7, #19]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d10c      	bne.n	80107f4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80107da:	4b08      	ldr	r3, [pc, #32]	; (80107fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80107dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80107e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80107ea:	4904      	ldr	r1, [pc, #16]	; (80107fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80107ec:	4313      	orrs	r3, r2
 80107ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80107f2:	e009      	b.n	8010808 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80107f4:	7cfb      	ldrb	r3, [r7, #19]
 80107f6:	74bb      	strb	r3, [r7, #18]
 80107f8:	e006      	b.n	8010808 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80107fa:	bf00      	nop
 80107fc:	40021000 	.word	0x40021000
 8010800:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010804:	7cfb      	ldrb	r3, [r7, #19]
 8010806:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8010808:	7c7b      	ldrb	r3, [r7, #17]
 801080a:	2b01      	cmp	r3, #1
 801080c:	d105      	bne.n	801081a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801080e:	4b9e      	ldr	r3, [pc, #632]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010812:	4a9d      	ldr	r2, [pc, #628]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010814:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010818:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	f003 0301 	and.w	r3, r3, #1
 8010822:	2b00      	cmp	r3, #0
 8010824:	d00a      	beq.n	801083c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8010826:	4b98      	ldr	r3, [pc, #608]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801082c:	f023 0203 	bic.w	r2, r3, #3
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010834:	4994      	ldr	r1, [pc, #592]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010836:	4313      	orrs	r3, r2
 8010838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	f003 0302 	and.w	r3, r3, #2
 8010844:	2b00      	cmp	r3, #0
 8010846:	d00a      	beq.n	801085e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8010848:	4b8f      	ldr	r3, [pc, #572]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801084a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801084e:	f023 020c 	bic.w	r2, r3, #12
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010856:	498c      	ldr	r1, [pc, #560]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010858:	4313      	orrs	r3, r2
 801085a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	f003 0304 	and.w	r3, r3, #4
 8010866:	2b00      	cmp	r3, #0
 8010868:	d00a      	beq.n	8010880 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801086a:	4b87      	ldr	r3, [pc, #540]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801086c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010870:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010878:	4983      	ldr	r1, [pc, #524]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801087a:	4313      	orrs	r3, r2
 801087c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	f003 0308 	and.w	r3, r3, #8
 8010888:	2b00      	cmp	r3, #0
 801088a:	d00a      	beq.n	80108a2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801088c:	4b7e      	ldr	r3, [pc, #504]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801088e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010892:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801089a:	497b      	ldr	r1, [pc, #492]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801089c:	4313      	orrs	r3, r2
 801089e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	f003 0310 	and.w	r3, r3, #16
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d00a      	beq.n	80108c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80108ae:	4b76      	ldr	r3, [pc, #472]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80108b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80108b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80108bc:	4972      	ldr	r1, [pc, #456]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80108be:	4313      	orrs	r3, r2
 80108c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	f003 0320 	and.w	r3, r3, #32
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d00a      	beq.n	80108e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80108d0:	4b6d      	ldr	r3, [pc, #436]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80108d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80108d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80108de:	496a      	ldr	r1, [pc, #424]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80108e0:	4313      	orrs	r3, r2
 80108e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d00a      	beq.n	8010908 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80108f2:	4b65      	ldr	r3, [pc, #404]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80108f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80108f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010900:	4961      	ldr	r1, [pc, #388]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010902:	4313      	orrs	r3, r2
 8010904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010910:	2b00      	cmp	r3, #0
 8010912:	d00a      	beq.n	801092a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8010914:	4b5c      	ldr	r3, [pc, #368]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801091a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010922:	4959      	ldr	r1, [pc, #356]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010924:	4313      	orrs	r3, r2
 8010926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010932:	2b00      	cmp	r3, #0
 8010934:	d00a      	beq.n	801094c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8010936:	4b54      	ldr	r3, [pc, #336]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801093c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010944:	4950      	ldr	r1, [pc, #320]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010946:	4313      	orrs	r3, r2
 8010948:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010954:	2b00      	cmp	r3, #0
 8010956:	d00a      	beq.n	801096e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8010958:	4b4b      	ldr	r3, [pc, #300]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801095a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801095e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010966:	4948      	ldr	r1, [pc, #288]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010968:	4313      	orrs	r3, r2
 801096a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010976:	2b00      	cmp	r3, #0
 8010978:	d00a      	beq.n	8010990 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801097a:	4b43      	ldr	r3, [pc, #268]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801097c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010980:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010988:	493f      	ldr	r1, [pc, #252]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801098a:	4313      	orrs	r3, r2
 801098c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010998:	2b00      	cmp	r3, #0
 801099a:	d028      	beq.n	80109ee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801099c:	4b3a      	ldr	r3, [pc, #232]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801099e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80109a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109aa:	4937      	ldr	r1, [pc, #220]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80109ac:	4313      	orrs	r3, r2
 80109ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80109ba:	d106      	bne.n	80109ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80109bc:	4b32      	ldr	r3, [pc, #200]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80109be:	68db      	ldr	r3, [r3, #12]
 80109c0:	4a31      	ldr	r2, [pc, #196]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80109c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80109c6:	60d3      	str	r3, [r2, #12]
 80109c8:	e011      	b.n	80109ee <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80109d2:	d10c      	bne.n	80109ee <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	3304      	adds	r3, #4
 80109d8:	2101      	movs	r1, #1
 80109da:	4618      	mov	r0, r3
 80109dc:	f000 f8c8 	bl	8010b70 <RCCEx_PLLSAI1_Config>
 80109e0:	4603      	mov	r3, r0
 80109e2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80109e4:	7cfb      	ldrb	r3, [r7, #19]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d001      	beq.n	80109ee <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80109ea:	7cfb      	ldrb	r3, [r7, #19]
 80109ec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d028      	beq.n	8010a4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80109fa:	4b23      	ldr	r3, [pc, #140]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80109fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010a00:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a08:	491f      	ldr	r1, [pc, #124]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010a0a:	4313      	orrs	r3, r2
 8010a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010a18:	d106      	bne.n	8010a28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8010a1a:	4b1b      	ldr	r3, [pc, #108]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010a1c:	68db      	ldr	r3, [r3, #12]
 8010a1e:	4a1a      	ldr	r2, [pc, #104]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010a20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010a24:	60d3      	str	r3, [r2, #12]
 8010a26:	e011      	b.n	8010a4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010a30:	d10c      	bne.n	8010a4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	3304      	adds	r3, #4
 8010a36:	2101      	movs	r1, #1
 8010a38:	4618      	mov	r0, r3
 8010a3a:	f000 f899 	bl	8010b70 <RCCEx_PLLSAI1_Config>
 8010a3e:	4603      	mov	r3, r0
 8010a40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010a42:	7cfb      	ldrb	r3, [r7, #19]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d001      	beq.n	8010a4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8010a48:	7cfb      	ldrb	r3, [r7, #19]
 8010a4a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d02b      	beq.n	8010ab0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010a58:	4b0b      	ldr	r3, [pc, #44]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010a5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a66:	4908      	ldr	r1, [pc, #32]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010a68:	4313      	orrs	r3, r2
 8010a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010a76:	d109      	bne.n	8010a8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8010a78:	4b03      	ldr	r3, [pc, #12]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010a7a:	68db      	ldr	r3, [r3, #12]
 8010a7c:	4a02      	ldr	r2, [pc, #8]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010a7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010a82:	60d3      	str	r3, [r2, #12]
 8010a84:	e014      	b.n	8010ab0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8010a86:	bf00      	nop
 8010a88:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010a94:	d10c      	bne.n	8010ab0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	3304      	adds	r3, #4
 8010a9a:	2101      	movs	r1, #1
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f000 f867 	bl	8010b70 <RCCEx_PLLSAI1_Config>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010aa6:	7cfb      	ldrb	r3, [r7, #19]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d001      	beq.n	8010ab0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8010aac:	7cfb      	ldrb	r3, [r7, #19]
 8010aae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d02f      	beq.n	8010b1c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8010abc:	4b2b      	ldr	r3, [pc, #172]	; (8010b6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8010abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010ac2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010aca:	4928      	ldr	r1, [pc, #160]	; (8010b6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8010acc:	4313      	orrs	r3, r2
 8010ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010ad6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010ada:	d10d      	bne.n	8010af8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	3304      	adds	r3, #4
 8010ae0:	2102      	movs	r1, #2
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f000 f844 	bl	8010b70 <RCCEx_PLLSAI1_Config>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010aec:	7cfb      	ldrb	r3, [r7, #19]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d014      	beq.n	8010b1c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8010af2:	7cfb      	ldrb	r3, [r7, #19]
 8010af4:	74bb      	strb	r3, [r7, #18]
 8010af6:	e011      	b.n	8010b1c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010afc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010b00:	d10c      	bne.n	8010b1c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	3320      	adds	r3, #32
 8010b06:	2102      	movs	r1, #2
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f000 f925 	bl	8010d58 <RCCEx_PLLSAI2_Config>
 8010b0e:	4603      	mov	r3, r0
 8010b10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010b12:	7cfb      	ldrb	r3, [r7, #19]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d001      	beq.n	8010b1c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8010b18:	7cfb      	ldrb	r3, [r7, #19]
 8010b1a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d00a      	beq.n	8010b3e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8010b28:	4b10      	ldr	r3, [pc, #64]	; (8010b6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8010b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010b2e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010b36:	490d      	ldr	r1, [pc, #52]	; (8010b6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8010b38:	4313      	orrs	r3, r2
 8010b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d00b      	beq.n	8010b62 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8010b4a:	4b08      	ldr	r3, [pc, #32]	; (8010b6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8010b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010b50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b5a:	4904      	ldr	r1, [pc, #16]	; (8010b6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8010b5c:	4313      	orrs	r3, r2
 8010b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8010b62:	7cbb      	ldrb	r3, [r7, #18]
}
 8010b64:	4618      	mov	r0, r3
 8010b66:	3718      	adds	r7, #24
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	bd80      	pop	{r7, pc}
 8010b6c:	40021000 	.word	0x40021000

08010b70 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b084      	sub	sp, #16
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
 8010b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8010b7e:	4b75      	ldr	r3, [pc, #468]	; (8010d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010b80:	68db      	ldr	r3, [r3, #12]
 8010b82:	f003 0303 	and.w	r3, r3, #3
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d018      	beq.n	8010bbc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8010b8a:	4b72      	ldr	r3, [pc, #456]	; (8010d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010b8c:	68db      	ldr	r3, [r3, #12]
 8010b8e:	f003 0203 	and.w	r2, r3, #3
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	429a      	cmp	r2, r3
 8010b98:	d10d      	bne.n	8010bb6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	681b      	ldr	r3, [r3, #0]
       ||
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d009      	beq.n	8010bb6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8010ba2:	4b6c      	ldr	r3, [pc, #432]	; (8010d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010ba4:	68db      	ldr	r3, [r3, #12]
 8010ba6:	091b      	lsrs	r3, r3, #4
 8010ba8:	f003 0307 	and.w	r3, r3, #7
 8010bac:	1c5a      	adds	r2, r3, #1
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	685b      	ldr	r3, [r3, #4]
       ||
 8010bb2:	429a      	cmp	r2, r3
 8010bb4:	d047      	beq.n	8010c46 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8010bb6:	2301      	movs	r3, #1
 8010bb8:	73fb      	strb	r3, [r7, #15]
 8010bba:	e044      	b.n	8010c46 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	2b03      	cmp	r3, #3
 8010bc2:	d018      	beq.n	8010bf6 <RCCEx_PLLSAI1_Config+0x86>
 8010bc4:	2b03      	cmp	r3, #3
 8010bc6:	d825      	bhi.n	8010c14 <RCCEx_PLLSAI1_Config+0xa4>
 8010bc8:	2b01      	cmp	r3, #1
 8010bca:	d002      	beq.n	8010bd2 <RCCEx_PLLSAI1_Config+0x62>
 8010bcc:	2b02      	cmp	r3, #2
 8010bce:	d009      	beq.n	8010be4 <RCCEx_PLLSAI1_Config+0x74>
 8010bd0:	e020      	b.n	8010c14 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8010bd2:	4b60      	ldr	r3, [pc, #384]	; (8010d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	f003 0302 	and.w	r3, r3, #2
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d11d      	bne.n	8010c1a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8010bde:	2301      	movs	r3, #1
 8010be0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010be2:	e01a      	b.n	8010c1a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8010be4:	4b5b      	ldr	r3, [pc, #364]	; (8010d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d116      	bne.n	8010c1e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8010bf0:	2301      	movs	r3, #1
 8010bf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010bf4:	e013      	b.n	8010c1e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8010bf6:	4b57      	ldr	r3, [pc, #348]	; (8010d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d10f      	bne.n	8010c22 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8010c02:	4b54      	ldr	r3, [pc, #336]	; (8010d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d109      	bne.n	8010c22 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8010c0e:	2301      	movs	r3, #1
 8010c10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8010c12:	e006      	b.n	8010c22 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8010c14:	2301      	movs	r3, #1
 8010c16:	73fb      	strb	r3, [r7, #15]
      break;
 8010c18:	e004      	b.n	8010c24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8010c1a:	bf00      	nop
 8010c1c:	e002      	b.n	8010c24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8010c1e:	bf00      	nop
 8010c20:	e000      	b.n	8010c24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8010c22:	bf00      	nop
    }

    if(status == HAL_OK)
 8010c24:	7bfb      	ldrb	r3, [r7, #15]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d10d      	bne.n	8010c46 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8010c2a:	4b4a      	ldr	r3, [pc, #296]	; (8010d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010c2c:	68db      	ldr	r3, [r3, #12]
 8010c2e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	6819      	ldr	r1, [r3, #0]
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	685b      	ldr	r3, [r3, #4]
 8010c3a:	3b01      	subs	r3, #1
 8010c3c:	011b      	lsls	r3, r3, #4
 8010c3e:	430b      	orrs	r3, r1
 8010c40:	4944      	ldr	r1, [pc, #272]	; (8010d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010c42:	4313      	orrs	r3, r2
 8010c44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8010c46:	7bfb      	ldrb	r3, [r7, #15]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d17d      	bne.n	8010d48 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8010c4c:	4b41      	ldr	r3, [pc, #260]	; (8010d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	4a40      	ldr	r2, [pc, #256]	; (8010d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010c52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010c56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010c58:	f7fd f802 	bl	800dc60 <HAL_GetTick>
 8010c5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8010c5e:	e009      	b.n	8010c74 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8010c60:	f7fc fffe 	bl	800dc60 <HAL_GetTick>
 8010c64:	4602      	mov	r2, r0
 8010c66:	68bb      	ldr	r3, [r7, #8]
 8010c68:	1ad3      	subs	r3, r2, r3
 8010c6a:	2b02      	cmp	r3, #2
 8010c6c:	d902      	bls.n	8010c74 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8010c6e:	2303      	movs	r3, #3
 8010c70:	73fb      	strb	r3, [r7, #15]
        break;
 8010c72:	e005      	b.n	8010c80 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8010c74:	4b37      	ldr	r3, [pc, #220]	; (8010d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d1ef      	bne.n	8010c60 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8010c80:	7bfb      	ldrb	r3, [r7, #15]
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d160      	bne.n	8010d48 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8010c86:	683b      	ldr	r3, [r7, #0]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d111      	bne.n	8010cb0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8010c8c:	4b31      	ldr	r3, [pc, #196]	; (8010d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010c8e:	691b      	ldr	r3, [r3, #16]
 8010c90:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8010c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010c98:	687a      	ldr	r2, [r7, #4]
 8010c9a:	6892      	ldr	r2, [r2, #8]
 8010c9c:	0211      	lsls	r1, r2, #8
 8010c9e:	687a      	ldr	r2, [r7, #4]
 8010ca0:	68d2      	ldr	r2, [r2, #12]
 8010ca2:	0912      	lsrs	r2, r2, #4
 8010ca4:	0452      	lsls	r2, r2, #17
 8010ca6:	430a      	orrs	r2, r1
 8010ca8:	492a      	ldr	r1, [pc, #168]	; (8010d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010caa:	4313      	orrs	r3, r2
 8010cac:	610b      	str	r3, [r1, #16]
 8010cae:	e027      	b.n	8010d00 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8010cb0:	683b      	ldr	r3, [r7, #0]
 8010cb2:	2b01      	cmp	r3, #1
 8010cb4:	d112      	bne.n	8010cdc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8010cb6:	4b27      	ldr	r3, [pc, #156]	; (8010d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010cb8:	691b      	ldr	r3, [r3, #16]
 8010cba:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8010cbe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8010cc2:	687a      	ldr	r2, [r7, #4]
 8010cc4:	6892      	ldr	r2, [r2, #8]
 8010cc6:	0211      	lsls	r1, r2, #8
 8010cc8:	687a      	ldr	r2, [r7, #4]
 8010cca:	6912      	ldr	r2, [r2, #16]
 8010ccc:	0852      	lsrs	r2, r2, #1
 8010cce:	3a01      	subs	r2, #1
 8010cd0:	0552      	lsls	r2, r2, #21
 8010cd2:	430a      	orrs	r2, r1
 8010cd4:	491f      	ldr	r1, [pc, #124]	; (8010d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010cd6:	4313      	orrs	r3, r2
 8010cd8:	610b      	str	r3, [r1, #16]
 8010cda:	e011      	b.n	8010d00 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8010cdc:	4b1d      	ldr	r3, [pc, #116]	; (8010d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010cde:	691b      	ldr	r3, [r3, #16]
 8010ce0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8010ce4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8010ce8:	687a      	ldr	r2, [r7, #4]
 8010cea:	6892      	ldr	r2, [r2, #8]
 8010cec:	0211      	lsls	r1, r2, #8
 8010cee:	687a      	ldr	r2, [r7, #4]
 8010cf0:	6952      	ldr	r2, [r2, #20]
 8010cf2:	0852      	lsrs	r2, r2, #1
 8010cf4:	3a01      	subs	r2, #1
 8010cf6:	0652      	lsls	r2, r2, #25
 8010cf8:	430a      	orrs	r2, r1
 8010cfa:	4916      	ldr	r1, [pc, #88]	; (8010d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010cfc:	4313      	orrs	r3, r2
 8010cfe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8010d00:	4b14      	ldr	r3, [pc, #80]	; (8010d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	4a13      	ldr	r2, [pc, #76]	; (8010d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010d06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010d0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010d0c:	f7fc ffa8 	bl	800dc60 <HAL_GetTick>
 8010d10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8010d12:	e009      	b.n	8010d28 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8010d14:	f7fc ffa4 	bl	800dc60 <HAL_GetTick>
 8010d18:	4602      	mov	r2, r0
 8010d1a:	68bb      	ldr	r3, [r7, #8]
 8010d1c:	1ad3      	subs	r3, r2, r3
 8010d1e:	2b02      	cmp	r3, #2
 8010d20:	d902      	bls.n	8010d28 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8010d22:	2303      	movs	r3, #3
 8010d24:	73fb      	strb	r3, [r7, #15]
          break;
 8010d26:	e005      	b.n	8010d34 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8010d28:	4b0a      	ldr	r3, [pc, #40]	; (8010d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d0ef      	beq.n	8010d14 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8010d34:	7bfb      	ldrb	r3, [r7, #15]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d106      	bne.n	8010d48 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8010d3a:	4b06      	ldr	r3, [pc, #24]	; (8010d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010d3c:	691a      	ldr	r2, [r3, #16]
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	699b      	ldr	r3, [r3, #24]
 8010d42:	4904      	ldr	r1, [pc, #16]	; (8010d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010d44:	4313      	orrs	r3, r2
 8010d46:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8010d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	3710      	adds	r7, #16
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	bd80      	pop	{r7, pc}
 8010d52:	bf00      	nop
 8010d54:	40021000 	.word	0x40021000

08010d58 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b084      	sub	sp, #16
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	6078      	str	r0, [r7, #4]
 8010d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010d62:	2300      	movs	r3, #0
 8010d64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8010d66:	4b6a      	ldr	r3, [pc, #424]	; (8010f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010d68:	68db      	ldr	r3, [r3, #12]
 8010d6a:	f003 0303 	and.w	r3, r3, #3
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d018      	beq.n	8010da4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8010d72:	4b67      	ldr	r3, [pc, #412]	; (8010f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010d74:	68db      	ldr	r3, [r3, #12]
 8010d76:	f003 0203 	and.w	r2, r3, #3
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	429a      	cmp	r2, r3
 8010d80:	d10d      	bne.n	8010d9e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	681b      	ldr	r3, [r3, #0]
       ||
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d009      	beq.n	8010d9e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8010d8a:	4b61      	ldr	r3, [pc, #388]	; (8010f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010d8c:	68db      	ldr	r3, [r3, #12]
 8010d8e:	091b      	lsrs	r3, r3, #4
 8010d90:	f003 0307 	and.w	r3, r3, #7
 8010d94:	1c5a      	adds	r2, r3, #1
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	685b      	ldr	r3, [r3, #4]
       ||
 8010d9a:	429a      	cmp	r2, r3
 8010d9c:	d047      	beq.n	8010e2e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8010d9e:	2301      	movs	r3, #1
 8010da0:	73fb      	strb	r3, [r7, #15]
 8010da2:	e044      	b.n	8010e2e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	2b03      	cmp	r3, #3
 8010daa:	d018      	beq.n	8010dde <RCCEx_PLLSAI2_Config+0x86>
 8010dac:	2b03      	cmp	r3, #3
 8010dae:	d825      	bhi.n	8010dfc <RCCEx_PLLSAI2_Config+0xa4>
 8010db0:	2b01      	cmp	r3, #1
 8010db2:	d002      	beq.n	8010dba <RCCEx_PLLSAI2_Config+0x62>
 8010db4:	2b02      	cmp	r3, #2
 8010db6:	d009      	beq.n	8010dcc <RCCEx_PLLSAI2_Config+0x74>
 8010db8:	e020      	b.n	8010dfc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8010dba:	4b55      	ldr	r3, [pc, #340]	; (8010f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	f003 0302 	and.w	r3, r3, #2
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d11d      	bne.n	8010e02 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8010dc6:	2301      	movs	r3, #1
 8010dc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010dca:	e01a      	b.n	8010e02 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8010dcc:	4b50      	ldr	r3, [pc, #320]	; (8010f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d116      	bne.n	8010e06 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8010dd8:	2301      	movs	r3, #1
 8010dda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010ddc:	e013      	b.n	8010e06 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8010dde:	4b4c      	ldr	r3, [pc, #304]	; (8010f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d10f      	bne.n	8010e0a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8010dea:	4b49      	ldr	r3, [pc, #292]	; (8010f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d109      	bne.n	8010e0a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8010df6:	2301      	movs	r3, #1
 8010df8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8010dfa:	e006      	b.n	8010e0a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8010dfc:	2301      	movs	r3, #1
 8010dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8010e00:	e004      	b.n	8010e0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8010e02:	bf00      	nop
 8010e04:	e002      	b.n	8010e0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8010e06:	bf00      	nop
 8010e08:	e000      	b.n	8010e0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8010e0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8010e0c:	7bfb      	ldrb	r3, [r7, #15]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d10d      	bne.n	8010e2e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8010e12:	4b3f      	ldr	r3, [pc, #252]	; (8010f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010e14:	68db      	ldr	r3, [r3, #12]
 8010e16:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	6819      	ldr	r1, [r3, #0]
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	685b      	ldr	r3, [r3, #4]
 8010e22:	3b01      	subs	r3, #1
 8010e24:	011b      	lsls	r3, r3, #4
 8010e26:	430b      	orrs	r3, r1
 8010e28:	4939      	ldr	r1, [pc, #228]	; (8010f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010e2a:	4313      	orrs	r3, r2
 8010e2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8010e2e:	7bfb      	ldrb	r3, [r7, #15]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d167      	bne.n	8010f04 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8010e34:	4b36      	ldr	r3, [pc, #216]	; (8010f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	4a35      	ldr	r2, [pc, #212]	; (8010f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010e3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010e3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010e40:	f7fc ff0e 	bl	800dc60 <HAL_GetTick>
 8010e44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8010e46:	e009      	b.n	8010e5c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8010e48:	f7fc ff0a 	bl	800dc60 <HAL_GetTick>
 8010e4c:	4602      	mov	r2, r0
 8010e4e:	68bb      	ldr	r3, [r7, #8]
 8010e50:	1ad3      	subs	r3, r2, r3
 8010e52:	2b02      	cmp	r3, #2
 8010e54:	d902      	bls.n	8010e5c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8010e56:	2303      	movs	r3, #3
 8010e58:	73fb      	strb	r3, [r7, #15]
        break;
 8010e5a:	e005      	b.n	8010e68 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8010e5c:	4b2c      	ldr	r3, [pc, #176]	; (8010f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d1ef      	bne.n	8010e48 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8010e68:	7bfb      	ldrb	r3, [r7, #15]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d14a      	bne.n	8010f04 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8010e6e:	683b      	ldr	r3, [r7, #0]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d111      	bne.n	8010e98 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8010e74:	4b26      	ldr	r3, [pc, #152]	; (8010f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010e76:	695b      	ldr	r3, [r3, #20]
 8010e78:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8010e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010e80:	687a      	ldr	r2, [r7, #4]
 8010e82:	6892      	ldr	r2, [r2, #8]
 8010e84:	0211      	lsls	r1, r2, #8
 8010e86:	687a      	ldr	r2, [r7, #4]
 8010e88:	68d2      	ldr	r2, [r2, #12]
 8010e8a:	0912      	lsrs	r2, r2, #4
 8010e8c:	0452      	lsls	r2, r2, #17
 8010e8e:	430a      	orrs	r2, r1
 8010e90:	491f      	ldr	r1, [pc, #124]	; (8010f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010e92:	4313      	orrs	r3, r2
 8010e94:	614b      	str	r3, [r1, #20]
 8010e96:	e011      	b.n	8010ebc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8010e98:	4b1d      	ldr	r3, [pc, #116]	; (8010f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010e9a:	695b      	ldr	r3, [r3, #20]
 8010e9c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8010ea0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8010ea4:	687a      	ldr	r2, [r7, #4]
 8010ea6:	6892      	ldr	r2, [r2, #8]
 8010ea8:	0211      	lsls	r1, r2, #8
 8010eaa:	687a      	ldr	r2, [r7, #4]
 8010eac:	6912      	ldr	r2, [r2, #16]
 8010eae:	0852      	lsrs	r2, r2, #1
 8010eb0:	3a01      	subs	r2, #1
 8010eb2:	0652      	lsls	r2, r2, #25
 8010eb4:	430a      	orrs	r2, r1
 8010eb6:	4916      	ldr	r1, [pc, #88]	; (8010f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010eb8:	4313      	orrs	r3, r2
 8010eba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8010ebc:	4b14      	ldr	r3, [pc, #80]	; (8010f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	4a13      	ldr	r2, [pc, #76]	; (8010f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010ec6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010ec8:	f7fc feca 	bl	800dc60 <HAL_GetTick>
 8010ecc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8010ece:	e009      	b.n	8010ee4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8010ed0:	f7fc fec6 	bl	800dc60 <HAL_GetTick>
 8010ed4:	4602      	mov	r2, r0
 8010ed6:	68bb      	ldr	r3, [r7, #8]
 8010ed8:	1ad3      	subs	r3, r2, r3
 8010eda:	2b02      	cmp	r3, #2
 8010edc:	d902      	bls.n	8010ee4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8010ede:	2303      	movs	r3, #3
 8010ee0:	73fb      	strb	r3, [r7, #15]
          break;
 8010ee2:	e005      	b.n	8010ef0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8010ee4:	4b0a      	ldr	r3, [pc, #40]	; (8010f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d0ef      	beq.n	8010ed0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8010ef0:	7bfb      	ldrb	r3, [r7, #15]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d106      	bne.n	8010f04 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8010ef6:	4b06      	ldr	r3, [pc, #24]	; (8010f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010ef8:	695a      	ldr	r2, [r3, #20]
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	695b      	ldr	r3, [r3, #20]
 8010efe:	4904      	ldr	r1, [pc, #16]	; (8010f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010f00:	4313      	orrs	r3, r2
 8010f02:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8010f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f06:	4618      	mov	r0, r3
 8010f08:	3710      	adds	r7, #16
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	bd80      	pop	{r7, pc}
 8010f0e:	bf00      	nop
 8010f10:	40021000 	.word	0x40021000

08010f14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b082      	sub	sp, #8
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d101      	bne.n	8010f26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010f22:	2301      	movs	r3, #1
 8010f24:	e049      	b.n	8010fba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010f2c:	b2db      	uxtb	r3, r3
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d106      	bne.n	8010f40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	2200      	movs	r2, #0
 8010f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010f3a:	6878      	ldr	r0, [r7, #4]
 8010f3c:	f7f6 f9a2 	bl	8007284 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	2202      	movs	r2, #2
 8010f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	681a      	ldr	r2, [r3, #0]
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	3304      	adds	r3, #4
 8010f50:	4619      	mov	r1, r3
 8010f52:	4610      	mov	r0, r2
 8010f54:	f000 fa56 	bl	8011404 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2201      	movs	r2, #1
 8010f5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	2201      	movs	r2, #1
 8010f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	2201      	movs	r2, #1
 8010f6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	2201      	movs	r2, #1
 8010f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	2201      	movs	r2, #1
 8010f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	2201      	movs	r2, #1
 8010f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	2201      	movs	r2, #1
 8010f8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	2201      	movs	r2, #1
 8010f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	2201      	movs	r2, #1
 8010f9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	2201      	movs	r2, #1
 8010fa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	2201      	movs	r2, #1
 8010fac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	2201      	movs	r2, #1
 8010fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010fb8:	2300      	movs	r3, #0
}
 8010fba:	4618      	mov	r0, r3
 8010fbc:	3708      	adds	r7, #8
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	bd80      	pop	{r7, pc}
	...

08010fc4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8010fc4:	b480      	push	{r7}
 8010fc6:	b085      	sub	sp, #20
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010fd2:	b2db      	uxtb	r3, r3
 8010fd4:	2b01      	cmp	r3, #1
 8010fd6:	d001      	beq.n	8010fdc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8010fd8:	2301      	movs	r3, #1
 8010fda:	e047      	b.n	801106c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	2202      	movs	r2, #2
 8010fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	4a23      	ldr	r2, [pc, #140]	; (8011078 <HAL_TIM_Base_Start+0xb4>)
 8010fea:	4293      	cmp	r3, r2
 8010fec:	d01d      	beq.n	801102a <HAL_TIM_Base_Start+0x66>
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010ff6:	d018      	beq.n	801102a <HAL_TIM_Base_Start+0x66>
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	4a1f      	ldr	r2, [pc, #124]	; (801107c <HAL_TIM_Base_Start+0xb8>)
 8010ffe:	4293      	cmp	r3, r2
 8011000:	d013      	beq.n	801102a <HAL_TIM_Base_Start+0x66>
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	4a1e      	ldr	r2, [pc, #120]	; (8011080 <HAL_TIM_Base_Start+0xbc>)
 8011008:	4293      	cmp	r3, r2
 801100a:	d00e      	beq.n	801102a <HAL_TIM_Base_Start+0x66>
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	4a1c      	ldr	r2, [pc, #112]	; (8011084 <HAL_TIM_Base_Start+0xc0>)
 8011012:	4293      	cmp	r3, r2
 8011014:	d009      	beq.n	801102a <HAL_TIM_Base_Start+0x66>
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	4a1b      	ldr	r2, [pc, #108]	; (8011088 <HAL_TIM_Base_Start+0xc4>)
 801101c:	4293      	cmp	r3, r2
 801101e:	d004      	beq.n	801102a <HAL_TIM_Base_Start+0x66>
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	4a19      	ldr	r2, [pc, #100]	; (801108c <HAL_TIM_Base_Start+0xc8>)
 8011026:	4293      	cmp	r3, r2
 8011028:	d115      	bne.n	8011056 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	689a      	ldr	r2, [r3, #8]
 8011030:	4b17      	ldr	r3, [pc, #92]	; (8011090 <HAL_TIM_Base_Start+0xcc>)
 8011032:	4013      	ands	r3, r2
 8011034:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	2b06      	cmp	r3, #6
 801103a:	d015      	beq.n	8011068 <HAL_TIM_Base_Start+0xa4>
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011042:	d011      	beq.n	8011068 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	681a      	ldr	r2, [r3, #0]
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	f042 0201 	orr.w	r2, r2, #1
 8011052:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011054:	e008      	b.n	8011068 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	681a      	ldr	r2, [r3, #0]
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	f042 0201 	orr.w	r2, r2, #1
 8011064:	601a      	str	r2, [r3, #0]
 8011066:	e000      	b.n	801106a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011068:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801106a:	2300      	movs	r3, #0
}
 801106c:	4618      	mov	r0, r3
 801106e:	3714      	adds	r7, #20
 8011070:	46bd      	mov	sp, r7
 8011072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011076:	4770      	bx	lr
 8011078:	40012c00 	.word	0x40012c00
 801107c:	40000400 	.word	0x40000400
 8011080:	40000800 	.word	0x40000800
 8011084:	40000c00 	.word	0x40000c00
 8011088:	40013400 	.word	0x40013400
 801108c:	40014000 	.word	0x40014000
 8011090:	00010007 	.word	0x00010007

08011094 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8011094:	b480      	push	{r7}
 8011096:	b085      	sub	sp, #20
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80110a2:	b2db      	uxtb	r3, r3
 80110a4:	2b01      	cmp	r3, #1
 80110a6:	d001      	beq.n	80110ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80110a8:	2301      	movs	r3, #1
 80110aa:	e04f      	b.n	801114c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	2202      	movs	r2, #2
 80110b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	68da      	ldr	r2, [r3, #12]
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	f042 0201 	orr.w	r2, r2, #1
 80110c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	4a23      	ldr	r2, [pc, #140]	; (8011158 <HAL_TIM_Base_Start_IT+0xc4>)
 80110ca:	4293      	cmp	r3, r2
 80110cc:	d01d      	beq.n	801110a <HAL_TIM_Base_Start_IT+0x76>
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80110d6:	d018      	beq.n	801110a <HAL_TIM_Base_Start_IT+0x76>
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	4a1f      	ldr	r2, [pc, #124]	; (801115c <HAL_TIM_Base_Start_IT+0xc8>)
 80110de:	4293      	cmp	r3, r2
 80110e0:	d013      	beq.n	801110a <HAL_TIM_Base_Start_IT+0x76>
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	4a1e      	ldr	r2, [pc, #120]	; (8011160 <HAL_TIM_Base_Start_IT+0xcc>)
 80110e8:	4293      	cmp	r3, r2
 80110ea:	d00e      	beq.n	801110a <HAL_TIM_Base_Start_IT+0x76>
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	4a1c      	ldr	r2, [pc, #112]	; (8011164 <HAL_TIM_Base_Start_IT+0xd0>)
 80110f2:	4293      	cmp	r3, r2
 80110f4:	d009      	beq.n	801110a <HAL_TIM_Base_Start_IT+0x76>
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	4a1b      	ldr	r2, [pc, #108]	; (8011168 <HAL_TIM_Base_Start_IT+0xd4>)
 80110fc:	4293      	cmp	r3, r2
 80110fe:	d004      	beq.n	801110a <HAL_TIM_Base_Start_IT+0x76>
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	4a19      	ldr	r2, [pc, #100]	; (801116c <HAL_TIM_Base_Start_IT+0xd8>)
 8011106:	4293      	cmp	r3, r2
 8011108:	d115      	bne.n	8011136 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	689a      	ldr	r2, [r3, #8]
 8011110:	4b17      	ldr	r3, [pc, #92]	; (8011170 <HAL_TIM_Base_Start_IT+0xdc>)
 8011112:	4013      	ands	r3, r2
 8011114:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	2b06      	cmp	r3, #6
 801111a:	d015      	beq.n	8011148 <HAL_TIM_Base_Start_IT+0xb4>
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011122:	d011      	beq.n	8011148 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	681a      	ldr	r2, [r3, #0]
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	f042 0201 	orr.w	r2, r2, #1
 8011132:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011134:	e008      	b.n	8011148 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	681a      	ldr	r2, [r3, #0]
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	f042 0201 	orr.w	r2, r2, #1
 8011144:	601a      	str	r2, [r3, #0]
 8011146:	e000      	b.n	801114a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011148:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801114a:	2300      	movs	r3, #0
}
 801114c:	4618      	mov	r0, r3
 801114e:	3714      	adds	r7, #20
 8011150:	46bd      	mov	sp, r7
 8011152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011156:	4770      	bx	lr
 8011158:	40012c00 	.word	0x40012c00
 801115c:	40000400 	.word	0x40000400
 8011160:	40000800 	.word	0x40000800
 8011164:	40000c00 	.word	0x40000c00
 8011168:	40013400 	.word	0x40013400
 801116c:	40014000 	.word	0x40014000
 8011170:	00010007 	.word	0x00010007

08011174 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b082      	sub	sp, #8
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	691b      	ldr	r3, [r3, #16]
 8011182:	f003 0302 	and.w	r3, r3, #2
 8011186:	2b02      	cmp	r3, #2
 8011188:	d122      	bne.n	80111d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	68db      	ldr	r3, [r3, #12]
 8011190:	f003 0302 	and.w	r3, r3, #2
 8011194:	2b02      	cmp	r3, #2
 8011196:	d11b      	bne.n	80111d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	f06f 0202 	mvn.w	r2, #2
 80111a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	2201      	movs	r2, #1
 80111a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	699b      	ldr	r3, [r3, #24]
 80111ae:	f003 0303 	and.w	r3, r3, #3
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d003      	beq.n	80111be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80111b6:	6878      	ldr	r0, [r7, #4]
 80111b8:	f000 f905 	bl	80113c6 <HAL_TIM_IC_CaptureCallback>
 80111bc:	e005      	b.n	80111ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80111be:	6878      	ldr	r0, [r7, #4]
 80111c0:	f000 f8f7 	bl	80113b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80111c4:	6878      	ldr	r0, [r7, #4]
 80111c6:	f000 f908 	bl	80113da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	2200      	movs	r2, #0
 80111ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	691b      	ldr	r3, [r3, #16]
 80111d6:	f003 0304 	and.w	r3, r3, #4
 80111da:	2b04      	cmp	r3, #4
 80111dc:	d122      	bne.n	8011224 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	68db      	ldr	r3, [r3, #12]
 80111e4:	f003 0304 	and.w	r3, r3, #4
 80111e8:	2b04      	cmp	r3, #4
 80111ea:	d11b      	bne.n	8011224 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	f06f 0204 	mvn.w	r2, #4
 80111f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	2202      	movs	r2, #2
 80111fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	699b      	ldr	r3, [r3, #24]
 8011202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011206:	2b00      	cmp	r3, #0
 8011208:	d003      	beq.n	8011212 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801120a:	6878      	ldr	r0, [r7, #4]
 801120c:	f000 f8db 	bl	80113c6 <HAL_TIM_IC_CaptureCallback>
 8011210:	e005      	b.n	801121e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011212:	6878      	ldr	r0, [r7, #4]
 8011214:	f000 f8cd 	bl	80113b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011218:	6878      	ldr	r0, [r7, #4]
 801121a:	f000 f8de 	bl	80113da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	2200      	movs	r2, #0
 8011222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	691b      	ldr	r3, [r3, #16]
 801122a:	f003 0308 	and.w	r3, r3, #8
 801122e:	2b08      	cmp	r3, #8
 8011230:	d122      	bne.n	8011278 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	68db      	ldr	r3, [r3, #12]
 8011238:	f003 0308 	and.w	r3, r3, #8
 801123c:	2b08      	cmp	r3, #8
 801123e:	d11b      	bne.n	8011278 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	f06f 0208 	mvn.w	r2, #8
 8011248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	2204      	movs	r2, #4
 801124e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	69db      	ldr	r3, [r3, #28]
 8011256:	f003 0303 	and.w	r3, r3, #3
 801125a:	2b00      	cmp	r3, #0
 801125c:	d003      	beq.n	8011266 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801125e:	6878      	ldr	r0, [r7, #4]
 8011260:	f000 f8b1 	bl	80113c6 <HAL_TIM_IC_CaptureCallback>
 8011264:	e005      	b.n	8011272 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011266:	6878      	ldr	r0, [r7, #4]
 8011268:	f000 f8a3 	bl	80113b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801126c:	6878      	ldr	r0, [r7, #4]
 801126e:	f000 f8b4 	bl	80113da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	2200      	movs	r2, #0
 8011276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	691b      	ldr	r3, [r3, #16]
 801127e:	f003 0310 	and.w	r3, r3, #16
 8011282:	2b10      	cmp	r3, #16
 8011284:	d122      	bne.n	80112cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	68db      	ldr	r3, [r3, #12]
 801128c:	f003 0310 	and.w	r3, r3, #16
 8011290:	2b10      	cmp	r3, #16
 8011292:	d11b      	bne.n	80112cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	f06f 0210 	mvn.w	r2, #16
 801129c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	2208      	movs	r2, #8
 80112a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	69db      	ldr	r3, [r3, #28]
 80112aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d003      	beq.n	80112ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80112b2:	6878      	ldr	r0, [r7, #4]
 80112b4:	f000 f887 	bl	80113c6 <HAL_TIM_IC_CaptureCallback>
 80112b8:	e005      	b.n	80112c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80112ba:	6878      	ldr	r0, [r7, #4]
 80112bc:	f000 f879 	bl	80113b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80112c0:	6878      	ldr	r0, [r7, #4]
 80112c2:	f000 f88a 	bl	80113da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	2200      	movs	r2, #0
 80112ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	691b      	ldr	r3, [r3, #16]
 80112d2:	f003 0301 	and.w	r3, r3, #1
 80112d6:	2b01      	cmp	r3, #1
 80112d8:	d10e      	bne.n	80112f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	68db      	ldr	r3, [r3, #12]
 80112e0:	f003 0301 	and.w	r3, r3, #1
 80112e4:	2b01      	cmp	r3, #1
 80112e6:	d107      	bne.n	80112f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	f06f 0201 	mvn.w	r2, #1
 80112f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80112f2:	6878      	ldr	r0, [r7, #4]
 80112f4:	f7f5 fe9a 	bl	800702c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	691b      	ldr	r3, [r3, #16]
 80112fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011302:	2b80      	cmp	r3, #128	; 0x80
 8011304:	d10e      	bne.n	8011324 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	68db      	ldr	r3, [r3, #12]
 801130c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011310:	2b80      	cmp	r3, #128	; 0x80
 8011312:	d107      	bne.n	8011324 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801131c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801131e:	6878      	ldr	r0, [r7, #4]
 8011320:	f000 f914 	bl	801154c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	691b      	ldr	r3, [r3, #16]
 801132a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801132e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011332:	d10e      	bne.n	8011352 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	68db      	ldr	r3, [r3, #12]
 801133a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801133e:	2b80      	cmp	r3, #128	; 0x80
 8011340:	d107      	bne.n	8011352 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801134a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801134c:	6878      	ldr	r0, [r7, #4]
 801134e:	f000 f907 	bl	8011560 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	691b      	ldr	r3, [r3, #16]
 8011358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801135c:	2b40      	cmp	r3, #64	; 0x40
 801135e:	d10e      	bne.n	801137e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	68db      	ldr	r3, [r3, #12]
 8011366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801136a:	2b40      	cmp	r3, #64	; 0x40
 801136c:	d107      	bne.n	801137e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8011376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011378:	6878      	ldr	r0, [r7, #4]
 801137a:	f000 f838 	bl	80113ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	691b      	ldr	r3, [r3, #16]
 8011384:	f003 0320 	and.w	r3, r3, #32
 8011388:	2b20      	cmp	r3, #32
 801138a:	d10e      	bne.n	80113aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	68db      	ldr	r3, [r3, #12]
 8011392:	f003 0320 	and.w	r3, r3, #32
 8011396:	2b20      	cmp	r3, #32
 8011398:	d107      	bne.n	80113aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	f06f 0220 	mvn.w	r2, #32
 80113a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80113a4:	6878      	ldr	r0, [r7, #4]
 80113a6:	f000 f8c7 	bl	8011538 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80113aa:	bf00      	nop
 80113ac:	3708      	adds	r7, #8
 80113ae:	46bd      	mov	sp, r7
 80113b0:	bd80      	pop	{r7, pc}

080113b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80113b2:	b480      	push	{r7}
 80113b4:	b083      	sub	sp, #12
 80113b6:	af00      	add	r7, sp, #0
 80113b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80113ba:	bf00      	nop
 80113bc:	370c      	adds	r7, #12
 80113be:	46bd      	mov	sp, r7
 80113c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c4:	4770      	bx	lr

080113c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80113c6:	b480      	push	{r7}
 80113c8:	b083      	sub	sp, #12
 80113ca:	af00      	add	r7, sp, #0
 80113cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80113ce:	bf00      	nop
 80113d0:	370c      	adds	r7, #12
 80113d2:	46bd      	mov	sp, r7
 80113d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d8:	4770      	bx	lr

080113da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80113da:	b480      	push	{r7}
 80113dc:	b083      	sub	sp, #12
 80113de:	af00      	add	r7, sp, #0
 80113e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80113e2:	bf00      	nop
 80113e4:	370c      	adds	r7, #12
 80113e6:	46bd      	mov	sp, r7
 80113e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ec:	4770      	bx	lr

080113ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80113ee:	b480      	push	{r7}
 80113f0:	b083      	sub	sp, #12
 80113f2:	af00      	add	r7, sp, #0
 80113f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80113f6:	bf00      	nop
 80113f8:	370c      	adds	r7, #12
 80113fa:	46bd      	mov	sp, r7
 80113fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011400:	4770      	bx	lr
	...

08011404 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8011404:	b480      	push	{r7}
 8011406:	b085      	sub	sp, #20
 8011408:	af00      	add	r7, sp, #0
 801140a:	6078      	str	r0, [r7, #4]
 801140c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	4a40      	ldr	r2, [pc, #256]	; (8011518 <TIM_Base_SetConfig+0x114>)
 8011418:	4293      	cmp	r3, r2
 801141a:	d013      	beq.n	8011444 <TIM_Base_SetConfig+0x40>
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011422:	d00f      	beq.n	8011444 <TIM_Base_SetConfig+0x40>
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	4a3d      	ldr	r2, [pc, #244]	; (801151c <TIM_Base_SetConfig+0x118>)
 8011428:	4293      	cmp	r3, r2
 801142a:	d00b      	beq.n	8011444 <TIM_Base_SetConfig+0x40>
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	4a3c      	ldr	r2, [pc, #240]	; (8011520 <TIM_Base_SetConfig+0x11c>)
 8011430:	4293      	cmp	r3, r2
 8011432:	d007      	beq.n	8011444 <TIM_Base_SetConfig+0x40>
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	4a3b      	ldr	r2, [pc, #236]	; (8011524 <TIM_Base_SetConfig+0x120>)
 8011438:	4293      	cmp	r3, r2
 801143a:	d003      	beq.n	8011444 <TIM_Base_SetConfig+0x40>
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	4a3a      	ldr	r2, [pc, #232]	; (8011528 <TIM_Base_SetConfig+0x124>)
 8011440:	4293      	cmp	r3, r2
 8011442:	d108      	bne.n	8011456 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801144a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	685b      	ldr	r3, [r3, #4]
 8011450:	68fa      	ldr	r2, [r7, #12]
 8011452:	4313      	orrs	r3, r2
 8011454:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	4a2f      	ldr	r2, [pc, #188]	; (8011518 <TIM_Base_SetConfig+0x114>)
 801145a:	4293      	cmp	r3, r2
 801145c:	d01f      	beq.n	801149e <TIM_Base_SetConfig+0x9a>
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011464:	d01b      	beq.n	801149e <TIM_Base_SetConfig+0x9a>
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	4a2c      	ldr	r2, [pc, #176]	; (801151c <TIM_Base_SetConfig+0x118>)
 801146a:	4293      	cmp	r3, r2
 801146c:	d017      	beq.n	801149e <TIM_Base_SetConfig+0x9a>
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	4a2b      	ldr	r2, [pc, #172]	; (8011520 <TIM_Base_SetConfig+0x11c>)
 8011472:	4293      	cmp	r3, r2
 8011474:	d013      	beq.n	801149e <TIM_Base_SetConfig+0x9a>
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	4a2a      	ldr	r2, [pc, #168]	; (8011524 <TIM_Base_SetConfig+0x120>)
 801147a:	4293      	cmp	r3, r2
 801147c:	d00f      	beq.n	801149e <TIM_Base_SetConfig+0x9a>
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	4a29      	ldr	r2, [pc, #164]	; (8011528 <TIM_Base_SetConfig+0x124>)
 8011482:	4293      	cmp	r3, r2
 8011484:	d00b      	beq.n	801149e <TIM_Base_SetConfig+0x9a>
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	4a28      	ldr	r2, [pc, #160]	; (801152c <TIM_Base_SetConfig+0x128>)
 801148a:	4293      	cmp	r3, r2
 801148c:	d007      	beq.n	801149e <TIM_Base_SetConfig+0x9a>
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	4a27      	ldr	r2, [pc, #156]	; (8011530 <TIM_Base_SetConfig+0x12c>)
 8011492:	4293      	cmp	r3, r2
 8011494:	d003      	beq.n	801149e <TIM_Base_SetConfig+0x9a>
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	4a26      	ldr	r2, [pc, #152]	; (8011534 <TIM_Base_SetConfig+0x130>)
 801149a:	4293      	cmp	r3, r2
 801149c:	d108      	bne.n	80114b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80114a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80114a6:	683b      	ldr	r3, [r7, #0]
 80114a8:	68db      	ldr	r3, [r3, #12]
 80114aa:	68fa      	ldr	r2, [r7, #12]
 80114ac:	4313      	orrs	r3, r2
 80114ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80114b6:	683b      	ldr	r3, [r7, #0]
 80114b8:	695b      	ldr	r3, [r3, #20]
 80114ba:	4313      	orrs	r3, r2
 80114bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	68fa      	ldr	r2, [r7, #12]
 80114c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80114c4:	683b      	ldr	r3, [r7, #0]
 80114c6:	689a      	ldr	r2, [r3, #8]
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80114cc:	683b      	ldr	r3, [r7, #0]
 80114ce:	681a      	ldr	r2, [r3, #0]
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	4a10      	ldr	r2, [pc, #64]	; (8011518 <TIM_Base_SetConfig+0x114>)
 80114d8:	4293      	cmp	r3, r2
 80114da:	d00f      	beq.n	80114fc <TIM_Base_SetConfig+0xf8>
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	4a12      	ldr	r2, [pc, #72]	; (8011528 <TIM_Base_SetConfig+0x124>)
 80114e0:	4293      	cmp	r3, r2
 80114e2:	d00b      	beq.n	80114fc <TIM_Base_SetConfig+0xf8>
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	4a11      	ldr	r2, [pc, #68]	; (801152c <TIM_Base_SetConfig+0x128>)
 80114e8:	4293      	cmp	r3, r2
 80114ea:	d007      	beq.n	80114fc <TIM_Base_SetConfig+0xf8>
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	4a10      	ldr	r2, [pc, #64]	; (8011530 <TIM_Base_SetConfig+0x12c>)
 80114f0:	4293      	cmp	r3, r2
 80114f2:	d003      	beq.n	80114fc <TIM_Base_SetConfig+0xf8>
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	4a0f      	ldr	r2, [pc, #60]	; (8011534 <TIM_Base_SetConfig+0x130>)
 80114f8:	4293      	cmp	r3, r2
 80114fa:	d103      	bne.n	8011504 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80114fc:	683b      	ldr	r3, [r7, #0]
 80114fe:	691a      	ldr	r2, [r3, #16]
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	2201      	movs	r2, #1
 8011508:	615a      	str	r2, [r3, #20]
}
 801150a:	bf00      	nop
 801150c:	3714      	adds	r7, #20
 801150e:	46bd      	mov	sp, r7
 8011510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011514:	4770      	bx	lr
 8011516:	bf00      	nop
 8011518:	40012c00 	.word	0x40012c00
 801151c:	40000400 	.word	0x40000400
 8011520:	40000800 	.word	0x40000800
 8011524:	40000c00 	.word	0x40000c00
 8011528:	40013400 	.word	0x40013400
 801152c:	40014000 	.word	0x40014000
 8011530:	40014400 	.word	0x40014400
 8011534:	40014800 	.word	0x40014800

08011538 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011538:	b480      	push	{r7}
 801153a:	b083      	sub	sp, #12
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011540:	bf00      	nop
 8011542:	370c      	adds	r7, #12
 8011544:	46bd      	mov	sp, r7
 8011546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154a:	4770      	bx	lr

0801154c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801154c:	b480      	push	{r7}
 801154e:	b083      	sub	sp, #12
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011554:	bf00      	nop
 8011556:	370c      	adds	r7, #12
 8011558:	46bd      	mov	sp, r7
 801155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155e:	4770      	bx	lr

08011560 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011560:	b480      	push	{r7}
 8011562:	b083      	sub	sp, #12
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011568:	bf00      	nop
 801156a:	370c      	adds	r7, #12
 801156c:	46bd      	mov	sp, r7
 801156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011572:	4770      	bx	lr

08011574 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011574:	b580      	push	{r7, lr}
 8011576:	b082      	sub	sp, #8
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d101      	bne.n	8011586 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011582:	2301      	movs	r3, #1
 8011584:	e040      	b.n	8011608 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801158a:	2b00      	cmp	r3, #0
 801158c:	d106      	bne.n	801159c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	2200      	movs	r2, #0
 8011592:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011596:	6878      	ldr	r0, [r7, #4]
 8011598:	f7f5 feae 	bl	80072f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	2224      	movs	r2, #36	; 0x24
 80115a0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	681a      	ldr	r2, [r3, #0]
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	f022 0201 	bic.w	r2, r2, #1
 80115b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80115b2:	6878      	ldr	r0, [r7, #4]
 80115b4:	f000 fc86 	bl	8011ec4 <UART_SetConfig>
 80115b8:	4603      	mov	r3, r0
 80115ba:	2b01      	cmp	r3, #1
 80115bc:	d101      	bne.n	80115c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80115be:	2301      	movs	r3, #1
 80115c0:	e022      	b.n	8011608 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d002      	beq.n	80115d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80115ca:	6878      	ldr	r0, [r7, #4]
 80115cc:	f000 ff04 	bl	80123d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	685a      	ldr	r2, [r3, #4]
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80115de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	689a      	ldr	r2, [r3, #8]
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80115ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	681a      	ldr	r2, [r3, #0]
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	f042 0201 	orr.w	r2, r2, #1
 80115fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011600:	6878      	ldr	r0, [r7, #4]
 8011602:	f000 ff8b 	bl	801251c <UART_CheckIdleState>
 8011606:	4603      	mov	r3, r0
}
 8011608:	4618      	mov	r0, r3
 801160a:	3708      	adds	r7, #8
 801160c:	46bd      	mov	sp, r7
 801160e:	bd80      	pop	{r7, pc}

08011610 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011610:	b580      	push	{r7, lr}
 8011612:	b08a      	sub	sp, #40	; 0x28
 8011614:	af02      	add	r7, sp, #8
 8011616:	60f8      	str	r0, [r7, #12]
 8011618:	60b9      	str	r1, [r7, #8]
 801161a:	603b      	str	r3, [r7, #0]
 801161c:	4613      	mov	r3, r2
 801161e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011624:	2b20      	cmp	r3, #32
 8011626:	f040 8082 	bne.w	801172e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 801162a:	68bb      	ldr	r3, [r7, #8]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d002      	beq.n	8011636 <HAL_UART_Transmit+0x26>
 8011630:	88fb      	ldrh	r3, [r7, #6]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d101      	bne.n	801163a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8011636:	2301      	movs	r3, #1
 8011638:	e07a      	b.n	8011730 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011640:	2b01      	cmp	r3, #1
 8011642:	d101      	bne.n	8011648 <HAL_UART_Transmit+0x38>
 8011644:	2302      	movs	r3, #2
 8011646:	e073      	b.n	8011730 <HAL_UART_Transmit+0x120>
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	2201      	movs	r2, #1
 801164c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	2200      	movs	r2, #0
 8011654:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	2221      	movs	r2, #33	; 0x21
 801165c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801165e:	f7fc faff 	bl	800dc60 <HAL_GetTick>
 8011662:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	88fa      	ldrh	r2, [r7, #6]
 8011668:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	88fa      	ldrh	r2, [r7, #6]
 8011670:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	689b      	ldr	r3, [r3, #8]
 8011678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801167c:	d108      	bne.n	8011690 <HAL_UART_Transmit+0x80>
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	691b      	ldr	r3, [r3, #16]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d104      	bne.n	8011690 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8011686:	2300      	movs	r3, #0
 8011688:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801168a:	68bb      	ldr	r3, [r7, #8]
 801168c:	61bb      	str	r3, [r7, #24]
 801168e:	e003      	b.n	8011698 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8011690:	68bb      	ldr	r3, [r7, #8]
 8011692:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011694:	2300      	movs	r3, #0
 8011696:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	2200      	movs	r2, #0
 801169c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80116a0:	e02d      	b.n	80116fe <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80116a2:	683b      	ldr	r3, [r7, #0]
 80116a4:	9300      	str	r3, [sp, #0]
 80116a6:	697b      	ldr	r3, [r7, #20]
 80116a8:	2200      	movs	r2, #0
 80116aa:	2180      	movs	r1, #128	; 0x80
 80116ac:	68f8      	ldr	r0, [r7, #12]
 80116ae:	f000 ff7e 	bl	80125ae <UART_WaitOnFlagUntilTimeout>
 80116b2:	4603      	mov	r3, r0
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d001      	beq.n	80116bc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80116b8:	2303      	movs	r3, #3
 80116ba:	e039      	b.n	8011730 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80116bc:	69fb      	ldr	r3, [r7, #28]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d10b      	bne.n	80116da <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80116c2:	69bb      	ldr	r3, [r7, #24]
 80116c4:	881a      	ldrh	r2, [r3, #0]
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80116ce:	b292      	uxth	r2, r2
 80116d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80116d2:	69bb      	ldr	r3, [r7, #24]
 80116d4:	3302      	adds	r3, #2
 80116d6:	61bb      	str	r3, [r7, #24]
 80116d8:	e008      	b.n	80116ec <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80116da:	69fb      	ldr	r3, [r7, #28]
 80116dc:	781a      	ldrb	r2, [r3, #0]
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	b292      	uxth	r2, r2
 80116e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80116e6:	69fb      	ldr	r3, [r7, #28]
 80116e8:	3301      	adds	r3, #1
 80116ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80116f2:	b29b      	uxth	r3, r3
 80116f4:	3b01      	subs	r3, #1
 80116f6:	b29a      	uxth	r2, r3
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8011704:	b29b      	uxth	r3, r3
 8011706:	2b00      	cmp	r3, #0
 8011708:	d1cb      	bne.n	80116a2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801170a:	683b      	ldr	r3, [r7, #0]
 801170c:	9300      	str	r3, [sp, #0]
 801170e:	697b      	ldr	r3, [r7, #20]
 8011710:	2200      	movs	r2, #0
 8011712:	2140      	movs	r1, #64	; 0x40
 8011714:	68f8      	ldr	r0, [r7, #12]
 8011716:	f000 ff4a 	bl	80125ae <UART_WaitOnFlagUntilTimeout>
 801171a:	4603      	mov	r3, r0
 801171c:	2b00      	cmp	r3, #0
 801171e:	d001      	beq.n	8011724 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8011720:	2303      	movs	r3, #3
 8011722:	e005      	b.n	8011730 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	2220      	movs	r2, #32
 8011728:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 801172a:	2300      	movs	r3, #0
 801172c:	e000      	b.n	8011730 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 801172e:	2302      	movs	r3, #2
  }
}
 8011730:	4618      	mov	r0, r3
 8011732:	3720      	adds	r7, #32
 8011734:	46bd      	mov	sp, r7
 8011736:	bd80      	pop	{r7, pc}

08011738 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8011738:	b480      	push	{r7}
 801173a:	b08b      	sub	sp, #44	; 0x2c
 801173c:	af00      	add	r7, sp, #0
 801173e:	60f8      	str	r0, [r7, #12]
 8011740:	60b9      	str	r1, [r7, #8]
 8011742:	4613      	mov	r3, r2
 8011744:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801174a:	2b20      	cmp	r3, #32
 801174c:	d156      	bne.n	80117fc <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 801174e:	68bb      	ldr	r3, [r7, #8]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d002      	beq.n	801175a <HAL_UART_Transmit_IT+0x22>
 8011754:	88fb      	ldrh	r3, [r7, #6]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d101      	bne.n	801175e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 801175a:	2301      	movs	r3, #1
 801175c:	e04f      	b.n	80117fe <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011764:	2b01      	cmp	r3, #1
 8011766:	d101      	bne.n	801176c <HAL_UART_Transmit_IT+0x34>
 8011768:	2302      	movs	r3, #2
 801176a:	e048      	b.n	80117fe <HAL_UART_Transmit_IT+0xc6>
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	2201      	movs	r2, #1
 8011770:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	68ba      	ldr	r2, [r7, #8]
 8011778:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	88fa      	ldrh	r2, [r7, #6]
 801177e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	88fa      	ldrh	r2, [r7, #6]
 8011786:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	2200      	movs	r2, #0
 801178e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	2200      	movs	r2, #0
 8011794:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	2221      	movs	r2, #33	; 0x21
 801179c:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	689b      	ldr	r3, [r3, #8]
 80117a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80117a6:	d107      	bne.n	80117b8 <HAL_UART_Transmit_IT+0x80>
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	691b      	ldr	r3, [r3, #16]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d103      	bne.n	80117b8 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	4a16      	ldr	r2, [pc, #88]	; (801180c <HAL_UART_Transmit_IT+0xd4>)
 80117b4:	669a      	str	r2, [r3, #104]	; 0x68
 80117b6:	e002      	b.n	80117be <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	4a15      	ldr	r2, [pc, #84]	; (8011810 <HAL_UART_Transmit_IT+0xd8>)
 80117bc:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	2200      	movs	r2, #0
 80117c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117cc:	697b      	ldr	r3, [r7, #20]
 80117ce:	e853 3f00 	ldrex	r3, [r3]
 80117d2:	613b      	str	r3, [r7, #16]
   return(result);
 80117d4:	693b      	ldr	r3, [r7, #16]
 80117d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117da:	627b      	str	r3, [r7, #36]	; 0x24
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	461a      	mov	r2, r3
 80117e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117e4:	623b      	str	r3, [r7, #32]
 80117e6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117e8:	69f9      	ldr	r1, [r7, #28]
 80117ea:	6a3a      	ldr	r2, [r7, #32]
 80117ec:	e841 2300 	strex	r3, r2, [r1]
 80117f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80117f2:	69bb      	ldr	r3, [r7, #24]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d1e6      	bne.n	80117c6 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80117f8:	2300      	movs	r3, #0
 80117fa:	e000      	b.n	80117fe <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80117fc:	2302      	movs	r3, #2
  }
}
 80117fe:	4618      	mov	r0, r3
 8011800:	372c      	adds	r7, #44	; 0x2c
 8011802:	46bd      	mov	sp, r7
 8011804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011808:	4770      	bx	lr
 801180a:	bf00      	nop
 801180c:	08012a77 	.word	0x08012a77
 8011810:	080129bf 	.word	0x080129bf

08011814 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b08a      	sub	sp, #40	; 0x28
 8011818:	af00      	add	r7, sp, #0
 801181a:	60f8      	str	r0, [r7, #12]
 801181c:	60b9      	str	r1, [r7, #8]
 801181e:	4613      	mov	r3, r2
 8011820:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011826:	2b20      	cmp	r3, #32
 8011828:	d142      	bne.n	80118b0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 801182a:	68bb      	ldr	r3, [r7, #8]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d002      	beq.n	8011836 <HAL_UART_Receive_IT+0x22>
 8011830:	88fb      	ldrh	r3, [r7, #6]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d101      	bne.n	801183a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8011836:	2301      	movs	r3, #1
 8011838:	e03b      	b.n	80118b2 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011840:	2b01      	cmp	r3, #1
 8011842:	d101      	bne.n	8011848 <HAL_UART_Receive_IT+0x34>
 8011844:	2302      	movs	r3, #2
 8011846:	e034      	b.n	80118b2 <HAL_UART_Receive_IT+0x9e>
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	2201      	movs	r2, #1
 801184c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	2200      	movs	r2, #0
 8011854:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	4a18      	ldr	r2, [pc, #96]	; (80118bc <HAL_UART_Receive_IT+0xa8>)
 801185c:	4293      	cmp	r3, r2
 801185e:	d01f      	beq.n	80118a0 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	685b      	ldr	r3, [r3, #4]
 8011866:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801186a:	2b00      	cmp	r3, #0
 801186c:	d018      	beq.n	80118a0 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011874:	697b      	ldr	r3, [r7, #20]
 8011876:	e853 3f00 	ldrex	r3, [r3]
 801187a:	613b      	str	r3, [r7, #16]
   return(result);
 801187c:	693b      	ldr	r3, [r7, #16]
 801187e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011882:	627b      	str	r3, [r7, #36]	; 0x24
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	461a      	mov	r2, r3
 801188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801188c:	623b      	str	r3, [r7, #32]
 801188e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011890:	69f9      	ldr	r1, [r7, #28]
 8011892:	6a3a      	ldr	r2, [r7, #32]
 8011894:	e841 2300 	strex	r3, r2, [r1]
 8011898:	61bb      	str	r3, [r7, #24]
   return(result);
 801189a:	69bb      	ldr	r3, [r7, #24]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d1e6      	bne.n	801186e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80118a0:	88fb      	ldrh	r3, [r7, #6]
 80118a2:	461a      	mov	r2, r3
 80118a4:	68b9      	ldr	r1, [r7, #8]
 80118a6:	68f8      	ldr	r0, [r7, #12]
 80118a8:	f000 ff46 	bl	8012738 <UART_Start_Receive_IT>
 80118ac:	4603      	mov	r3, r0
 80118ae:	e000      	b.n	80118b2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80118b0:	2302      	movs	r3, #2
  }
}
 80118b2:	4618      	mov	r0, r3
 80118b4:	3728      	adds	r7, #40	; 0x28
 80118b6:	46bd      	mov	sp, r7
 80118b8:	bd80      	pop	{r7, pc}
 80118ba:	bf00      	nop
 80118bc:	40008000 	.word	0x40008000

080118c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b0ba      	sub	sp, #232	; 0xe8
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	69db      	ldr	r3, [r3, #28]
 80118ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	689b      	ldr	r3, [r3, #8]
 80118e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80118e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80118ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80118ee:	4013      	ands	r3, r2
 80118f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80118f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d115      	bne.n	8011928 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80118fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011900:	f003 0320 	and.w	r3, r3, #32
 8011904:	2b00      	cmp	r3, #0
 8011906:	d00f      	beq.n	8011928 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8011908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801190c:	f003 0320 	and.w	r3, r3, #32
 8011910:	2b00      	cmp	r3, #0
 8011912:	d009      	beq.n	8011928 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011918:	2b00      	cmp	r3, #0
 801191a:	f000 82a6 	beq.w	8011e6a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011922:	6878      	ldr	r0, [r7, #4]
 8011924:	4798      	blx	r3
      }
      return;
 8011926:	e2a0      	b.n	8011e6a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8011928:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801192c:	2b00      	cmp	r3, #0
 801192e:	f000 8117 	beq.w	8011b60 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8011932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011936:	f003 0301 	and.w	r3, r3, #1
 801193a:	2b00      	cmp	r3, #0
 801193c:	d106      	bne.n	801194c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801193e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8011942:	4b85      	ldr	r3, [pc, #532]	; (8011b58 <HAL_UART_IRQHandler+0x298>)
 8011944:	4013      	ands	r3, r2
 8011946:	2b00      	cmp	r3, #0
 8011948:	f000 810a 	beq.w	8011b60 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801194c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011950:	f003 0301 	and.w	r3, r3, #1
 8011954:	2b00      	cmp	r3, #0
 8011956:	d011      	beq.n	801197c <HAL_UART_IRQHandler+0xbc>
 8011958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801195c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011960:	2b00      	cmp	r3, #0
 8011962:	d00b      	beq.n	801197c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	2201      	movs	r2, #1
 801196a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011972:	f043 0201 	orr.w	r2, r3, #1
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801197c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011980:	f003 0302 	and.w	r3, r3, #2
 8011984:	2b00      	cmp	r3, #0
 8011986:	d011      	beq.n	80119ac <HAL_UART_IRQHandler+0xec>
 8011988:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801198c:	f003 0301 	and.w	r3, r3, #1
 8011990:	2b00      	cmp	r3, #0
 8011992:	d00b      	beq.n	80119ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	2202      	movs	r2, #2
 801199a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80119a2:	f043 0204 	orr.w	r2, r3, #4
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80119ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80119b0:	f003 0304 	and.w	r3, r3, #4
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d011      	beq.n	80119dc <HAL_UART_IRQHandler+0x11c>
 80119b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80119bc:	f003 0301 	and.w	r3, r3, #1
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d00b      	beq.n	80119dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	2204      	movs	r2, #4
 80119ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80119d2:	f043 0202 	orr.w	r2, r3, #2
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80119dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80119e0:	f003 0308 	and.w	r3, r3, #8
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d017      	beq.n	8011a18 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80119e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80119ec:	f003 0320 	and.w	r3, r3, #32
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d105      	bne.n	8011a00 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80119f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80119f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d00b      	beq.n	8011a18 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	2208      	movs	r2, #8
 8011a06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011a0e:	f043 0208 	orr.w	r2, r3, #8
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8011a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d012      	beq.n	8011a4a <HAL_UART_IRQHandler+0x18a>
 8011a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011a28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d00c      	beq.n	8011a4a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011a38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011a40:	f043 0220 	orr.w	r2, r3, #32
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	f000 820c 	beq.w	8011e6e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8011a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011a5a:	f003 0320 	and.w	r3, r3, #32
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d00d      	beq.n	8011a7e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8011a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011a66:	f003 0320 	and.w	r3, r3, #32
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d007      	beq.n	8011a7e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d003      	beq.n	8011a7e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011a7a:	6878      	ldr	r0, [r7, #4]
 8011a7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011a84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	689b      	ldr	r3, [r3, #8]
 8011a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a92:	2b40      	cmp	r3, #64	; 0x40
 8011a94:	d005      	beq.n	8011aa2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8011a96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011a9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d04f      	beq.n	8011b42 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8011aa2:	6878      	ldr	r0, [r7, #4]
 8011aa4:	f000 ff12 	bl	80128cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	689b      	ldr	r3, [r3, #8]
 8011aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011ab2:	2b40      	cmp	r3, #64	; 0x40
 8011ab4:	d141      	bne.n	8011b3a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	3308      	adds	r3, #8
 8011abc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ac0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011ac4:	e853 3f00 	ldrex	r3, [r3]
 8011ac8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8011acc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011ad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011ad4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	3308      	adds	r3, #8
 8011ade:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8011ae2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8011ae6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011aea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8011aee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011af2:	e841 2300 	strex	r3, r2, [r1]
 8011af6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8011afa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d1d9      	bne.n	8011ab6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d013      	beq.n	8011b32 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b0e:	4a13      	ldr	r2, [pc, #76]	; (8011b5c <HAL_UART_IRQHandler+0x29c>)
 8011b10:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b16:	4618      	mov	r0, r3
 8011b18:	f7fc fa21 	bl	800df5e <HAL_DMA_Abort_IT>
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d017      	beq.n	8011b52 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b28:	687a      	ldr	r2, [r7, #4]
 8011b2a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8011b2c:	4610      	mov	r0, r2
 8011b2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011b30:	e00f      	b.n	8011b52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8011b32:	6878      	ldr	r0, [r7, #4]
 8011b34:	f000 f9b0 	bl	8011e98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011b38:	e00b      	b.n	8011b52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011b3a:	6878      	ldr	r0, [r7, #4]
 8011b3c:	f000 f9ac 	bl	8011e98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011b40:	e007      	b.n	8011b52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8011b42:	6878      	ldr	r0, [r7, #4]
 8011b44:	f000 f9a8 	bl	8011e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8011b50:	e18d      	b.n	8011e6e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011b52:	bf00      	nop
    return;
 8011b54:	e18b      	b.n	8011e6e <HAL_UART_IRQHandler+0x5ae>
 8011b56:	bf00      	nop
 8011b58:	04000120 	.word	0x04000120
 8011b5c:	08012993 	.word	0x08012993

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011b64:	2b01      	cmp	r3, #1
 8011b66:	f040 8146 	bne.w	8011df6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8011b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011b6e:	f003 0310 	and.w	r3, r3, #16
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	f000 813f 	beq.w	8011df6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8011b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011b7c:	f003 0310 	and.w	r3, r3, #16
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	f000 8138 	beq.w	8011df6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	2210      	movs	r2, #16
 8011b8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	689b      	ldr	r3, [r3, #8]
 8011b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b98:	2b40      	cmp	r3, #64	; 0x40
 8011b9a:	f040 80b4 	bne.w	8011d06 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	685b      	ldr	r3, [r3, #4]
 8011ba6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8011baa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	f000 815f 	beq.w	8011e72 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8011bba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8011bbe:	429a      	cmp	r2, r3
 8011bc0:	f080 8157 	bcs.w	8011e72 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8011bca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	f003 0320 	and.w	r3, r3, #32
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	f040 8085 	bne.w	8011cea <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011be8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011bec:	e853 3f00 	ldrex	r3, [r3]
 8011bf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8011bf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011bfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	461a      	mov	r2, r3
 8011c06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011c0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011c0e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c12:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8011c16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011c1a:	e841 2300 	strex	r3, r2, [r1]
 8011c1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8011c22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d1da      	bne.n	8011be0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	3308      	adds	r3, #8
 8011c30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011c34:	e853 3f00 	ldrex	r3, [r3]
 8011c38:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8011c3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011c3c:	f023 0301 	bic.w	r3, r3, #1
 8011c40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	3308      	adds	r3, #8
 8011c4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8011c4e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8011c52:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c54:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8011c56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011c5a:	e841 2300 	strex	r3, r2, [r1]
 8011c5e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8011c60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d1e1      	bne.n	8011c2a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	3308      	adds	r3, #8
 8011c6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c70:	e853 3f00 	ldrex	r3, [r3]
 8011c74:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8011c76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	3308      	adds	r3, #8
 8011c86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8011c8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011c8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011c90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011c92:	e841 2300 	strex	r3, r2, [r1]
 8011c96:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8011c98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d1e3      	bne.n	8011c66 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	2220      	movs	r2, #32
 8011ca2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	2200      	movs	r2, #0
 8011ca8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011cb2:	e853 3f00 	ldrex	r3, [r3]
 8011cb6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011cba:	f023 0310 	bic.w	r3, r3, #16
 8011cbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	461a      	mov	r2, r3
 8011cc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011ccc:	65bb      	str	r3, [r7, #88]	; 0x58
 8011cce:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011cd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011cd4:	e841 2300 	strex	r3, r2, [r1]
 8011cd8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d1e4      	bne.n	8011caa <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	f7fc f8fc 	bl	800dee2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8011cf6:	b29b      	uxth	r3, r3
 8011cf8:	1ad3      	subs	r3, r2, r3
 8011cfa:	b29b      	uxth	r3, r3
 8011cfc:	4619      	mov	r1, r3
 8011cfe:	6878      	ldr	r0, [r7, #4]
 8011d00:	f000 f8d4 	bl	8011eac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011d04:	e0b5      	b.n	8011e72 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8011d12:	b29b      	uxth	r3, r3
 8011d14:	1ad3      	subs	r3, r2, r3
 8011d16:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8011d20:	b29b      	uxth	r3, r3
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	f000 80a7 	beq.w	8011e76 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8011d28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	f000 80a2 	beq.w	8011e76 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d3a:	e853 3f00 	ldrex	r3, [r3]
 8011d3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011d46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	461a      	mov	r2, r3
 8011d50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011d54:	647b      	str	r3, [r7, #68]	; 0x44
 8011d56:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011d5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011d5c:	e841 2300 	strex	r3, r2, [r1]
 8011d60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d1e4      	bne.n	8011d32 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	3308      	adds	r3, #8
 8011d6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d72:	e853 3f00 	ldrex	r3, [r3]
 8011d76:	623b      	str	r3, [r7, #32]
   return(result);
 8011d78:	6a3b      	ldr	r3, [r7, #32]
 8011d7a:	f023 0301 	bic.w	r3, r3, #1
 8011d7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	3308      	adds	r3, #8
 8011d88:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8011d8c:	633a      	str	r2, [r7, #48]	; 0x30
 8011d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011d92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d94:	e841 2300 	strex	r3, r2, [r1]
 8011d98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d1e3      	bne.n	8011d68 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	2220      	movs	r2, #32
 8011da4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	2200      	movs	r2, #0
 8011daa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	2200      	movs	r2, #0
 8011db0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011db8:	693b      	ldr	r3, [r7, #16]
 8011dba:	e853 3f00 	ldrex	r3, [r3]
 8011dbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	f023 0310 	bic.w	r3, r3, #16
 8011dc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	461a      	mov	r2, r3
 8011dd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011dd4:	61fb      	str	r3, [r7, #28]
 8011dd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dd8:	69b9      	ldr	r1, [r7, #24]
 8011dda:	69fa      	ldr	r2, [r7, #28]
 8011ddc:	e841 2300 	strex	r3, r2, [r1]
 8011de0:	617b      	str	r3, [r7, #20]
   return(result);
 8011de2:	697b      	ldr	r3, [r7, #20]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d1e4      	bne.n	8011db2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011de8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011dec:	4619      	mov	r1, r3
 8011dee:	6878      	ldr	r0, [r7, #4]
 8011df0:	f000 f85c 	bl	8011eac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011df4:	e03f      	b.n	8011e76 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8011df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d00e      	beq.n	8011e20 <HAL_UART_IRQHandler+0x560>
 8011e02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d008      	beq.n	8011e20 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011e16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8011e18:	6878      	ldr	r0, [r7, #4]
 8011e1a:	f001 f816 	bl	8012e4a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011e1e:	e02d      	b.n	8011e7c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8011e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d00e      	beq.n	8011e4a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8011e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d008      	beq.n	8011e4a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d01c      	beq.n	8011e7a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011e44:	6878      	ldr	r0, [r7, #4]
 8011e46:	4798      	blx	r3
    }
    return;
 8011e48:	e017      	b.n	8011e7a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d012      	beq.n	8011e7c <HAL_UART_IRQHandler+0x5bc>
 8011e56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d00c      	beq.n	8011e7c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8011e62:	6878      	ldr	r0, [r7, #4]
 8011e64:	f000 fe67 	bl	8012b36 <UART_EndTransmit_IT>
    return;
 8011e68:	e008      	b.n	8011e7c <HAL_UART_IRQHandler+0x5bc>
      return;
 8011e6a:	bf00      	nop
 8011e6c:	e006      	b.n	8011e7c <HAL_UART_IRQHandler+0x5bc>
    return;
 8011e6e:	bf00      	nop
 8011e70:	e004      	b.n	8011e7c <HAL_UART_IRQHandler+0x5bc>
      return;
 8011e72:	bf00      	nop
 8011e74:	e002      	b.n	8011e7c <HAL_UART_IRQHandler+0x5bc>
      return;
 8011e76:	bf00      	nop
 8011e78:	e000      	b.n	8011e7c <HAL_UART_IRQHandler+0x5bc>
    return;
 8011e7a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8011e7c:	37e8      	adds	r7, #232	; 0xe8
 8011e7e:	46bd      	mov	sp, r7
 8011e80:	bd80      	pop	{r7, pc}
 8011e82:	bf00      	nop

08011e84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011e84:	b480      	push	{r7}
 8011e86:	b083      	sub	sp, #12
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8011e8c:	bf00      	nop
 8011e8e:	370c      	adds	r7, #12
 8011e90:	46bd      	mov	sp, r7
 8011e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e96:	4770      	bx	lr

08011e98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011e98:	b480      	push	{r7}
 8011e9a:	b083      	sub	sp, #12
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011ea0:	bf00      	nop
 8011ea2:	370c      	adds	r7, #12
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eaa:	4770      	bx	lr

08011eac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011eac:	b480      	push	{r7}
 8011eae:	b083      	sub	sp, #12
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	6078      	str	r0, [r7, #4]
 8011eb4:	460b      	mov	r3, r1
 8011eb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011eb8:	bf00      	nop
 8011eba:	370c      	adds	r7, #12
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec2:	4770      	bx	lr

08011ec4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011ec4:	b5b0      	push	{r4, r5, r7, lr}
 8011ec6:	b088      	sub	sp, #32
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011ecc:	2300      	movs	r3, #0
 8011ece:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	689a      	ldr	r2, [r3, #8]
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	691b      	ldr	r3, [r3, #16]
 8011ed8:	431a      	orrs	r2, r3
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	695b      	ldr	r3, [r3, #20]
 8011ede:	431a      	orrs	r2, r3
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	69db      	ldr	r3, [r3, #28]
 8011ee4:	4313      	orrs	r3, r2
 8011ee6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	681a      	ldr	r2, [r3, #0]
 8011eee:	4bad      	ldr	r3, [pc, #692]	; (80121a4 <UART_SetConfig+0x2e0>)
 8011ef0:	4013      	ands	r3, r2
 8011ef2:	687a      	ldr	r2, [r7, #4]
 8011ef4:	6812      	ldr	r2, [r2, #0]
 8011ef6:	69f9      	ldr	r1, [r7, #28]
 8011ef8:	430b      	orrs	r3, r1
 8011efa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	685b      	ldr	r3, [r3, #4]
 8011f02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	68da      	ldr	r2, [r3, #12]
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	430a      	orrs	r2, r1
 8011f10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	699b      	ldr	r3, [r3, #24]
 8011f16:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	4aa2      	ldr	r2, [pc, #648]	; (80121a8 <UART_SetConfig+0x2e4>)
 8011f1e:	4293      	cmp	r3, r2
 8011f20:	d004      	beq.n	8011f2c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	6a1b      	ldr	r3, [r3, #32]
 8011f26:	69fa      	ldr	r2, [r7, #28]
 8011f28:	4313      	orrs	r3, r2
 8011f2a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	689b      	ldr	r3, [r3, #8]
 8011f32:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	69fa      	ldr	r2, [r7, #28]
 8011f3c:	430a      	orrs	r2, r1
 8011f3e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	4a99      	ldr	r2, [pc, #612]	; (80121ac <UART_SetConfig+0x2e8>)
 8011f46:	4293      	cmp	r3, r2
 8011f48:	d121      	bne.n	8011f8e <UART_SetConfig+0xca>
 8011f4a:	4b99      	ldr	r3, [pc, #612]	; (80121b0 <UART_SetConfig+0x2ec>)
 8011f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011f50:	f003 0303 	and.w	r3, r3, #3
 8011f54:	2b03      	cmp	r3, #3
 8011f56:	d817      	bhi.n	8011f88 <UART_SetConfig+0xc4>
 8011f58:	a201      	add	r2, pc, #4	; (adr r2, 8011f60 <UART_SetConfig+0x9c>)
 8011f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f5e:	bf00      	nop
 8011f60:	08011f71 	.word	0x08011f71
 8011f64:	08011f7d 	.word	0x08011f7d
 8011f68:	08011f77 	.word	0x08011f77
 8011f6c:	08011f83 	.word	0x08011f83
 8011f70:	2301      	movs	r3, #1
 8011f72:	76fb      	strb	r3, [r7, #27]
 8011f74:	e0e7      	b.n	8012146 <UART_SetConfig+0x282>
 8011f76:	2302      	movs	r3, #2
 8011f78:	76fb      	strb	r3, [r7, #27]
 8011f7a:	e0e4      	b.n	8012146 <UART_SetConfig+0x282>
 8011f7c:	2304      	movs	r3, #4
 8011f7e:	76fb      	strb	r3, [r7, #27]
 8011f80:	e0e1      	b.n	8012146 <UART_SetConfig+0x282>
 8011f82:	2308      	movs	r3, #8
 8011f84:	76fb      	strb	r3, [r7, #27]
 8011f86:	e0de      	b.n	8012146 <UART_SetConfig+0x282>
 8011f88:	2310      	movs	r3, #16
 8011f8a:	76fb      	strb	r3, [r7, #27]
 8011f8c:	e0db      	b.n	8012146 <UART_SetConfig+0x282>
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	4a88      	ldr	r2, [pc, #544]	; (80121b4 <UART_SetConfig+0x2f0>)
 8011f94:	4293      	cmp	r3, r2
 8011f96:	d132      	bne.n	8011ffe <UART_SetConfig+0x13a>
 8011f98:	4b85      	ldr	r3, [pc, #532]	; (80121b0 <UART_SetConfig+0x2ec>)
 8011f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011f9e:	f003 030c 	and.w	r3, r3, #12
 8011fa2:	2b0c      	cmp	r3, #12
 8011fa4:	d828      	bhi.n	8011ff8 <UART_SetConfig+0x134>
 8011fa6:	a201      	add	r2, pc, #4	; (adr r2, 8011fac <UART_SetConfig+0xe8>)
 8011fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fac:	08011fe1 	.word	0x08011fe1
 8011fb0:	08011ff9 	.word	0x08011ff9
 8011fb4:	08011ff9 	.word	0x08011ff9
 8011fb8:	08011ff9 	.word	0x08011ff9
 8011fbc:	08011fed 	.word	0x08011fed
 8011fc0:	08011ff9 	.word	0x08011ff9
 8011fc4:	08011ff9 	.word	0x08011ff9
 8011fc8:	08011ff9 	.word	0x08011ff9
 8011fcc:	08011fe7 	.word	0x08011fe7
 8011fd0:	08011ff9 	.word	0x08011ff9
 8011fd4:	08011ff9 	.word	0x08011ff9
 8011fd8:	08011ff9 	.word	0x08011ff9
 8011fdc:	08011ff3 	.word	0x08011ff3
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	76fb      	strb	r3, [r7, #27]
 8011fe4:	e0af      	b.n	8012146 <UART_SetConfig+0x282>
 8011fe6:	2302      	movs	r3, #2
 8011fe8:	76fb      	strb	r3, [r7, #27]
 8011fea:	e0ac      	b.n	8012146 <UART_SetConfig+0x282>
 8011fec:	2304      	movs	r3, #4
 8011fee:	76fb      	strb	r3, [r7, #27]
 8011ff0:	e0a9      	b.n	8012146 <UART_SetConfig+0x282>
 8011ff2:	2308      	movs	r3, #8
 8011ff4:	76fb      	strb	r3, [r7, #27]
 8011ff6:	e0a6      	b.n	8012146 <UART_SetConfig+0x282>
 8011ff8:	2310      	movs	r3, #16
 8011ffa:	76fb      	strb	r3, [r7, #27]
 8011ffc:	e0a3      	b.n	8012146 <UART_SetConfig+0x282>
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	4a6d      	ldr	r2, [pc, #436]	; (80121b8 <UART_SetConfig+0x2f4>)
 8012004:	4293      	cmp	r3, r2
 8012006:	d120      	bne.n	801204a <UART_SetConfig+0x186>
 8012008:	4b69      	ldr	r3, [pc, #420]	; (80121b0 <UART_SetConfig+0x2ec>)
 801200a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801200e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8012012:	2b30      	cmp	r3, #48	; 0x30
 8012014:	d013      	beq.n	801203e <UART_SetConfig+0x17a>
 8012016:	2b30      	cmp	r3, #48	; 0x30
 8012018:	d814      	bhi.n	8012044 <UART_SetConfig+0x180>
 801201a:	2b20      	cmp	r3, #32
 801201c:	d009      	beq.n	8012032 <UART_SetConfig+0x16e>
 801201e:	2b20      	cmp	r3, #32
 8012020:	d810      	bhi.n	8012044 <UART_SetConfig+0x180>
 8012022:	2b00      	cmp	r3, #0
 8012024:	d002      	beq.n	801202c <UART_SetConfig+0x168>
 8012026:	2b10      	cmp	r3, #16
 8012028:	d006      	beq.n	8012038 <UART_SetConfig+0x174>
 801202a:	e00b      	b.n	8012044 <UART_SetConfig+0x180>
 801202c:	2300      	movs	r3, #0
 801202e:	76fb      	strb	r3, [r7, #27]
 8012030:	e089      	b.n	8012146 <UART_SetConfig+0x282>
 8012032:	2302      	movs	r3, #2
 8012034:	76fb      	strb	r3, [r7, #27]
 8012036:	e086      	b.n	8012146 <UART_SetConfig+0x282>
 8012038:	2304      	movs	r3, #4
 801203a:	76fb      	strb	r3, [r7, #27]
 801203c:	e083      	b.n	8012146 <UART_SetConfig+0x282>
 801203e:	2308      	movs	r3, #8
 8012040:	76fb      	strb	r3, [r7, #27]
 8012042:	e080      	b.n	8012146 <UART_SetConfig+0x282>
 8012044:	2310      	movs	r3, #16
 8012046:	76fb      	strb	r3, [r7, #27]
 8012048:	e07d      	b.n	8012146 <UART_SetConfig+0x282>
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	4a5b      	ldr	r2, [pc, #364]	; (80121bc <UART_SetConfig+0x2f8>)
 8012050:	4293      	cmp	r3, r2
 8012052:	d120      	bne.n	8012096 <UART_SetConfig+0x1d2>
 8012054:	4b56      	ldr	r3, [pc, #344]	; (80121b0 <UART_SetConfig+0x2ec>)
 8012056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801205a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801205e:	2bc0      	cmp	r3, #192	; 0xc0
 8012060:	d013      	beq.n	801208a <UART_SetConfig+0x1c6>
 8012062:	2bc0      	cmp	r3, #192	; 0xc0
 8012064:	d814      	bhi.n	8012090 <UART_SetConfig+0x1cc>
 8012066:	2b80      	cmp	r3, #128	; 0x80
 8012068:	d009      	beq.n	801207e <UART_SetConfig+0x1ba>
 801206a:	2b80      	cmp	r3, #128	; 0x80
 801206c:	d810      	bhi.n	8012090 <UART_SetConfig+0x1cc>
 801206e:	2b00      	cmp	r3, #0
 8012070:	d002      	beq.n	8012078 <UART_SetConfig+0x1b4>
 8012072:	2b40      	cmp	r3, #64	; 0x40
 8012074:	d006      	beq.n	8012084 <UART_SetConfig+0x1c0>
 8012076:	e00b      	b.n	8012090 <UART_SetConfig+0x1cc>
 8012078:	2300      	movs	r3, #0
 801207a:	76fb      	strb	r3, [r7, #27]
 801207c:	e063      	b.n	8012146 <UART_SetConfig+0x282>
 801207e:	2302      	movs	r3, #2
 8012080:	76fb      	strb	r3, [r7, #27]
 8012082:	e060      	b.n	8012146 <UART_SetConfig+0x282>
 8012084:	2304      	movs	r3, #4
 8012086:	76fb      	strb	r3, [r7, #27]
 8012088:	e05d      	b.n	8012146 <UART_SetConfig+0x282>
 801208a:	2308      	movs	r3, #8
 801208c:	76fb      	strb	r3, [r7, #27]
 801208e:	e05a      	b.n	8012146 <UART_SetConfig+0x282>
 8012090:	2310      	movs	r3, #16
 8012092:	76fb      	strb	r3, [r7, #27]
 8012094:	e057      	b.n	8012146 <UART_SetConfig+0x282>
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	4a49      	ldr	r2, [pc, #292]	; (80121c0 <UART_SetConfig+0x2fc>)
 801209c:	4293      	cmp	r3, r2
 801209e:	d125      	bne.n	80120ec <UART_SetConfig+0x228>
 80120a0:	4b43      	ldr	r3, [pc, #268]	; (80121b0 <UART_SetConfig+0x2ec>)
 80120a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80120a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80120aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80120ae:	d017      	beq.n	80120e0 <UART_SetConfig+0x21c>
 80120b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80120b4:	d817      	bhi.n	80120e6 <UART_SetConfig+0x222>
 80120b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80120ba:	d00b      	beq.n	80120d4 <UART_SetConfig+0x210>
 80120bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80120c0:	d811      	bhi.n	80120e6 <UART_SetConfig+0x222>
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d003      	beq.n	80120ce <UART_SetConfig+0x20a>
 80120c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80120ca:	d006      	beq.n	80120da <UART_SetConfig+0x216>
 80120cc:	e00b      	b.n	80120e6 <UART_SetConfig+0x222>
 80120ce:	2300      	movs	r3, #0
 80120d0:	76fb      	strb	r3, [r7, #27]
 80120d2:	e038      	b.n	8012146 <UART_SetConfig+0x282>
 80120d4:	2302      	movs	r3, #2
 80120d6:	76fb      	strb	r3, [r7, #27]
 80120d8:	e035      	b.n	8012146 <UART_SetConfig+0x282>
 80120da:	2304      	movs	r3, #4
 80120dc:	76fb      	strb	r3, [r7, #27]
 80120de:	e032      	b.n	8012146 <UART_SetConfig+0x282>
 80120e0:	2308      	movs	r3, #8
 80120e2:	76fb      	strb	r3, [r7, #27]
 80120e4:	e02f      	b.n	8012146 <UART_SetConfig+0x282>
 80120e6:	2310      	movs	r3, #16
 80120e8:	76fb      	strb	r3, [r7, #27]
 80120ea:	e02c      	b.n	8012146 <UART_SetConfig+0x282>
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	4a2d      	ldr	r2, [pc, #180]	; (80121a8 <UART_SetConfig+0x2e4>)
 80120f2:	4293      	cmp	r3, r2
 80120f4:	d125      	bne.n	8012142 <UART_SetConfig+0x27e>
 80120f6:	4b2e      	ldr	r3, [pc, #184]	; (80121b0 <UART_SetConfig+0x2ec>)
 80120f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80120fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8012100:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8012104:	d017      	beq.n	8012136 <UART_SetConfig+0x272>
 8012106:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801210a:	d817      	bhi.n	801213c <UART_SetConfig+0x278>
 801210c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012110:	d00b      	beq.n	801212a <UART_SetConfig+0x266>
 8012112:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012116:	d811      	bhi.n	801213c <UART_SetConfig+0x278>
 8012118:	2b00      	cmp	r3, #0
 801211a:	d003      	beq.n	8012124 <UART_SetConfig+0x260>
 801211c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012120:	d006      	beq.n	8012130 <UART_SetConfig+0x26c>
 8012122:	e00b      	b.n	801213c <UART_SetConfig+0x278>
 8012124:	2300      	movs	r3, #0
 8012126:	76fb      	strb	r3, [r7, #27]
 8012128:	e00d      	b.n	8012146 <UART_SetConfig+0x282>
 801212a:	2302      	movs	r3, #2
 801212c:	76fb      	strb	r3, [r7, #27]
 801212e:	e00a      	b.n	8012146 <UART_SetConfig+0x282>
 8012130:	2304      	movs	r3, #4
 8012132:	76fb      	strb	r3, [r7, #27]
 8012134:	e007      	b.n	8012146 <UART_SetConfig+0x282>
 8012136:	2308      	movs	r3, #8
 8012138:	76fb      	strb	r3, [r7, #27]
 801213a:	e004      	b.n	8012146 <UART_SetConfig+0x282>
 801213c:	2310      	movs	r3, #16
 801213e:	76fb      	strb	r3, [r7, #27]
 8012140:	e001      	b.n	8012146 <UART_SetConfig+0x282>
 8012142:	2310      	movs	r3, #16
 8012144:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	4a17      	ldr	r2, [pc, #92]	; (80121a8 <UART_SetConfig+0x2e4>)
 801214c:	4293      	cmp	r3, r2
 801214e:	f040 8087 	bne.w	8012260 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8012152:	7efb      	ldrb	r3, [r7, #27]
 8012154:	2b08      	cmp	r3, #8
 8012156:	d837      	bhi.n	80121c8 <UART_SetConfig+0x304>
 8012158:	a201      	add	r2, pc, #4	; (adr r2, 8012160 <UART_SetConfig+0x29c>)
 801215a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801215e:	bf00      	nop
 8012160:	08012185 	.word	0x08012185
 8012164:	080121c9 	.word	0x080121c9
 8012168:	0801218d 	.word	0x0801218d
 801216c:	080121c9 	.word	0x080121c9
 8012170:	08012193 	.word	0x08012193
 8012174:	080121c9 	.word	0x080121c9
 8012178:	080121c9 	.word	0x080121c9
 801217c:	080121c9 	.word	0x080121c9
 8012180:	0801219b 	.word	0x0801219b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012184:	f7fe f97e 	bl	8010484 <HAL_RCC_GetPCLK1Freq>
 8012188:	6178      	str	r0, [r7, #20]
        break;
 801218a:	e022      	b.n	80121d2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801218c:	4b0d      	ldr	r3, [pc, #52]	; (80121c4 <UART_SetConfig+0x300>)
 801218e:	617b      	str	r3, [r7, #20]
        break;
 8012190:	e01f      	b.n	80121d2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8012192:	f7fe f8df 	bl	8010354 <HAL_RCC_GetSysClockFreq>
 8012196:	6178      	str	r0, [r7, #20]
        break;
 8012198:	e01b      	b.n	80121d2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801219a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801219e:	617b      	str	r3, [r7, #20]
        break;
 80121a0:	e017      	b.n	80121d2 <UART_SetConfig+0x30e>
 80121a2:	bf00      	nop
 80121a4:	efff69f3 	.word	0xefff69f3
 80121a8:	40008000 	.word	0x40008000
 80121ac:	40013800 	.word	0x40013800
 80121b0:	40021000 	.word	0x40021000
 80121b4:	40004400 	.word	0x40004400
 80121b8:	40004800 	.word	0x40004800
 80121bc:	40004c00 	.word	0x40004c00
 80121c0:	40005000 	.word	0x40005000
 80121c4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80121c8:	2300      	movs	r3, #0
 80121ca:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80121cc:	2301      	movs	r3, #1
 80121ce:	76bb      	strb	r3, [r7, #26]
        break;
 80121d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80121d2:	697b      	ldr	r3, [r7, #20]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	f000 80f1 	beq.w	80123bc <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	685a      	ldr	r2, [r3, #4]
 80121de:	4613      	mov	r3, r2
 80121e0:	005b      	lsls	r3, r3, #1
 80121e2:	4413      	add	r3, r2
 80121e4:	697a      	ldr	r2, [r7, #20]
 80121e6:	429a      	cmp	r2, r3
 80121e8:	d305      	bcc.n	80121f6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	685b      	ldr	r3, [r3, #4]
 80121ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80121f0:	697a      	ldr	r2, [r7, #20]
 80121f2:	429a      	cmp	r2, r3
 80121f4:	d902      	bls.n	80121fc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80121f6:	2301      	movs	r3, #1
 80121f8:	76bb      	strb	r3, [r7, #26]
 80121fa:	e0df      	b.n	80123bc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80121fc:	697b      	ldr	r3, [r7, #20]
 80121fe:	4618      	mov	r0, r3
 8012200:	f04f 0100 	mov.w	r1, #0
 8012204:	f04f 0200 	mov.w	r2, #0
 8012208:	f04f 0300 	mov.w	r3, #0
 801220c:	020b      	lsls	r3, r1, #8
 801220e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8012212:	0202      	lsls	r2, r0, #8
 8012214:	6879      	ldr	r1, [r7, #4]
 8012216:	6849      	ldr	r1, [r1, #4]
 8012218:	0849      	lsrs	r1, r1, #1
 801221a:	4608      	mov	r0, r1
 801221c:	f04f 0100 	mov.w	r1, #0
 8012220:	1814      	adds	r4, r2, r0
 8012222:	eb43 0501 	adc.w	r5, r3, r1
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	685b      	ldr	r3, [r3, #4]
 801222a:	461a      	mov	r2, r3
 801222c:	f04f 0300 	mov.w	r3, #0
 8012230:	4620      	mov	r0, r4
 8012232:	4629      	mov	r1, r5
 8012234:	f7ee fcb8 	bl	8000ba8 <__aeabi_uldivmod>
 8012238:	4602      	mov	r2, r0
 801223a:	460b      	mov	r3, r1
 801223c:	4613      	mov	r3, r2
 801223e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8012240:	693b      	ldr	r3, [r7, #16]
 8012242:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012246:	d308      	bcc.n	801225a <UART_SetConfig+0x396>
 8012248:	693b      	ldr	r3, [r7, #16]
 801224a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801224e:	d204      	bcs.n	801225a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	693a      	ldr	r2, [r7, #16]
 8012256:	60da      	str	r2, [r3, #12]
 8012258:	e0b0      	b.n	80123bc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 801225a:	2301      	movs	r3, #1
 801225c:	76bb      	strb	r3, [r7, #26]
 801225e:	e0ad      	b.n	80123bc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	69db      	ldr	r3, [r3, #28]
 8012264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012268:	d15b      	bne.n	8012322 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 801226a:	7efb      	ldrb	r3, [r7, #27]
 801226c:	2b08      	cmp	r3, #8
 801226e:	d828      	bhi.n	80122c2 <UART_SetConfig+0x3fe>
 8012270:	a201      	add	r2, pc, #4	; (adr r2, 8012278 <UART_SetConfig+0x3b4>)
 8012272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012276:	bf00      	nop
 8012278:	0801229d 	.word	0x0801229d
 801227c:	080122a5 	.word	0x080122a5
 8012280:	080122ad 	.word	0x080122ad
 8012284:	080122c3 	.word	0x080122c3
 8012288:	080122b3 	.word	0x080122b3
 801228c:	080122c3 	.word	0x080122c3
 8012290:	080122c3 	.word	0x080122c3
 8012294:	080122c3 	.word	0x080122c3
 8012298:	080122bb 	.word	0x080122bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801229c:	f7fe f8f2 	bl	8010484 <HAL_RCC_GetPCLK1Freq>
 80122a0:	6178      	str	r0, [r7, #20]
        break;
 80122a2:	e013      	b.n	80122cc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80122a4:	f7fe f904 	bl	80104b0 <HAL_RCC_GetPCLK2Freq>
 80122a8:	6178      	str	r0, [r7, #20]
        break;
 80122aa:	e00f      	b.n	80122cc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80122ac:	4b49      	ldr	r3, [pc, #292]	; (80123d4 <UART_SetConfig+0x510>)
 80122ae:	617b      	str	r3, [r7, #20]
        break;
 80122b0:	e00c      	b.n	80122cc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80122b2:	f7fe f84f 	bl	8010354 <HAL_RCC_GetSysClockFreq>
 80122b6:	6178      	str	r0, [r7, #20]
        break;
 80122b8:	e008      	b.n	80122cc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80122ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80122be:	617b      	str	r3, [r7, #20]
        break;
 80122c0:	e004      	b.n	80122cc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80122c2:	2300      	movs	r3, #0
 80122c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80122c6:	2301      	movs	r3, #1
 80122c8:	76bb      	strb	r3, [r7, #26]
        break;
 80122ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80122cc:	697b      	ldr	r3, [r7, #20]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d074      	beq.n	80123bc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80122d2:	697b      	ldr	r3, [r7, #20]
 80122d4:	005a      	lsls	r2, r3, #1
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	685b      	ldr	r3, [r3, #4]
 80122da:	085b      	lsrs	r3, r3, #1
 80122dc:	441a      	add	r2, r3
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	685b      	ldr	r3, [r3, #4]
 80122e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80122e6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80122e8:	693b      	ldr	r3, [r7, #16]
 80122ea:	2b0f      	cmp	r3, #15
 80122ec:	d916      	bls.n	801231c <UART_SetConfig+0x458>
 80122ee:	693b      	ldr	r3, [r7, #16]
 80122f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80122f4:	d212      	bcs.n	801231c <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80122f6:	693b      	ldr	r3, [r7, #16]
 80122f8:	b29b      	uxth	r3, r3
 80122fa:	f023 030f 	bic.w	r3, r3, #15
 80122fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012300:	693b      	ldr	r3, [r7, #16]
 8012302:	085b      	lsrs	r3, r3, #1
 8012304:	b29b      	uxth	r3, r3
 8012306:	f003 0307 	and.w	r3, r3, #7
 801230a:	b29a      	uxth	r2, r3
 801230c:	89fb      	ldrh	r3, [r7, #14]
 801230e:	4313      	orrs	r3, r2
 8012310:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	89fa      	ldrh	r2, [r7, #14]
 8012318:	60da      	str	r2, [r3, #12]
 801231a:	e04f      	b.n	80123bc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 801231c:	2301      	movs	r3, #1
 801231e:	76bb      	strb	r3, [r7, #26]
 8012320:	e04c      	b.n	80123bc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012322:	7efb      	ldrb	r3, [r7, #27]
 8012324:	2b08      	cmp	r3, #8
 8012326:	d828      	bhi.n	801237a <UART_SetConfig+0x4b6>
 8012328:	a201      	add	r2, pc, #4	; (adr r2, 8012330 <UART_SetConfig+0x46c>)
 801232a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801232e:	bf00      	nop
 8012330:	08012355 	.word	0x08012355
 8012334:	0801235d 	.word	0x0801235d
 8012338:	08012365 	.word	0x08012365
 801233c:	0801237b 	.word	0x0801237b
 8012340:	0801236b 	.word	0x0801236b
 8012344:	0801237b 	.word	0x0801237b
 8012348:	0801237b 	.word	0x0801237b
 801234c:	0801237b 	.word	0x0801237b
 8012350:	08012373 	.word	0x08012373
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012354:	f7fe f896 	bl	8010484 <HAL_RCC_GetPCLK1Freq>
 8012358:	6178      	str	r0, [r7, #20]
        break;
 801235a:	e013      	b.n	8012384 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801235c:	f7fe f8a8 	bl	80104b0 <HAL_RCC_GetPCLK2Freq>
 8012360:	6178      	str	r0, [r7, #20]
        break;
 8012362:	e00f      	b.n	8012384 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8012364:	4b1b      	ldr	r3, [pc, #108]	; (80123d4 <UART_SetConfig+0x510>)
 8012366:	617b      	str	r3, [r7, #20]
        break;
 8012368:	e00c      	b.n	8012384 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801236a:	f7fd fff3 	bl	8010354 <HAL_RCC_GetSysClockFreq>
 801236e:	6178      	str	r0, [r7, #20]
        break;
 8012370:	e008      	b.n	8012384 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012376:	617b      	str	r3, [r7, #20]
        break;
 8012378:	e004      	b.n	8012384 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 801237a:	2300      	movs	r3, #0
 801237c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 801237e:	2301      	movs	r3, #1
 8012380:	76bb      	strb	r3, [r7, #26]
        break;
 8012382:	bf00      	nop
    }

    if (pclk != 0U)
 8012384:	697b      	ldr	r3, [r7, #20]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d018      	beq.n	80123bc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	685b      	ldr	r3, [r3, #4]
 801238e:	085a      	lsrs	r2, r3, #1
 8012390:	697b      	ldr	r3, [r7, #20]
 8012392:	441a      	add	r2, r3
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	685b      	ldr	r3, [r3, #4]
 8012398:	fbb2 f3f3 	udiv	r3, r2, r3
 801239c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801239e:	693b      	ldr	r3, [r7, #16]
 80123a0:	2b0f      	cmp	r3, #15
 80123a2:	d909      	bls.n	80123b8 <UART_SetConfig+0x4f4>
 80123a4:	693b      	ldr	r3, [r7, #16]
 80123a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80123aa:	d205      	bcs.n	80123b8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80123ac:	693b      	ldr	r3, [r7, #16]
 80123ae:	b29a      	uxth	r2, r3
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	60da      	str	r2, [r3, #12]
 80123b6:	e001      	b.n	80123bc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80123b8:	2301      	movs	r3, #1
 80123ba:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	2200      	movs	r2, #0
 80123c0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	2200      	movs	r2, #0
 80123c6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80123c8:	7ebb      	ldrb	r3, [r7, #26]
}
 80123ca:	4618      	mov	r0, r3
 80123cc:	3720      	adds	r7, #32
 80123ce:	46bd      	mov	sp, r7
 80123d0:	bdb0      	pop	{r4, r5, r7, pc}
 80123d2:	bf00      	nop
 80123d4:	00f42400 	.word	0x00f42400

080123d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80123d8:	b480      	push	{r7}
 80123da:	b083      	sub	sp, #12
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123e4:	f003 0301 	and.w	r3, r3, #1
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d00a      	beq.n	8012402 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	685b      	ldr	r3, [r3, #4]
 80123f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	430a      	orrs	r2, r1
 8012400:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012406:	f003 0302 	and.w	r3, r3, #2
 801240a:	2b00      	cmp	r3, #0
 801240c:	d00a      	beq.n	8012424 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	685b      	ldr	r3, [r3, #4]
 8012414:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	430a      	orrs	r2, r1
 8012422:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012428:	f003 0304 	and.w	r3, r3, #4
 801242c:	2b00      	cmp	r3, #0
 801242e:	d00a      	beq.n	8012446 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	685b      	ldr	r3, [r3, #4]
 8012436:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	430a      	orrs	r2, r1
 8012444:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801244a:	f003 0308 	and.w	r3, r3, #8
 801244e:	2b00      	cmp	r3, #0
 8012450:	d00a      	beq.n	8012468 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	685b      	ldr	r3, [r3, #4]
 8012458:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	430a      	orrs	r2, r1
 8012466:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801246c:	f003 0310 	and.w	r3, r3, #16
 8012470:	2b00      	cmp	r3, #0
 8012472:	d00a      	beq.n	801248a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	689b      	ldr	r3, [r3, #8]
 801247a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	430a      	orrs	r2, r1
 8012488:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801248e:	f003 0320 	and.w	r3, r3, #32
 8012492:	2b00      	cmp	r3, #0
 8012494:	d00a      	beq.n	80124ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	689b      	ldr	r3, [r3, #8]
 801249c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	430a      	orrs	r2, r1
 80124aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d01a      	beq.n	80124ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	685b      	ldr	r3, [r3, #4]
 80124be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	430a      	orrs	r2, r1
 80124cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80124d6:	d10a      	bne.n	80124ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	685b      	ldr	r3, [r3, #4]
 80124de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	430a      	orrs	r2, r1
 80124ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d00a      	beq.n	8012510 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	685b      	ldr	r3, [r3, #4]
 8012500:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	430a      	orrs	r2, r1
 801250e:	605a      	str	r2, [r3, #4]
  }
}
 8012510:	bf00      	nop
 8012512:	370c      	adds	r7, #12
 8012514:	46bd      	mov	sp, r7
 8012516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251a:	4770      	bx	lr

0801251c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801251c:	b580      	push	{r7, lr}
 801251e:	b086      	sub	sp, #24
 8012520:	af02      	add	r7, sp, #8
 8012522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	2200      	movs	r2, #0
 8012528:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801252c:	f7fb fb98 	bl	800dc60 <HAL_GetTick>
 8012530:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	f003 0308 	and.w	r3, r3, #8
 801253c:	2b08      	cmp	r3, #8
 801253e:	d10e      	bne.n	801255e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012540:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012544:	9300      	str	r3, [sp, #0]
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	2200      	movs	r2, #0
 801254a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801254e:	6878      	ldr	r0, [r7, #4]
 8012550:	f000 f82d 	bl	80125ae <UART_WaitOnFlagUntilTimeout>
 8012554:	4603      	mov	r3, r0
 8012556:	2b00      	cmp	r3, #0
 8012558:	d001      	beq.n	801255e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801255a:	2303      	movs	r3, #3
 801255c:	e023      	b.n	80125a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	f003 0304 	and.w	r3, r3, #4
 8012568:	2b04      	cmp	r3, #4
 801256a:	d10e      	bne.n	801258a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801256c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012570:	9300      	str	r3, [sp, #0]
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	2200      	movs	r2, #0
 8012576:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801257a:	6878      	ldr	r0, [r7, #4]
 801257c:	f000 f817 	bl	80125ae <UART_WaitOnFlagUntilTimeout>
 8012580:	4603      	mov	r3, r0
 8012582:	2b00      	cmp	r3, #0
 8012584:	d001      	beq.n	801258a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012586:	2303      	movs	r3, #3
 8012588:	e00d      	b.n	80125a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	2220      	movs	r2, #32
 801258e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	2220      	movs	r2, #32
 8012594:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	2200      	movs	r2, #0
 801259a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	2200      	movs	r2, #0
 80125a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80125a4:	2300      	movs	r3, #0
}
 80125a6:	4618      	mov	r0, r3
 80125a8:	3710      	adds	r7, #16
 80125aa:	46bd      	mov	sp, r7
 80125ac:	bd80      	pop	{r7, pc}

080125ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80125ae:	b580      	push	{r7, lr}
 80125b0:	b09c      	sub	sp, #112	; 0x70
 80125b2:	af00      	add	r7, sp, #0
 80125b4:	60f8      	str	r0, [r7, #12]
 80125b6:	60b9      	str	r1, [r7, #8]
 80125b8:	603b      	str	r3, [r7, #0]
 80125ba:	4613      	mov	r3, r2
 80125bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80125be:	e0a5      	b.n	801270c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80125c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80125c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125c6:	f000 80a1 	beq.w	801270c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80125ca:	f7fb fb49 	bl	800dc60 <HAL_GetTick>
 80125ce:	4602      	mov	r2, r0
 80125d0:	683b      	ldr	r3, [r7, #0]
 80125d2:	1ad3      	subs	r3, r2, r3
 80125d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80125d6:	429a      	cmp	r2, r3
 80125d8:	d302      	bcc.n	80125e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80125da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d13e      	bne.n	801265e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125e8:	e853 3f00 	ldrex	r3, [r3]
 80125ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80125ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80125f4:	667b      	str	r3, [r7, #100]	; 0x64
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	461a      	mov	r2, r3
 80125fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80125fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012600:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012602:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012604:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012606:	e841 2300 	strex	r3, r2, [r1]
 801260a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801260c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801260e:	2b00      	cmp	r3, #0
 8012610:	d1e6      	bne.n	80125e0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	3308      	adds	r3, #8
 8012618:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801261a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801261c:	e853 3f00 	ldrex	r3, [r3]
 8012620:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012624:	f023 0301 	bic.w	r3, r3, #1
 8012628:	663b      	str	r3, [r7, #96]	; 0x60
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	3308      	adds	r3, #8
 8012630:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012632:	64ba      	str	r2, [r7, #72]	; 0x48
 8012634:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012636:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012638:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801263a:	e841 2300 	strex	r3, r2, [r1]
 801263e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8012640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012642:	2b00      	cmp	r3, #0
 8012644:	d1e5      	bne.n	8012612 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	2220      	movs	r2, #32
 801264a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	2220      	movs	r2, #32
 8012650:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	2200      	movs	r2, #0
 8012656:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 801265a:	2303      	movs	r3, #3
 801265c:	e067      	b.n	801272e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	f003 0304 	and.w	r3, r3, #4
 8012668:	2b00      	cmp	r3, #0
 801266a:	d04f      	beq.n	801270c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	69db      	ldr	r3, [r3, #28]
 8012672:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012676:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801267a:	d147      	bne.n	801270c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012684:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801268c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801268e:	e853 3f00 	ldrex	r3, [r3]
 8012692:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012696:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801269a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	461a      	mov	r2, r3
 80126a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80126a4:	637b      	str	r3, [r7, #52]	; 0x34
 80126a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80126aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80126ac:	e841 2300 	strex	r3, r2, [r1]
 80126b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80126b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d1e6      	bne.n	8012686 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	3308      	adds	r3, #8
 80126be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126c0:	697b      	ldr	r3, [r7, #20]
 80126c2:	e853 3f00 	ldrex	r3, [r3]
 80126c6:	613b      	str	r3, [r7, #16]
   return(result);
 80126c8:	693b      	ldr	r3, [r7, #16]
 80126ca:	f023 0301 	bic.w	r3, r3, #1
 80126ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	3308      	adds	r3, #8
 80126d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80126d8:	623a      	str	r2, [r7, #32]
 80126da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126dc:	69f9      	ldr	r1, [r7, #28]
 80126de:	6a3a      	ldr	r2, [r7, #32]
 80126e0:	e841 2300 	strex	r3, r2, [r1]
 80126e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80126e6:	69bb      	ldr	r3, [r7, #24]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d1e5      	bne.n	80126b8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	2220      	movs	r2, #32
 80126f0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	2220      	movs	r2, #32
 80126f6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	2220      	movs	r2, #32
 80126fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	2200      	movs	r2, #0
 8012704:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8012708:	2303      	movs	r3, #3
 801270a:	e010      	b.n	801272e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	69da      	ldr	r2, [r3, #28]
 8012712:	68bb      	ldr	r3, [r7, #8]
 8012714:	4013      	ands	r3, r2
 8012716:	68ba      	ldr	r2, [r7, #8]
 8012718:	429a      	cmp	r2, r3
 801271a:	bf0c      	ite	eq
 801271c:	2301      	moveq	r3, #1
 801271e:	2300      	movne	r3, #0
 8012720:	b2db      	uxtb	r3, r3
 8012722:	461a      	mov	r2, r3
 8012724:	79fb      	ldrb	r3, [r7, #7]
 8012726:	429a      	cmp	r2, r3
 8012728:	f43f af4a 	beq.w	80125c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801272c:	2300      	movs	r3, #0
}
 801272e:	4618      	mov	r0, r3
 8012730:	3770      	adds	r7, #112	; 0x70
 8012732:	46bd      	mov	sp, r7
 8012734:	bd80      	pop	{r7, pc}
	...

08012738 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012738:	b480      	push	{r7}
 801273a:	b097      	sub	sp, #92	; 0x5c
 801273c:	af00      	add	r7, sp, #0
 801273e:	60f8      	str	r0, [r7, #12]
 8012740:	60b9      	str	r1, [r7, #8]
 8012742:	4613      	mov	r3, r2
 8012744:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	68ba      	ldr	r2, [r7, #8]
 801274a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	88fa      	ldrh	r2, [r7, #6]
 8012750:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	88fa      	ldrh	r2, [r7, #6]
 8012758:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	2200      	movs	r2, #0
 8012760:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	689b      	ldr	r3, [r3, #8]
 8012766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801276a:	d10e      	bne.n	801278a <UART_Start_Receive_IT+0x52>
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	691b      	ldr	r3, [r3, #16]
 8012770:	2b00      	cmp	r3, #0
 8012772:	d105      	bne.n	8012780 <UART_Start_Receive_IT+0x48>
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	f240 12ff 	movw	r2, #511	; 0x1ff
 801277a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801277e:	e02d      	b.n	80127dc <UART_Start_Receive_IT+0xa4>
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	22ff      	movs	r2, #255	; 0xff
 8012784:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8012788:	e028      	b.n	80127dc <UART_Start_Receive_IT+0xa4>
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	689b      	ldr	r3, [r3, #8]
 801278e:	2b00      	cmp	r3, #0
 8012790:	d10d      	bne.n	80127ae <UART_Start_Receive_IT+0x76>
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	691b      	ldr	r3, [r3, #16]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d104      	bne.n	80127a4 <UART_Start_Receive_IT+0x6c>
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	22ff      	movs	r2, #255	; 0xff
 801279e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80127a2:	e01b      	b.n	80127dc <UART_Start_Receive_IT+0xa4>
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	227f      	movs	r2, #127	; 0x7f
 80127a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80127ac:	e016      	b.n	80127dc <UART_Start_Receive_IT+0xa4>
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	689b      	ldr	r3, [r3, #8]
 80127b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80127b6:	d10d      	bne.n	80127d4 <UART_Start_Receive_IT+0x9c>
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	691b      	ldr	r3, [r3, #16]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d104      	bne.n	80127ca <UART_Start_Receive_IT+0x92>
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	227f      	movs	r2, #127	; 0x7f
 80127c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80127c8:	e008      	b.n	80127dc <UART_Start_Receive_IT+0xa4>
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	223f      	movs	r2, #63	; 0x3f
 80127ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80127d2:	e003      	b.n	80127dc <UART_Start_Receive_IT+0xa4>
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	2200      	movs	r2, #0
 80127d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	2200      	movs	r2, #0
 80127e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	2222      	movs	r2, #34	; 0x22
 80127e8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	3308      	adds	r3, #8
 80127f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127f4:	e853 3f00 	ldrex	r3, [r3]
 80127f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80127fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127fc:	f043 0301 	orr.w	r3, r3, #1
 8012800:	657b      	str	r3, [r7, #84]	; 0x54
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	3308      	adds	r3, #8
 8012808:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801280a:	64ba      	str	r2, [r7, #72]	; 0x48
 801280c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801280e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012810:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012812:	e841 2300 	strex	r3, r2, [r1]
 8012816:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8012818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801281a:	2b00      	cmp	r3, #0
 801281c:	d1e5      	bne.n	80127ea <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	689b      	ldr	r3, [r3, #8]
 8012822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012826:	d107      	bne.n	8012838 <UART_Start_Receive_IT+0x100>
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	691b      	ldr	r3, [r3, #16]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d103      	bne.n	8012838 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	4a24      	ldr	r2, [pc, #144]	; (80128c4 <UART_Start_Receive_IT+0x18c>)
 8012834:	665a      	str	r2, [r3, #100]	; 0x64
 8012836:	e002      	b.n	801283e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	4a23      	ldr	r2, [pc, #140]	; (80128c8 <UART_Start_Receive_IT+0x190>)
 801283c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	2200      	movs	r2, #0
 8012842:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	691b      	ldr	r3, [r3, #16]
 801284a:	2b00      	cmp	r3, #0
 801284c:	d019      	beq.n	8012882 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012856:	e853 3f00 	ldrex	r3, [r3]
 801285a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801285e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8012862:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	461a      	mov	r2, r3
 801286a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801286c:	637b      	str	r3, [r7, #52]	; 0x34
 801286e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012870:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012872:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012874:	e841 2300 	strex	r3, r2, [r1]
 8012878:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801287a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801287c:	2b00      	cmp	r3, #0
 801287e:	d1e6      	bne.n	801284e <UART_Start_Receive_IT+0x116>
 8012880:	e018      	b.n	80128b4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012888:	697b      	ldr	r3, [r7, #20]
 801288a:	e853 3f00 	ldrex	r3, [r3]
 801288e:	613b      	str	r3, [r7, #16]
   return(result);
 8012890:	693b      	ldr	r3, [r7, #16]
 8012892:	f043 0320 	orr.w	r3, r3, #32
 8012896:	653b      	str	r3, [r7, #80]	; 0x50
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	461a      	mov	r2, r3
 801289e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128a0:	623b      	str	r3, [r7, #32]
 80128a2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128a4:	69f9      	ldr	r1, [r7, #28]
 80128a6:	6a3a      	ldr	r2, [r7, #32]
 80128a8:	e841 2300 	strex	r3, r2, [r1]
 80128ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80128ae:	69bb      	ldr	r3, [r7, #24]
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d1e6      	bne.n	8012882 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80128b4:	2300      	movs	r3, #0
}
 80128b6:	4618      	mov	r0, r3
 80128b8:	375c      	adds	r7, #92	; 0x5c
 80128ba:	46bd      	mov	sp, r7
 80128bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c0:	4770      	bx	lr
 80128c2:	bf00      	nop
 80128c4:	08012ceb 	.word	0x08012ceb
 80128c8:	08012b8b 	.word	0x08012b8b

080128cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80128cc:	b480      	push	{r7}
 80128ce:	b095      	sub	sp, #84	; 0x54
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128dc:	e853 3f00 	ldrex	r3, [r3]
 80128e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80128e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80128e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	461a      	mov	r2, r3
 80128f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80128f2:	643b      	str	r3, [r7, #64]	; 0x40
 80128f4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80128f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80128fa:	e841 2300 	strex	r3, r2, [r1]
 80128fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012902:	2b00      	cmp	r3, #0
 8012904:	d1e6      	bne.n	80128d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	3308      	adds	r3, #8
 801290c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801290e:	6a3b      	ldr	r3, [r7, #32]
 8012910:	e853 3f00 	ldrex	r3, [r3]
 8012914:	61fb      	str	r3, [r7, #28]
   return(result);
 8012916:	69fb      	ldr	r3, [r7, #28]
 8012918:	f023 0301 	bic.w	r3, r3, #1
 801291c:	64bb      	str	r3, [r7, #72]	; 0x48
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	3308      	adds	r3, #8
 8012924:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012926:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012928:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801292a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801292c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801292e:	e841 2300 	strex	r3, r2, [r1]
 8012932:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012936:	2b00      	cmp	r3, #0
 8012938:	d1e5      	bne.n	8012906 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801293e:	2b01      	cmp	r3, #1
 8012940:	d118      	bne.n	8012974 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	e853 3f00 	ldrex	r3, [r3]
 801294e:	60bb      	str	r3, [r7, #8]
   return(result);
 8012950:	68bb      	ldr	r3, [r7, #8]
 8012952:	f023 0310 	bic.w	r3, r3, #16
 8012956:	647b      	str	r3, [r7, #68]	; 0x44
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	461a      	mov	r2, r3
 801295e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012960:	61bb      	str	r3, [r7, #24]
 8012962:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012964:	6979      	ldr	r1, [r7, #20]
 8012966:	69ba      	ldr	r2, [r7, #24]
 8012968:	e841 2300 	strex	r3, r2, [r1]
 801296c:	613b      	str	r3, [r7, #16]
   return(result);
 801296e:	693b      	ldr	r3, [r7, #16]
 8012970:	2b00      	cmp	r3, #0
 8012972:	d1e6      	bne.n	8012942 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	2220      	movs	r2, #32
 8012978:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	2200      	movs	r2, #0
 801297e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	2200      	movs	r2, #0
 8012984:	665a      	str	r2, [r3, #100]	; 0x64
}
 8012986:	bf00      	nop
 8012988:	3754      	adds	r7, #84	; 0x54
 801298a:	46bd      	mov	sp, r7
 801298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012990:	4770      	bx	lr

08012992 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012992:	b580      	push	{r7, lr}
 8012994:	b084      	sub	sp, #16
 8012996:	af00      	add	r7, sp, #0
 8012998:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801299e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	2200      	movs	r2, #0
 80129a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	2200      	movs	r2, #0
 80129ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80129b0:	68f8      	ldr	r0, [r7, #12]
 80129b2:	f7ff fa71 	bl	8011e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80129b6:	bf00      	nop
 80129b8:	3710      	adds	r7, #16
 80129ba:	46bd      	mov	sp, r7
 80129bc:	bd80      	pop	{r7, pc}

080129be <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80129be:	b480      	push	{r7}
 80129c0:	b08f      	sub	sp, #60	; 0x3c
 80129c2:	af00      	add	r7, sp, #0
 80129c4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80129ca:	2b21      	cmp	r3, #33	; 0x21
 80129cc:	d14d      	bne.n	8012a6a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80129d4:	b29b      	uxth	r3, r3
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d132      	bne.n	8012a40 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129e0:	6a3b      	ldr	r3, [r7, #32]
 80129e2:	e853 3f00 	ldrex	r3, [r3]
 80129e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80129e8:	69fb      	ldr	r3, [r7, #28]
 80129ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80129ee:	637b      	str	r3, [r7, #52]	; 0x34
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	461a      	mov	r2, r3
 80129f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80129fa:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80129fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a00:	e841 2300 	strex	r3, r2, [r1]
 8012a04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d1e6      	bne.n	80129da <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	e853 3f00 	ldrex	r3, [r3]
 8012a18:	60bb      	str	r3, [r7, #8]
   return(result);
 8012a1a:	68bb      	ldr	r3, [r7, #8]
 8012a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a20:	633b      	str	r3, [r7, #48]	; 0x30
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	461a      	mov	r2, r3
 8012a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a2a:	61bb      	str	r3, [r7, #24]
 8012a2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a2e:	6979      	ldr	r1, [r7, #20]
 8012a30:	69ba      	ldr	r2, [r7, #24]
 8012a32:	e841 2300 	strex	r3, r2, [r1]
 8012a36:	613b      	str	r3, [r7, #16]
   return(result);
 8012a38:	693b      	ldr	r3, [r7, #16]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d1e6      	bne.n	8012a0c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8012a3e:	e014      	b.n	8012a6a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012a44:	781a      	ldrb	r2, [r3, #0]
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	b292      	uxth	r2, r2
 8012a4c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012a52:	1c5a      	adds	r2, r3, #1
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8012a5e:	b29b      	uxth	r3, r3
 8012a60:	3b01      	subs	r3, #1
 8012a62:	b29a      	uxth	r2, r3
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8012a6a:	bf00      	nop
 8012a6c:	373c      	adds	r7, #60	; 0x3c
 8012a6e:	46bd      	mov	sp, r7
 8012a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a74:	4770      	bx	lr

08012a76 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012a76:	b480      	push	{r7}
 8012a78:	b091      	sub	sp, #68	; 0x44
 8012a7a:	af00      	add	r7, sp, #0
 8012a7c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012a82:	2b21      	cmp	r3, #33	; 0x21
 8012a84:	d151      	bne.n	8012b2a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8012a8c:	b29b      	uxth	r3, r3
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d132      	bne.n	8012af8 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a9a:	e853 3f00 	ldrex	r3, [r3]
 8012a9e:	623b      	str	r3, [r7, #32]
   return(result);
 8012aa0:	6a3b      	ldr	r3, [r7, #32]
 8012aa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012aa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	461a      	mov	r2, r3
 8012aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ab0:	633b      	str	r3, [r7, #48]	; 0x30
 8012ab2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ab4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012ab6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ab8:	e841 2300 	strex	r3, r2, [r1]
 8012abc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d1e6      	bne.n	8012a92 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012aca:	693b      	ldr	r3, [r7, #16]
 8012acc:	e853 3f00 	ldrex	r3, [r3]
 8012ad0:	60fb      	str	r3, [r7, #12]
   return(result);
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ad8:	637b      	str	r3, [r7, #52]	; 0x34
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	461a      	mov	r2, r3
 8012ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ae2:	61fb      	str	r3, [r7, #28]
 8012ae4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ae6:	69b9      	ldr	r1, [r7, #24]
 8012ae8:	69fa      	ldr	r2, [r7, #28]
 8012aea:	e841 2300 	strex	r3, r2, [r1]
 8012aee:	617b      	str	r3, [r7, #20]
   return(result);
 8012af0:	697b      	ldr	r3, [r7, #20]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d1e6      	bne.n	8012ac4 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8012af6:	e018      	b.n	8012b2a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012afc:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8012afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b00:	881a      	ldrh	r2, [r3, #0]
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012b0a:	b292      	uxth	r2, r2
 8012b0c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012b12:	1c9a      	adds	r2, r3, #2
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8012b1e:	b29b      	uxth	r3, r3
 8012b20:	3b01      	subs	r3, #1
 8012b22:	b29a      	uxth	r2, r3
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8012b2a:	bf00      	nop
 8012b2c:	3744      	adds	r7, #68	; 0x44
 8012b2e:	46bd      	mov	sp, r7
 8012b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b34:	4770      	bx	lr

08012b36 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012b36:	b580      	push	{r7, lr}
 8012b38:	b088      	sub	sp, #32
 8012b3a:	af00      	add	r7, sp, #0
 8012b3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	e853 3f00 	ldrex	r3, [r3]
 8012b4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8012b4c:	68bb      	ldr	r3, [r7, #8]
 8012b4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012b52:	61fb      	str	r3, [r7, #28]
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	461a      	mov	r2, r3
 8012b5a:	69fb      	ldr	r3, [r7, #28]
 8012b5c:	61bb      	str	r3, [r7, #24]
 8012b5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b60:	6979      	ldr	r1, [r7, #20]
 8012b62:	69ba      	ldr	r2, [r7, #24]
 8012b64:	e841 2300 	strex	r3, r2, [r1]
 8012b68:	613b      	str	r3, [r7, #16]
   return(result);
 8012b6a:	693b      	ldr	r3, [r7, #16]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d1e6      	bne.n	8012b3e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	2220      	movs	r2, #32
 8012b74:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	2200      	movs	r2, #0
 8012b7a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8012b7c:	6878      	ldr	r0, [r7, #4]
 8012b7e:	f7ff f981 	bl	8011e84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012b82:	bf00      	nop
 8012b84:	3720      	adds	r7, #32
 8012b86:	46bd      	mov	sp, r7
 8012b88:	bd80      	pop	{r7, pc}

08012b8a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8012b8a:	b580      	push	{r7, lr}
 8012b8c:	b096      	sub	sp, #88	; 0x58
 8012b8e:	af00      	add	r7, sp, #0
 8012b90:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012b98:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012ba0:	2b22      	cmp	r3, #34	; 0x22
 8012ba2:	f040 8094 	bne.w	8012cce <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012bac:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012bb0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8012bb4:	b2d9      	uxtb	r1, r3
 8012bb6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8012bba:	b2da      	uxtb	r2, r3
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012bc0:	400a      	ands	r2, r1
 8012bc2:	b2d2      	uxtb	r2, r2
 8012bc4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012bca:	1c5a      	adds	r2, r3, #1
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012bd6:	b29b      	uxth	r3, r3
 8012bd8:	3b01      	subs	r3, #1
 8012bda:	b29a      	uxth	r2, r3
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012be8:	b29b      	uxth	r3, r3
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d179      	bne.n	8012ce2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bf6:	e853 3f00 	ldrex	r3, [r3]
 8012bfa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bfe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012c02:	653b      	str	r3, [r7, #80]	; 0x50
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	461a      	mov	r2, r3
 8012c0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c0c:	647b      	str	r3, [r7, #68]	; 0x44
 8012c0e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012c12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012c14:	e841 2300 	strex	r3, r2, [r1]
 8012c18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d1e6      	bne.n	8012bee <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	3308      	adds	r3, #8
 8012c26:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c2a:	e853 3f00 	ldrex	r3, [r3]
 8012c2e:	623b      	str	r3, [r7, #32]
   return(result);
 8012c30:	6a3b      	ldr	r3, [r7, #32]
 8012c32:	f023 0301 	bic.w	r3, r3, #1
 8012c36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	3308      	adds	r3, #8
 8012c3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012c40:	633a      	str	r2, [r7, #48]	; 0x30
 8012c42:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c48:	e841 2300 	strex	r3, r2, [r1]
 8012c4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d1e5      	bne.n	8012c20 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	2220      	movs	r2, #32
 8012c58:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	2200      	movs	r2, #0
 8012c5e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012c64:	2b01      	cmp	r3, #1
 8012c66:	d12e      	bne.n	8012cc6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	2200      	movs	r2, #0
 8012c6c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c74:	693b      	ldr	r3, [r7, #16]
 8012c76:	e853 3f00 	ldrex	r3, [r3]
 8012c7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	f023 0310 	bic.w	r3, r3, #16
 8012c82:	64bb      	str	r3, [r7, #72]	; 0x48
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	461a      	mov	r2, r3
 8012c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c8c:	61fb      	str	r3, [r7, #28]
 8012c8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c90:	69b9      	ldr	r1, [r7, #24]
 8012c92:	69fa      	ldr	r2, [r7, #28]
 8012c94:	e841 2300 	strex	r3, r2, [r1]
 8012c98:	617b      	str	r3, [r7, #20]
   return(result);
 8012c9a:	697b      	ldr	r3, [r7, #20]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d1e6      	bne.n	8012c6e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	69db      	ldr	r3, [r3, #28]
 8012ca6:	f003 0310 	and.w	r3, r3, #16
 8012caa:	2b10      	cmp	r3, #16
 8012cac:	d103      	bne.n	8012cb6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	2210      	movs	r2, #16
 8012cb4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8012cbc:	4619      	mov	r1, r3
 8012cbe:	6878      	ldr	r0, [r7, #4]
 8012cc0:	f7ff f8f4 	bl	8011eac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012cc4:	e00d      	b.n	8012ce2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8012cc6:	6878      	ldr	r0, [r7, #4]
 8012cc8:	f7f4 f97a 	bl	8006fc0 <HAL_UART_RxCpltCallback>
}
 8012ccc:	e009      	b.n	8012ce2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	8b1b      	ldrh	r3, [r3, #24]
 8012cd4:	b29a      	uxth	r2, r3
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	f042 0208 	orr.w	r2, r2, #8
 8012cde:	b292      	uxth	r2, r2
 8012ce0:	831a      	strh	r2, [r3, #24]
}
 8012ce2:	bf00      	nop
 8012ce4:	3758      	adds	r7, #88	; 0x58
 8012ce6:	46bd      	mov	sp, r7
 8012ce8:	bd80      	pop	{r7, pc}

08012cea <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012cea:	b580      	push	{r7, lr}
 8012cec:	b096      	sub	sp, #88	; 0x58
 8012cee:	af00      	add	r7, sp, #0
 8012cf0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012cf8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012d00:	2b22      	cmp	r3, #34	; 0x22
 8012d02:	f040 8094 	bne.w	8012e2e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012d0c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012d14:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8012d16:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8012d1a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8012d1e:	4013      	ands	r3, r2
 8012d20:	b29a      	uxth	r2, r3
 8012d22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d24:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012d2a:	1c9a      	adds	r2, r3, #2
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012d36:	b29b      	uxth	r3, r3
 8012d38:	3b01      	subs	r3, #1
 8012d3a:	b29a      	uxth	r2, r3
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012d48:	b29b      	uxth	r3, r3
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d179      	bne.n	8012e42 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d56:	e853 3f00 	ldrex	r3, [r3]
 8012d5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012d62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	461a      	mov	r2, r3
 8012d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d6c:	643b      	str	r3, [r7, #64]	; 0x40
 8012d6e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012d72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012d74:	e841 2300 	strex	r3, r2, [r1]
 8012d78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d1e6      	bne.n	8012d4e <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	3308      	adds	r3, #8
 8012d86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d88:	6a3b      	ldr	r3, [r7, #32]
 8012d8a:	e853 3f00 	ldrex	r3, [r3]
 8012d8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8012d90:	69fb      	ldr	r3, [r7, #28]
 8012d92:	f023 0301 	bic.w	r3, r3, #1
 8012d96:	64bb      	str	r3, [r7, #72]	; 0x48
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	3308      	adds	r3, #8
 8012d9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012da0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012da2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012da4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012da6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012da8:	e841 2300 	strex	r3, r2, [r1]
 8012dac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d1e5      	bne.n	8012d80 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	2220      	movs	r2, #32
 8012db8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	2200      	movs	r2, #0
 8012dbe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012dc4:	2b01      	cmp	r3, #1
 8012dc6:	d12e      	bne.n	8012e26 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	2200      	movs	r2, #0
 8012dcc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	e853 3f00 	ldrex	r3, [r3]
 8012dda:	60bb      	str	r3, [r7, #8]
   return(result);
 8012ddc:	68bb      	ldr	r3, [r7, #8]
 8012dde:	f023 0310 	bic.w	r3, r3, #16
 8012de2:	647b      	str	r3, [r7, #68]	; 0x44
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	461a      	mov	r2, r3
 8012dea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012dec:	61bb      	str	r3, [r7, #24]
 8012dee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012df0:	6979      	ldr	r1, [r7, #20]
 8012df2:	69ba      	ldr	r2, [r7, #24]
 8012df4:	e841 2300 	strex	r3, r2, [r1]
 8012df8:	613b      	str	r3, [r7, #16]
   return(result);
 8012dfa:	693b      	ldr	r3, [r7, #16]
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d1e6      	bne.n	8012dce <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	69db      	ldr	r3, [r3, #28]
 8012e06:	f003 0310 	and.w	r3, r3, #16
 8012e0a:	2b10      	cmp	r3, #16
 8012e0c:	d103      	bne.n	8012e16 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	2210      	movs	r2, #16
 8012e14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8012e1c:	4619      	mov	r1, r3
 8012e1e:	6878      	ldr	r0, [r7, #4]
 8012e20:	f7ff f844 	bl	8011eac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012e24:	e00d      	b.n	8012e42 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8012e26:	6878      	ldr	r0, [r7, #4]
 8012e28:	f7f4 f8ca 	bl	8006fc0 <HAL_UART_RxCpltCallback>
}
 8012e2c:	e009      	b.n	8012e42 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	8b1b      	ldrh	r3, [r3, #24]
 8012e34:	b29a      	uxth	r2, r3
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	f042 0208 	orr.w	r2, r2, #8
 8012e3e:	b292      	uxth	r2, r2
 8012e40:	831a      	strh	r2, [r3, #24]
}
 8012e42:	bf00      	nop
 8012e44:	3758      	adds	r7, #88	; 0x58
 8012e46:	46bd      	mov	sp, r7
 8012e48:	bd80      	pop	{r7, pc}

08012e4a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012e4a:	b480      	push	{r7}
 8012e4c:	b083      	sub	sp, #12
 8012e4e:	af00      	add	r7, sp, #0
 8012e50:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012e52:	bf00      	nop
 8012e54:	370c      	adds	r7, #12
 8012e56:	46bd      	mov	sp, r7
 8012e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e5c:	4770      	bx	lr
	...

08012e60 <__errno>:
 8012e60:	4b01      	ldr	r3, [pc, #4]	; (8012e68 <__errno+0x8>)
 8012e62:	6818      	ldr	r0, [r3, #0]
 8012e64:	4770      	bx	lr
 8012e66:	bf00      	nop
 8012e68:	20000a7c 	.word	0x20000a7c

08012e6c <__libc_init_array>:
 8012e6c:	b570      	push	{r4, r5, r6, lr}
 8012e6e:	4d0d      	ldr	r5, [pc, #52]	; (8012ea4 <__libc_init_array+0x38>)
 8012e70:	4c0d      	ldr	r4, [pc, #52]	; (8012ea8 <__libc_init_array+0x3c>)
 8012e72:	1b64      	subs	r4, r4, r5
 8012e74:	10a4      	asrs	r4, r4, #2
 8012e76:	2600      	movs	r6, #0
 8012e78:	42a6      	cmp	r6, r4
 8012e7a:	d109      	bne.n	8012e90 <__libc_init_array+0x24>
 8012e7c:	4d0b      	ldr	r5, [pc, #44]	; (8012eac <__libc_init_array+0x40>)
 8012e7e:	4c0c      	ldr	r4, [pc, #48]	; (8012eb0 <__libc_init_array+0x44>)
 8012e80:	f002 ff6e 	bl	8015d60 <_init>
 8012e84:	1b64      	subs	r4, r4, r5
 8012e86:	10a4      	asrs	r4, r4, #2
 8012e88:	2600      	movs	r6, #0
 8012e8a:	42a6      	cmp	r6, r4
 8012e8c:	d105      	bne.n	8012e9a <__libc_init_array+0x2e>
 8012e8e:	bd70      	pop	{r4, r5, r6, pc}
 8012e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8012e94:	4798      	blx	r3
 8012e96:	3601      	adds	r6, #1
 8012e98:	e7ee      	b.n	8012e78 <__libc_init_array+0xc>
 8012e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8012e9e:	4798      	blx	r3
 8012ea0:	3601      	adds	r6, #1
 8012ea2:	e7f2      	b.n	8012e8a <__libc_init_array+0x1e>
 8012ea4:	08016ff4 	.word	0x08016ff4
 8012ea8:	08016ff4 	.word	0x08016ff4
 8012eac:	08016ff4 	.word	0x08016ff4
 8012eb0:	08016ff8 	.word	0x08016ff8

08012eb4 <memcmp>:
 8012eb4:	b530      	push	{r4, r5, lr}
 8012eb6:	3901      	subs	r1, #1
 8012eb8:	2400      	movs	r4, #0
 8012eba:	42a2      	cmp	r2, r4
 8012ebc:	d101      	bne.n	8012ec2 <memcmp+0xe>
 8012ebe:	2000      	movs	r0, #0
 8012ec0:	e005      	b.n	8012ece <memcmp+0x1a>
 8012ec2:	5d03      	ldrb	r3, [r0, r4]
 8012ec4:	3401      	adds	r4, #1
 8012ec6:	5d0d      	ldrb	r5, [r1, r4]
 8012ec8:	42ab      	cmp	r3, r5
 8012eca:	d0f6      	beq.n	8012eba <memcmp+0x6>
 8012ecc:	1b58      	subs	r0, r3, r5
 8012ece:	bd30      	pop	{r4, r5, pc}

08012ed0 <memcpy>:
 8012ed0:	440a      	add	r2, r1
 8012ed2:	4291      	cmp	r1, r2
 8012ed4:	f100 33ff 	add.w	r3, r0, #4294967295
 8012ed8:	d100      	bne.n	8012edc <memcpy+0xc>
 8012eda:	4770      	bx	lr
 8012edc:	b510      	push	{r4, lr}
 8012ede:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012ee2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012ee6:	4291      	cmp	r1, r2
 8012ee8:	d1f9      	bne.n	8012ede <memcpy+0xe>
 8012eea:	bd10      	pop	{r4, pc}

08012eec <memset>:
 8012eec:	4402      	add	r2, r0
 8012eee:	4603      	mov	r3, r0
 8012ef0:	4293      	cmp	r3, r2
 8012ef2:	d100      	bne.n	8012ef6 <memset+0xa>
 8012ef4:	4770      	bx	lr
 8012ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8012efa:	e7f9      	b.n	8012ef0 <memset+0x4>

08012efc <__cvt>:
 8012efc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012f00:	ec55 4b10 	vmov	r4, r5, d0
 8012f04:	2d00      	cmp	r5, #0
 8012f06:	460e      	mov	r6, r1
 8012f08:	4619      	mov	r1, r3
 8012f0a:	462b      	mov	r3, r5
 8012f0c:	bfbb      	ittet	lt
 8012f0e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012f12:	461d      	movlt	r5, r3
 8012f14:	2300      	movge	r3, #0
 8012f16:	232d      	movlt	r3, #45	; 0x2d
 8012f18:	700b      	strb	r3, [r1, #0]
 8012f1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012f1c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012f20:	4691      	mov	r9, r2
 8012f22:	f023 0820 	bic.w	r8, r3, #32
 8012f26:	bfbc      	itt	lt
 8012f28:	4622      	movlt	r2, r4
 8012f2a:	4614      	movlt	r4, r2
 8012f2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012f30:	d005      	beq.n	8012f3e <__cvt+0x42>
 8012f32:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012f36:	d100      	bne.n	8012f3a <__cvt+0x3e>
 8012f38:	3601      	adds	r6, #1
 8012f3a:	2102      	movs	r1, #2
 8012f3c:	e000      	b.n	8012f40 <__cvt+0x44>
 8012f3e:	2103      	movs	r1, #3
 8012f40:	ab03      	add	r3, sp, #12
 8012f42:	9301      	str	r3, [sp, #4]
 8012f44:	ab02      	add	r3, sp, #8
 8012f46:	9300      	str	r3, [sp, #0]
 8012f48:	ec45 4b10 	vmov	d0, r4, r5
 8012f4c:	4653      	mov	r3, sl
 8012f4e:	4632      	mov	r2, r6
 8012f50:	f000 fe56 	bl	8013c00 <_dtoa_r>
 8012f54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012f58:	4607      	mov	r7, r0
 8012f5a:	d102      	bne.n	8012f62 <__cvt+0x66>
 8012f5c:	f019 0f01 	tst.w	r9, #1
 8012f60:	d022      	beq.n	8012fa8 <__cvt+0xac>
 8012f62:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012f66:	eb07 0906 	add.w	r9, r7, r6
 8012f6a:	d110      	bne.n	8012f8e <__cvt+0x92>
 8012f6c:	783b      	ldrb	r3, [r7, #0]
 8012f6e:	2b30      	cmp	r3, #48	; 0x30
 8012f70:	d10a      	bne.n	8012f88 <__cvt+0x8c>
 8012f72:	2200      	movs	r2, #0
 8012f74:	2300      	movs	r3, #0
 8012f76:	4620      	mov	r0, r4
 8012f78:	4629      	mov	r1, r5
 8012f7a:	f7ed fda5 	bl	8000ac8 <__aeabi_dcmpeq>
 8012f7e:	b918      	cbnz	r0, 8012f88 <__cvt+0x8c>
 8012f80:	f1c6 0601 	rsb	r6, r6, #1
 8012f84:	f8ca 6000 	str.w	r6, [sl]
 8012f88:	f8da 3000 	ldr.w	r3, [sl]
 8012f8c:	4499      	add	r9, r3
 8012f8e:	2200      	movs	r2, #0
 8012f90:	2300      	movs	r3, #0
 8012f92:	4620      	mov	r0, r4
 8012f94:	4629      	mov	r1, r5
 8012f96:	f7ed fd97 	bl	8000ac8 <__aeabi_dcmpeq>
 8012f9a:	b108      	cbz	r0, 8012fa0 <__cvt+0xa4>
 8012f9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8012fa0:	2230      	movs	r2, #48	; 0x30
 8012fa2:	9b03      	ldr	r3, [sp, #12]
 8012fa4:	454b      	cmp	r3, r9
 8012fa6:	d307      	bcc.n	8012fb8 <__cvt+0xbc>
 8012fa8:	9b03      	ldr	r3, [sp, #12]
 8012faa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012fac:	1bdb      	subs	r3, r3, r7
 8012fae:	4638      	mov	r0, r7
 8012fb0:	6013      	str	r3, [r2, #0]
 8012fb2:	b004      	add	sp, #16
 8012fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fb8:	1c59      	adds	r1, r3, #1
 8012fba:	9103      	str	r1, [sp, #12]
 8012fbc:	701a      	strb	r2, [r3, #0]
 8012fbe:	e7f0      	b.n	8012fa2 <__cvt+0xa6>

08012fc0 <__exponent>:
 8012fc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	2900      	cmp	r1, #0
 8012fc6:	bfb8      	it	lt
 8012fc8:	4249      	neglt	r1, r1
 8012fca:	f803 2b02 	strb.w	r2, [r3], #2
 8012fce:	bfb4      	ite	lt
 8012fd0:	222d      	movlt	r2, #45	; 0x2d
 8012fd2:	222b      	movge	r2, #43	; 0x2b
 8012fd4:	2909      	cmp	r1, #9
 8012fd6:	7042      	strb	r2, [r0, #1]
 8012fd8:	dd2a      	ble.n	8013030 <__exponent+0x70>
 8012fda:	f10d 0407 	add.w	r4, sp, #7
 8012fde:	46a4      	mov	ip, r4
 8012fe0:	270a      	movs	r7, #10
 8012fe2:	46a6      	mov	lr, r4
 8012fe4:	460a      	mov	r2, r1
 8012fe6:	fb91 f6f7 	sdiv	r6, r1, r7
 8012fea:	fb07 1516 	mls	r5, r7, r6, r1
 8012fee:	3530      	adds	r5, #48	; 0x30
 8012ff0:	2a63      	cmp	r2, #99	; 0x63
 8012ff2:	f104 34ff 	add.w	r4, r4, #4294967295
 8012ff6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012ffa:	4631      	mov	r1, r6
 8012ffc:	dcf1      	bgt.n	8012fe2 <__exponent+0x22>
 8012ffe:	3130      	adds	r1, #48	; 0x30
 8013000:	f1ae 0502 	sub.w	r5, lr, #2
 8013004:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013008:	1c44      	adds	r4, r0, #1
 801300a:	4629      	mov	r1, r5
 801300c:	4561      	cmp	r1, ip
 801300e:	d30a      	bcc.n	8013026 <__exponent+0x66>
 8013010:	f10d 0209 	add.w	r2, sp, #9
 8013014:	eba2 020e 	sub.w	r2, r2, lr
 8013018:	4565      	cmp	r5, ip
 801301a:	bf88      	it	hi
 801301c:	2200      	movhi	r2, #0
 801301e:	4413      	add	r3, r2
 8013020:	1a18      	subs	r0, r3, r0
 8013022:	b003      	add	sp, #12
 8013024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013026:	f811 2b01 	ldrb.w	r2, [r1], #1
 801302a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801302e:	e7ed      	b.n	801300c <__exponent+0x4c>
 8013030:	2330      	movs	r3, #48	; 0x30
 8013032:	3130      	adds	r1, #48	; 0x30
 8013034:	7083      	strb	r3, [r0, #2]
 8013036:	70c1      	strb	r1, [r0, #3]
 8013038:	1d03      	adds	r3, r0, #4
 801303a:	e7f1      	b.n	8013020 <__exponent+0x60>

0801303c <_printf_float>:
 801303c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013040:	ed2d 8b02 	vpush	{d8}
 8013044:	b08d      	sub	sp, #52	; 0x34
 8013046:	460c      	mov	r4, r1
 8013048:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801304c:	4616      	mov	r6, r2
 801304e:	461f      	mov	r7, r3
 8013050:	4605      	mov	r5, r0
 8013052:	f001 fd79 	bl	8014b48 <_localeconv_r>
 8013056:	f8d0 a000 	ldr.w	sl, [r0]
 801305a:	4650      	mov	r0, sl
 801305c:	f7ed f8b8 	bl	80001d0 <strlen>
 8013060:	2300      	movs	r3, #0
 8013062:	930a      	str	r3, [sp, #40]	; 0x28
 8013064:	6823      	ldr	r3, [r4, #0]
 8013066:	9305      	str	r3, [sp, #20]
 8013068:	f8d8 3000 	ldr.w	r3, [r8]
 801306c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8013070:	3307      	adds	r3, #7
 8013072:	f023 0307 	bic.w	r3, r3, #7
 8013076:	f103 0208 	add.w	r2, r3, #8
 801307a:	f8c8 2000 	str.w	r2, [r8]
 801307e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013082:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013086:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801308a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801308e:	9307      	str	r3, [sp, #28]
 8013090:	f8cd 8018 	str.w	r8, [sp, #24]
 8013094:	ee08 0a10 	vmov	s16, r0
 8013098:	4b9f      	ldr	r3, [pc, #636]	; (8013318 <_printf_float+0x2dc>)
 801309a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801309e:	f04f 32ff 	mov.w	r2, #4294967295
 80130a2:	f7ed fd43 	bl	8000b2c <__aeabi_dcmpun>
 80130a6:	bb88      	cbnz	r0, 801310c <_printf_float+0xd0>
 80130a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80130ac:	4b9a      	ldr	r3, [pc, #616]	; (8013318 <_printf_float+0x2dc>)
 80130ae:	f04f 32ff 	mov.w	r2, #4294967295
 80130b2:	f7ed fd1d 	bl	8000af0 <__aeabi_dcmple>
 80130b6:	bb48      	cbnz	r0, 801310c <_printf_float+0xd0>
 80130b8:	2200      	movs	r2, #0
 80130ba:	2300      	movs	r3, #0
 80130bc:	4640      	mov	r0, r8
 80130be:	4649      	mov	r1, r9
 80130c0:	f7ed fd0c 	bl	8000adc <__aeabi_dcmplt>
 80130c4:	b110      	cbz	r0, 80130cc <_printf_float+0x90>
 80130c6:	232d      	movs	r3, #45	; 0x2d
 80130c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80130cc:	4b93      	ldr	r3, [pc, #588]	; (801331c <_printf_float+0x2e0>)
 80130ce:	4894      	ldr	r0, [pc, #592]	; (8013320 <_printf_float+0x2e4>)
 80130d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80130d4:	bf94      	ite	ls
 80130d6:	4698      	movls	r8, r3
 80130d8:	4680      	movhi	r8, r0
 80130da:	2303      	movs	r3, #3
 80130dc:	6123      	str	r3, [r4, #16]
 80130de:	9b05      	ldr	r3, [sp, #20]
 80130e0:	f023 0204 	bic.w	r2, r3, #4
 80130e4:	6022      	str	r2, [r4, #0]
 80130e6:	f04f 0900 	mov.w	r9, #0
 80130ea:	9700      	str	r7, [sp, #0]
 80130ec:	4633      	mov	r3, r6
 80130ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80130f0:	4621      	mov	r1, r4
 80130f2:	4628      	mov	r0, r5
 80130f4:	f000 f9d8 	bl	80134a8 <_printf_common>
 80130f8:	3001      	adds	r0, #1
 80130fa:	f040 8090 	bne.w	801321e <_printf_float+0x1e2>
 80130fe:	f04f 30ff 	mov.w	r0, #4294967295
 8013102:	b00d      	add	sp, #52	; 0x34
 8013104:	ecbd 8b02 	vpop	{d8}
 8013108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801310c:	4642      	mov	r2, r8
 801310e:	464b      	mov	r3, r9
 8013110:	4640      	mov	r0, r8
 8013112:	4649      	mov	r1, r9
 8013114:	f7ed fd0a 	bl	8000b2c <__aeabi_dcmpun>
 8013118:	b140      	cbz	r0, 801312c <_printf_float+0xf0>
 801311a:	464b      	mov	r3, r9
 801311c:	2b00      	cmp	r3, #0
 801311e:	bfbc      	itt	lt
 8013120:	232d      	movlt	r3, #45	; 0x2d
 8013122:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013126:	487f      	ldr	r0, [pc, #508]	; (8013324 <_printf_float+0x2e8>)
 8013128:	4b7f      	ldr	r3, [pc, #508]	; (8013328 <_printf_float+0x2ec>)
 801312a:	e7d1      	b.n	80130d0 <_printf_float+0x94>
 801312c:	6863      	ldr	r3, [r4, #4]
 801312e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8013132:	9206      	str	r2, [sp, #24]
 8013134:	1c5a      	adds	r2, r3, #1
 8013136:	d13f      	bne.n	80131b8 <_printf_float+0x17c>
 8013138:	2306      	movs	r3, #6
 801313a:	6063      	str	r3, [r4, #4]
 801313c:	9b05      	ldr	r3, [sp, #20]
 801313e:	6861      	ldr	r1, [r4, #4]
 8013140:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013144:	2300      	movs	r3, #0
 8013146:	9303      	str	r3, [sp, #12]
 8013148:	ab0a      	add	r3, sp, #40	; 0x28
 801314a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801314e:	ab09      	add	r3, sp, #36	; 0x24
 8013150:	ec49 8b10 	vmov	d0, r8, r9
 8013154:	9300      	str	r3, [sp, #0]
 8013156:	6022      	str	r2, [r4, #0]
 8013158:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801315c:	4628      	mov	r0, r5
 801315e:	f7ff fecd 	bl	8012efc <__cvt>
 8013162:	9b06      	ldr	r3, [sp, #24]
 8013164:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013166:	2b47      	cmp	r3, #71	; 0x47
 8013168:	4680      	mov	r8, r0
 801316a:	d108      	bne.n	801317e <_printf_float+0x142>
 801316c:	1cc8      	adds	r0, r1, #3
 801316e:	db02      	blt.n	8013176 <_printf_float+0x13a>
 8013170:	6863      	ldr	r3, [r4, #4]
 8013172:	4299      	cmp	r1, r3
 8013174:	dd41      	ble.n	80131fa <_printf_float+0x1be>
 8013176:	f1ab 0b02 	sub.w	fp, fp, #2
 801317a:	fa5f fb8b 	uxtb.w	fp, fp
 801317e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013182:	d820      	bhi.n	80131c6 <_printf_float+0x18a>
 8013184:	3901      	subs	r1, #1
 8013186:	465a      	mov	r2, fp
 8013188:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801318c:	9109      	str	r1, [sp, #36]	; 0x24
 801318e:	f7ff ff17 	bl	8012fc0 <__exponent>
 8013192:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013194:	1813      	adds	r3, r2, r0
 8013196:	2a01      	cmp	r2, #1
 8013198:	4681      	mov	r9, r0
 801319a:	6123      	str	r3, [r4, #16]
 801319c:	dc02      	bgt.n	80131a4 <_printf_float+0x168>
 801319e:	6822      	ldr	r2, [r4, #0]
 80131a0:	07d2      	lsls	r2, r2, #31
 80131a2:	d501      	bpl.n	80131a8 <_printf_float+0x16c>
 80131a4:	3301      	adds	r3, #1
 80131a6:	6123      	str	r3, [r4, #16]
 80131a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d09c      	beq.n	80130ea <_printf_float+0xae>
 80131b0:	232d      	movs	r3, #45	; 0x2d
 80131b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80131b6:	e798      	b.n	80130ea <_printf_float+0xae>
 80131b8:	9a06      	ldr	r2, [sp, #24]
 80131ba:	2a47      	cmp	r2, #71	; 0x47
 80131bc:	d1be      	bne.n	801313c <_printf_float+0x100>
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d1bc      	bne.n	801313c <_printf_float+0x100>
 80131c2:	2301      	movs	r3, #1
 80131c4:	e7b9      	b.n	801313a <_printf_float+0xfe>
 80131c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80131ca:	d118      	bne.n	80131fe <_printf_float+0x1c2>
 80131cc:	2900      	cmp	r1, #0
 80131ce:	6863      	ldr	r3, [r4, #4]
 80131d0:	dd0b      	ble.n	80131ea <_printf_float+0x1ae>
 80131d2:	6121      	str	r1, [r4, #16]
 80131d4:	b913      	cbnz	r3, 80131dc <_printf_float+0x1a0>
 80131d6:	6822      	ldr	r2, [r4, #0]
 80131d8:	07d0      	lsls	r0, r2, #31
 80131da:	d502      	bpl.n	80131e2 <_printf_float+0x1a6>
 80131dc:	3301      	adds	r3, #1
 80131de:	440b      	add	r3, r1
 80131e0:	6123      	str	r3, [r4, #16]
 80131e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80131e4:	f04f 0900 	mov.w	r9, #0
 80131e8:	e7de      	b.n	80131a8 <_printf_float+0x16c>
 80131ea:	b913      	cbnz	r3, 80131f2 <_printf_float+0x1b6>
 80131ec:	6822      	ldr	r2, [r4, #0]
 80131ee:	07d2      	lsls	r2, r2, #31
 80131f0:	d501      	bpl.n	80131f6 <_printf_float+0x1ba>
 80131f2:	3302      	adds	r3, #2
 80131f4:	e7f4      	b.n	80131e0 <_printf_float+0x1a4>
 80131f6:	2301      	movs	r3, #1
 80131f8:	e7f2      	b.n	80131e0 <_printf_float+0x1a4>
 80131fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80131fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013200:	4299      	cmp	r1, r3
 8013202:	db05      	blt.n	8013210 <_printf_float+0x1d4>
 8013204:	6823      	ldr	r3, [r4, #0]
 8013206:	6121      	str	r1, [r4, #16]
 8013208:	07d8      	lsls	r0, r3, #31
 801320a:	d5ea      	bpl.n	80131e2 <_printf_float+0x1a6>
 801320c:	1c4b      	adds	r3, r1, #1
 801320e:	e7e7      	b.n	80131e0 <_printf_float+0x1a4>
 8013210:	2900      	cmp	r1, #0
 8013212:	bfd4      	ite	le
 8013214:	f1c1 0202 	rsble	r2, r1, #2
 8013218:	2201      	movgt	r2, #1
 801321a:	4413      	add	r3, r2
 801321c:	e7e0      	b.n	80131e0 <_printf_float+0x1a4>
 801321e:	6823      	ldr	r3, [r4, #0]
 8013220:	055a      	lsls	r2, r3, #21
 8013222:	d407      	bmi.n	8013234 <_printf_float+0x1f8>
 8013224:	6923      	ldr	r3, [r4, #16]
 8013226:	4642      	mov	r2, r8
 8013228:	4631      	mov	r1, r6
 801322a:	4628      	mov	r0, r5
 801322c:	47b8      	blx	r7
 801322e:	3001      	adds	r0, #1
 8013230:	d12c      	bne.n	801328c <_printf_float+0x250>
 8013232:	e764      	b.n	80130fe <_printf_float+0xc2>
 8013234:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013238:	f240 80e0 	bls.w	80133fc <_printf_float+0x3c0>
 801323c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013240:	2200      	movs	r2, #0
 8013242:	2300      	movs	r3, #0
 8013244:	f7ed fc40 	bl	8000ac8 <__aeabi_dcmpeq>
 8013248:	2800      	cmp	r0, #0
 801324a:	d034      	beq.n	80132b6 <_printf_float+0x27a>
 801324c:	4a37      	ldr	r2, [pc, #220]	; (801332c <_printf_float+0x2f0>)
 801324e:	2301      	movs	r3, #1
 8013250:	4631      	mov	r1, r6
 8013252:	4628      	mov	r0, r5
 8013254:	47b8      	blx	r7
 8013256:	3001      	adds	r0, #1
 8013258:	f43f af51 	beq.w	80130fe <_printf_float+0xc2>
 801325c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013260:	429a      	cmp	r2, r3
 8013262:	db02      	blt.n	801326a <_printf_float+0x22e>
 8013264:	6823      	ldr	r3, [r4, #0]
 8013266:	07d8      	lsls	r0, r3, #31
 8013268:	d510      	bpl.n	801328c <_printf_float+0x250>
 801326a:	ee18 3a10 	vmov	r3, s16
 801326e:	4652      	mov	r2, sl
 8013270:	4631      	mov	r1, r6
 8013272:	4628      	mov	r0, r5
 8013274:	47b8      	blx	r7
 8013276:	3001      	adds	r0, #1
 8013278:	f43f af41 	beq.w	80130fe <_printf_float+0xc2>
 801327c:	f04f 0800 	mov.w	r8, #0
 8013280:	f104 091a 	add.w	r9, r4, #26
 8013284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013286:	3b01      	subs	r3, #1
 8013288:	4543      	cmp	r3, r8
 801328a:	dc09      	bgt.n	80132a0 <_printf_float+0x264>
 801328c:	6823      	ldr	r3, [r4, #0]
 801328e:	079b      	lsls	r3, r3, #30
 8013290:	f100 8105 	bmi.w	801349e <_printf_float+0x462>
 8013294:	68e0      	ldr	r0, [r4, #12]
 8013296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013298:	4298      	cmp	r0, r3
 801329a:	bfb8      	it	lt
 801329c:	4618      	movlt	r0, r3
 801329e:	e730      	b.n	8013102 <_printf_float+0xc6>
 80132a0:	2301      	movs	r3, #1
 80132a2:	464a      	mov	r2, r9
 80132a4:	4631      	mov	r1, r6
 80132a6:	4628      	mov	r0, r5
 80132a8:	47b8      	blx	r7
 80132aa:	3001      	adds	r0, #1
 80132ac:	f43f af27 	beq.w	80130fe <_printf_float+0xc2>
 80132b0:	f108 0801 	add.w	r8, r8, #1
 80132b4:	e7e6      	b.n	8013284 <_printf_float+0x248>
 80132b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	dc39      	bgt.n	8013330 <_printf_float+0x2f4>
 80132bc:	4a1b      	ldr	r2, [pc, #108]	; (801332c <_printf_float+0x2f0>)
 80132be:	2301      	movs	r3, #1
 80132c0:	4631      	mov	r1, r6
 80132c2:	4628      	mov	r0, r5
 80132c4:	47b8      	blx	r7
 80132c6:	3001      	adds	r0, #1
 80132c8:	f43f af19 	beq.w	80130fe <_printf_float+0xc2>
 80132cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80132d0:	4313      	orrs	r3, r2
 80132d2:	d102      	bne.n	80132da <_printf_float+0x29e>
 80132d4:	6823      	ldr	r3, [r4, #0]
 80132d6:	07d9      	lsls	r1, r3, #31
 80132d8:	d5d8      	bpl.n	801328c <_printf_float+0x250>
 80132da:	ee18 3a10 	vmov	r3, s16
 80132de:	4652      	mov	r2, sl
 80132e0:	4631      	mov	r1, r6
 80132e2:	4628      	mov	r0, r5
 80132e4:	47b8      	blx	r7
 80132e6:	3001      	adds	r0, #1
 80132e8:	f43f af09 	beq.w	80130fe <_printf_float+0xc2>
 80132ec:	f04f 0900 	mov.w	r9, #0
 80132f0:	f104 0a1a 	add.w	sl, r4, #26
 80132f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132f6:	425b      	negs	r3, r3
 80132f8:	454b      	cmp	r3, r9
 80132fa:	dc01      	bgt.n	8013300 <_printf_float+0x2c4>
 80132fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132fe:	e792      	b.n	8013226 <_printf_float+0x1ea>
 8013300:	2301      	movs	r3, #1
 8013302:	4652      	mov	r2, sl
 8013304:	4631      	mov	r1, r6
 8013306:	4628      	mov	r0, r5
 8013308:	47b8      	blx	r7
 801330a:	3001      	adds	r0, #1
 801330c:	f43f aef7 	beq.w	80130fe <_printf_float+0xc2>
 8013310:	f109 0901 	add.w	r9, r9, #1
 8013314:	e7ee      	b.n	80132f4 <_printf_float+0x2b8>
 8013316:	bf00      	nop
 8013318:	7fefffff 	.word	0x7fefffff
 801331c:	08016c0c 	.word	0x08016c0c
 8013320:	08016c10 	.word	0x08016c10
 8013324:	08016c18 	.word	0x08016c18
 8013328:	08016c14 	.word	0x08016c14
 801332c:	08016c1c 	.word	0x08016c1c
 8013330:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013332:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013334:	429a      	cmp	r2, r3
 8013336:	bfa8      	it	ge
 8013338:	461a      	movge	r2, r3
 801333a:	2a00      	cmp	r2, #0
 801333c:	4691      	mov	r9, r2
 801333e:	dc37      	bgt.n	80133b0 <_printf_float+0x374>
 8013340:	f04f 0b00 	mov.w	fp, #0
 8013344:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013348:	f104 021a 	add.w	r2, r4, #26
 801334c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801334e:	9305      	str	r3, [sp, #20]
 8013350:	eba3 0309 	sub.w	r3, r3, r9
 8013354:	455b      	cmp	r3, fp
 8013356:	dc33      	bgt.n	80133c0 <_printf_float+0x384>
 8013358:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801335c:	429a      	cmp	r2, r3
 801335e:	db3b      	blt.n	80133d8 <_printf_float+0x39c>
 8013360:	6823      	ldr	r3, [r4, #0]
 8013362:	07da      	lsls	r2, r3, #31
 8013364:	d438      	bmi.n	80133d8 <_printf_float+0x39c>
 8013366:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013368:	9b05      	ldr	r3, [sp, #20]
 801336a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801336c:	1ad3      	subs	r3, r2, r3
 801336e:	eba2 0901 	sub.w	r9, r2, r1
 8013372:	4599      	cmp	r9, r3
 8013374:	bfa8      	it	ge
 8013376:	4699      	movge	r9, r3
 8013378:	f1b9 0f00 	cmp.w	r9, #0
 801337c:	dc35      	bgt.n	80133ea <_printf_float+0x3ae>
 801337e:	f04f 0800 	mov.w	r8, #0
 8013382:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013386:	f104 0a1a 	add.w	sl, r4, #26
 801338a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801338e:	1a9b      	subs	r3, r3, r2
 8013390:	eba3 0309 	sub.w	r3, r3, r9
 8013394:	4543      	cmp	r3, r8
 8013396:	f77f af79 	ble.w	801328c <_printf_float+0x250>
 801339a:	2301      	movs	r3, #1
 801339c:	4652      	mov	r2, sl
 801339e:	4631      	mov	r1, r6
 80133a0:	4628      	mov	r0, r5
 80133a2:	47b8      	blx	r7
 80133a4:	3001      	adds	r0, #1
 80133a6:	f43f aeaa 	beq.w	80130fe <_printf_float+0xc2>
 80133aa:	f108 0801 	add.w	r8, r8, #1
 80133ae:	e7ec      	b.n	801338a <_printf_float+0x34e>
 80133b0:	4613      	mov	r3, r2
 80133b2:	4631      	mov	r1, r6
 80133b4:	4642      	mov	r2, r8
 80133b6:	4628      	mov	r0, r5
 80133b8:	47b8      	blx	r7
 80133ba:	3001      	adds	r0, #1
 80133bc:	d1c0      	bne.n	8013340 <_printf_float+0x304>
 80133be:	e69e      	b.n	80130fe <_printf_float+0xc2>
 80133c0:	2301      	movs	r3, #1
 80133c2:	4631      	mov	r1, r6
 80133c4:	4628      	mov	r0, r5
 80133c6:	9205      	str	r2, [sp, #20]
 80133c8:	47b8      	blx	r7
 80133ca:	3001      	adds	r0, #1
 80133cc:	f43f ae97 	beq.w	80130fe <_printf_float+0xc2>
 80133d0:	9a05      	ldr	r2, [sp, #20]
 80133d2:	f10b 0b01 	add.w	fp, fp, #1
 80133d6:	e7b9      	b.n	801334c <_printf_float+0x310>
 80133d8:	ee18 3a10 	vmov	r3, s16
 80133dc:	4652      	mov	r2, sl
 80133de:	4631      	mov	r1, r6
 80133e0:	4628      	mov	r0, r5
 80133e2:	47b8      	blx	r7
 80133e4:	3001      	adds	r0, #1
 80133e6:	d1be      	bne.n	8013366 <_printf_float+0x32a>
 80133e8:	e689      	b.n	80130fe <_printf_float+0xc2>
 80133ea:	9a05      	ldr	r2, [sp, #20]
 80133ec:	464b      	mov	r3, r9
 80133ee:	4442      	add	r2, r8
 80133f0:	4631      	mov	r1, r6
 80133f2:	4628      	mov	r0, r5
 80133f4:	47b8      	blx	r7
 80133f6:	3001      	adds	r0, #1
 80133f8:	d1c1      	bne.n	801337e <_printf_float+0x342>
 80133fa:	e680      	b.n	80130fe <_printf_float+0xc2>
 80133fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80133fe:	2a01      	cmp	r2, #1
 8013400:	dc01      	bgt.n	8013406 <_printf_float+0x3ca>
 8013402:	07db      	lsls	r3, r3, #31
 8013404:	d538      	bpl.n	8013478 <_printf_float+0x43c>
 8013406:	2301      	movs	r3, #1
 8013408:	4642      	mov	r2, r8
 801340a:	4631      	mov	r1, r6
 801340c:	4628      	mov	r0, r5
 801340e:	47b8      	blx	r7
 8013410:	3001      	adds	r0, #1
 8013412:	f43f ae74 	beq.w	80130fe <_printf_float+0xc2>
 8013416:	ee18 3a10 	vmov	r3, s16
 801341a:	4652      	mov	r2, sl
 801341c:	4631      	mov	r1, r6
 801341e:	4628      	mov	r0, r5
 8013420:	47b8      	blx	r7
 8013422:	3001      	adds	r0, #1
 8013424:	f43f ae6b 	beq.w	80130fe <_printf_float+0xc2>
 8013428:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801342c:	2200      	movs	r2, #0
 801342e:	2300      	movs	r3, #0
 8013430:	f7ed fb4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8013434:	b9d8      	cbnz	r0, 801346e <_printf_float+0x432>
 8013436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013438:	f108 0201 	add.w	r2, r8, #1
 801343c:	3b01      	subs	r3, #1
 801343e:	4631      	mov	r1, r6
 8013440:	4628      	mov	r0, r5
 8013442:	47b8      	blx	r7
 8013444:	3001      	adds	r0, #1
 8013446:	d10e      	bne.n	8013466 <_printf_float+0x42a>
 8013448:	e659      	b.n	80130fe <_printf_float+0xc2>
 801344a:	2301      	movs	r3, #1
 801344c:	4652      	mov	r2, sl
 801344e:	4631      	mov	r1, r6
 8013450:	4628      	mov	r0, r5
 8013452:	47b8      	blx	r7
 8013454:	3001      	adds	r0, #1
 8013456:	f43f ae52 	beq.w	80130fe <_printf_float+0xc2>
 801345a:	f108 0801 	add.w	r8, r8, #1
 801345e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013460:	3b01      	subs	r3, #1
 8013462:	4543      	cmp	r3, r8
 8013464:	dcf1      	bgt.n	801344a <_printf_float+0x40e>
 8013466:	464b      	mov	r3, r9
 8013468:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801346c:	e6dc      	b.n	8013228 <_printf_float+0x1ec>
 801346e:	f04f 0800 	mov.w	r8, #0
 8013472:	f104 0a1a 	add.w	sl, r4, #26
 8013476:	e7f2      	b.n	801345e <_printf_float+0x422>
 8013478:	2301      	movs	r3, #1
 801347a:	4642      	mov	r2, r8
 801347c:	e7df      	b.n	801343e <_printf_float+0x402>
 801347e:	2301      	movs	r3, #1
 8013480:	464a      	mov	r2, r9
 8013482:	4631      	mov	r1, r6
 8013484:	4628      	mov	r0, r5
 8013486:	47b8      	blx	r7
 8013488:	3001      	adds	r0, #1
 801348a:	f43f ae38 	beq.w	80130fe <_printf_float+0xc2>
 801348e:	f108 0801 	add.w	r8, r8, #1
 8013492:	68e3      	ldr	r3, [r4, #12]
 8013494:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013496:	1a5b      	subs	r3, r3, r1
 8013498:	4543      	cmp	r3, r8
 801349a:	dcf0      	bgt.n	801347e <_printf_float+0x442>
 801349c:	e6fa      	b.n	8013294 <_printf_float+0x258>
 801349e:	f04f 0800 	mov.w	r8, #0
 80134a2:	f104 0919 	add.w	r9, r4, #25
 80134a6:	e7f4      	b.n	8013492 <_printf_float+0x456>

080134a8 <_printf_common>:
 80134a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80134ac:	4616      	mov	r6, r2
 80134ae:	4699      	mov	r9, r3
 80134b0:	688a      	ldr	r2, [r1, #8]
 80134b2:	690b      	ldr	r3, [r1, #16]
 80134b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80134b8:	4293      	cmp	r3, r2
 80134ba:	bfb8      	it	lt
 80134bc:	4613      	movlt	r3, r2
 80134be:	6033      	str	r3, [r6, #0]
 80134c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80134c4:	4607      	mov	r7, r0
 80134c6:	460c      	mov	r4, r1
 80134c8:	b10a      	cbz	r2, 80134ce <_printf_common+0x26>
 80134ca:	3301      	adds	r3, #1
 80134cc:	6033      	str	r3, [r6, #0]
 80134ce:	6823      	ldr	r3, [r4, #0]
 80134d0:	0699      	lsls	r1, r3, #26
 80134d2:	bf42      	ittt	mi
 80134d4:	6833      	ldrmi	r3, [r6, #0]
 80134d6:	3302      	addmi	r3, #2
 80134d8:	6033      	strmi	r3, [r6, #0]
 80134da:	6825      	ldr	r5, [r4, #0]
 80134dc:	f015 0506 	ands.w	r5, r5, #6
 80134e0:	d106      	bne.n	80134f0 <_printf_common+0x48>
 80134e2:	f104 0a19 	add.w	sl, r4, #25
 80134e6:	68e3      	ldr	r3, [r4, #12]
 80134e8:	6832      	ldr	r2, [r6, #0]
 80134ea:	1a9b      	subs	r3, r3, r2
 80134ec:	42ab      	cmp	r3, r5
 80134ee:	dc26      	bgt.n	801353e <_printf_common+0x96>
 80134f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80134f4:	1e13      	subs	r3, r2, #0
 80134f6:	6822      	ldr	r2, [r4, #0]
 80134f8:	bf18      	it	ne
 80134fa:	2301      	movne	r3, #1
 80134fc:	0692      	lsls	r2, r2, #26
 80134fe:	d42b      	bmi.n	8013558 <_printf_common+0xb0>
 8013500:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013504:	4649      	mov	r1, r9
 8013506:	4638      	mov	r0, r7
 8013508:	47c0      	blx	r8
 801350a:	3001      	adds	r0, #1
 801350c:	d01e      	beq.n	801354c <_printf_common+0xa4>
 801350e:	6823      	ldr	r3, [r4, #0]
 8013510:	68e5      	ldr	r5, [r4, #12]
 8013512:	6832      	ldr	r2, [r6, #0]
 8013514:	f003 0306 	and.w	r3, r3, #6
 8013518:	2b04      	cmp	r3, #4
 801351a:	bf08      	it	eq
 801351c:	1aad      	subeq	r5, r5, r2
 801351e:	68a3      	ldr	r3, [r4, #8]
 8013520:	6922      	ldr	r2, [r4, #16]
 8013522:	bf0c      	ite	eq
 8013524:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013528:	2500      	movne	r5, #0
 801352a:	4293      	cmp	r3, r2
 801352c:	bfc4      	itt	gt
 801352e:	1a9b      	subgt	r3, r3, r2
 8013530:	18ed      	addgt	r5, r5, r3
 8013532:	2600      	movs	r6, #0
 8013534:	341a      	adds	r4, #26
 8013536:	42b5      	cmp	r5, r6
 8013538:	d11a      	bne.n	8013570 <_printf_common+0xc8>
 801353a:	2000      	movs	r0, #0
 801353c:	e008      	b.n	8013550 <_printf_common+0xa8>
 801353e:	2301      	movs	r3, #1
 8013540:	4652      	mov	r2, sl
 8013542:	4649      	mov	r1, r9
 8013544:	4638      	mov	r0, r7
 8013546:	47c0      	blx	r8
 8013548:	3001      	adds	r0, #1
 801354a:	d103      	bne.n	8013554 <_printf_common+0xac>
 801354c:	f04f 30ff 	mov.w	r0, #4294967295
 8013550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013554:	3501      	adds	r5, #1
 8013556:	e7c6      	b.n	80134e6 <_printf_common+0x3e>
 8013558:	18e1      	adds	r1, r4, r3
 801355a:	1c5a      	adds	r2, r3, #1
 801355c:	2030      	movs	r0, #48	; 0x30
 801355e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013562:	4422      	add	r2, r4
 8013564:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013568:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801356c:	3302      	adds	r3, #2
 801356e:	e7c7      	b.n	8013500 <_printf_common+0x58>
 8013570:	2301      	movs	r3, #1
 8013572:	4622      	mov	r2, r4
 8013574:	4649      	mov	r1, r9
 8013576:	4638      	mov	r0, r7
 8013578:	47c0      	blx	r8
 801357a:	3001      	adds	r0, #1
 801357c:	d0e6      	beq.n	801354c <_printf_common+0xa4>
 801357e:	3601      	adds	r6, #1
 8013580:	e7d9      	b.n	8013536 <_printf_common+0x8e>
	...

08013584 <_printf_i>:
 8013584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013588:	460c      	mov	r4, r1
 801358a:	4691      	mov	r9, r2
 801358c:	7e27      	ldrb	r7, [r4, #24]
 801358e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013590:	2f78      	cmp	r7, #120	; 0x78
 8013592:	4680      	mov	r8, r0
 8013594:	469a      	mov	sl, r3
 8013596:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801359a:	d807      	bhi.n	80135ac <_printf_i+0x28>
 801359c:	2f62      	cmp	r7, #98	; 0x62
 801359e:	d80a      	bhi.n	80135b6 <_printf_i+0x32>
 80135a0:	2f00      	cmp	r7, #0
 80135a2:	f000 80d8 	beq.w	8013756 <_printf_i+0x1d2>
 80135a6:	2f58      	cmp	r7, #88	; 0x58
 80135a8:	f000 80a3 	beq.w	80136f2 <_printf_i+0x16e>
 80135ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80135b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80135b4:	e03a      	b.n	801362c <_printf_i+0xa8>
 80135b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80135ba:	2b15      	cmp	r3, #21
 80135bc:	d8f6      	bhi.n	80135ac <_printf_i+0x28>
 80135be:	a001      	add	r0, pc, #4	; (adr r0, 80135c4 <_printf_i+0x40>)
 80135c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80135c4:	0801361d 	.word	0x0801361d
 80135c8:	08013631 	.word	0x08013631
 80135cc:	080135ad 	.word	0x080135ad
 80135d0:	080135ad 	.word	0x080135ad
 80135d4:	080135ad 	.word	0x080135ad
 80135d8:	080135ad 	.word	0x080135ad
 80135dc:	08013631 	.word	0x08013631
 80135e0:	080135ad 	.word	0x080135ad
 80135e4:	080135ad 	.word	0x080135ad
 80135e8:	080135ad 	.word	0x080135ad
 80135ec:	080135ad 	.word	0x080135ad
 80135f0:	0801373d 	.word	0x0801373d
 80135f4:	08013661 	.word	0x08013661
 80135f8:	0801371f 	.word	0x0801371f
 80135fc:	080135ad 	.word	0x080135ad
 8013600:	080135ad 	.word	0x080135ad
 8013604:	0801375f 	.word	0x0801375f
 8013608:	080135ad 	.word	0x080135ad
 801360c:	08013661 	.word	0x08013661
 8013610:	080135ad 	.word	0x080135ad
 8013614:	080135ad 	.word	0x080135ad
 8013618:	08013727 	.word	0x08013727
 801361c:	680b      	ldr	r3, [r1, #0]
 801361e:	1d1a      	adds	r2, r3, #4
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	600a      	str	r2, [r1, #0]
 8013624:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013628:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801362c:	2301      	movs	r3, #1
 801362e:	e0a3      	b.n	8013778 <_printf_i+0x1f4>
 8013630:	6825      	ldr	r5, [r4, #0]
 8013632:	6808      	ldr	r0, [r1, #0]
 8013634:	062e      	lsls	r6, r5, #24
 8013636:	f100 0304 	add.w	r3, r0, #4
 801363a:	d50a      	bpl.n	8013652 <_printf_i+0xce>
 801363c:	6805      	ldr	r5, [r0, #0]
 801363e:	600b      	str	r3, [r1, #0]
 8013640:	2d00      	cmp	r5, #0
 8013642:	da03      	bge.n	801364c <_printf_i+0xc8>
 8013644:	232d      	movs	r3, #45	; 0x2d
 8013646:	426d      	negs	r5, r5
 8013648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801364c:	485e      	ldr	r0, [pc, #376]	; (80137c8 <_printf_i+0x244>)
 801364e:	230a      	movs	r3, #10
 8013650:	e019      	b.n	8013686 <_printf_i+0x102>
 8013652:	f015 0f40 	tst.w	r5, #64	; 0x40
 8013656:	6805      	ldr	r5, [r0, #0]
 8013658:	600b      	str	r3, [r1, #0]
 801365a:	bf18      	it	ne
 801365c:	b22d      	sxthne	r5, r5
 801365e:	e7ef      	b.n	8013640 <_printf_i+0xbc>
 8013660:	680b      	ldr	r3, [r1, #0]
 8013662:	6825      	ldr	r5, [r4, #0]
 8013664:	1d18      	adds	r0, r3, #4
 8013666:	6008      	str	r0, [r1, #0]
 8013668:	0628      	lsls	r0, r5, #24
 801366a:	d501      	bpl.n	8013670 <_printf_i+0xec>
 801366c:	681d      	ldr	r5, [r3, #0]
 801366e:	e002      	b.n	8013676 <_printf_i+0xf2>
 8013670:	0669      	lsls	r1, r5, #25
 8013672:	d5fb      	bpl.n	801366c <_printf_i+0xe8>
 8013674:	881d      	ldrh	r5, [r3, #0]
 8013676:	4854      	ldr	r0, [pc, #336]	; (80137c8 <_printf_i+0x244>)
 8013678:	2f6f      	cmp	r7, #111	; 0x6f
 801367a:	bf0c      	ite	eq
 801367c:	2308      	moveq	r3, #8
 801367e:	230a      	movne	r3, #10
 8013680:	2100      	movs	r1, #0
 8013682:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013686:	6866      	ldr	r6, [r4, #4]
 8013688:	60a6      	str	r6, [r4, #8]
 801368a:	2e00      	cmp	r6, #0
 801368c:	bfa2      	ittt	ge
 801368e:	6821      	ldrge	r1, [r4, #0]
 8013690:	f021 0104 	bicge.w	r1, r1, #4
 8013694:	6021      	strge	r1, [r4, #0]
 8013696:	b90d      	cbnz	r5, 801369c <_printf_i+0x118>
 8013698:	2e00      	cmp	r6, #0
 801369a:	d04d      	beq.n	8013738 <_printf_i+0x1b4>
 801369c:	4616      	mov	r6, r2
 801369e:	fbb5 f1f3 	udiv	r1, r5, r3
 80136a2:	fb03 5711 	mls	r7, r3, r1, r5
 80136a6:	5dc7      	ldrb	r7, [r0, r7]
 80136a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80136ac:	462f      	mov	r7, r5
 80136ae:	42bb      	cmp	r3, r7
 80136b0:	460d      	mov	r5, r1
 80136b2:	d9f4      	bls.n	801369e <_printf_i+0x11a>
 80136b4:	2b08      	cmp	r3, #8
 80136b6:	d10b      	bne.n	80136d0 <_printf_i+0x14c>
 80136b8:	6823      	ldr	r3, [r4, #0]
 80136ba:	07df      	lsls	r7, r3, #31
 80136bc:	d508      	bpl.n	80136d0 <_printf_i+0x14c>
 80136be:	6923      	ldr	r3, [r4, #16]
 80136c0:	6861      	ldr	r1, [r4, #4]
 80136c2:	4299      	cmp	r1, r3
 80136c4:	bfde      	ittt	le
 80136c6:	2330      	movle	r3, #48	; 0x30
 80136c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80136cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80136d0:	1b92      	subs	r2, r2, r6
 80136d2:	6122      	str	r2, [r4, #16]
 80136d4:	f8cd a000 	str.w	sl, [sp]
 80136d8:	464b      	mov	r3, r9
 80136da:	aa03      	add	r2, sp, #12
 80136dc:	4621      	mov	r1, r4
 80136de:	4640      	mov	r0, r8
 80136e0:	f7ff fee2 	bl	80134a8 <_printf_common>
 80136e4:	3001      	adds	r0, #1
 80136e6:	d14c      	bne.n	8013782 <_printf_i+0x1fe>
 80136e8:	f04f 30ff 	mov.w	r0, #4294967295
 80136ec:	b004      	add	sp, #16
 80136ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136f2:	4835      	ldr	r0, [pc, #212]	; (80137c8 <_printf_i+0x244>)
 80136f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80136f8:	6823      	ldr	r3, [r4, #0]
 80136fa:	680e      	ldr	r6, [r1, #0]
 80136fc:	061f      	lsls	r7, r3, #24
 80136fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8013702:	600e      	str	r6, [r1, #0]
 8013704:	d514      	bpl.n	8013730 <_printf_i+0x1ac>
 8013706:	07d9      	lsls	r1, r3, #31
 8013708:	bf44      	itt	mi
 801370a:	f043 0320 	orrmi.w	r3, r3, #32
 801370e:	6023      	strmi	r3, [r4, #0]
 8013710:	b91d      	cbnz	r5, 801371a <_printf_i+0x196>
 8013712:	6823      	ldr	r3, [r4, #0]
 8013714:	f023 0320 	bic.w	r3, r3, #32
 8013718:	6023      	str	r3, [r4, #0]
 801371a:	2310      	movs	r3, #16
 801371c:	e7b0      	b.n	8013680 <_printf_i+0xfc>
 801371e:	6823      	ldr	r3, [r4, #0]
 8013720:	f043 0320 	orr.w	r3, r3, #32
 8013724:	6023      	str	r3, [r4, #0]
 8013726:	2378      	movs	r3, #120	; 0x78
 8013728:	4828      	ldr	r0, [pc, #160]	; (80137cc <_printf_i+0x248>)
 801372a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801372e:	e7e3      	b.n	80136f8 <_printf_i+0x174>
 8013730:	065e      	lsls	r6, r3, #25
 8013732:	bf48      	it	mi
 8013734:	b2ad      	uxthmi	r5, r5
 8013736:	e7e6      	b.n	8013706 <_printf_i+0x182>
 8013738:	4616      	mov	r6, r2
 801373a:	e7bb      	b.n	80136b4 <_printf_i+0x130>
 801373c:	680b      	ldr	r3, [r1, #0]
 801373e:	6826      	ldr	r6, [r4, #0]
 8013740:	6960      	ldr	r0, [r4, #20]
 8013742:	1d1d      	adds	r5, r3, #4
 8013744:	600d      	str	r5, [r1, #0]
 8013746:	0635      	lsls	r5, r6, #24
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	d501      	bpl.n	8013750 <_printf_i+0x1cc>
 801374c:	6018      	str	r0, [r3, #0]
 801374e:	e002      	b.n	8013756 <_printf_i+0x1d2>
 8013750:	0671      	lsls	r1, r6, #25
 8013752:	d5fb      	bpl.n	801374c <_printf_i+0x1c8>
 8013754:	8018      	strh	r0, [r3, #0]
 8013756:	2300      	movs	r3, #0
 8013758:	6123      	str	r3, [r4, #16]
 801375a:	4616      	mov	r6, r2
 801375c:	e7ba      	b.n	80136d4 <_printf_i+0x150>
 801375e:	680b      	ldr	r3, [r1, #0]
 8013760:	1d1a      	adds	r2, r3, #4
 8013762:	600a      	str	r2, [r1, #0]
 8013764:	681e      	ldr	r6, [r3, #0]
 8013766:	6862      	ldr	r2, [r4, #4]
 8013768:	2100      	movs	r1, #0
 801376a:	4630      	mov	r0, r6
 801376c:	f7ec fd38 	bl	80001e0 <memchr>
 8013770:	b108      	cbz	r0, 8013776 <_printf_i+0x1f2>
 8013772:	1b80      	subs	r0, r0, r6
 8013774:	6060      	str	r0, [r4, #4]
 8013776:	6863      	ldr	r3, [r4, #4]
 8013778:	6123      	str	r3, [r4, #16]
 801377a:	2300      	movs	r3, #0
 801377c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013780:	e7a8      	b.n	80136d4 <_printf_i+0x150>
 8013782:	6923      	ldr	r3, [r4, #16]
 8013784:	4632      	mov	r2, r6
 8013786:	4649      	mov	r1, r9
 8013788:	4640      	mov	r0, r8
 801378a:	47d0      	blx	sl
 801378c:	3001      	adds	r0, #1
 801378e:	d0ab      	beq.n	80136e8 <_printf_i+0x164>
 8013790:	6823      	ldr	r3, [r4, #0]
 8013792:	079b      	lsls	r3, r3, #30
 8013794:	d413      	bmi.n	80137be <_printf_i+0x23a>
 8013796:	68e0      	ldr	r0, [r4, #12]
 8013798:	9b03      	ldr	r3, [sp, #12]
 801379a:	4298      	cmp	r0, r3
 801379c:	bfb8      	it	lt
 801379e:	4618      	movlt	r0, r3
 80137a0:	e7a4      	b.n	80136ec <_printf_i+0x168>
 80137a2:	2301      	movs	r3, #1
 80137a4:	4632      	mov	r2, r6
 80137a6:	4649      	mov	r1, r9
 80137a8:	4640      	mov	r0, r8
 80137aa:	47d0      	blx	sl
 80137ac:	3001      	adds	r0, #1
 80137ae:	d09b      	beq.n	80136e8 <_printf_i+0x164>
 80137b0:	3501      	adds	r5, #1
 80137b2:	68e3      	ldr	r3, [r4, #12]
 80137b4:	9903      	ldr	r1, [sp, #12]
 80137b6:	1a5b      	subs	r3, r3, r1
 80137b8:	42ab      	cmp	r3, r5
 80137ba:	dcf2      	bgt.n	80137a2 <_printf_i+0x21e>
 80137bc:	e7eb      	b.n	8013796 <_printf_i+0x212>
 80137be:	2500      	movs	r5, #0
 80137c0:	f104 0619 	add.w	r6, r4, #25
 80137c4:	e7f5      	b.n	80137b2 <_printf_i+0x22e>
 80137c6:	bf00      	nop
 80137c8:	08016c1e 	.word	0x08016c1e
 80137cc:	08016c2f 	.word	0x08016c2f

080137d0 <iprintf>:
 80137d0:	b40f      	push	{r0, r1, r2, r3}
 80137d2:	4b0a      	ldr	r3, [pc, #40]	; (80137fc <iprintf+0x2c>)
 80137d4:	b513      	push	{r0, r1, r4, lr}
 80137d6:	681c      	ldr	r4, [r3, #0]
 80137d8:	b124      	cbz	r4, 80137e4 <iprintf+0x14>
 80137da:	69a3      	ldr	r3, [r4, #24]
 80137dc:	b913      	cbnz	r3, 80137e4 <iprintf+0x14>
 80137de:	4620      	mov	r0, r4
 80137e0:	f001 f914 	bl	8014a0c <__sinit>
 80137e4:	ab05      	add	r3, sp, #20
 80137e6:	9a04      	ldr	r2, [sp, #16]
 80137e8:	68a1      	ldr	r1, [r4, #8]
 80137ea:	9301      	str	r3, [sp, #4]
 80137ec:	4620      	mov	r0, r4
 80137ee:	f001 ffdd 	bl	80157ac <_vfiprintf_r>
 80137f2:	b002      	add	sp, #8
 80137f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80137f8:	b004      	add	sp, #16
 80137fa:	4770      	bx	lr
 80137fc:	20000a7c 	.word	0x20000a7c

08013800 <_puts_r>:
 8013800:	b570      	push	{r4, r5, r6, lr}
 8013802:	460e      	mov	r6, r1
 8013804:	4605      	mov	r5, r0
 8013806:	b118      	cbz	r0, 8013810 <_puts_r+0x10>
 8013808:	6983      	ldr	r3, [r0, #24]
 801380a:	b90b      	cbnz	r3, 8013810 <_puts_r+0x10>
 801380c:	f001 f8fe 	bl	8014a0c <__sinit>
 8013810:	69ab      	ldr	r3, [r5, #24]
 8013812:	68ac      	ldr	r4, [r5, #8]
 8013814:	b913      	cbnz	r3, 801381c <_puts_r+0x1c>
 8013816:	4628      	mov	r0, r5
 8013818:	f001 f8f8 	bl	8014a0c <__sinit>
 801381c:	4b2c      	ldr	r3, [pc, #176]	; (80138d0 <_puts_r+0xd0>)
 801381e:	429c      	cmp	r4, r3
 8013820:	d120      	bne.n	8013864 <_puts_r+0x64>
 8013822:	686c      	ldr	r4, [r5, #4]
 8013824:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013826:	07db      	lsls	r3, r3, #31
 8013828:	d405      	bmi.n	8013836 <_puts_r+0x36>
 801382a:	89a3      	ldrh	r3, [r4, #12]
 801382c:	0598      	lsls	r0, r3, #22
 801382e:	d402      	bmi.n	8013836 <_puts_r+0x36>
 8013830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013832:	f001 f98e 	bl	8014b52 <__retarget_lock_acquire_recursive>
 8013836:	89a3      	ldrh	r3, [r4, #12]
 8013838:	0719      	lsls	r1, r3, #28
 801383a:	d51d      	bpl.n	8013878 <_puts_r+0x78>
 801383c:	6923      	ldr	r3, [r4, #16]
 801383e:	b1db      	cbz	r3, 8013878 <_puts_r+0x78>
 8013840:	3e01      	subs	r6, #1
 8013842:	68a3      	ldr	r3, [r4, #8]
 8013844:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013848:	3b01      	subs	r3, #1
 801384a:	60a3      	str	r3, [r4, #8]
 801384c:	bb39      	cbnz	r1, 801389e <_puts_r+0x9e>
 801384e:	2b00      	cmp	r3, #0
 8013850:	da38      	bge.n	80138c4 <_puts_r+0xc4>
 8013852:	4622      	mov	r2, r4
 8013854:	210a      	movs	r1, #10
 8013856:	4628      	mov	r0, r5
 8013858:	f000 f884 	bl	8013964 <__swbuf_r>
 801385c:	3001      	adds	r0, #1
 801385e:	d011      	beq.n	8013884 <_puts_r+0x84>
 8013860:	250a      	movs	r5, #10
 8013862:	e011      	b.n	8013888 <_puts_r+0x88>
 8013864:	4b1b      	ldr	r3, [pc, #108]	; (80138d4 <_puts_r+0xd4>)
 8013866:	429c      	cmp	r4, r3
 8013868:	d101      	bne.n	801386e <_puts_r+0x6e>
 801386a:	68ac      	ldr	r4, [r5, #8]
 801386c:	e7da      	b.n	8013824 <_puts_r+0x24>
 801386e:	4b1a      	ldr	r3, [pc, #104]	; (80138d8 <_puts_r+0xd8>)
 8013870:	429c      	cmp	r4, r3
 8013872:	bf08      	it	eq
 8013874:	68ec      	ldreq	r4, [r5, #12]
 8013876:	e7d5      	b.n	8013824 <_puts_r+0x24>
 8013878:	4621      	mov	r1, r4
 801387a:	4628      	mov	r0, r5
 801387c:	f000 f8c4 	bl	8013a08 <__swsetup_r>
 8013880:	2800      	cmp	r0, #0
 8013882:	d0dd      	beq.n	8013840 <_puts_r+0x40>
 8013884:	f04f 35ff 	mov.w	r5, #4294967295
 8013888:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801388a:	07da      	lsls	r2, r3, #31
 801388c:	d405      	bmi.n	801389a <_puts_r+0x9a>
 801388e:	89a3      	ldrh	r3, [r4, #12]
 8013890:	059b      	lsls	r3, r3, #22
 8013892:	d402      	bmi.n	801389a <_puts_r+0x9a>
 8013894:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013896:	f001 f95d 	bl	8014b54 <__retarget_lock_release_recursive>
 801389a:	4628      	mov	r0, r5
 801389c:	bd70      	pop	{r4, r5, r6, pc}
 801389e:	2b00      	cmp	r3, #0
 80138a0:	da04      	bge.n	80138ac <_puts_r+0xac>
 80138a2:	69a2      	ldr	r2, [r4, #24]
 80138a4:	429a      	cmp	r2, r3
 80138a6:	dc06      	bgt.n	80138b6 <_puts_r+0xb6>
 80138a8:	290a      	cmp	r1, #10
 80138aa:	d004      	beq.n	80138b6 <_puts_r+0xb6>
 80138ac:	6823      	ldr	r3, [r4, #0]
 80138ae:	1c5a      	adds	r2, r3, #1
 80138b0:	6022      	str	r2, [r4, #0]
 80138b2:	7019      	strb	r1, [r3, #0]
 80138b4:	e7c5      	b.n	8013842 <_puts_r+0x42>
 80138b6:	4622      	mov	r2, r4
 80138b8:	4628      	mov	r0, r5
 80138ba:	f000 f853 	bl	8013964 <__swbuf_r>
 80138be:	3001      	adds	r0, #1
 80138c0:	d1bf      	bne.n	8013842 <_puts_r+0x42>
 80138c2:	e7df      	b.n	8013884 <_puts_r+0x84>
 80138c4:	6823      	ldr	r3, [r4, #0]
 80138c6:	250a      	movs	r5, #10
 80138c8:	1c5a      	adds	r2, r3, #1
 80138ca:	6022      	str	r2, [r4, #0]
 80138cc:	701d      	strb	r5, [r3, #0]
 80138ce:	e7db      	b.n	8013888 <_puts_r+0x88>
 80138d0:	08016cf4 	.word	0x08016cf4
 80138d4:	08016d14 	.word	0x08016d14
 80138d8:	08016cd4 	.word	0x08016cd4

080138dc <puts>:
 80138dc:	4b02      	ldr	r3, [pc, #8]	; (80138e8 <puts+0xc>)
 80138de:	4601      	mov	r1, r0
 80138e0:	6818      	ldr	r0, [r3, #0]
 80138e2:	f7ff bf8d 	b.w	8013800 <_puts_r>
 80138e6:	bf00      	nop
 80138e8:	20000a7c 	.word	0x20000a7c

080138ec <sniprintf>:
 80138ec:	b40c      	push	{r2, r3}
 80138ee:	b530      	push	{r4, r5, lr}
 80138f0:	4b17      	ldr	r3, [pc, #92]	; (8013950 <sniprintf+0x64>)
 80138f2:	1e0c      	subs	r4, r1, #0
 80138f4:	681d      	ldr	r5, [r3, #0]
 80138f6:	b09d      	sub	sp, #116	; 0x74
 80138f8:	da08      	bge.n	801390c <sniprintf+0x20>
 80138fa:	238b      	movs	r3, #139	; 0x8b
 80138fc:	602b      	str	r3, [r5, #0]
 80138fe:	f04f 30ff 	mov.w	r0, #4294967295
 8013902:	b01d      	add	sp, #116	; 0x74
 8013904:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013908:	b002      	add	sp, #8
 801390a:	4770      	bx	lr
 801390c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013910:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013914:	bf14      	ite	ne
 8013916:	f104 33ff 	addne.w	r3, r4, #4294967295
 801391a:	4623      	moveq	r3, r4
 801391c:	9304      	str	r3, [sp, #16]
 801391e:	9307      	str	r3, [sp, #28]
 8013920:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013924:	9002      	str	r0, [sp, #8]
 8013926:	9006      	str	r0, [sp, #24]
 8013928:	f8ad 3016 	strh.w	r3, [sp, #22]
 801392c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801392e:	ab21      	add	r3, sp, #132	; 0x84
 8013930:	a902      	add	r1, sp, #8
 8013932:	4628      	mov	r0, r5
 8013934:	9301      	str	r3, [sp, #4]
 8013936:	f001 fe0f 	bl	8015558 <_svfiprintf_r>
 801393a:	1c43      	adds	r3, r0, #1
 801393c:	bfbc      	itt	lt
 801393e:	238b      	movlt	r3, #139	; 0x8b
 8013940:	602b      	strlt	r3, [r5, #0]
 8013942:	2c00      	cmp	r4, #0
 8013944:	d0dd      	beq.n	8013902 <sniprintf+0x16>
 8013946:	9b02      	ldr	r3, [sp, #8]
 8013948:	2200      	movs	r2, #0
 801394a:	701a      	strb	r2, [r3, #0]
 801394c:	e7d9      	b.n	8013902 <sniprintf+0x16>
 801394e:	bf00      	nop
 8013950:	20000a7c 	.word	0x20000a7c

08013954 <strcpy>:
 8013954:	4603      	mov	r3, r0
 8013956:	f811 2b01 	ldrb.w	r2, [r1], #1
 801395a:	f803 2b01 	strb.w	r2, [r3], #1
 801395e:	2a00      	cmp	r2, #0
 8013960:	d1f9      	bne.n	8013956 <strcpy+0x2>
 8013962:	4770      	bx	lr

08013964 <__swbuf_r>:
 8013964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013966:	460e      	mov	r6, r1
 8013968:	4614      	mov	r4, r2
 801396a:	4605      	mov	r5, r0
 801396c:	b118      	cbz	r0, 8013976 <__swbuf_r+0x12>
 801396e:	6983      	ldr	r3, [r0, #24]
 8013970:	b90b      	cbnz	r3, 8013976 <__swbuf_r+0x12>
 8013972:	f001 f84b 	bl	8014a0c <__sinit>
 8013976:	4b21      	ldr	r3, [pc, #132]	; (80139fc <__swbuf_r+0x98>)
 8013978:	429c      	cmp	r4, r3
 801397a:	d12b      	bne.n	80139d4 <__swbuf_r+0x70>
 801397c:	686c      	ldr	r4, [r5, #4]
 801397e:	69a3      	ldr	r3, [r4, #24]
 8013980:	60a3      	str	r3, [r4, #8]
 8013982:	89a3      	ldrh	r3, [r4, #12]
 8013984:	071a      	lsls	r2, r3, #28
 8013986:	d52f      	bpl.n	80139e8 <__swbuf_r+0x84>
 8013988:	6923      	ldr	r3, [r4, #16]
 801398a:	b36b      	cbz	r3, 80139e8 <__swbuf_r+0x84>
 801398c:	6923      	ldr	r3, [r4, #16]
 801398e:	6820      	ldr	r0, [r4, #0]
 8013990:	1ac0      	subs	r0, r0, r3
 8013992:	6963      	ldr	r3, [r4, #20]
 8013994:	b2f6      	uxtb	r6, r6
 8013996:	4283      	cmp	r3, r0
 8013998:	4637      	mov	r7, r6
 801399a:	dc04      	bgt.n	80139a6 <__swbuf_r+0x42>
 801399c:	4621      	mov	r1, r4
 801399e:	4628      	mov	r0, r5
 80139a0:	f000 ffa0 	bl	80148e4 <_fflush_r>
 80139a4:	bb30      	cbnz	r0, 80139f4 <__swbuf_r+0x90>
 80139a6:	68a3      	ldr	r3, [r4, #8]
 80139a8:	3b01      	subs	r3, #1
 80139aa:	60a3      	str	r3, [r4, #8]
 80139ac:	6823      	ldr	r3, [r4, #0]
 80139ae:	1c5a      	adds	r2, r3, #1
 80139b0:	6022      	str	r2, [r4, #0]
 80139b2:	701e      	strb	r6, [r3, #0]
 80139b4:	6963      	ldr	r3, [r4, #20]
 80139b6:	3001      	adds	r0, #1
 80139b8:	4283      	cmp	r3, r0
 80139ba:	d004      	beq.n	80139c6 <__swbuf_r+0x62>
 80139bc:	89a3      	ldrh	r3, [r4, #12]
 80139be:	07db      	lsls	r3, r3, #31
 80139c0:	d506      	bpl.n	80139d0 <__swbuf_r+0x6c>
 80139c2:	2e0a      	cmp	r6, #10
 80139c4:	d104      	bne.n	80139d0 <__swbuf_r+0x6c>
 80139c6:	4621      	mov	r1, r4
 80139c8:	4628      	mov	r0, r5
 80139ca:	f000 ff8b 	bl	80148e4 <_fflush_r>
 80139ce:	b988      	cbnz	r0, 80139f4 <__swbuf_r+0x90>
 80139d0:	4638      	mov	r0, r7
 80139d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139d4:	4b0a      	ldr	r3, [pc, #40]	; (8013a00 <__swbuf_r+0x9c>)
 80139d6:	429c      	cmp	r4, r3
 80139d8:	d101      	bne.n	80139de <__swbuf_r+0x7a>
 80139da:	68ac      	ldr	r4, [r5, #8]
 80139dc:	e7cf      	b.n	801397e <__swbuf_r+0x1a>
 80139de:	4b09      	ldr	r3, [pc, #36]	; (8013a04 <__swbuf_r+0xa0>)
 80139e0:	429c      	cmp	r4, r3
 80139e2:	bf08      	it	eq
 80139e4:	68ec      	ldreq	r4, [r5, #12]
 80139e6:	e7ca      	b.n	801397e <__swbuf_r+0x1a>
 80139e8:	4621      	mov	r1, r4
 80139ea:	4628      	mov	r0, r5
 80139ec:	f000 f80c 	bl	8013a08 <__swsetup_r>
 80139f0:	2800      	cmp	r0, #0
 80139f2:	d0cb      	beq.n	801398c <__swbuf_r+0x28>
 80139f4:	f04f 37ff 	mov.w	r7, #4294967295
 80139f8:	e7ea      	b.n	80139d0 <__swbuf_r+0x6c>
 80139fa:	bf00      	nop
 80139fc:	08016cf4 	.word	0x08016cf4
 8013a00:	08016d14 	.word	0x08016d14
 8013a04:	08016cd4 	.word	0x08016cd4

08013a08 <__swsetup_r>:
 8013a08:	4b32      	ldr	r3, [pc, #200]	; (8013ad4 <__swsetup_r+0xcc>)
 8013a0a:	b570      	push	{r4, r5, r6, lr}
 8013a0c:	681d      	ldr	r5, [r3, #0]
 8013a0e:	4606      	mov	r6, r0
 8013a10:	460c      	mov	r4, r1
 8013a12:	b125      	cbz	r5, 8013a1e <__swsetup_r+0x16>
 8013a14:	69ab      	ldr	r3, [r5, #24]
 8013a16:	b913      	cbnz	r3, 8013a1e <__swsetup_r+0x16>
 8013a18:	4628      	mov	r0, r5
 8013a1a:	f000 fff7 	bl	8014a0c <__sinit>
 8013a1e:	4b2e      	ldr	r3, [pc, #184]	; (8013ad8 <__swsetup_r+0xd0>)
 8013a20:	429c      	cmp	r4, r3
 8013a22:	d10f      	bne.n	8013a44 <__swsetup_r+0x3c>
 8013a24:	686c      	ldr	r4, [r5, #4]
 8013a26:	89a3      	ldrh	r3, [r4, #12]
 8013a28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013a2c:	0719      	lsls	r1, r3, #28
 8013a2e:	d42c      	bmi.n	8013a8a <__swsetup_r+0x82>
 8013a30:	06dd      	lsls	r5, r3, #27
 8013a32:	d411      	bmi.n	8013a58 <__swsetup_r+0x50>
 8013a34:	2309      	movs	r3, #9
 8013a36:	6033      	str	r3, [r6, #0]
 8013a38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013a3c:	81a3      	strh	r3, [r4, #12]
 8013a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8013a42:	e03e      	b.n	8013ac2 <__swsetup_r+0xba>
 8013a44:	4b25      	ldr	r3, [pc, #148]	; (8013adc <__swsetup_r+0xd4>)
 8013a46:	429c      	cmp	r4, r3
 8013a48:	d101      	bne.n	8013a4e <__swsetup_r+0x46>
 8013a4a:	68ac      	ldr	r4, [r5, #8]
 8013a4c:	e7eb      	b.n	8013a26 <__swsetup_r+0x1e>
 8013a4e:	4b24      	ldr	r3, [pc, #144]	; (8013ae0 <__swsetup_r+0xd8>)
 8013a50:	429c      	cmp	r4, r3
 8013a52:	bf08      	it	eq
 8013a54:	68ec      	ldreq	r4, [r5, #12]
 8013a56:	e7e6      	b.n	8013a26 <__swsetup_r+0x1e>
 8013a58:	0758      	lsls	r0, r3, #29
 8013a5a:	d512      	bpl.n	8013a82 <__swsetup_r+0x7a>
 8013a5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013a5e:	b141      	cbz	r1, 8013a72 <__swsetup_r+0x6a>
 8013a60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013a64:	4299      	cmp	r1, r3
 8013a66:	d002      	beq.n	8013a6e <__swsetup_r+0x66>
 8013a68:	4630      	mov	r0, r6
 8013a6a:	f001 fc6f 	bl	801534c <_free_r>
 8013a6e:	2300      	movs	r3, #0
 8013a70:	6363      	str	r3, [r4, #52]	; 0x34
 8013a72:	89a3      	ldrh	r3, [r4, #12]
 8013a74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013a78:	81a3      	strh	r3, [r4, #12]
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	6063      	str	r3, [r4, #4]
 8013a7e:	6923      	ldr	r3, [r4, #16]
 8013a80:	6023      	str	r3, [r4, #0]
 8013a82:	89a3      	ldrh	r3, [r4, #12]
 8013a84:	f043 0308 	orr.w	r3, r3, #8
 8013a88:	81a3      	strh	r3, [r4, #12]
 8013a8a:	6923      	ldr	r3, [r4, #16]
 8013a8c:	b94b      	cbnz	r3, 8013aa2 <__swsetup_r+0x9a>
 8013a8e:	89a3      	ldrh	r3, [r4, #12]
 8013a90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013a98:	d003      	beq.n	8013aa2 <__swsetup_r+0x9a>
 8013a9a:	4621      	mov	r1, r4
 8013a9c:	4630      	mov	r0, r6
 8013a9e:	f001 f87f 	bl	8014ba0 <__smakebuf_r>
 8013aa2:	89a0      	ldrh	r0, [r4, #12]
 8013aa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013aa8:	f010 0301 	ands.w	r3, r0, #1
 8013aac:	d00a      	beq.n	8013ac4 <__swsetup_r+0xbc>
 8013aae:	2300      	movs	r3, #0
 8013ab0:	60a3      	str	r3, [r4, #8]
 8013ab2:	6963      	ldr	r3, [r4, #20]
 8013ab4:	425b      	negs	r3, r3
 8013ab6:	61a3      	str	r3, [r4, #24]
 8013ab8:	6923      	ldr	r3, [r4, #16]
 8013aba:	b943      	cbnz	r3, 8013ace <__swsetup_r+0xc6>
 8013abc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013ac0:	d1ba      	bne.n	8013a38 <__swsetup_r+0x30>
 8013ac2:	bd70      	pop	{r4, r5, r6, pc}
 8013ac4:	0781      	lsls	r1, r0, #30
 8013ac6:	bf58      	it	pl
 8013ac8:	6963      	ldrpl	r3, [r4, #20]
 8013aca:	60a3      	str	r3, [r4, #8]
 8013acc:	e7f4      	b.n	8013ab8 <__swsetup_r+0xb0>
 8013ace:	2000      	movs	r0, #0
 8013ad0:	e7f7      	b.n	8013ac2 <__swsetup_r+0xba>
 8013ad2:	bf00      	nop
 8013ad4:	20000a7c 	.word	0x20000a7c
 8013ad8:	08016cf4 	.word	0x08016cf4
 8013adc:	08016d14 	.word	0x08016d14
 8013ae0:	08016cd4 	.word	0x08016cd4

08013ae4 <quorem>:
 8013ae4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ae8:	6903      	ldr	r3, [r0, #16]
 8013aea:	690c      	ldr	r4, [r1, #16]
 8013aec:	42a3      	cmp	r3, r4
 8013aee:	4607      	mov	r7, r0
 8013af0:	f2c0 8081 	blt.w	8013bf6 <quorem+0x112>
 8013af4:	3c01      	subs	r4, #1
 8013af6:	f101 0814 	add.w	r8, r1, #20
 8013afa:	f100 0514 	add.w	r5, r0, #20
 8013afe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013b02:	9301      	str	r3, [sp, #4]
 8013b04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013b08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013b0c:	3301      	adds	r3, #1
 8013b0e:	429a      	cmp	r2, r3
 8013b10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013b14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013b18:	fbb2 f6f3 	udiv	r6, r2, r3
 8013b1c:	d331      	bcc.n	8013b82 <quorem+0x9e>
 8013b1e:	f04f 0e00 	mov.w	lr, #0
 8013b22:	4640      	mov	r0, r8
 8013b24:	46ac      	mov	ip, r5
 8013b26:	46f2      	mov	sl, lr
 8013b28:	f850 2b04 	ldr.w	r2, [r0], #4
 8013b2c:	b293      	uxth	r3, r2
 8013b2e:	fb06 e303 	mla	r3, r6, r3, lr
 8013b32:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013b36:	b29b      	uxth	r3, r3
 8013b38:	ebaa 0303 	sub.w	r3, sl, r3
 8013b3c:	0c12      	lsrs	r2, r2, #16
 8013b3e:	f8dc a000 	ldr.w	sl, [ip]
 8013b42:	fb06 e202 	mla	r2, r6, r2, lr
 8013b46:	fa13 f38a 	uxtah	r3, r3, sl
 8013b4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013b4e:	fa1f fa82 	uxth.w	sl, r2
 8013b52:	f8dc 2000 	ldr.w	r2, [ip]
 8013b56:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8013b5a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013b5e:	b29b      	uxth	r3, r3
 8013b60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013b64:	4581      	cmp	r9, r0
 8013b66:	f84c 3b04 	str.w	r3, [ip], #4
 8013b6a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013b6e:	d2db      	bcs.n	8013b28 <quorem+0x44>
 8013b70:	f855 300b 	ldr.w	r3, [r5, fp]
 8013b74:	b92b      	cbnz	r3, 8013b82 <quorem+0x9e>
 8013b76:	9b01      	ldr	r3, [sp, #4]
 8013b78:	3b04      	subs	r3, #4
 8013b7a:	429d      	cmp	r5, r3
 8013b7c:	461a      	mov	r2, r3
 8013b7e:	d32e      	bcc.n	8013bde <quorem+0xfa>
 8013b80:	613c      	str	r4, [r7, #16]
 8013b82:	4638      	mov	r0, r7
 8013b84:	f001 fad2 	bl	801512c <__mcmp>
 8013b88:	2800      	cmp	r0, #0
 8013b8a:	db24      	blt.n	8013bd6 <quorem+0xf2>
 8013b8c:	3601      	adds	r6, #1
 8013b8e:	4628      	mov	r0, r5
 8013b90:	f04f 0c00 	mov.w	ip, #0
 8013b94:	f858 2b04 	ldr.w	r2, [r8], #4
 8013b98:	f8d0 e000 	ldr.w	lr, [r0]
 8013b9c:	b293      	uxth	r3, r2
 8013b9e:	ebac 0303 	sub.w	r3, ip, r3
 8013ba2:	0c12      	lsrs	r2, r2, #16
 8013ba4:	fa13 f38e 	uxtah	r3, r3, lr
 8013ba8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013bac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013bb0:	b29b      	uxth	r3, r3
 8013bb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013bb6:	45c1      	cmp	r9, r8
 8013bb8:	f840 3b04 	str.w	r3, [r0], #4
 8013bbc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013bc0:	d2e8      	bcs.n	8013b94 <quorem+0xb0>
 8013bc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013bc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013bca:	b922      	cbnz	r2, 8013bd6 <quorem+0xf2>
 8013bcc:	3b04      	subs	r3, #4
 8013bce:	429d      	cmp	r5, r3
 8013bd0:	461a      	mov	r2, r3
 8013bd2:	d30a      	bcc.n	8013bea <quorem+0x106>
 8013bd4:	613c      	str	r4, [r7, #16]
 8013bd6:	4630      	mov	r0, r6
 8013bd8:	b003      	add	sp, #12
 8013bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bde:	6812      	ldr	r2, [r2, #0]
 8013be0:	3b04      	subs	r3, #4
 8013be2:	2a00      	cmp	r2, #0
 8013be4:	d1cc      	bne.n	8013b80 <quorem+0x9c>
 8013be6:	3c01      	subs	r4, #1
 8013be8:	e7c7      	b.n	8013b7a <quorem+0x96>
 8013bea:	6812      	ldr	r2, [r2, #0]
 8013bec:	3b04      	subs	r3, #4
 8013bee:	2a00      	cmp	r2, #0
 8013bf0:	d1f0      	bne.n	8013bd4 <quorem+0xf0>
 8013bf2:	3c01      	subs	r4, #1
 8013bf4:	e7eb      	b.n	8013bce <quorem+0xea>
 8013bf6:	2000      	movs	r0, #0
 8013bf8:	e7ee      	b.n	8013bd8 <quorem+0xf4>
 8013bfa:	0000      	movs	r0, r0
 8013bfc:	0000      	movs	r0, r0
	...

08013c00 <_dtoa_r>:
 8013c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c04:	ed2d 8b02 	vpush	{d8}
 8013c08:	ec57 6b10 	vmov	r6, r7, d0
 8013c0c:	b095      	sub	sp, #84	; 0x54
 8013c0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013c10:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013c14:	9105      	str	r1, [sp, #20]
 8013c16:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8013c1a:	4604      	mov	r4, r0
 8013c1c:	9209      	str	r2, [sp, #36]	; 0x24
 8013c1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013c20:	b975      	cbnz	r5, 8013c40 <_dtoa_r+0x40>
 8013c22:	2010      	movs	r0, #16
 8013c24:	f000 fffc 	bl	8014c20 <malloc>
 8013c28:	4602      	mov	r2, r0
 8013c2a:	6260      	str	r0, [r4, #36]	; 0x24
 8013c2c:	b920      	cbnz	r0, 8013c38 <_dtoa_r+0x38>
 8013c2e:	4bb2      	ldr	r3, [pc, #712]	; (8013ef8 <_dtoa_r+0x2f8>)
 8013c30:	21ea      	movs	r1, #234	; 0xea
 8013c32:	48b2      	ldr	r0, [pc, #712]	; (8013efc <_dtoa_r+0x2fc>)
 8013c34:	f001 ff50 	bl	8015ad8 <__assert_func>
 8013c38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013c3c:	6005      	str	r5, [r0, #0]
 8013c3e:	60c5      	str	r5, [r0, #12]
 8013c40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013c42:	6819      	ldr	r1, [r3, #0]
 8013c44:	b151      	cbz	r1, 8013c5c <_dtoa_r+0x5c>
 8013c46:	685a      	ldr	r2, [r3, #4]
 8013c48:	604a      	str	r2, [r1, #4]
 8013c4a:	2301      	movs	r3, #1
 8013c4c:	4093      	lsls	r3, r2
 8013c4e:	608b      	str	r3, [r1, #8]
 8013c50:	4620      	mov	r0, r4
 8013c52:	f001 f82d 	bl	8014cb0 <_Bfree>
 8013c56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013c58:	2200      	movs	r2, #0
 8013c5a:	601a      	str	r2, [r3, #0]
 8013c5c:	1e3b      	subs	r3, r7, #0
 8013c5e:	bfb9      	ittee	lt
 8013c60:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013c64:	9303      	strlt	r3, [sp, #12]
 8013c66:	2300      	movge	r3, #0
 8013c68:	f8c8 3000 	strge.w	r3, [r8]
 8013c6c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8013c70:	4ba3      	ldr	r3, [pc, #652]	; (8013f00 <_dtoa_r+0x300>)
 8013c72:	bfbc      	itt	lt
 8013c74:	2201      	movlt	r2, #1
 8013c76:	f8c8 2000 	strlt.w	r2, [r8]
 8013c7a:	ea33 0309 	bics.w	r3, r3, r9
 8013c7e:	d11b      	bne.n	8013cb8 <_dtoa_r+0xb8>
 8013c80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013c82:	f242 730f 	movw	r3, #9999	; 0x270f
 8013c86:	6013      	str	r3, [r2, #0]
 8013c88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013c8c:	4333      	orrs	r3, r6
 8013c8e:	f000 857a 	beq.w	8014786 <_dtoa_r+0xb86>
 8013c92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013c94:	b963      	cbnz	r3, 8013cb0 <_dtoa_r+0xb0>
 8013c96:	4b9b      	ldr	r3, [pc, #620]	; (8013f04 <_dtoa_r+0x304>)
 8013c98:	e024      	b.n	8013ce4 <_dtoa_r+0xe4>
 8013c9a:	4b9b      	ldr	r3, [pc, #620]	; (8013f08 <_dtoa_r+0x308>)
 8013c9c:	9300      	str	r3, [sp, #0]
 8013c9e:	3308      	adds	r3, #8
 8013ca0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013ca2:	6013      	str	r3, [r2, #0]
 8013ca4:	9800      	ldr	r0, [sp, #0]
 8013ca6:	b015      	add	sp, #84	; 0x54
 8013ca8:	ecbd 8b02 	vpop	{d8}
 8013cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cb0:	4b94      	ldr	r3, [pc, #592]	; (8013f04 <_dtoa_r+0x304>)
 8013cb2:	9300      	str	r3, [sp, #0]
 8013cb4:	3303      	adds	r3, #3
 8013cb6:	e7f3      	b.n	8013ca0 <_dtoa_r+0xa0>
 8013cb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013cbc:	2200      	movs	r2, #0
 8013cbe:	ec51 0b17 	vmov	r0, r1, d7
 8013cc2:	2300      	movs	r3, #0
 8013cc4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8013cc8:	f7ec fefe 	bl	8000ac8 <__aeabi_dcmpeq>
 8013ccc:	4680      	mov	r8, r0
 8013cce:	b158      	cbz	r0, 8013ce8 <_dtoa_r+0xe8>
 8013cd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013cd2:	2301      	movs	r3, #1
 8013cd4:	6013      	str	r3, [r2, #0]
 8013cd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	f000 8551 	beq.w	8014780 <_dtoa_r+0xb80>
 8013cde:	488b      	ldr	r0, [pc, #556]	; (8013f0c <_dtoa_r+0x30c>)
 8013ce0:	6018      	str	r0, [r3, #0]
 8013ce2:	1e43      	subs	r3, r0, #1
 8013ce4:	9300      	str	r3, [sp, #0]
 8013ce6:	e7dd      	b.n	8013ca4 <_dtoa_r+0xa4>
 8013ce8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8013cec:	aa12      	add	r2, sp, #72	; 0x48
 8013cee:	a913      	add	r1, sp, #76	; 0x4c
 8013cf0:	4620      	mov	r0, r4
 8013cf2:	f001 fabf 	bl	8015274 <__d2b>
 8013cf6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013cfa:	4683      	mov	fp, r0
 8013cfc:	2d00      	cmp	r5, #0
 8013cfe:	d07c      	beq.n	8013dfa <_dtoa_r+0x1fa>
 8013d00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d02:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8013d06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013d0a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8013d0e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8013d12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8013d16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013d1a:	4b7d      	ldr	r3, [pc, #500]	; (8013f10 <_dtoa_r+0x310>)
 8013d1c:	2200      	movs	r2, #0
 8013d1e:	4630      	mov	r0, r6
 8013d20:	4639      	mov	r1, r7
 8013d22:	f7ec fab1 	bl	8000288 <__aeabi_dsub>
 8013d26:	a36e      	add	r3, pc, #440	; (adr r3, 8013ee0 <_dtoa_r+0x2e0>)
 8013d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d2c:	f7ec fc64 	bl	80005f8 <__aeabi_dmul>
 8013d30:	a36d      	add	r3, pc, #436	; (adr r3, 8013ee8 <_dtoa_r+0x2e8>)
 8013d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d36:	f7ec faa9 	bl	800028c <__adddf3>
 8013d3a:	4606      	mov	r6, r0
 8013d3c:	4628      	mov	r0, r5
 8013d3e:	460f      	mov	r7, r1
 8013d40:	f7ec fbf0 	bl	8000524 <__aeabi_i2d>
 8013d44:	a36a      	add	r3, pc, #424	; (adr r3, 8013ef0 <_dtoa_r+0x2f0>)
 8013d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d4a:	f7ec fc55 	bl	80005f8 <__aeabi_dmul>
 8013d4e:	4602      	mov	r2, r0
 8013d50:	460b      	mov	r3, r1
 8013d52:	4630      	mov	r0, r6
 8013d54:	4639      	mov	r1, r7
 8013d56:	f7ec fa99 	bl	800028c <__adddf3>
 8013d5a:	4606      	mov	r6, r0
 8013d5c:	460f      	mov	r7, r1
 8013d5e:	f7ec fefb 	bl	8000b58 <__aeabi_d2iz>
 8013d62:	2200      	movs	r2, #0
 8013d64:	4682      	mov	sl, r0
 8013d66:	2300      	movs	r3, #0
 8013d68:	4630      	mov	r0, r6
 8013d6a:	4639      	mov	r1, r7
 8013d6c:	f7ec feb6 	bl	8000adc <__aeabi_dcmplt>
 8013d70:	b148      	cbz	r0, 8013d86 <_dtoa_r+0x186>
 8013d72:	4650      	mov	r0, sl
 8013d74:	f7ec fbd6 	bl	8000524 <__aeabi_i2d>
 8013d78:	4632      	mov	r2, r6
 8013d7a:	463b      	mov	r3, r7
 8013d7c:	f7ec fea4 	bl	8000ac8 <__aeabi_dcmpeq>
 8013d80:	b908      	cbnz	r0, 8013d86 <_dtoa_r+0x186>
 8013d82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013d86:	f1ba 0f16 	cmp.w	sl, #22
 8013d8a:	d854      	bhi.n	8013e36 <_dtoa_r+0x236>
 8013d8c:	4b61      	ldr	r3, [pc, #388]	; (8013f14 <_dtoa_r+0x314>)
 8013d8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013d9a:	f7ec fe9f 	bl	8000adc <__aeabi_dcmplt>
 8013d9e:	2800      	cmp	r0, #0
 8013da0:	d04b      	beq.n	8013e3a <_dtoa_r+0x23a>
 8013da2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013da6:	2300      	movs	r3, #0
 8013da8:	930e      	str	r3, [sp, #56]	; 0x38
 8013daa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013dac:	1b5d      	subs	r5, r3, r5
 8013dae:	1e6b      	subs	r3, r5, #1
 8013db0:	9304      	str	r3, [sp, #16]
 8013db2:	bf43      	ittte	mi
 8013db4:	2300      	movmi	r3, #0
 8013db6:	f1c5 0801 	rsbmi	r8, r5, #1
 8013dba:	9304      	strmi	r3, [sp, #16]
 8013dbc:	f04f 0800 	movpl.w	r8, #0
 8013dc0:	f1ba 0f00 	cmp.w	sl, #0
 8013dc4:	db3b      	blt.n	8013e3e <_dtoa_r+0x23e>
 8013dc6:	9b04      	ldr	r3, [sp, #16]
 8013dc8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8013dcc:	4453      	add	r3, sl
 8013dce:	9304      	str	r3, [sp, #16]
 8013dd0:	2300      	movs	r3, #0
 8013dd2:	9306      	str	r3, [sp, #24]
 8013dd4:	9b05      	ldr	r3, [sp, #20]
 8013dd6:	2b09      	cmp	r3, #9
 8013dd8:	d869      	bhi.n	8013eae <_dtoa_r+0x2ae>
 8013dda:	2b05      	cmp	r3, #5
 8013ddc:	bfc4      	itt	gt
 8013dde:	3b04      	subgt	r3, #4
 8013de0:	9305      	strgt	r3, [sp, #20]
 8013de2:	9b05      	ldr	r3, [sp, #20]
 8013de4:	f1a3 0302 	sub.w	r3, r3, #2
 8013de8:	bfcc      	ite	gt
 8013dea:	2500      	movgt	r5, #0
 8013dec:	2501      	movle	r5, #1
 8013dee:	2b03      	cmp	r3, #3
 8013df0:	d869      	bhi.n	8013ec6 <_dtoa_r+0x2c6>
 8013df2:	e8df f003 	tbb	[pc, r3]
 8013df6:	4e2c      	.short	0x4e2c
 8013df8:	5a4c      	.short	0x5a4c
 8013dfa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8013dfe:	441d      	add	r5, r3
 8013e00:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8013e04:	2b20      	cmp	r3, #32
 8013e06:	bfc1      	itttt	gt
 8013e08:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013e0c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8013e10:	fa09 f303 	lslgt.w	r3, r9, r3
 8013e14:	fa26 f000 	lsrgt.w	r0, r6, r0
 8013e18:	bfda      	itte	le
 8013e1a:	f1c3 0320 	rsble	r3, r3, #32
 8013e1e:	fa06 f003 	lslle.w	r0, r6, r3
 8013e22:	4318      	orrgt	r0, r3
 8013e24:	f7ec fb6e 	bl	8000504 <__aeabi_ui2d>
 8013e28:	2301      	movs	r3, #1
 8013e2a:	4606      	mov	r6, r0
 8013e2c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8013e30:	3d01      	subs	r5, #1
 8013e32:	9310      	str	r3, [sp, #64]	; 0x40
 8013e34:	e771      	b.n	8013d1a <_dtoa_r+0x11a>
 8013e36:	2301      	movs	r3, #1
 8013e38:	e7b6      	b.n	8013da8 <_dtoa_r+0x1a8>
 8013e3a:	900e      	str	r0, [sp, #56]	; 0x38
 8013e3c:	e7b5      	b.n	8013daa <_dtoa_r+0x1aa>
 8013e3e:	f1ca 0300 	rsb	r3, sl, #0
 8013e42:	9306      	str	r3, [sp, #24]
 8013e44:	2300      	movs	r3, #0
 8013e46:	eba8 080a 	sub.w	r8, r8, sl
 8013e4a:	930d      	str	r3, [sp, #52]	; 0x34
 8013e4c:	e7c2      	b.n	8013dd4 <_dtoa_r+0x1d4>
 8013e4e:	2300      	movs	r3, #0
 8013e50:	9308      	str	r3, [sp, #32]
 8013e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	dc39      	bgt.n	8013ecc <_dtoa_r+0x2cc>
 8013e58:	f04f 0901 	mov.w	r9, #1
 8013e5c:	f8cd 9004 	str.w	r9, [sp, #4]
 8013e60:	464b      	mov	r3, r9
 8013e62:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8013e66:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8013e68:	2200      	movs	r2, #0
 8013e6a:	6042      	str	r2, [r0, #4]
 8013e6c:	2204      	movs	r2, #4
 8013e6e:	f102 0614 	add.w	r6, r2, #20
 8013e72:	429e      	cmp	r6, r3
 8013e74:	6841      	ldr	r1, [r0, #4]
 8013e76:	d92f      	bls.n	8013ed8 <_dtoa_r+0x2d8>
 8013e78:	4620      	mov	r0, r4
 8013e7a:	f000 fed9 	bl	8014c30 <_Balloc>
 8013e7e:	9000      	str	r0, [sp, #0]
 8013e80:	2800      	cmp	r0, #0
 8013e82:	d14b      	bne.n	8013f1c <_dtoa_r+0x31c>
 8013e84:	4b24      	ldr	r3, [pc, #144]	; (8013f18 <_dtoa_r+0x318>)
 8013e86:	4602      	mov	r2, r0
 8013e88:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013e8c:	e6d1      	b.n	8013c32 <_dtoa_r+0x32>
 8013e8e:	2301      	movs	r3, #1
 8013e90:	e7de      	b.n	8013e50 <_dtoa_r+0x250>
 8013e92:	2300      	movs	r3, #0
 8013e94:	9308      	str	r3, [sp, #32]
 8013e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e98:	eb0a 0903 	add.w	r9, sl, r3
 8013e9c:	f109 0301 	add.w	r3, r9, #1
 8013ea0:	2b01      	cmp	r3, #1
 8013ea2:	9301      	str	r3, [sp, #4]
 8013ea4:	bfb8      	it	lt
 8013ea6:	2301      	movlt	r3, #1
 8013ea8:	e7dd      	b.n	8013e66 <_dtoa_r+0x266>
 8013eaa:	2301      	movs	r3, #1
 8013eac:	e7f2      	b.n	8013e94 <_dtoa_r+0x294>
 8013eae:	2501      	movs	r5, #1
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	9305      	str	r3, [sp, #20]
 8013eb4:	9508      	str	r5, [sp, #32]
 8013eb6:	f04f 39ff 	mov.w	r9, #4294967295
 8013eba:	2200      	movs	r2, #0
 8013ebc:	f8cd 9004 	str.w	r9, [sp, #4]
 8013ec0:	2312      	movs	r3, #18
 8013ec2:	9209      	str	r2, [sp, #36]	; 0x24
 8013ec4:	e7cf      	b.n	8013e66 <_dtoa_r+0x266>
 8013ec6:	2301      	movs	r3, #1
 8013ec8:	9308      	str	r3, [sp, #32]
 8013eca:	e7f4      	b.n	8013eb6 <_dtoa_r+0x2b6>
 8013ecc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8013ed0:	f8cd 9004 	str.w	r9, [sp, #4]
 8013ed4:	464b      	mov	r3, r9
 8013ed6:	e7c6      	b.n	8013e66 <_dtoa_r+0x266>
 8013ed8:	3101      	adds	r1, #1
 8013eda:	6041      	str	r1, [r0, #4]
 8013edc:	0052      	lsls	r2, r2, #1
 8013ede:	e7c6      	b.n	8013e6e <_dtoa_r+0x26e>
 8013ee0:	636f4361 	.word	0x636f4361
 8013ee4:	3fd287a7 	.word	0x3fd287a7
 8013ee8:	8b60c8b3 	.word	0x8b60c8b3
 8013eec:	3fc68a28 	.word	0x3fc68a28
 8013ef0:	509f79fb 	.word	0x509f79fb
 8013ef4:	3fd34413 	.word	0x3fd34413
 8013ef8:	08016c4d 	.word	0x08016c4d
 8013efc:	08016c64 	.word	0x08016c64
 8013f00:	7ff00000 	.word	0x7ff00000
 8013f04:	08016c49 	.word	0x08016c49
 8013f08:	08016c40 	.word	0x08016c40
 8013f0c:	08016c1d 	.word	0x08016c1d
 8013f10:	3ff80000 	.word	0x3ff80000
 8013f14:	08016dc0 	.word	0x08016dc0
 8013f18:	08016cc3 	.word	0x08016cc3
 8013f1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013f1e:	9a00      	ldr	r2, [sp, #0]
 8013f20:	601a      	str	r2, [r3, #0]
 8013f22:	9b01      	ldr	r3, [sp, #4]
 8013f24:	2b0e      	cmp	r3, #14
 8013f26:	f200 80ad 	bhi.w	8014084 <_dtoa_r+0x484>
 8013f2a:	2d00      	cmp	r5, #0
 8013f2c:	f000 80aa 	beq.w	8014084 <_dtoa_r+0x484>
 8013f30:	f1ba 0f00 	cmp.w	sl, #0
 8013f34:	dd36      	ble.n	8013fa4 <_dtoa_r+0x3a4>
 8013f36:	4ac3      	ldr	r2, [pc, #780]	; (8014244 <_dtoa_r+0x644>)
 8013f38:	f00a 030f 	and.w	r3, sl, #15
 8013f3c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013f40:	ed93 7b00 	vldr	d7, [r3]
 8013f44:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8013f48:	ea4f 172a 	mov.w	r7, sl, asr #4
 8013f4c:	eeb0 8a47 	vmov.f32	s16, s14
 8013f50:	eef0 8a67 	vmov.f32	s17, s15
 8013f54:	d016      	beq.n	8013f84 <_dtoa_r+0x384>
 8013f56:	4bbc      	ldr	r3, [pc, #752]	; (8014248 <_dtoa_r+0x648>)
 8013f58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013f5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013f60:	f7ec fc74 	bl	800084c <__aeabi_ddiv>
 8013f64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013f68:	f007 070f 	and.w	r7, r7, #15
 8013f6c:	2503      	movs	r5, #3
 8013f6e:	4eb6      	ldr	r6, [pc, #728]	; (8014248 <_dtoa_r+0x648>)
 8013f70:	b957      	cbnz	r7, 8013f88 <_dtoa_r+0x388>
 8013f72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013f76:	ec53 2b18 	vmov	r2, r3, d8
 8013f7a:	f7ec fc67 	bl	800084c <__aeabi_ddiv>
 8013f7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013f82:	e029      	b.n	8013fd8 <_dtoa_r+0x3d8>
 8013f84:	2502      	movs	r5, #2
 8013f86:	e7f2      	b.n	8013f6e <_dtoa_r+0x36e>
 8013f88:	07f9      	lsls	r1, r7, #31
 8013f8a:	d508      	bpl.n	8013f9e <_dtoa_r+0x39e>
 8013f8c:	ec51 0b18 	vmov	r0, r1, d8
 8013f90:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013f94:	f7ec fb30 	bl	80005f8 <__aeabi_dmul>
 8013f98:	ec41 0b18 	vmov	d8, r0, r1
 8013f9c:	3501      	adds	r5, #1
 8013f9e:	107f      	asrs	r7, r7, #1
 8013fa0:	3608      	adds	r6, #8
 8013fa2:	e7e5      	b.n	8013f70 <_dtoa_r+0x370>
 8013fa4:	f000 80a6 	beq.w	80140f4 <_dtoa_r+0x4f4>
 8013fa8:	f1ca 0600 	rsb	r6, sl, #0
 8013fac:	4ba5      	ldr	r3, [pc, #660]	; (8014244 <_dtoa_r+0x644>)
 8013fae:	4fa6      	ldr	r7, [pc, #664]	; (8014248 <_dtoa_r+0x648>)
 8013fb0:	f006 020f 	and.w	r2, r6, #15
 8013fb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fbc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013fc0:	f7ec fb1a 	bl	80005f8 <__aeabi_dmul>
 8013fc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013fc8:	1136      	asrs	r6, r6, #4
 8013fca:	2300      	movs	r3, #0
 8013fcc:	2502      	movs	r5, #2
 8013fce:	2e00      	cmp	r6, #0
 8013fd0:	f040 8085 	bne.w	80140de <_dtoa_r+0x4de>
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d1d2      	bne.n	8013f7e <_dtoa_r+0x37e>
 8013fd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	f000 808c 	beq.w	80140f8 <_dtoa_r+0x4f8>
 8013fe0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013fe4:	4b99      	ldr	r3, [pc, #612]	; (801424c <_dtoa_r+0x64c>)
 8013fe6:	2200      	movs	r2, #0
 8013fe8:	4630      	mov	r0, r6
 8013fea:	4639      	mov	r1, r7
 8013fec:	f7ec fd76 	bl	8000adc <__aeabi_dcmplt>
 8013ff0:	2800      	cmp	r0, #0
 8013ff2:	f000 8081 	beq.w	80140f8 <_dtoa_r+0x4f8>
 8013ff6:	9b01      	ldr	r3, [sp, #4]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d07d      	beq.n	80140f8 <_dtoa_r+0x4f8>
 8013ffc:	f1b9 0f00 	cmp.w	r9, #0
 8014000:	dd3c      	ble.n	801407c <_dtoa_r+0x47c>
 8014002:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014006:	9307      	str	r3, [sp, #28]
 8014008:	2200      	movs	r2, #0
 801400a:	4b91      	ldr	r3, [pc, #580]	; (8014250 <_dtoa_r+0x650>)
 801400c:	4630      	mov	r0, r6
 801400e:	4639      	mov	r1, r7
 8014010:	f7ec faf2 	bl	80005f8 <__aeabi_dmul>
 8014014:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014018:	3501      	adds	r5, #1
 801401a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801401e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014022:	4628      	mov	r0, r5
 8014024:	f7ec fa7e 	bl	8000524 <__aeabi_i2d>
 8014028:	4632      	mov	r2, r6
 801402a:	463b      	mov	r3, r7
 801402c:	f7ec fae4 	bl	80005f8 <__aeabi_dmul>
 8014030:	4b88      	ldr	r3, [pc, #544]	; (8014254 <_dtoa_r+0x654>)
 8014032:	2200      	movs	r2, #0
 8014034:	f7ec f92a 	bl	800028c <__adddf3>
 8014038:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801403c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014040:	9303      	str	r3, [sp, #12]
 8014042:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014044:	2b00      	cmp	r3, #0
 8014046:	d15c      	bne.n	8014102 <_dtoa_r+0x502>
 8014048:	4b83      	ldr	r3, [pc, #524]	; (8014258 <_dtoa_r+0x658>)
 801404a:	2200      	movs	r2, #0
 801404c:	4630      	mov	r0, r6
 801404e:	4639      	mov	r1, r7
 8014050:	f7ec f91a 	bl	8000288 <__aeabi_dsub>
 8014054:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014058:	4606      	mov	r6, r0
 801405a:	460f      	mov	r7, r1
 801405c:	f7ec fd5c 	bl	8000b18 <__aeabi_dcmpgt>
 8014060:	2800      	cmp	r0, #0
 8014062:	f040 8296 	bne.w	8014592 <_dtoa_r+0x992>
 8014066:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801406a:	4630      	mov	r0, r6
 801406c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014070:	4639      	mov	r1, r7
 8014072:	f7ec fd33 	bl	8000adc <__aeabi_dcmplt>
 8014076:	2800      	cmp	r0, #0
 8014078:	f040 8288 	bne.w	801458c <_dtoa_r+0x98c>
 801407c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014080:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014084:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014086:	2b00      	cmp	r3, #0
 8014088:	f2c0 8158 	blt.w	801433c <_dtoa_r+0x73c>
 801408c:	f1ba 0f0e 	cmp.w	sl, #14
 8014090:	f300 8154 	bgt.w	801433c <_dtoa_r+0x73c>
 8014094:	4b6b      	ldr	r3, [pc, #428]	; (8014244 <_dtoa_r+0x644>)
 8014096:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801409a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801409e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	f280 80e3 	bge.w	801426c <_dtoa_r+0x66c>
 80140a6:	9b01      	ldr	r3, [sp, #4]
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	f300 80df 	bgt.w	801426c <_dtoa_r+0x66c>
 80140ae:	f040 826d 	bne.w	801458c <_dtoa_r+0x98c>
 80140b2:	4b69      	ldr	r3, [pc, #420]	; (8014258 <_dtoa_r+0x658>)
 80140b4:	2200      	movs	r2, #0
 80140b6:	4640      	mov	r0, r8
 80140b8:	4649      	mov	r1, r9
 80140ba:	f7ec fa9d 	bl	80005f8 <__aeabi_dmul>
 80140be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80140c2:	f7ec fd1f 	bl	8000b04 <__aeabi_dcmpge>
 80140c6:	9e01      	ldr	r6, [sp, #4]
 80140c8:	4637      	mov	r7, r6
 80140ca:	2800      	cmp	r0, #0
 80140cc:	f040 8243 	bne.w	8014556 <_dtoa_r+0x956>
 80140d0:	9d00      	ldr	r5, [sp, #0]
 80140d2:	2331      	movs	r3, #49	; 0x31
 80140d4:	f805 3b01 	strb.w	r3, [r5], #1
 80140d8:	f10a 0a01 	add.w	sl, sl, #1
 80140dc:	e23f      	b.n	801455e <_dtoa_r+0x95e>
 80140de:	07f2      	lsls	r2, r6, #31
 80140e0:	d505      	bpl.n	80140ee <_dtoa_r+0x4ee>
 80140e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80140e6:	f7ec fa87 	bl	80005f8 <__aeabi_dmul>
 80140ea:	3501      	adds	r5, #1
 80140ec:	2301      	movs	r3, #1
 80140ee:	1076      	asrs	r6, r6, #1
 80140f0:	3708      	adds	r7, #8
 80140f2:	e76c      	b.n	8013fce <_dtoa_r+0x3ce>
 80140f4:	2502      	movs	r5, #2
 80140f6:	e76f      	b.n	8013fd8 <_dtoa_r+0x3d8>
 80140f8:	9b01      	ldr	r3, [sp, #4]
 80140fa:	f8cd a01c 	str.w	sl, [sp, #28]
 80140fe:	930c      	str	r3, [sp, #48]	; 0x30
 8014100:	e78d      	b.n	801401e <_dtoa_r+0x41e>
 8014102:	9900      	ldr	r1, [sp, #0]
 8014104:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014106:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014108:	4b4e      	ldr	r3, [pc, #312]	; (8014244 <_dtoa_r+0x644>)
 801410a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801410e:	4401      	add	r1, r0
 8014110:	9102      	str	r1, [sp, #8]
 8014112:	9908      	ldr	r1, [sp, #32]
 8014114:	eeb0 8a47 	vmov.f32	s16, s14
 8014118:	eef0 8a67 	vmov.f32	s17, s15
 801411c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014120:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014124:	2900      	cmp	r1, #0
 8014126:	d045      	beq.n	80141b4 <_dtoa_r+0x5b4>
 8014128:	494c      	ldr	r1, [pc, #304]	; (801425c <_dtoa_r+0x65c>)
 801412a:	2000      	movs	r0, #0
 801412c:	f7ec fb8e 	bl	800084c <__aeabi_ddiv>
 8014130:	ec53 2b18 	vmov	r2, r3, d8
 8014134:	f7ec f8a8 	bl	8000288 <__aeabi_dsub>
 8014138:	9d00      	ldr	r5, [sp, #0]
 801413a:	ec41 0b18 	vmov	d8, r0, r1
 801413e:	4639      	mov	r1, r7
 8014140:	4630      	mov	r0, r6
 8014142:	f7ec fd09 	bl	8000b58 <__aeabi_d2iz>
 8014146:	900c      	str	r0, [sp, #48]	; 0x30
 8014148:	f7ec f9ec 	bl	8000524 <__aeabi_i2d>
 801414c:	4602      	mov	r2, r0
 801414e:	460b      	mov	r3, r1
 8014150:	4630      	mov	r0, r6
 8014152:	4639      	mov	r1, r7
 8014154:	f7ec f898 	bl	8000288 <__aeabi_dsub>
 8014158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801415a:	3330      	adds	r3, #48	; 0x30
 801415c:	f805 3b01 	strb.w	r3, [r5], #1
 8014160:	ec53 2b18 	vmov	r2, r3, d8
 8014164:	4606      	mov	r6, r0
 8014166:	460f      	mov	r7, r1
 8014168:	f7ec fcb8 	bl	8000adc <__aeabi_dcmplt>
 801416c:	2800      	cmp	r0, #0
 801416e:	d165      	bne.n	801423c <_dtoa_r+0x63c>
 8014170:	4632      	mov	r2, r6
 8014172:	463b      	mov	r3, r7
 8014174:	4935      	ldr	r1, [pc, #212]	; (801424c <_dtoa_r+0x64c>)
 8014176:	2000      	movs	r0, #0
 8014178:	f7ec f886 	bl	8000288 <__aeabi_dsub>
 801417c:	ec53 2b18 	vmov	r2, r3, d8
 8014180:	f7ec fcac 	bl	8000adc <__aeabi_dcmplt>
 8014184:	2800      	cmp	r0, #0
 8014186:	f040 80b9 	bne.w	80142fc <_dtoa_r+0x6fc>
 801418a:	9b02      	ldr	r3, [sp, #8]
 801418c:	429d      	cmp	r5, r3
 801418e:	f43f af75 	beq.w	801407c <_dtoa_r+0x47c>
 8014192:	4b2f      	ldr	r3, [pc, #188]	; (8014250 <_dtoa_r+0x650>)
 8014194:	ec51 0b18 	vmov	r0, r1, d8
 8014198:	2200      	movs	r2, #0
 801419a:	f7ec fa2d 	bl	80005f8 <__aeabi_dmul>
 801419e:	4b2c      	ldr	r3, [pc, #176]	; (8014250 <_dtoa_r+0x650>)
 80141a0:	ec41 0b18 	vmov	d8, r0, r1
 80141a4:	2200      	movs	r2, #0
 80141a6:	4630      	mov	r0, r6
 80141a8:	4639      	mov	r1, r7
 80141aa:	f7ec fa25 	bl	80005f8 <__aeabi_dmul>
 80141ae:	4606      	mov	r6, r0
 80141b0:	460f      	mov	r7, r1
 80141b2:	e7c4      	b.n	801413e <_dtoa_r+0x53e>
 80141b4:	ec51 0b17 	vmov	r0, r1, d7
 80141b8:	f7ec fa1e 	bl	80005f8 <__aeabi_dmul>
 80141bc:	9b02      	ldr	r3, [sp, #8]
 80141be:	9d00      	ldr	r5, [sp, #0]
 80141c0:	930c      	str	r3, [sp, #48]	; 0x30
 80141c2:	ec41 0b18 	vmov	d8, r0, r1
 80141c6:	4639      	mov	r1, r7
 80141c8:	4630      	mov	r0, r6
 80141ca:	f7ec fcc5 	bl	8000b58 <__aeabi_d2iz>
 80141ce:	9011      	str	r0, [sp, #68]	; 0x44
 80141d0:	f7ec f9a8 	bl	8000524 <__aeabi_i2d>
 80141d4:	4602      	mov	r2, r0
 80141d6:	460b      	mov	r3, r1
 80141d8:	4630      	mov	r0, r6
 80141da:	4639      	mov	r1, r7
 80141dc:	f7ec f854 	bl	8000288 <__aeabi_dsub>
 80141e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80141e2:	3330      	adds	r3, #48	; 0x30
 80141e4:	f805 3b01 	strb.w	r3, [r5], #1
 80141e8:	9b02      	ldr	r3, [sp, #8]
 80141ea:	429d      	cmp	r5, r3
 80141ec:	4606      	mov	r6, r0
 80141ee:	460f      	mov	r7, r1
 80141f0:	f04f 0200 	mov.w	r2, #0
 80141f4:	d134      	bne.n	8014260 <_dtoa_r+0x660>
 80141f6:	4b19      	ldr	r3, [pc, #100]	; (801425c <_dtoa_r+0x65c>)
 80141f8:	ec51 0b18 	vmov	r0, r1, d8
 80141fc:	f7ec f846 	bl	800028c <__adddf3>
 8014200:	4602      	mov	r2, r0
 8014202:	460b      	mov	r3, r1
 8014204:	4630      	mov	r0, r6
 8014206:	4639      	mov	r1, r7
 8014208:	f7ec fc86 	bl	8000b18 <__aeabi_dcmpgt>
 801420c:	2800      	cmp	r0, #0
 801420e:	d175      	bne.n	80142fc <_dtoa_r+0x6fc>
 8014210:	ec53 2b18 	vmov	r2, r3, d8
 8014214:	4911      	ldr	r1, [pc, #68]	; (801425c <_dtoa_r+0x65c>)
 8014216:	2000      	movs	r0, #0
 8014218:	f7ec f836 	bl	8000288 <__aeabi_dsub>
 801421c:	4602      	mov	r2, r0
 801421e:	460b      	mov	r3, r1
 8014220:	4630      	mov	r0, r6
 8014222:	4639      	mov	r1, r7
 8014224:	f7ec fc5a 	bl	8000adc <__aeabi_dcmplt>
 8014228:	2800      	cmp	r0, #0
 801422a:	f43f af27 	beq.w	801407c <_dtoa_r+0x47c>
 801422e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014230:	1e6b      	subs	r3, r5, #1
 8014232:	930c      	str	r3, [sp, #48]	; 0x30
 8014234:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014238:	2b30      	cmp	r3, #48	; 0x30
 801423a:	d0f8      	beq.n	801422e <_dtoa_r+0x62e>
 801423c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8014240:	e04a      	b.n	80142d8 <_dtoa_r+0x6d8>
 8014242:	bf00      	nop
 8014244:	08016dc0 	.word	0x08016dc0
 8014248:	08016d98 	.word	0x08016d98
 801424c:	3ff00000 	.word	0x3ff00000
 8014250:	40240000 	.word	0x40240000
 8014254:	401c0000 	.word	0x401c0000
 8014258:	40140000 	.word	0x40140000
 801425c:	3fe00000 	.word	0x3fe00000
 8014260:	4baf      	ldr	r3, [pc, #700]	; (8014520 <_dtoa_r+0x920>)
 8014262:	f7ec f9c9 	bl	80005f8 <__aeabi_dmul>
 8014266:	4606      	mov	r6, r0
 8014268:	460f      	mov	r7, r1
 801426a:	e7ac      	b.n	80141c6 <_dtoa_r+0x5c6>
 801426c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014270:	9d00      	ldr	r5, [sp, #0]
 8014272:	4642      	mov	r2, r8
 8014274:	464b      	mov	r3, r9
 8014276:	4630      	mov	r0, r6
 8014278:	4639      	mov	r1, r7
 801427a:	f7ec fae7 	bl	800084c <__aeabi_ddiv>
 801427e:	f7ec fc6b 	bl	8000b58 <__aeabi_d2iz>
 8014282:	9002      	str	r0, [sp, #8]
 8014284:	f7ec f94e 	bl	8000524 <__aeabi_i2d>
 8014288:	4642      	mov	r2, r8
 801428a:	464b      	mov	r3, r9
 801428c:	f7ec f9b4 	bl	80005f8 <__aeabi_dmul>
 8014290:	4602      	mov	r2, r0
 8014292:	460b      	mov	r3, r1
 8014294:	4630      	mov	r0, r6
 8014296:	4639      	mov	r1, r7
 8014298:	f7eb fff6 	bl	8000288 <__aeabi_dsub>
 801429c:	9e02      	ldr	r6, [sp, #8]
 801429e:	9f01      	ldr	r7, [sp, #4]
 80142a0:	3630      	adds	r6, #48	; 0x30
 80142a2:	f805 6b01 	strb.w	r6, [r5], #1
 80142a6:	9e00      	ldr	r6, [sp, #0]
 80142a8:	1bae      	subs	r6, r5, r6
 80142aa:	42b7      	cmp	r7, r6
 80142ac:	4602      	mov	r2, r0
 80142ae:	460b      	mov	r3, r1
 80142b0:	d137      	bne.n	8014322 <_dtoa_r+0x722>
 80142b2:	f7eb ffeb 	bl	800028c <__adddf3>
 80142b6:	4642      	mov	r2, r8
 80142b8:	464b      	mov	r3, r9
 80142ba:	4606      	mov	r6, r0
 80142bc:	460f      	mov	r7, r1
 80142be:	f7ec fc2b 	bl	8000b18 <__aeabi_dcmpgt>
 80142c2:	b9c8      	cbnz	r0, 80142f8 <_dtoa_r+0x6f8>
 80142c4:	4642      	mov	r2, r8
 80142c6:	464b      	mov	r3, r9
 80142c8:	4630      	mov	r0, r6
 80142ca:	4639      	mov	r1, r7
 80142cc:	f7ec fbfc 	bl	8000ac8 <__aeabi_dcmpeq>
 80142d0:	b110      	cbz	r0, 80142d8 <_dtoa_r+0x6d8>
 80142d2:	9b02      	ldr	r3, [sp, #8]
 80142d4:	07d9      	lsls	r1, r3, #31
 80142d6:	d40f      	bmi.n	80142f8 <_dtoa_r+0x6f8>
 80142d8:	4620      	mov	r0, r4
 80142da:	4659      	mov	r1, fp
 80142dc:	f000 fce8 	bl	8014cb0 <_Bfree>
 80142e0:	2300      	movs	r3, #0
 80142e2:	702b      	strb	r3, [r5, #0]
 80142e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80142e6:	f10a 0001 	add.w	r0, sl, #1
 80142ea:	6018      	str	r0, [r3, #0]
 80142ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	f43f acd8 	beq.w	8013ca4 <_dtoa_r+0xa4>
 80142f4:	601d      	str	r5, [r3, #0]
 80142f6:	e4d5      	b.n	8013ca4 <_dtoa_r+0xa4>
 80142f8:	f8cd a01c 	str.w	sl, [sp, #28]
 80142fc:	462b      	mov	r3, r5
 80142fe:	461d      	mov	r5, r3
 8014300:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014304:	2a39      	cmp	r2, #57	; 0x39
 8014306:	d108      	bne.n	801431a <_dtoa_r+0x71a>
 8014308:	9a00      	ldr	r2, [sp, #0]
 801430a:	429a      	cmp	r2, r3
 801430c:	d1f7      	bne.n	80142fe <_dtoa_r+0x6fe>
 801430e:	9a07      	ldr	r2, [sp, #28]
 8014310:	9900      	ldr	r1, [sp, #0]
 8014312:	3201      	adds	r2, #1
 8014314:	9207      	str	r2, [sp, #28]
 8014316:	2230      	movs	r2, #48	; 0x30
 8014318:	700a      	strb	r2, [r1, #0]
 801431a:	781a      	ldrb	r2, [r3, #0]
 801431c:	3201      	adds	r2, #1
 801431e:	701a      	strb	r2, [r3, #0]
 8014320:	e78c      	b.n	801423c <_dtoa_r+0x63c>
 8014322:	4b7f      	ldr	r3, [pc, #508]	; (8014520 <_dtoa_r+0x920>)
 8014324:	2200      	movs	r2, #0
 8014326:	f7ec f967 	bl	80005f8 <__aeabi_dmul>
 801432a:	2200      	movs	r2, #0
 801432c:	2300      	movs	r3, #0
 801432e:	4606      	mov	r6, r0
 8014330:	460f      	mov	r7, r1
 8014332:	f7ec fbc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8014336:	2800      	cmp	r0, #0
 8014338:	d09b      	beq.n	8014272 <_dtoa_r+0x672>
 801433a:	e7cd      	b.n	80142d8 <_dtoa_r+0x6d8>
 801433c:	9a08      	ldr	r2, [sp, #32]
 801433e:	2a00      	cmp	r2, #0
 8014340:	f000 80c4 	beq.w	80144cc <_dtoa_r+0x8cc>
 8014344:	9a05      	ldr	r2, [sp, #20]
 8014346:	2a01      	cmp	r2, #1
 8014348:	f300 80a8 	bgt.w	801449c <_dtoa_r+0x89c>
 801434c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801434e:	2a00      	cmp	r2, #0
 8014350:	f000 80a0 	beq.w	8014494 <_dtoa_r+0x894>
 8014354:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014358:	9e06      	ldr	r6, [sp, #24]
 801435a:	4645      	mov	r5, r8
 801435c:	9a04      	ldr	r2, [sp, #16]
 801435e:	2101      	movs	r1, #1
 8014360:	441a      	add	r2, r3
 8014362:	4620      	mov	r0, r4
 8014364:	4498      	add	r8, r3
 8014366:	9204      	str	r2, [sp, #16]
 8014368:	f000 fd5e 	bl	8014e28 <__i2b>
 801436c:	4607      	mov	r7, r0
 801436e:	2d00      	cmp	r5, #0
 8014370:	dd0b      	ble.n	801438a <_dtoa_r+0x78a>
 8014372:	9b04      	ldr	r3, [sp, #16]
 8014374:	2b00      	cmp	r3, #0
 8014376:	dd08      	ble.n	801438a <_dtoa_r+0x78a>
 8014378:	42ab      	cmp	r3, r5
 801437a:	9a04      	ldr	r2, [sp, #16]
 801437c:	bfa8      	it	ge
 801437e:	462b      	movge	r3, r5
 8014380:	eba8 0803 	sub.w	r8, r8, r3
 8014384:	1aed      	subs	r5, r5, r3
 8014386:	1ad3      	subs	r3, r2, r3
 8014388:	9304      	str	r3, [sp, #16]
 801438a:	9b06      	ldr	r3, [sp, #24]
 801438c:	b1fb      	cbz	r3, 80143ce <_dtoa_r+0x7ce>
 801438e:	9b08      	ldr	r3, [sp, #32]
 8014390:	2b00      	cmp	r3, #0
 8014392:	f000 809f 	beq.w	80144d4 <_dtoa_r+0x8d4>
 8014396:	2e00      	cmp	r6, #0
 8014398:	dd11      	ble.n	80143be <_dtoa_r+0x7be>
 801439a:	4639      	mov	r1, r7
 801439c:	4632      	mov	r2, r6
 801439e:	4620      	mov	r0, r4
 80143a0:	f000 fdfe 	bl	8014fa0 <__pow5mult>
 80143a4:	465a      	mov	r2, fp
 80143a6:	4601      	mov	r1, r0
 80143a8:	4607      	mov	r7, r0
 80143aa:	4620      	mov	r0, r4
 80143ac:	f000 fd52 	bl	8014e54 <__multiply>
 80143b0:	4659      	mov	r1, fp
 80143b2:	9007      	str	r0, [sp, #28]
 80143b4:	4620      	mov	r0, r4
 80143b6:	f000 fc7b 	bl	8014cb0 <_Bfree>
 80143ba:	9b07      	ldr	r3, [sp, #28]
 80143bc:	469b      	mov	fp, r3
 80143be:	9b06      	ldr	r3, [sp, #24]
 80143c0:	1b9a      	subs	r2, r3, r6
 80143c2:	d004      	beq.n	80143ce <_dtoa_r+0x7ce>
 80143c4:	4659      	mov	r1, fp
 80143c6:	4620      	mov	r0, r4
 80143c8:	f000 fdea 	bl	8014fa0 <__pow5mult>
 80143cc:	4683      	mov	fp, r0
 80143ce:	2101      	movs	r1, #1
 80143d0:	4620      	mov	r0, r4
 80143d2:	f000 fd29 	bl	8014e28 <__i2b>
 80143d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80143d8:	2b00      	cmp	r3, #0
 80143da:	4606      	mov	r6, r0
 80143dc:	dd7c      	ble.n	80144d8 <_dtoa_r+0x8d8>
 80143de:	461a      	mov	r2, r3
 80143e0:	4601      	mov	r1, r0
 80143e2:	4620      	mov	r0, r4
 80143e4:	f000 fddc 	bl	8014fa0 <__pow5mult>
 80143e8:	9b05      	ldr	r3, [sp, #20]
 80143ea:	2b01      	cmp	r3, #1
 80143ec:	4606      	mov	r6, r0
 80143ee:	dd76      	ble.n	80144de <_dtoa_r+0x8de>
 80143f0:	2300      	movs	r3, #0
 80143f2:	9306      	str	r3, [sp, #24]
 80143f4:	6933      	ldr	r3, [r6, #16]
 80143f6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80143fa:	6918      	ldr	r0, [r3, #16]
 80143fc:	f000 fcc4 	bl	8014d88 <__hi0bits>
 8014400:	f1c0 0020 	rsb	r0, r0, #32
 8014404:	9b04      	ldr	r3, [sp, #16]
 8014406:	4418      	add	r0, r3
 8014408:	f010 001f 	ands.w	r0, r0, #31
 801440c:	f000 8086 	beq.w	801451c <_dtoa_r+0x91c>
 8014410:	f1c0 0320 	rsb	r3, r0, #32
 8014414:	2b04      	cmp	r3, #4
 8014416:	dd7f      	ble.n	8014518 <_dtoa_r+0x918>
 8014418:	f1c0 001c 	rsb	r0, r0, #28
 801441c:	9b04      	ldr	r3, [sp, #16]
 801441e:	4403      	add	r3, r0
 8014420:	4480      	add	r8, r0
 8014422:	4405      	add	r5, r0
 8014424:	9304      	str	r3, [sp, #16]
 8014426:	f1b8 0f00 	cmp.w	r8, #0
 801442a:	dd05      	ble.n	8014438 <_dtoa_r+0x838>
 801442c:	4659      	mov	r1, fp
 801442e:	4642      	mov	r2, r8
 8014430:	4620      	mov	r0, r4
 8014432:	f000 fe0f 	bl	8015054 <__lshift>
 8014436:	4683      	mov	fp, r0
 8014438:	9b04      	ldr	r3, [sp, #16]
 801443a:	2b00      	cmp	r3, #0
 801443c:	dd05      	ble.n	801444a <_dtoa_r+0x84a>
 801443e:	4631      	mov	r1, r6
 8014440:	461a      	mov	r2, r3
 8014442:	4620      	mov	r0, r4
 8014444:	f000 fe06 	bl	8015054 <__lshift>
 8014448:	4606      	mov	r6, r0
 801444a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801444c:	2b00      	cmp	r3, #0
 801444e:	d069      	beq.n	8014524 <_dtoa_r+0x924>
 8014450:	4631      	mov	r1, r6
 8014452:	4658      	mov	r0, fp
 8014454:	f000 fe6a 	bl	801512c <__mcmp>
 8014458:	2800      	cmp	r0, #0
 801445a:	da63      	bge.n	8014524 <_dtoa_r+0x924>
 801445c:	2300      	movs	r3, #0
 801445e:	4659      	mov	r1, fp
 8014460:	220a      	movs	r2, #10
 8014462:	4620      	mov	r0, r4
 8014464:	f000 fc46 	bl	8014cf4 <__multadd>
 8014468:	9b08      	ldr	r3, [sp, #32]
 801446a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801446e:	4683      	mov	fp, r0
 8014470:	2b00      	cmp	r3, #0
 8014472:	f000 818f 	beq.w	8014794 <_dtoa_r+0xb94>
 8014476:	4639      	mov	r1, r7
 8014478:	2300      	movs	r3, #0
 801447a:	220a      	movs	r2, #10
 801447c:	4620      	mov	r0, r4
 801447e:	f000 fc39 	bl	8014cf4 <__multadd>
 8014482:	f1b9 0f00 	cmp.w	r9, #0
 8014486:	4607      	mov	r7, r0
 8014488:	f300 808e 	bgt.w	80145a8 <_dtoa_r+0x9a8>
 801448c:	9b05      	ldr	r3, [sp, #20]
 801448e:	2b02      	cmp	r3, #2
 8014490:	dc50      	bgt.n	8014534 <_dtoa_r+0x934>
 8014492:	e089      	b.n	80145a8 <_dtoa_r+0x9a8>
 8014494:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014496:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801449a:	e75d      	b.n	8014358 <_dtoa_r+0x758>
 801449c:	9b01      	ldr	r3, [sp, #4]
 801449e:	1e5e      	subs	r6, r3, #1
 80144a0:	9b06      	ldr	r3, [sp, #24]
 80144a2:	42b3      	cmp	r3, r6
 80144a4:	bfbf      	itttt	lt
 80144a6:	9b06      	ldrlt	r3, [sp, #24]
 80144a8:	9606      	strlt	r6, [sp, #24]
 80144aa:	1af2      	sublt	r2, r6, r3
 80144ac:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80144ae:	bfb6      	itet	lt
 80144b0:	189b      	addlt	r3, r3, r2
 80144b2:	1b9e      	subge	r6, r3, r6
 80144b4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80144b6:	9b01      	ldr	r3, [sp, #4]
 80144b8:	bfb8      	it	lt
 80144ba:	2600      	movlt	r6, #0
 80144bc:	2b00      	cmp	r3, #0
 80144be:	bfb5      	itete	lt
 80144c0:	eba8 0503 	sublt.w	r5, r8, r3
 80144c4:	9b01      	ldrge	r3, [sp, #4]
 80144c6:	2300      	movlt	r3, #0
 80144c8:	4645      	movge	r5, r8
 80144ca:	e747      	b.n	801435c <_dtoa_r+0x75c>
 80144cc:	9e06      	ldr	r6, [sp, #24]
 80144ce:	9f08      	ldr	r7, [sp, #32]
 80144d0:	4645      	mov	r5, r8
 80144d2:	e74c      	b.n	801436e <_dtoa_r+0x76e>
 80144d4:	9a06      	ldr	r2, [sp, #24]
 80144d6:	e775      	b.n	80143c4 <_dtoa_r+0x7c4>
 80144d8:	9b05      	ldr	r3, [sp, #20]
 80144da:	2b01      	cmp	r3, #1
 80144dc:	dc18      	bgt.n	8014510 <_dtoa_r+0x910>
 80144de:	9b02      	ldr	r3, [sp, #8]
 80144e0:	b9b3      	cbnz	r3, 8014510 <_dtoa_r+0x910>
 80144e2:	9b03      	ldr	r3, [sp, #12]
 80144e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80144e8:	b9a3      	cbnz	r3, 8014514 <_dtoa_r+0x914>
 80144ea:	9b03      	ldr	r3, [sp, #12]
 80144ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80144f0:	0d1b      	lsrs	r3, r3, #20
 80144f2:	051b      	lsls	r3, r3, #20
 80144f4:	b12b      	cbz	r3, 8014502 <_dtoa_r+0x902>
 80144f6:	9b04      	ldr	r3, [sp, #16]
 80144f8:	3301      	adds	r3, #1
 80144fa:	9304      	str	r3, [sp, #16]
 80144fc:	f108 0801 	add.w	r8, r8, #1
 8014500:	2301      	movs	r3, #1
 8014502:	9306      	str	r3, [sp, #24]
 8014504:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014506:	2b00      	cmp	r3, #0
 8014508:	f47f af74 	bne.w	80143f4 <_dtoa_r+0x7f4>
 801450c:	2001      	movs	r0, #1
 801450e:	e779      	b.n	8014404 <_dtoa_r+0x804>
 8014510:	2300      	movs	r3, #0
 8014512:	e7f6      	b.n	8014502 <_dtoa_r+0x902>
 8014514:	9b02      	ldr	r3, [sp, #8]
 8014516:	e7f4      	b.n	8014502 <_dtoa_r+0x902>
 8014518:	d085      	beq.n	8014426 <_dtoa_r+0x826>
 801451a:	4618      	mov	r0, r3
 801451c:	301c      	adds	r0, #28
 801451e:	e77d      	b.n	801441c <_dtoa_r+0x81c>
 8014520:	40240000 	.word	0x40240000
 8014524:	9b01      	ldr	r3, [sp, #4]
 8014526:	2b00      	cmp	r3, #0
 8014528:	dc38      	bgt.n	801459c <_dtoa_r+0x99c>
 801452a:	9b05      	ldr	r3, [sp, #20]
 801452c:	2b02      	cmp	r3, #2
 801452e:	dd35      	ble.n	801459c <_dtoa_r+0x99c>
 8014530:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8014534:	f1b9 0f00 	cmp.w	r9, #0
 8014538:	d10d      	bne.n	8014556 <_dtoa_r+0x956>
 801453a:	4631      	mov	r1, r6
 801453c:	464b      	mov	r3, r9
 801453e:	2205      	movs	r2, #5
 8014540:	4620      	mov	r0, r4
 8014542:	f000 fbd7 	bl	8014cf4 <__multadd>
 8014546:	4601      	mov	r1, r0
 8014548:	4606      	mov	r6, r0
 801454a:	4658      	mov	r0, fp
 801454c:	f000 fdee 	bl	801512c <__mcmp>
 8014550:	2800      	cmp	r0, #0
 8014552:	f73f adbd 	bgt.w	80140d0 <_dtoa_r+0x4d0>
 8014556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014558:	9d00      	ldr	r5, [sp, #0]
 801455a:	ea6f 0a03 	mvn.w	sl, r3
 801455e:	f04f 0800 	mov.w	r8, #0
 8014562:	4631      	mov	r1, r6
 8014564:	4620      	mov	r0, r4
 8014566:	f000 fba3 	bl	8014cb0 <_Bfree>
 801456a:	2f00      	cmp	r7, #0
 801456c:	f43f aeb4 	beq.w	80142d8 <_dtoa_r+0x6d8>
 8014570:	f1b8 0f00 	cmp.w	r8, #0
 8014574:	d005      	beq.n	8014582 <_dtoa_r+0x982>
 8014576:	45b8      	cmp	r8, r7
 8014578:	d003      	beq.n	8014582 <_dtoa_r+0x982>
 801457a:	4641      	mov	r1, r8
 801457c:	4620      	mov	r0, r4
 801457e:	f000 fb97 	bl	8014cb0 <_Bfree>
 8014582:	4639      	mov	r1, r7
 8014584:	4620      	mov	r0, r4
 8014586:	f000 fb93 	bl	8014cb0 <_Bfree>
 801458a:	e6a5      	b.n	80142d8 <_dtoa_r+0x6d8>
 801458c:	2600      	movs	r6, #0
 801458e:	4637      	mov	r7, r6
 8014590:	e7e1      	b.n	8014556 <_dtoa_r+0x956>
 8014592:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8014594:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8014598:	4637      	mov	r7, r6
 801459a:	e599      	b.n	80140d0 <_dtoa_r+0x4d0>
 801459c:	9b08      	ldr	r3, [sp, #32]
 801459e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	f000 80fd 	beq.w	80147a2 <_dtoa_r+0xba2>
 80145a8:	2d00      	cmp	r5, #0
 80145aa:	dd05      	ble.n	80145b8 <_dtoa_r+0x9b8>
 80145ac:	4639      	mov	r1, r7
 80145ae:	462a      	mov	r2, r5
 80145b0:	4620      	mov	r0, r4
 80145b2:	f000 fd4f 	bl	8015054 <__lshift>
 80145b6:	4607      	mov	r7, r0
 80145b8:	9b06      	ldr	r3, [sp, #24]
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d05c      	beq.n	8014678 <_dtoa_r+0xa78>
 80145be:	6879      	ldr	r1, [r7, #4]
 80145c0:	4620      	mov	r0, r4
 80145c2:	f000 fb35 	bl	8014c30 <_Balloc>
 80145c6:	4605      	mov	r5, r0
 80145c8:	b928      	cbnz	r0, 80145d6 <_dtoa_r+0x9d6>
 80145ca:	4b80      	ldr	r3, [pc, #512]	; (80147cc <_dtoa_r+0xbcc>)
 80145cc:	4602      	mov	r2, r0
 80145ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80145d2:	f7ff bb2e 	b.w	8013c32 <_dtoa_r+0x32>
 80145d6:	693a      	ldr	r2, [r7, #16]
 80145d8:	3202      	adds	r2, #2
 80145da:	0092      	lsls	r2, r2, #2
 80145dc:	f107 010c 	add.w	r1, r7, #12
 80145e0:	300c      	adds	r0, #12
 80145e2:	f7fe fc75 	bl	8012ed0 <memcpy>
 80145e6:	2201      	movs	r2, #1
 80145e8:	4629      	mov	r1, r5
 80145ea:	4620      	mov	r0, r4
 80145ec:	f000 fd32 	bl	8015054 <__lshift>
 80145f0:	9b00      	ldr	r3, [sp, #0]
 80145f2:	3301      	adds	r3, #1
 80145f4:	9301      	str	r3, [sp, #4]
 80145f6:	9b00      	ldr	r3, [sp, #0]
 80145f8:	444b      	add	r3, r9
 80145fa:	9307      	str	r3, [sp, #28]
 80145fc:	9b02      	ldr	r3, [sp, #8]
 80145fe:	f003 0301 	and.w	r3, r3, #1
 8014602:	46b8      	mov	r8, r7
 8014604:	9306      	str	r3, [sp, #24]
 8014606:	4607      	mov	r7, r0
 8014608:	9b01      	ldr	r3, [sp, #4]
 801460a:	4631      	mov	r1, r6
 801460c:	3b01      	subs	r3, #1
 801460e:	4658      	mov	r0, fp
 8014610:	9302      	str	r3, [sp, #8]
 8014612:	f7ff fa67 	bl	8013ae4 <quorem>
 8014616:	4603      	mov	r3, r0
 8014618:	3330      	adds	r3, #48	; 0x30
 801461a:	9004      	str	r0, [sp, #16]
 801461c:	4641      	mov	r1, r8
 801461e:	4658      	mov	r0, fp
 8014620:	9308      	str	r3, [sp, #32]
 8014622:	f000 fd83 	bl	801512c <__mcmp>
 8014626:	463a      	mov	r2, r7
 8014628:	4681      	mov	r9, r0
 801462a:	4631      	mov	r1, r6
 801462c:	4620      	mov	r0, r4
 801462e:	f000 fd99 	bl	8015164 <__mdiff>
 8014632:	68c2      	ldr	r2, [r0, #12]
 8014634:	9b08      	ldr	r3, [sp, #32]
 8014636:	4605      	mov	r5, r0
 8014638:	bb02      	cbnz	r2, 801467c <_dtoa_r+0xa7c>
 801463a:	4601      	mov	r1, r0
 801463c:	4658      	mov	r0, fp
 801463e:	f000 fd75 	bl	801512c <__mcmp>
 8014642:	9b08      	ldr	r3, [sp, #32]
 8014644:	4602      	mov	r2, r0
 8014646:	4629      	mov	r1, r5
 8014648:	4620      	mov	r0, r4
 801464a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801464e:	f000 fb2f 	bl	8014cb0 <_Bfree>
 8014652:	9b05      	ldr	r3, [sp, #20]
 8014654:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014656:	9d01      	ldr	r5, [sp, #4]
 8014658:	ea43 0102 	orr.w	r1, r3, r2
 801465c:	9b06      	ldr	r3, [sp, #24]
 801465e:	430b      	orrs	r3, r1
 8014660:	9b08      	ldr	r3, [sp, #32]
 8014662:	d10d      	bne.n	8014680 <_dtoa_r+0xa80>
 8014664:	2b39      	cmp	r3, #57	; 0x39
 8014666:	d029      	beq.n	80146bc <_dtoa_r+0xabc>
 8014668:	f1b9 0f00 	cmp.w	r9, #0
 801466c:	dd01      	ble.n	8014672 <_dtoa_r+0xa72>
 801466e:	9b04      	ldr	r3, [sp, #16]
 8014670:	3331      	adds	r3, #49	; 0x31
 8014672:	9a02      	ldr	r2, [sp, #8]
 8014674:	7013      	strb	r3, [r2, #0]
 8014676:	e774      	b.n	8014562 <_dtoa_r+0x962>
 8014678:	4638      	mov	r0, r7
 801467a:	e7b9      	b.n	80145f0 <_dtoa_r+0x9f0>
 801467c:	2201      	movs	r2, #1
 801467e:	e7e2      	b.n	8014646 <_dtoa_r+0xa46>
 8014680:	f1b9 0f00 	cmp.w	r9, #0
 8014684:	db06      	blt.n	8014694 <_dtoa_r+0xa94>
 8014686:	9905      	ldr	r1, [sp, #20]
 8014688:	ea41 0909 	orr.w	r9, r1, r9
 801468c:	9906      	ldr	r1, [sp, #24]
 801468e:	ea59 0101 	orrs.w	r1, r9, r1
 8014692:	d120      	bne.n	80146d6 <_dtoa_r+0xad6>
 8014694:	2a00      	cmp	r2, #0
 8014696:	ddec      	ble.n	8014672 <_dtoa_r+0xa72>
 8014698:	4659      	mov	r1, fp
 801469a:	2201      	movs	r2, #1
 801469c:	4620      	mov	r0, r4
 801469e:	9301      	str	r3, [sp, #4]
 80146a0:	f000 fcd8 	bl	8015054 <__lshift>
 80146a4:	4631      	mov	r1, r6
 80146a6:	4683      	mov	fp, r0
 80146a8:	f000 fd40 	bl	801512c <__mcmp>
 80146ac:	2800      	cmp	r0, #0
 80146ae:	9b01      	ldr	r3, [sp, #4]
 80146b0:	dc02      	bgt.n	80146b8 <_dtoa_r+0xab8>
 80146b2:	d1de      	bne.n	8014672 <_dtoa_r+0xa72>
 80146b4:	07da      	lsls	r2, r3, #31
 80146b6:	d5dc      	bpl.n	8014672 <_dtoa_r+0xa72>
 80146b8:	2b39      	cmp	r3, #57	; 0x39
 80146ba:	d1d8      	bne.n	801466e <_dtoa_r+0xa6e>
 80146bc:	9a02      	ldr	r2, [sp, #8]
 80146be:	2339      	movs	r3, #57	; 0x39
 80146c0:	7013      	strb	r3, [r2, #0]
 80146c2:	462b      	mov	r3, r5
 80146c4:	461d      	mov	r5, r3
 80146c6:	3b01      	subs	r3, #1
 80146c8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80146cc:	2a39      	cmp	r2, #57	; 0x39
 80146ce:	d050      	beq.n	8014772 <_dtoa_r+0xb72>
 80146d0:	3201      	adds	r2, #1
 80146d2:	701a      	strb	r2, [r3, #0]
 80146d4:	e745      	b.n	8014562 <_dtoa_r+0x962>
 80146d6:	2a00      	cmp	r2, #0
 80146d8:	dd03      	ble.n	80146e2 <_dtoa_r+0xae2>
 80146da:	2b39      	cmp	r3, #57	; 0x39
 80146dc:	d0ee      	beq.n	80146bc <_dtoa_r+0xabc>
 80146de:	3301      	adds	r3, #1
 80146e0:	e7c7      	b.n	8014672 <_dtoa_r+0xa72>
 80146e2:	9a01      	ldr	r2, [sp, #4]
 80146e4:	9907      	ldr	r1, [sp, #28]
 80146e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80146ea:	428a      	cmp	r2, r1
 80146ec:	d02a      	beq.n	8014744 <_dtoa_r+0xb44>
 80146ee:	4659      	mov	r1, fp
 80146f0:	2300      	movs	r3, #0
 80146f2:	220a      	movs	r2, #10
 80146f4:	4620      	mov	r0, r4
 80146f6:	f000 fafd 	bl	8014cf4 <__multadd>
 80146fa:	45b8      	cmp	r8, r7
 80146fc:	4683      	mov	fp, r0
 80146fe:	f04f 0300 	mov.w	r3, #0
 8014702:	f04f 020a 	mov.w	r2, #10
 8014706:	4641      	mov	r1, r8
 8014708:	4620      	mov	r0, r4
 801470a:	d107      	bne.n	801471c <_dtoa_r+0xb1c>
 801470c:	f000 faf2 	bl	8014cf4 <__multadd>
 8014710:	4680      	mov	r8, r0
 8014712:	4607      	mov	r7, r0
 8014714:	9b01      	ldr	r3, [sp, #4]
 8014716:	3301      	adds	r3, #1
 8014718:	9301      	str	r3, [sp, #4]
 801471a:	e775      	b.n	8014608 <_dtoa_r+0xa08>
 801471c:	f000 faea 	bl	8014cf4 <__multadd>
 8014720:	4639      	mov	r1, r7
 8014722:	4680      	mov	r8, r0
 8014724:	2300      	movs	r3, #0
 8014726:	220a      	movs	r2, #10
 8014728:	4620      	mov	r0, r4
 801472a:	f000 fae3 	bl	8014cf4 <__multadd>
 801472e:	4607      	mov	r7, r0
 8014730:	e7f0      	b.n	8014714 <_dtoa_r+0xb14>
 8014732:	f1b9 0f00 	cmp.w	r9, #0
 8014736:	9a00      	ldr	r2, [sp, #0]
 8014738:	bfcc      	ite	gt
 801473a:	464d      	movgt	r5, r9
 801473c:	2501      	movle	r5, #1
 801473e:	4415      	add	r5, r2
 8014740:	f04f 0800 	mov.w	r8, #0
 8014744:	4659      	mov	r1, fp
 8014746:	2201      	movs	r2, #1
 8014748:	4620      	mov	r0, r4
 801474a:	9301      	str	r3, [sp, #4]
 801474c:	f000 fc82 	bl	8015054 <__lshift>
 8014750:	4631      	mov	r1, r6
 8014752:	4683      	mov	fp, r0
 8014754:	f000 fcea 	bl	801512c <__mcmp>
 8014758:	2800      	cmp	r0, #0
 801475a:	dcb2      	bgt.n	80146c2 <_dtoa_r+0xac2>
 801475c:	d102      	bne.n	8014764 <_dtoa_r+0xb64>
 801475e:	9b01      	ldr	r3, [sp, #4]
 8014760:	07db      	lsls	r3, r3, #31
 8014762:	d4ae      	bmi.n	80146c2 <_dtoa_r+0xac2>
 8014764:	462b      	mov	r3, r5
 8014766:	461d      	mov	r5, r3
 8014768:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801476c:	2a30      	cmp	r2, #48	; 0x30
 801476e:	d0fa      	beq.n	8014766 <_dtoa_r+0xb66>
 8014770:	e6f7      	b.n	8014562 <_dtoa_r+0x962>
 8014772:	9a00      	ldr	r2, [sp, #0]
 8014774:	429a      	cmp	r2, r3
 8014776:	d1a5      	bne.n	80146c4 <_dtoa_r+0xac4>
 8014778:	f10a 0a01 	add.w	sl, sl, #1
 801477c:	2331      	movs	r3, #49	; 0x31
 801477e:	e779      	b.n	8014674 <_dtoa_r+0xa74>
 8014780:	4b13      	ldr	r3, [pc, #76]	; (80147d0 <_dtoa_r+0xbd0>)
 8014782:	f7ff baaf 	b.w	8013ce4 <_dtoa_r+0xe4>
 8014786:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014788:	2b00      	cmp	r3, #0
 801478a:	f47f aa86 	bne.w	8013c9a <_dtoa_r+0x9a>
 801478e:	4b11      	ldr	r3, [pc, #68]	; (80147d4 <_dtoa_r+0xbd4>)
 8014790:	f7ff baa8 	b.w	8013ce4 <_dtoa_r+0xe4>
 8014794:	f1b9 0f00 	cmp.w	r9, #0
 8014798:	dc03      	bgt.n	80147a2 <_dtoa_r+0xba2>
 801479a:	9b05      	ldr	r3, [sp, #20]
 801479c:	2b02      	cmp	r3, #2
 801479e:	f73f aec9 	bgt.w	8014534 <_dtoa_r+0x934>
 80147a2:	9d00      	ldr	r5, [sp, #0]
 80147a4:	4631      	mov	r1, r6
 80147a6:	4658      	mov	r0, fp
 80147a8:	f7ff f99c 	bl	8013ae4 <quorem>
 80147ac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80147b0:	f805 3b01 	strb.w	r3, [r5], #1
 80147b4:	9a00      	ldr	r2, [sp, #0]
 80147b6:	1aaa      	subs	r2, r5, r2
 80147b8:	4591      	cmp	r9, r2
 80147ba:	ddba      	ble.n	8014732 <_dtoa_r+0xb32>
 80147bc:	4659      	mov	r1, fp
 80147be:	2300      	movs	r3, #0
 80147c0:	220a      	movs	r2, #10
 80147c2:	4620      	mov	r0, r4
 80147c4:	f000 fa96 	bl	8014cf4 <__multadd>
 80147c8:	4683      	mov	fp, r0
 80147ca:	e7eb      	b.n	80147a4 <_dtoa_r+0xba4>
 80147cc:	08016cc3 	.word	0x08016cc3
 80147d0:	08016c1c 	.word	0x08016c1c
 80147d4:	08016c40 	.word	0x08016c40

080147d8 <__sflush_r>:
 80147d8:	898a      	ldrh	r2, [r1, #12]
 80147da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147de:	4605      	mov	r5, r0
 80147e0:	0710      	lsls	r0, r2, #28
 80147e2:	460c      	mov	r4, r1
 80147e4:	d458      	bmi.n	8014898 <__sflush_r+0xc0>
 80147e6:	684b      	ldr	r3, [r1, #4]
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	dc05      	bgt.n	80147f8 <__sflush_r+0x20>
 80147ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	dc02      	bgt.n	80147f8 <__sflush_r+0x20>
 80147f2:	2000      	movs	r0, #0
 80147f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80147fa:	2e00      	cmp	r6, #0
 80147fc:	d0f9      	beq.n	80147f2 <__sflush_r+0x1a>
 80147fe:	2300      	movs	r3, #0
 8014800:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014804:	682f      	ldr	r7, [r5, #0]
 8014806:	602b      	str	r3, [r5, #0]
 8014808:	d032      	beq.n	8014870 <__sflush_r+0x98>
 801480a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801480c:	89a3      	ldrh	r3, [r4, #12]
 801480e:	075a      	lsls	r2, r3, #29
 8014810:	d505      	bpl.n	801481e <__sflush_r+0x46>
 8014812:	6863      	ldr	r3, [r4, #4]
 8014814:	1ac0      	subs	r0, r0, r3
 8014816:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014818:	b10b      	cbz	r3, 801481e <__sflush_r+0x46>
 801481a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801481c:	1ac0      	subs	r0, r0, r3
 801481e:	2300      	movs	r3, #0
 8014820:	4602      	mov	r2, r0
 8014822:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014824:	6a21      	ldr	r1, [r4, #32]
 8014826:	4628      	mov	r0, r5
 8014828:	47b0      	blx	r6
 801482a:	1c43      	adds	r3, r0, #1
 801482c:	89a3      	ldrh	r3, [r4, #12]
 801482e:	d106      	bne.n	801483e <__sflush_r+0x66>
 8014830:	6829      	ldr	r1, [r5, #0]
 8014832:	291d      	cmp	r1, #29
 8014834:	d82c      	bhi.n	8014890 <__sflush_r+0xb8>
 8014836:	4a2a      	ldr	r2, [pc, #168]	; (80148e0 <__sflush_r+0x108>)
 8014838:	40ca      	lsrs	r2, r1
 801483a:	07d6      	lsls	r6, r2, #31
 801483c:	d528      	bpl.n	8014890 <__sflush_r+0xb8>
 801483e:	2200      	movs	r2, #0
 8014840:	6062      	str	r2, [r4, #4]
 8014842:	04d9      	lsls	r1, r3, #19
 8014844:	6922      	ldr	r2, [r4, #16]
 8014846:	6022      	str	r2, [r4, #0]
 8014848:	d504      	bpl.n	8014854 <__sflush_r+0x7c>
 801484a:	1c42      	adds	r2, r0, #1
 801484c:	d101      	bne.n	8014852 <__sflush_r+0x7a>
 801484e:	682b      	ldr	r3, [r5, #0]
 8014850:	b903      	cbnz	r3, 8014854 <__sflush_r+0x7c>
 8014852:	6560      	str	r0, [r4, #84]	; 0x54
 8014854:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014856:	602f      	str	r7, [r5, #0]
 8014858:	2900      	cmp	r1, #0
 801485a:	d0ca      	beq.n	80147f2 <__sflush_r+0x1a>
 801485c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014860:	4299      	cmp	r1, r3
 8014862:	d002      	beq.n	801486a <__sflush_r+0x92>
 8014864:	4628      	mov	r0, r5
 8014866:	f000 fd71 	bl	801534c <_free_r>
 801486a:	2000      	movs	r0, #0
 801486c:	6360      	str	r0, [r4, #52]	; 0x34
 801486e:	e7c1      	b.n	80147f4 <__sflush_r+0x1c>
 8014870:	6a21      	ldr	r1, [r4, #32]
 8014872:	2301      	movs	r3, #1
 8014874:	4628      	mov	r0, r5
 8014876:	47b0      	blx	r6
 8014878:	1c41      	adds	r1, r0, #1
 801487a:	d1c7      	bne.n	801480c <__sflush_r+0x34>
 801487c:	682b      	ldr	r3, [r5, #0]
 801487e:	2b00      	cmp	r3, #0
 8014880:	d0c4      	beq.n	801480c <__sflush_r+0x34>
 8014882:	2b1d      	cmp	r3, #29
 8014884:	d001      	beq.n	801488a <__sflush_r+0xb2>
 8014886:	2b16      	cmp	r3, #22
 8014888:	d101      	bne.n	801488e <__sflush_r+0xb6>
 801488a:	602f      	str	r7, [r5, #0]
 801488c:	e7b1      	b.n	80147f2 <__sflush_r+0x1a>
 801488e:	89a3      	ldrh	r3, [r4, #12]
 8014890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014894:	81a3      	strh	r3, [r4, #12]
 8014896:	e7ad      	b.n	80147f4 <__sflush_r+0x1c>
 8014898:	690f      	ldr	r7, [r1, #16]
 801489a:	2f00      	cmp	r7, #0
 801489c:	d0a9      	beq.n	80147f2 <__sflush_r+0x1a>
 801489e:	0793      	lsls	r3, r2, #30
 80148a0:	680e      	ldr	r6, [r1, #0]
 80148a2:	bf08      	it	eq
 80148a4:	694b      	ldreq	r3, [r1, #20]
 80148a6:	600f      	str	r7, [r1, #0]
 80148a8:	bf18      	it	ne
 80148aa:	2300      	movne	r3, #0
 80148ac:	eba6 0807 	sub.w	r8, r6, r7
 80148b0:	608b      	str	r3, [r1, #8]
 80148b2:	f1b8 0f00 	cmp.w	r8, #0
 80148b6:	dd9c      	ble.n	80147f2 <__sflush_r+0x1a>
 80148b8:	6a21      	ldr	r1, [r4, #32]
 80148ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80148bc:	4643      	mov	r3, r8
 80148be:	463a      	mov	r2, r7
 80148c0:	4628      	mov	r0, r5
 80148c2:	47b0      	blx	r6
 80148c4:	2800      	cmp	r0, #0
 80148c6:	dc06      	bgt.n	80148d6 <__sflush_r+0xfe>
 80148c8:	89a3      	ldrh	r3, [r4, #12]
 80148ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80148ce:	81a3      	strh	r3, [r4, #12]
 80148d0:	f04f 30ff 	mov.w	r0, #4294967295
 80148d4:	e78e      	b.n	80147f4 <__sflush_r+0x1c>
 80148d6:	4407      	add	r7, r0
 80148d8:	eba8 0800 	sub.w	r8, r8, r0
 80148dc:	e7e9      	b.n	80148b2 <__sflush_r+0xda>
 80148de:	bf00      	nop
 80148e0:	20400001 	.word	0x20400001

080148e4 <_fflush_r>:
 80148e4:	b538      	push	{r3, r4, r5, lr}
 80148e6:	690b      	ldr	r3, [r1, #16]
 80148e8:	4605      	mov	r5, r0
 80148ea:	460c      	mov	r4, r1
 80148ec:	b913      	cbnz	r3, 80148f4 <_fflush_r+0x10>
 80148ee:	2500      	movs	r5, #0
 80148f0:	4628      	mov	r0, r5
 80148f2:	bd38      	pop	{r3, r4, r5, pc}
 80148f4:	b118      	cbz	r0, 80148fe <_fflush_r+0x1a>
 80148f6:	6983      	ldr	r3, [r0, #24]
 80148f8:	b90b      	cbnz	r3, 80148fe <_fflush_r+0x1a>
 80148fa:	f000 f887 	bl	8014a0c <__sinit>
 80148fe:	4b14      	ldr	r3, [pc, #80]	; (8014950 <_fflush_r+0x6c>)
 8014900:	429c      	cmp	r4, r3
 8014902:	d11b      	bne.n	801493c <_fflush_r+0x58>
 8014904:	686c      	ldr	r4, [r5, #4]
 8014906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801490a:	2b00      	cmp	r3, #0
 801490c:	d0ef      	beq.n	80148ee <_fflush_r+0xa>
 801490e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014910:	07d0      	lsls	r0, r2, #31
 8014912:	d404      	bmi.n	801491e <_fflush_r+0x3a>
 8014914:	0599      	lsls	r1, r3, #22
 8014916:	d402      	bmi.n	801491e <_fflush_r+0x3a>
 8014918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801491a:	f000 f91a 	bl	8014b52 <__retarget_lock_acquire_recursive>
 801491e:	4628      	mov	r0, r5
 8014920:	4621      	mov	r1, r4
 8014922:	f7ff ff59 	bl	80147d8 <__sflush_r>
 8014926:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014928:	07da      	lsls	r2, r3, #31
 801492a:	4605      	mov	r5, r0
 801492c:	d4e0      	bmi.n	80148f0 <_fflush_r+0xc>
 801492e:	89a3      	ldrh	r3, [r4, #12]
 8014930:	059b      	lsls	r3, r3, #22
 8014932:	d4dd      	bmi.n	80148f0 <_fflush_r+0xc>
 8014934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014936:	f000 f90d 	bl	8014b54 <__retarget_lock_release_recursive>
 801493a:	e7d9      	b.n	80148f0 <_fflush_r+0xc>
 801493c:	4b05      	ldr	r3, [pc, #20]	; (8014954 <_fflush_r+0x70>)
 801493e:	429c      	cmp	r4, r3
 8014940:	d101      	bne.n	8014946 <_fflush_r+0x62>
 8014942:	68ac      	ldr	r4, [r5, #8]
 8014944:	e7df      	b.n	8014906 <_fflush_r+0x22>
 8014946:	4b04      	ldr	r3, [pc, #16]	; (8014958 <_fflush_r+0x74>)
 8014948:	429c      	cmp	r4, r3
 801494a:	bf08      	it	eq
 801494c:	68ec      	ldreq	r4, [r5, #12]
 801494e:	e7da      	b.n	8014906 <_fflush_r+0x22>
 8014950:	08016cf4 	.word	0x08016cf4
 8014954:	08016d14 	.word	0x08016d14
 8014958:	08016cd4 	.word	0x08016cd4

0801495c <std>:
 801495c:	2300      	movs	r3, #0
 801495e:	b510      	push	{r4, lr}
 8014960:	4604      	mov	r4, r0
 8014962:	e9c0 3300 	strd	r3, r3, [r0]
 8014966:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801496a:	6083      	str	r3, [r0, #8]
 801496c:	8181      	strh	r1, [r0, #12]
 801496e:	6643      	str	r3, [r0, #100]	; 0x64
 8014970:	81c2      	strh	r2, [r0, #14]
 8014972:	6183      	str	r3, [r0, #24]
 8014974:	4619      	mov	r1, r3
 8014976:	2208      	movs	r2, #8
 8014978:	305c      	adds	r0, #92	; 0x5c
 801497a:	f7fe fab7 	bl	8012eec <memset>
 801497e:	4b05      	ldr	r3, [pc, #20]	; (8014994 <std+0x38>)
 8014980:	6263      	str	r3, [r4, #36]	; 0x24
 8014982:	4b05      	ldr	r3, [pc, #20]	; (8014998 <std+0x3c>)
 8014984:	62a3      	str	r3, [r4, #40]	; 0x28
 8014986:	4b05      	ldr	r3, [pc, #20]	; (801499c <std+0x40>)
 8014988:	62e3      	str	r3, [r4, #44]	; 0x2c
 801498a:	4b05      	ldr	r3, [pc, #20]	; (80149a0 <std+0x44>)
 801498c:	6224      	str	r4, [r4, #32]
 801498e:	6323      	str	r3, [r4, #48]	; 0x30
 8014990:	bd10      	pop	{r4, pc}
 8014992:	bf00      	nop
 8014994:	08015a2d 	.word	0x08015a2d
 8014998:	08015a4f 	.word	0x08015a4f
 801499c:	08015a87 	.word	0x08015a87
 80149a0:	08015aab 	.word	0x08015aab

080149a4 <_cleanup_r>:
 80149a4:	4901      	ldr	r1, [pc, #4]	; (80149ac <_cleanup_r+0x8>)
 80149a6:	f000 b8af 	b.w	8014b08 <_fwalk_reent>
 80149aa:	bf00      	nop
 80149ac:	080148e5 	.word	0x080148e5

080149b0 <__sfmoreglue>:
 80149b0:	b570      	push	{r4, r5, r6, lr}
 80149b2:	1e4a      	subs	r2, r1, #1
 80149b4:	2568      	movs	r5, #104	; 0x68
 80149b6:	4355      	muls	r5, r2
 80149b8:	460e      	mov	r6, r1
 80149ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80149be:	f000 fd15 	bl	80153ec <_malloc_r>
 80149c2:	4604      	mov	r4, r0
 80149c4:	b140      	cbz	r0, 80149d8 <__sfmoreglue+0x28>
 80149c6:	2100      	movs	r1, #0
 80149c8:	e9c0 1600 	strd	r1, r6, [r0]
 80149cc:	300c      	adds	r0, #12
 80149ce:	60a0      	str	r0, [r4, #8]
 80149d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80149d4:	f7fe fa8a 	bl	8012eec <memset>
 80149d8:	4620      	mov	r0, r4
 80149da:	bd70      	pop	{r4, r5, r6, pc}

080149dc <__sfp_lock_acquire>:
 80149dc:	4801      	ldr	r0, [pc, #4]	; (80149e4 <__sfp_lock_acquire+0x8>)
 80149de:	f000 b8b8 	b.w	8014b52 <__retarget_lock_acquire_recursive>
 80149e2:	bf00      	nop
 80149e4:	20002cf0 	.word	0x20002cf0

080149e8 <__sfp_lock_release>:
 80149e8:	4801      	ldr	r0, [pc, #4]	; (80149f0 <__sfp_lock_release+0x8>)
 80149ea:	f000 b8b3 	b.w	8014b54 <__retarget_lock_release_recursive>
 80149ee:	bf00      	nop
 80149f0:	20002cf0 	.word	0x20002cf0

080149f4 <__sinit_lock_acquire>:
 80149f4:	4801      	ldr	r0, [pc, #4]	; (80149fc <__sinit_lock_acquire+0x8>)
 80149f6:	f000 b8ac 	b.w	8014b52 <__retarget_lock_acquire_recursive>
 80149fa:	bf00      	nop
 80149fc:	20002ceb 	.word	0x20002ceb

08014a00 <__sinit_lock_release>:
 8014a00:	4801      	ldr	r0, [pc, #4]	; (8014a08 <__sinit_lock_release+0x8>)
 8014a02:	f000 b8a7 	b.w	8014b54 <__retarget_lock_release_recursive>
 8014a06:	bf00      	nop
 8014a08:	20002ceb 	.word	0x20002ceb

08014a0c <__sinit>:
 8014a0c:	b510      	push	{r4, lr}
 8014a0e:	4604      	mov	r4, r0
 8014a10:	f7ff fff0 	bl	80149f4 <__sinit_lock_acquire>
 8014a14:	69a3      	ldr	r3, [r4, #24]
 8014a16:	b11b      	cbz	r3, 8014a20 <__sinit+0x14>
 8014a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a1c:	f7ff bff0 	b.w	8014a00 <__sinit_lock_release>
 8014a20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014a24:	6523      	str	r3, [r4, #80]	; 0x50
 8014a26:	4b13      	ldr	r3, [pc, #76]	; (8014a74 <__sinit+0x68>)
 8014a28:	4a13      	ldr	r2, [pc, #76]	; (8014a78 <__sinit+0x6c>)
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8014a2e:	42a3      	cmp	r3, r4
 8014a30:	bf04      	itt	eq
 8014a32:	2301      	moveq	r3, #1
 8014a34:	61a3      	streq	r3, [r4, #24]
 8014a36:	4620      	mov	r0, r4
 8014a38:	f000 f820 	bl	8014a7c <__sfp>
 8014a3c:	6060      	str	r0, [r4, #4]
 8014a3e:	4620      	mov	r0, r4
 8014a40:	f000 f81c 	bl	8014a7c <__sfp>
 8014a44:	60a0      	str	r0, [r4, #8]
 8014a46:	4620      	mov	r0, r4
 8014a48:	f000 f818 	bl	8014a7c <__sfp>
 8014a4c:	2200      	movs	r2, #0
 8014a4e:	60e0      	str	r0, [r4, #12]
 8014a50:	2104      	movs	r1, #4
 8014a52:	6860      	ldr	r0, [r4, #4]
 8014a54:	f7ff ff82 	bl	801495c <std>
 8014a58:	68a0      	ldr	r0, [r4, #8]
 8014a5a:	2201      	movs	r2, #1
 8014a5c:	2109      	movs	r1, #9
 8014a5e:	f7ff ff7d 	bl	801495c <std>
 8014a62:	68e0      	ldr	r0, [r4, #12]
 8014a64:	2202      	movs	r2, #2
 8014a66:	2112      	movs	r1, #18
 8014a68:	f7ff ff78 	bl	801495c <std>
 8014a6c:	2301      	movs	r3, #1
 8014a6e:	61a3      	str	r3, [r4, #24]
 8014a70:	e7d2      	b.n	8014a18 <__sinit+0xc>
 8014a72:	bf00      	nop
 8014a74:	08016c08 	.word	0x08016c08
 8014a78:	080149a5 	.word	0x080149a5

08014a7c <__sfp>:
 8014a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a7e:	4607      	mov	r7, r0
 8014a80:	f7ff ffac 	bl	80149dc <__sfp_lock_acquire>
 8014a84:	4b1e      	ldr	r3, [pc, #120]	; (8014b00 <__sfp+0x84>)
 8014a86:	681e      	ldr	r6, [r3, #0]
 8014a88:	69b3      	ldr	r3, [r6, #24]
 8014a8a:	b913      	cbnz	r3, 8014a92 <__sfp+0x16>
 8014a8c:	4630      	mov	r0, r6
 8014a8e:	f7ff ffbd 	bl	8014a0c <__sinit>
 8014a92:	3648      	adds	r6, #72	; 0x48
 8014a94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014a98:	3b01      	subs	r3, #1
 8014a9a:	d503      	bpl.n	8014aa4 <__sfp+0x28>
 8014a9c:	6833      	ldr	r3, [r6, #0]
 8014a9e:	b30b      	cbz	r3, 8014ae4 <__sfp+0x68>
 8014aa0:	6836      	ldr	r6, [r6, #0]
 8014aa2:	e7f7      	b.n	8014a94 <__sfp+0x18>
 8014aa4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014aa8:	b9d5      	cbnz	r5, 8014ae0 <__sfp+0x64>
 8014aaa:	4b16      	ldr	r3, [pc, #88]	; (8014b04 <__sfp+0x88>)
 8014aac:	60e3      	str	r3, [r4, #12]
 8014aae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014ab2:	6665      	str	r5, [r4, #100]	; 0x64
 8014ab4:	f000 f84c 	bl	8014b50 <__retarget_lock_init_recursive>
 8014ab8:	f7ff ff96 	bl	80149e8 <__sfp_lock_release>
 8014abc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014ac0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014ac4:	6025      	str	r5, [r4, #0]
 8014ac6:	61a5      	str	r5, [r4, #24]
 8014ac8:	2208      	movs	r2, #8
 8014aca:	4629      	mov	r1, r5
 8014acc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014ad0:	f7fe fa0c 	bl	8012eec <memset>
 8014ad4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014ad8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014adc:	4620      	mov	r0, r4
 8014ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ae0:	3468      	adds	r4, #104	; 0x68
 8014ae2:	e7d9      	b.n	8014a98 <__sfp+0x1c>
 8014ae4:	2104      	movs	r1, #4
 8014ae6:	4638      	mov	r0, r7
 8014ae8:	f7ff ff62 	bl	80149b0 <__sfmoreglue>
 8014aec:	4604      	mov	r4, r0
 8014aee:	6030      	str	r0, [r6, #0]
 8014af0:	2800      	cmp	r0, #0
 8014af2:	d1d5      	bne.n	8014aa0 <__sfp+0x24>
 8014af4:	f7ff ff78 	bl	80149e8 <__sfp_lock_release>
 8014af8:	230c      	movs	r3, #12
 8014afa:	603b      	str	r3, [r7, #0]
 8014afc:	e7ee      	b.n	8014adc <__sfp+0x60>
 8014afe:	bf00      	nop
 8014b00:	08016c08 	.word	0x08016c08
 8014b04:	ffff0001 	.word	0xffff0001

08014b08 <_fwalk_reent>:
 8014b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014b0c:	4606      	mov	r6, r0
 8014b0e:	4688      	mov	r8, r1
 8014b10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014b14:	2700      	movs	r7, #0
 8014b16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014b1a:	f1b9 0901 	subs.w	r9, r9, #1
 8014b1e:	d505      	bpl.n	8014b2c <_fwalk_reent+0x24>
 8014b20:	6824      	ldr	r4, [r4, #0]
 8014b22:	2c00      	cmp	r4, #0
 8014b24:	d1f7      	bne.n	8014b16 <_fwalk_reent+0xe>
 8014b26:	4638      	mov	r0, r7
 8014b28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b2c:	89ab      	ldrh	r3, [r5, #12]
 8014b2e:	2b01      	cmp	r3, #1
 8014b30:	d907      	bls.n	8014b42 <_fwalk_reent+0x3a>
 8014b32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014b36:	3301      	adds	r3, #1
 8014b38:	d003      	beq.n	8014b42 <_fwalk_reent+0x3a>
 8014b3a:	4629      	mov	r1, r5
 8014b3c:	4630      	mov	r0, r6
 8014b3e:	47c0      	blx	r8
 8014b40:	4307      	orrs	r7, r0
 8014b42:	3568      	adds	r5, #104	; 0x68
 8014b44:	e7e9      	b.n	8014b1a <_fwalk_reent+0x12>
	...

08014b48 <_localeconv_r>:
 8014b48:	4800      	ldr	r0, [pc, #0]	; (8014b4c <_localeconv_r+0x4>)
 8014b4a:	4770      	bx	lr
 8014b4c:	20000bd0 	.word	0x20000bd0

08014b50 <__retarget_lock_init_recursive>:
 8014b50:	4770      	bx	lr

08014b52 <__retarget_lock_acquire_recursive>:
 8014b52:	4770      	bx	lr

08014b54 <__retarget_lock_release_recursive>:
 8014b54:	4770      	bx	lr

08014b56 <__swhatbuf_r>:
 8014b56:	b570      	push	{r4, r5, r6, lr}
 8014b58:	460e      	mov	r6, r1
 8014b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b5e:	2900      	cmp	r1, #0
 8014b60:	b096      	sub	sp, #88	; 0x58
 8014b62:	4614      	mov	r4, r2
 8014b64:	461d      	mov	r5, r3
 8014b66:	da07      	bge.n	8014b78 <__swhatbuf_r+0x22>
 8014b68:	2300      	movs	r3, #0
 8014b6a:	602b      	str	r3, [r5, #0]
 8014b6c:	89b3      	ldrh	r3, [r6, #12]
 8014b6e:	061a      	lsls	r2, r3, #24
 8014b70:	d410      	bmi.n	8014b94 <__swhatbuf_r+0x3e>
 8014b72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014b76:	e00e      	b.n	8014b96 <__swhatbuf_r+0x40>
 8014b78:	466a      	mov	r2, sp
 8014b7a:	f000 ffed 	bl	8015b58 <_fstat_r>
 8014b7e:	2800      	cmp	r0, #0
 8014b80:	dbf2      	blt.n	8014b68 <__swhatbuf_r+0x12>
 8014b82:	9a01      	ldr	r2, [sp, #4]
 8014b84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014b88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014b8c:	425a      	negs	r2, r3
 8014b8e:	415a      	adcs	r2, r3
 8014b90:	602a      	str	r2, [r5, #0]
 8014b92:	e7ee      	b.n	8014b72 <__swhatbuf_r+0x1c>
 8014b94:	2340      	movs	r3, #64	; 0x40
 8014b96:	2000      	movs	r0, #0
 8014b98:	6023      	str	r3, [r4, #0]
 8014b9a:	b016      	add	sp, #88	; 0x58
 8014b9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08014ba0 <__smakebuf_r>:
 8014ba0:	898b      	ldrh	r3, [r1, #12]
 8014ba2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014ba4:	079d      	lsls	r5, r3, #30
 8014ba6:	4606      	mov	r6, r0
 8014ba8:	460c      	mov	r4, r1
 8014baa:	d507      	bpl.n	8014bbc <__smakebuf_r+0x1c>
 8014bac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014bb0:	6023      	str	r3, [r4, #0]
 8014bb2:	6123      	str	r3, [r4, #16]
 8014bb4:	2301      	movs	r3, #1
 8014bb6:	6163      	str	r3, [r4, #20]
 8014bb8:	b002      	add	sp, #8
 8014bba:	bd70      	pop	{r4, r5, r6, pc}
 8014bbc:	ab01      	add	r3, sp, #4
 8014bbe:	466a      	mov	r2, sp
 8014bc0:	f7ff ffc9 	bl	8014b56 <__swhatbuf_r>
 8014bc4:	9900      	ldr	r1, [sp, #0]
 8014bc6:	4605      	mov	r5, r0
 8014bc8:	4630      	mov	r0, r6
 8014bca:	f000 fc0f 	bl	80153ec <_malloc_r>
 8014bce:	b948      	cbnz	r0, 8014be4 <__smakebuf_r+0x44>
 8014bd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014bd4:	059a      	lsls	r2, r3, #22
 8014bd6:	d4ef      	bmi.n	8014bb8 <__smakebuf_r+0x18>
 8014bd8:	f023 0303 	bic.w	r3, r3, #3
 8014bdc:	f043 0302 	orr.w	r3, r3, #2
 8014be0:	81a3      	strh	r3, [r4, #12]
 8014be2:	e7e3      	b.n	8014bac <__smakebuf_r+0xc>
 8014be4:	4b0d      	ldr	r3, [pc, #52]	; (8014c1c <__smakebuf_r+0x7c>)
 8014be6:	62b3      	str	r3, [r6, #40]	; 0x28
 8014be8:	89a3      	ldrh	r3, [r4, #12]
 8014bea:	6020      	str	r0, [r4, #0]
 8014bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014bf0:	81a3      	strh	r3, [r4, #12]
 8014bf2:	9b00      	ldr	r3, [sp, #0]
 8014bf4:	6163      	str	r3, [r4, #20]
 8014bf6:	9b01      	ldr	r3, [sp, #4]
 8014bf8:	6120      	str	r0, [r4, #16]
 8014bfa:	b15b      	cbz	r3, 8014c14 <__smakebuf_r+0x74>
 8014bfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014c00:	4630      	mov	r0, r6
 8014c02:	f000 ffbb 	bl	8015b7c <_isatty_r>
 8014c06:	b128      	cbz	r0, 8014c14 <__smakebuf_r+0x74>
 8014c08:	89a3      	ldrh	r3, [r4, #12]
 8014c0a:	f023 0303 	bic.w	r3, r3, #3
 8014c0e:	f043 0301 	orr.w	r3, r3, #1
 8014c12:	81a3      	strh	r3, [r4, #12]
 8014c14:	89a0      	ldrh	r0, [r4, #12]
 8014c16:	4305      	orrs	r5, r0
 8014c18:	81a5      	strh	r5, [r4, #12]
 8014c1a:	e7cd      	b.n	8014bb8 <__smakebuf_r+0x18>
 8014c1c:	080149a5 	.word	0x080149a5

08014c20 <malloc>:
 8014c20:	4b02      	ldr	r3, [pc, #8]	; (8014c2c <malloc+0xc>)
 8014c22:	4601      	mov	r1, r0
 8014c24:	6818      	ldr	r0, [r3, #0]
 8014c26:	f000 bbe1 	b.w	80153ec <_malloc_r>
 8014c2a:	bf00      	nop
 8014c2c:	20000a7c 	.word	0x20000a7c

08014c30 <_Balloc>:
 8014c30:	b570      	push	{r4, r5, r6, lr}
 8014c32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014c34:	4604      	mov	r4, r0
 8014c36:	460d      	mov	r5, r1
 8014c38:	b976      	cbnz	r6, 8014c58 <_Balloc+0x28>
 8014c3a:	2010      	movs	r0, #16
 8014c3c:	f7ff fff0 	bl	8014c20 <malloc>
 8014c40:	4602      	mov	r2, r0
 8014c42:	6260      	str	r0, [r4, #36]	; 0x24
 8014c44:	b920      	cbnz	r0, 8014c50 <_Balloc+0x20>
 8014c46:	4b18      	ldr	r3, [pc, #96]	; (8014ca8 <_Balloc+0x78>)
 8014c48:	4818      	ldr	r0, [pc, #96]	; (8014cac <_Balloc+0x7c>)
 8014c4a:	2166      	movs	r1, #102	; 0x66
 8014c4c:	f000 ff44 	bl	8015ad8 <__assert_func>
 8014c50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014c54:	6006      	str	r6, [r0, #0]
 8014c56:	60c6      	str	r6, [r0, #12]
 8014c58:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014c5a:	68f3      	ldr	r3, [r6, #12]
 8014c5c:	b183      	cbz	r3, 8014c80 <_Balloc+0x50>
 8014c5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014c60:	68db      	ldr	r3, [r3, #12]
 8014c62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014c66:	b9b8      	cbnz	r0, 8014c98 <_Balloc+0x68>
 8014c68:	2101      	movs	r1, #1
 8014c6a:	fa01 f605 	lsl.w	r6, r1, r5
 8014c6e:	1d72      	adds	r2, r6, #5
 8014c70:	0092      	lsls	r2, r2, #2
 8014c72:	4620      	mov	r0, r4
 8014c74:	f000 fb5a 	bl	801532c <_calloc_r>
 8014c78:	b160      	cbz	r0, 8014c94 <_Balloc+0x64>
 8014c7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014c7e:	e00e      	b.n	8014c9e <_Balloc+0x6e>
 8014c80:	2221      	movs	r2, #33	; 0x21
 8014c82:	2104      	movs	r1, #4
 8014c84:	4620      	mov	r0, r4
 8014c86:	f000 fb51 	bl	801532c <_calloc_r>
 8014c8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014c8c:	60f0      	str	r0, [r6, #12]
 8014c8e:	68db      	ldr	r3, [r3, #12]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d1e4      	bne.n	8014c5e <_Balloc+0x2e>
 8014c94:	2000      	movs	r0, #0
 8014c96:	bd70      	pop	{r4, r5, r6, pc}
 8014c98:	6802      	ldr	r2, [r0, #0]
 8014c9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014c9e:	2300      	movs	r3, #0
 8014ca0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014ca4:	e7f7      	b.n	8014c96 <_Balloc+0x66>
 8014ca6:	bf00      	nop
 8014ca8:	08016c4d 	.word	0x08016c4d
 8014cac:	08016d34 	.word	0x08016d34

08014cb0 <_Bfree>:
 8014cb0:	b570      	push	{r4, r5, r6, lr}
 8014cb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014cb4:	4605      	mov	r5, r0
 8014cb6:	460c      	mov	r4, r1
 8014cb8:	b976      	cbnz	r6, 8014cd8 <_Bfree+0x28>
 8014cba:	2010      	movs	r0, #16
 8014cbc:	f7ff ffb0 	bl	8014c20 <malloc>
 8014cc0:	4602      	mov	r2, r0
 8014cc2:	6268      	str	r0, [r5, #36]	; 0x24
 8014cc4:	b920      	cbnz	r0, 8014cd0 <_Bfree+0x20>
 8014cc6:	4b09      	ldr	r3, [pc, #36]	; (8014cec <_Bfree+0x3c>)
 8014cc8:	4809      	ldr	r0, [pc, #36]	; (8014cf0 <_Bfree+0x40>)
 8014cca:	218a      	movs	r1, #138	; 0x8a
 8014ccc:	f000 ff04 	bl	8015ad8 <__assert_func>
 8014cd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014cd4:	6006      	str	r6, [r0, #0]
 8014cd6:	60c6      	str	r6, [r0, #12]
 8014cd8:	b13c      	cbz	r4, 8014cea <_Bfree+0x3a>
 8014cda:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014cdc:	6862      	ldr	r2, [r4, #4]
 8014cde:	68db      	ldr	r3, [r3, #12]
 8014ce0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014ce4:	6021      	str	r1, [r4, #0]
 8014ce6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014cea:	bd70      	pop	{r4, r5, r6, pc}
 8014cec:	08016c4d 	.word	0x08016c4d
 8014cf0:	08016d34 	.word	0x08016d34

08014cf4 <__multadd>:
 8014cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cf8:	690e      	ldr	r6, [r1, #16]
 8014cfa:	4607      	mov	r7, r0
 8014cfc:	4698      	mov	r8, r3
 8014cfe:	460c      	mov	r4, r1
 8014d00:	f101 0014 	add.w	r0, r1, #20
 8014d04:	2300      	movs	r3, #0
 8014d06:	6805      	ldr	r5, [r0, #0]
 8014d08:	b2a9      	uxth	r1, r5
 8014d0a:	fb02 8101 	mla	r1, r2, r1, r8
 8014d0e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8014d12:	0c2d      	lsrs	r5, r5, #16
 8014d14:	fb02 c505 	mla	r5, r2, r5, ip
 8014d18:	b289      	uxth	r1, r1
 8014d1a:	3301      	adds	r3, #1
 8014d1c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8014d20:	429e      	cmp	r6, r3
 8014d22:	f840 1b04 	str.w	r1, [r0], #4
 8014d26:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8014d2a:	dcec      	bgt.n	8014d06 <__multadd+0x12>
 8014d2c:	f1b8 0f00 	cmp.w	r8, #0
 8014d30:	d022      	beq.n	8014d78 <__multadd+0x84>
 8014d32:	68a3      	ldr	r3, [r4, #8]
 8014d34:	42b3      	cmp	r3, r6
 8014d36:	dc19      	bgt.n	8014d6c <__multadd+0x78>
 8014d38:	6861      	ldr	r1, [r4, #4]
 8014d3a:	4638      	mov	r0, r7
 8014d3c:	3101      	adds	r1, #1
 8014d3e:	f7ff ff77 	bl	8014c30 <_Balloc>
 8014d42:	4605      	mov	r5, r0
 8014d44:	b928      	cbnz	r0, 8014d52 <__multadd+0x5e>
 8014d46:	4602      	mov	r2, r0
 8014d48:	4b0d      	ldr	r3, [pc, #52]	; (8014d80 <__multadd+0x8c>)
 8014d4a:	480e      	ldr	r0, [pc, #56]	; (8014d84 <__multadd+0x90>)
 8014d4c:	21b5      	movs	r1, #181	; 0xb5
 8014d4e:	f000 fec3 	bl	8015ad8 <__assert_func>
 8014d52:	6922      	ldr	r2, [r4, #16]
 8014d54:	3202      	adds	r2, #2
 8014d56:	f104 010c 	add.w	r1, r4, #12
 8014d5a:	0092      	lsls	r2, r2, #2
 8014d5c:	300c      	adds	r0, #12
 8014d5e:	f7fe f8b7 	bl	8012ed0 <memcpy>
 8014d62:	4621      	mov	r1, r4
 8014d64:	4638      	mov	r0, r7
 8014d66:	f7ff ffa3 	bl	8014cb0 <_Bfree>
 8014d6a:	462c      	mov	r4, r5
 8014d6c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8014d70:	3601      	adds	r6, #1
 8014d72:	f8c3 8014 	str.w	r8, [r3, #20]
 8014d76:	6126      	str	r6, [r4, #16]
 8014d78:	4620      	mov	r0, r4
 8014d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d7e:	bf00      	nop
 8014d80:	08016cc3 	.word	0x08016cc3
 8014d84:	08016d34 	.word	0x08016d34

08014d88 <__hi0bits>:
 8014d88:	0c03      	lsrs	r3, r0, #16
 8014d8a:	041b      	lsls	r3, r3, #16
 8014d8c:	b9d3      	cbnz	r3, 8014dc4 <__hi0bits+0x3c>
 8014d8e:	0400      	lsls	r0, r0, #16
 8014d90:	2310      	movs	r3, #16
 8014d92:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014d96:	bf04      	itt	eq
 8014d98:	0200      	lsleq	r0, r0, #8
 8014d9a:	3308      	addeq	r3, #8
 8014d9c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014da0:	bf04      	itt	eq
 8014da2:	0100      	lsleq	r0, r0, #4
 8014da4:	3304      	addeq	r3, #4
 8014da6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014daa:	bf04      	itt	eq
 8014dac:	0080      	lsleq	r0, r0, #2
 8014dae:	3302      	addeq	r3, #2
 8014db0:	2800      	cmp	r0, #0
 8014db2:	db05      	blt.n	8014dc0 <__hi0bits+0x38>
 8014db4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014db8:	f103 0301 	add.w	r3, r3, #1
 8014dbc:	bf08      	it	eq
 8014dbe:	2320      	moveq	r3, #32
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	4770      	bx	lr
 8014dc4:	2300      	movs	r3, #0
 8014dc6:	e7e4      	b.n	8014d92 <__hi0bits+0xa>

08014dc8 <__lo0bits>:
 8014dc8:	6803      	ldr	r3, [r0, #0]
 8014dca:	f013 0207 	ands.w	r2, r3, #7
 8014dce:	4601      	mov	r1, r0
 8014dd0:	d00b      	beq.n	8014dea <__lo0bits+0x22>
 8014dd2:	07da      	lsls	r2, r3, #31
 8014dd4:	d424      	bmi.n	8014e20 <__lo0bits+0x58>
 8014dd6:	0798      	lsls	r0, r3, #30
 8014dd8:	bf49      	itett	mi
 8014dda:	085b      	lsrmi	r3, r3, #1
 8014ddc:	089b      	lsrpl	r3, r3, #2
 8014dde:	2001      	movmi	r0, #1
 8014de0:	600b      	strmi	r3, [r1, #0]
 8014de2:	bf5c      	itt	pl
 8014de4:	600b      	strpl	r3, [r1, #0]
 8014de6:	2002      	movpl	r0, #2
 8014de8:	4770      	bx	lr
 8014dea:	b298      	uxth	r0, r3
 8014dec:	b9b0      	cbnz	r0, 8014e1c <__lo0bits+0x54>
 8014dee:	0c1b      	lsrs	r3, r3, #16
 8014df0:	2010      	movs	r0, #16
 8014df2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014df6:	bf04      	itt	eq
 8014df8:	0a1b      	lsreq	r3, r3, #8
 8014dfa:	3008      	addeq	r0, #8
 8014dfc:	071a      	lsls	r2, r3, #28
 8014dfe:	bf04      	itt	eq
 8014e00:	091b      	lsreq	r3, r3, #4
 8014e02:	3004      	addeq	r0, #4
 8014e04:	079a      	lsls	r2, r3, #30
 8014e06:	bf04      	itt	eq
 8014e08:	089b      	lsreq	r3, r3, #2
 8014e0a:	3002      	addeq	r0, #2
 8014e0c:	07da      	lsls	r2, r3, #31
 8014e0e:	d403      	bmi.n	8014e18 <__lo0bits+0x50>
 8014e10:	085b      	lsrs	r3, r3, #1
 8014e12:	f100 0001 	add.w	r0, r0, #1
 8014e16:	d005      	beq.n	8014e24 <__lo0bits+0x5c>
 8014e18:	600b      	str	r3, [r1, #0]
 8014e1a:	4770      	bx	lr
 8014e1c:	4610      	mov	r0, r2
 8014e1e:	e7e8      	b.n	8014df2 <__lo0bits+0x2a>
 8014e20:	2000      	movs	r0, #0
 8014e22:	4770      	bx	lr
 8014e24:	2020      	movs	r0, #32
 8014e26:	4770      	bx	lr

08014e28 <__i2b>:
 8014e28:	b510      	push	{r4, lr}
 8014e2a:	460c      	mov	r4, r1
 8014e2c:	2101      	movs	r1, #1
 8014e2e:	f7ff feff 	bl	8014c30 <_Balloc>
 8014e32:	4602      	mov	r2, r0
 8014e34:	b928      	cbnz	r0, 8014e42 <__i2b+0x1a>
 8014e36:	4b05      	ldr	r3, [pc, #20]	; (8014e4c <__i2b+0x24>)
 8014e38:	4805      	ldr	r0, [pc, #20]	; (8014e50 <__i2b+0x28>)
 8014e3a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014e3e:	f000 fe4b 	bl	8015ad8 <__assert_func>
 8014e42:	2301      	movs	r3, #1
 8014e44:	6144      	str	r4, [r0, #20]
 8014e46:	6103      	str	r3, [r0, #16]
 8014e48:	bd10      	pop	{r4, pc}
 8014e4a:	bf00      	nop
 8014e4c:	08016cc3 	.word	0x08016cc3
 8014e50:	08016d34 	.word	0x08016d34

08014e54 <__multiply>:
 8014e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e58:	4614      	mov	r4, r2
 8014e5a:	690a      	ldr	r2, [r1, #16]
 8014e5c:	6923      	ldr	r3, [r4, #16]
 8014e5e:	429a      	cmp	r2, r3
 8014e60:	bfb8      	it	lt
 8014e62:	460b      	movlt	r3, r1
 8014e64:	460d      	mov	r5, r1
 8014e66:	bfbc      	itt	lt
 8014e68:	4625      	movlt	r5, r4
 8014e6a:	461c      	movlt	r4, r3
 8014e6c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8014e70:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014e74:	68ab      	ldr	r3, [r5, #8]
 8014e76:	6869      	ldr	r1, [r5, #4]
 8014e78:	eb0a 0709 	add.w	r7, sl, r9
 8014e7c:	42bb      	cmp	r3, r7
 8014e7e:	b085      	sub	sp, #20
 8014e80:	bfb8      	it	lt
 8014e82:	3101      	addlt	r1, #1
 8014e84:	f7ff fed4 	bl	8014c30 <_Balloc>
 8014e88:	b930      	cbnz	r0, 8014e98 <__multiply+0x44>
 8014e8a:	4602      	mov	r2, r0
 8014e8c:	4b42      	ldr	r3, [pc, #264]	; (8014f98 <__multiply+0x144>)
 8014e8e:	4843      	ldr	r0, [pc, #268]	; (8014f9c <__multiply+0x148>)
 8014e90:	f240 115d 	movw	r1, #349	; 0x15d
 8014e94:	f000 fe20 	bl	8015ad8 <__assert_func>
 8014e98:	f100 0614 	add.w	r6, r0, #20
 8014e9c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8014ea0:	4633      	mov	r3, r6
 8014ea2:	2200      	movs	r2, #0
 8014ea4:	4543      	cmp	r3, r8
 8014ea6:	d31e      	bcc.n	8014ee6 <__multiply+0x92>
 8014ea8:	f105 0c14 	add.w	ip, r5, #20
 8014eac:	f104 0314 	add.w	r3, r4, #20
 8014eb0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8014eb4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8014eb8:	9202      	str	r2, [sp, #8]
 8014eba:	ebac 0205 	sub.w	r2, ip, r5
 8014ebe:	3a15      	subs	r2, #21
 8014ec0:	f022 0203 	bic.w	r2, r2, #3
 8014ec4:	3204      	adds	r2, #4
 8014ec6:	f105 0115 	add.w	r1, r5, #21
 8014eca:	458c      	cmp	ip, r1
 8014ecc:	bf38      	it	cc
 8014ece:	2204      	movcc	r2, #4
 8014ed0:	9201      	str	r2, [sp, #4]
 8014ed2:	9a02      	ldr	r2, [sp, #8]
 8014ed4:	9303      	str	r3, [sp, #12]
 8014ed6:	429a      	cmp	r2, r3
 8014ed8:	d808      	bhi.n	8014eec <__multiply+0x98>
 8014eda:	2f00      	cmp	r7, #0
 8014edc:	dc55      	bgt.n	8014f8a <__multiply+0x136>
 8014ede:	6107      	str	r7, [r0, #16]
 8014ee0:	b005      	add	sp, #20
 8014ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ee6:	f843 2b04 	str.w	r2, [r3], #4
 8014eea:	e7db      	b.n	8014ea4 <__multiply+0x50>
 8014eec:	f8b3 a000 	ldrh.w	sl, [r3]
 8014ef0:	f1ba 0f00 	cmp.w	sl, #0
 8014ef4:	d020      	beq.n	8014f38 <__multiply+0xe4>
 8014ef6:	f105 0e14 	add.w	lr, r5, #20
 8014efa:	46b1      	mov	r9, r6
 8014efc:	2200      	movs	r2, #0
 8014efe:	f85e 4b04 	ldr.w	r4, [lr], #4
 8014f02:	f8d9 b000 	ldr.w	fp, [r9]
 8014f06:	b2a1      	uxth	r1, r4
 8014f08:	fa1f fb8b 	uxth.w	fp, fp
 8014f0c:	fb0a b101 	mla	r1, sl, r1, fp
 8014f10:	4411      	add	r1, r2
 8014f12:	f8d9 2000 	ldr.w	r2, [r9]
 8014f16:	0c24      	lsrs	r4, r4, #16
 8014f18:	0c12      	lsrs	r2, r2, #16
 8014f1a:	fb0a 2404 	mla	r4, sl, r4, r2
 8014f1e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8014f22:	b289      	uxth	r1, r1
 8014f24:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8014f28:	45f4      	cmp	ip, lr
 8014f2a:	f849 1b04 	str.w	r1, [r9], #4
 8014f2e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8014f32:	d8e4      	bhi.n	8014efe <__multiply+0xaa>
 8014f34:	9901      	ldr	r1, [sp, #4]
 8014f36:	5072      	str	r2, [r6, r1]
 8014f38:	9a03      	ldr	r2, [sp, #12]
 8014f3a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014f3e:	3304      	adds	r3, #4
 8014f40:	f1b9 0f00 	cmp.w	r9, #0
 8014f44:	d01f      	beq.n	8014f86 <__multiply+0x132>
 8014f46:	6834      	ldr	r4, [r6, #0]
 8014f48:	f105 0114 	add.w	r1, r5, #20
 8014f4c:	46b6      	mov	lr, r6
 8014f4e:	f04f 0a00 	mov.w	sl, #0
 8014f52:	880a      	ldrh	r2, [r1, #0]
 8014f54:	f8be b002 	ldrh.w	fp, [lr, #2]
 8014f58:	fb09 b202 	mla	r2, r9, r2, fp
 8014f5c:	4492      	add	sl, r2
 8014f5e:	b2a4      	uxth	r4, r4
 8014f60:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8014f64:	f84e 4b04 	str.w	r4, [lr], #4
 8014f68:	f851 4b04 	ldr.w	r4, [r1], #4
 8014f6c:	f8be 2000 	ldrh.w	r2, [lr]
 8014f70:	0c24      	lsrs	r4, r4, #16
 8014f72:	fb09 2404 	mla	r4, r9, r4, r2
 8014f76:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8014f7a:	458c      	cmp	ip, r1
 8014f7c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014f80:	d8e7      	bhi.n	8014f52 <__multiply+0xfe>
 8014f82:	9a01      	ldr	r2, [sp, #4]
 8014f84:	50b4      	str	r4, [r6, r2]
 8014f86:	3604      	adds	r6, #4
 8014f88:	e7a3      	b.n	8014ed2 <__multiply+0x7e>
 8014f8a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d1a5      	bne.n	8014ede <__multiply+0x8a>
 8014f92:	3f01      	subs	r7, #1
 8014f94:	e7a1      	b.n	8014eda <__multiply+0x86>
 8014f96:	bf00      	nop
 8014f98:	08016cc3 	.word	0x08016cc3
 8014f9c:	08016d34 	.word	0x08016d34

08014fa0 <__pow5mult>:
 8014fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014fa4:	4615      	mov	r5, r2
 8014fa6:	f012 0203 	ands.w	r2, r2, #3
 8014faa:	4606      	mov	r6, r0
 8014fac:	460f      	mov	r7, r1
 8014fae:	d007      	beq.n	8014fc0 <__pow5mult+0x20>
 8014fb0:	4c25      	ldr	r4, [pc, #148]	; (8015048 <__pow5mult+0xa8>)
 8014fb2:	3a01      	subs	r2, #1
 8014fb4:	2300      	movs	r3, #0
 8014fb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014fba:	f7ff fe9b 	bl	8014cf4 <__multadd>
 8014fbe:	4607      	mov	r7, r0
 8014fc0:	10ad      	asrs	r5, r5, #2
 8014fc2:	d03d      	beq.n	8015040 <__pow5mult+0xa0>
 8014fc4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014fc6:	b97c      	cbnz	r4, 8014fe8 <__pow5mult+0x48>
 8014fc8:	2010      	movs	r0, #16
 8014fca:	f7ff fe29 	bl	8014c20 <malloc>
 8014fce:	4602      	mov	r2, r0
 8014fd0:	6270      	str	r0, [r6, #36]	; 0x24
 8014fd2:	b928      	cbnz	r0, 8014fe0 <__pow5mult+0x40>
 8014fd4:	4b1d      	ldr	r3, [pc, #116]	; (801504c <__pow5mult+0xac>)
 8014fd6:	481e      	ldr	r0, [pc, #120]	; (8015050 <__pow5mult+0xb0>)
 8014fd8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014fdc:	f000 fd7c 	bl	8015ad8 <__assert_func>
 8014fe0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014fe4:	6004      	str	r4, [r0, #0]
 8014fe6:	60c4      	str	r4, [r0, #12]
 8014fe8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014fec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014ff0:	b94c      	cbnz	r4, 8015006 <__pow5mult+0x66>
 8014ff2:	f240 2171 	movw	r1, #625	; 0x271
 8014ff6:	4630      	mov	r0, r6
 8014ff8:	f7ff ff16 	bl	8014e28 <__i2b>
 8014ffc:	2300      	movs	r3, #0
 8014ffe:	f8c8 0008 	str.w	r0, [r8, #8]
 8015002:	4604      	mov	r4, r0
 8015004:	6003      	str	r3, [r0, #0]
 8015006:	f04f 0900 	mov.w	r9, #0
 801500a:	07eb      	lsls	r3, r5, #31
 801500c:	d50a      	bpl.n	8015024 <__pow5mult+0x84>
 801500e:	4639      	mov	r1, r7
 8015010:	4622      	mov	r2, r4
 8015012:	4630      	mov	r0, r6
 8015014:	f7ff ff1e 	bl	8014e54 <__multiply>
 8015018:	4639      	mov	r1, r7
 801501a:	4680      	mov	r8, r0
 801501c:	4630      	mov	r0, r6
 801501e:	f7ff fe47 	bl	8014cb0 <_Bfree>
 8015022:	4647      	mov	r7, r8
 8015024:	106d      	asrs	r5, r5, #1
 8015026:	d00b      	beq.n	8015040 <__pow5mult+0xa0>
 8015028:	6820      	ldr	r0, [r4, #0]
 801502a:	b938      	cbnz	r0, 801503c <__pow5mult+0x9c>
 801502c:	4622      	mov	r2, r4
 801502e:	4621      	mov	r1, r4
 8015030:	4630      	mov	r0, r6
 8015032:	f7ff ff0f 	bl	8014e54 <__multiply>
 8015036:	6020      	str	r0, [r4, #0]
 8015038:	f8c0 9000 	str.w	r9, [r0]
 801503c:	4604      	mov	r4, r0
 801503e:	e7e4      	b.n	801500a <__pow5mult+0x6a>
 8015040:	4638      	mov	r0, r7
 8015042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015046:	bf00      	nop
 8015048:	08016e88 	.word	0x08016e88
 801504c:	08016c4d 	.word	0x08016c4d
 8015050:	08016d34 	.word	0x08016d34

08015054 <__lshift>:
 8015054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015058:	460c      	mov	r4, r1
 801505a:	6849      	ldr	r1, [r1, #4]
 801505c:	6923      	ldr	r3, [r4, #16]
 801505e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015062:	68a3      	ldr	r3, [r4, #8]
 8015064:	4607      	mov	r7, r0
 8015066:	4691      	mov	r9, r2
 8015068:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801506c:	f108 0601 	add.w	r6, r8, #1
 8015070:	42b3      	cmp	r3, r6
 8015072:	db0b      	blt.n	801508c <__lshift+0x38>
 8015074:	4638      	mov	r0, r7
 8015076:	f7ff fddb 	bl	8014c30 <_Balloc>
 801507a:	4605      	mov	r5, r0
 801507c:	b948      	cbnz	r0, 8015092 <__lshift+0x3e>
 801507e:	4602      	mov	r2, r0
 8015080:	4b28      	ldr	r3, [pc, #160]	; (8015124 <__lshift+0xd0>)
 8015082:	4829      	ldr	r0, [pc, #164]	; (8015128 <__lshift+0xd4>)
 8015084:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015088:	f000 fd26 	bl	8015ad8 <__assert_func>
 801508c:	3101      	adds	r1, #1
 801508e:	005b      	lsls	r3, r3, #1
 8015090:	e7ee      	b.n	8015070 <__lshift+0x1c>
 8015092:	2300      	movs	r3, #0
 8015094:	f100 0114 	add.w	r1, r0, #20
 8015098:	f100 0210 	add.w	r2, r0, #16
 801509c:	4618      	mov	r0, r3
 801509e:	4553      	cmp	r3, sl
 80150a0:	db33      	blt.n	801510a <__lshift+0xb6>
 80150a2:	6920      	ldr	r0, [r4, #16]
 80150a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80150a8:	f104 0314 	add.w	r3, r4, #20
 80150ac:	f019 091f 	ands.w	r9, r9, #31
 80150b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80150b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80150b8:	d02b      	beq.n	8015112 <__lshift+0xbe>
 80150ba:	f1c9 0e20 	rsb	lr, r9, #32
 80150be:	468a      	mov	sl, r1
 80150c0:	2200      	movs	r2, #0
 80150c2:	6818      	ldr	r0, [r3, #0]
 80150c4:	fa00 f009 	lsl.w	r0, r0, r9
 80150c8:	4302      	orrs	r2, r0
 80150ca:	f84a 2b04 	str.w	r2, [sl], #4
 80150ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80150d2:	459c      	cmp	ip, r3
 80150d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80150d8:	d8f3      	bhi.n	80150c2 <__lshift+0x6e>
 80150da:	ebac 0304 	sub.w	r3, ip, r4
 80150de:	3b15      	subs	r3, #21
 80150e0:	f023 0303 	bic.w	r3, r3, #3
 80150e4:	3304      	adds	r3, #4
 80150e6:	f104 0015 	add.w	r0, r4, #21
 80150ea:	4584      	cmp	ip, r0
 80150ec:	bf38      	it	cc
 80150ee:	2304      	movcc	r3, #4
 80150f0:	50ca      	str	r2, [r1, r3]
 80150f2:	b10a      	cbz	r2, 80150f8 <__lshift+0xa4>
 80150f4:	f108 0602 	add.w	r6, r8, #2
 80150f8:	3e01      	subs	r6, #1
 80150fa:	4638      	mov	r0, r7
 80150fc:	612e      	str	r6, [r5, #16]
 80150fe:	4621      	mov	r1, r4
 8015100:	f7ff fdd6 	bl	8014cb0 <_Bfree>
 8015104:	4628      	mov	r0, r5
 8015106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801510a:	f842 0f04 	str.w	r0, [r2, #4]!
 801510e:	3301      	adds	r3, #1
 8015110:	e7c5      	b.n	801509e <__lshift+0x4a>
 8015112:	3904      	subs	r1, #4
 8015114:	f853 2b04 	ldr.w	r2, [r3], #4
 8015118:	f841 2f04 	str.w	r2, [r1, #4]!
 801511c:	459c      	cmp	ip, r3
 801511e:	d8f9      	bhi.n	8015114 <__lshift+0xc0>
 8015120:	e7ea      	b.n	80150f8 <__lshift+0xa4>
 8015122:	bf00      	nop
 8015124:	08016cc3 	.word	0x08016cc3
 8015128:	08016d34 	.word	0x08016d34

0801512c <__mcmp>:
 801512c:	b530      	push	{r4, r5, lr}
 801512e:	6902      	ldr	r2, [r0, #16]
 8015130:	690c      	ldr	r4, [r1, #16]
 8015132:	1b12      	subs	r2, r2, r4
 8015134:	d10e      	bne.n	8015154 <__mcmp+0x28>
 8015136:	f100 0314 	add.w	r3, r0, #20
 801513a:	3114      	adds	r1, #20
 801513c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015140:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015144:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015148:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801514c:	42a5      	cmp	r5, r4
 801514e:	d003      	beq.n	8015158 <__mcmp+0x2c>
 8015150:	d305      	bcc.n	801515e <__mcmp+0x32>
 8015152:	2201      	movs	r2, #1
 8015154:	4610      	mov	r0, r2
 8015156:	bd30      	pop	{r4, r5, pc}
 8015158:	4283      	cmp	r3, r0
 801515a:	d3f3      	bcc.n	8015144 <__mcmp+0x18>
 801515c:	e7fa      	b.n	8015154 <__mcmp+0x28>
 801515e:	f04f 32ff 	mov.w	r2, #4294967295
 8015162:	e7f7      	b.n	8015154 <__mcmp+0x28>

08015164 <__mdiff>:
 8015164:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015168:	460c      	mov	r4, r1
 801516a:	4606      	mov	r6, r0
 801516c:	4611      	mov	r1, r2
 801516e:	4620      	mov	r0, r4
 8015170:	4617      	mov	r7, r2
 8015172:	f7ff ffdb 	bl	801512c <__mcmp>
 8015176:	1e05      	subs	r5, r0, #0
 8015178:	d110      	bne.n	801519c <__mdiff+0x38>
 801517a:	4629      	mov	r1, r5
 801517c:	4630      	mov	r0, r6
 801517e:	f7ff fd57 	bl	8014c30 <_Balloc>
 8015182:	b930      	cbnz	r0, 8015192 <__mdiff+0x2e>
 8015184:	4b39      	ldr	r3, [pc, #228]	; (801526c <__mdiff+0x108>)
 8015186:	4602      	mov	r2, r0
 8015188:	f240 2132 	movw	r1, #562	; 0x232
 801518c:	4838      	ldr	r0, [pc, #224]	; (8015270 <__mdiff+0x10c>)
 801518e:	f000 fca3 	bl	8015ad8 <__assert_func>
 8015192:	2301      	movs	r3, #1
 8015194:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015198:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801519c:	bfa4      	itt	ge
 801519e:	463b      	movge	r3, r7
 80151a0:	4627      	movge	r7, r4
 80151a2:	4630      	mov	r0, r6
 80151a4:	6879      	ldr	r1, [r7, #4]
 80151a6:	bfa6      	itte	ge
 80151a8:	461c      	movge	r4, r3
 80151aa:	2500      	movge	r5, #0
 80151ac:	2501      	movlt	r5, #1
 80151ae:	f7ff fd3f 	bl	8014c30 <_Balloc>
 80151b2:	b920      	cbnz	r0, 80151be <__mdiff+0x5a>
 80151b4:	4b2d      	ldr	r3, [pc, #180]	; (801526c <__mdiff+0x108>)
 80151b6:	4602      	mov	r2, r0
 80151b8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80151bc:	e7e6      	b.n	801518c <__mdiff+0x28>
 80151be:	693e      	ldr	r6, [r7, #16]
 80151c0:	60c5      	str	r5, [r0, #12]
 80151c2:	6925      	ldr	r5, [r4, #16]
 80151c4:	f107 0114 	add.w	r1, r7, #20
 80151c8:	f104 0914 	add.w	r9, r4, #20
 80151cc:	f100 0e14 	add.w	lr, r0, #20
 80151d0:	f107 0210 	add.w	r2, r7, #16
 80151d4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80151d8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80151dc:	46f2      	mov	sl, lr
 80151de:	2700      	movs	r7, #0
 80151e0:	f859 3b04 	ldr.w	r3, [r9], #4
 80151e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80151e8:	fa1f f883 	uxth.w	r8, r3
 80151ec:	fa17 f78b 	uxtah	r7, r7, fp
 80151f0:	0c1b      	lsrs	r3, r3, #16
 80151f2:	eba7 0808 	sub.w	r8, r7, r8
 80151f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80151fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80151fe:	fa1f f888 	uxth.w	r8, r8
 8015202:	141f      	asrs	r7, r3, #16
 8015204:	454d      	cmp	r5, r9
 8015206:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801520a:	f84a 3b04 	str.w	r3, [sl], #4
 801520e:	d8e7      	bhi.n	80151e0 <__mdiff+0x7c>
 8015210:	1b2b      	subs	r3, r5, r4
 8015212:	3b15      	subs	r3, #21
 8015214:	f023 0303 	bic.w	r3, r3, #3
 8015218:	3304      	adds	r3, #4
 801521a:	3415      	adds	r4, #21
 801521c:	42a5      	cmp	r5, r4
 801521e:	bf38      	it	cc
 8015220:	2304      	movcc	r3, #4
 8015222:	4419      	add	r1, r3
 8015224:	4473      	add	r3, lr
 8015226:	469e      	mov	lr, r3
 8015228:	460d      	mov	r5, r1
 801522a:	4565      	cmp	r5, ip
 801522c:	d30e      	bcc.n	801524c <__mdiff+0xe8>
 801522e:	f10c 0203 	add.w	r2, ip, #3
 8015232:	1a52      	subs	r2, r2, r1
 8015234:	f022 0203 	bic.w	r2, r2, #3
 8015238:	3903      	subs	r1, #3
 801523a:	458c      	cmp	ip, r1
 801523c:	bf38      	it	cc
 801523e:	2200      	movcc	r2, #0
 8015240:	441a      	add	r2, r3
 8015242:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015246:	b17b      	cbz	r3, 8015268 <__mdiff+0x104>
 8015248:	6106      	str	r6, [r0, #16]
 801524a:	e7a5      	b.n	8015198 <__mdiff+0x34>
 801524c:	f855 8b04 	ldr.w	r8, [r5], #4
 8015250:	fa17 f488 	uxtah	r4, r7, r8
 8015254:	1422      	asrs	r2, r4, #16
 8015256:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801525a:	b2a4      	uxth	r4, r4
 801525c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8015260:	f84e 4b04 	str.w	r4, [lr], #4
 8015264:	1417      	asrs	r7, r2, #16
 8015266:	e7e0      	b.n	801522a <__mdiff+0xc6>
 8015268:	3e01      	subs	r6, #1
 801526a:	e7ea      	b.n	8015242 <__mdiff+0xde>
 801526c:	08016cc3 	.word	0x08016cc3
 8015270:	08016d34 	.word	0x08016d34

08015274 <__d2b>:
 8015274:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015278:	4689      	mov	r9, r1
 801527a:	2101      	movs	r1, #1
 801527c:	ec57 6b10 	vmov	r6, r7, d0
 8015280:	4690      	mov	r8, r2
 8015282:	f7ff fcd5 	bl	8014c30 <_Balloc>
 8015286:	4604      	mov	r4, r0
 8015288:	b930      	cbnz	r0, 8015298 <__d2b+0x24>
 801528a:	4602      	mov	r2, r0
 801528c:	4b25      	ldr	r3, [pc, #148]	; (8015324 <__d2b+0xb0>)
 801528e:	4826      	ldr	r0, [pc, #152]	; (8015328 <__d2b+0xb4>)
 8015290:	f240 310a 	movw	r1, #778	; 0x30a
 8015294:	f000 fc20 	bl	8015ad8 <__assert_func>
 8015298:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801529c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80152a0:	bb35      	cbnz	r5, 80152f0 <__d2b+0x7c>
 80152a2:	2e00      	cmp	r6, #0
 80152a4:	9301      	str	r3, [sp, #4]
 80152a6:	d028      	beq.n	80152fa <__d2b+0x86>
 80152a8:	4668      	mov	r0, sp
 80152aa:	9600      	str	r6, [sp, #0]
 80152ac:	f7ff fd8c 	bl	8014dc8 <__lo0bits>
 80152b0:	9900      	ldr	r1, [sp, #0]
 80152b2:	b300      	cbz	r0, 80152f6 <__d2b+0x82>
 80152b4:	9a01      	ldr	r2, [sp, #4]
 80152b6:	f1c0 0320 	rsb	r3, r0, #32
 80152ba:	fa02 f303 	lsl.w	r3, r2, r3
 80152be:	430b      	orrs	r3, r1
 80152c0:	40c2      	lsrs	r2, r0
 80152c2:	6163      	str	r3, [r4, #20]
 80152c4:	9201      	str	r2, [sp, #4]
 80152c6:	9b01      	ldr	r3, [sp, #4]
 80152c8:	61a3      	str	r3, [r4, #24]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	bf14      	ite	ne
 80152ce:	2202      	movne	r2, #2
 80152d0:	2201      	moveq	r2, #1
 80152d2:	6122      	str	r2, [r4, #16]
 80152d4:	b1d5      	cbz	r5, 801530c <__d2b+0x98>
 80152d6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80152da:	4405      	add	r5, r0
 80152dc:	f8c9 5000 	str.w	r5, [r9]
 80152e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80152e4:	f8c8 0000 	str.w	r0, [r8]
 80152e8:	4620      	mov	r0, r4
 80152ea:	b003      	add	sp, #12
 80152ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80152f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80152f4:	e7d5      	b.n	80152a2 <__d2b+0x2e>
 80152f6:	6161      	str	r1, [r4, #20]
 80152f8:	e7e5      	b.n	80152c6 <__d2b+0x52>
 80152fa:	a801      	add	r0, sp, #4
 80152fc:	f7ff fd64 	bl	8014dc8 <__lo0bits>
 8015300:	9b01      	ldr	r3, [sp, #4]
 8015302:	6163      	str	r3, [r4, #20]
 8015304:	2201      	movs	r2, #1
 8015306:	6122      	str	r2, [r4, #16]
 8015308:	3020      	adds	r0, #32
 801530a:	e7e3      	b.n	80152d4 <__d2b+0x60>
 801530c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015310:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015314:	f8c9 0000 	str.w	r0, [r9]
 8015318:	6918      	ldr	r0, [r3, #16]
 801531a:	f7ff fd35 	bl	8014d88 <__hi0bits>
 801531e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015322:	e7df      	b.n	80152e4 <__d2b+0x70>
 8015324:	08016cc3 	.word	0x08016cc3
 8015328:	08016d34 	.word	0x08016d34

0801532c <_calloc_r>:
 801532c:	b513      	push	{r0, r1, r4, lr}
 801532e:	434a      	muls	r2, r1
 8015330:	4611      	mov	r1, r2
 8015332:	9201      	str	r2, [sp, #4]
 8015334:	f000 f85a 	bl	80153ec <_malloc_r>
 8015338:	4604      	mov	r4, r0
 801533a:	b118      	cbz	r0, 8015344 <_calloc_r+0x18>
 801533c:	9a01      	ldr	r2, [sp, #4]
 801533e:	2100      	movs	r1, #0
 8015340:	f7fd fdd4 	bl	8012eec <memset>
 8015344:	4620      	mov	r0, r4
 8015346:	b002      	add	sp, #8
 8015348:	bd10      	pop	{r4, pc}
	...

0801534c <_free_r>:
 801534c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801534e:	2900      	cmp	r1, #0
 8015350:	d048      	beq.n	80153e4 <_free_r+0x98>
 8015352:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015356:	9001      	str	r0, [sp, #4]
 8015358:	2b00      	cmp	r3, #0
 801535a:	f1a1 0404 	sub.w	r4, r1, #4
 801535e:	bfb8      	it	lt
 8015360:	18e4      	addlt	r4, r4, r3
 8015362:	f000 fc59 	bl	8015c18 <__malloc_lock>
 8015366:	4a20      	ldr	r2, [pc, #128]	; (80153e8 <_free_r+0x9c>)
 8015368:	9801      	ldr	r0, [sp, #4]
 801536a:	6813      	ldr	r3, [r2, #0]
 801536c:	4615      	mov	r5, r2
 801536e:	b933      	cbnz	r3, 801537e <_free_r+0x32>
 8015370:	6063      	str	r3, [r4, #4]
 8015372:	6014      	str	r4, [r2, #0]
 8015374:	b003      	add	sp, #12
 8015376:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801537a:	f000 bc53 	b.w	8015c24 <__malloc_unlock>
 801537e:	42a3      	cmp	r3, r4
 8015380:	d90b      	bls.n	801539a <_free_r+0x4e>
 8015382:	6821      	ldr	r1, [r4, #0]
 8015384:	1862      	adds	r2, r4, r1
 8015386:	4293      	cmp	r3, r2
 8015388:	bf04      	itt	eq
 801538a:	681a      	ldreq	r2, [r3, #0]
 801538c:	685b      	ldreq	r3, [r3, #4]
 801538e:	6063      	str	r3, [r4, #4]
 8015390:	bf04      	itt	eq
 8015392:	1852      	addeq	r2, r2, r1
 8015394:	6022      	streq	r2, [r4, #0]
 8015396:	602c      	str	r4, [r5, #0]
 8015398:	e7ec      	b.n	8015374 <_free_r+0x28>
 801539a:	461a      	mov	r2, r3
 801539c:	685b      	ldr	r3, [r3, #4]
 801539e:	b10b      	cbz	r3, 80153a4 <_free_r+0x58>
 80153a0:	42a3      	cmp	r3, r4
 80153a2:	d9fa      	bls.n	801539a <_free_r+0x4e>
 80153a4:	6811      	ldr	r1, [r2, #0]
 80153a6:	1855      	adds	r5, r2, r1
 80153a8:	42a5      	cmp	r5, r4
 80153aa:	d10b      	bne.n	80153c4 <_free_r+0x78>
 80153ac:	6824      	ldr	r4, [r4, #0]
 80153ae:	4421      	add	r1, r4
 80153b0:	1854      	adds	r4, r2, r1
 80153b2:	42a3      	cmp	r3, r4
 80153b4:	6011      	str	r1, [r2, #0]
 80153b6:	d1dd      	bne.n	8015374 <_free_r+0x28>
 80153b8:	681c      	ldr	r4, [r3, #0]
 80153ba:	685b      	ldr	r3, [r3, #4]
 80153bc:	6053      	str	r3, [r2, #4]
 80153be:	4421      	add	r1, r4
 80153c0:	6011      	str	r1, [r2, #0]
 80153c2:	e7d7      	b.n	8015374 <_free_r+0x28>
 80153c4:	d902      	bls.n	80153cc <_free_r+0x80>
 80153c6:	230c      	movs	r3, #12
 80153c8:	6003      	str	r3, [r0, #0]
 80153ca:	e7d3      	b.n	8015374 <_free_r+0x28>
 80153cc:	6825      	ldr	r5, [r4, #0]
 80153ce:	1961      	adds	r1, r4, r5
 80153d0:	428b      	cmp	r3, r1
 80153d2:	bf04      	itt	eq
 80153d4:	6819      	ldreq	r1, [r3, #0]
 80153d6:	685b      	ldreq	r3, [r3, #4]
 80153d8:	6063      	str	r3, [r4, #4]
 80153da:	bf04      	itt	eq
 80153dc:	1949      	addeq	r1, r1, r5
 80153de:	6021      	streq	r1, [r4, #0]
 80153e0:	6054      	str	r4, [r2, #4]
 80153e2:	e7c7      	b.n	8015374 <_free_r+0x28>
 80153e4:	b003      	add	sp, #12
 80153e6:	bd30      	pop	{r4, r5, pc}
 80153e8:	20001930 	.word	0x20001930

080153ec <_malloc_r>:
 80153ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153ee:	1ccd      	adds	r5, r1, #3
 80153f0:	f025 0503 	bic.w	r5, r5, #3
 80153f4:	3508      	adds	r5, #8
 80153f6:	2d0c      	cmp	r5, #12
 80153f8:	bf38      	it	cc
 80153fa:	250c      	movcc	r5, #12
 80153fc:	2d00      	cmp	r5, #0
 80153fe:	4606      	mov	r6, r0
 8015400:	db01      	blt.n	8015406 <_malloc_r+0x1a>
 8015402:	42a9      	cmp	r1, r5
 8015404:	d903      	bls.n	801540e <_malloc_r+0x22>
 8015406:	230c      	movs	r3, #12
 8015408:	6033      	str	r3, [r6, #0]
 801540a:	2000      	movs	r0, #0
 801540c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801540e:	f000 fc03 	bl	8015c18 <__malloc_lock>
 8015412:	4921      	ldr	r1, [pc, #132]	; (8015498 <_malloc_r+0xac>)
 8015414:	680a      	ldr	r2, [r1, #0]
 8015416:	4614      	mov	r4, r2
 8015418:	b99c      	cbnz	r4, 8015442 <_malloc_r+0x56>
 801541a:	4f20      	ldr	r7, [pc, #128]	; (801549c <_malloc_r+0xb0>)
 801541c:	683b      	ldr	r3, [r7, #0]
 801541e:	b923      	cbnz	r3, 801542a <_malloc_r+0x3e>
 8015420:	4621      	mov	r1, r4
 8015422:	4630      	mov	r0, r6
 8015424:	f000 faf2 	bl	8015a0c <_sbrk_r>
 8015428:	6038      	str	r0, [r7, #0]
 801542a:	4629      	mov	r1, r5
 801542c:	4630      	mov	r0, r6
 801542e:	f000 faed 	bl	8015a0c <_sbrk_r>
 8015432:	1c43      	adds	r3, r0, #1
 8015434:	d123      	bne.n	801547e <_malloc_r+0x92>
 8015436:	230c      	movs	r3, #12
 8015438:	6033      	str	r3, [r6, #0]
 801543a:	4630      	mov	r0, r6
 801543c:	f000 fbf2 	bl	8015c24 <__malloc_unlock>
 8015440:	e7e3      	b.n	801540a <_malloc_r+0x1e>
 8015442:	6823      	ldr	r3, [r4, #0]
 8015444:	1b5b      	subs	r3, r3, r5
 8015446:	d417      	bmi.n	8015478 <_malloc_r+0x8c>
 8015448:	2b0b      	cmp	r3, #11
 801544a:	d903      	bls.n	8015454 <_malloc_r+0x68>
 801544c:	6023      	str	r3, [r4, #0]
 801544e:	441c      	add	r4, r3
 8015450:	6025      	str	r5, [r4, #0]
 8015452:	e004      	b.n	801545e <_malloc_r+0x72>
 8015454:	6863      	ldr	r3, [r4, #4]
 8015456:	42a2      	cmp	r2, r4
 8015458:	bf0c      	ite	eq
 801545a:	600b      	streq	r3, [r1, #0]
 801545c:	6053      	strne	r3, [r2, #4]
 801545e:	4630      	mov	r0, r6
 8015460:	f000 fbe0 	bl	8015c24 <__malloc_unlock>
 8015464:	f104 000b 	add.w	r0, r4, #11
 8015468:	1d23      	adds	r3, r4, #4
 801546a:	f020 0007 	bic.w	r0, r0, #7
 801546e:	1ac2      	subs	r2, r0, r3
 8015470:	d0cc      	beq.n	801540c <_malloc_r+0x20>
 8015472:	1a1b      	subs	r3, r3, r0
 8015474:	50a3      	str	r3, [r4, r2]
 8015476:	e7c9      	b.n	801540c <_malloc_r+0x20>
 8015478:	4622      	mov	r2, r4
 801547a:	6864      	ldr	r4, [r4, #4]
 801547c:	e7cc      	b.n	8015418 <_malloc_r+0x2c>
 801547e:	1cc4      	adds	r4, r0, #3
 8015480:	f024 0403 	bic.w	r4, r4, #3
 8015484:	42a0      	cmp	r0, r4
 8015486:	d0e3      	beq.n	8015450 <_malloc_r+0x64>
 8015488:	1a21      	subs	r1, r4, r0
 801548a:	4630      	mov	r0, r6
 801548c:	f000 fabe 	bl	8015a0c <_sbrk_r>
 8015490:	3001      	adds	r0, #1
 8015492:	d1dd      	bne.n	8015450 <_malloc_r+0x64>
 8015494:	e7cf      	b.n	8015436 <_malloc_r+0x4a>
 8015496:	bf00      	nop
 8015498:	20001930 	.word	0x20001930
 801549c:	20001934 	.word	0x20001934

080154a0 <__ssputs_r>:
 80154a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80154a4:	688e      	ldr	r6, [r1, #8]
 80154a6:	429e      	cmp	r6, r3
 80154a8:	4682      	mov	sl, r0
 80154aa:	460c      	mov	r4, r1
 80154ac:	4690      	mov	r8, r2
 80154ae:	461f      	mov	r7, r3
 80154b0:	d838      	bhi.n	8015524 <__ssputs_r+0x84>
 80154b2:	898a      	ldrh	r2, [r1, #12]
 80154b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80154b8:	d032      	beq.n	8015520 <__ssputs_r+0x80>
 80154ba:	6825      	ldr	r5, [r4, #0]
 80154bc:	6909      	ldr	r1, [r1, #16]
 80154be:	eba5 0901 	sub.w	r9, r5, r1
 80154c2:	6965      	ldr	r5, [r4, #20]
 80154c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80154c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80154cc:	3301      	adds	r3, #1
 80154ce:	444b      	add	r3, r9
 80154d0:	106d      	asrs	r5, r5, #1
 80154d2:	429d      	cmp	r5, r3
 80154d4:	bf38      	it	cc
 80154d6:	461d      	movcc	r5, r3
 80154d8:	0553      	lsls	r3, r2, #21
 80154da:	d531      	bpl.n	8015540 <__ssputs_r+0xa0>
 80154dc:	4629      	mov	r1, r5
 80154de:	f7ff ff85 	bl	80153ec <_malloc_r>
 80154e2:	4606      	mov	r6, r0
 80154e4:	b950      	cbnz	r0, 80154fc <__ssputs_r+0x5c>
 80154e6:	230c      	movs	r3, #12
 80154e8:	f8ca 3000 	str.w	r3, [sl]
 80154ec:	89a3      	ldrh	r3, [r4, #12]
 80154ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80154f2:	81a3      	strh	r3, [r4, #12]
 80154f4:	f04f 30ff 	mov.w	r0, #4294967295
 80154f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80154fc:	6921      	ldr	r1, [r4, #16]
 80154fe:	464a      	mov	r2, r9
 8015500:	f7fd fce6 	bl	8012ed0 <memcpy>
 8015504:	89a3      	ldrh	r3, [r4, #12]
 8015506:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801550a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801550e:	81a3      	strh	r3, [r4, #12]
 8015510:	6126      	str	r6, [r4, #16]
 8015512:	6165      	str	r5, [r4, #20]
 8015514:	444e      	add	r6, r9
 8015516:	eba5 0509 	sub.w	r5, r5, r9
 801551a:	6026      	str	r6, [r4, #0]
 801551c:	60a5      	str	r5, [r4, #8]
 801551e:	463e      	mov	r6, r7
 8015520:	42be      	cmp	r6, r7
 8015522:	d900      	bls.n	8015526 <__ssputs_r+0x86>
 8015524:	463e      	mov	r6, r7
 8015526:	4632      	mov	r2, r6
 8015528:	6820      	ldr	r0, [r4, #0]
 801552a:	4641      	mov	r1, r8
 801552c:	f000 fb5a 	bl	8015be4 <memmove>
 8015530:	68a3      	ldr	r3, [r4, #8]
 8015532:	6822      	ldr	r2, [r4, #0]
 8015534:	1b9b      	subs	r3, r3, r6
 8015536:	4432      	add	r2, r6
 8015538:	60a3      	str	r3, [r4, #8]
 801553a:	6022      	str	r2, [r4, #0]
 801553c:	2000      	movs	r0, #0
 801553e:	e7db      	b.n	80154f8 <__ssputs_r+0x58>
 8015540:	462a      	mov	r2, r5
 8015542:	f000 fb75 	bl	8015c30 <_realloc_r>
 8015546:	4606      	mov	r6, r0
 8015548:	2800      	cmp	r0, #0
 801554a:	d1e1      	bne.n	8015510 <__ssputs_r+0x70>
 801554c:	6921      	ldr	r1, [r4, #16]
 801554e:	4650      	mov	r0, sl
 8015550:	f7ff fefc 	bl	801534c <_free_r>
 8015554:	e7c7      	b.n	80154e6 <__ssputs_r+0x46>
	...

08015558 <_svfiprintf_r>:
 8015558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801555c:	4698      	mov	r8, r3
 801555e:	898b      	ldrh	r3, [r1, #12]
 8015560:	061b      	lsls	r3, r3, #24
 8015562:	b09d      	sub	sp, #116	; 0x74
 8015564:	4607      	mov	r7, r0
 8015566:	460d      	mov	r5, r1
 8015568:	4614      	mov	r4, r2
 801556a:	d50e      	bpl.n	801558a <_svfiprintf_r+0x32>
 801556c:	690b      	ldr	r3, [r1, #16]
 801556e:	b963      	cbnz	r3, 801558a <_svfiprintf_r+0x32>
 8015570:	2140      	movs	r1, #64	; 0x40
 8015572:	f7ff ff3b 	bl	80153ec <_malloc_r>
 8015576:	6028      	str	r0, [r5, #0]
 8015578:	6128      	str	r0, [r5, #16]
 801557a:	b920      	cbnz	r0, 8015586 <_svfiprintf_r+0x2e>
 801557c:	230c      	movs	r3, #12
 801557e:	603b      	str	r3, [r7, #0]
 8015580:	f04f 30ff 	mov.w	r0, #4294967295
 8015584:	e0d1      	b.n	801572a <_svfiprintf_r+0x1d2>
 8015586:	2340      	movs	r3, #64	; 0x40
 8015588:	616b      	str	r3, [r5, #20]
 801558a:	2300      	movs	r3, #0
 801558c:	9309      	str	r3, [sp, #36]	; 0x24
 801558e:	2320      	movs	r3, #32
 8015590:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015594:	f8cd 800c 	str.w	r8, [sp, #12]
 8015598:	2330      	movs	r3, #48	; 0x30
 801559a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015744 <_svfiprintf_r+0x1ec>
 801559e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80155a2:	f04f 0901 	mov.w	r9, #1
 80155a6:	4623      	mov	r3, r4
 80155a8:	469a      	mov	sl, r3
 80155aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80155ae:	b10a      	cbz	r2, 80155b4 <_svfiprintf_r+0x5c>
 80155b0:	2a25      	cmp	r2, #37	; 0x25
 80155b2:	d1f9      	bne.n	80155a8 <_svfiprintf_r+0x50>
 80155b4:	ebba 0b04 	subs.w	fp, sl, r4
 80155b8:	d00b      	beq.n	80155d2 <_svfiprintf_r+0x7a>
 80155ba:	465b      	mov	r3, fp
 80155bc:	4622      	mov	r2, r4
 80155be:	4629      	mov	r1, r5
 80155c0:	4638      	mov	r0, r7
 80155c2:	f7ff ff6d 	bl	80154a0 <__ssputs_r>
 80155c6:	3001      	adds	r0, #1
 80155c8:	f000 80aa 	beq.w	8015720 <_svfiprintf_r+0x1c8>
 80155cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80155ce:	445a      	add	r2, fp
 80155d0:	9209      	str	r2, [sp, #36]	; 0x24
 80155d2:	f89a 3000 	ldrb.w	r3, [sl]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	f000 80a2 	beq.w	8015720 <_svfiprintf_r+0x1c8>
 80155dc:	2300      	movs	r3, #0
 80155de:	f04f 32ff 	mov.w	r2, #4294967295
 80155e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80155e6:	f10a 0a01 	add.w	sl, sl, #1
 80155ea:	9304      	str	r3, [sp, #16]
 80155ec:	9307      	str	r3, [sp, #28]
 80155ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80155f2:	931a      	str	r3, [sp, #104]	; 0x68
 80155f4:	4654      	mov	r4, sl
 80155f6:	2205      	movs	r2, #5
 80155f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80155fc:	4851      	ldr	r0, [pc, #324]	; (8015744 <_svfiprintf_r+0x1ec>)
 80155fe:	f7ea fdef 	bl	80001e0 <memchr>
 8015602:	9a04      	ldr	r2, [sp, #16]
 8015604:	b9d8      	cbnz	r0, 801563e <_svfiprintf_r+0xe6>
 8015606:	06d0      	lsls	r0, r2, #27
 8015608:	bf44      	itt	mi
 801560a:	2320      	movmi	r3, #32
 801560c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015610:	0711      	lsls	r1, r2, #28
 8015612:	bf44      	itt	mi
 8015614:	232b      	movmi	r3, #43	; 0x2b
 8015616:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801561a:	f89a 3000 	ldrb.w	r3, [sl]
 801561e:	2b2a      	cmp	r3, #42	; 0x2a
 8015620:	d015      	beq.n	801564e <_svfiprintf_r+0xf6>
 8015622:	9a07      	ldr	r2, [sp, #28]
 8015624:	4654      	mov	r4, sl
 8015626:	2000      	movs	r0, #0
 8015628:	f04f 0c0a 	mov.w	ip, #10
 801562c:	4621      	mov	r1, r4
 801562e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015632:	3b30      	subs	r3, #48	; 0x30
 8015634:	2b09      	cmp	r3, #9
 8015636:	d94e      	bls.n	80156d6 <_svfiprintf_r+0x17e>
 8015638:	b1b0      	cbz	r0, 8015668 <_svfiprintf_r+0x110>
 801563a:	9207      	str	r2, [sp, #28]
 801563c:	e014      	b.n	8015668 <_svfiprintf_r+0x110>
 801563e:	eba0 0308 	sub.w	r3, r0, r8
 8015642:	fa09 f303 	lsl.w	r3, r9, r3
 8015646:	4313      	orrs	r3, r2
 8015648:	9304      	str	r3, [sp, #16]
 801564a:	46a2      	mov	sl, r4
 801564c:	e7d2      	b.n	80155f4 <_svfiprintf_r+0x9c>
 801564e:	9b03      	ldr	r3, [sp, #12]
 8015650:	1d19      	adds	r1, r3, #4
 8015652:	681b      	ldr	r3, [r3, #0]
 8015654:	9103      	str	r1, [sp, #12]
 8015656:	2b00      	cmp	r3, #0
 8015658:	bfbb      	ittet	lt
 801565a:	425b      	neglt	r3, r3
 801565c:	f042 0202 	orrlt.w	r2, r2, #2
 8015660:	9307      	strge	r3, [sp, #28]
 8015662:	9307      	strlt	r3, [sp, #28]
 8015664:	bfb8      	it	lt
 8015666:	9204      	strlt	r2, [sp, #16]
 8015668:	7823      	ldrb	r3, [r4, #0]
 801566a:	2b2e      	cmp	r3, #46	; 0x2e
 801566c:	d10c      	bne.n	8015688 <_svfiprintf_r+0x130>
 801566e:	7863      	ldrb	r3, [r4, #1]
 8015670:	2b2a      	cmp	r3, #42	; 0x2a
 8015672:	d135      	bne.n	80156e0 <_svfiprintf_r+0x188>
 8015674:	9b03      	ldr	r3, [sp, #12]
 8015676:	1d1a      	adds	r2, r3, #4
 8015678:	681b      	ldr	r3, [r3, #0]
 801567a:	9203      	str	r2, [sp, #12]
 801567c:	2b00      	cmp	r3, #0
 801567e:	bfb8      	it	lt
 8015680:	f04f 33ff 	movlt.w	r3, #4294967295
 8015684:	3402      	adds	r4, #2
 8015686:	9305      	str	r3, [sp, #20]
 8015688:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015754 <_svfiprintf_r+0x1fc>
 801568c:	7821      	ldrb	r1, [r4, #0]
 801568e:	2203      	movs	r2, #3
 8015690:	4650      	mov	r0, sl
 8015692:	f7ea fda5 	bl	80001e0 <memchr>
 8015696:	b140      	cbz	r0, 80156aa <_svfiprintf_r+0x152>
 8015698:	2340      	movs	r3, #64	; 0x40
 801569a:	eba0 000a 	sub.w	r0, r0, sl
 801569e:	fa03 f000 	lsl.w	r0, r3, r0
 80156a2:	9b04      	ldr	r3, [sp, #16]
 80156a4:	4303      	orrs	r3, r0
 80156a6:	3401      	adds	r4, #1
 80156a8:	9304      	str	r3, [sp, #16]
 80156aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80156ae:	4826      	ldr	r0, [pc, #152]	; (8015748 <_svfiprintf_r+0x1f0>)
 80156b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80156b4:	2206      	movs	r2, #6
 80156b6:	f7ea fd93 	bl	80001e0 <memchr>
 80156ba:	2800      	cmp	r0, #0
 80156bc:	d038      	beq.n	8015730 <_svfiprintf_r+0x1d8>
 80156be:	4b23      	ldr	r3, [pc, #140]	; (801574c <_svfiprintf_r+0x1f4>)
 80156c0:	bb1b      	cbnz	r3, 801570a <_svfiprintf_r+0x1b2>
 80156c2:	9b03      	ldr	r3, [sp, #12]
 80156c4:	3307      	adds	r3, #7
 80156c6:	f023 0307 	bic.w	r3, r3, #7
 80156ca:	3308      	adds	r3, #8
 80156cc:	9303      	str	r3, [sp, #12]
 80156ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156d0:	4433      	add	r3, r6
 80156d2:	9309      	str	r3, [sp, #36]	; 0x24
 80156d4:	e767      	b.n	80155a6 <_svfiprintf_r+0x4e>
 80156d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80156da:	460c      	mov	r4, r1
 80156dc:	2001      	movs	r0, #1
 80156de:	e7a5      	b.n	801562c <_svfiprintf_r+0xd4>
 80156e0:	2300      	movs	r3, #0
 80156e2:	3401      	adds	r4, #1
 80156e4:	9305      	str	r3, [sp, #20]
 80156e6:	4619      	mov	r1, r3
 80156e8:	f04f 0c0a 	mov.w	ip, #10
 80156ec:	4620      	mov	r0, r4
 80156ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80156f2:	3a30      	subs	r2, #48	; 0x30
 80156f4:	2a09      	cmp	r2, #9
 80156f6:	d903      	bls.n	8015700 <_svfiprintf_r+0x1a8>
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d0c5      	beq.n	8015688 <_svfiprintf_r+0x130>
 80156fc:	9105      	str	r1, [sp, #20]
 80156fe:	e7c3      	b.n	8015688 <_svfiprintf_r+0x130>
 8015700:	fb0c 2101 	mla	r1, ip, r1, r2
 8015704:	4604      	mov	r4, r0
 8015706:	2301      	movs	r3, #1
 8015708:	e7f0      	b.n	80156ec <_svfiprintf_r+0x194>
 801570a:	ab03      	add	r3, sp, #12
 801570c:	9300      	str	r3, [sp, #0]
 801570e:	462a      	mov	r2, r5
 8015710:	4b0f      	ldr	r3, [pc, #60]	; (8015750 <_svfiprintf_r+0x1f8>)
 8015712:	a904      	add	r1, sp, #16
 8015714:	4638      	mov	r0, r7
 8015716:	f7fd fc91 	bl	801303c <_printf_float>
 801571a:	1c42      	adds	r2, r0, #1
 801571c:	4606      	mov	r6, r0
 801571e:	d1d6      	bne.n	80156ce <_svfiprintf_r+0x176>
 8015720:	89ab      	ldrh	r3, [r5, #12]
 8015722:	065b      	lsls	r3, r3, #25
 8015724:	f53f af2c 	bmi.w	8015580 <_svfiprintf_r+0x28>
 8015728:	9809      	ldr	r0, [sp, #36]	; 0x24
 801572a:	b01d      	add	sp, #116	; 0x74
 801572c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015730:	ab03      	add	r3, sp, #12
 8015732:	9300      	str	r3, [sp, #0]
 8015734:	462a      	mov	r2, r5
 8015736:	4b06      	ldr	r3, [pc, #24]	; (8015750 <_svfiprintf_r+0x1f8>)
 8015738:	a904      	add	r1, sp, #16
 801573a:	4638      	mov	r0, r7
 801573c:	f7fd ff22 	bl	8013584 <_printf_i>
 8015740:	e7eb      	b.n	801571a <_svfiprintf_r+0x1c2>
 8015742:	bf00      	nop
 8015744:	08016e94 	.word	0x08016e94
 8015748:	08016e9e 	.word	0x08016e9e
 801574c:	0801303d 	.word	0x0801303d
 8015750:	080154a1 	.word	0x080154a1
 8015754:	08016e9a 	.word	0x08016e9a

08015758 <__sfputc_r>:
 8015758:	6893      	ldr	r3, [r2, #8]
 801575a:	3b01      	subs	r3, #1
 801575c:	2b00      	cmp	r3, #0
 801575e:	b410      	push	{r4}
 8015760:	6093      	str	r3, [r2, #8]
 8015762:	da08      	bge.n	8015776 <__sfputc_r+0x1e>
 8015764:	6994      	ldr	r4, [r2, #24]
 8015766:	42a3      	cmp	r3, r4
 8015768:	db01      	blt.n	801576e <__sfputc_r+0x16>
 801576a:	290a      	cmp	r1, #10
 801576c:	d103      	bne.n	8015776 <__sfputc_r+0x1e>
 801576e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015772:	f7fe b8f7 	b.w	8013964 <__swbuf_r>
 8015776:	6813      	ldr	r3, [r2, #0]
 8015778:	1c58      	adds	r0, r3, #1
 801577a:	6010      	str	r0, [r2, #0]
 801577c:	7019      	strb	r1, [r3, #0]
 801577e:	4608      	mov	r0, r1
 8015780:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015784:	4770      	bx	lr

08015786 <__sfputs_r>:
 8015786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015788:	4606      	mov	r6, r0
 801578a:	460f      	mov	r7, r1
 801578c:	4614      	mov	r4, r2
 801578e:	18d5      	adds	r5, r2, r3
 8015790:	42ac      	cmp	r4, r5
 8015792:	d101      	bne.n	8015798 <__sfputs_r+0x12>
 8015794:	2000      	movs	r0, #0
 8015796:	e007      	b.n	80157a8 <__sfputs_r+0x22>
 8015798:	f814 1b01 	ldrb.w	r1, [r4], #1
 801579c:	463a      	mov	r2, r7
 801579e:	4630      	mov	r0, r6
 80157a0:	f7ff ffda 	bl	8015758 <__sfputc_r>
 80157a4:	1c43      	adds	r3, r0, #1
 80157a6:	d1f3      	bne.n	8015790 <__sfputs_r+0xa>
 80157a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080157ac <_vfiprintf_r>:
 80157ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157b0:	460d      	mov	r5, r1
 80157b2:	b09d      	sub	sp, #116	; 0x74
 80157b4:	4614      	mov	r4, r2
 80157b6:	4698      	mov	r8, r3
 80157b8:	4606      	mov	r6, r0
 80157ba:	b118      	cbz	r0, 80157c4 <_vfiprintf_r+0x18>
 80157bc:	6983      	ldr	r3, [r0, #24]
 80157be:	b90b      	cbnz	r3, 80157c4 <_vfiprintf_r+0x18>
 80157c0:	f7ff f924 	bl	8014a0c <__sinit>
 80157c4:	4b89      	ldr	r3, [pc, #548]	; (80159ec <_vfiprintf_r+0x240>)
 80157c6:	429d      	cmp	r5, r3
 80157c8:	d11b      	bne.n	8015802 <_vfiprintf_r+0x56>
 80157ca:	6875      	ldr	r5, [r6, #4]
 80157cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80157ce:	07d9      	lsls	r1, r3, #31
 80157d0:	d405      	bmi.n	80157de <_vfiprintf_r+0x32>
 80157d2:	89ab      	ldrh	r3, [r5, #12]
 80157d4:	059a      	lsls	r2, r3, #22
 80157d6:	d402      	bmi.n	80157de <_vfiprintf_r+0x32>
 80157d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80157da:	f7ff f9ba 	bl	8014b52 <__retarget_lock_acquire_recursive>
 80157de:	89ab      	ldrh	r3, [r5, #12]
 80157e0:	071b      	lsls	r3, r3, #28
 80157e2:	d501      	bpl.n	80157e8 <_vfiprintf_r+0x3c>
 80157e4:	692b      	ldr	r3, [r5, #16]
 80157e6:	b9eb      	cbnz	r3, 8015824 <_vfiprintf_r+0x78>
 80157e8:	4629      	mov	r1, r5
 80157ea:	4630      	mov	r0, r6
 80157ec:	f7fe f90c 	bl	8013a08 <__swsetup_r>
 80157f0:	b1c0      	cbz	r0, 8015824 <_vfiprintf_r+0x78>
 80157f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80157f4:	07dc      	lsls	r4, r3, #31
 80157f6:	d50e      	bpl.n	8015816 <_vfiprintf_r+0x6a>
 80157f8:	f04f 30ff 	mov.w	r0, #4294967295
 80157fc:	b01d      	add	sp, #116	; 0x74
 80157fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015802:	4b7b      	ldr	r3, [pc, #492]	; (80159f0 <_vfiprintf_r+0x244>)
 8015804:	429d      	cmp	r5, r3
 8015806:	d101      	bne.n	801580c <_vfiprintf_r+0x60>
 8015808:	68b5      	ldr	r5, [r6, #8]
 801580a:	e7df      	b.n	80157cc <_vfiprintf_r+0x20>
 801580c:	4b79      	ldr	r3, [pc, #484]	; (80159f4 <_vfiprintf_r+0x248>)
 801580e:	429d      	cmp	r5, r3
 8015810:	bf08      	it	eq
 8015812:	68f5      	ldreq	r5, [r6, #12]
 8015814:	e7da      	b.n	80157cc <_vfiprintf_r+0x20>
 8015816:	89ab      	ldrh	r3, [r5, #12]
 8015818:	0598      	lsls	r0, r3, #22
 801581a:	d4ed      	bmi.n	80157f8 <_vfiprintf_r+0x4c>
 801581c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801581e:	f7ff f999 	bl	8014b54 <__retarget_lock_release_recursive>
 8015822:	e7e9      	b.n	80157f8 <_vfiprintf_r+0x4c>
 8015824:	2300      	movs	r3, #0
 8015826:	9309      	str	r3, [sp, #36]	; 0x24
 8015828:	2320      	movs	r3, #32
 801582a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801582e:	f8cd 800c 	str.w	r8, [sp, #12]
 8015832:	2330      	movs	r3, #48	; 0x30
 8015834:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80159f8 <_vfiprintf_r+0x24c>
 8015838:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801583c:	f04f 0901 	mov.w	r9, #1
 8015840:	4623      	mov	r3, r4
 8015842:	469a      	mov	sl, r3
 8015844:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015848:	b10a      	cbz	r2, 801584e <_vfiprintf_r+0xa2>
 801584a:	2a25      	cmp	r2, #37	; 0x25
 801584c:	d1f9      	bne.n	8015842 <_vfiprintf_r+0x96>
 801584e:	ebba 0b04 	subs.w	fp, sl, r4
 8015852:	d00b      	beq.n	801586c <_vfiprintf_r+0xc0>
 8015854:	465b      	mov	r3, fp
 8015856:	4622      	mov	r2, r4
 8015858:	4629      	mov	r1, r5
 801585a:	4630      	mov	r0, r6
 801585c:	f7ff ff93 	bl	8015786 <__sfputs_r>
 8015860:	3001      	adds	r0, #1
 8015862:	f000 80aa 	beq.w	80159ba <_vfiprintf_r+0x20e>
 8015866:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015868:	445a      	add	r2, fp
 801586a:	9209      	str	r2, [sp, #36]	; 0x24
 801586c:	f89a 3000 	ldrb.w	r3, [sl]
 8015870:	2b00      	cmp	r3, #0
 8015872:	f000 80a2 	beq.w	80159ba <_vfiprintf_r+0x20e>
 8015876:	2300      	movs	r3, #0
 8015878:	f04f 32ff 	mov.w	r2, #4294967295
 801587c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015880:	f10a 0a01 	add.w	sl, sl, #1
 8015884:	9304      	str	r3, [sp, #16]
 8015886:	9307      	str	r3, [sp, #28]
 8015888:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801588c:	931a      	str	r3, [sp, #104]	; 0x68
 801588e:	4654      	mov	r4, sl
 8015890:	2205      	movs	r2, #5
 8015892:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015896:	4858      	ldr	r0, [pc, #352]	; (80159f8 <_vfiprintf_r+0x24c>)
 8015898:	f7ea fca2 	bl	80001e0 <memchr>
 801589c:	9a04      	ldr	r2, [sp, #16]
 801589e:	b9d8      	cbnz	r0, 80158d8 <_vfiprintf_r+0x12c>
 80158a0:	06d1      	lsls	r1, r2, #27
 80158a2:	bf44      	itt	mi
 80158a4:	2320      	movmi	r3, #32
 80158a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80158aa:	0713      	lsls	r3, r2, #28
 80158ac:	bf44      	itt	mi
 80158ae:	232b      	movmi	r3, #43	; 0x2b
 80158b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80158b4:	f89a 3000 	ldrb.w	r3, [sl]
 80158b8:	2b2a      	cmp	r3, #42	; 0x2a
 80158ba:	d015      	beq.n	80158e8 <_vfiprintf_r+0x13c>
 80158bc:	9a07      	ldr	r2, [sp, #28]
 80158be:	4654      	mov	r4, sl
 80158c0:	2000      	movs	r0, #0
 80158c2:	f04f 0c0a 	mov.w	ip, #10
 80158c6:	4621      	mov	r1, r4
 80158c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80158cc:	3b30      	subs	r3, #48	; 0x30
 80158ce:	2b09      	cmp	r3, #9
 80158d0:	d94e      	bls.n	8015970 <_vfiprintf_r+0x1c4>
 80158d2:	b1b0      	cbz	r0, 8015902 <_vfiprintf_r+0x156>
 80158d4:	9207      	str	r2, [sp, #28]
 80158d6:	e014      	b.n	8015902 <_vfiprintf_r+0x156>
 80158d8:	eba0 0308 	sub.w	r3, r0, r8
 80158dc:	fa09 f303 	lsl.w	r3, r9, r3
 80158e0:	4313      	orrs	r3, r2
 80158e2:	9304      	str	r3, [sp, #16]
 80158e4:	46a2      	mov	sl, r4
 80158e6:	e7d2      	b.n	801588e <_vfiprintf_r+0xe2>
 80158e8:	9b03      	ldr	r3, [sp, #12]
 80158ea:	1d19      	adds	r1, r3, #4
 80158ec:	681b      	ldr	r3, [r3, #0]
 80158ee:	9103      	str	r1, [sp, #12]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	bfbb      	ittet	lt
 80158f4:	425b      	neglt	r3, r3
 80158f6:	f042 0202 	orrlt.w	r2, r2, #2
 80158fa:	9307      	strge	r3, [sp, #28]
 80158fc:	9307      	strlt	r3, [sp, #28]
 80158fe:	bfb8      	it	lt
 8015900:	9204      	strlt	r2, [sp, #16]
 8015902:	7823      	ldrb	r3, [r4, #0]
 8015904:	2b2e      	cmp	r3, #46	; 0x2e
 8015906:	d10c      	bne.n	8015922 <_vfiprintf_r+0x176>
 8015908:	7863      	ldrb	r3, [r4, #1]
 801590a:	2b2a      	cmp	r3, #42	; 0x2a
 801590c:	d135      	bne.n	801597a <_vfiprintf_r+0x1ce>
 801590e:	9b03      	ldr	r3, [sp, #12]
 8015910:	1d1a      	adds	r2, r3, #4
 8015912:	681b      	ldr	r3, [r3, #0]
 8015914:	9203      	str	r2, [sp, #12]
 8015916:	2b00      	cmp	r3, #0
 8015918:	bfb8      	it	lt
 801591a:	f04f 33ff 	movlt.w	r3, #4294967295
 801591e:	3402      	adds	r4, #2
 8015920:	9305      	str	r3, [sp, #20]
 8015922:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015a08 <_vfiprintf_r+0x25c>
 8015926:	7821      	ldrb	r1, [r4, #0]
 8015928:	2203      	movs	r2, #3
 801592a:	4650      	mov	r0, sl
 801592c:	f7ea fc58 	bl	80001e0 <memchr>
 8015930:	b140      	cbz	r0, 8015944 <_vfiprintf_r+0x198>
 8015932:	2340      	movs	r3, #64	; 0x40
 8015934:	eba0 000a 	sub.w	r0, r0, sl
 8015938:	fa03 f000 	lsl.w	r0, r3, r0
 801593c:	9b04      	ldr	r3, [sp, #16]
 801593e:	4303      	orrs	r3, r0
 8015940:	3401      	adds	r4, #1
 8015942:	9304      	str	r3, [sp, #16]
 8015944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015948:	482c      	ldr	r0, [pc, #176]	; (80159fc <_vfiprintf_r+0x250>)
 801594a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801594e:	2206      	movs	r2, #6
 8015950:	f7ea fc46 	bl	80001e0 <memchr>
 8015954:	2800      	cmp	r0, #0
 8015956:	d03f      	beq.n	80159d8 <_vfiprintf_r+0x22c>
 8015958:	4b29      	ldr	r3, [pc, #164]	; (8015a00 <_vfiprintf_r+0x254>)
 801595a:	bb1b      	cbnz	r3, 80159a4 <_vfiprintf_r+0x1f8>
 801595c:	9b03      	ldr	r3, [sp, #12]
 801595e:	3307      	adds	r3, #7
 8015960:	f023 0307 	bic.w	r3, r3, #7
 8015964:	3308      	adds	r3, #8
 8015966:	9303      	str	r3, [sp, #12]
 8015968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801596a:	443b      	add	r3, r7
 801596c:	9309      	str	r3, [sp, #36]	; 0x24
 801596e:	e767      	b.n	8015840 <_vfiprintf_r+0x94>
 8015970:	fb0c 3202 	mla	r2, ip, r2, r3
 8015974:	460c      	mov	r4, r1
 8015976:	2001      	movs	r0, #1
 8015978:	e7a5      	b.n	80158c6 <_vfiprintf_r+0x11a>
 801597a:	2300      	movs	r3, #0
 801597c:	3401      	adds	r4, #1
 801597e:	9305      	str	r3, [sp, #20]
 8015980:	4619      	mov	r1, r3
 8015982:	f04f 0c0a 	mov.w	ip, #10
 8015986:	4620      	mov	r0, r4
 8015988:	f810 2b01 	ldrb.w	r2, [r0], #1
 801598c:	3a30      	subs	r2, #48	; 0x30
 801598e:	2a09      	cmp	r2, #9
 8015990:	d903      	bls.n	801599a <_vfiprintf_r+0x1ee>
 8015992:	2b00      	cmp	r3, #0
 8015994:	d0c5      	beq.n	8015922 <_vfiprintf_r+0x176>
 8015996:	9105      	str	r1, [sp, #20]
 8015998:	e7c3      	b.n	8015922 <_vfiprintf_r+0x176>
 801599a:	fb0c 2101 	mla	r1, ip, r1, r2
 801599e:	4604      	mov	r4, r0
 80159a0:	2301      	movs	r3, #1
 80159a2:	e7f0      	b.n	8015986 <_vfiprintf_r+0x1da>
 80159a4:	ab03      	add	r3, sp, #12
 80159a6:	9300      	str	r3, [sp, #0]
 80159a8:	462a      	mov	r2, r5
 80159aa:	4b16      	ldr	r3, [pc, #88]	; (8015a04 <_vfiprintf_r+0x258>)
 80159ac:	a904      	add	r1, sp, #16
 80159ae:	4630      	mov	r0, r6
 80159b0:	f7fd fb44 	bl	801303c <_printf_float>
 80159b4:	4607      	mov	r7, r0
 80159b6:	1c78      	adds	r0, r7, #1
 80159b8:	d1d6      	bne.n	8015968 <_vfiprintf_r+0x1bc>
 80159ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80159bc:	07d9      	lsls	r1, r3, #31
 80159be:	d405      	bmi.n	80159cc <_vfiprintf_r+0x220>
 80159c0:	89ab      	ldrh	r3, [r5, #12]
 80159c2:	059a      	lsls	r2, r3, #22
 80159c4:	d402      	bmi.n	80159cc <_vfiprintf_r+0x220>
 80159c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80159c8:	f7ff f8c4 	bl	8014b54 <__retarget_lock_release_recursive>
 80159cc:	89ab      	ldrh	r3, [r5, #12]
 80159ce:	065b      	lsls	r3, r3, #25
 80159d0:	f53f af12 	bmi.w	80157f8 <_vfiprintf_r+0x4c>
 80159d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80159d6:	e711      	b.n	80157fc <_vfiprintf_r+0x50>
 80159d8:	ab03      	add	r3, sp, #12
 80159da:	9300      	str	r3, [sp, #0]
 80159dc:	462a      	mov	r2, r5
 80159de:	4b09      	ldr	r3, [pc, #36]	; (8015a04 <_vfiprintf_r+0x258>)
 80159e0:	a904      	add	r1, sp, #16
 80159e2:	4630      	mov	r0, r6
 80159e4:	f7fd fdce 	bl	8013584 <_printf_i>
 80159e8:	e7e4      	b.n	80159b4 <_vfiprintf_r+0x208>
 80159ea:	bf00      	nop
 80159ec:	08016cf4 	.word	0x08016cf4
 80159f0:	08016d14 	.word	0x08016d14
 80159f4:	08016cd4 	.word	0x08016cd4
 80159f8:	08016e94 	.word	0x08016e94
 80159fc:	08016e9e 	.word	0x08016e9e
 8015a00:	0801303d 	.word	0x0801303d
 8015a04:	08015787 	.word	0x08015787
 8015a08:	08016e9a 	.word	0x08016e9a

08015a0c <_sbrk_r>:
 8015a0c:	b538      	push	{r3, r4, r5, lr}
 8015a0e:	4d06      	ldr	r5, [pc, #24]	; (8015a28 <_sbrk_r+0x1c>)
 8015a10:	2300      	movs	r3, #0
 8015a12:	4604      	mov	r4, r0
 8015a14:	4608      	mov	r0, r1
 8015a16:	602b      	str	r3, [r5, #0]
 8015a18:	f7f1 fdf6 	bl	8007608 <_sbrk>
 8015a1c:	1c43      	adds	r3, r0, #1
 8015a1e:	d102      	bne.n	8015a26 <_sbrk_r+0x1a>
 8015a20:	682b      	ldr	r3, [r5, #0]
 8015a22:	b103      	cbz	r3, 8015a26 <_sbrk_r+0x1a>
 8015a24:	6023      	str	r3, [r4, #0]
 8015a26:	bd38      	pop	{r3, r4, r5, pc}
 8015a28:	20002cf4 	.word	0x20002cf4

08015a2c <__sread>:
 8015a2c:	b510      	push	{r4, lr}
 8015a2e:	460c      	mov	r4, r1
 8015a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a34:	f000 f922 	bl	8015c7c <_read_r>
 8015a38:	2800      	cmp	r0, #0
 8015a3a:	bfab      	itete	ge
 8015a3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015a3e:	89a3      	ldrhlt	r3, [r4, #12]
 8015a40:	181b      	addge	r3, r3, r0
 8015a42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015a46:	bfac      	ite	ge
 8015a48:	6563      	strge	r3, [r4, #84]	; 0x54
 8015a4a:	81a3      	strhlt	r3, [r4, #12]
 8015a4c:	bd10      	pop	{r4, pc}

08015a4e <__swrite>:
 8015a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a52:	461f      	mov	r7, r3
 8015a54:	898b      	ldrh	r3, [r1, #12]
 8015a56:	05db      	lsls	r3, r3, #23
 8015a58:	4605      	mov	r5, r0
 8015a5a:	460c      	mov	r4, r1
 8015a5c:	4616      	mov	r6, r2
 8015a5e:	d505      	bpl.n	8015a6c <__swrite+0x1e>
 8015a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a64:	2302      	movs	r3, #2
 8015a66:	2200      	movs	r2, #0
 8015a68:	f000 f898 	bl	8015b9c <_lseek_r>
 8015a6c:	89a3      	ldrh	r3, [r4, #12]
 8015a6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015a72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015a76:	81a3      	strh	r3, [r4, #12]
 8015a78:	4632      	mov	r2, r6
 8015a7a:	463b      	mov	r3, r7
 8015a7c:	4628      	mov	r0, r5
 8015a7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015a82:	f000 b817 	b.w	8015ab4 <_write_r>

08015a86 <__sseek>:
 8015a86:	b510      	push	{r4, lr}
 8015a88:	460c      	mov	r4, r1
 8015a8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a8e:	f000 f885 	bl	8015b9c <_lseek_r>
 8015a92:	1c43      	adds	r3, r0, #1
 8015a94:	89a3      	ldrh	r3, [r4, #12]
 8015a96:	bf15      	itete	ne
 8015a98:	6560      	strne	r0, [r4, #84]	; 0x54
 8015a9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015a9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015aa2:	81a3      	strheq	r3, [r4, #12]
 8015aa4:	bf18      	it	ne
 8015aa6:	81a3      	strhne	r3, [r4, #12]
 8015aa8:	bd10      	pop	{r4, pc}

08015aaa <__sclose>:
 8015aaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015aae:	f000 b831 	b.w	8015b14 <_close_r>
	...

08015ab4 <_write_r>:
 8015ab4:	b538      	push	{r3, r4, r5, lr}
 8015ab6:	4d07      	ldr	r5, [pc, #28]	; (8015ad4 <_write_r+0x20>)
 8015ab8:	4604      	mov	r4, r0
 8015aba:	4608      	mov	r0, r1
 8015abc:	4611      	mov	r1, r2
 8015abe:	2200      	movs	r2, #0
 8015ac0:	602a      	str	r2, [r5, #0]
 8015ac2:	461a      	mov	r2, r3
 8015ac4:	f7f1 fd4f 	bl	8007566 <_write>
 8015ac8:	1c43      	adds	r3, r0, #1
 8015aca:	d102      	bne.n	8015ad2 <_write_r+0x1e>
 8015acc:	682b      	ldr	r3, [r5, #0]
 8015ace:	b103      	cbz	r3, 8015ad2 <_write_r+0x1e>
 8015ad0:	6023      	str	r3, [r4, #0]
 8015ad2:	bd38      	pop	{r3, r4, r5, pc}
 8015ad4:	20002cf4 	.word	0x20002cf4

08015ad8 <__assert_func>:
 8015ad8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015ada:	4614      	mov	r4, r2
 8015adc:	461a      	mov	r2, r3
 8015ade:	4b09      	ldr	r3, [pc, #36]	; (8015b04 <__assert_func+0x2c>)
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	4605      	mov	r5, r0
 8015ae4:	68d8      	ldr	r0, [r3, #12]
 8015ae6:	b14c      	cbz	r4, 8015afc <__assert_func+0x24>
 8015ae8:	4b07      	ldr	r3, [pc, #28]	; (8015b08 <__assert_func+0x30>)
 8015aea:	9100      	str	r1, [sp, #0]
 8015aec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015af0:	4906      	ldr	r1, [pc, #24]	; (8015b0c <__assert_func+0x34>)
 8015af2:	462b      	mov	r3, r5
 8015af4:	f000 f81e 	bl	8015b34 <fiprintf>
 8015af8:	f000 f8df 	bl	8015cba <abort>
 8015afc:	4b04      	ldr	r3, [pc, #16]	; (8015b10 <__assert_func+0x38>)
 8015afe:	461c      	mov	r4, r3
 8015b00:	e7f3      	b.n	8015aea <__assert_func+0x12>
 8015b02:	bf00      	nop
 8015b04:	20000a7c 	.word	0x20000a7c
 8015b08:	08016ea5 	.word	0x08016ea5
 8015b0c:	08016eb2 	.word	0x08016eb2
 8015b10:	08016ee0 	.word	0x08016ee0

08015b14 <_close_r>:
 8015b14:	b538      	push	{r3, r4, r5, lr}
 8015b16:	4d06      	ldr	r5, [pc, #24]	; (8015b30 <_close_r+0x1c>)
 8015b18:	2300      	movs	r3, #0
 8015b1a:	4604      	mov	r4, r0
 8015b1c:	4608      	mov	r0, r1
 8015b1e:	602b      	str	r3, [r5, #0]
 8015b20:	f7f1 fd3d 	bl	800759e <_close>
 8015b24:	1c43      	adds	r3, r0, #1
 8015b26:	d102      	bne.n	8015b2e <_close_r+0x1a>
 8015b28:	682b      	ldr	r3, [r5, #0]
 8015b2a:	b103      	cbz	r3, 8015b2e <_close_r+0x1a>
 8015b2c:	6023      	str	r3, [r4, #0]
 8015b2e:	bd38      	pop	{r3, r4, r5, pc}
 8015b30:	20002cf4 	.word	0x20002cf4

08015b34 <fiprintf>:
 8015b34:	b40e      	push	{r1, r2, r3}
 8015b36:	b503      	push	{r0, r1, lr}
 8015b38:	4601      	mov	r1, r0
 8015b3a:	ab03      	add	r3, sp, #12
 8015b3c:	4805      	ldr	r0, [pc, #20]	; (8015b54 <fiprintf+0x20>)
 8015b3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015b42:	6800      	ldr	r0, [r0, #0]
 8015b44:	9301      	str	r3, [sp, #4]
 8015b46:	f7ff fe31 	bl	80157ac <_vfiprintf_r>
 8015b4a:	b002      	add	sp, #8
 8015b4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015b50:	b003      	add	sp, #12
 8015b52:	4770      	bx	lr
 8015b54:	20000a7c 	.word	0x20000a7c

08015b58 <_fstat_r>:
 8015b58:	b538      	push	{r3, r4, r5, lr}
 8015b5a:	4d07      	ldr	r5, [pc, #28]	; (8015b78 <_fstat_r+0x20>)
 8015b5c:	2300      	movs	r3, #0
 8015b5e:	4604      	mov	r4, r0
 8015b60:	4608      	mov	r0, r1
 8015b62:	4611      	mov	r1, r2
 8015b64:	602b      	str	r3, [r5, #0]
 8015b66:	f7f1 fd26 	bl	80075b6 <_fstat>
 8015b6a:	1c43      	adds	r3, r0, #1
 8015b6c:	d102      	bne.n	8015b74 <_fstat_r+0x1c>
 8015b6e:	682b      	ldr	r3, [r5, #0]
 8015b70:	b103      	cbz	r3, 8015b74 <_fstat_r+0x1c>
 8015b72:	6023      	str	r3, [r4, #0]
 8015b74:	bd38      	pop	{r3, r4, r5, pc}
 8015b76:	bf00      	nop
 8015b78:	20002cf4 	.word	0x20002cf4

08015b7c <_isatty_r>:
 8015b7c:	b538      	push	{r3, r4, r5, lr}
 8015b7e:	4d06      	ldr	r5, [pc, #24]	; (8015b98 <_isatty_r+0x1c>)
 8015b80:	2300      	movs	r3, #0
 8015b82:	4604      	mov	r4, r0
 8015b84:	4608      	mov	r0, r1
 8015b86:	602b      	str	r3, [r5, #0]
 8015b88:	f7f1 fd25 	bl	80075d6 <_isatty>
 8015b8c:	1c43      	adds	r3, r0, #1
 8015b8e:	d102      	bne.n	8015b96 <_isatty_r+0x1a>
 8015b90:	682b      	ldr	r3, [r5, #0]
 8015b92:	b103      	cbz	r3, 8015b96 <_isatty_r+0x1a>
 8015b94:	6023      	str	r3, [r4, #0]
 8015b96:	bd38      	pop	{r3, r4, r5, pc}
 8015b98:	20002cf4 	.word	0x20002cf4

08015b9c <_lseek_r>:
 8015b9c:	b538      	push	{r3, r4, r5, lr}
 8015b9e:	4d07      	ldr	r5, [pc, #28]	; (8015bbc <_lseek_r+0x20>)
 8015ba0:	4604      	mov	r4, r0
 8015ba2:	4608      	mov	r0, r1
 8015ba4:	4611      	mov	r1, r2
 8015ba6:	2200      	movs	r2, #0
 8015ba8:	602a      	str	r2, [r5, #0]
 8015baa:	461a      	mov	r2, r3
 8015bac:	f7f1 fd1e 	bl	80075ec <_lseek>
 8015bb0:	1c43      	adds	r3, r0, #1
 8015bb2:	d102      	bne.n	8015bba <_lseek_r+0x1e>
 8015bb4:	682b      	ldr	r3, [r5, #0]
 8015bb6:	b103      	cbz	r3, 8015bba <_lseek_r+0x1e>
 8015bb8:	6023      	str	r3, [r4, #0]
 8015bba:	bd38      	pop	{r3, r4, r5, pc}
 8015bbc:	20002cf4 	.word	0x20002cf4

08015bc0 <__ascii_mbtowc>:
 8015bc0:	b082      	sub	sp, #8
 8015bc2:	b901      	cbnz	r1, 8015bc6 <__ascii_mbtowc+0x6>
 8015bc4:	a901      	add	r1, sp, #4
 8015bc6:	b142      	cbz	r2, 8015bda <__ascii_mbtowc+0x1a>
 8015bc8:	b14b      	cbz	r3, 8015bde <__ascii_mbtowc+0x1e>
 8015bca:	7813      	ldrb	r3, [r2, #0]
 8015bcc:	600b      	str	r3, [r1, #0]
 8015bce:	7812      	ldrb	r2, [r2, #0]
 8015bd0:	1e10      	subs	r0, r2, #0
 8015bd2:	bf18      	it	ne
 8015bd4:	2001      	movne	r0, #1
 8015bd6:	b002      	add	sp, #8
 8015bd8:	4770      	bx	lr
 8015bda:	4610      	mov	r0, r2
 8015bdc:	e7fb      	b.n	8015bd6 <__ascii_mbtowc+0x16>
 8015bde:	f06f 0001 	mvn.w	r0, #1
 8015be2:	e7f8      	b.n	8015bd6 <__ascii_mbtowc+0x16>

08015be4 <memmove>:
 8015be4:	4288      	cmp	r0, r1
 8015be6:	b510      	push	{r4, lr}
 8015be8:	eb01 0402 	add.w	r4, r1, r2
 8015bec:	d902      	bls.n	8015bf4 <memmove+0x10>
 8015bee:	4284      	cmp	r4, r0
 8015bf0:	4623      	mov	r3, r4
 8015bf2:	d807      	bhi.n	8015c04 <memmove+0x20>
 8015bf4:	1e43      	subs	r3, r0, #1
 8015bf6:	42a1      	cmp	r1, r4
 8015bf8:	d008      	beq.n	8015c0c <memmove+0x28>
 8015bfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015bfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015c02:	e7f8      	b.n	8015bf6 <memmove+0x12>
 8015c04:	4402      	add	r2, r0
 8015c06:	4601      	mov	r1, r0
 8015c08:	428a      	cmp	r2, r1
 8015c0a:	d100      	bne.n	8015c0e <memmove+0x2a>
 8015c0c:	bd10      	pop	{r4, pc}
 8015c0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015c12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015c16:	e7f7      	b.n	8015c08 <memmove+0x24>

08015c18 <__malloc_lock>:
 8015c18:	4801      	ldr	r0, [pc, #4]	; (8015c20 <__malloc_lock+0x8>)
 8015c1a:	f7fe bf9a 	b.w	8014b52 <__retarget_lock_acquire_recursive>
 8015c1e:	bf00      	nop
 8015c20:	20002cec 	.word	0x20002cec

08015c24 <__malloc_unlock>:
 8015c24:	4801      	ldr	r0, [pc, #4]	; (8015c2c <__malloc_unlock+0x8>)
 8015c26:	f7fe bf95 	b.w	8014b54 <__retarget_lock_release_recursive>
 8015c2a:	bf00      	nop
 8015c2c:	20002cec 	.word	0x20002cec

08015c30 <_realloc_r>:
 8015c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c32:	4607      	mov	r7, r0
 8015c34:	4614      	mov	r4, r2
 8015c36:	460e      	mov	r6, r1
 8015c38:	b921      	cbnz	r1, 8015c44 <_realloc_r+0x14>
 8015c3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015c3e:	4611      	mov	r1, r2
 8015c40:	f7ff bbd4 	b.w	80153ec <_malloc_r>
 8015c44:	b922      	cbnz	r2, 8015c50 <_realloc_r+0x20>
 8015c46:	f7ff fb81 	bl	801534c <_free_r>
 8015c4a:	4625      	mov	r5, r4
 8015c4c:	4628      	mov	r0, r5
 8015c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c50:	f000 f83a 	bl	8015cc8 <_malloc_usable_size_r>
 8015c54:	42a0      	cmp	r0, r4
 8015c56:	d20f      	bcs.n	8015c78 <_realloc_r+0x48>
 8015c58:	4621      	mov	r1, r4
 8015c5a:	4638      	mov	r0, r7
 8015c5c:	f7ff fbc6 	bl	80153ec <_malloc_r>
 8015c60:	4605      	mov	r5, r0
 8015c62:	2800      	cmp	r0, #0
 8015c64:	d0f2      	beq.n	8015c4c <_realloc_r+0x1c>
 8015c66:	4631      	mov	r1, r6
 8015c68:	4622      	mov	r2, r4
 8015c6a:	f7fd f931 	bl	8012ed0 <memcpy>
 8015c6e:	4631      	mov	r1, r6
 8015c70:	4638      	mov	r0, r7
 8015c72:	f7ff fb6b 	bl	801534c <_free_r>
 8015c76:	e7e9      	b.n	8015c4c <_realloc_r+0x1c>
 8015c78:	4635      	mov	r5, r6
 8015c7a:	e7e7      	b.n	8015c4c <_realloc_r+0x1c>

08015c7c <_read_r>:
 8015c7c:	b538      	push	{r3, r4, r5, lr}
 8015c7e:	4d07      	ldr	r5, [pc, #28]	; (8015c9c <_read_r+0x20>)
 8015c80:	4604      	mov	r4, r0
 8015c82:	4608      	mov	r0, r1
 8015c84:	4611      	mov	r1, r2
 8015c86:	2200      	movs	r2, #0
 8015c88:	602a      	str	r2, [r5, #0]
 8015c8a:	461a      	mov	r2, r3
 8015c8c:	f7f1 fc4e 	bl	800752c <_read>
 8015c90:	1c43      	adds	r3, r0, #1
 8015c92:	d102      	bne.n	8015c9a <_read_r+0x1e>
 8015c94:	682b      	ldr	r3, [r5, #0]
 8015c96:	b103      	cbz	r3, 8015c9a <_read_r+0x1e>
 8015c98:	6023      	str	r3, [r4, #0]
 8015c9a:	bd38      	pop	{r3, r4, r5, pc}
 8015c9c:	20002cf4 	.word	0x20002cf4

08015ca0 <__ascii_wctomb>:
 8015ca0:	b149      	cbz	r1, 8015cb6 <__ascii_wctomb+0x16>
 8015ca2:	2aff      	cmp	r2, #255	; 0xff
 8015ca4:	bf85      	ittet	hi
 8015ca6:	238a      	movhi	r3, #138	; 0x8a
 8015ca8:	6003      	strhi	r3, [r0, #0]
 8015caa:	700a      	strbls	r2, [r1, #0]
 8015cac:	f04f 30ff 	movhi.w	r0, #4294967295
 8015cb0:	bf98      	it	ls
 8015cb2:	2001      	movls	r0, #1
 8015cb4:	4770      	bx	lr
 8015cb6:	4608      	mov	r0, r1
 8015cb8:	4770      	bx	lr

08015cba <abort>:
 8015cba:	b508      	push	{r3, lr}
 8015cbc:	2006      	movs	r0, #6
 8015cbe:	f000 f833 	bl	8015d28 <raise>
 8015cc2:	2001      	movs	r0, #1
 8015cc4:	f7f1 fc28 	bl	8007518 <_exit>

08015cc8 <_malloc_usable_size_r>:
 8015cc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015ccc:	1f18      	subs	r0, r3, #4
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	bfbc      	itt	lt
 8015cd2:	580b      	ldrlt	r3, [r1, r0]
 8015cd4:	18c0      	addlt	r0, r0, r3
 8015cd6:	4770      	bx	lr

08015cd8 <_raise_r>:
 8015cd8:	291f      	cmp	r1, #31
 8015cda:	b538      	push	{r3, r4, r5, lr}
 8015cdc:	4604      	mov	r4, r0
 8015cde:	460d      	mov	r5, r1
 8015ce0:	d904      	bls.n	8015cec <_raise_r+0x14>
 8015ce2:	2316      	movs	r3, #22
 8015ce4:	6003      	str	r3, [r0, #0]
 8015ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8015cea:	bd38      	pop	{r3, r4, r5, pc}
 8015cec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015cee:	b112      	cbz	r2, 8015cf6 <_raise_r+0x1e>
 8015cf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015cf4:	b94b      	cbnz	r3, 8015d0a <_raise_r+0x32>
 8015cf6:	4620      	mov	r0, r4
 8015cf8:	f000 f830 	bl	8015d5c <_getpid_r>
 8015cfc:	462a      	mov	r2, r5
 8015cfe:	4601      	mov	r1, r0
 8015d00:	4620      	mov	r0, r4
 8015d02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015d06:	f000 b817 	b.w	8015d38 <_kill_r>
 8015d0a:	2b01      	cmp	r3, #1
 8015d0c:	d00a      	beq.n	8015d24 <_raise_r+0x4c>
 8015d0e:	1c59      	adds	r1, r3, #1
 8015d10:	d103      	bne.n	8015d1a <_raise_r+0x42>
 8015d12:	2316      	movs	r3, #22
 8015d14:	6003      	str	r3, [r0, #0]
 8015d16:	2001      	movs	r0, #1
 8015d18:	e7e7      	b.n	8015cea <_raise_r+0x12>
 8015d1a:	2400      	movs	r4, #0
 8015d1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015d20:	4628      	mov	r0, r5
 8015d22:	4798      	blx	r3
 8015d24:	2000      	movs	r0, #0
 8015d26:	e7e0      	b.n	8015cea <_raise_r+0x12>

08015d28 <raise>:
 8015d28:	4b02      	ldr	r3, [pc, #8]	; (8015d34 <raise+0xc>)
 8015d2a:	4601      	mov	r1, r0
 8015d2c:	6818      	ldr	r0, [r3, #0]
 8015d2e:	f7ff bfd3 	b.w	8015cd8 <_raise_r>
 8015d32:	bf00      	nop
 8015d34:	20000a7c 	.word	0x20000a7c

08015d38 <_kill_r>:
 8015d38:	b538      	push	{r3, r4, r5, lr}
 8015d3a:	4d07      	ldr	r5, [pc, #28]	; (8015d58 <_kill_r+0x20>)
 8015d3c:	2300      	movs	r3, #0
 8015d3e:	4604      	mov	r4, r0
 8015d40:	4608      	mov	r0, r1
 8015d42:	4611      	mov	r1, r2
 8015d44:	602b      	str	r3, [r5, #0]
 8015d46:	f7f1 fbd7 	bl	80074f8 <_kill>
 8015d4a:	1c43      	adds	r3, r0, #1
 8015d4c:	d102      	bne.n	8015d54 <_kill_r+0x1c>
 8015d4e:	682b      	ldr	r3, [r5, #0]
 8015d50:	b103      	cbz	r3, 8015d54 <_kill_r+0x1c>
 8015d52:	6023      	str	r3, [r4, #0]
 8015d54:	bd38      	pop	{r3, r4, r5, pc}
 8015d56:	bf00      	nop
 8015d58:	20002cf4 	.word	0x20002cf4

08015d5c <_getpid_r>:
 8015d5c:	f7f1 bbc4 	b.w	80074e8 <_getpid>

08015d60 <_init>:
 8015d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d62:	bf00      	nop
 8015d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015d66:	bc08      	pop	{r3}
 8015d68:	469e      	mov	lr, r3
 8015d6a:	4770      	bx	lr

08015d6c <_fini>:
 8015d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d6e:	bf00      	nop
 8015d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015d72:	bc08      	pop	{r3}
 8015d74:	469e      	mov	lr, r3
 8015d76:	4770      	bx	lr
