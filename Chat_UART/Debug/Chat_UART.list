
Chat_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005114  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  080052a4  080052a4  000152a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053c4  080053c4  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  080053c4  080053c4  000153c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053cc  080053cc  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053cc  080053cc  000153cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053d0  080053d0  000153d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  080053d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  200000a8  0800547c  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  0800547c  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010aaa  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022ca  00000000  00000000  00030b82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  00032e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a38  00000000  00000000  00033960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000272cc  00000000  00000000  00034398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d686  00000000  00000000  0005b664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb6f7  00000000  00000000  00068cea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001543e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003368  00000000  00000000  00154434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800528c 	.word	0x0800528c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	0800528c 	.word	0x0800528c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fe38 	bl	80011f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f8bf 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f9af 	bl	80008e8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800058a:	f000 f94d 	bl	8000828 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800058e:	f000 f97b 	bl	8000888 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8000592:	f000 f919 	bl	80007c8 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&huart1, msg1, sizeof(msg1), 1000);
 8000596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059a:	2219      	movs	r2, #25
 800059c:	4951      	ldr	r1, [pc, #324]	; (80006e4 <main+0x16c>)
 800059e:	4852      	ldr	r0, [pc, #328]	; (80006e8 <main+0x170>)
 80005a0:	f002 fd9e 	bl	80030e0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, msg2, sizeof(msg2), 1000);
 80005a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a8:	2219      	movs	r2, #25
 80005aa:	4950      	ldr	r1, [pc, #320]	; (80006ec <main+0x174>)
 80005ac:	4850      	ldr	r0, [pc, #320]	; (80006f0 <main+0x178>)
 80005ae:	f002 fd97 	bl	80030e0 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t size1=0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	71fb      	strb	r3, [r7, #7]
  uint8_t size2=0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	71bb      	strb	r3, [r7, #6]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  if((HAL_UART_Receive (&huart1, UART1_rxBuffer, UART1_Size, 1000) && (HAL_OK | HAL_TIMEOUT))|(HAL_UART_Receive(&huart4, UART4_rxBuffer, UART4_Size , 1000) && (HAL_OK | HAL_TIMEOUT)))
 80005ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005be:	2214      	movs	r2, #20
 80005c0:	494c      	ldr	r1, [pc, #304]	; (80006f4 <main+0x17c>)
 80005c2:	4849      	ldr	r0, [pc, #292]	; (80006e8 <main+0x170>)
 80005c4:	f002 fe20 	bl	8003208 <HAL_UART_Receive>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <main+0x5a>
 80005ce:	2301      	movs	r3, #1
 80005d0:	e000      	b.n	80005d4 <main+0x5c>
 80005d2:	2300      	movs	r3, #0
 80005d4:	f003 0301 	and.w	r3, r3, #1
 80005d8:	b2dc      	uxtb	r4, r3
 80005da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005de:	2214      	movs	r2, #20
 80005e0:	4945      	ldr	r1, [pc, #276]	; (80006f8 <main+0x180>)
 80005e2:	4843      	ldr	r0, [pc, #268]	; (80006f0 <main+0x178>)
 80005e4:	f002 fe10 	bl	8003208 <HAL_UART_Receive>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <main+0x7a>
 80005ee:	2301      	movs	r3, #1
 80005f0:	e000      	b.n	80005f4 <main+0x7c>
 80005f2:	2300      	movs	r3, #0
 80005f4:	f003 0301 	and.w	r3, r3, #1
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	4323      	orrs	r3, r4
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d039      	beq.n	8000676 <main+0xfe>
	  {
		  size1 = strlen(UART1_rxBuffer);
 8000602:	483c      	ldr	r0, [pc, #240]	; (80006f4 <main+0x17c>)
 8000604:	f7ff fde4 	bl	80001d0 <strlen>
 8000608:	4603      	mov	r3, r0
 800060a:	71fb      	strb	r3, [r7, #7]
		  size2 = strlen(UART4_rxBuffer);
 800060c:	483a      	ldr	r0, [pc, #232]	; (80006f8 <main+0x180>)
 800060e:	f7ff fddf 	bl	80001d0 <strlen>
 8000612:	4603      	mov	r3, r0
 8000614:	71bb      	strb	r3, [r7, #6]

		  if ((UART4_rxBuffer[size2-1] == '\r') || (size2 == UART4_Size))
 8000616:	79bb      	ldrb	r3, [r7, #6]
 8000618:	3b01      	subs	r3, #1
 800061a:	4a37      	ldr	r2, [pc, #220]	; (80006f8 <main+0x180>)
 800061c:	5cd3      	ldrb	r3, [r2, r3]
 800061e:	2b0d      	cmp	r3, #13
 8000620:	d002      	beq.n	8000628 <main+0xb0>
 8000622:	79bb      	ldrb	r3, [r7, #6]
 8000624:	2b14      	cmp	r3, #20
 8000626:	d10e      	bne.n	8000646 <main+0xce>
		  {
			  UART4_rxBuffer[size2] = '\n';
 8000628:	79bb      	ldrb	r3, [r7, #6]
 800062a:	4a33      	ldr	r2, [pc, #204]	; (80006f8 <main+0x180>)
 800062c:	210a      	movs	r1, #10
 800062e:	54d1      	strb	r1, [r2, r3]
			  HAL_UART_Transmit(&huart1, UART4_rxBuffer, UART4_Size , 10);
 8000630:	230a      	movs	r3, #10
 8000632:	2214      	movs	r2, #20
 8000634:	4930      	ldr	r1, [pc, #192]	; (80006f8 <main+0x180>)
 8000636:	482c      	ldr	r0, [pc, #176]	; (80006e8 <main+0x170>)
 8000638:	f002 fd52 	bl	80030e0 <HAL_UART_Transmit>
			  //size2 == UART4_Size-1;
			  memset(UART4_rxBuffer, 0, UART4_Size );
 800063c:	2214      	movs	r2, #20
 800063e:	2100      	movs	r1, #0
 8000640:	482d      	ldr	r0, [pc, #180]	; (80006f8 <main+0x180>)
 8000642:	f003 fec5 	bl	80043d0 <memset>
		  }
		  if ((UART1_rxBuffer[size1-1] == '\r') || (size1 == UART1_Size))
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	3b01      	subs	r3, #1
 800064a:	4a2a      	ldr	r2, [pc, #168]	; (80006f4 <main+0x17c>)
 800064c:	5cd3      	ldrb	r3, [r2, r3]
 800064e:	2b0d      	cmp	r3, #13
 8000650:	d002      	beq.n	8000658 <main+0xe0>
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2b14      	cmp	r3, #20
 8000656:	d10e      	bne.n	8000676 <main+0xfe>
		  {
			  UART1_rxBuffer[size1] = '\n';
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	4a26      	ldr	r2, [pc, #152]	; (80006f4 <main+0x17c>)
 800065c:	210a      	movs	r1, #10
 800065e:	54d1      	strb	r1, [r2, r3]
			  HAL_UART_Transmit(&huart4, UART1_rxBuffer, UART1_Size, 10);
 8000660:	230a      	movs	r3, #10
 8000662:	2214      	movs	r2, #20
 8000664:	4923      	ldr	r1, [pc, #140]	; (80006f4 <main+0x17c>)
 8000666:	4822      	ldr	r0, [pc, #136]	; (80006f0 <main+0x178>)
 8000668:	f002 fd3a 	bl	80030e0 <HAL_UART_Transmit>
			  memset(UART1_rxBuffer, 0, UART1_Size);
 800066c:	2214      	movs	r2, #20
 800066e:	2100      	movs	r1, #0
 8000670:	4820      	ldr	r0, [pc, #128]	; (80006f4 <main+0x17c>)
 8000672:	f003 fead 	bl	80043d0 <memset>





  if(HAL_UART_Receive(&huart4, UART4_rxBuffer, UART4_Size , 1000) && (HAL_OK | HAL_TIMEOUT))
 8000676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067a:	2214      	movs	r2, #20
 800067c:	491e      	ldr	r1, [pc, #120]	; (80006f8 <main+0x180>)
 800067e:	481c      	ldr	r0, [pc, #112]	; (80006f0 <main+0x178>)
 8000680:	f002 fdc2 	bl	8003208 <HAL_UART_Receive>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d097      	beq.n	80005ba <main+0x42>
  {

	  size2 = strlen(UART4_rxBuffer);
 800068a:	481b      	ldr	r0, [pc, #108]	; (80006f8 <main+0x180>)
 800068c:	f7ff fda0 	bl	80001d0 <strlen>
 8000690:	4603      	mov	r3, r0
 8000692:	71bb      	strb	r3, [r7, #6]
	  printf("BUFFER 4 SIZE OF INPUT :%d\n",size2);
 8000694:	79bb      	ldrb	r3, [r7, #6]
 8000696:	4619      	mov	r1, r3
 8000698:	4818      	ldr	r0, [pc, #96]	; (80006fc <main+0x184>)
 800069a:	f003 fea1 	bl	80043e0 <iprintf>
	  if ((UART4_rxBuffer[size2-1] == '\r') || (size2 == UART4_Size))
 800069e:	79bb      	ldrb	r3, [r7, #6]
 80006a0:	3b01      	subs	r3, #1
 80006a2:	4a15      	ldr	r2, [pc, #84]	; (80006f8 <main+0x180>)
 80006a4:	5cd3      	ldrb	r3, [r2, r3]
 80006a6:	2b0d      	cmp	r3, #13
 80006a8:	d002      	beq.n	80006b0 <main+0x138>
 80006aa:	79bb      	ldrb	r3, [r7, #6]
 80006ac:	2b14      	cmp	r3, #20
 80006ae:	d184      	bne.n	80005ba <main+0x42>
	  {
		  printf("IN IF BUFFER 4 SIZE OF INPUT :%d\n",size2);
 80006b0:	79bb      	ldrb	r3, [r7, #6]
 80006b2:	4619      	mov	r1, r3
 80006b4:	4812      	ldr	r0, [pc, #72]	; (8000700 <main+0x188>)
 80006b6:	f003 fe93 	bl	80043e0 <iprintf>
		  UART4_rxBuffer[size2-1] = '\r';
 80006ba:	79bb      	ldrb	r3, [r7, #6]
 80006bc:	3b01      	subs	r3, #1
 80006be:	4a0e      	ldr	r2, [pc, #56]	; (80006f8 <main+0x180>)
 80006c0:	210d      	movs	r1, #13
 80006c2:	54d1      	strb	r1, [r2, r3]
		  UART4_rxBuffer[size2] = '\n';
 80006c4:	79bb      	ldrb	r3, [r7, #6]
 80006c6:	4a0c      	ldr	r2, [pc, #48]	; (80006f8 <main+0x180>)
 80006c8:	210a      	movs	r1, #10
 80006ca:	54d1      	strb	r1, [r2, r3]
		  HAL_UART_Transmit(&huart1, UART4_rxBuffer, UART4_Size , 2);
 80006cc:	2302      	movs	r3, #2
 80006ce:	2214      	movs	r2, #20
 80006d0:	4909      	ldr	r1, [pc, #36]	; (80006f8 <main+0x180>)
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <main+0x170>)
 80006d4:	f002 fd04 	bl	80030e0 <HAL_UART_Transmit>
		  memset(UART4_rxBuffer, 0, UART4_Size );
 80006d8:	2214      	movs	r2, #20
 80006da:	2100      	movs	r1, #0
 80006dc:	4806      	ldr	r0, [pc, #24]	; (80006f8 <main+0x180>)
 80006de:	f003 fe77 	bl	80043d0 <memset>
	  if((HAL_UART_Receive (&huart1, UART1_rxBuffer, UART1_Size, 1000) && (HAL_OK | HAL_TIMEOUT))|(HAL_UART_Receive(&huart4, UART4_rxBuffer, UART4_Size , 1000) && (HAL_OK | HAL_TIMEOUT)))
 80006e2:	e76a      	b.n	80005ba <main+0x42>
 80006e4:	20000000 	.word	0x20000000
 80006e8:	200000f8 	.word	0x200000f8
 80006ec:	2000001c 	.word	0x2000001c
 80006f0:	2000017c 	.word	0x2000017c
 80006f4:	200000c4 	.word	0x200000c4
 80006f8:	200000d8 	.word	0x200000d8
 80006fc:	080052a4 	.word	0x080052a4
 8000700:	080052c0 	.word	0x080052c0

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b096      	sub	sp, #88	; 0x58
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	2244      	movs	r2, #68	; 0x44
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f003 fe5c 	bl	80043d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	463b      	mov	r3, r7
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000726:	f44f 7000 	mov.w	r0, #512	; 0x200
 800072a:	f001 f96b 	bl	8001a04 <HAL_PWREx_ControlVoltageScaling>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000734:	f000 fae0 	bl	8000cf8 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000738:	f001 f946 	bl	80019c8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800073c:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <SystemClock_Config+0xc0>)
 800073e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000742:	4a20      	ldr	r2, [pc, #128]	; (80007c4 <SystemClock_Config+0xc0>)
 8000744:	f023 0318 	bic.w	r3, r3, #24
 8000748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800074c:	2314      	movs	r3, #20
 800074e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000750:	2301      	movs	r3, #1
 8000752:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000754:	2301      	movs	r3, #1
 8000756:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800075c:	2360      	movs	r3, #96	; 0x60
 800075e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000760:	2302      	movs	r3, #2
 8000762:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000764:	2301      	movs	r3, #1
 8000766:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000768:	2301      	movs	r3, #1
 800076a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800076c:	2328      	movs	r3, #40	; 0x28
 800076e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000770:	2307      	movs	r3, #7
 8000772:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000774:	2302      	movs	r3, #2
 8000776:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000778:	2302      	movs	r3, #2
 800077a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4618      	mov	r0, r3
 8000782:	f001 f995 	bl	8001ab0 <HAL_RCC_OscConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800078c:	f000 fab4 	bl	8000cf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000790:	230f      	movs	r3, #15
 8000792:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000794:	2303      	movs	r3, #3
 8000796:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007a4:	463b      	mov	r3, r7
 80007a6:	2104      	movs	r1, #4
 80007a8:	4618      	mov	r0, r3
 80007aa:	f001 fd5b 	bl	8002264 <HAL_RCC_ClockConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007b4:	f000 faa0 	bl	8000cf8 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007b8:	f002 fa62 	bl	8002c80 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007bc:	bf00      	nop
 80007be:	3758      	adds	r7, #88	; 0x58
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40021000 	.word	0x40021000

080007c8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <MX_UART4_Init+0x58>)
 80007ce:	4a15      	ldr	r2, [pc, #84]	; (8000824 <MX_UART4_Init+0x5c>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <MX_UART4_Init+0x58>)
 80007d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_UART4_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_UART4_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_UART4_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_UART4_Init+0x58>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_UART4_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_UART4_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_UART4_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_UART4_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_UART4_Init+0x58>)
 800080c:	f002 fc1a 	bl	8003044 <HAL_UART_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000816:	f000 fa6f 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	2000017c 	.word	0x2000017c
 8000824:	40004c00 	.word	0x40004c00

08000828 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800082c:	4b14      	ldr	r3, [pc, #80]	; (8000880 <MX_USART1_UART_Init+0x58>)
 800082e:	4a15      	ldr	r2, [pc, #84]	; (8000884 <MX_USART1_UART_Init+0x5c>)
 8000830:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <MX_USART1_UART_Init+0x58>)
 8000834:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000838:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_USART1_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_USART1_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_USART1_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_USART1_UART_Init+0x58>)
 800084e:	220c      	movs	r2, #12
 8000850:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MX_USART1_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_USART1_UART_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MX_USART1_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_USART1_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_USART1_UART_Init+0x58>)
 800086c:	f002 fbea 	bl	8003044 <HAL_UART_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000876:	f000 fa3f 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200000f8 	.word	0x200000f8
 8000884:	40013800 	.word	0x40013800

08000888 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 800088e:	4a15      	ldr	r2, [pc, #84]	; (80008e4 <MX_USART2_UART_Init+0x5c>)
 8000890:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 8000894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000898:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_USART2_UART_Init+0x58>)
 80008cc:	f002 fbba 	bl	8003044 <HAL_UART_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008d6:	f000 fa0f 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000200 	.word	0x20000200
 80008e4:	40004400 	.word	0x40004400

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008fe:	4bbc      	ldr	r3, [pc, #752]	; (8000bf0 <MX_GPIO_Init+0x308>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	4abb      	ldr	r2, [pc, #748]	; (8000bf0 <MX_GPIO_Init+0x308>)
 8000904:	f043 0310 	orr.w	r3, r3, #16
 8000908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090a:	4bb9      	ldr	r3, [pc, #740]	; (8000bf0 <MX_GPIO_Init+0x308>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	f003 0310 	and.w	r3, r3, #16
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	4bb6      	ldr	r3, [pc, #728]	; (8000bf0 <MX_GPIO_Init+0x308>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	4ab5      	ldr	r2, [pc, #724]	; (8000bf0 <MX_GPIO_Init+0x308>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000922:	4bb3      	ldr	r3, [pc, #716]	; (8000bf0 <MX_GPIO_Init+0x308>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4bb0      	ldr	r3, [pc, #704]	; (8000bf0 <MX_GPIO_Init+0x308>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	4aaf      	ldr	r2, [pc, #700]	; (8000bf0 <MX_GPIO_Init+0x308>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093a:	4bad      	ldr	r3, [pc, #692]	; (8000bf0 <MX_GPIO_Init+0x308>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000946:	4baa      	ldr	r3, [pc, #680]	; (8000bf0 <MX_GPIO_Init+0x308>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	4aa9      	ldr	r2, [pc, #676]	; (8000bf0 <MX_GPIO_Init+0x308>)
 800094c:	f043 0302 	orr.w	r3, r3, #2
 8000950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000952:	4ba7      	ldr	r3, [pc, #668]	; (8000bf0 <MX_GPIO_Init+0x308>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095e:	4ba4      	ldr	r3, [pc, #656]	; (8000bf0 <MX_GPIO_Init+0x308>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000962:	4aa3      	ldr	r2, [pc, #652]	; (8000bf0 <MX_GPIO_Init+0x308>)
 8000964:	f043 0308 	orr.w	r3, r3, #8
 8000968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096a:	4ba1      	ldr	r3, [pc, #644]	; (8000bf0 <MX_GPIO_Init+0x308>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	f003 0308 	and.w	r3, r3, #8
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	f44f 718a 	mov.w	r1, #276	; 0x114
 800097c:	489d      	ldr	r0, [pc, #628]	; (8000bf4 <MX_GPIO_Init+0x30c>)
 800097e:	f000 ffe7 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|LED_A6_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	f248 1144 	movw	r1, #33092	; 0x8144
 8000988:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098c:	f000 ffe0 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000990:	2200      	movs	r2, #0
 8000992:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000996:	4898      	ldr	r0, [pc, #608]	; (8000bf8 <MX_GPIO_Init+0x310>)
 8000998:	f000 ffda 	bl	8001950 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	f241 0181 	movw	r1, #4225	; 0x1081
 80009a2:	4896      	ldr	r0, [pc, #600]	; (8000bfc <MX_GPIO_Init+0x314>)
 80009a4:	f000 ffd4 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009a8:	2201      	movs	r2, #1
 80009aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ae:	4893      	ldr	r0, [pc, #588]	; (8000bfc <MX_GPIO_Init+0x314>)
 80009b0:	f000 ffce 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80009ba:	4891      	ldr	r0, [pc, #580]	; (8000c00 <MX_GPIO_Init+0x318>)
 80009bc:	f000 ffc8 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	2120      	movs	r1, #32
 80009c4:	488c      	ldr	r0, [pc, #560]	; (8000bf8 <MX_GPIO_Init+0x310>)
 80009c6:	f000 ffc3 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009ca:	2201      	movs	r2, #1
 80009cc:	2101      	movs	r1, #1
 80009ce:	4889      	ldr	r0, [pc, #548]	; (8000bf4 <MX_GPIO_Init+0x30c>)
 80009d0:	f000 ffbe 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80009d4:	f240 1315 	movw	r3, #277	; 0x115
 80009d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	2301      	movs	r3, #1
 80009dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	4881      	ldr	r0, [pc, #516]	; (8000bf4 <MX_GPIO_Init+0x30c>)
 80009ee:	f000 fe05 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80009f2:	236a      	movs	r3, #106	; 0x6a
 80009f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4619      	mov	r1, r3
 8000a06:	487b      	ldr	r0, [pc, #492]	; (8000bf4 <MX_GPIO_Init+0x30c>)
 8000a08:	f000 fdf8 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000a0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a12:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	4877      	ldr	r0, [pc, #476]	; (8000c00 <MX_GPIO_Init+0x318>)
 8000a24:	f000 fdea 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000a28:	233f      	movs	r3, #63	; 0x3f
 8000a2a:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a2c:	230b      	movs	r3, #11
 8000a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4871      	ldr	r0, [pc, #452]	; (8000c00 <MX_GPIO_Init+0x318>)
 8000a3c:	f000 fdde 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin LED_A6_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|LED_A6_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000a40:	f248 1344 	movw	r3, #33092	; 0x8144
 8000a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a46:	2301      	movs	r3, #1
 8000a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5c:	f000 fdce 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000a60:	2308      	movs	r3, #8
 8000a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a70:	2301      	movs	r3, #1
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4619      	mov	r1, r3
 8000a7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7e:	f000 fdbd 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000a82:	2310      	movs	r3, #16
 8000a84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a86:	230b      	movs	r3, #11
 8000a88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a98:	f000 fdb0 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D11_Pin;
 8000a9c:	23a0      	movs	r3, #160	; 0xa0
 8000a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aac:	2305      	movs	r3, #5
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aba:	f000 fd9f 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ac2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ac6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4849      	ldr	r0, [pc, #292]	; (8000bf8 <MX_GPIO_Init+0x310>)
 8000ad4:	f000 fd92 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000adc:	230b      	movs	r3, #11
 8000ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4843      	ldr	r0, [pc, #268]	; (8000bf8 <MX_GPIO_Init+0x310>)
 8000aec:	f000 fd86 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000af0:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000af4:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	483b      	ldr	r0, [pc, #236]	; (8000bf8 <MX_GPIO_Init+0x310>)
 8000b0a:	f000 fd77 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000b0e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	2302      	movs	r3, #2
 8000b16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000b20:	2306      	movs	r3, #6
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4832      	ldr	r0, [pc, #200]	; (8000bf4 <MX_GPIO_Init+0x30c>)
 8000b2c:	f000 fd66 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000b30:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000b34:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000b42:	230a      	movs	r3, #10
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4829      	ldr	r0, [pc, #164]	; (8000bf4 <MX_GPIO_Init+0x30c>)
 8000b4e:	f000 fd55 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000b52:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b58:	2312      	movs	r3, #18
 8000b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b60:	2303      	movs	r3, #3
 8000b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b64:	2304      	movs	r3, #4
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4822      	ldr	r0, [pc, #136]	; (8000bf8 <MX_GPIO_Init+0x310>)
 8000b70:	f000 fd44 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000b74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b82:	2303      	movs	r3, #3
 8000b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b86:	2307      	movs	r3, #7
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	481a      	ldr	r0, [pc, #104]	; (8000bfc <MX_GPIO_Init+0x314>)
 8000b92:	f000 fd33 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000b96:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000b9a:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b9c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	4813      	ldr	r0, [pc, #76]	; (8000bfc <MX_GPIO_Init+0x314>)
 8000bae:	f000 fd25 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000bb2:	f243 0381 	movw	r3, #12417	; 0x3081
 8000bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4619      	mov	r1, r3
 8000bca:	480c      	ldr	r0, [pc, #48]	; (8000bfc <MX_GPIO_Init+0x314>)
 8000bcc:	f000 fd16 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000bd0:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_GPIO_Init+0x318>)
 8000bea:	f000 fd07 	bl	80015fc <HAL_GPIO_Init>
 8000bee:	e009      	b.n	8000c04 <MX_GPIO_Init+0x31c>
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	48001000 	.word	0x48001000
 8000bf8:	48000400 	.word	0x48000400
 8000bfc:	48000c00 	.word	0x48000c00
 8000c00:	48000800 	.word	0x48000800

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000c04:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4834      	ldr	r0, [pc, #208]	; (8000cec <MX_GPIO_Init+0x404>)
 8000c1c:	f000 fcee 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000c20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c38:	f000 fce0 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000c3c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c4e:	230a      	movs	r3, #10
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5c:	f000 fcce 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000c60:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c72:	2306      	movs	r3, #6
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	481b      	ldr	r0, [pc, #108]	; (8000cec <MX_GPIO_Init+0x404>)
 8000c7e:	f000 fcbd 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000c82:	2302      	movs	r3, #2
 8000c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c92:	2305      	movs	r3, #5
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4814      	ldr	r0, [pc, #80]	; (8000cf0 <MX_GPIO_Init+0x408>)
 8000c9e:	f000 fcad 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000ca2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ca6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ca8:	2312      	movs	r3, #18
 8000caa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cb4:	2304      	movs	r3, #4
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <MX_GPIO_Init+0x40c>)
 8000cc0:	f000 fc9c 	bl	80015fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2017      	movs	r0, #23
 8000cca:	f000 fbe2 	bl	8001492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000cce:	2017      	movs	r0, #23
 8000cd0:	f000 fbfb 	bl	80014ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	2028      	movs	r0, #40	; 0x28
 8000cda:	f000 fbda 	bl	8001492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cde:	2028      	movs	r0, #40	; 0x28
 8000ce0:	f000 fbf3 	bl	80014ca <HAL_NVIC_EnableIRQ>

}
 8000ce4:	bf00      	nop
 8000ce6:	3728      	adds	r7, #40	; 0x28
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	48000800 	.word	0x48000800
 8000cf0:	48000c00 	.word	0x48000c00
 8000cf4:	48000400 	.word	0x48000400

08000cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfc:	b672      	cpsid	i
}
 8000cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <Error_Handler+0x8>
	...

08000d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <HAL_MspInit+0x44>)
 8000d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d0e:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <HAL_MspInit+0x44>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6613      	str	r3, [r2, #96]	; 0x60
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <HAL_MspInit+0x44>)
 8000d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d22:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <HAL_MspInit+0x44>)
 8000d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d26:	4a08      	ldr	r2, [pc, #32]	; (8000d48 <HAL_MspInit+0x44>)
 8000d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_MspInit+0x44>)
 8000d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40021000 	.word	0x40021000

08000d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b0b0      	sub	sp, #192	; 0xc0
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d68:	2288      	movs	r2, #136	; 0x88
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f003 fb2f 	bl	80043d0 <memset>
  if(huart->Instance==UART4)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a66      	ldr	r2, [pc, #408]	; (8000f10 <HAL_UART_MspInit+0x1c4>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d13c      	bne.n	8000df6 <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000d7c:	2308      	movs	r3, #8
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f001 fc8f 	bl	80026ac <HAL_RCCEx_PeriphCLKConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d94:	f7ff ffb0 	bl	8000cf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000d98:	4b5e      	ldr	r3, [pc, #376]	; (8000f14 <HAL_UART_MspInit+0x1c8>)
 8000d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9c:	4a5d      	ldr	r2, [pc, #372]	; (8000f14 <HAL_UART_MspInit+0x1c8>)
 8000d9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000da2:	6593      	str	r3, [r2, #88]	; 0x58
 8000da4:	4b5b      	ldr	r3, [pc, #364]	; (8000f14 <HAL_UART_MspInit+0x1c8>)
 8000da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000dac:	623b      	str	r3, [r7, #32]
 8000dae:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db0:	4b58      	ldr	r3, [pc, #352]	; (8000f14 <HAL_UART_MspInit+0x1c8>)
 8000db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db4:	4a57      	ldr	r2, [pc, #348]	; (8000f14 <HAL_UART_MspInit+0x1c8>)
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dbc:	4b55      	ldr	r3, [pc, #340]	; (8000f14 <HAL_UART_MspInit+0x1c8>)
 8000dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	61fb      	str	r3, [r7, #28]
 8000dc6:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000de0:	2308      	movs	r3, #8
 8000de2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000dea:	4619      	mov	r1, r3
 8000dec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df0:	f000 fc04 	bl	80015fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000df4:	e088      	b.n	8000f08 <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART1)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a47      	ldr	r2, [pc, #284]	; (8000f18 <HAL_UART_MspInit+0x1cc>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d143      	bne.n	8000e88 <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e00:	2301      	movs	r3, #1
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e04:	2300      	movs	r3, #0
 8000e06:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f001 fc4d 	bl	80026ac <HAL_RCCEx_PeriphCLKConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8000e18:	f7ff ff6e 	bl	8000cf8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e1c:	4b3d      	ldr	r3, [pc, #244]	; (8000f14 <HAL_UART_MspInit+0x1c8>)
 8000e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e20:	4a3c      	ldr	r2, [pc, #240]	; (8000f14 <HAL_UART_MspInit+0x1c8>)
 8000e22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e26:	6613      	str	r3, [r2, #96]	; 0x60
 8000e28:	4b3a      	ldr	r3, [pc, #232]	; (8000f14 <HAL_UART_MspInit+0x1c8>)
 8000e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e30:	61bb      	str	r3, [r7, #24]
 8000e32:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e34:	4b37      	ldr	r3, [pc, #220]	; (8000f14 <HAL_UART_MspInit+0x1c8>)
 8000e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e38:	4a36      	ldr	r2, [pc, #216]	; (8000f14 <HAL_UART_MspInit+0x1c8>)
 8000e3a:	f043 0302 	orr.w	r3, r3, #2
 8000e3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e40:	4b34      	ldr	r3, [pc, #208]	; (8000f14 <HAL_UART_MspInit+0x1c8>)
 8000e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000e4c:	23c0      	movs	r3, #192	; 0xc0
 8000e4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e64:	2307      	movs	r3, #7
 8000e66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e6e:	4619      	mov	r1, r3
 8000e70:	482a      	ldr	r0, [pc, #168]	; (8000f1c <HAL_UART_MspInit+0x1d0>)
 8000e72:	f000 fbc3 	bl	80015fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2100      	movs	r1, #0
 8000e7a:	2025      	movs	r0, #37	; 0x25
 8000e7c:	f000 fb09 	bl	8001492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e80:	2025      	movs	r0, #37	; 0x25
 8000e82:	f000 fb22 	bl	80014ca <HAL_NVIC_EnableIRQ>
}
 8000e86:	e03f      	b.n	8000f08 <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART2)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a24      	ldr	r2, [pc, #144]	; (8000f20 <HAL_UART_MspInit+0x1d4>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d13a      	bne.n	8000f08 <HAL_UART_MspInit+0x1bc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e92:	2302      	movs	r3, #2
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e96:	2300      	movs	r3, #0
 8000e98:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f001 fc04 	bl	80026ac <HAL_RCCEx_PeriphCLKConfig>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_UART_MspInit+0x162>
      Error_Handler();
 8000eaa:	f7ff ff25 	bl	8000cf8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eae:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <HAL_UART_MspInit+0x1c8>)
 8000eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb2:	4a18      	ldr	r2, [pc, #96]	; (8000f14 <HAL_UART_MspInit+0x1c8>)
 8000eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eba:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <HAL_UART_MspInit+0x1c8>)
 8000ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec6:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <HAL_UART_MspInit+0x1c8>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eca:	4a12      	ldr	r2, [pc, #72]	; (8000f14 <HAL_UART_MspInit+0x1c8>)
 8000ecc:	f043 0308 	orr.w	r3, r3, #8
 8000ed0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <HAL_UART_MspInit+0x1c8>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	f003 0308 	and.w	r3, r3, #8
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000ede:	2378      	movs	r3, #120	; 0x78
 8000ee0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ef6:	2307      	movs	r3, #7
 8000ef8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000efc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f00:	4619      	mov	r1, r3
 8000f02:	4808      	ldr	r0, [pc, #32]	; (8000f24 <HAL_UART_MspInit+0x1d8>)
 8000f04:	f000 fb7a 	bl	80015fc <HAL_GPIO_Init>
}
 8000f08:	bf00      	nop
 8000f0a:	37c0      	adds	r7, #192	; 0xc0
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40004c00 	.word	0x40004c00
 8000f14:	40021000 	.word	0x40021000
 8000f18:	40013800 	.word	0x40013800
 8000f1c:	48000400 	.word	0x48000400
 8000f20:	40004400 	.word	0x40004400
 8000f24:	48000c00 	.word	0x48000c00

08000f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <NMI_Handler+0x4>

08000f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <HardFault_Handler+0x4>

08000f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <MemManage_Handler+0x4>

08000f3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <BusFault_Handler+0x4>

08000f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <UsageFault_Handler+0x4>

08000f46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f74:	f000 f992 	bl	800129c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000f80:	2020      	movs	r0, #32
 8000f82:	f000 fcfd 	bl	8001980 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000f86:	2040      	movs	r0, #64	; 0x40
 8000f88:	f000 fcfa 	bl	8001980 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000f8c:	2080      	movs	r0, #128	; 0x80
 8000f8e:	f000 fcf7 	bl	8001980 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000f92:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f96:	f000 fcf3 	bl	8001980 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fa4:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <USART1_IRQHandler+0x10>)
 8000fa6:	f002 fa01 	bl	80033ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200000f8 	.word	0x200000f8

08000fb4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000fb8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000fbc:	f000 fce0 	bl	8001980 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000fc0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000fc4:	f000 fcdc 	bl	8001980 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000fc8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fcc:	f000 fcd8 	bl	8001980 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000fd0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000fd4:	f000 fcd4 	bl	8001980 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000fd8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000fdc:	f000 fcd0 	bl	8001980 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000fee:	4b0f      	ldr	r3, [pc, #60]	; (800102c <ITM_SendChar+0x48>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a0e      	ldr	r2, [pc, #56]	; (800102c <ITM_SendChar+0x48>)
 8000ff4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ff8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <ITM_SendChar+0x4c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a0c      	ldr	r2, [pc, #48]	; (8001030 <ITM_SendChar+0x4c>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001006:	bf00      	nop
 8001008:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	2b00      	cmp	r3, #0
 8001014:	d0f8      	beq.n	8001008 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001016:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	6013      	str	r3, [r2, #0]
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000edfc 	.word	0xe000edfc
 8001030:	e0000e00 	.word	0xe0000e00

08001034 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	e00a      	b.n	800105c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001046:	f3af 8000 	nop.w
 800104a:	4601      	mov	r1, r0
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	1c5a      	adds	r2, r3, #1
 8001050:	60ba      	str	r2, [r7, #8]
 8001052:	b2ca      	uxtb	r2, r1
 8001054:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	3301      	adds	r3, #1
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	697a      	ldr	r2, [r7, #20]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	429a      	cmp	r2, r3
 8001062:	dbf0      	blt.n	8001046 <_read+0x12>
	}

return len;
 8001064:	687b      	ldr	r3, [r7, #4]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b086      	sub	sp, #24
 8001072:	af00      	add	r7, sp, #0
 8001074:	60f8      	str	r0, [r7, #12]
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
 800107e:	e009      	b.n	8001094 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	1c5a      	adds	r2, r3, #1
 8001084:	60ba      	str	r2, [r7, #8]
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ffab 	bl	8000fe4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	3301      	adds	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	697a      	ldr	r2, [r7, #20]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	429a      	cmp	r2, r3
 800109a:	dbf1      	blt.n	8001080 <_write+0x12>
	}
	return len;
 800109c:	687b      	ldr	r3, [r7, #4]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <_close>:

int _close(int file)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
	return -1;
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010ce:	605a      	str	r2, [r3, #4]
	return 0;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <_isatty>:

int _isatty(int file)
{
 80010de:	b480      	push	{r7}
 80010e0:	b083      	sub	sp, #12
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
	return 1;
 80010e6:	2301      	movs	r3, #1
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
	return 0;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001118:	4a14      	ldr	r2, [pc, #80]	; (800116c <_sbrk+0x5c>)
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <_sbrk+0x60>)
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001124:	4b13      	ldr	r3, [pc, #76]	; (8001174 <_sbrk+0x64>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d102      	bne.n	8001132 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <_sbrk+0x64>)
 800112e:	4a12      	ldr	r2, [pc, #72]	; (8001178 <_sbrk+0x68>)
 8001130:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <_sbrk+0x64>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	429a      	cmp	r2, r3
 800113e:	d207      	bcs.n	8001150 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001140:	f003 f91c 	bl	800437c <__errno>
 8001144:	4603      	mov	r3, r0
 8001146:	220c      	movs	r2, #12
 8001148:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800114a:	f04f 33ff 	mov.w	r3, #4294967295
 800114e:	e009      	b.n	8001164 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <_sbrk+0x64>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <_sbrk+0x64>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	4a05      	ldr	r2, [pc, #20]	; (8001174 <_sbrk+0x64>)
 8001160:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001162:	68fb      	ldr	r3, [r7, #12]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20018000 	.word	0x20018000
 8001170:	00000400 	.word	0x00000400
 8001174:	200000ec 	.word	0x200000ec
 8001178:	20000298 	.word	0x20000298

0800117c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <SystemInit+0x20>)
 8001182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001186:	4a05      	ldr	r2, [pc, #20]	; (800119c <SystemInit+0x20>)
 8001188:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800118c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011a4:	f7ff ffea 	bl	800117c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011a8:	480c      	ldr	r0, [pc, #48]	; (80011dc <LoopForever+0x6>)
  ldr r1, =_edata
 80011aa:	490d      	ldr	r1, [pc, #52]	; (80011e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011ac:	4a0d      	ldr	r2, [pc, #52]	; (80011e4 <LoopForever+0xe>)
  movs r3, #0
 80011ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b0:	e002      	b.n	80011b8 <LoopCopyDataInit>

080011b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b6:	3304      	adds	r3, #4

080011b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011bc:	d3f9      	bcc.n	80011b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011be:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011c0:	4c0a      	ldr	r4, [pc, #40]	; (80011ec <LoopForever+0x16>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c4:	e001      	b.n	80011ca <LoopFillZerobss>

080011c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c8:	3204      	adds	r2, #4

080011ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011cc:	d3fb      	bcc.n	80011c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ce:	f003 f8db 	bl	8004388 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011d2:	f7ff f9d1 	bl	8000578 <main>

080011d6 <LoopForever>:

LoopForever:
    b LoopForever
 80011d6:	e7fe      	b.n	80011d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e0:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 80011e4:	080053d4 	.word	0x080053d4
  ldr r2, =_sbss
 80011e8:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80011ec:	20000298 	.word	0x20000298

080011f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011f0:	e7fe      	b.n	80011f0 <ADC1_2_IRQHandler>

080011f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011f8:	2300      	movs	r3, #0
 80011fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011fc:	2003      	movs	r0, #3
 80011fe:	f000 f93d 	bl	800147c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001202:	2000      	movs	r0, #0
 8001204:	f000 f80e 	bl	8001224 <HAL_InitTick>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d002      	beq.n	8001214 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	71fb      	strb	r3, [r7, #7]
 8001212:	e001      	b.n	8001218 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001214:	f7ff fd76 	bl	8000d04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001218:	79fb      	ldrb	r3, [r7, #7]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800122c:	2300      	movs	r3, #0
 800122e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001230:	4b17      	ldr	r3, [pc, #92]	; (8001290 <HAL_InitTick+0x6c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d023      	beq.n	8001280 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001238:	4b16      	ldr	r3, [pc, #88]	; (8001294 <HAL_InitTick+0x70>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <HAL_InitTick+0x6c>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	4619      	mov	r1, r3
 8001242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001246:	fbb3 f3f1 	udiv	r3, r3, r1
 800124a:	fbb2 f3f3 	udiv	r3, r2, r3
 800124e:	4618      	mov	r0, r3
 8001250:	f000 f949 	bl	80014e6 <HAL_SYSTICK_Config>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d10f      	bne.n	800127a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b0f      	cmp	r3, #15
 800125e:	d809      	bhi.n	8001274 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001260:	2200      	movs	r2, #0
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f000 f913 	bl	8001492 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800126c:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <HAL_InitTick+0x74>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	e007      	b.n	8001284 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	73fb      	strb	r3, [r7, #15]
 8001278:	e004      	b.n	8001284 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	73fb      	strb	r3, [r7, #15]
 800127e:	e001      	b.n	8001284 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001284:	7bfb      	ldrb	r3, [r7, #15]
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000040 	.word	0x20000040
 8001294:	20000038 	.word	0x20000038
 8001298:	2000003c 	.word	0x2000003c

0800129c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_IncTick+0x20>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <HAL_IncTick+0x24>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4413      	add	r3, r2
 80012ac:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <HAL_IncTick+0x24>)
 80012ae:	6013      	str	r3, [r2, #0]
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	20000040 	.word	0x20000040
 80012c0:	20000284 	.word	0x20000284

080012c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return uwTick;
 80012c8:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <HAL_GetTick+0x14>)
 80012ca:	681b      	ldr	r3, [r3, #0]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	20000284 	.word	0x20000284

080012dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f8:	4013      	ands	r3, r2
 80012fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001304:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800130c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130e:	4a04      	ldr	r2, [pc, #16]	; (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	60d3      	str	r3, [r2, #12]
}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <__NVIC_GetPriorityGrouping+0x18>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	f003 0307 	and.w	r3, r3, #7
}
 8001332:	4618      	mov	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	2b00      	cmp	r3, #0
 8001350:	db0b      	blt.n	800136a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	f003 021f 	and.w	r2, r3, #31
 8001358:	4907      	ldr	r1, [pc, #28]	; (8001378 <__NVIC_EnableIRQ+0x38>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	095b      	lsrs	r3, r3, #5
 8001360:	2001      	movs	r0, #1
 8001362:	fa00 f202 	lsl.w	r2, r0, r2
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000e100 	.word	0xe000e100

0800137c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	6039      	str	r1, [r7, #0]
 8001386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	2b00      	cmp	r3, #0
 800138e:	db0a      	blt.n	80013a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	b2da      	uxtb	r2, r3
 8001394:	490c      	ldr	r1, [pc, #48]	; (80013c8 <__NVIC_SetPriority+0x4c>)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	0112      	lsls	r2, r2, #4
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	440b      	add	r3, r1
 80013a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a4:	e00a      	b.n	80013bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4908      	ldr	r1, [pc, #32]	; (80013cc <__NVIC_SetPriority+0x50>)
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	f003 030f 	and.w	r3, r3, #15
 80013b2:	3b04      	subs	r3, #4
 80013b4:	0112      	lsls	r2, r2, #4
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	440b      	add	r3, r1
 80013ba:	761a      	strb	r2, [r3, #24]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000e100 	.word	0xe000e100
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b089      	sub	sp, #36	; 0x24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f1c3 0307 	rsb	r3, r3, #7
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	bf28      	it	cs
 80013ee:	2304      	movcs	r3, #4
 80013f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3304      	adds	r3, #4
 80013f6:	2b06      	cmp	r3, #6
 80013f8:	d902      	bls.n	8001400 <NVIC_EncodePriority+0x30>
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3b03      	subs	r3, #3
 80013fe:	e000      	b.n	8001402 <NVIC_EncodePriority+0x32>
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001404:	f04f 32ff 	mov.w	r2, #4294967295
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43da      	mvns	r2, r3
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	401a      	ands	r2, r3
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001418:	f04f 31ff 	mov.w	r1, #4294967295
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	fa01 f303 	lsl.w	r3, r1, r3
 8001422:	43d9      	mvns	r1, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	4313      	orrs	r3, r2
         );
}
 800142a:	4618      	mov	r0, r3
 800142c:	3724      	adds	r7, #36	; 0x24
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3b01      	subs	r3, #1
 8001444:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001448:	d301      	bcc.n	800144e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800144a:	2301      	movs	r3, #1
 800144c:	e00f      	b.n	800146e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144e:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <SysTick_Config+0x40>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001456:	210f      	movs	r1, #15
 8001458:	f04f 30ff 	mov.w	r0, #4294967295
 800145c:	f7ff ff8e 	bl	800137c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <SysTick_Config+0x40>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001466:	4b04      	ldr	r3, [pc, #16]	; (8001478 <SysTick_Config+0x40>)
 8001468:	2207      	movs	r2, #7
 800146a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	e000e010 	.word	0xe000e010

0800147c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff ff29 	bl	80012dc <__NVIC_SetPriorityGrouping>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af00      	add	r7, sp, #0
 8001498:	4603      	mov	r3, r0
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014a4:	f7ff ff3e 	bl	8001324 <__NVIC_GetPriorityGrouping>
 80014a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	68b9      	ldr	r1, [r7, #8]
 80014ae:	6978      	ldr	r0, [r7, #20]
 80014b0:	f7ff ff8e 	bl	80013d0 <NVIC_EncodePriority>
 80014b4:	4602      	mov	r2, r0
 80014b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ba:	4611      	mov	r1, r2
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff5d 	bl	800137c <__NVIC_SetPriority>
}
 80014c2:	bf00      	nop
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	4603      	mov	r3, r0
 80014d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff31 	bl	8001340 <__NVIC_EnableIRQ>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff ffa2 	bl	8001438 <SysTick_Config>
 80014f4:	4603      	mov	r3, r0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014fe:	b480      	push	{r7}
 8001500:	b085      	sub	sp, #20
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d008      	beq.n	8001528 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2204      	movs	r2, #4
 800151a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e022      	b.n	800156e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 020e 	bic.w	r2, r2, #14
 8001536:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0201 	bic.w	r2, r2, #1
 8001546:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154c:	f003 021c 	and.w	r2, r3, #28
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	2101      	movs	r1, #1
 8001556:	fa01 f202 	lsl.w	r2, r1, r2
 800155a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800156c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800156e:	4618      	mov	r0, r3
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b084      	sub	sp, #16
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001582:	2300      	movs	r3, #0
 8001584:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d005      	beq.n	800159e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2204      	movs	r2, #4
 8001596:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	73fb      	strb	r3, [r7, #15]
 800159c:	e029      	b.n	80015f2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 020e 	bic.w	r2, r2, #14
 80015ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 0201 	bic.w	r2, r2, #1
 80015bc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	f003 021c 	and.w	r2, r3, #28
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	2101      	movs	r1, #1
 80015cc:	fa01 f202 	lsl.w	r2, r1, r2
 80015d0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	4798      	blx	r3
    }
  }
  return status;
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b087      	sub	sp, #28
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800160a:	e17f      	b.n	800190c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	2101      	movs	r1, #1
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	fa01 f303 	lsl.w	r3, r1, r3
 8001618:	4013      	ands	r3, r2
 800161a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 8171 	beq.w	8001906 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 0303 	and.w	r3, r3, #3
 800162c:	2b01      	cmp	r3, #1
 800162e:	d005      	beq.n	800163c <HAL_GPIO_Init+0x40>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 0303 	and.w	r3, r3, #3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d130      	bne.n	800169e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	2203      	movs	r2, #3
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	68da      	ldr	r2, [r3, #12]
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4313      	orrs	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001672:	2201      	movs	r2, #1
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	4013      	ands	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	091b      	lsrs	r3, r3, #4
 8001688:	f003 0201 	and.w	r2, r3, #1
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4313      	orrs	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d118      	bne.n	80016dc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80016b0:	2201      	movs	r2, #1
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	4013      	ands	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	08db      	lsrs	r3, r3, #3
 80016c6:	f003 0201 	and.w	r2, r3, #1
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	2b03      	cmp	r3, #3
 80016e6:	d017      	beq.n	8001718 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	2203      	movs	r2, #3
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4013      	ands	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4313      	orrs	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 0303 	and.w	r3, r3, #3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d123      	bne.n	800176c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	08da      	lsrs	r2, r3, #3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3208      	adds	r2, #8
 800172c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001730:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	220f      	movs	r2, #15
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	691a      	ldr	r2, [r3, #16]
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4313      	orrs	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	08da      	lsrs	r2, r3, #3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3208      	adds	r2, #8
 8001766:	6939      	ldr	r1, [r7, #16]
 8001768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	2203      	movs	r2, #3
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4013      	ands	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 0203 	and.w	r2, r3, #3
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4313      	orrs	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f000 80ac 	beq.w	8001906 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ae:	4b5f      	ldr	r3, [pc, #380]	; (800192c <HAL_GPIO_Init+0x330>)
 80017b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b2:	4a5e      	ldr	r2, [pc, #376]	; (800192c <HAL_GPIO_Init+0x330>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6613      	str	r3, [r2, #96]	; 0x60
 80017ba:	4b5c      	ldr	r3, [pc, #368]	; (800192c <HAL_GPIO_Init+0x330>)
 80017bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017c6:	4a5a      	ldr	r2, [pc, #360]	; (8001930 <HAL_GPIO_Init+0x334>)
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	089b      	lsrs	r3, r3, #2
 80017cc:	3302      	adds	r3, #2
 80017ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	220f      	movs	r2, #15
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017f0:	d025      	beq.n	800183e <HAL_GPIO_Init+0x242>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a4f      	ldr	r2, [pc, #316]	; (8001934 <HAL_GPIO_Init+0x338>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d01f      	beq.n	800183a <HAL_GPIO_Init+0x23e>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a4e      	ldr	r2, [pc, #312]	; (8001938 <HAL_GPIO_Init+0x33c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d019      	beq.n	8001836 <HAL_GPIO_Init+0x23a>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a4d      	ldr	r2, [pc, #308]	; (800193c <HAL_GPIO_Init+0x340>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d013      	beq.n	8001832 <HAL_GPIO_Init+0x236>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a4c      	ldr	r2, [pc, #304]	; (8001940 <HAL_GPIO_Init+0x344>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d00d      	beq.n	800182e <HAL_GPIO_Init+0x232>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a4b      	ldr	r2, [pc, #300]	; (8001944 <HAL_GPIO_Init+0x348>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d007      	beq.n	800182a <HAL_GPIO_Init+0x22e>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a4a      	ldr	r2, [pc, #296]	; (8001948 <HAL_GPIO_Init+0x34c>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d101      	bne.n	8001826 <HAL_GPIO_Init+0x22a>
 8001822:	2306      	movs	r3, #6
 8001824:	e00c      	b.n	8001840 <HAL_GPIO_Init+0x244>
 8001826:	2307      	movs	r3, #7
 8001828:	e00a      	b.n	8001840 <HAL_GPIO_Init+0x244>
 800182a:	2305      	movs	r3, #5
 800182c:	e008      	b.n	8001840 <HAL_GPIO_Init+0x244>
 800182e:	2304      	movs	r3, #4
 8001830:	e006      	b.n	8001840 <HAL_GPIO_Init+0x244>
 8001832:	2303      	movs	r3, #3
 8001834:	e004      	b.n	8001840 <HAL_GPIO_Init+0x244>
 8001836:	2302      	movs	r3, #2
 8001838:	e002      	b.n	8001840 <HAL_GPIO_Init+0x244>
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <HAL_GPIO_Init+0x244>
 800183e:	2300      	movs	r3, #0
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	f002 0203 	and.w	r2, r2, #3
 8001846:	0092      	lsls	r2, r2, #2
 8001848:	4093      	lsls	r3, r2
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001850:	4937      	ldr	r1, [pc, #220]	; (8001930 <HAL_GPIO_Init+0x334>)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	089b      	lsrs	r3, r3, #2
 8001856:	3302      	adds	r3, #2
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800185e:	4b3b      	ldr	r3, [pc, #236]	; (800194c <HAL_GPIO_Init+0x350>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	43db      	mvns	r3, r3
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4013      	ands	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4313      	orrs	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001882:	4a32      	ldr	r2, [pc, #200]	; (800194c <HAL_GPIO_Init+0x350>)
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001888:	4b30      	ldr	r3, [pc, #192]	; (800194c <HAL_GPIO_Init+0x350>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	43db      	mvns	r3, r3
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4013      	ands	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018ac:	4a27      	ldr	r2, [pc, #156]	; (800194c <HAL_GPIO_Init+0x350>)
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018b2:	4b26      	ldr	r3, [pc, #152]	; (800194c <HAL_GPIO_Init+0x350>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	43db      	mvns	r3, r3
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	4013      	ands	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018d6:	4a1d      	ldr	r2, [pc, #116]	; (800194c <HAL_GPIO_Init+0x350>)
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018dc:	4b1b      	ldr	r3, [pc, #108]	; (800194c <HAL_GPIO_Init+0x350>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001900:	4a12      	ldr	r2, [pc, #72]	; (800194c <HAL_GPIO_Init+0x350>)
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	3301      	adds	r3, #1
 800190a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	fa22 f303 	lsr.w	r3, r2, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	f47f ae78 	bne.w	800160c <HAL_GPIO_Init+0x10>
  }
}
 800191c:	bf00      	nop
 800191e:	bf00      	nop
 8001920:	371c      	adds	r7, #28
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000
 8001930:	40010000 	.word	0x40010000
 8001934:	48000400 	.word	0x48000400
 8001938:	48000800 	.word	0x48000800
 800193c:	48000c00 	.word	0x48000c00
 8001940:	48001000 	.word	0x48001000
 8001944:	48001400 	.word	0x48001400
 8001948:	48001800 	.word	0x48001800
 800194c:	40010400 	.word	0x40010400

08001950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	807b      	strh	r3, [r7, #2]
 800195c:	4613      	mov	r3, r2
 800195e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001960:	787b      	ldrb	r3, [r7, #1]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001966:	887a      	ldrh	r2, [r7, #2]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800196c:	e002      	b.n	8001974 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800196e:	887a      	ldrh	r2, [r7, #2]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800198a:	4b08      	ldr	r3, [pc, #32]	; (80019ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800198c:	695a      	ldr	r2, [r3, #20]
 800198e:	88fb      	ldrh	r3, [r7, #6]
 8001990:	4013      	ands	r3, r2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d006      	beq.n	80019a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001996:	4a05      	ldr	r2, [pc, #20]	; (80019ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001998:	88fb      	ldrh	r3, [r7, #6]
 800199a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800199c:	88fb      	ldrh	r3, [r7, #6]
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 f806 	bl	80019b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40010400 	.word	0x40010400

080019b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
	...

080019c8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a04      	ldr	r2, [pc, #16]	; (80019e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d6:	6013      	str	r3, [r2, #0]
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40007000 	.word	0x40007000

080019e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019ec:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <HAL_PWREx_GetVoltageRange+0x18>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	40007000 	.word	0x40007000

08001a04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a12:	d130      	bne.n	8001a76 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a14:	4b23      	ldr	r3, [pc, #140]	; (8001aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a20:	d038      	beq.n	8001a94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a22:	4b20      	ldr	r3, [pc, #128]	; (8001aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a2a:	4a1e      	ldr	r2, [pc, #120]	; (8001aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a30:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a32:	4b1d      	ldr	r3, [pc, #116]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2232      	movs	r2, #50	; 0x32
 8001a38:	fb02 f303 	mul.w	r3, r2, r3
 8001a3c:	4a1b      	ldr	r2, [pc, #108]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a42:	0c9b      	lsrs	r3, r3, #18
 8001a44:	3301      	adds	r3, #1
 8001a46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a48:	e002      	b.n	8001a50 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a50:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a5c:	d102      	bne.n	8001a64 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1f2      	bne.n	8001a4a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a70:	d110      	bne.n	8001a94 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e00f      	b.n	8001a96 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a82:	d007      	beq.n	8001a94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a84:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a8c:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a92:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40007000 	.word	0x40007000
 8001aa8:	20000038 	.word	0x20000038
 8001aac:	431bde83 	.word	0x431bde83

08001ab0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e3c6      	b.n	8002250 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ac2:	4ba1      	ldr	r3, [pc, #644]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001acc:	4b9e      	ldr	r3, [pc, #632]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0310 	and.w	r3, r3, #16
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 80e4 	beq.w	8001cac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d007      	beq.n	8001afa <HAL_RCC_OscConfig+0x4a>
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	2b0c      	cmp	r3, #12
 8001aee:	f040 808b 	bne.w	8001c08 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	f040 8087 	bne.w	8001c08 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001afa:	4b93      	ldr	r3, [pc, #588]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d005      	beq.n	8001b12 <HAL_RCC_OscConfig+0x62>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e39e      	b.n	8002250 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a1a      	ldr	r2, [r3, #32]
 8001b16:	4b8c      	ldr	r3, [pc, #560]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d004      	beq.n	8001b2c <HAL_RCC_OscConfig+0x7c>
 8001b22:	4b89      	ldr	r3, [pc, #548]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b2a:	e005      	b.n	8001b38 <HAL_RCC_OscConfig+0x88>
 8001b2c:	4b86      	ldr	r3, [pc, #536]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b32:	091b      	lsrs	r3, r3, #4
 8001b34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d223      	bcs.n	8001b84 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f000 fd53 	bl	80025ec <RCC_SetFlashLatencyFromMSIRange>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e37f      	b.n	8002250 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b50:	4b7d      	ldr	r3, [pc, #500]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a7c      	ldr	r2, [pc, #496]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001b56:	f043 0308 	orr.w	r3, r3, #8
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	4b7a      	ldr	r3, [pc, #488]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	4977      	ldr	r1, [pc, #476]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b6e:	4b76      	ldr	r3, [pc, #472]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	021b      	lsls	r3, r3, #8
 8001b7c:	4972      	ldr	r1, [pc, #456]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	604b      	str	r3, [r1, #4]
 8001b82:	e025      	b.n	8001bd0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b84:	4b70      	ldr	r3, [pc, #448]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a6f      	ldr	r2, [pc, #444]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001b8a:	f043 0308 	orr.w	r3, r3, #8
 8001b8e:	6013      	str	r3, [r2, #0]
 8001b90:	4b6d      	ldr	r3, [pc, #436]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	496a      	ldr	r1, [pc, #424]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ba2:	4b69      	ldr	r3, [pc, #420]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	021b      	lsls	r3, r3, #8
 8001bb0:	4965      	ldr	r1, [pc, #404]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d109      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f000 fd13 	bl	80025ec <RCC_SetFlashLatencyFromMSIRange>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e33f      	b.n	8002250 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bd0:	f000 fc48 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	4b5c      	ldr	r3, [pc, #368]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	091b      	lsrs	r3, r3, #4
 8001bdc:	f003 030f 	and.w	r3, r3, #15
 8001be0:	495a      	ldr	r1, [pc, #360]	; (8001d4c <HAL_RCC_OscConfig+0x29c>)
 8001be2:	5ccb      	ldrb	r3, [r1, r3]
 8001be4:	f003 031f 	and.w	r3, r3, #31
 8001be8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bec:	4a58      	ldr	r2, [pc, #352]	; (8001d50 <HAL_RCC_OscConfig+0x2a0>)
 8001bee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bf0:	4b58      	ldr	r3, [pc, #352]	; (8001d54 <HAL_RCC_OscConfig+0x2a4>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff fb15 	bl	8001224 <HAL_InitTick>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d052      	beq.n	8001caa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
 8001c06:	e323      	b.n	8002250 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d032      	beq.n	8001c76 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c10:	4b4d      	ldr	r3, [pc, #308]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a4c      	ldr	r2, [pc, #304]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c1c:	f7ff fb52 	bl	80012c4 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c24:	f7ff fb4e 	bl	80012c4 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e30c      	b.n	8002250 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c36:	4b44      	ldr	r3, [pc, #272]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0f0      	beq.n	8001c24 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c42:	4b41      	ldr	r3, [pc, #260]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a40      	ldr	r2, [pc, #256]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001c48:	f043 0308 	orr.w	r3, r3, #8
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	4b3e      	ldr	r3, [pc, #248]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	493b      	ldr	r1, [pc, #236]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c60:	4b39      	ldr	r3, [pc, #228]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	021b      	lsls	r3, r3, #8
 8001c6e:	4936      	ldr	r1, [pc, #216]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	604b      	str	r3, [r1, #4]
 8001c74:	e01a      	b.n	8001cac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c76:	4b34      	ldr	r3, [pc, #208]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a33      	ldr	r2, [pc, #204]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001c7c:	f023 0301 	bic.w	r3, r3, #1
 8001c80:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c82:	f7ff fb1f 	bl	80012c4 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c8a:	f7ff fb1b 	bl	80012c4 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e2d9      	b.n	8002250 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c9c:	4b2a      	ldr	r3, [pc, #168]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1f0      	bne.n	8001c8a <HAL_RCC_OscConfig+0x1da>
 8001ca8:	e000      	b.n	8001cac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001caa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d074      	beq.n	8001da2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	2b08      	cmp	r3, #8
 8001cbc:	d005      	beq.n	8001cca <HAL_RCC_OscConfig+0x21a>
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	2b0c      	cmp	r3, #12
 8001cc2:	d10e      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	2b03      	cmp	r3, #3
 8001cc8:	d10b      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cca:	4b1f      	ldr	r3, [pc, #124]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d064      	beq.n	8001da0 <HAL_RCC_OscConfig+0x2f0>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d160      	bne.n	8001da0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e2b6      	b.n	8002250 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cea:	d106      	bne.n	8001cfa <HAL_RCC_OscConfig+0x24a>
 8001cec:	4b16      	ldr	r3, [pc, #88]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a15      	ldr	r2, [pc, #84]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	e01d      	b.n	8001d36 <HAL_RCC_OscConfig+0x286>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d02:	d10c      	bne.n	8001d1e <HAL_RCC_OscConfig+0x26e>
 8001d04:	4b10      	ldr	r3, [pc, #64]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a0f      	ldr	r2, [pc, #60]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001d0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0c      	ldr	r2, [pc, #48]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001d16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d1a:	6013      	str	r3, [r2, #0]
 8001d1c:	e00b      	b.n	8001d36 <HAL_RCC_OscConfig+0x286>
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a09      	ldr	r2, [pc, #36]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a06      	ldr	r2, [pc, #24]	; (8001d48 <HAL_RCC_OscConfig+0x298>)
 8001d30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d34:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d01c      	beq.n	8001d78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3e:	f7ff fac1 	bl	80012c4 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d44:	e011      	b.n	8001d6a <HAL_RCC_OscConfig+0x2ba>
 8001d46:	bf00      	nop
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	080052e4 	.word	0x080052e4
 8001d50:	20000038 	.word	0x20000038
 8001d54:	2000003c 	.word	0x2000003c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d58:	f7ff fab4 	bl	80012c4 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b64      	cmp	r3, #100	; 0x64
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e272      	b.n	8002250 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d6a:	4baf      	ldr	r3, [pc, #700]	; (8002028 <HAL_RCC_OscConfig+0x578>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCC_OscConfig+0x2a8>
 8001d76:	e014      	b.n	8001da2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d78:	f7ff faa4 	bl	80012c4 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d80:	f7ff faa0 	bl	80012c4 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b64      	cmp	r3, #100	; 0x64
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e25e      	b.n	8002250 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d92:	4ba5      	ldr	r3, [pc, #660]	; (8002028 <HAL_RCC_OscConfig+0x578>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x2d0>
 8001d9e:	e000      	b.n	8001da2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d060      	beq.n	8001e70 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d005      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x310>
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	2b0c      	cmp	r3, #12
 8001db8:	d119      	bne.n	8001dee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d116      	bne.n	8001dee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dc0:	4b99      	ldr	r3, [pc, #612]	; (8002028 <HAL_RCC_OscConfig+0x578>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d005      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x328>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e23b      	b.n	8002250 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd8:	4b93      	ldr	r3, [pc, #588]	; (8002028 <HAL_RCC_OscConfig+0x578>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	061b      	lsls	r3, r3, #24
 8001de6:	4990      	ldr	r1, [pc, #576]	; (8002028 <HAL_RCC_OscConfig+0x578>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dec:	e040      	b.n	8001e70 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d023      	beq.n	8001e3e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001df6:	4b8c      	ldr	r3, [pc, #560]	; (8002028 <HAL_RCC_OscConfig+0x578>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a8b      	ldr	r2, [pc, #556]	; (8002028 <HAL_RCC_OscConfig+0x578>)
 8001dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e02:	f7ff fa5f 	bl	80012c4 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0a:	f7ff fa5b 	bl	80012c4 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e219      	b.n	8002250 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e1c:	4b82      	ldr	r3, [pc, #520]	; (8002028 <HAL_RCC_OscConfig+0x578>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0f0      	beq.n	8001e0a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e28:	4b7f      	ldr	r3, [pc, #508]	; (8002028 <HAL_RCC_OscConfig+0x578>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	061b      	lsls	r3, r3, #24
 8001e36:	497c      	ldr	r1, [pc, #496]	; (8002028 <HAL_RCC_OscConfig+0x578>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	604b      	str	r3, [r1, #4]
 8001e3c:	e018      	b.n	8001e70 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e3e:	4b7a      	ldr	r3, [pc, #488]	; (8002028 <HAL_RCC_OscConfig+0x578>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a79      	ldr	r2, [pc, #484]	; (8002028 <HAL_RCC_OscConfig+0x578>)
 8001e44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4a:	f7ff fa3b 	bl	80012c4 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e52:	f7ff fa37 	bl	80012c4 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e1f5      	b.n	8002250 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e64:	4b70      	ldr	r3, [pc, #448]	; (8002028 <HAL_RCC_OscConfig+0x578>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1f0      	bne.n	8001e52 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d03c      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d01c      	beq.n	8001ebe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e84:	4b68      	ldr	r3, [pc, #416]	; (8002028 <HAL_RCC_OscConfig+0x578>)
 8001e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e8a:	4a67      	ldr	r2, [pc, #412]	; (8002028 <HAL_RCC_OscConfig+0x578>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e94:	f7ff fa16 	bl	80012c4 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e9c:	f7ff fa12 	bl	80012c4 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e1d0      	b.n	8002250 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eae:	4b5e      	ldr	r3, [pc, #376]	; (8002028 <HAL_RCC_OscConfig+0x578>)
 8001eb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0ef      	beq.n	8001e9c <HAL_RCC_OscConfig+0x3ec>
 8001ebc:	e01b      	b.n	8001ef6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ebe:	4b5a      	ldr	r3, [pc, #360]	; (8002028 <HAL_RCC_OscConfig+0x578>)
 8001ec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ec4:	4a58      	ldr	r2, [pc, #352]	; (8002028 <HAL_RCC_OscConfig+0x578>)
 8001ec6:	f023 0301 	bic.w	r3, r3, #1
 8001eca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ece:	f7ff f9f9 	bl	80012c4 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed6:	f7ff f9f5 	bl	80012c4 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e1b3      	b.n	8002250 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ee8:	4b4f      	ldr	r3, [pc, #316]	; (8002028 <HAL_RCC_OscConfig+0x578>)
 8001eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1ef      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 80a6 	beq.w	8002050 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f04:	2300      	movs	r3, #0
 8001f06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f08:	4b47      	ldr	r3, [pc, #284]	; (8002028 <HAL_RCC_OscConfig+0x578>)
 8001f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d10d      	bne.n	8001f30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f14:	4b44      	ldr	r3, [pc, #272]	; (8002028 <HAL_RCC_OscConfig+0x578>)
 8001f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f18:	4a43      	ldr	r2, [pc, #268]	; (8002028 <HAL_RCC_OscConfig+0x578>)
 8001f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f20:	4b41      	ldr	r3, [pc, #260]	; (8002028 <HAL_RCC_OscConfig+0x578>)
 8001f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f30:	4b3e      	ldr	r3, [pc, #248]	; (800202c <HAL_RCC_OscConfig+0x57c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d118      	bne.n	8001f6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f3c:	4b3b      	ldr	r3, [pc, #236]	; (800202c <HAL_RCC_OscConfig+0x57c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a3a      	ldr	r2, [pc, #232]	; (800202c <HAL_RCC_OscConfig+0x57c>)
 8001f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f48:	f7ff f9bc 	bl	80012c4 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f50:	f7ff f9b8 	bl	80012c4 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e176      	b.n	8002250 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f62:	4b32      	ldr	r3, [pc, #200]	; (800202c <HAL_RCC_OscConfig+0x57c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d108      	bne.n	8001f88 <HAL_RCC_OscConfig+0x4d8>
 8001f76:	4b2c      	ldr	r3, [pc, #176]	; (8002028 <HAL_RCC_OscConfig+0x578>)
 8001f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7c:	4a2a      	ldr	r2, [pc, #168]	; (8002028 <HAL_RCC_OscConfig+0x578>)
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f86:	e024      	b.n	8001fd2 <HAL_RCC_OscConfig+0x522>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2b05      	cmp	r3, #5
 8001f8e:	d110      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x502>
 8001f90:	4b25      	ldr	r3, [pc, #148]	; (8002028 <HAL_RCC_OscConfig+0x578>)
 8001f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f96:	4a24      	ldr	r2, [pc, #144]	; (8002028 <HAL_RCC_OscConfig+0x578>)
 8001f98:	f043 0304 	orr.w	r3, r3, #4
 8001f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fa0:	4b21      	ldr	r3, [pc, #132]	; (8002028 <HAL_RCC_OscConfig+0x578>)
 8001fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa6:	4a20      	ldr	r2, [pc, #128]	; (8002028 <HAL_RCC_OscConfig+0x578>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fb0:	e00f      	b.n	8001fd2 <HAL_RCC_OscConfig+0x522>
 8001fb2:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <HAL_RCC_OscConfig+0x578>)
 8001fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb8:	4a1b      	ldr	r2, [pc, #108]	; (8002028 <HAL_RCC_OscConfig+0x578>)
 8001fba:	f023 0301 	bic.w	r3, r3, #1
 8001fbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fc2:	4b19      	ldr	r3, [pc, #100]	; (8002028 <HAL_RCC_OscConfig+0x578>)
 8001fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc8:	4a17      	ldr	r2, [pc, #92]	; (8002028 <HAL_RCC_OscConfig+0x578>)
 8001fca:	f023 0304 	bic.w	r3, r3, #4
 8001fce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d016      	beq.n	8002008 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fda:	f7ff f973 	bl	80012c4 <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fe0:	e00a      	b.n	8001ff8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe2:	f7ff f96f 	bl	80012c4 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e12b      	b.n	8002250 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <HAL_RCC_OscConfig+0x578>)
 8001ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0ed      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x532>
 8002006:	e01a      	b.n	800203e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002008:	f7ff f95c 	bl	80012c4 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800200e:	e00f      	b.n	8002030 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002010:	f7ff f958 	bl	80012c4 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	f241 3288 	movw	r2, #5000	; 0x1388
 800201e:	4293      	cmp	r3, r2
 8002020:	d906      	bls.n	8002030 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e114      	b.n	8002250 <HAL_RCC_OscConfig+0x7a0>
 8002026:	bf00      	nop
 8002028:	40021000 	.word	0x40021000
 800202c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002030:	4b89      	ldr	r3, [pc, #548]	; (8002258 <HAL_RCC_OscConfig+0x7a8>)
 8002032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1e8      	bne.n	8002010 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800203e:	7ffb      	ldrb	r3, [r7, #31]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d105      	bne.n	8002050 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002044:	4b84      	ldr	r3, [pc, #528]	; (8002258 <HAL_RCC_OscConfig+0x7a8>)
 8002046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002048:	4a83      	ldr	r2, [pc, #524]	; (8002258 <HAL_RCC_OscConfig+0x7a8>)
 800204a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800204e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 80fa 	beq.w	800224e <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205e:	2b02      	cmp	r3, #2
 8002060:	f040 80d0 	bne.w	8002204 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002064:	4b7c      	ldr	r3, [pc, #496]	; (8002258 <HAL_RCC_OscConfig+0x7a8>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f003 0203 	and.w	r2, r3, #3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002074:	429a      	cmp	r2, r3
 8002076:	d130      	bne.n	80020da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	3b01      	subs	r3, #1
 8002084:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002086:	429a      	cmp	r2, r3
 8002088:	d127      	bne.n	80020da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002094:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002096:	429a      	cmp	r2, r3
 8002098:	d11f      	bne.n	80020da <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020a4:	2a07      	cmp	r2, #7
 80020a6:	bf14      	ite	ne
 80020a8:	2201      	movne	r2, #1
 80020aa:	2200      	moveq	r2, #0
 80020ac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d113      	bne.n	80020da <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020bc:	085b      	lsrs	r3, r3, #1
 80020be:	3b01      	subs	r3, #1
 80020c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d109      	bne.n	80020da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	085b      	lsrs	r3, r3, #1
 80020d2:	3b01      	subs	r3, #1
 80020d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d06e      	beq.n	80021b8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	2b0c      	cmp	r3, #12
 80020de:	d069      	beq.n	80021b4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020e0:	4b5d      	ldr	r3, [pc, #372]	; (8002258 <HAL_RCC_OscConfig+0x7a8>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d105      	bne.n	80020f8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020ec:	4b5a      	ldr	r3, [pc, #360]	; (8002258 <HAL_RCC_OscConfig+0x7a8>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e0a9      	b.n	8002250 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020fc:	4b56      	ldr	r3, [pc, #344]	; (8002258 <HAL_RCC_OscConfig+0x7a8>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a55      	ldr	r2, [pc, #340]	; (8002258 <HAL_RCC_OscConfig+0x7a8>)
 8002102:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002106:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002108:	f7ff f8dc 	bl	80012c4 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002110:	f7ff f8d8 	bl	80012c4 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e096      	b.n	8002250 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002122:	4b4d      	ldr	r3, [pc, #308]	; (8002258 <HAL_RCC_OscConfig+0x7a8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f0      	bne.n	8002110 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800212e:	4b4a      	ldr	r3, [pc, #296]	; (8002258 <HAL_RCC_OscConfig+0x7a8>)
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	4b4a      	ldr	r3, [pc, #296]	; (800225c <HAL_RCC_OscConfig+0x7ac>)
 8002134:	4013      	ands	r3, r2
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800213e:	3a01      	subs	r2, #1
 8002140:	0112      	lsls	r2, r2, #4
 8002142:	4311      	orrs	r1, r2
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002148:	0212      	lsls	r2, r2, #8
 800214a:	4311      	orrs	r1, r2
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002150:	0852      	lsrs	r2, r2, #1
 8002152:	3a01      	subs	r2, #1
 8002154:	0552      	lsls	r2, r2, #21
 8002156:	4311      	orrs	r1, r2
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800215c:	0852      	lsrs	r2, r2, #1
 800215e:	3a01      	subs	r2, #1
 8002160:	0652      	lsls	r2, r2, #25
 8002162:	4311      	orrs	r1, r2
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002168:	0912      	lsrs	r2, r2, #4
 800216a:	0452      	lsls	r2, r2, #17
 800216c:	430a      	orrs	r2, r1
 800216e:	493a      	ldr	r1, [pc, #232]	; (8002258 <HAL_RCC_OscConfig+0x7a8>)
 8002170:	4313      	orrs	r3, r2
 8002172:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002174:	4b38      	ldr	r3, [pc, #224]	; (8002258 <HAL_RCC_OscConfig+0x7a8>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a37      	ldr	r2, [pc, #220]	; (8002258 <HAL_RCC_OscConfig+0x7a8>)
 800217a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800217e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002180:	4b35      	ldr	r3, [pc, #212]	; (8002258 <HAL_RCC_OscConfig+0x7a8>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	4a34      	ldr	r2, [pc, #208]	; (8002258 <HAL_RCC_OscConfig+0x7a8>)
 8002186:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800218a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800218c:	f7ff f89a 	bl	80012c4 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002194:	f7ff f896 	bl	80012c4 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e054      	b.n	8002250 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021a6:	4b2c      	ldr	r3, [pc, #176]	; (8002258 <HAL_RCC_OscConfig+0x7a8>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021b2:	e04c      	b.n	800224e <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e04b      	b.n	8002250 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021b8:	4b27      	ldr	r3, [pc, #156]	; (8002258 <HAL_RCC_OscConfig+0x7a8>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d144      	bne.n	800224e <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021c4:	4b24      	ldr	r3, [pc, #144]	; (8002258 <HAL_RCC_OscConfig+0x7a8>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a23      	ldr	r2, [pc, #140]	; (8002258 <HAL_RCC_OscConfig+0x7a8>)
 80021ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021d0:	4b21      	ldr	r3, [pc, #132]	; (8002258 <HAL_RCC_OscConfig+0x7a8>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	4a20      	ldr	r2, [pc, #128]	; (8002258 <HAL_RCC_OscConfig+0x7a8>)
 80021d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021dc:	f7ff f872 	bl	80012c4 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e4:	f7ff f86e 	bl	80012c4 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e02c      	b.n	8002250 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f6:	4b18      	ldr	r3, [pc, #96]	; (8002258 <HAL_RCC_OscConfig+0x7a8>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0f0      	beq.n	80021e4 <HAL_RCC_OscConfig+0x734>
 8002202:	e024      	b.n	800224e <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	2b0c      	cmp	r3, #12
 8002208:	d01f      	beq.n	800224a <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220a:	4b13      	ldr	r3, [pc, #76]	; (8002258 <HAL_RCC_OscConfig+0x7a8>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a12      	ldr	r2, [pc, #72]	; (8002258 <HAL_RCC_OscConfig+0x7a8>)
 8002210:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002214:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002216:	f7ff f855 	bl	80012c4 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800221e:	f7ff f851 	bl	80012c4 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e00f      	b.n	8002250 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002230:	4b09      	ldr	r3, [pc, #36]	; (8002258 <HAL_RCC_OscConfig+0x7a8>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1f0      	bne.n	800221e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <HAL_RCC_OscConfig+0x7a8>)
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	4905      	ldr	r1, [pc, #20]	; (8002258 <HAL_RCC_OscConfig+0x7a8>)
 8002242:	4b07      	ldr	r3, [pc, #28]	; (8002260 <HAL_RCC_OscConfig+0x7b0>)
 8002244:	4013      	ands	r3, r2
 8002246:	60cb      	str	r3, [r1, #12]
 8002248:	e001      	b.n	800224e <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e000      	b.n	8002250 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3720      	adds	r7, #32
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40021000 	.word	0x40021000
 800225c:	f99d808c 	.word	0xf99d808c
 8002260:	feeefffc 	.word	0xfeeefffc

08002264 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e0e7      	b.n	8002448 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002278:	4b75      	ldr	r3, [pc, #468]	; (8002450 <HAL_RCC_ClockConfig+0x1ec>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	429a      	cmp	r2, r3
 8002284:	d910      	bls.n	80022a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002286:	4b72      	ldr	r3, [pc, #456]	; (8002450 <HAL_RCC_ClockConfig+0x1ec>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f023 0207 	bic.w	r2, r3, #7
 800228e:	4970      	ldr	r1, [pc, #448]	; (8002450 <HAL_RCC_ClockConfig+0x1ec>)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	4313      	orrs	r3, r2
 8002294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002296:	4b6e      	ldr	r3, [pc, #440]	; (8002450 <HAL_RCC_ClockConfig+0x1ec>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d001      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e0cf      	b.n	8002448 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d010      	beq.n	80022d6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	4b66      	ldr	r3, [pc, #408]	; (8002454 <HAL_RCC_ClockConfig+0x1f0>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d908      	bls.n	80022d6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022c4:	4b63      	ldr	r3, [pc, #396]	; (8002454 <HAL_RCC_ClockConfig+0x1f0>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	4960      	ldr	r1, [pc, #384]	; (8002454 <HAL_RCC_ClockConfig+0x1f0>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d04c      	beq.n	800237c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b03      	cmp	r3, #3
 80022e8:	d107      	bne.n	80022fa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ea:	4b5a      	ldr	r3, [pc, #360]	; (8002454 <HAL_RCC_ClockConfig+0x1f0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d121      	bne.n	800233a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e0a6      	b.n	8002448 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d107      	bne.n	8002312 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002302:	4b54      	ldr	r3, [pc, #336]	; (8002454 <HAL_RCC_ClockConfig+0x1f0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d115      	bne.n	800233a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e09a      	b.n	8002448 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d107      	bne.n	800232a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800231a:	4b4e      	ldr	r3, [pc, #312]	; (8002454 <HAL_RCC_ClockConfig+0x1f0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d109      	bne.n	800233a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e08e      	b.n	8002448 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800232a:	4b4a      	ldr	r3, [pc, #296]	; (8002454 <HAL_RCC_ClockConfig+0x1f0>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e086      	b.n	8002448 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800233a:	4b46      	ldr	r3, [pc, #280]	; (8002454 <HAL_RCC_ClockConfig+0x1f0>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f023 0203 	bic.w	r2, r3, #3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	4943      	ldr	r1, [pc, #268]	; (8002454 <HAL_RCC_ClockConfig+0x1f0>)
 8002348:	4313      	orrs	r3, r2
 800234a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800234c:	f7fe ffba 	bl	80012c4 <HAL_GetTick>
 8002350:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002352:	e00a      	b.n	800236a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002354:	f7fe ffb6 	bl	80012c4 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002362:	4293      	cmp	r3, r2
 8002364:	d901      	bls.n	800236a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e06e      	b.n	8002448 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236a:	4b3a      	ldr	r3, [pc, #232]	; (8002454 <HAL_RCC_ClockConfig+0x1f0>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 020c 	and.w	r2, r3, #12
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	429a      	cmp	r2, r3
 800237a:	d1eb      	bne.n	8002354 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d010      	beq.n	80023aa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	4b31      	ldr	r3, [pc, #196]	; (8002454 <HAL_RCC_ClockConfig+0x1f0>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002394:	429a      	cmp	r2, r3
 8002396:	d208      	bcs.n	80023aa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002398:	4b2e      	ldr	r3, [pc, #184]	; (8002454 <HAL_RCC_ClockConfig+0x1f0>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	492b      	ldr	r1, [pc, #172]	; (8002454 <HAL_RCC_ClockConfig+0x1f0>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023aa:	4b29      	ldr	r3, [pc, #164]	; (8002450 <HAL_RCC_ClockConfig+0x1ec>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d210      	bcs.n	80023da <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b8:	4b25      	ldr	r3, [pc, #148]	; (8002450 <HAL_RCC_ClockConfig+0x1ec>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f023 0207 	bic.w	r2, r3, #7
 80023c0:	4923      	ldr	r1, [pc, #140]	; (8002450 <HAL_RCC_ClockConfig+0x1ec>)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c8:	4b21      	ldr	r3, [pc, #132]	; (8002450 <HAL_RCC_ClockConfig+0x1ec>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d001      	beq.n	80023da <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e036      	b.n	8002448 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d008      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023e6:	4b1b      	ldr	r3, [pc, #108]	; (8002454 <HAL_RCC_ClockConfig+0x1f0>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	4918      	ldr	r1, [pc, #96]	; (8002454 <HAL_RCC_ClockConfig+0x1f0>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0308 	and.w	r3, r3, #8
 8002400:	2b00      	cmp	r3, #0
 8002402:	d009      	beq.n	8002418 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002404:	4b13      	ldr	r3, [pc, #76]	; (8002454 <HAL_RCC_ClockConfig+0x1f0>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	4910      	ldr	r1, [pc, #64]	; (8002454 <HAL_RCC_ClockConfig+0x1f0>)
 8002414:	4313      	orrs	r3, r2
 8002416:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002418:	f000 f824 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 800241c:	4602      	mov	r2, r0
 800241e:	4b0d      	ldr	r3, [pc, #52]	; (8002454 <HAL_RCC_ClockConfig+0x1f0>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	091b      	lsrs	r3, r3, #4
 8002424:	f003 030f 	and.w	r3, r3, #15
 8002428:	490b      	ldr	r1, [pc, #44]	; (8002458 <HAL_RCC_ClockConfig+0x1f4>)
 800242a:	5ccb      	ldrb	r3, [r1, r3]
 800242c:	f003 031f 	and.w	r3, r3, #31
 8002430:	fa22 f303 	lsr.w	r3, r2, r3
 8002434:	4a09      	ldr	r2, [pc, #36]	; (800245c <HAL_RCC_ClockConfig+0x1f8>)
 8002436:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002438:	4b09      	ldr	r3, [pc, #36]	; (8002460 <HAL_RCC_ClockConfig+0x1fc>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f7fe fef1 	bl	8001224 <HAL_InitTick>
 8002442:	4603      	mov	r3, r0
 8002444:	72fb      	strb	r3, [r7, #11]

  return status;
 8002446:	7afb      	ldrb	r3, [r7, #11]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40022000 	.word	0x40022000
 8002454:	40021000 	.word	0x40021000
 8002458:	080052e4 	.word	0x080052e4
 800245c:	20000038 	.word	0x20000038
 8002460:	2000003c 	.word	0x2000003c

08002464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002464:	b480      	push	{r7}
 8002466:	b089      	sub	sp, #36	; 0x24
 8002468:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
 800246e:	2300      	movs	r3, #0
 8002470:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002472:	4b3e      	ldr	r3, [pc, #248]	; (800256c <HAL_RCC_GetSysClockFreq+0x108>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 030c 	and.w	r3, r3, #12
 800247a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800247c:	4b3b      	ldr	r3, [pc, #236]	; (800256c <HAL_RCC_GetSysClockFreq+0x108>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	f003 0303 	and.w	r3, r3, #3
 8002484:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d005      	beq.n	8002498 <HAL_RCC_GetSysClockFreq+0x34>
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	2b0c      	cmp	r3, #12
 8002490:	d121      	bne.n	80024d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d11e      	bne.n	80024d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002498:	4b34      	ldr	r3, [pc, #208]	; (800256c <HAL_RCC_GetSysClockFreq+0x108>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0308 	and.w	r3, r3, #8
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d107      	bne.n	80024b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024a4:	4b31      	ldr	r3, [pc, #196]	; (800256c <HAL_RCC_GetSysClockFreq+0x108>)
 80024a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024aa:	0a1b      	lsrs	r3, r3, #8
 80024ac:	f003 030f 	and.w	r3, r3, #15
 80024b0:	61fb      	str	r3, [r7, #28]
 80024b2:	e005      	b.n	80024c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024b4:	4b2d      	ldr	r3, [pc, #180]	; (800256c <HAL_RCC_GetSysClockFreq+0x108>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024c0:	4a2b      	ldr	r2, [pc, #172]	; (8002570 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10d      	bne.n	80024ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024d4:	e00a      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d102      	bne.n	80024e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024dc:	4b25      	ldr	r3, [pc, #148]	; (8002574 <HAL_RCC_GetSysClockFreq+0x110>)
 80024de:	61bb      	str	r3, [r7, #24]
 80024e0:	e004      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	d101      	bne.n	80024ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024e8:	4b23      	ldr	r3, [pc, #140]	; (8002578 <HAL_RCC_GetSysClockFreq+0x114>)
 80024ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	2b0c      	cmp	r3, #12
 80024f0:	d134      	bne.n	800255c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024f2:	4b1e      	ldr	r3, [pc, #120]	; (800256c <HAL_RCC_GetSysClockFreq+0x108>)
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d003      	beq.n	800250a <HAL_RCC_GetSysClockFreq+0xa6>
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b03      	cmp	r3, #3
 8002506:	d003      	beq.n	8002510 <HAL_RCC_GetSysClockFreq+0xac>
 8002508:	e005      	b.n	8002516 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800250a:	4b1a      	ldr	r3, [pc, #104]	; (8002574 <HAL_RCC_GetSysClockFreq+0x110>)
 800250c:	617b      	str	r3, [r7, #20]
      break;
 800250e:	e005      	b.n	800251c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002510:	4b19      	ldr	r3, [pc, #100]	; (8002578 <HAL_RCC_GetSysClockFreq+0x114>)
 8002512:	617b      	str	r3, [r7, #20]
      break;
 8002514:	e002      	b.n	800251c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	617b      	str	r3, [r7, #20]
      break;
 800251a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800251c:	4b13      	ldr	r3, [pc, #76]	; (800256c <HAL_RCC_GetSysClockFreq+0x108>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	091b      	lsrs	r3, r3, #4
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	3301      	adds	r3, #1
 8002528:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800252a:	4b10      	ldr	r3, [pc, #64]	; (800256c <HAL_RCC_GetSysClockFreq+0x108>)
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	0a1b      	lsrs	r3, r3, #8
 8002530:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	fb02 f203 	mul.w	r2, r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002540:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002542:	4b0a      	ldr	r3, [pc, #40]	; (800256c <HAL_RCC_GetSysClockFreq+0x108>)
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	0e5b      	lsrs	r3, r3, #25
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	3301      	adds	r3, #1
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	fbb2 f3f3 	udiv	r3, r2, r3
 800255a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800255c:	69bb      	ldr	r3, [r7, #24]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3724      	adds	r7, #36	; 0x24
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	40021000 	.word	0x40021000
 8002570:	080052fc 	.word	0x080052fc
 8002574:	00f42400 	.word	0x00f42400
 8002578:	007a1200 	.word	0x007a1200

0800257c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002580:	4b03      	ldr	r3, [pc, #12]	; (8002590 <HAL_RCC_GetHCLKFreq+0x14>)
 8002582:	681b      	ldr	r3, [r3, #0]
}
 8002584:	4618      	mov	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	20000038 	.word	0x20000038

08002594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002598:	f7ff fff0 	bl	800257c <HAL_RCC_GetHCLKFreq>
 800259c:	4602      	mov	r2, r0
 800259e:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	0a1b      	lsrs	r3, r3, #8
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	4904      	ldr	r1, [pc, #16]	; (80025bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80025aa:	5ccb      	ldrb	r3, [r1, r3]
 80025ac:	f003 031f 	and.w	r3, r3, #31
 80025b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40021000 	.word	0x40021000
 80025bc:	080052f4 	.word	0x080052f4

080025c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025c4:	f7ff ffda 	bl	800257c <HAL_RCC_GetHCLKFreq>
 80025c8:	4602      	mov	r2, r0
 80025ca:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	0adb      	lsrs	r3, r3, #11
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	4904      	ldr	r1, [pc, #16]	; (80025e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025d6:	5ccb      	ldrb	r3, [r1, r3]
 80025d8:	f003 031f 	and.w	r3, r3, #31
 80025dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40021000 	.word	0x40021000
 80025e8:	080052f4 	.word	0x080052f4

080025ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025f4:	2300      	movs	r3, #0
 80025f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025f8:	4b2a      	ldr	r3, [pc, #168]	; (80026a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002604:	f7ff f9f0 	bl	80019e8 <HAL_PWREx_GetVoltageRange>
 8002608:	6178      	str	r0, [r7, #20]
 800260a:	e014      	b.n	8002636 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800260c:	4b25      	ldr	r3, [pc, #148]	; (80026a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800260e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002610:	4a24      	ldr	r2, [pc, #144]	; (80026a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002616:	6593      	str	r3, [r2, #88]	; 0x58
 8002618:	4b22      	ldr	r3, [pc, #136]	; (80026a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800261a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002624:	f7ff f9e0 	bl	80019e8 <HAL_PWREx_GetVoltageRange>
 8002628:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800262a:	4b1e      	ldr	r3, [pc, #120]	; (80026a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800262c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262e:	4a1d      	ldr	r2, [pc, #116]	; (80026a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002630:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002634:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800263c:	d10b      	bne.n	8002656 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b80      	cmp	r3, #128	; 0x80
 8002642:	d919      	bls.n	8002678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2ba0      	cmp	r3, #160	; 0xa0
 8002648:	d902      	bls.n	8002650 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800264a:	2302      	movs	r3, #2
 800264c:	613b      	str	r3, [r7, #16]
 800264e:	e013      	b.n	8002678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002650:	2301      	movs	r3, #1
 8002652:	613b      	str	r3, [r7, #16]
 8002654:	e010      	b.n	8002678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b80      	cmp	r3, #128	; 0x80
 800265a:	d902      	bls.n	8002662 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800265c:	2303      	movs	r3, #3
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	e00a      	b.n	8002678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b80      	cmp	r3, #128	; 0x80
 8002666:	d102      	bne.n	800266e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002668:	2302      	movs	r3, #2
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	e004      	b.n	8002678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b70      	cmp	r3, #112	; 0x70
 8002672:	d101      	bne.n	8002678 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002674:	2301      	movs	r3, #1
 8002676:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002678:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f023 0207 	bic.w	r2, r3, #7
 8002680:	4909      	ldr	r1, [pc, #36]	; (80026a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002688:	4b07      	ldr	r3, [pc, #28]	; (80026a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	429a      	cmp	r2, r3
 8002694:	d001      	beq.n	800269a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e000      	b.n	800269c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40021000 	.word	0x40021000
 80026a8:	40022000 	.word	0x40022000

080026ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026b4:	2300      	movs	r3, #0
 80026b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026b8:	2300      	movs	r3, #0
 80026ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d041      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026d0:	d02a      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80026d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026d6:	d824      	bhi.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026dc:	d008      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026e2:	d81e      	bhi.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00a      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 80026e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026ec:	d010      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026ee:	e018      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026f0:	4b86      	ldr	r3, [pc, #536]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	4a85      	ldr	r2, [pc, #532]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026fa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026fc:	e015      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3304      	adds	r3, #4
 8002702:	2100      	movs	r1, #0
 8002704:	4618      	mov	r0, r3
 8002706:	f000 facb 	bl	8002ca0 <RCCEx_PLLSAI1_Config>
 800270a:	4603      	mov	r3, r0
 800270c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800270e:	e00c      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3320      	adds	r3, #32
 8002714:	2100      	movs	r1, #0
 8002716:	4618      	mov	r0, r3
 8002718:	f000 fbb6 	bl	8002e88 <RCCEx_PLLSAI2_Config>
 800271c:	4603      	mov	r3, r0
 800271e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002720:	e003      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	74fb      	strb	r3, [r7, #19]
      break;
 8002726:	e000      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002728:	bf00      	nop
    }

    if(ret == HAL_OK)
 800272a:	7cfb      	ldrb	r3, [r7, #19]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10b      	bne.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002730:	4b76      	ldr	r3, [pc, #472]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002736:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800273e:	4973      	ldr	r1, [pc, #460]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002740:	4313      	orrs	r3, r2
 8002742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002746:	e001      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002748:	7cfb      	ldrb	r3, [r7, #19]
 800274a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d041      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800275c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002760:	d02a      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002762:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002766:	d824      	bhi.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002768:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800276c:	d008      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800276e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002772:	d81e      	bhi.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00a      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800277c:	d010      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800277e:	e018      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002780:	4b62      	ldr	r3, [pc, #392]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	4a61      	ldr	r2, [pc, #388]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800278a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800278c:	e015      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3304      	adds	r3, #4
 8002792:	2100      	movs	r1, #0
 8002794:	4618      	mov	r0, r3
 8002796:	f000 fa83 	bl	8002ca0 <RCCEx_PLLSAI1_Config>
 800279a:	4603      	mov	r3, r0
 800279c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800279e:	e00c      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3320      	adds	r3, #32
 80027a4:	2100      	movs	r1, #0
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 fb6e 	bl	8002e88 <RCCEx_PLLSAI2_Config>
 80027ac:	4603      	mov	r3, r0
 80027ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027b0:	e003      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	74fb      	strb	r3, [r7, #19]
      break;
 80027b6:	e000      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80027b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027ba:	7cfb      	ldrb	r3, [r7, #19]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10b      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027c0:	4b52      	ldr	r3, [pc, #328]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027ce:	494f      	ldr	r1, [pc, #316]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027d6:	e001      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027d8:	7cfb      	ldrb	r3, [r7, #19]
 80027da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 80a0 	beq.w	800292a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ea:	2300      	movs	r3, #0
 80027ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027ee:	4b47      	ldr	r3, [pc, #284]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x152>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80027fe:	2300      	movs	r3, #0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00d      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002804:	4b41      	ldr	r3, [pc, #260]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002808:	4a40      	ldr	r2, [pc, #256]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800280a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800280e:	6593      	str	r3, [r2, #88]	; 0x58
 8002810:	4b3e      	ldr	r3, [pc, #248]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800281c:	2301      	movs	r3, #1
 800281e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002820:	4b3b      	ldr	r3, [pc, #236]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a3a      	ldr	r2, [pc, #232]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800282a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800282c:	f7fe fd4a 	bl	80012c4 <HAL_GetTick>
 8002830:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002832:	e009      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002834:	f7fe fd46 	bl	80012c4 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d902      	bls.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	74fb      	strb	r3, [r7, #19]
        break;
 8002846:	e005      	b.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002848:	4b31      	ldr	r3, [pc, #196]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0ef      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002854:	7cfb      	ldrb	r3, [r7, #19]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d15c      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800285a:	4b2c      	ldr	r3, [pc, #176]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800285c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002860:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002864:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d01f      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x200>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	429a      	cmp	r2, r3
 8002876:	d019      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002878:	4b24      	ldr	r3, [pc, #144]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800287a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002882:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002884:	4b21      	ldr	r3, [pc, #132]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288a:	4a20      	ldr	r2, [pc, #128]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800288c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002890:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002894:	4b1d      	ldr	r3, [pc, #116]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289a:	4a1c      	ldr	r2, [pc, #112]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800289c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028a4:	4a19      	ldr	r2, [pc, #100]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d016      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b6:	f7fe fd05 	bl	80012c4 <HAL_GetTick>
 80028ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028bc:	e00b      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028be:	f7fe fd01 	bl	80012c4 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d902      	bls.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	74fb      	strb	r3, [r7, #19]
            break;
 80028d4:	e006      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028d6:	4b0d      	ldr	r3, [pc, #52]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0ec      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80028e4:	7cfb      	ldrb	r3, [r7, #19]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10c      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028ea:	4b08      	ldr	r3, [pc, #32]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028fa:	4904      	ldr	r1, [pc, #16]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002902:	e009      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002904:	7cfb      	ldrb	r3, [r7, #19]
 8002906:	74bb      	strb	r3, [r7, #18]
 8002908:	e006      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800290a:	bf00      	nop
 800290c:	40021000 	.word	0x40021000
 8002910:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002914:	7cfb      	ldrb	r3, [r7, #19]
 8002916:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002918:	7c7b      	ldrb	r3, [r7, #17]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d105      	bne.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800291e:	4b9e      	ldr	r3, [pc, #632]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002922:	4a9d      	ldr	r2, [pc, #628]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002928:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00a      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002936:	4b98      	ldr	r3, [pc, #608]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293c:	f023 0203 	bic.w	r2, r3, #3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002944:	4994      	ldr	r1, [pc, #592]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002946:	4313      	orrs	r3, r2
 8002948:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00a      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002958:	4b8f      	ldr	r3, [pc, #572]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295e:	f023 020c 	bic.w	r2, r3, #12
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002966:	498c      	ldr	r1, [pc, #560]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002968:	4313      	orrs	r3, r2
 800296a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00a      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800297a:	4b87      	ldr	r3, [pc, #540]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002980:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	4983      	ldr	r1, [pc, #524]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298a:	4313      	orrs	r3, r2
 800298c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00a      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800299c:	4b7e      	ldr	r3, [pc, #504]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	497b      	ldr	r1, [pc, #492]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0310 	and.w	r3, r3, #16
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00a      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029be:	4b76      	ldr	r3, [pc, #472]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029cc:	4972      	ldr	r1, [pc, #456]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0320 	and.w	r3, r3, #32
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00a      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029e0:	4b6d      	ldr	r3, [pc, #436]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ee:	496a      	ldr	r1, [pc, #424]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00a      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a02:	4b65      	ldr	r3, [pc, #404]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a10:	4961      	ldr	r1, [pc, #388]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00a      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a24:	4b5c      	ldr	r3, [pc, #368]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a32:	4959      	ldr	r1, [pc, #356]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a46:	4b54      	ldr	r3, [pc, #336]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a54:	4950      	ldr	r1, [pc, #320]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00a      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a68:	4b4b      	ldr	r3, [pc, #300]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a76:	4948      	ldr	r1, [pc, #288]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00a      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a8a:	4b43      	ldr	r3, [pc, #268]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a98:	493f      	ldr	r1, [pc, #252]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d028      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002aac:	4b3a      	ldr	r3, [pc, #232]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aba:	4937      	ldr	r1, [pc, #220]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ac6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aca:	d106      	bne.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002acc:	4b32      	ldr	r3, [pc, #200]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	4a31      	ldr	r2, [pc, #196]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ad6:	60d3      	str	r3, [r2, #12]
 8002ad8:	e011      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ade:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ae2:	d10c      	bne.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3304      	adds	r3, #4
 8002ae8:	2101      	movs	r1, #1
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 f8d8 	bl	8002ca0 <RCCEx_PLLSAI1_Config>
 8002af0:	4603      	mov	r3, r0
 8002af2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002af4:	7cfb      	ldrb	r3, [r7, #19]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002afa:	7cfb      	ldrb	r3, [r7, #19]
 8002afc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d028      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b0a:	4b23      	ldr	r3, [pc, #140]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b10:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b18:	491f      	ldr	r1, [pc, #124]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b28:	d106      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b2a:	4b1b      	ldr	r3, [pc, #108]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	4a1a      	ldr	r2, [pc, #104]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b34:	60d3      	str	r3, [r2, #12]
 8002b36:	e011      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b40:	d10c      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	3304      	adds	r3, #4
 8002b46:	2101      	movs	r1, #1
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f000 f8a9 	bl	8002ca0 <RCCEx_PLLSAI1_Config>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b52:	7cfb      	ldrb	r3, [r7, #19]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002b58:	7cfb      	ldrb	r3, [r7, #19]
 8002b5a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d02b      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b76:	4908      	ldr	r1, [pc, #32]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b86:	d109      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b88:	4b03      	ldr	r3, [pc, #12]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	4a02      	ldr	r2, [pc, #8]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b92:	60d3      	str	r3, [r2, #12]
 8002b94:	e014      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002b96:	bf00      	nop
 8002b98:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ba4:	d10c      	bne.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3304      	adds	r3, #4
 8002baa:	2101      	movs	r1, #1
 8002bac:	4618      	mov	r0, r3
 8002bae:	f000 f877 	bl	8002ca0 <RCCEx_PLLSAI1_Config>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bb6:	7cfb      	ldrb	r3, [r7, #19]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002bbc:	7cfb      	ldrb	r3, [r7, #19]
 8002bbe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d02f      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bcc:	4b2b      	ldr	r3, [pc, #172]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bda:	4928      	ldr	r1, [pc, #160]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002be6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bea:	d10d      	bne.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3304      	adds	r3, #4
 8002bf0:	2102      	movs	r1, #2
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 f854 	bl	8002ca0 <RCCEx_PLLSAI1_Config>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bfc:	7cfb      	ldrb	r3, [r7, #19]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d014      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c02:	7cfb      	ldrb	r3, [r7, #19]
 8002c04:	74bb      	strb	r3, [r7, #18]
 8002c06:	e011      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c10:	d10c      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3320      	adds	r3, #32
 8002c16:	2102      	movs	r1, #2
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f000 f935 	bl	8002e88 <RCCEx_PLLSAI2_Config>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c22:	7cfb      	ldrb	r3, [r7, #19]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c28:	7cfb      	ldrb	r3, [r7, #19]
 8002c2a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00a      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c38:	4b10      	ldr	r3, [pc, #64]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c46:	490d      	ldr	r1, [pc, #52]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00b      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c5a:	4b08      	ldr	r3, [pc, #32]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c6a:	4904      	ldr	r1, [pc, #16]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c72:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3718      	adds	r7, #24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40021000 	.word	0x40021000

08002c80 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002c84:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a04      	ldr	r2, [pc, #16]	; (8002c9c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002c8a:	f043 0304 	orr.w	r3, r3, #4
 8002c8e:	6013      	str	r3, [r2, #0]
}
 8002c90:	bf00      	nop
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40021000 	.word	0x40021000

08002ca0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cae:	4b75      	ldr	r3, [pc, #468]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d018      	beq.n	8002cec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002cba:	4b72      	ldr	r3, [pc, #456]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f003 0203 	and.w	r2, r3, #3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d10d      	bne.n	8002ce6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
       ||
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d009      	beq.n	8002ce6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002cd2:	4b6c      	ldr	r3, [pc, #432]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	091b      	lsrs	r3, r3, #4
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
       ||
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d047      	beq.n	8002d76 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	73fb      	strb	r3, [r7, #15]
 8002cea:	e044      	b.n	8002d76 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d018      	beq.n	8002d26 <RCCEx_PLLSAI1_Config+0x86>
 8002cf4:	2b03      	cmp	r3, #3
 8002cf6:	d825      	bhi.n	8002d44 <RCCEx_PLLSAI1_Config+0xa4>
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d002      	beq.n	8002d02 <RCCEx_PLLSAI1_Config+0x62>
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d009      	beq.n	8002d14 <RCCEx_PLLSAI1_Config+0x74>
 8002d00:	e020      	b.n	8002d44 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d02:	4b60      	ldr	r3, [pc, #384]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d11d      	bne.n	8002d4a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d12:	e01a      	b.n	8002d4a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d14:	4b5b      	ldr	r3, [pc, #364]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d116      	bne.n	8002d4e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d24:	e013      	b.n	8002d4e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d26:	4b57      	ldr	r3, [pc, #348]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10f      	bne.n	8002d52 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d32:	4b54      	ldr	r3, [pc, #336]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d109      	bne.n	8002d52 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d42:	e006      	b.n	8002d52 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]
      break;
 8002d48:	e004      	b.n	8002d54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d4a:	bf00      	nop
 8002d4c:	e002      	b.n	8002d54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d4e:	bf00      	nop
 8002d50:	e000      	b.n	8002d54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d52:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10d      	bne.n	8002d76 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d5a:	4b4a      	ldr	r3, [pc, #296]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6819      	ldr	r1, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	430b      	orrs	r3, r1
 8002d70:	4944      	ldr	r1, [pc, #272]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d17d      	bne.n	8002e78 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d7c:	4b41      	ldr	r3, [pc, #260]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a40      	ldr	r2, [pc, #256]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d88:	f7fe fa9c 	bl	80012c4 <HAL_GetTick>
 8002d8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d8e:	e009      	b.n	8002da4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d90:	f7fe fa98 	bl	80012c4 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d902      	bls.n	8002da4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	73fb      	strb	r3, [r7, #15]
        break;
 8002da2:	e005      	b.n	8002db0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002da4:	4b37      	ldr	r3, [pc, #220]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1ef      	bne.n	8002d90 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d160      	bne.n	8002e78 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d111      	bne.n	8002de0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dbc:	4b31      	ldr	r3, [pc, #196]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6892      	ldr	r2, [r2, #8]
 8002dcc:	0211      	lsls	r1, r2, #8
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	68d2      	ldr	r2, [r2, #12]
 8002dd2:	0912      	lsrs	r2, r2, #4
 8002dd4:	0452      	lsls	r2, r2, #17
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	492a      	ldr	r1, [pc, #168]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	610b      	str	r3, [r1, #16]
 8002dde:	e027      	b.n	8002e30 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d112      	bne.n	8002e0c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002de6:	4b27      	ldr	r3, [pc, #156]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002dee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6892      	ldr	r2, [r2, #8]
 8002df6:	0211      	lsls	r1, r2, #8
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6912      	ldr	r2, [r2, #16]
 8002dfc:	0852      	lsrs	r2, r2, #1
 8002dfe:	3a01      	subs	r2, #1
 8002e00:	0552      	lsls	r2, r2, #21
 8002e02:	430a      	orrs	r2, r1
 8002e04:	491f      	ldr	r1, [pc, #124]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	610b      	str	r3, [r1, #16]
 8002e0a:	e011      	b.n	8002e30 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e0c:	4b1d      	ldr	r3, [pc, #116]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6892      	ldr	r2, [r2, #8]
 8002e1c:	0211      	lsls	r1, r2, #8
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6952      	ldr	r2, [r2, #20]
 8002e22:	0852      	lsrs	r2, r2, #1
 8002e24:	3a01      	subs	r2, #1
 8002e26:	0652      	lsls	r2, r2, #25
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	4916      	ldr	r1, [pc, #88]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e30:	4b14      	ldr	r3, [pc, #80]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a13      	ldr	r2, [pc, #76]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3c:	f7fe fa42 	bl	80012c4 <HAL_GetTick>
 8002e40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e42:	e009      	b.n	8002e58 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e44:	f7fe fa3e 	bl	80012c4 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d902      	bls.n	8002e58 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	73fb      	strb	r3, [r7, #15]
          break;
 8002e56:	e005      	b.n	8002e64 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e58:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0ef      	beq.n	8002e44 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d106      	bne.n	8002e78 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e6a:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e6c:	691a      	ldr	r2, [r3, #16]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	4904      	ldr	r1, [pc, #16]	; (8002e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40021000 	.word	0x40021000

08002e88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e92:	2300      	movs	r3, #0
 8002e94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e96:	4b6a      	ldr	r3, [pc, #424]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d018      	beq.n	8002ed4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ea2:	4b67      	ldr	r3, [pc, #412]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f003 0203 	and.w	r2, r3, #3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d10d      	bne.n	8002ece <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
       ||
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d009      	beq.n	8002ece <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002eba:	4b61      	ldr	r3, [pc, #388]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	091b      	lsrs	r3, r3, #4
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
       ||
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d047      	beq.n	8002f5e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	73fb      	strb	r3, [r7, #15]
 8002ed2:	e044      	b.n	8002f5e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b03      	cmp	r3, #3
 8002eda:	d018      	beq.n	8002f0e <RCCEx_PLLSAI2_Config+0x86>
 8002edc:	2b03      	cmp	r3, #3
 8002ede:	d825      	bhi.n	8002f2c <RCCEx_PLLSAI2_Config+0xa4>
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d002      	beq.n	8002eea <RCCEx_PLLSAI2_Config+0x62>
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d009      	beq.n	8002efc <RCCEx_PLLSAI2_Config+0x74>
 8002ee8:	e020      	b.n	8002f2c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002eea:	4b55      	ldr	r3, [pc, #340]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d11d      	bne.n	8002f32 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002efa:	e01a      	b.n	8002f32 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002efc:	4b50      	ldr	r3, [pc, #320]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d116      	bne.n	8002f36 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f0c:	e013      	b.n	8002f36 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f0e:	4b4c      	ldr	r3, [pc, #304]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10f      	bne.n	8002f3a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f1a:	4b49      	ldr	r3, [pc, #292]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d109      	bne.n	8002f3a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f2a:	e006      	b.n	8002f3a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f30:	e004      	b.n	8002f3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f32:	bf00      	nop
 8002f34:	e002      	b.n	8002f3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f36:	bf00      	nop
 8002f38:	e000      	b.n	8002f3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10d      	bne.n	8002f5e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f42:	4b3f      	ldr	r3, [pc, #252]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6819      	ldr	r1, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	011b      	lsls	r3, r3, #4
 8002f56:	430b      	orrs	r3, r1
 8002f58:	4939      	ldr	r1, [pc, #228]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f5e:	7bfb      	ldrb	r3, [r7, #15]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d167      	bne.n	8003034 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f64:	4b36      	ldr	r3, [pc, #216]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a35      	ldr	r2, [pc, #212]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f70:	f7fe f9a8 	bl	80012c4 <HAL_GetTick>
 8002f74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f76:	e009      	b.n	8002f8c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f78:	f7fe f9a4 	bl	80012c4 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d902      	bls.n	8002f8c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	73fb      	strb	r3, [r7, #15]
        break;
 8002f8a:	e005      	b.n	8002f98 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f8c:	4b2c      	ldr	r3, [pc, #176]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1ef      	bne.n	8002f78 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d14a      	bne.n	8003034 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d111      	bne.n	8002fc8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fa4:	4b26      	ldr	r3, [pc, #152]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6892      	ldr	r2, [r2, #8]
 8002fb4:	0211      	lsls	r1, r2, #8
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	68d2      	ldr	r2, [r2, #12]
 8002fba:	0912      	lsrs	r2, r2, #4
 8002fbc:	0452      	lsls	r2, r2, #17
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	491f      	ldr	r1, [pc, #124]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	614b      	str	r3, [r1, #20]
 8002fc6:	e011      	b.n	8002fec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fc8:	4b1d      	ldr	r3, [pc, #116]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002fd0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6892      	ldr	r2, [r2, #8]
 8002fd8:	0211      	lsls	r1, r2, #8
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6912      	ldr	r2, [r2, #16]
 8002fde:	0852      	lsrs	r2, r2, #1
 8002fe0:	3a01      	subs	r2, #1
 8002fe2:	0652      	lsls	r2, r2, #25
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	4916      	ldr	r1, [pc, #88]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002fec:	4b14      	ldr	r3, [pc, #80]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a13      	ldr	r2, [pc, #76]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff8:	f7fe f964 	bl	80012c4 <HAL_GetTick>
 8002ffc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ffe:	e009      	b.n	8003014 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003000:	f7fe f960 	bl	80012c4 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d902      	bls.n	8003014 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	73fb      	strb	r3, [r7, #15]
          break;
 8003012:	e005      	b.n	8003020 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003014:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0ef      	beq.n	8003000 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003020:	7bfb      	ldrb	r3, [r7, #15]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d106      	bne.n	8003034 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003026:	4b06      	ldr	r3, [pc, #24]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003028:	695a      	ldr	r2, [r3, #20]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	4904      	ldr	r1, [pc, #16]	; (8003040 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003030:	4313      	orrs	r3, r2
 8003032:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003034:	7bfb      	ldrb	r3, [r7, #15]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40021000 	.word	0x40021000

08003044 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e040      	b.n	80030d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800305a:	2b00      	cmp	r3, #0
 800305c:	d106      	bne.n	800306c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7fd fe70 	bl	8000d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2224      	movs	r2, #36	; 0x24
 8003070:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0201 	bic.w	r2, r2, #1
 8003080:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fc94 	bl	80039b0 <UART_SetConfig>
 8003088:	4603      	mov	r3, r0
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e022      	b.n	80030d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	2b00      	cmp	r3, #0
 8003098:	d002      	beq.n	80030a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 ff12 	bl	8003ec4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 ff99 	bl	8004008 <UART_CheckIdleState>
 80030d6:	4603      	mov	r3, r0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08a      	sub	sp, #40	; 0x28
 80030e4:	af02      	add	r7, sp, #8
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	603b      	str	r3, [r7, #0]
 80030ec:	4613      	mov	r3, r2
 80030ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030f4:	2b20      	cmp	r3, #32
 80030f6:	f040 8082 	bne.w	80031fe <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d002      	beq.n	8003106 <HAL_UART_Transmit+0x26>
 8003100:	88fb      	ldrh	r3, [r7, #6]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e07a      	b.n	8003200 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003110:	2b01      	cmp	r3, #1
 8003112:	d101      	bne.n	8003118 <HAL_UART_Transmit+0x38>
 8003114:	2302      	movs	r3, #2
 8003116:	e073      	b.n	8003200 <HAL_UART_Transmit+0x120>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2221      	movs	r2, #33	; 0x21
 800312c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800312e:	f7fe f8c9 	bl	80012c4 <HAL_GetTick>
 8003132:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	88fa      	ldrh	r2, [r7, #6]
 8003138:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	88fa      	ldrh	r2, [r7, #6]
 8003140:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800314c:	d108      	bne.n	8003160 <HAL_UART_Transmit+0x80>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d104      	bne.n	8003160 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003156:	2300      	movs	r3, #0
 8003158:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	61bb      	str	r3, [r7, #24]
 800315e:	e003      	b.n	8003168 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003164:	2300      	movs	r3, #0
 8003166:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003170:	e02d      	b.n	80031ce <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	2200      	movs	r2, #0
 800317a:	2180      	movs	r1, #128	; 0x80
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 ff8c 	bl	800409a <UART_WaitOnFlagUntilTimeout>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e039      	b.n	8003200 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10b      	bne.n	80031aa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	881a      	ldrh	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800319e:	b292      	uxth	r2, r2
 80031a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	3302      	adds	r3, #2
 80031a6:	61bb      	str	r3, [r7, #24]
 80031a8:	e008      	b.n	80031bc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	781a      	ldrb	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	b292      	uxth	r2, r2
 80031b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3301      	adds	r3, #1
 80031ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1cb      	bne.n	8003172 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	2200      	movs	r2, #0
 80031e2:	2140      	movs	r1, #64	; 0x40
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f000 ff58 	bl	800409a <UART_WaitOnFlagUntilTimeout>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e005      	b.n	8003200 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2220      	movs	r2, #32
 80031f8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80031fa:	2300      	movs	r3, #0
 80031fc:	e000      	b.n	8003200 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80031fe:	2302      	movs	r3, #2
  }
}
 8003200:	4618      	mov	r0, r3
 8003202:	3720      	adds	r7, #32
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08a      	sub	sp, #40	; 0x28
 800320c:	af02      	add	r7, sp, #8
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	603b      	str	r3, [r7, #0]
 8003214:	4613      	mov	r3, r2
 8003216:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800321c:	2b20      	cmp	r3, #32
 800321e:	f040 80bf 	bne.w	80033a0 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d002      	beq.n	800322e <HAL_UART_Receive+0x26>
 8003228:	88fb      	ldrh	r3, [r7, #6]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e0b7      	b.n	80033a2 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <HAL_UART_Receive+0x38>
 800323c:	2302      	movs	r3, #2
 800323e:	e0b0      	b.n	80033a2 <HAL_UART_Receive+0x19a>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2222      	movs	r2, #34	; 0x22
 8003254:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800325c:	f7fe f832 	bl	80012c4 <HAL_GetTick>
 8003260:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	88fa      	ldrh	r2, [r7, #6]
 8003266:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	88fa      	ldrh	r2, [r7, #6]
 800326e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800327a:	d10e      	bne.n	800329a <HAL_UART_Receive+0x92>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d105      	bne.n	8003290 <HAL_UART_Receive+0x88>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f240 12ff 	movw	r2, #511	; 0x1ff
 800328a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800328e:	e02d      	b.n	80032ec <HAL_UART_Receive+0xe4>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	22ff      	movs	r2, #255	; 0xff
 8003294:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003298:	e028      	b.n	80032ec <HAL_UART_Receive+0xe4>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10d      	bne.n	80032be <HAL_UART_Receive+0xb6>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d104      	bne.n	80032b4 <HAL_UART_Receive+0xac>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	22ff      	movs	r2, #255	; 0xff
 80032ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80032b2:	e01b      	b.n	80032ec <HAL_UART_Receive+0xe4>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	227f      	movs	r2, #127	; 0x7f
 80032b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80032bc:	e016      	b.n	80032ec <HAL_UART_Receive+0xe4>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032c6:	d10d      	bne.n	80032e4 <HAL_UART_Receive+0xdc>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d104      	bne.n	80032da <HAL_UART_Receive+0xd2>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	227f      	movs	r2, #127	; 0x7f
 80032d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80032d8:	e008      	b.n	80032ec <HAL_UART_Receive+0xe4>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	223f      	movs	r2, #63	; 0x3f
 80032de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80032e2:	e003      	b.n	80032ec <HAL_UART_Receive+0xe4>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80032f2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032fc:	d108      	bne.n	8003310 <HAL_UART_Receive+0x108>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d104      	bne.n	8003310 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003306:	2300      	movs	r3, #0
 8003308:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	61bb      	str	r3, [r7, #24]
 800330e:	e003      	b.n	8003318 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003314:	2300      	movs	r3, #0
 8003316:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003320:	e033      	b.n	800338a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2200      	movs	r2, #0
 800332a:	2120      	movs	r1, #32
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f000 feb4 	bl	800409a <UART_WaitOnFlagUntilTimeout>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e032      	b.n	80033a2 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10c      	bne.n	800335c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003348:	b29a      	uxth	r2, r3
 800334a:	8a7b      	ldrh	r3, [r7, #18]
 800334c:	4013      	ands	r3, r2
 800334e:	b29a      	uxth	r2, r3
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	3302      	adds	r3, #2
 8003358:	61bb      	str	r3, [r7, #24]
 800335a:	e00d      	b.n	8003378 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003362:	b29b      	uxth	r3, r3
 8003364:	b2da      	uxtb	r2, r3
 8003366:	8a7b      	ldrh	r3, [r7, #18]
 8003368:	b2db      	uxtb	r3, r3
 800336a:	4013      	ands	r3, r2
 800336c:	b2da      	uxtb	r2, r3
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	3301      	adds	r3, #1
 8003376:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800337e:	b29b      	uxth	r3, r3
 8003380:	3b01      	subs	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003390:	b29b      	uxth	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1c5      	bne.n	8003322 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2220      	movs	r2, #32
 800339a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800339c:	2300      	movs	r3, #0
 800339e:	e000      	b.n	80033a2 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80033a0:	2302      	movs	r3, #2
  }
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3720      	adds	r7, #32
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
	...

080033ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b0ba      	sub	sp, #232	; 0xe8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80033d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80033d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80033da:	4013      	ands	r3, r2
 80033dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80033e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d115      	bne.n	8003414 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80033e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ec:	f003 0320 	and.w	r3, r3, #32
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00f      	beq.n	8003414 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80033f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033f8:	f003 0320 	and.w	r3, r3, #32
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d009      	beq.n	8003414 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 82a6 	beq.w	8003956 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	4798      	blx	r3
      }
      return;
 8003412:	e2a0      	b.n	8003956 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003414:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 8117 	beq.w	800364c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800341e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d106      	bne.n	8003438 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800342a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800342e:	4b85      	ldr	r3, [pc, #532]	; (8003644 <HAL_UART_IRQHandler+0x298>)
 8003430:	4013      	ands	r3, r2
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 810a 	beq.w	800364c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b00      	cmp	r3, #0
 8003442:	d011      	beq.n	8003468 <HAL_UART_IRQHandler+0xbc>
 8003444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00b      	beq.n	8003468 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2201      	movs	r2, #1
 8003456:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800345e:	f043 0201 	orr.w	r2, r3, #1
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d011      	beq.n	8003498 <HAL_UART_IRQHandler+0xec>
 8003474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00b      	beq.n	8003498 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2202      	movs	r2, #2
 8003486:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800348e:	f043 0204 	orr.w	r2, r3, #4
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d011      	beq.n	80034c8 <HAL_UART_IRQHandler+0x11c>
 80034a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00b      	beq.n	80034c8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2204      	movs	r2, #4
 80034b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034be:	f043 0202 	orr.w	r2, r3, #2
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80034c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034cc:	f003 0308 	and.w	r3, r3, #8
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d017      	beq.n	8003504 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80034d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034d8:	f003 0320 	and.w	r3, r3, #32
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d105      	bne.n	80034ec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80034e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00b      	beq.n	8003504 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2208      	movs	r2, #8
 80034f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034fa:	f043 0208 	orr.w	r2, r3, #8
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800350c:	2b00      	cmp	r3, #0
 800350e:	d012      	beq.n	8003536 <HAL_UART_IRQHandler+0x18a>
 8003510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003514:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00c      	beq.n	8003536 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003524:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800352c:	f043 0220 	orr.w	r2, r3, #32
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 820c 	beq.w	800395a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003546:	f003 0320 	and.w	r3, r3, #32
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00d      	beq.n	800356a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800354e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003552:	f003 0320 	and.w	r3, r3, #32
 8003556:	2b00      	cmp	r3, #0
 8003558:	d007      	beq.n	800356a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003570:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357e:	2b40      	cmp	r3, #64	; 0x40
 8003580:	d005      	beq.n	800358e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003582:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003586:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800358a:	2b00      	cmp	r3, #0
 800358c:	d04f      	beq.n	800362e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 fe47 	bl	8004222 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359e:	2b40      	cmp	r3, #64	; 0x40
 80035a0:	d141      	bne.n	8003626 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	3308      	adds	r3, #8
 80035a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035b0:	e853 3f00 	ldrex	r3, [r3]
 80035b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80035b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3308      	adds	r3, #8
 80035ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80035ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80035d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80035da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80035de:	e841 2300 	strex	r3, r2, [r1]
 80035e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80035e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1d9      	bne.n	80035a2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d013      	beq.n	800361e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fa:	4a13      	ldr	r2, [pc, #76]	; (8003648 <HAL_UART_IRQHandler+0x29c>)
 80035fc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003602:	4618      	mov	r0, r3
 8003604:	f7fd ffb9 	bl	800157a <HAL_DMA_Abort_IT>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d017      	beq.n	800363e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003618:	4610      	mov	r0, r2
 800361a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800361c:	e00f      	b.n	800363e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f9b0 	bl	8003984 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003624:	e00b      	b.n	800363e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f9ac 	bl	8003984 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800362c:	e007      	b.n	800363e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f9a8 	bl	8003984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800363c:	e18d      	b.n	800395a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800363e:	bf00      	nop
    return;
 8003640:	e18b      	b.n	800395a <HAL_UART_IRQHandler+0x5ae>
 8003642:	bf00      	nop
 8003644:	04000120 	.word	0x04000120
 8003648:	080042e9 	.word	0x080042e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003650:	2b01      	cmp	r3, #1
 8003652:	f040 8146 	bne.w	80038e2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800365a:	f003 0310 	and.w	r3, r3, #16
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 813f 	beq.w	80038e2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003668:	f003 0310 	and.w	r3, r3, #16
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 8138 	beq.w	80038e2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2210      	movs	r2, #16
 8003678:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003684:	2b40      	cmp	r3, #64	; 0x40
 8003686:	f040 80b4 	bne.w	80037f2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003696:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 815f 	beq.w	800395e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80036a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80036aa:	429a      	cmp	r2, r3
 80036ac:	f080 8157 	bcs.w	800395e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80036b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0320 	and.w	r3, r3, #32
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f040 8085 	bne.w	80037d6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036d8:	e853 3f00 	ldrex	r3, [r3]
 80036dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80036e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	461a      	mov	r2, r3
 80036f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80036f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80036fa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003702:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003706:	e841 2300 	strex	r3, r2, [r1]
 800370a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800370e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1da      	bne.n	80036cc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	3308      	adds	r3, #8
 800371c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003720:	e853 3f00 	ldrex	r3, [r3]
 8003724:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003726:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003728:	f023 0301 	bic.w	r3, r3, #1
 800372c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	3308      	adds	r3, #8
 8003736:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800373a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800373e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003740:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003742:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003746:	e841 2300 	strex	r3, r2, [r1]
 800374a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800374c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1e1      	bne.n	8003716 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	3308      	adds	r3, #8
 8003758:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800375c:	e853 3f00 	ldrex	r3, [r3]
 8003760:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003762:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003764:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003768:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	3308      	adds	r3, #8
 8003772:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003776:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003778:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800377c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800377e:	e841 2300 	strex	r3, r2, [r1]
 8003782:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003784:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1e3      	bne.n	8003752 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2220      	movs	r2, #32
 800378e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800379e:	e853 3f00 	ldrex	r3, [r3]
 80037a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80037a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037a6:	f023 0310 	bic.w	r3, r3, #16
 80037aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	461a      	mov	r2, r3
 80037b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80037b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80037ba:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80037be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037c0:	e841 2300 	strex	r3, r2, [r1]
 80037c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80037c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1e4      	bne.n	8003796 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fd fe94 	bl	80014fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	4619      	mov	r1, r3
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f8d4 	bl	8003998 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80037f0:	e0b5      	b.n	800395e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037fe:	b29b      	uxth	r3, r3
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800380c:	b29b      	uxth	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 80a7 	beq.w	8003962 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003814:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 80a2 	beq.w	8003962 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003826:	e853 3f00 	ldrex	r3, [r3]
 800382a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800382c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800382e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003832:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	461a      	mov	r2, r3
 800383c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003840:	647b      	str	r3, [r7, #68]	; 0x44
 8003842:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003844:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003846:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003848:	e841 2300 	strex	r3, r2, [r1]
 800384c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800384e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1e4      	bne.n	800381e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	3308      	adds	r3, #8
 800385a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	e853 3f00 	ldrex	r3, [r3]
 8003862:	623b      	str	r3, [r7, #32]
   return(result);
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	f023 0301 	bic.w	r3, r3, #1
 800386a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3308      	adds	r3, #8
 8003874:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003878:	633a      	str	r2, [r7, #48]	; 0x30
 800387a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800387e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003880:	e841 2300 	strex	r3, r2, [r1]
 8003884:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1e3      	bne.n	8003854 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2220      	movs	r2, #32
 8003890:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	e853 3f00 	ldrex	r3, [r3]
 80038aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f023 0310 	bic.w	r3, r3, #16
 80038b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038c0:	61fb      	str	r3, [r7, #28]
 80038c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c4:	69b9      	ldr	r1, [r7, #24]
 80038c6:	69fa      	ldr	r2, [r7, #28]
 80038c8:	e841 2300 	strex	r3, r2, [r1]
 80038cc:	617b      	str	r3, [r7, #20]
   return(result);
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1e4      	bne.n	800389e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80038d8:	4619      	mov	r1, r3
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f85c 	bl	8003998 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80038e0:	e03f      	b.n	8003962 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80038e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00e      	beq.n	800390c <HAL_UART_IRQHandler+0x560>
 80038ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d008      	beq.n	800390c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003902:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 fd2f 	bl	8004368 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800390a:	e02d      	b.n	8003968 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800390c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00e      	beq.n	8003936 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800391c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003920:	2b00      	cmp	r3, #0
 8003922:	d008      	beq.n	8003936 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003928:	2b00      	cmp	r3, #0
 800392a:	d01c      	beq.n	8003966 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	4798      	blx	r3
    }
    return;
 8003934:	e017      	b.n	8003966 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800393a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393e:	2b00      	cmp	r3, #0
 8003940:	d012      	beq.n	8003968 <HAL_UART_IRQHandler+0x5bc>
 8003942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00c      	beq.n	8003968 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 fce0 	bl	8004314 <UART_EndTransmit_IT>
    return;
 8003954:	e008      	b.n	8003968 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003956:	bf00      	nop
 8003958:	e006      	b.n	8003968 <HAL_UART_IRQHandler+0x5bc>
    return;
 800395a:	bf00      	nop
 800395c:	e004      	b.n	8003968 <HAL_UART_IRQHandler+0x5bc>
      return;
 800395e:	bf00      	nop
 8003960:	e002      	b.n	8003968 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003962:	bf00      	nop
 8003964:	e000      	b.n	8003968 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003966:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003968:	37e8      	adds	r7, #232	; 0xe8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop

08003970 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	460b      	mov	r3, r1
 80039a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039b0:	b5b0      	push	{r4, r5, r7, lr}
 80039b2:	b088      	sub	sp, #32
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039b8:	2300      	movs	r3, #0
 80039ba:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	431a      	orrs	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	4bad      	ldr	r3, [pc, #692]	; (8003c90 <UART_SetConfig+0x2e0>)
 80039dc:	4013      	ands	r3, r2
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6812      	ldr	r2, [r2, #0]
 80039e2:	69f9      	ldr	r1, [r7, #28]
 80039e4:	430b      	orrs	r3, r1
 80039e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4aa2      	ldr	r2, [pc, #648]	; (8003c94 <UART_SetConfig+0x2e4>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d004      	beq.n	8003a18 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	69fa      	ldr	r2, [r7, #28]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	69fa      	ldr	r2, [r7, #28]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a99      	ldr	r2, [pc, #612]	; (8003c98 <UART_SetConfig+0x2e8>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d121      	bne.n	8003a7a <UART_SetConfig+0xca>
 8003a36:	4b99      	ldr	r3, [pc, #612]	; (8003c9c <UART_SetConfig+0x2ec>)
 8003a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3c:	f003 0303 	and.w	r3, r3, #3
 8003a40:	2b03      	cmp	r3, #3
 8003a42:	d817      	bhi.n	8003a74 <UART_SetConfig+0xc4>
 8003a44:	a201      	add	r2, pc, #4	; (adr r2, 8003a4c <UART_SetConfig+0x9c>)
 8003a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4a:	bf00      	nop
 8003a4c:	08003a5d 	.word	0x08003a5d
 8003a50:	08003a69 	.word	0x08003a69
 8003a54:	08003a63 	.word	0x08003a63
 8003a58:	08003a6f 	.word	0x08003a6f
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	76fb      	strb	r3, [r7, #27]
 8003a60:	e0e7      	b.n	8003c32 <UART_SetConfig+0x282>
 8003a62:	2302      	movs	r3, #2
 8003a64:	76fb      	strb	r3, [r7, #27]
 8003a66:	e0e4      	b.n	8003c32 <UART_SetConfig+0x282>
 8003a68:	2304      	movs	r3, #4
 8003a6a:	76fb      	strb	r3, [r7, #27]
 8003a6c:	e0e1      	b.n	8003c32 <UART_SetConfig+0x282>
 8003a6e:	2308      	movs	r3, #8
 8003a70:	76fb      	strb	r3, [r7, #27]
 8003a72:	e0de      	b.n	8003c32 <UART_SetConfig+0x282>
 8003a74:	2310      	movs	r3, #16
 8003a76:	76fb      	strb	r3, [r7, #27]
 8003a78:	e0db      	b.n	8003c32 <UART_SetConfig+0x282>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a88      	ldr	r2, [pc, #544]	; (8003ca0 <UART_SetConfig+0x2f0>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d132      	bne.n	8003aea <UART_SetConfig+0x13a>
 8003a84:	4b85      	ldr	r3, [pc, #532]	; (8003c9c <UART_SetConfig+0x2ec>)
 8003a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8a:	f003 030c 	and.w	r3, r3, #12
 8003a8e:	2b0c      	cmp	r3, #12
 8003a90:	d828      	bhi.n	8003ae4 <UART_SetConfig+0x134>
 8003a92:	a201      	add	r2, pc, #4	; (adr r2, 8003a98 <UART_SetConfig+0xe8>)
 8003a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a98:	08003acd 	.word	0x08003acd
 8003a9c:	08003ae5 	.word	0x08003ae5
 8003aa0:	08003ae5 	.word	0x08003ae5
 8003aa4:	08003ae5 	.word	0x08003ae5
 8003aa8:	08003ad9 	.word	0x08003ad9
 8003aac:	08003ae5 	.word	0x08003ae5
 8003ab0:	08003ae5 	.word	0x08003ae5
 8003ab4:	08003ae5 	.word	0x08003ae5
 8003ab8:	08003ad3 	.word	0x08003ad3
 8003abc:	08003ae5 	.word	0x08003ae5
 8003ac0:	08003ae5 	.word	0x08003ae5
 8003ac4:	08003ae5 	.word	0x08003ae5
 8003ac8:	08003adf 	.word	0x08003adf
 8003acc:	2300      	movs	r3, #0
 8003ace:	76fb      	strb	r3, [r7, #27]
 8003ad0:	e0af      	b.n	8003c32 <UART_SetConfig+0x282>
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	76fb      	strb	r3, [r7, #27]
 8003ad6:	e0ac      	b.n	8003c32 <UART_SetConfig+0x282>
 8003ad8:	2304      	movs	r3, #4
 8003ada:	76fb      	strb	r3, [r7, #27]
 8003adc:	e0a9      	b.n	8003c32 <UART_SetConfig+0x282>
 8003ade:	2308      	movs	r3, #8
 8003ae0:	76fb      	strb	r3, [r7, #27]
 8003ae2:	e0a6      	b.n	8003c32 <UART_SetConfig+0x282>
 8003ae4:	2310      	movs	r3, #16
 8003ae6:	76fb      	strb	r3, [r7, #27]
 8003ae8:	e0a3      	b.n	8003c32 <UART_SetConfig+0x282>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a6d      	ldr	r2, [pc, #436]	; (8003ca4 <UART_SetConfig+0x2f4>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d120      	bne.n	8003b36 <UART_SetConfig+0x186>
 8003af4:	4b69      	ldr	r3, [pc, #420]	; (8003c9c <UART_SetConfig+0x2ec>)
 8003af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003afe:	2b30      	cmp	r3, #48	; 0x30
 8003b00:	d013      	beq.n	8003b2a <UART_SetConfig+0x17a>
 8003b02:	2b30      	cmp	r3, #48	; 0x30
 8003b04:	d814      	bhi.n	8003b30 <UART_SetConfig+0x180>
 8003b06:	2b20      	cmp	r3, #32
 8003b08:	d009      	beq.n	8003b1e <UART_SetConfig+0x16e>
 8003b0a:	2b20      	cmp	r3, #32
 8003b0c:	d810      	bhi.n	8003b30 <UART_SetConfig+0x180>
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d002      	beq.n	8003b18 <UART_SetConfig+0x168>
 8003b12:	2b10      	cmp	r3, #16
 8003b14:	d006      	beq.n	8003b24 <UART_SetConfig+0x174>
 8003b16:	e00b      	b.n	8003b30 <UART_SetConfig+0x180>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	76fb      	strb	r3, [r7, #27]
 8003b1c:	e089      	b.n	8003c32 <UART_SetConfig+0x282>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	76fb      	strb	r3, [r7, #27]
 8003b22:	e086      	b.n	8003c32 <UART_SetConfig+0x282>
 8003b24:	2304      	movs	r3, #4
 8003b26:	76fb      	strb	r3, [r7, #27]
 8003b28:	e083      	b.n	8003c32 <UART_SetConfig+0x282>
 8003b2a:	2308      	movs	r3, #8
 8003b2c:	76fb      	strb	r3, [r7, #27]
 8003b2e:	e080      	b.n	8003c32 <UART_SetConfig+0x282>
 8003b30:	2310      	movs	r3, #16
 8003b32:	76fb      	strb	r3, [r7, #27]
 8003b34:	e07d      	b.n	8003c32 <UART_SetConfig+0x282>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a5b      	ldr	r2, [pc, #364]	; (8003ca8 <UART_SetConfig+0x2f8>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d120      	bne.n	8003b82 <UART_SetConfig+0x1d2>
 8003b40:	4b56      	ldr	r3, [pc, #344]	; (8003c9c <UART_SetConfig+0x2ec>)
 8003b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b4a:	2bc0      	cmp	r3, #192	; 0xc0
 8003b4c:	d013      	beq.n	8003b76 <UART_SetConfig+0x1c6>
 8003b4e:	2bc0      	cmp	r3, #192	; 0xc0
 8003b50:	d814      	bhi.n	8003b7c <UART_SetConfig+0x1cc>
 8003b52:	2b80      	cmp	r3, #128	; 0x80
 8003b54:	d009      	beq.n	8003b6a <UART_SetConfig+0x1ba>
 8003b56:	2b80      	cmp	r3, #128	; 0x80
 8003b58:	d810      	bhi.n	8003b7c <UART_SetConfig+0x1cc>
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <UART_SetConfig+0x1b4>
 8003b5e:	2b40      	cmp	r3, #64	; 0x40
 8003b60:	d006      	beq.n	8003b70 <UART_SetConfig+0x1c0>
 8003b62:	e00b      	b.n	8003b7c <UART_SetConfig+0x1cc>
 8003b64:	2300      	movs	r3, #0
 8003b66:	76fb      	strb	r3, [r7, #27]
 8003b68:	e063      	b.n	8003c32 <UART_SetConfig+0x282>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	76fb      	strb	r3, [r7, #27]
 8003b6e:	e060      	b.n	8003c32 <UART_SetConfig+0x282>
 8003b70:	2304      	movs	r3, #4
 8003b72:	76fb      	strb	r3, [r7, #27]
 8003b74:	e05d      	b.n	8003c32 <UART_SetConfig+0x282>
 8003b76:	2308      	movs	r3, #8
 8003b78:	76fb      	strb	r3, [r7, #27]
 8003b7a:	e05a      	b.n	8003c32 <UART_SetConfig+0x282>
 8003b7c:	2310      	movs	r3, #16
 8003b7e:	76fb      	strb	r3, [r7, #27]
 8003b80:	e057      	b.n	8003c32 <UART_SetConfig+0x282>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a49      	ldr	r2, [pc, #292]	; (8003cac <UART_SetConfig+0x2fc>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d125      	bne.n	8003bd8 <UART_SetConfig+0x228>
 8003b8c:	4b43      	ldr	r3, [pc, #268]	; (8003c9c <UART_SetConfig+0x2ec>)
 8003b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b9a:	d017      	beq.n	8003bcc <UART_SetConfig+0x21c>
 8003b9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ba0:	d817      	bhi.n	8003bd2 <UART_SetConfig+0x222>
 8003ba2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ba6:	d00b      	beq.n	8003bc0 <UART_SetConfig+0x210>
 8003ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bac:	d811      	bhi.n	8003bd2 <UART_SetConfig+0x222>
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <UART_SetConfig+0x20a>
 8003bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bb6:	d006      	beq.n	8003bc6 <UART_SetConfig+0x216>
 8003bb8:	e00b      	b.n	8003bd2 <UART_SetConfig+0x222>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	76fb      	strb	r3, [r7, #27]
 8003bbe:	e038      	b.n	8003c32 <UART_SetConfig+0x282>
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	76fb      	strb	r3, [r7, #27]
 8003bc4:	e035      	b.n	8003c32 <UART_SetConfig+0x282>
 8003bc6:	2304      	movs	r3, #4
 8003bc8:	76fb      	strb	r3, [r7, #27]
 8003bca:	e032      	b.n	8003c32 <UART_SetConfig+0x282>
 8003bcc:	2308      	movs	r3, #8
 8003bce:	76fb      	strb	r3, [r7, #27]
 8003bd0:	e02f      	b.n	8003c32 <UART_SetConfig+0x282>
 8003bd2:	2310      	movs	r3, #16
 8003bd4:	76fb      	strb	r3, [r7, #27]
 8003bd6:	e02c      	b.n	8003c32 <UART_SetConfig+0x282>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a2d      	ldr	r2, [pc, #180]	; (8003c94 <UART_SetConfig+0x2e4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d125      	bne.n	8003c2e <UART_SetConfig+0x27e>
 8003be2:	4b2e      	ldr	r3, [pc, #184]	; (8003c9c <UART_SetConfig+0x2ec>)
 8003be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003bec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bf0:	d017      	beq.n	8003c22 <UART_SetConfig+0x272>
 8003bf2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bf6:	d817      	bhi.n	8003c28 <UART_SetConfig+0x278>
 8003bf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bfc:	d00b      	beq.n	8003c16 <UART_SetConfig+0x266>
 8003bfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c02:	d811      	bhi.n	8003c28 <UART_SetConfig+0x278>
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <UART_SetConfig+0x260>
 8003c08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c0c:	d006      	beq.n	8003c1c <UART_SetConfig+0x26c>
 8003c0e:	e00b      	b.n	8003c28 <UART_SetConfig+0x278>
 8003c10:	2300      	movs	r3, #0
 8003c12:	76fb      	strb	r3, [r7, #27]
 8003c14:	e00d      	b.n	8003c32 <UART_SetConfig+0x282>
 8003c16:	2302      	movs	r3, #2
 8003c18:	76fb      	strb	r3, [r7, #27]
 8003c1a:	e00a      	b.n	8003c32 <UART_SetConfig+0x282>
 8003c1c:	2304      	movs	r3, #4
 8003c1e:	76fb      	strb	r3, [r7, #27]
 8003c20:	e007      	b.n	8003c32 <UART_SetConfig+0x282>
 8003c22:	2308      	movs	r3, #8
 8003c24:	76fb      	strb	r3, [r7, #27]
 8003c26:	e004      	b.n	8003c32 <UART_SetConfig+0x282>
 8003c28:	2310      	movs	r3, #16
 8003c2a:	76fb      	strb	r3, [r7, #27]
 8003c2c:	e001      	b.n	8003c32 <UART_SetConfig+0x282>
 8003c2e:	2310      	movs	r3, #16
 8003c30:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a17      	ldr	r2, [pc, #92]	; (8003c94 <UART_SetConfig+0x2e4>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	f040 8087 	bne.w	8003d4c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c3e:	7efb      	ldrb	r3, [r7, #27]
 8003c40:	2b08      	cmp	r3, #8
 8003c42:	d837      	bhi.n	8003cb4 <UART_SetConfig+0x304>
 8003c44:	a201      	add	r2, pc, #4	; (adr r2, 8003c4c <UART_SetConfig+0x29c>)
 8003c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4a:	bf00      	nop
 8003c4c:	08003c71 	.word	0x08003c71
 8003c50:	08003cb5 	.word	0x08003cb5
 8003c54:	08003c79 	.word	0x08003c79
 8003c58:	08003cb5 	.word	0x08003cb5
 8003c5c:	08003c7f 	.word	0x08003c7f
 8003c60:	08003cb5 	.word	0x08003cb5
 8003c64:	08003cb5 	.word	0x08003cb5
 8003c68:	08003cb5 	.word	0x08003cb5
 8003c6c:	08003c87 	.word	0x08003c87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c70:	f7fe fc90 	bl	8002594 <HAL_RCC_GetPCLK1Freq>
 8003c74:	6178      	str	r0, [r7, #20]
        break;
 8003c76:	e022      	b.n	8003cbe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c78:	4b0d      	ldr	r3, [pc, #52]	; (8003cb0 <UART_SetConfig+0x300>)
 8003c7a:	617b      	str	r3, [r7, #20]
        break;
 8003c7c:	e01f      	b.n	8003cbe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c7e:	f7fe fbf1 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 8003c82:	6178      	str	r0, [r7, #20]
        break;
 8003c84:	e01b      	b.n	8003cbe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c8a:	617b      	str	r3, [r7, #20]
        break;
 8003c8c:	e017      	b.n	8003cbe <UART_SetConfig+0x30e>
 8003c8e:	bf00      	nop
 8003c90:	efff69f3 	.word	0xefff69f3
 8003c94:	40008000 	.word	0x40008000
 8003c98:	40013800 	.word	0x40013800
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	40004400 	.word	0x40004400
 8003ca4:	40004800 	.word	0x40004800
 8003ca8:	40004c00 	.word	0x40004c00
 8003cac:	40005000 	.word	0x40005000
 8003cb0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	76bb      	strb	r3, [r7, #26]
        break;
 8003cbc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 80f1 	beq.w	8003ea8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	4413      	add	r3, r2
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d305      	bcc.n	8003ce2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d902      	bls.n	8003ce8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	76bb      	strb	r3, [r7, #26]
 8003ce6:	e0df      	b.n	8003ea8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f04f 0100 	mov.w	r1, #0
 8003cf0:	f04f 0200 	mov.w	r2, #0
 8003cf4:	f04f 0300 	mov.w	r3, #0
 8003cf8:	020b      	lsls	r3, r1, #8
 8003cfa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003cfe:	0202      	lsls	r2, r0, #8
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	6849      	ldr	r1, [r1, #4]
 8003d04:	0849      	lsrs	r1, r1, #1
 8003d06:	4608      	mov	r0, r1
 8003d08:	f04f 0100 	mov.w	r1, #0
 8003d0c:	1814      	adds	r4, r2, r0
 8003d0e:	eb43 0501 	adc.w	r5, r3, r1
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	461a      	mov	r2, r3
 8003d18:	f04f 0300 	mov.w	r3, #0
 8003d1c:	4620      	mov	r0, r4
 8003d1e:	4629      	mov	r1, r5
 8003d20:	f7fc faae 	bl	8000280 <__aeabi_uldivmod>
 8003d24:	4602      	mov	r2, r0
 8003d26:	460b      	mov	r3, r1
 8003d28:	4613      	mov	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d32:	d308      	bcc.n	8003d46 <UART_SetConfig+0x396>
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d3a:	d204      	bcs.n	8003d46 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	60da      	str	r2, [r3, #12]
 8003d44:	e0b0      	b.n	8003ea8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	76bb      	strb	r3, [r7, #26]
 8003d4a:	e0ad      	b.n	8003ea8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	69db      	ldr	r3, [r3, #28]
 8003d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d54:	d15b      	bne.n	8003e0e <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8003d56:	7efb      	ldrb	r3, [r7, #27]
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d828      	bhi.n	8003dae <UART_SetConfig+0x3fe>
 8003d5c:	a201      	add	r2, pc, #4	; (adr r2, 8003d64 <UART_SetConfig+0x3b4>)
 8003d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d62:	bf00      	nop
 8003d64:	08003d89 	.word	0x08003d89
 8003d68:	08003d91 	.word	0x08003d91
 8003d6c:	08003d99 	.word	0x08003d99
 8003d70:	08003daf 	.word	0x08003daf
 8003d74:	08003d9f 	.word	0x08003d9f
 8003d78:	08003daf 	.word	0x08003daf
 8003d7c:	08003daf 	.word	0x08003daf
 8003d80:	08003daf 	.word	0x08003daf
 8003d84:	08003da7 	.word	0x08003da7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d88:	f7fe fc04 	bl	8002594 <HAL_RCC_GetPCLK1Freq>
 8003d8c:	6178      	str	r0, [r7, #20]
        break;
 8003d8e:	e013      	b.n	8003db8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d90:	f7fe fc16 	bl	80025c0 <HAL_RCC_GetPCLK2Freq>
 8003d94:	6178      	str	r0, [r7, #20]
        break;
 8003d96:	e00f      	b.n	8003db8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d98:	4b49      	ldr	r3, [pc, #292]	; (8003ec0 <UART_SetConfig+0x510>)
 8003d9a:	617b      	str	r3, [r7, #20]
        break;
 8003d9c:	e00c      	b.n	8003db8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d9e:	f7fe fb61 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 8003da2:	6178      	str	r0, [r7, #20]
        break;
 8003da4:	e008      	b.n	8003db8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003daa:	617b      	str	r3, [r7, #20]
        break;
 8003dac:	e004      	b.n	8003db8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	76bb      	strb	r3, [r7, #26]
        break;
 8003db6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d074      	beq.n	8003ea8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	005a      	lsls	r2, r3, #1
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	085b      	lsrs	r3, r3, #1
 8003dc8:	441a      	add	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	2b0f      	cmp	r3, #15
 8003dd8:	d916      	bls.n	8003e08 <UART_SetConfig+0x458>
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de0:	d212      	bcs.n	8003e08 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	f023 030f 	bic.w	r3, r3, #15
 8003dea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	085b      	lsrs	r3, r3, #1
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	89fb      	ldrh	r3, [r7, #14]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	89fa      	ldrh	r2, [r7, #14]
 8003e04:	60da      	str	r2, [r3, #12]
 8003e06:	e04f      	b.n	8003ea8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	76bb      	strb	r3, [r7, #26]
 8003e0c:	e04c      	b.n	8003ea8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e0e:	7efb      	ldrb	r3, [r7, #27]
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d828      	bhi.n	8003e66 <UART_SetConfig+0x4b6>
 8003e14:	a201      	add	r2, pc, #4	; (adr r2, 8003e1c <UART_SetConfig+0x46c>)
 8003e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1a:	bf00      	nop
 8003e1c:	08003e41 	.word	0x08003e41
 8003e20:	08003e49 	.word	0x08003e49
 8003e24:	08003e51 	.word	0x08003e51
 8003e28:	08003e67 	.word	0x08003e67
 8003e2c:	08003e57 	.word	0x08003e57
 8003e30:	08003e67 	.word	0x08003e67
 8003e34:	08003e67 	.word	0x08003e67
 8003e38:	08003e67 	.word	0x08003e67
 8003e3c:	08003e5f 	.word	0x08003e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e40:	f7fe fba8 	bl	8002594 <HAL_RCC_GetPCLK1Freq>
 8003e44:	6178      	str	r0, [r7, #20]
        break;
 8003e46:	e013      	b.n	8003e70 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e48:	f7fe fbba 	bl	80025c0 <HAL_RCC_GetPCLK2Freq>
 8003e4c:	6178      	str	r0, [r7, #20]
        break;
 8003e4e:	e00f      	b.n	8003e70 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e50:	4b1b      	ldr	r3, [pc, #108]	; (8003ec0 <UART_SetConfig+0x510>)
 8003e52:	617b      	str	r3, [r7, #20]
        break;
 8003e54:	e00c      	b.n	8003e70 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e56:	f7fe fb05 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 8003e5a:	6178      	str	r0, [r7, #20]
        break;
 8003e5c:	e008      	b.n	8003e70 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e62:	617b      	str	r3, [r7, #20]
        break;
 8003e64:	e004      	b.n	8003e70 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	76bb      	strb	r3, [r7, #26]
        break;
 8003e6e:	bf00      	nop
    }

    if (pclk != 0U)
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d018      	beq.n	8003ea8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	085a      	lsrs	r2, r3, #1
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	441a      	add	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e88:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	2b0f      	cmp	r3, #15
 8003e8e:	d909      	bls.n	8003ea4 <UART_SetConfig+0x4f4>
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e96:	d205      	bcs.n	8003ea4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	60da      	str	r2, [r3, #12]
 8003ea2:	e001      	b.n	8003ea8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003eb4:	7ebb      	ldrb	r3, [r7, #26]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3720      	adds	r7, #32
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bdb0      	pop	{r4, r5, r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	00f42400 	.word	0x00f42400

08003ec4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00a      	beq.n	8003eee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00a      	beq.n	8003f32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00a      	beq.n	8003f54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	f003 0310 	and.w	r3, r3, #16
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00a      	beq.n	8003f76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	f003 0320 	and.w	r3, r3, #32
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d01a      	beq.n	8003fda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fc2:	d10a      	bne.n	8003fda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00a      	beq.n	8003ffc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	605a      	str	r2, [r3, #4]
  }
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af02      	add	r7, sp, #8
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004018:	f7fd f954 	bl	80012c4 <HAL_GetTick>
 800401c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0308 	and.w	r3, r3, #8
 8004028:	2b08      	cmp	r3, #8
 800402a:	d10e      	bne.n	800404a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800402c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f82d 	bl	800409a <UART_WaitOnFlagUntilTimeout>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e023      	b.n	8004092 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	2b04      	cmp	r3, #4
 8004056:	d10e      	bne.n	8004076 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004058:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f817 	bl	800409a <UART_WaitOnFlagUntilTimeout>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e00d      	b.n	8004092 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2220      	movs	r2, #32
 800407a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2220      	movs	r2, #32
 8004080:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b09c      	sub	sp, #112	; 0x70
 800409e:	af00      	add	r7, sp, #0
 80040a0:	60f8      	str	r0, [r7, #12]
 80040a2:	60b9      	str	r1, [r7, #8]
 80040a4:	603b      	str	r3, [r7, #0]
 80040a6:	4613      	mov	r3, r2
 80040a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040aa:	e0a5      	b.n	80041f8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b2:	f000 80a1 	beq.w	80041f8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040b6:	f7fd f905 	bl	80012c4 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d302      	bcc.n	80040cc <UART_WaitOnFlagUntilTimeout+0x32>
 80040c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d13e      	bne.n	800414a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040d4:	e853 3f00 	ldrex	r3, [r3]
 80040d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80040da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040e0:	667b      	str	r3, [r7, #100]	; 0x64
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	461a      	mov	r2, r3
 80040e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040ec:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80040f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80040f2:	e841 2300 	strex	r3, r2, [r1]
 80040f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80040f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1e6      	bne.n	80040cc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	3308      	adds	r3, #8
 8004104:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004108:	e853 3f00 	ldrex	r3, [r3]
 800410c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800410e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004110:	f023 0301 	bic.w	r3, r3, #1
 8004114:	663b      	str	r3, [r7, #96]	; 0x60
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	3308      	adds	r3, #8
 800411c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800411e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004120:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004122:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004124:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004126:	e841 2300 	strex	r3, r2, [r1]
 800412a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800412c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1e5      	bne.n	80040fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2220      	movs	r2, #32
 8004136:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2220      	movs	r2, #32
 800413c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e067      	b.n	800421a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	2b00      	cmp	r3, #0
 8004156:	d04f      	beq.n	80041f8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004162:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004166:	d147      	bne.n	80041f8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004170:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417a:	e853 3f00 	ldrex	r3, [r3]
 800417e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004186:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	461a      	mov	r2, r3
 800418e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004190:	637b      	str	r3, [r7, #52]	; 0x34
 8004192:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004194:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004196:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004198:	e841 2300 	strex	r3, r2, [r1]
 800419c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800419e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1e6      	bne.n	8004172 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	3308      	adds	r3, #8
 80041aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	e853 3f00 	ldrex	r3, [r3]
 80041b2:	613b      	str	r3, [r7, #16]
   return(result);
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	f023 0301 	bic.w	r3, r3, #1
 80041ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	3308      	adds	r3, #8
 80041c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80041c4:	623a      	str	r2, [r7, #32]
 80041c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c8:	69f9      	ldr	r1, [r7, #28]
 80041ca:	6a3a      	ldr	r2, [r7, #32]
 80041cc:	e841 2300 	strex	r3, r2, [r1]
 80041d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1e5      	bne.n	80041a4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2220      	movs	r2, #32
 80041dc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2220      	movs	r2, #32
 80041e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e010      	b.n	800421a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	69da      	ldr	r2, [r3, #28]
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	4013      	ands	r3, r2
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	429a      	cmp	r2, r3
 8004206:	bf0c      	ite	eq
 8004208:	2301      	moveq	r3, #1
 800420a:	2300      	movne	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	461a      	mov	r2, r3
 8004210:	79fb      	ldrb	r3, [r7, #7]
 8004212:	429a      	cmp	r2, r3
 8004214:	f43f af4a 	beq.w	80040ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3770      	adds	r7, #112	; 0x70
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004222:	b480      	push	{r7}
 8004224:	b095      	sub	sp, #84	; 0x54
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004232:	e853 3f00 	ldrex	r3, [r3]
 8004236:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800423e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004248:	643b      	str	r3, [r7, #64]	; 0x40
 800424a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800424e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004250:	e841 2300 	strex	r3, r2, [r1]
 8004254:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1e6      	bne.n	800422a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3308      	adds	r3, #8
 8004262:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	e853 3f00 	ldrex	r3, [r3]
 800426a:	61fb      	str	r3, [r7, #28]
   return(result);
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	f023 0301 	bic.w	r3, r3, #1
 8004272:	64bb      	str	r3, [r7, #72]	; 0x48
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3308      	adds	r3, #8
 800427a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800427c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800427e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004280:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004282:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004284:	e841 2300 	strex	r3, r2, [r1]
 8004288:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1e5      	bne.n	800425c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004294:	2b01      	cmp	r3, #1
 8004296:	d118      	bne.n	80042ca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	e853 3f00 	ldrex	r3, [r3]
 80042a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	f023 0310 	bic.w	r3, r3, #16
 80042ac:	647b      	str	r3, [r7, #68]	; 0x44
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042b6:	61bb      	str	r3, [r7, #24]
 80042b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ba:	6979      	ldr	r1, [r7, #20]
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	e841 2300 	strex	r3, r2, [r1]
 80042c2:	613b      	str	r3, [r7, #16]
   return(result);
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1e6      	bne.n	8004298 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2220      	movs	r2, #32
 80042ce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	665a      	str	r2, [r3, #100]	; 0x64
}
 80042dc:	bf00      	nop
 80042de:	3754      	adds	r7, #84	; 0x54
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f7ff fb3c 	bl	8003984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800430c:	bf00      	nop
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b088      	sub	sp, #32
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	e853 3f00 	ldrex	r3, [r3]
 8004328:	60bb      	str	r3, [r7, #8]
   return(result);
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004330:	61fb      	str	r3, [r7, #28]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	461a      	mov	r2, r3
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	61bb      	str	r3, [r7, #24]
 800433c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433e:	6979      	ldr	r1, [r7, #20]
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	e841 2300 	strex	r3, r2, [r1]
 8004346:	613b      	str	r3, [r7, #16]
   return(result);
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1e6      	bne.n	800431c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2220      	movs	r2, #32
 8004352:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7ff fb08 	bl	8003970 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004360:	bf00      	nop
 8004362:	3720      	adds	r7, #32
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <__errno>:
 800437c:	4b01      	ldr	r3, [pc, #4]	; (8004384 <__errno+0x8>)
 800437e:	6818      	ldr	r0, [r3, #0]
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	20000044 	.word	0x20000044

08004388 <__libc_init_array>:
 8004388:	b570      	push	{r4, r5, r6, lr}
 800438a:	4d0d      	ldr	r5, [pc, #52]	; (80043c0 <__libc_init_array+0x38>)
 800438c:	4c0d      	ldr	r4, [pc, #52]	; (80043c4 <__libc_init_array+0x3c>)
 800438e:	1b64      	subs	r4, r4, r5
 8004390:	10a4      	asrs	r4, r4, #2
 8004392:	2600      	movs	r6, #0
 8004394:	42a6      	cmp	r6, r4
 8004396:	d109      	bne.n	80043ac <__libc_init_array+0x24>
 8004398:	4d0b      	ldr	r5, [pc, #44]	; (80043c8 <__libc_init_array+0x40>)
 800439a:	4c0c      	ldr	r4, [pc, #48]	; (80043cc <__libc_init_array+0x44>)
 800439c:	f000 ff76 	bl	800528c <_init>
 80043a0:	1b64      	subs	r4, r4, r5
 80043a2:	10a4      	asrs	r4, r4, #2
 80043a4:	2600      	movs	r6, #0
 80043a6:	42a6      	cmp	r6, r4
 80043a8:	d105      	bne.n	80043b6 <__libc_init_array+0x2e>
 80043aa:	bd70      	pop	{r4, r5, r6, pc}
 80043ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80043b0:	4798      	blx	r3
 80043b2:	3601      	adds	r6, #1
 80043b4:	e7ee      	b.n	8004394 <__libc_init_array+0xc>
 80043b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ba:	4798      	blx	r3
 80043bc:	3601      	adds	r6, #1
 80043be:	e7f2      	b.n	80043a6 <__libc_init_array+0x1e>
 80043c0:	080053cc 	.word	0x080053cc
 80043c4:	080053cc 	.word	0x080053cc
 80043c8:	080053cc 	.word	0x080053cc
 80043cc:	080053d0 	.word	0x080053d0

080043d0 <memset>:
 80043d0:	4402      	add	r2, r0
 80043d2:	4603      	mov	r3, r0
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d100      	bne.n	80043da <memset+0xa>
 80043d8:	4770      	bx	lr
 80043da:	f803 1b01 	strb.w	r1, [r3], #1
 80043de:	e7f9      	b.n	80043d4 <memset+0x4>

080043e0 <iprintf>:
 80043e0:	b40f      	push	{r0, r1, r2, r3}
 80043e2:	4b0a      	ldr	r3, [pc, #40]	; (800440c <iprintf+0x2c>)
 80043e4:	b513      	push	{r0, r1, r4, lr}
 80043e6:	681c      	ldr	r4, [r3, #0]
 80043e8:	b124      	cbz	r4, 80043f4 <iprintf+0x14>
 80043ea:	69a3      	ldr	r3, [r4, #24]
 80043ec:	b913      	cbnz	r3, 80043f4 <iprintf+0x14>
 80043ee:	4620      	mov	r0, r4
 80043f0:	f000 f866 	bl	80044c0 <__sinit>
 80043f4:	ab05      	add	r3, sp, #20
 80043f6:	9a04      	ldr	r2, [sp, #16]
 80043f8:	68a1      	ldr	r1, [r4, #8]
 80043fa:	9301      	str	r3, [sp, #4]
 80043fc:	4620      	mov	r0, r4
 80043fe:	f000 f983 	bl	8004708 <_vfiprintf_r>
 8004402:	b002      	add	sp, #8
 8004404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004408:	b004      	add	sp, #16
 800440a:	4770      	bx	lr
 800440c:	20000044 	.word	0x20000044

08004410 <std>:
 8004410:	2300      	movs	r3, #0
 8004412:	b510      	push	{r4, lr}
 8004414:	4604      	mov	r4, r0
 8004416:	e9c0 3300 	strd	r3, r3, [r0]
 800441a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800441e:	6083      	str	r3, [r0, #8]
 8004420:	8181      	strh	r1, [r0, #12]
 8004422:	6643      	str	r3, [r0, #100]	; 0x64
 8004424:	81c2      	strh	r2, [r0, #14]
 8004426:	6183      	str	r3, [r0, #24]
 8004428:	4619      	mov	r1, r3
 800442a:	2208      	movs	r2, #8
 800442c:	305c      	adds	r0, #92	; 0x5c
 800442e:	f7ff ffcf 	bl	80043d0 <memset>
 8004432:	4b05      	ldr	r3, [pc, #20]	; (8004448 <std+0x38>)
 8004434:	6263      	str	r3, [r4, #36]	; 0x24
 8004436:	4b05      	ldr	r3, [pc, #20]	; (800444c <std+0x3c>)
 8004438:	62a3      	str	r3, [r4, #40]	; 0x28
 800443a:	4b05      	ldr	r3, [pc, #20]	; (8004450 <std+0x40>)
 800443c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800443e:	4b05      	ldr	r3, [pc, #20]	; (8004454 <std+0x44>)
 8004440:	6224      	str	r4, [r4, #32]
 8004442:	6323      	str	r3, [r4, #48]	; 0x30
 8004444:	bd10      	pop	{r4, pc}
 8004446:	bf00      	nop
 8004448:	08004cb1 	.word	0x08004cb1
 800444c:	08004cd3 	.word	0x08004cd3
 8004450:	08004d0b 	.word	0x08004d0b
 8004454:	08004d2f 	.word	0x08004d2f

08004458 <_cleanup_r>:
 8004458:	4901      	ldr	r1, [pc, #4]	; (8004460 <_cleanup_r+0x8>)
 800445a:	f000 b8af 	b.w	80045bc <_fwalk_reent>
 800445e:	bf00      	nop
 8004460:	08005009 	.word	0x08005009

08004464 <__sfmoreglue>:
 8004464:	b570      	push	{r4, r5, r6, lr}
 8004466:	1e4a      	subs	r2, r1, #1
 8004468:	2568      	movs	r5, #104	; 0x68
 800446a:	4355      	muls	r5, r2
 800446c:	460e      	mov	r6, r1
 800446e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004472:	f000 f8c5 	bl	8004600 <_malloc_r>
 8004476:	4604      	mov	r4, r0
 8004478:	b140      	cbz	r0, 800448c <__sfmoreglue+0x28>
 800447a:	2100      	movs	r1, #0
 800447c:	e9c0 1600 	strd	r1, r6, [r0]
 8004480:	300c      	adds	r0, #12
 8004482:	60a0      	str	r0, [r4, #8]
 8004484:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004488:	f7ff ffa2 	bl	80043d0 <memset>
 800448c:	4620      	mov	r0, r4
 800448e:	bd70      	pop	{r4, r5, r6, pc}

08004490 <__sfp_lock_acquire>:
 8004490:	4801      	ldr	r0, [pc, #4]	; (8004498 <__sfp_lock_acquire+0x8>)
 8004492:	f000 b8b3 	b.w	80045fc <__retarget_lock_acquire_recursive>
 8004496:	bf00      	nop
 8004498:	20000290 	.word	0x20000290

0800449c <__sfp_lock_release>:
 800449c:	4801      	ldr	r0, [pc, #4]	; (80044a4 <__sfp_lock_release+0x8>)
 800449e:	f000 b8ae 	b.w	80045fe <__retarget_lock_release_recursive>
 80044a2:	bf00      	nop
 80044a4:	20000290 	.word	0x20000290

080044a8 <__sinit_lock_acquire>:
 80044a8:	4801      	ldr	r0, [pc, #4]	; (80044b0 <__sinit_lock_acquire+0x8>)
 80044aa:	f000 b8a7 	b.w	80045fc <__retarget_lock_acquire_recursive>
 80044ae:	bf00      	nop
 80044b0:	2000028b 	.word	0x2000028b

080044b4 <__sinit_lock_release>:
 80044b4:	4801      	ldr	r0, [pc, #4]	; (80044bc <__sinit_lock_release+0x8>)
 80044b6:	f000 b8a2 	b.w	80045fe <__retarget_lock_release_recursive>
 80044ba:	bf00      	nop
 80044bc:	2000028b 	.word	0x2000028b

080044c0 <__sinit>:
 80044c0:	b510      	push	{r4, lr}
 80044c2:	4604      	mov	r4, r0
 80044c4:	f7ff fff0 	bl	80044a8 <__sinit_lock_acquire>
 80044c8:	69a3      	ldr	r3, [r4, #24]
 80044ca:	b11b      	cbz	r3, 80044d4 <__sinit+0x14>
 80044cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044d0:	f7ff bff0 	b.w	80044b4 <__sinit_lock_release>
 80044d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80044d8:	6523      	str	r3, [r4, #80]	; 0x50
 80044da:	4b13      	ldr	r3, [pc, #76]	; (8004528 <__sinit+0x68>)
 80044dc:	4a13      	ldr	r2, [pc, #76]	; (800452c <__sinit+0x6c>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80044e2:	42a3      	cmp	r3, r4
 80044e4:	bf04      	itt	eq
 80044e6:	2301      	moveq	r3, #1
 80044e8:	61a3      	streq	r3, [r4, #24]
 80044ea:	4620      	mov	r0, r4
 80044ec:	f000 f820 	bl	8004530 <__sfp>
 80044f0:	6060      	str	r0, [r4, #4]
 80044f2:	4620      	mov	r0, r4
 80044f4:	f000 f81c 	bl	8004530 <__sfp>
 80044f8:	60a0      	str	r0, [r4, #8]
 80044fa:	4620      	mov	r0, r4
 80044fc:	f000 f818 	bl	8004530 <__sfp>
 8004500:	2200      	movs	r2, #0
 8004502:	60e0      	str	r0, [r4, #12]
 8004504:	2104      	movs	r1, #4
 8004506:	6860      	ldr	r0, [r4, #4]
 8004508:	f7ff ff82 	bl	8004410 <std>
 800450c:	68a0      	ldr	r0, [r4, #8]
 800450e:	2201      	movs	r2, #1
 8004510:	2109      	movs	r1, #9
 8004512:	f7ff ff7d 	bl	8004410 <std>
 8004516:	68e0      	ldr	r0, [r4, #12]
 8004518:	2202      	movs	r2, #2
 800451a:	2112      	movs	r1, #18
 800451c:	f7ff ff78 	bl	8004410 <std>
 8004520:	2301      	movs	r3, #1
 8004522:	61a3      	str	r3, [r4, #24]
 8004524:	e7d2      	b.n	80044cc <__sinit+0xc>
 8004526:	bf00      	nop
 8004528:	0800532c 	.word	0x0800532c
 800452c:	08004459 	.word	0x08004459

08004530 <__sfp>:
 8004530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004532:	4607      	mov	r7, r0
 8004534:	f7ff ffac 	bl	8004490 <__sfp_lock_acquire>
 8004538:	4b1e      	ldr	r3, [pc, #120]	; (80045b4 <__sfp+0x84>)
 800453a:	681e      	ldr	r6, [r3, #0]
 800453c:	69b3      	ldr	r3, [r6, #24]
 800453e:	b913      	cbnz	r3, 8004546 <__sfp+0x16>
 8004540:	4630      	mov	r0, r6
 8004542:	f7ff ffbd 	bl	80044c0 <__sinit>
 8004546:	3648      	adds	r6, #72	; 0x48
 8004548:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800454c:	3b01      	subs	r3, #1
 800454e:	d503      	bpl.n	8004558 <__sfp+0x28>
 8004550:	6833      	ldr	r3, [r6, #0]
 8004552:	b30b      	cbz	r3, 8004598 <__sfp+0x68>
 8004554:	6836      	ldr	r6, [r6, #0]
 8004556:	e7f7      	b.n	8004548 <__sfp+0x18>
 8004558:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800455c:	b9d5      	cbnz	r5, 8004594 <__sfp+0x64>
 800455e:	4b16      	ldr	r3, [pc, #88]	; (80045b8 <__sfp+0x88>)
 8004560:	60e3      	str	r3, [r4, #12]
 8004562:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004566:	6665      	str	r5, [r4, #100]	; 0x64
 8004568:	f000 f847 	bl	80045fa <__retarget_lock_init_recursive>
 800456c:	f7ff ff96 	bl	800449c <__sfp_lock_release>
 8004570:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004574:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004578:	6025      	str	r5, [r4, #0]
 800457a:	61a5      	str	r5, [r4, #24]
 800457c:	2208      	movs	r2, #8
 800457e:	4629      	mov	r1, r5
 8004580:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004584:	f7ff ff24 	bl	80043d0 <memset>
 8004588:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800458c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004590:	4620      	mov	r0, r4
 8004592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004594:	3468      	adds	r4, #104	; 0x68
 8004596:	e7d9      	b.n	800454c <__sfp+0x1c>
 8004598:	2104      	movs	r1, #4
 800459a:	4638      	mov	r0, r7
 800459c:	f7ff ff62 	bl	8004464 <__sfmoreglue>
 80045a0:	4604      	mov	r4, r0
 80045a2:	6030      	str	r0, [r6, #0]
 80045a4:	2800      	cmp	r0, #0
 80045a6:	d1d5      	bne.n	8004554 <__sfp+0x24>
 80045a8:	f7ff ff78 	bl	800449c <__sfp_lock_release>
 80045ac:	230c      	movs	r3, #12
 80045ae:	603b      	str	r3, [r7, #0]
 80045b0:	e7ee      	b.n	8004590 <__sfp+0x60>
 80045b2:	bf00      	nop
 80045b4:	0800532c 	.word	0x0800532c
 80045b8:	ffff0001 	.word	0xffff0001

080045bc <_fwalk_reent>:
 80045bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045c0:	4606      	mov	r6, r0
 80045c2:	4688      	mov	r8, r1
 80045c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80045c8:	2700      	movs	r7, #0
 80045ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80045ce:	f1b9 0901 	subs.w	r9, r9, #1
 80045d2:	d505      	bpl.n	80045e0 <_fwalk_reent+0x24>
 80045d4:	6824      	ldr	r4, [r4, #0]
 80045d6:	2c00      	cmp	r4, #0
 80045d8:	d1f7      	bne.n	80045ca <_fwalk_reent+0xe>
 80045da:	4638      	mov	r0, r7
 80045dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045e0:	89ab      	ldrh	r3, [r5, #12]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d907      	bls.n	80045f6 <_fwalk_reent+0x3a>
 80045e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045ea:	3301      	adds	r3, #1
 80045ec:	d003      	beq.n	80045f6 <_fwalk_reent+0x3a>
 80045ee:	4629      	mov	r1, r5
 80045f0:	4630      	mov	r0, r6
 80045f2:	47c0      	blx	r8
 80045f4:	4307      	orrs	r7, r0
 80045f6:	3568      	adds	r5, #104	; 0x68
 80045f8:	e7e9      	b.n	80045ce <_fwalk_reent+0x12>

080045fa <__retarget_lock_init_recursive>:
 80045fa:	4770      	bx	lr

080045fc <__retarget_lock_acquire_recursive>:
 80045fc:	4770      	bx	lr

080045fe <__retarget_lock_release_recursive>:
 80045fe:	4770      	bx	lr

08004600 <_malloc_r>:
 8004600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004602:	1ccd      	adds	r5, r1, #3
 8004604:	f025 0503 	bic.w	r5, r5, #3
 8004608:	3508      	adds	r5, #8
 800460a:	2d0c      	cmp	r5, #12
 800460c:	bf38      	it	cc
 800460e:	250c      	movcc	r5, #12
 8004610:	2d00      	cmp	r5, #0
 8004612:	4606      	mov	r6, r0
 8004614:	db01      	blt.n	800461a <_malloc_r+0x1a>
 8004616:	42a9      	cmp	r1, r5
 8004618:	d903      	bls.n	8004622 <_malloc_r+0x22>
 800461a:	230c      	movs	r3, #12
 800461c:	6033      	str	r3, [r6, #0]
 800461e:	2000      	movs	r0, #0
 8004620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004622:	f000 fda3 	bl	800516c <__malloc_lock>
 8004626:	4921      	ldr	r1, [pc, #132]	; (80046ac <_malloc_r+0xac>)
 8004628:	680a      	ldr	r2, [r1, #0]
 800462a:	4614      	mov	r4, r2
 800462c:	b99c      	cbnz	r4, 8004656 <_malloc_r+0x56>
 800462e:	4f20      	ldr	r7, [pc, #128]	; (80046b0 <_malloc_r+0xb0>)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	b923      	cbnz	r3, 800463e <_malloc_r+0x3e>
 8004634:	4621      	mov	r1, r4
 8004636:	4630      	mov	r0, r6
 8004638:	f000 fb2a 	bl	8004c90 <_sbrk_r>
 800463c:	6038      	str	r0, [r7, #0]
 800463e:	4629      	mov	r1, r5
 8004640:	4630      	mov	r0, r6
 8004642:	f000 fb25 	bl	8004c90 <_sbrk_r>
 8004646:	1c43      	adds	r3, r0, #1
 8004648:	d123      	bne.n	8004692 <_malloc_r+0x92>
 800464a:	230c      	movs	r3, #12
 800464c:	6033      	str	r3, [r6, #0]
 800464e:	4630      	mov	r0, r6
 8004650:	f000 fd92 	bl	8005178 <__malloc_unlock>
 8004654:	e7e3      	b.n	800461e <_malloc_r+0x1e>
 8004656:	6823      	ldr	r3, [r4, #0]
 8004658:	1b5b      	subs	r3, r3, r5
 800465a:	d417      	bmi.n	800468c <_malloc_r+0x8c>
 800465c:	2b0b      	cmp	r3, #11
 800465e:	d903      	bls.n	8004668 <_malloc_r+0x68>
 8004660:	6023      	str	r3, [r4, #0]
 8004662:	441c      	add	r4, r3
 8004664:	6025      	str	r5, [r4, #0]
 8004666:	e004      	b.n	8004672 <_malloc_r+0x72>
 8004668:	6863      	ldr	r3, [r4, #4]
 800466a:	42a2      	cmp	r2, r4
 800466c:	bf0c      	ite	eq
 800466e:	600b      	streq	r3, [r1, #0]
 8004670:	6053      	strne	r3, [r2, #4]
 8004672:	4630      	mov	r0, r6
 8004674:	f000 fd80 	bl	8005178 <__malloc_unlock>
 8004678:	f104 000b 	add.w	r0, r4, #11
 800467c:	1d23      	adds	r3, r4, #4
 800467e:	f020 0007 	bic.w	r0, r0, #7
 8004682:	1ac2      	subs	r2, r0, r3
 8004684:	d0cc      	beq.n	8004620 <_malloc_r+0x20>
 8004686:	1a1b      	subs	r3, r3, r0
 8004688:	50a3      	str	r3, [r4, r2]
 800468a:	e7c9      	b.n	8004620 <_malloc_r+0x20>
 800468c:	4622      	mov	r2, r4
 800468e:	6864      	ldr	r4, [r4, #4]
 8004690:	e7cc      	b.n	800462c <_malloc_r+0x2c>
 8004692:	1cc4      	adds	r4, r0, #3
 8004694:	f024 0403 	bic.w	r4, r4, #3
 8004698:	42a0      	cmp	r0, r4
 800469a:	d0e3      	beq.n	8004664 <_malloc_r+0x64>
 800469c:	1a21      	subs	r1, r4, r0
 800469e:	4630      	mov	r0, r6
 80046a0:	f000 faf6 	bl	8004c90 <_sbrk_r>
 80046a4:	3001      	adds	r0, #1
 80046a6:	d1dd      	bne.n	8004664 <_malloc_r+0x64>
 80046a8:	e7cf      	b.n	800464a <_malloc_r+0x4a>
 80046aa:	bf00      	nop
 80046ac:	200000f0 	.word	0x200000f0
 80046b0:	200000f4 	.word	0x200000f4

080046b4 <__sfputc_r>:
 80046b4:	6893      	ldr	r3, [r2, #8]
 80046b6:	3b01      	subs	r3, #1
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	b410      	push	{r4}
 80046bc:	6093      	str	r3, [r2, #8]
 80046be:	da08      	bge.n	80046d2 <__sfputc_r+0x1e>
 80046c0:	6994      	ldr	r4, [r2, #24]
 80046c2:	42a3      	cmp	r3, r4
 80046c4:	db01      	blt.n	80046ca <__sfputc_r+0x16>
 80046c6:	290a      	cmp	r1, #10
 80046c8:	d103      	bne.n	80046d2 <__sfputc_r+0x1e>
 80046ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046ce:	f000 bb33 	b.w	8004d38 <__swbuf_r>
 80046d2:	6813      	ldr	r3, [r2, #0]
 80046d4:	1c58      	adds	r0, r3, #1
 80046d6:	6010      	str	r0, [r2, #0]
 80046d8:	7019      	strb	r1, [r3, #0]
 80046da:	4608      	mov	r0, r1
 80046dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <__sfputs_r>:
 80046e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e4:	4606      	mov	r6, r0
 80046e6:	460f      	mov	r7, r1
 80046e8:	4614      	mov	r4, r2
 80046ea:	18d5      	adds	r5, r2, r3
 80046ec:	42ac      	cmp	r4, r5
 80046ee:	d101      	bne.n	80046f4 <__sfputs_r+0x12>
 80046f0:	2000      	movs	r0, #0
 80046f2:	e007      	b.n	8004704 <__sfputs_r+0x22>
 80046f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046f8:	463a      	mov	r2, r7
 80046fa:	4630      	mov	r0, r6
 80046fc:	f7ff ffda 	bl	80046b4 <__sfputc_r>
 8004700:	1c43      	adds	r3, r0, #1
 8004702:	d1f3      	bne.n	80046ec <__sfputs_r+0xa>
 8004704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004708 <_vfiprintf_r>:
 8004708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800470c:	460d      	mov	r5, r1
 800470e:	b09d      	sub	sp, #116	; 0x74
 8004710:	4614      	mov	r4, r2
 8004712:	4698      	mov	r8, r3
 8004714:	4606      	mov	r6, r0
 8004716:	b118      	cbz	r0, 8004720 <_vfiprintf_r+0x18>
 8004718:	6983      	ldr	r3, [r0, #24]
 800471a:	b90b      	cbnz	r3, 8004720 <_vfiprintf_r+0x18>
 800471c:	f7ff fed0 	bl	80044c0 <__sinit>
 8004720:	4b89      	ldr	r3, [pc, #548]	; (8004948 <_vfiprintf_r+0x240>)
 8004722:	429d      	cmp	r5, r3
 8004724:	d11b      	bne.n	800475e <_vfiprintf_r+0x56>
 8004726:	6875      	ldr	r5, [r6, #4]
 8004728:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800472a:	07d9      	lsls	r1, r3, #31
 800472c:	d405      	bmi.n	800473a <_vfiprintf_r+0x32>
 800472e:	89ab      	ldrh	r3, [r5, #12]
 8004730:	059a      	lsls	r2, r3, #22
 8004732:	d402      	bmi.n	800473a <_vfiprintf_r+0x32>
 8004734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004736:	f7ff ff61 	bl	80045fc <__retarget_lock_acquire_recursive>
 800473a:	89ab      	ldrh	r3, [r5, #12]
 800473c:	071b      	lsls	r3, r3, #28
 800473e:	d501      	bpl.n	8004744 <_vfiprintf_r+0x3c>
 8004740:	692b      	ldr	r3, [r5, #16]
 8004742:	b9eb      	cbnz	r3, 8004780 <_vfiprintf_r+0x78>
 8004744:	4629      	mov	r1, r5
 8004746:	4630      	mov	r0, r6
 8004748:	f000 fb5a 	bl	8004e00 <__swsetup_r>
 800474c:	b1c0      	cbz	r0, 8004780 <_vfiprintf_r+0x78>
 800474e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004750:	07dc      	lsls	r4, r3, #31
 8004752:	d50e      	bpl.n	8004772 <_vfiprintf_r+0x6a>
 8004754:	f04f 30ff 	mov.w	r0, #4294967295
 8004758:	b01d      	add	sp, #116	; 0x74
 800475a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800475e:	4b7b      	ldr	r3, [pc, #492]	; (800494c <_vfiprintf_r+0x244>)
 8004760:	429d      	cmp	r5, r3
 8004762:	d101      	bne.n	8004768 <_vfiprintf_r+0x60>
 8004764:	68b5      	ldr	r5, [r6, #8]
 8004766:	e7df      	b.n	8004728 <_vfiprintf_r+0x20>
 8004768:	4b79      	ldr	r3, [pc, #484]	; (8004950 <_vfiprintf_r+0x248>)
 800476a:	429d      	cmp	r5, r3
 800476c:	bf08      	it	eq
 800476e:	68f5      	ldreq	r5, [r6, #12]
 8004770:	e7da      	b.n	8004728 <_vfiprintf_r+0x20>
 8004772:	89ab      	ldrh	r3, [r5, #12]
 8004774:	0598      	lsls	r0, r3, #22
 8004776:	d4ed      	bmi.n	8004754 <_vfiprintf_r+0x4c>
 8004778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800477a:	f7ff ff40 	bl	80045fe <__retarget_lock_release_recursive>
 800477e:	e7e9      	b.n	8004754 <_vfiprintf_r+0x4c>
 8004780:	2300      	movs	r3, #0
 8004782:	9309      	str	r3, [sp, #36]	; 0x24
 8004784:	2320      	movs	r3, #32
 8004786:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800478a:	f8cd 800c 	str.w	r8, [sp, #12]
 800478e:	2330      	movs	r3, #48	; 0x30
 8004790:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004954 <_vfiprintf_r+0x24c>
 8004794:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004798:	f04f 0901 	mov.w	r9, #1
 800479c:	4623      	mov	r3, r4
 800479e:	469a      	mov	sl, r3
 80047a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047a4:	b10a      	cbz	r2, 80047aa <_vfiprintf_r+0xa2>
 80047a6:	2a25      	cmp	r2, #37	; 0x25
 80047a8:	d1f9      	bne.n	800479e <_vfiprintf_r+0x96>
 80047aa:	ebba 0b04 	subs.w	fp, sl, r4
 80047ae:	d00b      	beq.n	80047c8 <_vfiprintf_r+0xc0>
 80047b0:	465b      	mov	r3, fp
 80047b2:	4622      	mov	r2, r4
 80047b4:	4629      	mov	r1, r5
 80047b6:	4630      	mov	r0, r6
 80047b8:	f7ff ff93 	bl	80046e2 <__sfputs_r>
 80047bc:	3001      	adds	r0, #1
 80047be:	f000 80aa 	beq.w	8004916 <_vfiprintf_r+0x20e>
 80047c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047c4:	445a      	add	r2, fp
 80047c6:	9209      	str	r2, [sp, #36]	; 0x24
 80047c8:	f89a 3000 	ldrb.w	r3, [sl]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 80a2 	beq.w	8004916 <_vfiprintf_r+0x20e>
 80047d2:	2300      	movs	r3, #0
 80047d4:	f04f 32ff 	mov.w	r2, #4294967295
 80047d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047dc:	f10a 0a01 	add.w	sl, sl, #1
 80047e0:	9304      	str	r3, [sp, #16]
 80047e2:	9307      	str	r3, [sp, #28]
 80047e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047e8:	931a      	str	r3, [sp, #104]	; 0x68
 80047ea:	4654      	mov	r4, sl
 80047ec:	2205      	movs	r2, #5
 80047ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047f2:	4858      	ldr	r0, [pc, #352]	; (8004954 <_vfiprintf_r+0x24c>)
 80047f4:	f7fb fcf4 	bl	80001e0 <memchr>
 80047f8:	9a04      	ldr	r2, [sp, #16]
 80047fa:	b9d8      	cbnz	r0, 8004834 <_vfiprintf_r+0x12c>
 80047fc:	06d1      	lsls	r1, r2, #27
 80047fe:	bf44      	itt	mi
 8004800:	2320      	movmi	r3, #32
 8004802:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004806:	0713      	lsls	r3, r2, #28
 8004808:	bf44      	itt	mi
 800480a:	232b      	movmi	r3, #43	; 0x2b
 800480c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004810:	f89a 3000 	ldrb.w	r3, [sl]
 8004814:	2b2a      	cmp	r3, #42	; 0x2a
 8004816:	d015      	beq.n	8004844 <_vfiprintf_r+0x13c>
 8004818:	9a07      	ldr	r2, [sp, #28]
 800481a:	4654      	mov	r4, sl
 800481c:	2000      	movs	r0, #0
 800481e:	f04f 0c0a 	mov.w	ip, #10
 8004822:	4621      	mov	r1, r4
 8004824:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004828:	3b30      	subs	r3, #48	; 0x30
 800482a:	2b09      	cmp	r3, #9
 800482c:	d94e      	bls.n	80048cc <_vfiprintf_r+0x1c4>
 800482e:	b1b0      	cbz	r0, 800485e <_vfiprintf_r+0x156>
 8004830:	9207      	str	r2, [sp, #28]
 8004832:	e014      	b.n	800485e <_vfiprintf_r+0x156>
 8004834:	eba0 0308 	sub.w	r3, r0, r8
 8004838:	fa09 f303 	lsl.w	r3, r9, r3
 800483c:	4313      	orrs	r3, r2
 800483e:	9304      	str	r3, [sp, #16]
 8004840:	46a2      	mov	sl, r4
 8004842:	e7d2      	b.n	80047ea <_vfiprintf_r+0xe2>
 8004844:	9b03      	ldr	r3, [sp, #12]
 8004846:	1d19      	adds	r1, r3, #4
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	9103      	str	r1, [sp, #12]
 800484c:	2b00      	cmp	r3, #0
 800484e:	bfbb      	ittet	lt
 8004850:	425b      	neglt	r3, r3
 8004852:	f042 0202 	orrlt.w	r2, r2, #2
 8004856:	9307      	strge	r3, [sp, #28]
 8004858:	9307      	strlt	r3, [sp, #28]
 800485a:	bfb8      	it	lt
 800485c:	9204      	strlt	r2, [sp, #16]
 800485e:	7823      	ldrb	r3, [r4, #0]
 8004860:	2b2e      	cmp	r3, #46	; 0x2e
 8004862:	d10c      	bne.n	800487e <_vfiprintf_r+0x176>
 8004864:	7863      	ldrb	r3, [r4, #1]
 8004866:	2b2a      	cmp	r3, #42	; 0x2a
 8004868:	d135      	bne.n	80048d6 <_vfiprintf_r+0x1ce>
 800486a:	9b03      	ldr	r3, [sp, #12]
 800486c:	1d1a      	adds	r2, r3, #4
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	9203      	str	r2, [sp, #12]
 8004872:	2b00      	cmp	r3, #0
 8004874:	bfb8      	it	lt
 8004876:	f04f 33ff 	movlt.w	r3, #4294967295
 800487a:	3402      	adds	r4, #2
 800487c:	9305      	str	r3, [sp, #20]
 800487e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004964 <_vfiprintf_r+0x25c>
 8004882:	7821      	ldrb	r1, [r4, #0]
 8004884:	2203      	movs	r2, #3
 8004886:	4650      	mov	r0, sl
 8004888:	f7fb fcaa 	bl	80001e0 <memchr>
 800488c:	b140      	cbz	r0, 80048a0 <_vfiprintf_r+0x198>
 800488e:	2340      	movs	r3, #64	; 0x40
 8004890:	eba0 000a 	sub.w	r0, r0, sl
 8004894:	fa03 f000 	lsl.w	r0, r3, r0
 8004898:	9b04      	ldr	r3, [sp, #16]
 800489a:	4303      	orrs	r3, r0
 800489c:	3401      	adds	r4, #1
 800489e:	9304      	str	r3, [sp, #16]
 80048a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048a4:	482c      	ldr	r0, [pc, #176]	; (8004958 <_vfiprintf_r+0x250>)
 80048a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048aa:	2206      	movs	r2, #6
 80048ac:	f7fb fc98 	bl	80001e0 <memchr>
 80048b0:	2800      	cmp	r0, #0
 80048b2:	d03f      	beq.n	8004934 <_vfiprintf_r+0x22c>
 80048b4:	4b29      	ldr	r3, [pc, #164]	; (800495c <_vfiprintf_r+0x254>)
 80048b6:	bb1b      	cbnz	r3, 8004900 <_vfiprintf_r+0x1f8>
 80048b8:	9b03      	ldr	r3, [sp, #12]
 80048ba:	3307      	adds	r3, #7
 80048bc:	f023 0307 	bic.w	r3, r3, #7
 80048c0:	3308      	adds	r3, #8
 80048c2:	9303      	str	r3, [sp, #12]
 80048c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048c6:	443b      	add	r3, r7
 80048c8:	9309      	str	r3, [sp, #36]	; 0x24
 80048ca:	e767      	b.n	800479c <_vfiprintf_r+0x94>
 80048cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80048d0:	460c      	mov	r4, r1
 80048d2:	2001      	movs	r0, #1
 80048d4:	e7a5      	b.n	8004822 <_vfiprintf_r+0x11a>
 80048d6:	2300      	movs	r3, #0
 80048d8:	3401      	adds	r4, #1
 80048da:	9305      	str	r3, [sp, #20]
 80048dc:	4619      	mov	r1, r3
 80048de:	f04f 0c0a 	mov.w	ip, #10
 80048e2:	4620      	mov	r0, r4
 80048e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048e8:	3a30      	subs	r2, #48	; 0x30
 80048ea:	2a09      	cmp	r2, #9
 80048ec:	d903      	bls.n	80048f6 <_vfiprintf_r+0x1ee>
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d0c5      	beq.n	800487e <_vfiprintf_r+0x176>
 80048f2:	9105      	str	r1, [sp, #20]
 80048f4:	e7c3      	b.n	800487e <_vfiprintf_r+0x176>
 80048f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80048fa:	4604      	mov	r4, r0
 80048fc:	2301      	movs	r3, #1
 80048fe:	e7f0      	b.n	80048e2 <_vfiprintf_r+0x1da>
 8004900:	ab03      	add	r3, sp, #12
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	462a      	mov	r2, r5
 8004906:	4b16      	ldr	r3, [pc, #88]	; (8004960 <_vfiprintf_r+0x258>)
 8004908:	a904      	add	r1, sp, #16
 800490a:	4630      	mov	r0, r6
 800490c:	f3af 8000 	nop.w
 8004910:	4607      	mov	r7, r0
 8004912:	1c78      	adds	r0, r7, #1
 8004914:	d1d6      	bne.n	80048c4 <_vfiprintf_r+0x1bc>
 8004916:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004918:	07d9      	lsls	r1, r3, #31
 800491a:	d405      	bmi.n	8004928 <_vfiprintf_r+0x220>
 800491c:	89ab      	ldrh	r3, [r5, #12]
 800491e:	059a      	lsls	r2, r3, #22
 8004920:	d402      	bmi.n	8004928 <_vfiprintf_r+0x220>
 8004922:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004924:	f7ff fe6b 	bl	80045fe <__retarget_lock_release_recursive>
 8004928:	89ab      	ldrh	r3, [r5, #12]
 800492a:	065b      	lsls	r3, r3, #25
 800492c:	f53f af12 	bmi.w	8004754 <_vfiprintf_r+0x4c>
 8004930:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004932:	e711      	b.n	8004758 <_vfiprintf_r+0x50>
 8004934:	ab03      	add	r3, sp, #12
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	462a      	mov	r2, r5
 800493a:	4b09      	ldr	r3, [pc, #36]	; (8004960 <_vfiprintf_r+0x258>)
 800493c:	a904      	add	r1, sp, #16
 800493e:	4630      	mov	r0, r6
 8004940:	f000 f880 	bl	8004a44 <_printf_i>
 8004944:	e7e4      	b.n	8004910 <_vfiprintf_r+0x208>
 8004946:	bf00      	nop
 8004948:	08005350 	.word	0x08005350
 800494c:	08005370 	.word	0x08005370
 8004950:	08005330 	.word	0x08005330
 8004954:	08005390 	.word	0x08005390
 8004958:	0800539a 	.word	0x0800539a
 800495c:	00000000 	.word	0x00000000
 8004960:	080046e3 	.word	0x080046e3
 8004964:	08005396 	.word	0x08005396

08004968 <_printf_common>:
 8004968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800496c:	4616      	mov	r6, r2
 800496e:	4699      	mov	r9, r3
 8004970:	688a      	ldr	r2, [r1, #8]
 8004972:	690b      	ldr	r3, [r1, #16]
 8004974:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004978:	4293      	cmp	r3, r2
 800497a:	bfb8      	it	lt
 800497c:	4613      	movlt	r3, r2
 800497e:	6033      	str	r3, [r6, #0]
 8004980:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004984:	4607      	mov	r7, r0
 8004986:	460c      	mov	r4, r1
 8004988:	b10a      	cbz	r2, 800498e <_printf_common+0x26>
 800498a:	3301      	adds	r3, #1
 800498c:	6033      	str	r3, [r6, #0]
 800498e:	6823      	ldr	r3, [r4, #0]
 8004990:	0699      	lsls	r1, r3, #26
 8004992:	bf42      	ittt	mi
 8004994:	6833      	ldrmi	r3, [r6, #0]
 8004996:	3302      	addmi	r3, #2
 8004998:	6033      	strmi	r3, [r6, #0]
 800499a:	6825      	ldr	r5, [r4, #0]
 800499c:	f015 0506 	ands.w	r5, r5, #6
 80049a0:	d106      	bne.n	80049b0 <_printf_common+0x48>
 80049a2:	f104 0a19 	add.w	sl, r4, #25
 80049a6:	68e3      	ldr	r3, [r4, #12]
 80049a8:	6832      	ldr	r2, [r6, #0]
 80049aa:	1a9b      	subs	r3, r3, r2
 80049ac:	42ab      	cmp	r3, r5
 80049ae:	dc26      	bgt.n	80049fe <_printf_common+0x96>
 80049b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049b4:	1e13      	subs	r3, r2, #0
 80049b6:	6822      	ldr	r2, [r4, #0]
 80049b8:	bf18      	it	ne
 80049ba:	2301      	movne	r3, #1
 80049bc:	0692      	lsls	r2, r2, #26
 80049be:	d42b      	bmi.n	8004a18 <_printf_common+0xb0>
 80049c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049c4:	4649      	mov	r1, r9
 80049c6:	4638      	mov	r0, r7
 80049c8:	47c0      	blx	r8
 80049ca:	3001      	adds	r0, #1
 80049cc:	d01e      	beq.n	8004a0c <_printf_common+0xa4>
 80049ce:	6823      	ldr	r3, [r4, #0]
 80049d0:	68e5      	ldr	r5, [r4, #12]
 80049d2:	6832      	ldr	r2, [r6, #0]
 80049d4:	f003 0306 	and.w	r3, r3, #6
 80049d8:	2b04      	cmp	r3, #4
 80049da:	bf08      	it	eq
 80049dc:	1aad      	subeq	r5, r5, r2
 80049de:	68a3      	ldr	r3, [r4, #8]
 80049e0:	6922      	ldr	r2, [r4, #16]
 80049e2:	bf0c      	ite	eq
 80049e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049e8:	2500      	movne	r5, #0
 80049ea:	4293      	cmp	r3, r2
 80049ec:	bfc4      	itt	gt
 80049ee:	1a9b      	subgt	r3, r3, r2
 80049f0:	18ed      	addgt	r5, r5, r3
 80049f2:	2600      	movs	r6, #0
 80049f4:	341a      	adds	r4, #26
 80049f6:	42b5      	cmp	r5, r6
 80049f8:	d11a      	bne.n	8004a30 <_printf_common+0xc8>
 80049fa:	2000      	movs	r0, #0
 80049fc:	e008      	b.n	8004a10 <_printf_common+0xa8>
 80049fe:	2301      	movs	r3, #1
 8004a00:	4652      	mov	r2, sl
 8004a02:	4649      	mov	r1, r9
 8004a04:	4638      	mov	r0, r7
 8004a06:	47c0      	blx	r8
 8004a08:	3001      	adds	r0, #1
 8004a0a:	d103      	bne.n	8004a14 <_printf_common+0xac>
 8004a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a14:	3501      	adds	r5, #1
 8004a16:	e7c6      	b.n	80049a6 <_printf_common+0x3e>
 8004a18:	18e1      	adds	r1, r4, r3
 8004a1a:	1c5a      	adds	r2, r3, #1
 8004a1c:	2030      	movs	r0, #48	; 0x30
 8004a1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a22:	4422      	add	r2, r4
 8004a24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a2c:	3302      	adds	r3, #2
 8004a2e:	e7c7      	b.n	80049c0 <_printf_common+0x58>
 8004a30:	2301      	movs	r3, #1
 8004a32:	4622      	mov	r2, r4
 8004a34:	4649      	mov	r1, r9
 8004a36:	4638      	mov	r0, r7
 8004a38:	47c0      	blx	r8
 8004a3a:	3001      	adds	r0, #1
 8004a3c:	d0e6      	beq.n	8004a0c <_printf_common+0xa4>
 8004a3e:	3601      	adds	r6, #1
 8004a40:	e7d9      	b.n	80049f6 <_printf_common+0x8e>
	...

08004a44 <_printf_i>:
 8004a44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a48:	460c      	mov	r4, r1
 8004a4a:	4691      	mov	r9, r2
 8004a4c:	7e27      	ldrb	r7, [r4, #24]
 8004a4e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004a50:	2f78      	cmp	r7, #120	; 0x78
 8004a52:	4680      	mov	r8, r0
 8004a54:	469a      	mov	sl, r3
 8004a56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a5a:	d807      	bhi.n	8004a6c <_printf_i+0x28>
 8004a5c:	2f62      	cmp	r7, #98	; 0x62
 8004a5e:	d80a      	bhi.n	8004a76 <_printf_i+0x32>
 8004a60:	2f00      	cmp	r7, #0
 8004a62:	f000 80d8 	beq.w	8004c16 <_printf_i+0x1d2>
 8004a66:	2f58      	cmp	r7, #88	; 0x58
 8004a68:	f000 80a3 	beq.w	8004bb2 <_printf_i+0x16e>
 8004a6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a74:	e03a      	b.n	8004aec <_printf_i+0xa8>
 8004a76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a7a:	2b15      	cmp	r3, #21
 8004a7c:	d8f6      	bhi.n	8004a6c <_printf_i+0x28>
 8004a7e:	a001      	add	r0, pc, #4	; (adr r0, 8004a84 <_printf_i+0x40>)
 8004a80:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004a84:	08004add 	.word	0x08004add
 8004a88:	08004af1 	.word	0x08004af1
 8004a8c:	08004a6d 	.word	0x08004a6d
 8004a90:	08004a6d 	.word	0x08004a6d
 8004a94:	08004a6d 	.word	0x08004a6d
 8004a98:	08004a6d 	.word	0x08004a6d
 8004a9c:	08004af1 	.word	0x08004af1
 8004aa0:	08004a6d 	.word	0x08004a6d
 8004aa4:	08004a6d 	.word	0x08004a6d
 8004aa8:	08004a6d 	.word	0x08004a6d
 8004aac:	08004a6d 	.word	0x08004a6d
 8004ab0:	08004bfd 	.word	0x08004bfd
 8004ab4:	08004b21 	.word	0x08004b21
 8004ab8:	08004bdf 	.word	0x08004bdf
 8004abc:	08004a6d 	.word	0x08004a6d
 8004ac0:	08004a6d 	.word	0x08004a6d
 8004ac4:	08004c1f 	.word	0x08004c1f
 8004ac8:	08004a6d 	.word	0x08004a6d
 8004acc:	08004b21 	.word	0x08004b21
 8004ad0:	08004a6d 	.word	0x08004a6d
 8004ad4:	08004a6d 	.word	0x08004a6d
 8004ad8:	08004be7 	.word	0x08004be7
 8004adc:	680b      	ldr	r3, [r1, #0]
 8004ade:	1d1a      	adds	r2, r3, #4
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	600a      	str	r2, [r1, #0]
 8004ae4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ae8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004aec:	2301      	movs	r3, #1
 8004aee:	e0a3      	b.n	8004c38 <_printf_i+0x1f4>
 8004af0:	6825      	ldr	r5, [r4, #0]
 8004af2:	6808      	ldr	r0, [r1, #0]
 8004af4:	062e      	lsls	r6, r5, #24
 8004af6:	f100 0304 	add.w	r3, r0, #4
 8004afa:	d50a      	bpl.n	8004b12 <_printf_i+0xce>
 8004afc:	6805      	ldr	r5, [r0, #0]
 8004afe:	600b      	str	r3, [r1, #0]
 8004b00:	2d00      	cmp	r5, #0
 8004b02:	da03      	bge.n	8004b0c <_printf_i+0xc8>
 8004b04:	232d      	movs	r3, #45	; 0x2d
 8004b06:	426d      	negs	r5, r5
 8004b08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b0c:	485e      	ldr	r0, [pc, #376]	; (8004c88 <_printf_i+0x244>)
 8004b0e:	230a      	movs	r3, #10
 8004b10:	e019      	b.n	8004b46 <_printf_i+0x102>
 8004b12:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004b16:	6805      	ldr	r5, [r0, #0]
 8004b18:	600b      	str	r3, [r1, #0]
 8004b1a:	bf18      	it	ne
 8004b1c:	b22d      	sxthne	r5, r5
 8004b1e:	e7ef      	b.n	8004b00 <_printf_i+0xbc>
 8004b20:	680b      	ldr	r3, [r1, #0]
 8004b22:	6825      	ldr	r5, [r4, #0]
 8004b24:	1d18      	adds	r0, r3, #4
 8004b26:	6008      	str	r0, [r1, #0]
 8004b28:	0628      	lsls	r0, r5, #24
 8004b2a:	d501      	bpl.n	8004b30 <_printf_i+0xec>
 8004b2c:	681d      	ldr	r5, [r3, #0]
 8004b2e:	e002      	b.n	8004b36 <_printf_i+0xf2>
 8004b30:	0669      	lsls	r1, r5, #25
 8004b32:	d5fb      	bpl.n	8004b2c <_printf_i+0xe8>
 8004b34:	881d      	ldrh	r5, [r3, #0]
 8004b36:	4854      	ldr	r0, [pc, #336]	; (8004c88 <_printf_i+0x244>)
 8004b38:	2f6f      	cmp	r7, #111	; 0x6f
 8004b3a:	bf0c      	ite	eq
 8004b3c:	2308      	moveq	r3, #8
 8004b3e:	230a      	movne	r3, #10
 8004b40:	2100      	movs	r1, #0
 8004b42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b46:	6866      	ldr	r6, [r4, #4]
 8004b48:	60a6      	str	r6, [r4, #8]
 8004b4a:	2e00      	cmp	r6, #0
 8004b4c:	bfa2      	ittt	ge
 8004b4e:	6821      	ldrge	r1, [r4, #0]
 8004b50:	f021 0104 	bicge.w	r1, r1, #4
 8004b54:	6021      	strge	r1, [r4, #0]
 8004b56:	b90d      	cbnz	r5, 8004b5c <_printf_i+0x118>
 8004b58:	2e00      	cmp	r6, #0
 8004b5a:	d04d      	beq.n	8004bf8 <_printf_i+0x1b4>
 8004b5c:	4616      	mov	r6, r2
 8004b5e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b62:	fb03 5711 	mls	r7, r3, r1, r5
 8004b66:	5dc7      	ldrb	r7, [r0, r7]
 8004b68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b6c:	462f      	mov	r7, r5
 8004b6e:	42bb      	cmp	r3, r7
 8004b70:	460d      	mov	r5, r1
 8004b72:	d9f4      	bls.n	8004b5e <_printf_i+0x11a>
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d10b      	bne.n	8004b90 <_printf_i+0x14c>
 8004b78:	6823      	ldr	r3, [r4, #0]
 8004b7a:	07df      	lsls	r7, r3, #31
 8004b7c:	d508      	bpl.n	8004b90 <_printf_i+0x14c>
 8004b7e:	6923      	ldr	r3, [r4, #16]
 8004b80:	6861      	ldr	r1, [r4, #4]
 8004b82:	4299      	cmp	r1, r3
 8004b84:	bfde      	ittt	le
 8004b86:	2330      	movle	r3, #48	; 0x30
 8004b88:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b90:	1b92      	subs	r2, r2, r6
 8004b92:	6122      	str	r2, [r4, #16]
 8004b94:	f8cd a000 	str.w	sl, [sp]
 8004b98:	464b      	mov	r3, r9
 8004b9a:	aa03      	add	r2, sp, #12
 8004b9c:	4621      	mov	r1, r4
 8004b9e:	4640      	mov	r0, r8
 8004ba0:	f7ff fee2 	bl	8004968 <_printf_common>
 8004ba4:	3001      	adds	r0, #1
 8004ba6:	d14c      	bne.n	8004c42 <_printf_i+0x1fe>
 8004ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bac:	b004      	add	sp, #16
 8004bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bb2:	4835      	ldr	r0, [pc, #212]	; (8004c88 <_printf_i+0x244>)
 8004bb4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004bb8:	6823      	ldr	r3, [r4, #0]
 8004bba:	680e      	ldr	r6, [r1, #0]
 8004bbc:	061f      	lsls	r7, r3, #24
 8004bbe:	f856 5b04 	ldr.w	r5, [r6], #4
 8004bc2:	600e      	str	r6, [r1, #0]
 8004bc4:	d514      	bpl.n	8004bf0 <_printf_i+0x1ac>
 8004bc6:	07d9      	lsls	r1, r3, #31
 8004bc8:	bf44      	itt	mi
 8004bca:	f043 0320 	orrmi.w	r3, r3, #32
 8004bce:	6023      	strmi	r3, [r4, #0]
 8004bd0:	b91d      	cbnz	r5, 8004bda <_printf_i+0x196>
 8004bd2:	6823      	ldr	r3, [r4, #0]
 8004bd4:	f023 0320 	bic.w	r3, r3, #32
 8004bd8:	6023      	str	r3, [r4, #0]
 8004bda:	2310      	movs	r3, #16
 8004bdc:	e7b0      	b.n	8004b40 <_printf_i+0xfc>
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	f043 0320 	orr.w	r3, r3, #32
 8004be4:	6023      	str	r3, [r4, #0]
 8004be6:	2378      	movs	r3, #120	; 0x78
 8004be8:	4828      	ldr	r0, [pc, #160]	; (8004c8c <_printf_i+0x248>)
 8004bea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bee:	e7e3      	b.n	8004bb8 <_printf_i+0x174>
 8004bf0:	065e      	lsls	r6, r3, #25
 8004bf2:	bf48      	it	mi
 8004bf4:	b2ad      	uxthmi	r5, r5
 8004bf6:	e7e6      	b.n	8004bc6 <_printf_i+0x182>
 8004bf8:	4616      	mov	r6, r2
 8004bfa:	e7bb      	b.n	8004b74 <_printf_i+0x130>
 8004bfc:	680b      	ldr	r3, [r1, #0]
 8004bfe:	6826      	ldr	r6, [r4, #0]
 8004c00:	6960      	ldr	r0, [r4, #20]
 8004c02:	1d1d      	adds	r5, r3, #4
 8004c04:	600d      	str	r5, [r1, #0]
 8004c06:	0635      	lsls	r5, r6, #24
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	d501      	bpl.n	8004c10 <_printf_i+0x1cc>
 8004c0c:	6018      	str	r0, [r3, #0]
 8004c0e:	e002      	b.n	8004c16 <_printf_i+0x1d2>
 8004c10:	0671      	lsls	r1, r6, #25
 8004c12:	d5fb      	bpl.n	8004c0c <_printf_i+0x1c8>
 8004c14:	8018      	strh	r0, [r3, #0]
 8004c16:	2300      	movs	r3, #0
 8004c18:	6123      	str	r3, [r4, #16]
 8004c1a:	4616      	mov	r6, r2
 8004c1c:	e7ba      	b.n	8004b94 <_printf_i+0x150>
 8004c1e:	680b      	ldr	r3, [r1, #0]
 8004c20:	1d1a      	adds	r2, r3, #4
 8004c22:	600a      	str	r2, [r1, #0]
 8004c24:	681e      	ldr	r6, [r3, #0]
 8004c26:	6862      	ldr	r2, [r4, #4]
 8004c28:	2100      	movs	r1, #0
 8004c2a:	4630      	mov	r0, r6
 8004c2c:	f7fb fad8 	bl	80001e0 <memchr>
 8004c30:	b108      	cbz	r0, 8004c36 <_printf_i+0x1f2>
 8004c32:	1b80      	subs	r0, r0, r6
 8004c34:	6060      	str	r0, [r4, #4]
 8004c36:	6863      	ldr	r3, [r4, #4]
 8004c38:	6123      	str	r3, [r4, #16]
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c40:	e7a8      	b.n	8004b94 <_printf_i+0x150>
 8004c42:	6923      	ldr	r3, [r4, #16]
 8004c44:	4632      	mov	r2, r6
 8004c46:	4649      	mov	r1, r9
 8004c48:	4640      	mov	r0, r8
 8004c4a:	47d0      	blx	sl
 8004c4c:	3001      	adds	r0, #1
 8004c4e:	d0ab      	beq.n	8004ba8 <_printf_i+0x164>
 8004c50:	6823      	ldr	r3, [r4, #0]
 8004c52:	079b      	lsls	r3, r3, #30
 8004c54:	d413      	bmi.n	8004c7e <_printf_i+0x23a>
 8004c56:	68e0      	ldr	r0, [r4, #12]
 8004c58:	9b03      	ldr	r3, [sp, #12]
 8004c5a:	4298      	cmp	r0, r3
 8004c5c:	bfb8      	it	lt
 8004c5e:	4618      	movlt	r0, r3
 8004c60:	e7a4      	b.n	8004bac <_printf_i+0x168>
 8004c62:	2301      	movs	r3, #1
 8004c64:	4632      	mov	r2, r6
 8004c66:	4649      	mov	r1, r9
 8004c68:	4640      	mov	r0, r8
 8004c6a:	47d0      	blx	sl
 8004c6c:	3001      	adds	r0, #1
 8004c6e:	d09b      	beq.n	8004ba8 <_printf_i+0x164>
 8004c70:	3501      	adds	r5, #1
 8004c72:	68e3      	ldr	r3, [r4, #12]
 8004c74:	9903      	ldr	r1, [sp, #12]
 8004c76:	1a5b      	subs	r3, r3, r1
 8004c78:	42ab      	cmp	r3, r5
 8004c7a:	dcf2      	bgt.n	8004c62 <_printf_i+0x21e>
 8004c7c:	e7eb      	b.n	8004c56 <_printf_i+0x212>
 8004c7e:	2500      	movs	r5, #0
 8004c80:	f104 0619 	add.w	r6, r4, #25
 8004c84:	e7f5      	b.n	8004c72 <_printf_i+0x22e>
 8004c86:	bf00      	nop
 8004c88:	080053a1 	.word	0x080053a1
 8004c8c:	080053b2 	.word	0x080053b2

08004c90 <_sbrk_r>:
 8004c90:	b538      	push	{r3, r4, r5, lr}
 8004c92:	4d06      	ldr	r5, [pc, #24]	; (8004cac <_sbrk_r+0x1c>)
 8004c94:	2300      	movs	r3, #0
 8004c96:	4604      	mov	r4, r0
 8004c98:	4608      	mov	r0, r1
 8004c9a:	602b      	str	r3, [r5, #0]
 8004c9c:	f7fc fa38 	bl	8001110 <_sbrk>
 8004ca0:	1c43      	adds	r3, r0, #1
 8004ca2:	d102      	bne.n	8004caa <_sbrk_r+0x1a>
 8004ca4:	682b      	ldr	r3, [r5, #0]
 8004ca6:	b103      	cbz	r3, 8004caa <_sbrk_r+0x1a>
 8004ca8:	6023      	str	r3, [r4, #0]
 8004caa:	bd38      	pop	{r3, r4, r5, pc}
 8004cac:	20000294 	.word	0x20000294

08004cb0 <__sread>:
 8004cb0:	b510      	push	{r4, lr}
 8004cb2:	460c      	mov	r4, r1
 8004cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cb8:	f000 fab4 	bl	8005224 <_read_r>
 8004cbc:	2800      	cmp	r0, #0
 8004cbe:	bfab      	itete	ge
 8004cc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004cc2:	89a3      	ldrhlt	r3, [r4, #12]
 8004cc4:	181b      	addge	r3, r3, r0
 8004cc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004cca:	bfac      	ite	ge
 8004ccc:	6563      	strge	r3, [r4, #84]	; 0x54
 8004cce:	81a3      	strhlt	r3, [r4, #12]
 8004cd0:	bd10      	pop	{r4, pc}

08004cd2 <__swrite>:
 8004cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cd6:	461f      	mov	r7, r3
 8004cd8:	898b      	ldrh	r3, [r1, #12]
 8004cda:	05db      	lsls	r3, r3, #23
 8004cdc:	4605      	mov	r5, r0
 8004cde:	460c      	mov	r4, r1
 8004ce0:	4616      	mov	r6, r2
 8004ce2:	d505      	bpl.n	8004cf0 <__swrite+0x1e>
 8004ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ce8:	2302      	movs	r3, #2
 8004cea:	2200      	movs	r2, #0
 8004cec:	f000 f9c8 	bl	8005080 <_lseek_r>
 8004cf0:	89a3      	ldrh	r3, [r4, #12]
 8004cf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cfa:	81a3      	strh	r3, [r4, #12]
 8004cfc:	4632      	mov	r2, r6
 8004cfe:	463b      	mov	r3, r7
 8004d00:	4628      	mov	r0, r5
 8004d02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d06:	f000 b869 	b.w	8004ddc <_write_r>

08004d0a <__sseek>:
 8004d0a:	b510      	push	{r4, lr}
 8004d0c:	460c      	mov	r4, r1
 8004d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d12:	f000 f9b5 	bl	8005080 <_lseek_r>
 8004d16:	1c43      	adds	r3, r0, #1
 8004d18:	89a3      	ldrh	r3, [r4, #12]
 8004d1a:	bf15      	itete	ne
 8004d1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d26:	81a3      	strheq	r3, [r4, #12]
 8004d28:	bf18      	it	ne
 8004d2a:	81a3      	strhne	r3, [r4, #12]
 8004d2c:	bd10      	pop	{r4, pc}

08004d2e <__sclose>:
 8004d2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d32:	f000 b8d3 	b.w	8004edc <_close_r>
	...

08004d38 <__swbuf_r>:
 8004d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3a:	460e      	mov	r6, r1
 8004d3c:	4614      	mov	r4, r2
 8004d3e:	4605      	mov	r5, r0
 8004d40:	b118      	cbz	r0, 8004d4a <__swbuf_r+0x12>
 8004d42:	6983      	ldr	r3, [r0, #24]
 8004d44:	b90b      	cbnz	r3, 8004d4a <__swbuf_r+0x12>
 8004d46:	f7ff fbbb 	bl	80044c0 <__sinit>
 8004d4a:	4b21      	ldr	r3, [pc, #132]	; (8004dd0 <__swbuf_r+0x98>)
 8004d4c:	429c      	cmp	r4, r3
 8004d4e:	d12b      	bne.n	8004da8 <__swbuf_r+0x70>
 8004d50:	686c      	ldr	r4, [r5, #4]
 8004d52:	69a3      	ldr	r3, [r4, #24]
 8004d54:	60a3      	str	r3, [r4, #8]
 8004d56:	89a3      	ldrh	r3, [r4, #12]
 8004d58:	071a      	lsls	r2, r3, #28
 8004d5a:	d52f      	bpl.n	8004dbc <__swbuf_r+0x84>
 8004d5c:	6923      	ldr	r3, [r4, #16]
 8004d5e:	b36b      	cbz	r3, 8004dbc <__swbuf_r+0x84>
 8004d60:	6923      	ldr	r3, [r4, #16]
 8004d62:	6820      	ldr	r0, [r4, #0]
 8004d64:	1ac0      	subs	r0, r0, r3
 8004d66:	6963      	ldr	r3, [r4, #20]
 8004d68:	b2f6      	uxtb	r6, r6
 8004d6a:	4283      	cmp	r3, r0
 8004d6c:	4637      	mov	r7, r6
 8004d6e:	dc04      	bgt.n	8004d7a <__swbuf_r+0x42>
 8004d70:	4621      	mov	r1, r4
 8004d72:	4628      	mov	r0, r5
 8004d74:	f000 f948 	bl	8005008 <_fflush_r>
 8004d78:	bb30      	cbnz	r0, 8004dc8 <__swbuf_r+0x90>
 8004d7a:	68a3      	ldr	r3, [r4, #8]
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	60a3      	str	r3, [r4, #8]
 8004d80:	6823      	ldr	r3, [r4, #0]
 8004d82:	1c5a      	adds	r2, r3, #1
 8004d84:	6022      	str	r2, [r4, #0]
 8004d86:	701e      	strb	r6, [r3, #0]
 8004d88:	6963      	ldr	r3, [r4, #20]
 8004d8a:	3001      	adds	r0, #1
 8004d8c:	4283      	cmp	r3, r0
 8004d8e:	d004      	beq.n	8004d9a <__swbuf_r+0x62>
 8004d90:	89a3      	ldrh	r3, [r4, #12]
 8004d92:	07db      	lsls	r3, r3, #31
 8004d94:	d506      	bpl.n	8004da4 <__swbuf_r+0x6c>
 8004d96:	2e0a      	cmp	r6, #10
 8004d98:	d104      	bne.n	8004da4 <__swbuf_r+0x6c>
 8004d9a:	4621      	mov	r1, r4
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	f000 f933 	bl	8005008 <_fflush_r>
 8004da2:	b988      	cbnz	r0, 8004dc8 <__swbuf_r+0x90>
 8004da4:	4638      	mov	r0, r7
 8004da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004da8:	4b0a      	ldr	r3, [pc, #40]	; (8004dd4 <__swbuf_r+0x9c>)
 8004daa:	429c      	cmp	r4, r3
 8004dac:	d101      	bne.n	8004db2 <__swbuf_r+0x7a>
 8004dae:	68ac      	ldr	r4, [r5, #8]
 8004db0:	e7cf      	b.n	8004d52 <__swbuf_r+0x1a>
 8004db2:	4b09      	ldr	r3, [pc, #36]	; (8004dd8 <__swbuf_r+0xa0>)
 8004db4:	429c      	cmp	r4, r3
 8004db6:	bf08      	it	eq
 8004db8:	68ec      	ldreq	r4, [r5, #12]
 8004dba:	e7ca      	b.n	8004d52 <__swbuf_r+0x1a>
 8004dbc:	4621      	mov	r1, r4
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	f000 f81e 	bl	8004e00 <__swsetup_r>
 8004dc4:	2800      	cmp	r0, #0
 8004dc6:	d0cb      	beq.n	8004d60 <__swbuf_r+0x28>
 8004dc8:	f04f 37ff 	mov.w	r7, #4294967295
 8004dcc:	e7ea      	b.n	8004da4 <__swbuf_r+0x6c>
 8004dce:	bf00      	nop
 8004dd0:	08005350 	.word	0x08005350
 8004dd4:	08005370 	.word	0x08005370
 8004dd8:	08005330 	.word	0x08005330

08004ddc <_write_r>:
 8004ddc:	b538      	push	{r3, r4, r5, lr}
 8004dde:	4d07      	ldr	r5, [pc, #28]	; (8004dfc <_write_r+0x20>)
 8004de0:	4604      	mov	r4, r0
 8004de2:	4608      	mov	r0, r1
 8004de4:	4611      	mov	r1, r2
 8004de6:	2200      	movs	r2, #0
 8004de8:	602a      	str	r2, [r5, #0]
 8004dea:	461a      	mov	r2, r3
 8004dec:	f7fc f93f 	bl	800106e <_write>
 8004df0:	1c43      	adds	r3, r0, #1
 8004df2:	d102      	bne.n	8004dfa <_write_r+0x1e>
 8004df4:	682b      	ldr	r3, [r5, #0]
 8004df6:	b103      	cbz	r3, 8004dfa <_write_r+0x1e>
 8004df8:	6023      	str	r3, [r4, #0]
 8004dfa:	bd38      	pop	{r3, r4, r5, pc}
 8004dfc:	20000294 	.word	0x20000294

08004e00 <__swsetup_r>:
 8004e00:	4b32      	ldr	r3, [pc, #200]	; (8004ecc <__swsetup_r+0xcc>)
 8004e02:	b570      	push	{r4, r5, r6, lr}
 8004e04:	681d      	ldr	r5, [r3, #0]
 8004e06:	4606      	mov	r6, r0
 8004e08:	460c      	mov	r4, r1
 8004e0a:	b125      	cbz	r5, 8004e16 <__swsetup_r+0x16>
 8004e0c:	69ab      	ldr	r3, [r5, #24]
 8004e0e:	b913      	cbnz	r3, 8004e16 <__swsetup_r+0x16>
 8004e10:	4628      	mov	r0, r5
 8004e12:	f7ff fb55 	bl	80044c0 <__sinit>
 8004e16:	4b2e      	ldr	r3, [pc, #184]	; (8004ed0 <__swsetup_r+0xd0>)
 8004e18:	429c      	cmp	r4, r3
 8004e1a:	d10f      	bne.n	8004e3c <__swsetup_r+0x3c>
 8004e1c:	686c      	ldr	r4, [r5, #4]
 8004e1e:	89a3      	ldrh	r3, [r4, #12]
 8004e20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e24:	0719      	lsls	r1, r3, #28
 8004e26:	d42c      	bmi.n	8004e82 <__swsetup_r+0x82>
 8004e28:	06dd      	lsls	r5, r3, #27
 8004e2a:	d411      	bmi.n	8004e50 <__swsetup_r+0x50>
 8004e2c:	2309      	movs	r3, #9
 8004e2e:	6033      	str	r3, [r6, #0]
 8004e30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e34:	81a3      	strh	r3, [r4, #12]
 8004e36:	f04f 30ff 	mov.w	r0, #4294967295
 8004e3a:	e03e      	b.n	8004eba <__swsetup_r+0xba>
 8004e3c:	4b25      	ldr	r3, [pc, #148]	; (8004ed4 <__swsetup_r+0xd4>)
 8004e3e:	429c      	cmp	r4, r3
 8004e40:	d101      	bne.n	8004e46 <__swsetup_r+0x46>
 8004e42:	68ac      	ldr	r4, [r5, #8]
 8004e44:	e7eb      	b.n	8004e1e <__swsetup_r+0x1e>
 8004e46:	4b24      	ldr	r3, [pc, #144]	; (8004ed8 <__swsetup_r+0xd8>)
 8004e48:	429c      	cmp	r4, r3
 8004e4a:	bf08      	it	eq
 8004e4c:	68ec      	ldreq	r4, [r5, #12]
 8004e4e:	e7e6      	b.n	8004e1e <__swsetup_r+0x1e>
 8004e50:	0758      	lsls	r0, r3, #29
 8004e52:	d512      	bpl.n	8004e7a <__swsetup_r+0x7a>
 8004e54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e56:	b141      	cbz	r1, 8004e6a <__swsetup_r+0x6a>
 8004e58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e5c:	4299      	cmp	r1, r3
 8004e5e:	d002      	beq.n	8004e66 <__swsetup_r+0x66>
 8004e60:	4630      	mov	r0, r6
 8004e62:	f000 f98f 	bl	8005184 <_free_r>
 8004e66:	2300      	movs	r3, #0
 8004e68:	6363      	str	r3, [r4, #52]	; 0x34
 8004e6a:	89a3      	ldrh	r3, [r4, #12]
 8004e6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e70:	81a3      	strh	r3, [r4, #12]
 8004e72:	2300      	movs	r3, #0
 8004e74:	6063      	str	r3, [r4, #4]
 8004e76:	6923      	ldr	r3, [r4, #16]
 8004e78:	6023      	str	r3, [r4, #0]
 8004e7a:	89a3      	ldrh	r3, [r4, #12]
 8004e7c:	f043 0308 	orr.w	r3, r3, #8
 8004e80:	81a3      	strh	r3, [r4, #12]
 8004e82:	6923      	ldr	r3, [r4, #16]
 8004e84:	b94b      	cbnz	r3, 8004e9a <__swsetup_r+0x9a>
 8004e86:	89a3      	ldrh	r3, [r4, #12]
 8004e88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e90:	d003      	beq.n	8004e9a <__swsetup_r+0x9a>
 8004e92:	4621      	mov	r1, r4
 8004e94:	4630      	mov	r0, r6
 8004e96:	f000 f929 	bl	80050ec <__smakebuf_r>
 8004e9a:	89a0      	ldrh	r0, [r4, #12]
 8004e9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ea0:	f010 0301 	ands.w	r3, r0, #1
 8004ea4:	d00a      	beq.n	8004ebc <__swsetup_r+0xbc>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60a3      	str	r3, [r4, #8]
 8004eaa:	6963      	ldr	r3, [r4, #20]
 8004eac:	425b      	negs	r3, r3
 8004eae:	61a3      	str	r3, [r4, #24]
 8004eb0:	6923      	ldr	r3, [r4, #16]
 8004eb2:	b943      	cbnz	r3, 8004ec6 <__swsetup_r+0xc6>
 8004eb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004eb8:	d1ba      	bne.n	8004e30 <__swsetup_r+0x30>
 8004eba:	bd70      	pop	{r4, r5, r6, pc}
 8004ebc:	0781      	lsls	r1, r0, #30
 8004ebe:	bf58      	it	pl
 8004ec0:	6963      	ldrpl	r3, [r4, #20]
 8004ec2:	60a3      	str	r3, [r4, #8]
 8004ec4:	e7f4      	b.n	8004eb0 <__swsetup_r+0xb0>
 8004ec6:	2000      	movs	r0, #0
 8004ec8:	e7f7      	b.n	8004eba <__swsetup_r+0xba>
 8004eca:	bf00      	nop
 8004ecc:	20000044 	.word	0x20000044
 8004ed0:	08005350 	.word	0x08005350
 8004ed4:	08005370 	.word	0x08005370
 8004ed8:	08005330 	.word	0x08005330

08004edc <_close_r>:
 8004edc:	b538      	push	{r3, r4, r5, lr}
 8004ede:	4d06      	ldr	r5, [pc, #24]	; (8004ef8 <_close_r+0x1c>)
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	4604      	mov	r4, r0
 8004ee4:	4608      	mov	r0, r1
 8004ee6:	602b      	str	r3, [r5, #0]
 8004ee8:	f7fc f8dd 	bl	80010a6 <_close>
 8004eec:	1c43      	adds	r3, r0, #1
 8004eee:	d102      	bne.n	8004ef6 <_close_r+0x1a>
 8004ef0:	682b      	ldr	r3, [r5, #0]
 8004ef2:	b103      	cbz	r3, 8004ef6 <_close_r+0x1a>
 8004ef4:	6023      	str	r3, [r4, #0]
 8004ef6:	bd38      	pop	{r3, r4, r5, pc}
 8004ef8:	20000294 	.word	0x20000294

08004efc <__sflush_r>:
 8004efc:	898a      	ldrh	r2, [r1, #12]
 8004efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f02:	4605      	mov	r5, r0
 8004f04:	0710      	lsls	r0, r2, #28
 8004f06:	460c      	mov	r4, r1
 8004f08:	d458      	bmi.n	8004fbc <__sflush_r+0xc0>
 8004f0a:	684b      	ldr	r3, [r1, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	dc05      	bgt.n	8004f1c <__sflush_r+0x20>
 8004f10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	dc02      	bgt.n	8004f1c <__sflush_r+0x20>
 8004f16:	2000      	movs	r0, #0
 8004f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f1e:	2e00      	cmp	r6, #0
 8004f20:	d0f9      	beq.n	8004f16 <__sflush_r+0x1a>
 8004f22:	2300      	movs	r3, #0
 8004f24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f28:	682f      	ldr	r7, [r5, #0]
 8004f2a:	602b      	str	r3, [r5, #0]
 8004f2c:	d032      	beq.n	8004f94 <__sflush_r+0x98>
 8004f2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f30:	89a3      	ldrh	r3, [r4, #12]
 8004f32:	075a      	lsls	r2, r3, #29
 8004f34:	d505      	bpl.n	8004f42 <__sflush_r+0x46>
 8004f36:	6863      	ldr	r3, [r4, #4]
 8004f38:	1ac0      	subs	r0, r0, r3
 8004f3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f3c:	b10b      	cbz	r3, 8004f42 <__sflush_r+0x46>
 8004f3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f40:	1ac0      	subs	r0, r0, r3
 8004f42:	2300      	movs	r3, #0
 8004f44:	4602      	mov	r2, r0
 8004f46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f48:	6a21      	ldr	r1, [r4, #32]
 8004f4a:	4628      	mov	r0, r5
 8004f4c:	47b0      	blx	r6
 8004f4e:	1c43      	adds	r3, r0, #1
 8004f50:	89a3      	ldrh	r3, [r4, #12]
 8004f52:	d106      	bne.n	8004f62 <__sflush_r+0x66>
 8004f54:	6829      	ldr	r1, [r5, #0]
 8004f56:	291d      	cmp	r1, #29
 8004f58:	d82c      	bhi.n	8004fb4 <__sflush_r+0xb8>
 8004f5a:	4a2a      	ldr	r2, [pc, #168]	; (8005004 <__sflush_r+0x108>)
 8004f5c:	40ca      	lsrs	r2, r1
 8004f5e:	07d6      	lsls	r6, r2, #31
 8004f60:	d528      	bpl.n	8004fb4 <__sflush_r+0xb8>
 8004f62:	2200      	movs	r2, #0
 8004f64:	6062      	str	r2, [r4, #4]
 8004f66:	04d9      	lsls	r1, r3, #19
 8004f68:	6922      	ldr	r2, [r4, #16]
 8004f6a:	6022      	str	r2, [r4, #0]
 8004f6c:	d504      	bpl.n	8004f78 <__sflush_r+0x7c>
 8004f6e:	1c42      	adds	r2, r0, #1
 8004f70:	d101      	bne.n	8004f76 <__sflush_r+0x7a>
 8004f72:	682b      	ldr	r3, [r5, #0]
 8004f74:	b903      	cbnz	r3, 8004f78 <__sflush_r+0x7c>
 8004f76:	6560      	str	r0, [r4, #84]	; 0x54
 8004f78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f7a:	602f      	str	r7, [r5, #0]
 8004f7c:	2900      	cmp	r1, #0
 8004f7e:	d0ca      	beq.n	8004f16 <__sflush_r+0x1a>
 8004f80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f84:	4299      	cmp	r1, r3
 8004f86:	d002      	beq.n	8004f8e <__sflush_r+0x92>
 8004f88:	4628      	mov	r0, r5
 8004f8a:	f000 f8fb 	bl	8005184 <_free_r>
 8004f8e:	2000      	movs	r0, #0
 8004f90:	6360      	str	r0, [r4, #52]	; 0x34
 8004f92:	e7c1      	b.n	8004f18 <__sflush_r+0x1c>
 8004f94:	6a21      	ldr	r1, [r4, #32]
 8004f96:	2301      	movs	r3, #1
 8004f98:	4628      	mov	r0, r5
 8004f9a:	47b0      	blx	r6
 8004f9c:	1c41      	adds	r1, r0, #1
 8004f9e:	d1c7      	bne.n	8004f30 <__sflush_r+0x34>
 8004fa0:	682b      	ldr	r3, [r5, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d0c4      	beq.n	8004f30 <__sflush_r+0x34>
 8004fa6:	2b1d      	cmp	r3, #29
 8004fa8:	d001      	beq.n	8004fae <__sflush_r+0xb2>
 8004faa:	2b16      	cmp	r3, #22
 8004fac:	d101      	bne.n	8004fb2 <__sflush_r+0xb6>
 8004fae:	602f      	str	r7, [r5, #0]
 8004fb0:	e7b1      	b.n	8004f16 <__sflush_r+0x1a>
 8004fb2:	89a3      	ldrh	r3, [r4, #12]
 8004fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fb8:	81a3      	strh	r3, [r4, #12]
 8004fba:	e7ad      	b.n	8004f18 <__sflush_r+0x1c>
 8004fbc:	690f      	ldr	r7, [r1, #16]
 8004fbe:	2f00      	cmp	r7, #0
 8004fc0:	d0a9      	beq.n	8004f16 <__sflush_r+0x1a>
 8004fc2:	0793      	lsls	r3, r2, #30
 8004fc4:	680e      	ldr	r6, [r1, #0]
 8004fc6:	bf08      	it	eq
 8004fc8:	694b      	ldreq	r3, [r1, #20]
 8004fca:	600f      	str	r7, [r1, #0]
 8004fcc:	bf18      	it	ne
 8004fce:	2300      	movne	r3, #0
 8004fd0:	eba6 0807 	sub.w	r8, r6, r7
 8004fd4:	608b      	str	r3, [r1, #8]
 8004fd6:	f1b8 0f00 	cmp.w	r8, #0
 8004fda:	dd9c      	ble.n	8004f16 <__sflush_r+0x1a>
 8004fdc:	6a21      	ldr	r1, [r4, #32]
 8004fde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004fe0:	4643      	mov	r3, r8
 8004fe2:	463a      	mov	r2, r7
 8004fe4:	4628      	mov	r0, r5
 8004fe6:	47b0      	blx	r6
 8004fe8:	2800      	cmp	r0, #0
 8004fea:	dc06      	bgt.n	8004ffa <__sflush_r+0xfe>
 8004fec:	89a3      	ldrh	r3, [r4, #12]
 8004fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ff2:	81a3      	strh	r3, [r4, #12]
 8004ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff8:	e78e      	b.n	8004f18 <__sflush_r+0x1c>
 8004ffa:	4407      	add	r7, r0
 8004ffc:	eba8 0800 	sub.w	r8, r8, r0
 8005000:	e7e9      	b.n	8004fd6 <__sflush_r+0xda>
 8005002:	bf00      	nop
 8005004:	20400001 	.word	0x20400001

08005008 <_fflush_r>:
 8005008:	b538      	push	{r3, r4, r5, lr}
 800500a:	690b      	ldr	r3, [r1, #16]
 800500c:	4605      	mov	r5, r0
 800500e:	460c      	mov	r4, r1
 8005010:	b913      	cbnz	r3, 8005018 <_fflush_r+0x10>
 8005012:	2500      	movs	r5, #0
 8005014:	4628      	mov	r0, r5
 8005016:	bd38      	pop	{r3, r4, r5, pc}
 8005018:	b118      	cbz	r0, 8005022 <_fflush_r+0x1a>
 800501a:	6983      	ldr	r3, [r0, #24]
 800501c:	b90b      	cbnz	r3, 8005022 <_fflush_r+0x1a>
 800501e:	f7ff fa4f 	bl	80044c0 <__sinit>
 8005022:	4b14      	ldr	r3, [pc, #80]	; (8005074 <_fflush_r+0x6c>)
 8005024:	429c      	cmp	r4, r3
 8005026:	d11b      	bne.n	8005060 <_fflush_r+0x58>
 8005028:	686c      	ldr	r4, [r5, #4]
 800502a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0ef      	beq.n	8005012 <_fflush_r+0xa>
 8005032:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005034:	07d0      	lsls	r0, r2, #31
 8005036:	d404      	bmi.n	8005042 <_fflush_r+0x3a>
 8005038:	0599      	lsls	r1, r3, #22
 800503a:	d402      	bmi.n	8005042 <_fflush_r+0x3a>
 800503c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800503e:	f7ff fadd 	bl	80045fc <__retarget_lock_acquire_recursive>
 8005042:	4628      	mov	r0, r5
 8005044:	4621      	mov	r1, r4
 8005046:	f7ff ff59 	bl	8004efc <__sflush_r>
 800504a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800504c:	07da      	lsls	r2, r3, #31
 800504e:	4605      	mov	r5, r0
 8005050:	d4e0      	bmi.n	8005014 <_fflush_r+0xc>
 8005052:	89a3      	ldrh	r3, [r4, #12]
 8005054:	059b      	lsls	r3, r3, #22
 8005056:	d4dd      	bmi.n	8005014 <_fflush_r+0xc>
 8005058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800505a:	f7ff fad0 	bl	80045fe <__retarget_lock_release_recursive>
 800505e:	e7d9      	b.n	8005014 <_fflush_r+0xc>
 8005060:	4b05      	ldr	r3, [pc, #20]	; (8005078 <_fflush_r+0x70>)
 8005062:	429c      	cmp	r4, r3
 8005064:	d101      	bne.n	800506a <_fflush_r+0x62>
 8005066:	68ac      	ldr	r4, [r5, #8]
 8005068:	e7df      	b.n	800502a <_fflush_r+0x22>
 800506a:	4b04      	ldr	r3, [pc, #16]	; (800507c <_fflush_r+0x74>)
 800506c:	429c      	cmp	r4, r3
 800506e:	bf08      	it	eq
 8005070:	68ec      	ldreq	r4, [r5, #12]
 8005072:	e7da      	b.n	800502a <_fflush_r+0x22>
 8005074:	08005350 	.word	0x08005350
 8005078:	08005370 	.word	0x08005370
 800507c:	08005330 	.word	0x08005330

08005080 <_lseek_r>:
 8005080:	b538      	push	{r3, r4, r5, lr}
 8005082:	4d07      	ldr	r5, [pc, #28]	; (80050a0 <_lseek_r+0x20>)
 8005084:	4604      	mov	r4, r0
 8005086:	4608      	mov	r0, r1
 8005088:	4611      	mov	r1, r2
 800508a:	2200      	movs	r2, #0
 800508c:	602a      	str	r2, [r5, #0]
 800508e:	461a      	mov	r2, r3
 8005090:	f7fc f830 	bl	80010f4 <_lseek>
 8005094:	1c43      	adds	r3, r0, #1
 8005096:	d102      	bne.n	800509e <_lseek_r+0x1e>
 8005098:	682b      	ldr	r3, [r5, #0]
 800509a:	b103      	cbz	r3, 800509e <_lseek_r+0x1e>
 800509c:	6023      	str	r3, [r4, #0]
 800509e:	bd38      	pop	{r3, r4, r5, pc}
 80050a0:	20000294 	.word	0x20000294

080050a4 <__swhatbuf_r>:
 80050a4:	b570      	push	{r4, r5, r6, lr}
 80050a6:	460e      	mov	r6, r1
 80050a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050ac:	2900      	cmp	r1, #0
 80050ae:	b096      	sub	sp, #88	; 0x58
 80050b0:	4614      	mov	r4, r2
 80050b2:	461d      	mov	r5, r3
 80050b4:	da07      	bge.n	80050c6 <__swhatbuf_r+0x22>
 80050b6:	2300      	movs	r3, #0
 80050b8:	602b      	str	r3, [r5, #0]
 80050ba:	89b3      	ldrh	r3, [r6, #12]
 80050bc:	061a      	lsls	r2, r3, #24
 80050be:	d410      	bmi.n	80050e2 <__swhatbuf_r+0x3e>
 80050c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050c4:	e00e      	b.n	80050e4 <__swhatbuf_r+0x40>
 80050c6:	466a      	mov	r2, sp
 80050c8:	f000 f8be 	bl	8005248 <_fstat_r>
 80050cc:	2800      	cmp	r0, #0
 80050ce:	dbf2      	blt.n	80050b6 <__swhatbuf_r+0x12>
 80050d0:	9a01      	ldr	r2, [sp, #4]
 80050d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80050d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80050da:	425a      	negs	r2, r3
 80050dc:	415a      	adcs	r2, r3
 80050de:	602a      	str	r2, [r5, #0]
 80050e0:	e7ee      	b.n	80050c0 <__swhatbuf_r+0x1c>
 80050e2:	2340      	movs	r3, #64	; 0x40
 80050e4:	2000      	movs	r0, #0
 80050e6:	6023      	str	r3, [r4, #0]
 80050e8:	b016      	add	sp, #88	; 0x58
 80050ea:	bd70      	pop	{r4, r5, r6, pc}

080050ec <__smakebuf_r>:
 80050ec:	898b      	ldrh	r3, [r1, #12]
 80050ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80050f0:	079d      	lsls	r5, r3, #30
 80050f2:	4606      	mov	r6, r0
 80050f4:	460c      	mov	r4, r1
 80050f6:	d507      	bpl.n	8005108 <__smakebuf_r+0x1c>
 80050f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80050fc:	6023      	str	r3, [r4, #0]
 80050fe:	6123      	str	r3, [r4, #16]
 8005100:	2301      	movs	r3, #1
 8005102:	6163      	str	r3, [r4, #20]
 8005104:	b002      	add	sp, #8
 8005106:	bd70      	pop	{r4, r5, r6, pc}
 8005108:	ab01      	add	r3, sp, #4
 800510a:	466a      	mov	r2, sp
 800510c:	f7ff ffca 	bl	80050a4 <__swhatbuf_r>
 8005110:	9900      	ldr	r1, [sp, #0]
 8005112:	4605      	mov	r5, r0
 8005114:	4630      	mov	r0, r6
 8005116:	f7ff fa73 	bl	8004600 <_malloc_r>
 800511a:	b948      	cbnz	r0, 8005130 <__smakebuf_r+0x44>
 800511c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005120:	059a      	lsls	r2, r3, #22
 8005122:	d4ef      	bmi.n	8005104 <__smakebuf_r+0x18>
 8005124:	f023 0303 	bic.w	r3, r3, #3
 8005128:	f043 0302 	orr.w	r3, r3, #2
 800512c:	81a3      	strh	r3, [r4, #12]
 800512e:	e7e3      	b.n	80050f8 <__smakebuf_r+0xc>
 8005130:	4b0d      	ldr	r3, [pc, #52]	; (8005168 <__smakebuf_r+0x7c>)
 8005132:	62b3      	str	r3, [r6, #40]	; 0x28
 8005134:	89a3      	ldrh	r3, [r4, #12]
 8005136:	6020      	str	r0, [r4, #0]
 8005138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800513c:	81a3      	strh	r3, [r4, #12]
 800513e:	9b00      	ldr	r3, [sp, #0]
 8005140:	6163      	str	r3, [r4, #20]
 8005142:	9b01      	ldr	r3, [sp, #4]
 8005144:	6120      	str	r0, [r4, #16]
 8005146:	b15b      	cbz	r3, 8005160 <__smakebuf_r+0x74>
 8005148:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800514c:	4630      	mov	r0, r6
 800514e:	f000 f88d 	bl	800526c <_isatty_r>
 8005152:	b128      	cbz	r0, 8005160 <__smakebuf_r+0x74>
 8005154:	89a3      	ldrh	r3, [r4, #12]
 8005156:	f023 0303 	bic.w	r3, r3, #3
 800515a:	f043 0301 	orr.w	r3, r3, #1
 800515e:	81a3      	strh	r3, [r4, #12]
 8005160:	89a0      	ldrh	r0, [r4, #12]
 8005162:	4305      	orrs	r5, r0
 8005164:	81a5      	strh	r5, [r4, #12]
 8005166:	e7cd      	b.n	8005104 <__smakebuf_r+0x18>
 8005168:	08004459 	.word	0x08004459

0800516c <__malloc_lock>:
 800516c:	4801      	ldr	r0, [pc, #4]	; (8005174 <__malloc_lock+0x8>)
 800516e:	f7ff ba45 	b.w	80045fc <__retarget_lock_acquire_recursive>
 8005172:	bf00      	nop
 8005174:	2000028c 	.word	0x2000028c

08005178 <__malloc_unlock>:
 8005178:	4801      	ldr	r0, [pc, #4]	; (8005180 <__malloc_unlock+0x8>)
 800517a:	f7ff ba40 	b.w	80045fe <__retarget_lock_release_recursive>
 800517e:	bf00      	nop
 8005180:	2000028c 	.word	0x2000028c

08005184 <_free_r>:
 8005184:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005186:	2900      	cmp	r1, #0
 8005188:	d048      	beq.n	800521c <_free_r+0x98>
 800518a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800518e:	9001      	str	r0, [sp, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	f1a1 0404 	sub.w	r4, r1, #4
 8005196:	bfb8      	it	lt
 8005198:	18e4      	addlt	r4, r4, r3
 800519a:	f7ff ffe7 	bl	800516c <__malloc_lock>
 800519e:	4a20      	ldr	r2, [pc, #128]	; (8005220 <_free_r+0x9c>)
 80051a0:	9801      	ldr	r0, [sp, #4]
 80051a2:	6813      	ldr	r3, [r2, #0]
 80051a4:	4615      	mov	r5, r2
 80051a6:	b933      	cbnz	r3, 80051b6 <_free_r+0x32>
 80051a8:	6063      	str	r3, [r4, #4]
 80051aa:	6014      	str	r4, [r2, #0]
 80051ac:	b003      	add	sp, #12
 80051ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80051b2:	f7ff bfe1 	b.w	8005178 <__malloc_unlock>
 80051b6:	42a3      	cmp	r3, r4
 80051b8:	d90b      	bls.n	80051d2 <_free_r+0x4e>
 80051ba:	6821      	ldr	r1, [r4, #0]
 80051bc:	1862      	adds	r2, r4, r1
 80051be:	4293      	cmp	r3, r2
 80051c0:	bf04      	itt	eq
 80051c2:	681a      	ldreq	r2, [r3, #0]
 80051c4:	685b      	ldreq	r3, [r3, #4]
 80051c6:	6063      	str	r3, [r4, #4]
 80051c8:	bf04      	itt	eq
 80051ca:	1852      	addeq	r2, r2, r1
 80051cc:	6022      	streq	r2, [r4, #0]
 80051ce:	602c      	str	r4, [r5, #0]
 80051d0:	e7ec      	b.n	80051ac <_free_r+0x28>
 80051d2:	461a      	mov	r2, r3
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	b10b      	cbz	r3, 80051dc <_free_r+0x58>
 80051d8:	42a3      	cmp	r3, r4
 80051da:	d9fa      	bls.n	80051d2 <_free_r+0x4e>
 80051dc:	6811      	ldr	r1, [r2, #0]
 80051de:	1855      	adds	r5, r2, r1
 80051e0:	42a5      	cmp	r5, r4
 80051e2:	d10b      	bne.n	80051fc <_free_r+0x78>
 80051e4:	6824      	ldr	r4, [r4, #0]
 80051e6:	4421      	add	r1, r4
 80051e8:	1854      	adds	r4, r2, r1
 80051ea:	42a3      	cmp	r3, r4
 80051ec:	6011      	str	r1, [r2, #0]
 80051ee:	d1dd      	bne.n	80051ac <_free_r+0x28>
 80051f0:	681c      	ldr	r4, [r3, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	6053      	str	r3, [r2, #4]
 80051f6:	4421      	add	r1, r4
 80051f8:	6011      	str	r1, [r2, #0]
 80051fa:	e7d7      	b.n	80051ac <_free_r+0x28>
 80051fc:	d902      	bls.n	8005204 <_free_r+0x80>
 80051fe:	230c      	movs	r3, #12
 8005200:	6003      	str	r3, [r0, #0]
 8005202:	e7d3      	b.n	80051ac <_free_r+0x28>
 8005204:	6825      	ldr	r5, [r4, #0]
 8005206:	1961      	adds	r1, r4, r5
 8005208:	428b      	cmp	r3, r1
 800520a:	bf04      	itt	eq
 800520c:	6819      	ldreq	r1, [r3, #0]
 800520e:	685b      	ldreq	r3, [r3, #4]
 8005210:	6063      	str	r3, [r4, #4]
 8005212:	bf04      	itt	eq
 8005214:	1949      	addeq	r1, r1, r5
 8005216:	6021      	streq	r1, [r4, #0]
 8005218:	6054      	str	r4, [r2, #4]
 800521a:	e7c7      	b.n	80051ac <_free_r+0x28>
 800521c:	b003      	add	sp, #12
 800521e:	bd30      	pop	{r4, r5, pc}
 8005220:	200000f0 	.word	0x200000f0

08005224 <_read_r>:
 8005224:	b538      	push	{r3, r4, r5, lr}
 8005226:	4d07      	ldr	r5, [pc, #28]	; (8005244 <_read_r+0x20>)
 8005228:	4604      	mov	r4, r0
 800522a:	4608      	mov	r0, r1
 800522c:	4611      	mov	r1, r2
 800522e:	2200      	movs	r2, #0
 8005230:	602a      	str	r2, [r5, #0]
 8005232:	461a      	mov	r2, r3
 8005234:	f7fb fefe 	bl	8001034 <_read>
 8005238:	1c43      	adds	r3, r0, #1
 800523a:	d102      	bne.n	8005242 <_read_r+0x1e>
 800523c:	682b      	ldr	r3, [r5, #0]
 800523e:	b103      	cbz	r3, 8005242 <_read_r+0x1e>
 8005240:	6023      	str	r3, [r4, #0]
 8005242:	bd38      	pop	{r3, r4, r5, pc}
 8005244:	20000294 	.word	0x20000294

08005248 <_fstat_r>:
 8005248:	b538      	push	{r3, r4, r5, lr}
 800524a:	4d07      	ldr	r5, [pc, #28]	; (8005268 <_fstat_r+0x20>)
 800524c:	2300      	movs	r3, #0
 800524e:	4604      	mov	r4, r0
 8005250:	4608      	mov	r0, r1
 8005252:	4611      	mov	r1, r2
 8005254:	602b      	str	r3, [r5, #0]
 8005256:	f7fb ff32 	bl	80010be <_fstat>
 800525a:	1c43      	adds	r3, r0, #1
 800525c:	d102      	bne.n	8005264 <_fstat_r+0x1c>
 800525e:	682b      	ldr	r3, [r5, #0]
 8005260:	b103      	cbz	r3, 8005264 <_fstat_r+0x1c>
 8005262:	6023      	str	r3, [r4, #0]
 8005264:	bd38      	pop	{r3, r4, r5, pc}
 8005266:	bf00      	nop
 8005268:	20000294 	.word	0x20000294

0800526c <_isatty_r>:
 800526c:	b538      	push	{r3, r4, r5, lr}
 800526e:	4d06      	ldr	r5, [pc, #24]	; (8005288 <_isatty_r+0x1c>)
 8005270:	2300      	movs	r3, #0
 8005272:	4604      	mov	r4, r0
 8005274:	4608      	mov	r0, r1
 8005276:	602b      	str	r3, [r5, #0]
 8005278:	f7fb ff31 	bl	80010de <_isatty>
 800527c:	1c43      	adds	r3, r0, #1
 800527e:	d102      	bne.n	8005286 <_isatty_r+0x1a>
 8005280:	682b      	ldr	r3, [r5, #0]
 8005282:	b103      	cbz	r3, 8005286 <_isatty_r+0x1a>
 8005284:	6023      	str	r3, [r4, #0]
 8005286:	bd38      	pop	{r3, r4, r5, pc}
 8005288:	20000294 	.word	0x20000294

0800528c <_init>:
 800528c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800528e:	bf00      	nop
 8005290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005292:	bc08      	pop	{r3}
 8005294:	469e      	mov	lr, r3
 8005296:	4770      	bx	lr

08005298 <_fini>:
 8005298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529a:	bf00      	nop
 800529c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800529e:	bc08      	pop	{r3}
 80052a0:	469e      	mov	lr, r3
 80052a2:	4770      	bx	lr
