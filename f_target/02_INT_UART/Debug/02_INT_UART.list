
02_INT_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a70  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004bf8  08004bf8  00014bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c40  08004c40  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08004c40  08004c40  00014c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c48  08004c48  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c48  08004c48  00014c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c4c  08004c4c  00014c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08004c50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000024  08004c74  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08004c74  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013017  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000219f  00000000  00000000  0003306b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  00035210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e58  00000000  00000000  00036130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000264ed  00000000  00000000  00036f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000119ae  00000000  00000000  0005d475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f06d4  00000000  00000000  0006ee23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015f4f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fac  00000000  00000000  0015f54c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004be0 	.word	0x08004be0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08004be0 	.word	0x08004be0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */
uint8_t msg[] = "Hi, Welcome to UART!!\r\n";
uint8_t UART1_rxBuffer[12] = {0};
uint8_t  size1=0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	 HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 12); //restart the interrupt
 80004d8:	220c      	movs	r2, #12
 80004da:	4904      	ldr	r1, [pc, #16]	; (80004ec <HAL_UART_RxCpltCallback+0x1c>)
 80004dc:	4804      	ldr	r0, [pc, #16]	; (80004f0 <HAL_UART_RxCpltCallback+0x20>)
 80004de:	f003 f8e9 	bl	80036b4 <HAL_UART_Receive_IT>
}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	20000040 	.word	0x20000040
 80004f0:	20000050 	.word	0x20000050

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fca5 	bl	8000e46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f840 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f90e 	bl	8000720 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000504:	f000 f8dc 	bl	80006c0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000508:	f000 f88c 	bl	8000624 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart1, msg, sizeof(msg), 1000);
 800050c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000510:	2218      	movs	r2, #24
 8000512:	4917      	ldr	r1, [pc, #92]	; (8000570 <main+0x7c>)
 8000514:	4817      	ldr	r0, [pc, #92]	; (8000574 <main+0x80>)
 8000516:	f003 f839 	bl	800358c <HAL_UART_Transmit>

  HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 12);
 800051a:	220c      	movs	r2, #12
 800051c:	4916      	ldr	r1, [pc, #88]	; (8000578 <main+0x84>)
 800051e:	4815      	ldr	r0, [pc, #84]	; (8000574 <main+0x80>)
 8000520:	f003 f8c8 	bl	80036b4 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  size1 = strlen(UART1_rxBuffer);
 8000524:	4814      	ldr	r0, [pc, #80]	; (8000578 <main+0x84>)
 8000526:	f7ff fe4f 	bl	80001c8 <strlen>
 800052a:	4603      	mov	r3, r0
 800052c:	b2da      	uxtb	r2, r3
 800052e:	4b13      	ldr	r3, [pc, #76]	; (800057c <main+0x88>)
 8000530:	701a      	strb	r2, [r3, #0]
	  if ((UART1_rxBuffer[size1] == '\r') || (size1 == 12))
 8000532:	4b12      	ldr	r3, [pc, #72]	; (800057c <main+0x88>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	461a      	mov	r2, r3
 8000538:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <main+0x84>)
 800053a:	5c9b      	ldrb	r3, [r3, r2]
 800053c:	2b0d      	cmp	r3, #13
 800053e:	d003      	beq.n	8000548 <main+0x54>
 8000540:	4b0e      	ldr	r3, [pc, #56]	; (800057c <main+0x88>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b0c      	cmp	r3, #12
 8000546:	d1ed      	bne.n	8000524 <main+0x30>
	 		  {
	 			  UART1_rxBuffer[size1+1] = '\n';
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <main+0x88>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	3301      	adds	r3, #1
 800054e:	4a0a      	ldr	r2, [pc, #40]	; (8000578 <main+0x84>)
 8000550:	210a      	movs	r1, #10
 8000552:	54d1      	strb	r1, [r2, r3]
	 			  HAL_UART_Transmit(&huart1, UART1_rxBuffer, 12, 50);
 8000554:	2332      	movs	r3, #50	; 0x32
 8000556:	220c      	movs	r2, #12
 8000558:	4907      	ldr	r1, [pc, #28]	; (8000578 <main+0x84>)
 800055a:	4806      	ldr	r0, [pc, #24]	; (8000574 <main+0x80>)
 800055c:	f003 f816 	bl	800358c <HAL_UART_Transmit>
	 			  memset(UART1_rxBuffer, 0, size1);
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <main+0x88>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	461a      	mov	r2, r3
 8000566:	2100      	movs	r1, #0
 8000568:	4803      	ldr	r0, [pc, #12]	; (8000578 <main+0x84>)
 800056a:	f004 fb31 	bl	8004bd0 <memset>
  {
 800056e:	e7d9      	b.n	8000524 <main+0x30>
 8000570:	20000000 	.word	0x20000000
 8000574:	20000050 	.word	0x20000050
 8000578:	20000040 	.word	0x20000040
 800057c:	2000004c 	.word	0x2000004c

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b096      	sub	sp, #88	; 0x58
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	2244      	movs	r2, #68	; 0x44
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f004 fb1e 	bl	8004bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	463b      	mov	r3, r7
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005a6:	f001 f847 	bl	8001638 <HAL_PWREx_ControlVoltageScaling>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005b0:	f000 face 	bl	8000b50 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005b4:	2310      	movs	r3, #16
 80005b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005b8:	2301      	movs	r3, #1
 80005ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005c0:	2360      	movs	r3, #96	; 0x60
 80005c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c4:	2302      	movs	r3, #2
 80005c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005c8:	2301      	movs	r3, #1
 80005ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005cc:	2301      	movs	r3, #1
 80005ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005d0:	2328      	movs	r3, #40	; 0x28
 80005d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005d4:	2307      	movs	r3, #7
 80005d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005d8:	2302      	movs	r3, #2
 80005da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005dc:	2302      	movs	r3, #2
 80005de:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	4618      	mov	r0, r3
 80005e6:	f001 f87d 	bl	80016e4 <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005f0:	f000 faae 	bl	8000b50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f8:	2303      	movs	r3, #3
 80005fa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000608:	463b      	mov	r3, r7
 800060a:	2104      	movs	r1, #4
 800060c:	4618      	mov	r0, r3
 800060e:	f001 fc43 	bl	8001e98 <HAL_RCC_ClockConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000618:	f000 fa9a 	bl	8000b50 <Error_Handler>
  }
}
 800061c:	bf00      	nop
 800061e:	3758      	adds	r7, #88	; 0x58
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800062a:	f107 0310 	add.w	r3, r7, #16
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000642:	4b1e      	ldr	r3, [pc, #120]	; (80006bc <MX_TIM2_Init+0x98>)
 8000644:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000648:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 800064a:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <MX_TIM2_Init+0x98>)
 800064c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000650:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000652:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <MX_TIM2_Init+0x98>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000658:	4b18      	ldr	r3, [pc, #96]	; (80006bc <MX_TIM2_Init+0x98>)
 800065a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800065e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000660:	4b16      	ldr	r3, [pc, #88]	; (80006bc <MX_TIM2_Init+0x98>)
 8000662:	2200      	movs	r2, #0
 8000664:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000666:	4b15      	ldr	r3, [pc, #84]	; (80006bc <MX_TIM2_Init+0x98>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800066c:	4813      	ldr	r0, [pc, #76]	; (80006bc <MX_TIM2_Init+0x98>)
 800066e:	f002 faf3 	bl	8002c58 <HAL_TIM_Base_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000678:	f000 fa6a 	bl	8000b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800067c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000680:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000682:	f107 0310 	add.w	r3, r7, #16
 8000686:	4619      	mov	r1, r3
 8000688:	480c      	ldr	r0, [pc, #48]	; (80006bc <MX_TIM2_Init+0x98>)
 800068a:	f002 fc5b 	bl	8002f44 <HAL_TIM_ConfigClockSource>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000694:	f000 fa5c 	bl	8000b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	4619      	mov	r1, r3
 80006a4:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_TIM2_Init+0x98>)
 80006a6:	f002 fe7d 	bl	80033a4 <HAL_TIMEx_MasterConfigSynchronization>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80006b0:	f000 fa4e 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	3720      	adds	r7, #32
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	200000d4 	.word	0x200000d4

080006c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006c4:	4b14      	ldr	r3, [pc, #80]	; (8000718 <MX_USART1_UART_Init+0x58>)
 80006c6:	4a15      	ldr	r2, [pc, #84]	; (800071c <MX_USART1_UART_Init+0x5c>)
 80006c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006ca:	4b13      	ldr	r3, [pc, #76]	; (8000718 <MX_USART1_UART_Init+0x58>)
 80006cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_USART1_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_USART1_UART_Init+0x58>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_USART1_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_USART1_UART_Init+0x58>)
 80006e6:	220c      	movs	r2, #12
 80006e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <MX_USART1_UART_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f0:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_USART1_UART_Init+0x58>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <MX_USART1_UART_Init+0x58>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_USART1_UART_Init+0x58>)
 80006fe:	2200      	movs	r2, #0
 8000700:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_USART1_UART_Init+0x58>)
 8000704:	f002 fef4 	bl	80034f0 <HAL_UART_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800070e:	f000 fa1f 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000050 	.word	0x20000050
 800071c:	40013800 	.word	0x40013800

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	; 0x28
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000736:	4bbc      	ldr	r3, [pc, #752]	; (8000a28 <MX_GPIO_Init+0x308>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	4abb      	ldr	r2, [pc, #748]	; (8000a28 <MX_GPIO_Init+0x308>)
 800073c:	f043 0310 	orr.w	r3, r3, #16
 8000740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000742:	4bb9      	ldr	r3, [pc, #740]	; (8000a28 <MX_GPIO_Init+0x308>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	f003 0310 	and.w	r3, r3, #16
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	4bb6      	ldr	r3, [pc, #728]	; (8000a28 <MX_GPIO_Init+0x308>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	4ab5      	ldr	r2, [pc, #724]	; (8000a28 <MX_GPIO_Init+0x308>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075a:	4bb3      	ldr	r3, [pc, #716]	; (8000a28 <MX_GPIO_Init+0x308>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4bb0      	ldr	r3, [pc, #704]	; (8000a28 <MX_GPIO_Init+0x308>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4aaf      	ldr	r2, [pc, #700]	; (8000a28 <MX_GPIO_Init+0x308>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000772:	4bad      	ldr	r3, [pc, #692]	; (8000a28 <MX_GPIO_Init+0x308>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	4baa      	ldr	r3, [pc, #680]	; (8000a28 <MX_GPIO_Init+0x308>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	4aa9      	ldr	r2, [pc, #676]	; (8000a28 <MX_GPIO_Init+0x308>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078a:	4ba7      	ldr	r3, [pc, #668]	; (8000a28 <MX_GPIO_Init+0x308>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000796:	4ba4      	ldr	r3, [pc, #656]	; (8000a28 <MX_GPIO_Init+0x308>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	4aa3      	ldr	r2, [pc, #652]	; (8000a28 <MX_GPIO_Init+0x308>)
 800079c:	f043 0308 	orr.w	r3, r3, #8
 80007a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a2:	4ba1      	ldr	r3, [pc, #644]	; (8000a28 <MX_GPIO_Init+0x308>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	f003 0308 	and.w	r3, r3, #8
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 718a 	mov.w	r1, #276	; 0x114
 80007b4:	489d      	ldr	r0, [pc, #628]	; (8000a2c <MX_GPIO_Init+0x30c>)
 80007b6:	f000 fef5 	bl	80015a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f248 1104 	movw	r1, #33028	; 0x8104
 80007c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c4:	f000 feee 	bl	80015a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80007c8:	2200      	movs	r2, #0
 80007ca:	f24f 0114 	movw	r1, #61460	; 0xf014
 80007ce:	4898      	ldr	r0, [pc, #608]	; (8000a30 <MX_GPIO_Init+0x310>)
 80007d0:	f000 fee8 	bl	80015a4 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	f241 0181 	movw	r1, #4225	; 0x1081
 80007da:	4896      	ldr	r0, [pc, #600]	; (8000a34 <MX_GPIO_Init+0x314>)
 80007dc:	f000 fee2 	bl	80015a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e6:	4893      	ldr	r0, [pc, #588]	; (8000a34 <MX_GPIO_Init+0x314>)
 80007e8:	f000 fedc 	bl	80015a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	f44f 7110 	mov.w	r1, #576	; 0x240
 80007f2:	4891      	ldr	r0, [pc, #580]	; (8000a38 <MX_GPIO_Init+0x318>)
 80007f4:	f000 fed6 	bl	80015a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2120      	movs	r1, #32
 80007fc:	488c      	ldr	r0, [pc, #560]	; (8000a30 <MX_GPIO_Init+0x310>)
 80007fe:	f000 fed1 	bl	80015a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000802:	2201      	movs	r2, #1
 8000804:	2101      	movs	r1, #1
 8000806:	4889      	ldr	r0, [pc, #548]	; (8000a2c <MX_GPIO_Init+0x30c>)
 8000808:	f000 fecc 	bl	80015a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800080c:	f240 1315 	movw	r3, #277	; 0x115
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4619      	mov	r1, r3
 8000824:	4881      	ldr	r0, [pc, #516]	; (8000a2c <MX_GPIO_Init+0x30c>)
 8000826:	f000 fd13 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800082a:	236a      	movs	r3, #106	; 0x6a
 800082c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800082e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4619      	mov	r1, r3
 800083e:	487b      	ldr	r0, [pc, #492]	; (8000a2c <MX_GPIO_Init+0x30c>)
 8000840:	f000 fd06 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000844:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800084a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800084e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4619      	mov	r1, r3
 800085a:	4877      	ldr	r0, [pc, #476]	; (8000a38 <MX_GPIO_Init+0x318>)
 800085c:	f000 fcf8 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000860:	233f      	movs	r3, #63	; 0x3f
 8000862:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000864:	230b      	movs	r3, #11
 8000866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4619      	mov	r1, r3
 8000872:	4871      	ldr	r0, [pc, #452]	; (8000a38 <MX_GPIO_Init+0x318>)
 8000874:	f000 fcec 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000878:	2303      	movs	r3, #3
 800087a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000884:	2303      	movs	r3, #3
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000888:	2308      	movs	r3, #8
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	4619      	mov	r1, r3
 8000892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000896:	f000 fcdb 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800089a:	f248 1304 	movw	r3, #33028	; 0x8104
 800089e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a0:	2301      	movs	r3, #1
 80008a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	4619      	mov	r1, r3
 80008b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b6:	f000 fccb 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80008ba:	2310      	movs	r3, #16
 80008bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80008be:	230b      	movs	r3, #11
 80008c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d0:	f000 fcbe 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80008d4:	23e0      	movs	r3, #224	; 0xe0
 80008d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e0:	2303      	movs	r3, #3
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008e4:	2305      	movs	r3, #5
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f2:	f000 fcad 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80008f6:	2301      	movs	r3, #1
 80008f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4619      	mov	r1, r3
 800090a:	4849      	ldr	r0, [pc, #292]	; (8000a30 <MX_GPIO_Init+0x310>)
 800090c:	f000 fca0 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000910:	2302      	movs	r3, #2
 8000912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000914:	230b      	movs	r3, #11
 8000916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4619      	mov	r1, r3
 8000922:	4843      	ldr	r0, [pc, #268]	; (8000a30 <MX_GPIO_Init+0x310>)
 8000924:	f000 fc94 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000928:	f24f 0334 	movw	r3, #61492	; 0xf034
 800092c:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4619      	mov	r1, r3
 8000940:	483b      	ldr	r0, [pc, #236]	; (8000a30 <MX_GPIO_Init+0x310>)
 8000942:	f000 fc85 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000946:	f44f 7320 	mov.w	r3, #640	; 0x280
 800094a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	2302      	movs	r3, #2
 800094e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000958:	2306      	movs	r3, #6
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4619      	mov	r1, r3
 8000962:	4832      	ldr	r0, [pc, #200]	; (8000a2c <MX_GPIO_Init+0x30c>)
 8000964:	f000 fc74 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000968:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800096c:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000976:	2303      	movs	r3, #3
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800097a:	230a      	movs	r3, #10
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4619      	mov	r1, r3
 8000984:	4829      	ldr	r0, [pc, #164]	; (8000a2c <MX_GPIO_Init+0x30c>)
 8000986:	f000 fc63 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800098a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800098e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000990:	2312      	movs	r3, #18
 8000992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000998:	2303      	movs	r3, #3
 800099a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800099c:	2304      	movs	r3, #4
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	4822      	ldr	r0, [pc, #136]	; (8000a30 <MX_GPIO_Init+0x310>)
 80009a8:	f000 fc52 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80009ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	2302      	movs	r3, #2
 80009b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ba:	2303      	movs	r3, #3
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009be:	2307      	movs	r3, #7
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4619      	mov	r1, r3
 80009c8:	481a      	ldr	r0, [pc, #104]	; (8000a34 <MX_GPIO_Init+0x314>)
 80009ca:	f000 fc41 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80009ce:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80009d2:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009d4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	4813      	ldr	r0, [pc, #76]	; (8000a34 <MX_GPIO_Init+0x314>)
 80009e6:	f000 fc33 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80009ea:	f243 0381 	movw	r3, #12417	; 0x3081
 80009ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4619      	mov	r1, r3
 8000a02:	480c      	ldr	r0, [pc, #48]	; (8000a34 <MX_GPIO_Init+0x314>)
 8000a04:	f000 fc24 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000a08:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_GPIO_Init+0x318>)
 8000a22:	f000 fc15 	bl	8001250 <HAL_GPIO_Init>
 8000a26:	e009      	b.n	8000a3c <MX_GPIO_Init+0x31c>
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	48001000 	.word	0x48001000
 8000a30:	48000400 	.word	0x48000400
 8000a34:	48000c00 	.word	0x48000c00
 8000a38:	48000800 	.word	0x48000800

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000a3c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a42:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4619      	mov	r1, r3
 8000a52:	483c      	ldr	r0, [pc, #240]	; (8000b44 <MX_GPIO_Init+0x424>)
 8000a54:	f000 fbfc 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000a58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a70:	f000 fbee 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000a74:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a82:	2303      	movs	r3, #3
 8000a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a86:	230a      	movs	r3, #10
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a94:	f000 fbdc 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000a98:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000aaa:	2306      	movs	r3, #6
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4823      	ldr	r0, [pc, #140]	; (8000b44 <MX_GPIO_Init+0x424>)
 8000ab6:	f000 fbcb 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000aba:	2302      	movs	r3, #2
 8000abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aca:	2305      	movs	r3, #5
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	481c      	ldr	r0, [pc, #112]	; (8000b48 <MX_GPIO_Init+0x428>)
 8000ad6:	f000 fbbb 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000ada:	2378      	movs	r3, #120	; 0x78
 8000adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aea:	2307      	movs	r3, #7
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	4619      	mov	r1, r3
 8000af4:	4814      	ldr	r0, [pc, #80]	; (8000b48 <MX_GPIO_Init+0x428>)
 8000af6:	f000 fbab 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000afa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b00:	2312      	movs	r3, #18
 8000b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	480d      	ldr	r0, [pc, #52]	; (8000b4c <MX_GPIO_Init+0x42c>)
 8000b18:	f000 fb9a 	bl	8001250 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2100      	movs	r1, #0
 8000b20:	2017      	movs	r0, #23
 8000b22:	f000 fae0 	bl	80010e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b26:	2017      	movs	r0, #23
 8000b28:	f000 faf9 	bl	800111e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2028      	movs	r0, #40	; 0x28
 8000b32:	f000 fad8 	bl	80010e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b36:	2028      	movs	r0, #40	; 0x28
 8000b38:	f000 faf1 	bl	800111e <HAL_NVIC_EnableIRQ>

}
 8000b3c:	bf00      	nop
 8000b3e:	3728      	adds	r7, #40	; 0x28
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	48000800 	.word	0x48000800
 8000b48:	48000c00 	.word	0x48000c00
 8000b4c:	48000400 	.word	0x48000400

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
}
 8000b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <Error_Handler+0x8>
	...

08000b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <HAL_MspInit+0x44>)
 8000b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b66:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <HAL_MspInit+0x44>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <HAL_MspInit+0x44>)
 8000b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <HAL_MspInit+0x44>)
 8000b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7e:	4a08      	ldr	r2, [pc, #32]	; (8000ba0 <HAL_MspInit+0x44>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b84:	6593      	str	r3, [r2, #88]	; 0x58
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_MspInit+0x44>)
 8000b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bc4:	d130      	bne.n	8000c28 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <HAL_TIM_Base_MspInit+0x8c>)
 8000bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bca:	4a19      	ldr	r2, [pc, #100]	; (8000c30 <HAL_TIM_Base_MspInit+0x8c>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6593      	str	r3, [r2, #88]	; 0x58
 8000bd2:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <HAL_TIM_Base_MspInit+0x8c>)
 8000bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <HAL_TIM_Base_MspInit+0x8c>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be2:	4a13      	ldr	r2, [pc, #76]	; (8000c30 <HAL_TIM_Base_MspInit+0x8c>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bea:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <HAL_TIM_Base_MspInit+0x8c>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000bf6:	2308      	movs	r3, #8
 8000bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c06:	2301      	movs	r3, #1
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c14:	f000 fb1c 	bl	8001250 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	201c      	movs	r0, #28
 8000c1e:	f000 fa62 	bl	80010e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c22:	201c      	movs	r0, #28
 8000c24:	f000 fa7b 	bl	800111e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c28:	bf00      	nop
 8000c2a:	3728      	adds	r7, #40	; 0x28
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40021000 	.word	0x40021000

08000c34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b0ac      	sub	sp, #176	; 0xb0
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	2288      	movs	r2, #136	; 0x88
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f003 ffbb 	bl	8004bd0 <memset>
  if(huart->Instance==USART1)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a25      	ldr	r2, [pc, #148]	; (8000cf4 <HAL_UART_MspInit+0xc0>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d142      	bne.n	8000cea <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c64:	2301      	movs	r3, #1
 8000c66:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4618      	mov	r0, r3
 8000c72:	f001 fb35 	bl	80022e0 <HAL_RCCEx_PeriphCLKConfig>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c7c:	f7ff ff68 	bl	8000b50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c80:	4b1d      	ldr	r3, [pc, #116]	; (8000cf8 <HAL_UART_MspInit+0xc4>)
 8000c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c84:	4a1c      	ldr	r2, [pc, #112]	; (8000cf8 <HAL_UART_MspInit+0xc4>)
 8000c86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c8a:	6613      	str	r3, [r2, #96]	; 0x60
 8000c8c:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <HAL_UART_MspInit+0xc4>)
 8000c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c98:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <HAL_UART_MspInit+0xc4>)
 8000c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9c:	4a16      	ldr	r2, [pc, #88]	; (8000cf8 <HAL_UART_MspInit+0xc4>)
 8000c9e:	f043 0302 	orr.w	r3, r3, #2
 8000ca2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca4:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <HAL_UART_MspInit+0xc4>)
 8000ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca8:	f003 0302 	and.w	r3, r3, #2
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000cb0:	23c0      	movs	r3, #192	; 0xc0
 8000cb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cc8:	2307      	movs	r3, #7
 8000cca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4809      	ldr	r0, [pc, #36]	; (8000cfc <HAL_UART_MspInit+0xc8>)
 8000cd6:	f000 fabb 	bl	8001250 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	2025      	movs	r0, #37	; 0x25
 8000ce0:	f000 fa01 	bl	80010e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ce4:	2025      	movs	r0, #37	; 0x25
 8000ce6:	f000 fa1a 	bl	800111e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cea:	bf00      	nop
 8000cec:	37b0      	adds	r7, #176	; 0xb0
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40013800 	.word	0x40013800
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	48000400 	.word	0x48000400

08000d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <NMI_Handler+0x4>

08000d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <HardFault_Handler+0x4>

08000d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <MemManage_Handler+0x4>

08000d12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <BusFault_Handler+0x4>

08000d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <UsageFault_Handler+0x4>

08000d1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d4c:	f000 f8d0 	bl	8000ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000d58:	2020      	movs	r0, #32
 8000d5a:	f000 fc3b 	bl	80015d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000d5e:	2040      	movs	r0, #64	; 0x40
 8000d60:	f000 fc38 	bl	80015d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000d64:	2080      	movs	r0, #128	; 0x80
 8000d66:	f000 fc35 	bl	80015d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000d6a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000d6e:	f000 fc31 	bl	80015d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d7c:	4802      	ldr	r0, [pc, #8]	; (8000d88 <TIM2_IRQHandler+0x10>)
 8000d7e:	f001 ffc2 	bl	8002d06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200000d4 	.word	0x200000d4

08000d8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d90:	4802      	ldr	r0, [pc, #8]	; (8000d9c <USART1_IRQHandler+0x10>)
 8000d92:	f002 fce5 	bl	8003760 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000050 	.word	0x20000050

08000da0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000da4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000da8:	f000 fc14 	bl	80015d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000dac:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000db0:	f000 fc10 	bl	80015d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000db4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000db8:	f000 fc0c 	bl	80015d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000dbc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000dc0:	f000 fc08 	bl	80015d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000dc4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000dc8:	f000 fc04 	bl	80015d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <SystemInit+0x20>)
 8000dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dda:	4a05      	ldr	r2, [pc, #20]	; (8000df0 <SystemInit+0x20>)
 8000ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000df4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e2c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000df8:	f7ff ffea 	bl	8000dd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dfc:	480c      	ldr	r0, [pc, #48]	; (8000e30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dfe:	490d      	ldr	r1, [pc, #52]	; (8000e34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e00:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <LoopForever+0xe>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e04:	e002      	b.n	8000e0c <LoopCopyDataInit>

08000e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0a:	3304      	adds	r3, #4

08000e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e10:	d3f9      	bcc.n	8000e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e12:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e14:	4c0a      	ldr	r4, [pc, #40]	; (8000e40 <LoopForever+0x16>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e18:	e001      	b.n	8000e1e <LoopFillZerobss>

08000e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e1c:	3204      	adds	r2, #4

08000e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e20:	d3fb      	bcc.n	8000e1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e22:	f003 feb1 	bl	8004b88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e26:	f7ff fb65 	bl	80004f4 <main>

08000e2a <LoopForever>:

LoopForever:
    b LoopForever
 8000e2a:	e7fe      	b.n	8000e2a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e2c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e34:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000e38:	08004c50 	.word	0x08004c50
  ldr r2, =_sbss
 8000e3c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000e40:	20000124 	.word	0x20000124

08000e44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e44:	e7fe      	b.n	8000e44 <ADC1_2_IRQHandler>

08000e46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e50:	2003      	movs	r0, #3
 8000e52:	f000 f93d 	bl	80010d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e56:	2000      	movs	r0, #0
 8000e58:	f000 f80e 	bl	8000e78 <HAL_InitTick>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d002      	beq.n	8000e68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	71fb      	strb	r3, [r7, #7]
 8000e66:	e001      	b.n	8000e6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e68:	f7ff fe78 	bl	8000b5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e80:	2300      	movs	r3, #0
 8000e82:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e84:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <HAL_InitTick+0x6c>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d023      	beq.n	8000ed4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e8c:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <HAL_InitTick+0x70>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <HAL_InitTick+0x6c>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4619      	mov	r1, r3
 8000e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 f949 	bl	800113a <HAL_SYSTICK_Config>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d10f      	bne.n	8000ece <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b0f      	cmp	r3, #15
 8000eb2:	d809      	bhi.n	8000ec8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebc:	f000 f913 	bl	80010e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ec0:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <HAL_InitTick+0x74>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	e007      	b.n	8000ed8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	73fb      	strb	r3, [r7, #15]
 8000ecc:	e004      	b.n	8000ed8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	73fb      	strb	r3, [r7, #15]
 8000ed2:	e001      	b.n	8000ed8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000020 	.word	0x20000020
 8000ee8:	20000018 	.word	0x20000018
 8000eec:	2000001c 	.word	0x2000001c

08000ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_IncTick+0x20>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_IncTick+0x24>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <HAL_IncTick+0x24>)
 8000f02:	6013      	str	r3, [r2, #0]
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000020 	.word	0x20000020
 8000f14:	20000120 	.word	0x20000120

08000f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <HAL_GetTick+0x14>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20000120 	.word	0x20000120

08000f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f62:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	60d3      	str	r3, [r2, #12]
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <__NVIC_GetPriorityGrouping+0x18>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	0a1b      	lsrs	r3, r3, #8
 8000f82:	f003 0307 	and.w	r3, r3, #7
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	db0b      	blt.n	8000fbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	f003 021f 	and.w	r2, r3, #31
 8000fac:	4907      	ldr	r1, [pc, #28]	; (8000fcc <__NVIC_EnableIRQ+0x38>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	095b      	lsrs	r3, r3, #5
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000e100 	.word	0xe000e100

08000fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	db0a      	blt.n	8000ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	490c      	ldr	r1, [pc, #48]	; (800101c <__NVIC_SetPriority+0x4c>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	0112      	lsls	r2, r2, #4
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff8:	e00a      	b.n	8001010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4908      	ldr	r1, [pc, #32]	; (8001020 <__NVIC_SetPriority+0x50>)
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	f003 030f 	and.w	r3, r3, #15
 8001006:	3b04      	subs	r3, #4
 8001008:	0112      	lsls	r2, r2, #4
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	440b      	add	r3, r1
 800100e:	761a      	strb	r2, [r3, #24]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000e100 	.word	0xe000e100
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	; 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f1c3 0307 	rsb	r3, r3, #7
 800103e:	2b04      	cmp	r3, #4
 8001040:	bf28      	it	cs
 8001042:	2304      	movcs	r3, #4
 8001044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3304      	adds	r3, #4
 800104a:	2b06      	cmp	r3, #6
 800104c:	d902      	bls.n	8001054 <NVIC_EncodePriority+0x30>
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3b03      	subs	r3, #3
 8001052:	e000      	b.n	8001056 <NVIC_EncodePriority+0x32>
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	f04f 32ff 	mov.w	r2, #4294967295
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43da      	mvns	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	401a      	ands	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800106c:	f04f 31ff 	mov.w	r1, #4294967295
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	43d9      	mvns	r1, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	4313      	orrs	r3, r2
         );
}
 800107e:	4618      	mov	r0, r3
 8001080:	3724      	adds	r7, #36	; 0x24
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800109c:	d301      	bcc.n	80010a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109e:	2301      	movs	r3, #1
 80010a0:	e00f      	b.n	80010c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a2:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <SysTick_Config+0x40>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010aa:	210f      	movs	r1, #15
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295
 80010b0:	f7ff ff8e 	bl	8000fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <SysTick_Config+0x40>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ba:	4b04      	ldr	r3, [pc, #16]	; (80010cc <SysTick_Config+0x40>)
 80010bc:	2207      	movs	r2, #7
 80010be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	e000e010 	.word	0xe000e010

080010d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff ff29 	bl	8000f30 <__NVIC_SetPriorityGrouping>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b086      	sub	sp, #24
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
 80010f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010f8:	f7ff ff3e 	bl	8000f78 <__NVIC_GetPriorityGrouping>
 80010fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	68b9      	ldr	r1, [r7, #8]
 8001102:	6978      	ldr	r0, [r7, #20]
 8001104:	f7ff ff8e 	bl	8001024 <NVIC_EncodePriority>
 8001108:	4602      	mov	r2, r0
 800110a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110e:	4611      	mov	r1, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff5d 	bl	8000fd0 <__NVIC_SetPriority>
}
 8001116:	bf00      	nop
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff31 	bl	8000f94 <__NVIC_EnableIRQ>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff ffa2 	bl	800108c <SysTick_Config>
 8001148:	4603      	mov	r3, r0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001152:	b480      	push	{r7}
 8001154:	b085      	sub	sp, #20
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d008      	beq.n	800117c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2204      	movs	r2, #4
 800116e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e022      	b.n	80011c2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 020e 	bic.w	r2, r2, #14
 800118a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f022 0201 	bic.w	r2, r2, #1
 800119a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a0:	f003 021c 	and.w	r2, r3, #28
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	2101      	movs	r1, #1
 80011aa:	fa01 f202 	lsl.w	r2, r1, r2
 80011ae:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2201      	movs	r2, #1
 80011b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3714      	adds	r7, #20
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d005      	beq.n	80011f2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2204      	movs	r2, #4
 80011ea:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	73fb      	strb	r3, [r7, #15]
 80011f0:	e029      	b.n	8001246 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f022 020e 	bic.w	r2, r2, #14
 8001200:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f022 0201 	bic.w	r2, r2, #1
 8001210:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	f003 021c 	and.w	r2, r3, #28
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	2101      	movs	r1, #1
 8001220:	fa01 f202 	lsl.w	r2, r1, r2
 8001224:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2201      	movs	r2, #1
 800122a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	4798      	blx	r3
    }
  }
  return status;
 8001246:	7bfb      	ldrb	r3, [r7, #15]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001250:	b480      	push	{r7}
 8001252:	b087      	sub	sp, #28
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800125e:	e17f      	b.n	8001560 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	2101      	movs	r1, #1
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	fa01 f303 	lsl.w	r3, r1, r3
 800126c:	4013      	ands	r3, r2
 800126e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2b00      	cmp	r3, #0
 8001274:	f000 8171 	beq.w	800155a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f003 0303 	and.w	r3, r3, #3
 8001280:	2b01      	cmp	r3, #1
 8001282:	d005      	beq.n	8001290 <HAL_GPIO_Init+0x40>
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d130      	bne.n	80012f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	2203      	movs	r2, #3
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	68da      	ldr	r2, [r3, #12]
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012c6:	2201      	movs	r2, #1
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	091b      	lsrs	r3, r3, #4
 80012dc:	f003 0201 	and.w	r2, r3, #1
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 0303 	and.w	r3, r3, #3
 80012fa:	2b03      	cmp	r3, #3
 80012fc:	d118      	bne.n	8001330 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001302:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001304:	2201      	movs	r2, #1
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	08db      	lsrs	r3, r3, #3
 800131a:	f003 0201 	and.w	r2, r3, #1
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	2b03      	cmp	r3, #3
 800133a:	d017      	beq.n	800136c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	2203      	movs	r2, #3
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	4313      	orrs	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d123      	bne.n	80013c0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	08da      	lsrs	r2, r3, #3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3208      	adds	r2, #8
 8001380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001384:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	f003 0307 	and.w	r3, r3, #7
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	220f      	movs	r2, #15
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	691a      	ldr	r2, [r3, #16]
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	08da      	lsrs	r2, r3, #3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3208      	adds	r2, #8
 80013ba:	6939      	ldr	r1, [r7, #16]
 80013bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	2203      	movs	r2, #3
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4013      	ands	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 0203 	and.w	r2, r3, #3
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 80ac 	beq.w	800155a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001402:	4b5f      	ldr	r3, [pc, #380]	; (8001580 <HAL_GPIO_Init+0x330>)
 8001404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001406:	4a5e      	ldr	r2, [pc, #376]	; (8001580 <HAL_GPIO_Init+0x330>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6613      	str	r3, [r2, #96]	; 0x60
 800140e:	4b5c      	ldr	r3, [pc, #368]	; (8001580 <HAL_GPIO_Init+0x330>)
 8001410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800141a:	4a5a      	ldr	r2, [pc, #360]	; (8001584 <HAL_GPIO_Init+0x334>)
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	089b      	lsrs	r3, r3, #2
 8001420:	3302      	adds	r3, #2
 8001422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001426:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	f003 0303 	and.w	r3, r3, #3
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	220f      	movs	r2, #15
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	4013      	ands	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001444:	d025      	beq.n	8001492 <HAL_GPIO_Init+0x242>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a4f      	ldr	r2, [pc, #316]	; (8001588 <HAL_GPIO_Init+0x338>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d01f      	beq.n	800148e <HAL_GPIO_Init+0x23e>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a4e      	ldr	r2, [pc, #312]	; (800158c <HAL_GPIO_Init+0x33c>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d019      	beq.n	800148a <HAL_GPIO_Init+0x23a>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a4d      	ldr	r2, [pc, #308]	; (8001590 <HAL_GPIO_Init+0x340>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d013      	beq.n	8001486 <HAL_GPIO_Init+0x236>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a4c      	ldr	r2, [pc, #304]	; (8001594 <HAL_GPIO_Init+0x344>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d00d      	beq.n	8001482 <HAL_GPIO_Init+0x232>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a4b      	ldr	r2, [pc, #300]	; (8001598 <HAL_GPIO_Init+0x348>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d007      	beq.n	800147e <HAL_GPIO_Init+0x22e>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a4a      	ldr	r2, [pc, #296]	; (800159c <HAL_GPIO_Init+0x34c>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d101      	bne.n	800147a <HAL_GPIO_Init+0x22a>
 8001476:	2306      	movs	r3, #6
 8001478:	e00c      	b.n	8001494 <HAL_GPIO_Init+0x244>
 800147a:	2307      	movs	r3, #7
 800147c:	e00a      	b.n	8001494 <HAL_GPIO_Init+0x244>
 800147e:	2305      	movs	r3, #5
 8001480:	e008      	b.n	8001494 <HAL_GPIO_Init+0x244>
 8001482:	2304      	movs	r3, #4
 8001484:	e006      	b.n	8001494 <HAL_GPIO_Init+0x244>
 8001486:	2303      	movs	r3, #3
 8001488:	e004      	b.n	8001494 <HAL_GPIO_Init+0x244>
 800148a:	2302      	movs	r3, #2
 800148c:	e002      	b.n	8001494 <HAL_GPIO_Init+0x244>
 800148e:	2301      	movs	r3, #1
 8001490:	e000      	b.n	8001494 <HAL_GPIO_Init+0x244>
 8001492:	2300      	movs	r3, #0
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	f002 0203 	and.w	r2, r2, #3
 800149a:	0092      	lsls	r2, r2, #2
 800149c:	4093      	lsls	r3, r2
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014a4:	4937      	ldr	r1, [pc, #220]	; (8001584 <HAL_GPIO_Init+0x334>)
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	089b      	lsrs	r3, r3, #2
 80014aa:	3302      	adds	r3, #2
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014b2:	4b3b      	ldr	r3, [pc, #236]	; (80015a0 <HAL_GPIO_Init+0x350>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014d6:	4a32      	ldr	r2, [pc, #200]	; (80015a0 <HAL_GPIO_Init+0x350>)
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014dc:	4b30      	ldr	r3, [pc, #192]	; (80015a0 <HAL_GPIO_Init+0x350>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4013      	ands	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001500:	4a27      	ldr	r2, [pc, #156]	; (80015a0 <HAL_GPIO_Init+0x350>)
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001506:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <HAL_GPIO_Init+0x350>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	43db      	mvns	r3, r3
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	4013      	ands	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4313      	orrs	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800152a:	4a1d      	ldr	r2, [pc, #116]	; (80015a0 <HAL_GPIO_Init+0x350>)
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <HAL_GPIO_Init+0x350>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	43db      	mvns	r3, r3
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4013      	ands	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001554:	4a12      	ldr	r2, [pc, #72]	; (80015a0 <HAL_GPIO_Init+0x350>)
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	3301      	adds	r3, #1
 800155e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	fa22 f303 	lsr.w	r3, r2, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	f47f ae78 	bne.w	8001260 <HAL_GPIO_Init+0x10>
  }
}
 8001570:	bf00      	nop
 8001572:	bf00      	nop
 8001574:	371c      	adds	r7, #28
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	40021000 	.word	0x40021000
 8001584:	40010000 	.word	0x40010000
 8001588:	48000400 	.word	0x48000400
 800158c:	48000800 	.word	0x48000800
 8001590:	48000c00 	.word	0x48000c00
 8001594:	48001000 	.word	0x48001000
 8001598:	48001400 	.word	0x48001400
 800159c:	48001800 	.word	0x48001800
 80015a0:	40010400 	.word	0x40010400

080015a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	807b      	strh	r3, [r7, #2]
 80015b0:	4613      	mov	r3, r2
 80015b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015b4:	787b      	ldrb	r3, [r7, #1]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015ba:	887a      	ldrh	r2, [r7, #2]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015c0:	e002      	b.n	80015c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015c2:	887a      	ldrh	r2, [r7, #2]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015de:	4b08      	ldr	r3, [pc, #32]	; (8001600 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015e0:	695a      	ldr	r2, [r3, #20]
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	4013      	ands	r3, r2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d006      	beq.n	80015f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015ea:	4a05      	ldr	r2, [pc, #20]	; (8001600 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015ec:	88fb      	ldrh	r3, [r7, #6]
 80015ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015f0:	88fb      	ldrh	r3, [r7, #6]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 f806 	bl	8001604 <HAL_GPIO_EXTI_Callback>
  }
}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40010400 	.word	0x40010400

08001604 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
	...

0800161c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <HAL_PWREx_GetVoltageRange+0x18>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40007000 	.word	0x40007000

08001638 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001646:	d130      	bne.n	80016aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001648:	4b23      	ldr	r3, [pc, #140]	; (80016d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001654:	d038      	beq.n	80016c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001656:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800165e:	4a1e      	ldr	r2, [pc, #120]	; (80016d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001660:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001664:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001666:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2232      	movs	r2, #50	; 0x32
 800166c:	fb02 f303 	mul.w	r3, r2, r3
 8001670:	4a1b      	ldr	r2, [pc, #108]	; (80016e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001672:	fba2 2303 	umull	r2, r3, r2, r3
 8001676:	0c9b      	lsrs	r3, r3, #18
 8001678:	3301      	adds	r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800167c:	e002      	b.n	8001684 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	3b01      	subs	r3, #1
 8001682:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001684:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001686:	695b      	ldr	r3, [r3, #20]
 8001688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800168c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001690:	d102      	bne.n	8001698 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1f2      	bne.n	800167e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001698:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800169a:	695b      	ldr	r3, [r3, #20]
 800169c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016a4:	d110      	bne.n	80016c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e00f      	b.n	80016ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016b6:	d007      	beq.n	80016c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016b8:	4b07      	ldr	r3, [pc, #28]	; (80016d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016c0:	4a05      	ldr	r2, [pc, #20]	; (80016d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40007000 	.word	0x40007000
 80016dc:	20000018 	.word	0x20000018
 80016e0:	431bde83 	.word	0x431bde83

080016e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e3c6      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016f6:	4ba1      	ldr	r3, [pc, #644]	; (800197c <HAL_RCC_OscConfig+0x298>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 030c 	and.w	r3, r3, #12
 80016fe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001700:	4b9e      	ldr	r3, [pc, #632]	; (800197c <HAL_RCC_OscConfig+0x298>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	f003 0303 	and.w	r3, r3, #3
 8001708:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0310 	and.w	r3, r3, #16
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 80e4 	beq.w	80018e0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d007      	beq.n	800172e <HAL_RCC_OscConfig+0x4a>
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	2b0c      	cmp	r3, #12
 8001722:	f040 808b 	bne.w	800183c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	2b01      	cmp	r3, #1
 800172a:	f040 8087 	bne.w	800183c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800172e:	4b93      	ldr	r3, [pc, #588]	; (800197c <HAL_RCC_OscConfig+0x298>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d005      	beq.n	8001746 <HAL_RCC_OscConfig+0x62>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e39e      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a1a      	ldr	r2, [r3, #32]
 800174a:	4b8c      	ldr	r3, [pc, #560]	; (800197c <HAL_RCC_OscConfig+0x298>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0308 	and.w	r3, r3, #8
 8001752:	2b00      	cmp	r3, #0
 8001754:	d004      	beq.n	8001760 <HAL_RCC_OscConfig+0x7c>
 8001756:	4b89      	ldr	r3, [pc, #548]	; (800197c <HAL_RCC_OscConfig+0x298>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800175e:	e005      	b.n	800176c <HAL_RCC_OscConfig+0x88>
 8001760:	4b86      	ldr	r3, [pc, #536]	; (800197c <HAL_RCC_OscConfig+0x298>)
 8001762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001766:	091b      	lsrs	r3, r3, #4
 8001768:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800176c:	4293      	cmp	r3, r2
 800176e:	d223      	bcs.n	80017b8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	4618      	mov	r0, r3
 8001776:	f000 fd53 	bl	8002220 <RCC_SetFlashLatencyFromMSIRange>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e37f      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001784:	4b7d      	ldr	r3, [pc, #500]	; (800197c <HAL_RCC_OscConfig+0x298>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a7c      	ldr	r2, [pc, #496]	; (800197c <HAL_RCC_OscConfig+0x298>)
 800178a:	f043 0308 	orr.w	r3, r3, #8
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	4b7a      	ldr	r3, [pc, #488]	; (800197c <HAL_RCC_OscConfig+0x298>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	4977      	ldr	r1, [pc, #476]	; (800197c <HAL_RCC_OscConfig+0x298>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017a2:	4b76      	ldr	r3, [pc, #472]	; (800197c <HAL_RCC_OscConfig+0x298>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	021b      	lsls	r3, r3, #8
 80017b0:	4972      	ldr	r1, [pc, #456]	; (800197c <HAL_RCC_OscConfig+0x298>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	604b      	str	r3, [r1, #4]
 80017b6:	e025      	b.n	8001804 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017b8:	4b70      	ldr	r3, [pc, #448]	; (800197c <HAL_RCC_OscConfig+0x298>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a6f      	ldr	r2, [pc, #444]	; (800197c <HAL_RCC_OscConfig+0x298>)
 80017be:	f043 0308 	orr.w	r3, r3, #8
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	4b6d      	ldr	r3, [pc, #436]	; (800197c <HAL_RCC_OscConfig+0x298>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	496a      	ldr	r1, [pc, #424]	; (800197c <HAL_RCC_OscConfig+0x298>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017d6:	4b69      	ldr	r3, [pc, #420]	; (800197c <HAL_RCC_OscConfig+0x298>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	021b      	lsls	r3, r3, #8
 80017e4:	4965      	ldr	r1, [pc, #404]	; (800197c <HAL_RCC_OscConfig+0x298>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d109      	bne.n	8001804 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f000 fd13 	bl	8002220 <RCC_SetFlashLatencyFromMSIRange>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e33f      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001804:	f000 fc48 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 8001808:	4602      	mov	r2, r0
 800180a:	4b5c      	ldr	r3, [pc, #368]	; (800197c <HAL_RCC_OscConfig+0x298>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	091b      	lsrs	r3, r3, #4
 8001810:	f003 030f 	and.w	r3, r3, #15
 8001814:	495a      	ldr	r1, [pc, #360]	; (8001980 <HAL_RCC_OscConfig+0x29c>)
 8001816:	5ccb      	ldrb	r3, [r1, r3]
 8001818:	f003 031f 	and.w	r3, r3, #31
 800181c:	fa22 f303 	lsr.w	r3, r2, r3
 8001820:	4a58      	ldr	r2, [pc, #352]	; (8001984 <HAL_RCC_OscConfig+0x2a0>)
 8001822:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001824:	4b58      	ldr	r3, [pc, #352]	; (8001988 <HAL_RCC_OscConfig+0x2a4>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff fb25 	bl	8000e78 <HAL_InitTick>
 800182e:	4603      	mov	r3, r0
 8001830:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001832:	7bfb      	ldrb	r3, [r7, #15]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d052      	beq.n	80018de <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	e323      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d032      	beq.n	80018aa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001844:	4b4d      	ldr	r3, [pc, #308]	; (800197c <HAL_RCC_OscConfig+0x298>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a4c      	ldr	r2, [pc, #304]	; (800197c <HAL_RCC_OscConfig+0x298>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001850:	f7ff fb62 	bl	8000f18 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001858:	f7ff fb5e 	bl	8000f18 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e30c      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800186a:	4b44      	ldr	r3, [pc, #272]	; (800197c <HAL_RCC_OscConfig+0x298>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001876:	4b41      	ldr	r3, [pc, #260]	; (800197c <HAL_RCC_OscConfig+0x298>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a40      	ldr	r2, [pc, #256]	; (800197c <HAL_RCC_OscConfig+0x298>)
 800187c:	f043 0308 	orr.w	r3, r3, #8
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	4b3e      	ldr	r3, [pc, #248]	; (800197c <HAL_RCC_OscConfig+0x298>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	493b      	ldr	r1, [pc, #236]	; (800197c <HAL_RCC_OscConfig+0x298>)
 8001890:	4313      	orrs	r3, r2
 8001892:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001894:	4b39      	ldr	r3, [pc, #228]	; (800197c <HAL_RCC_OscConfig+0x298>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	021b      	lsls	r3, r3, #8
 80018a2:	4936      	ldr	r1, [pc, #216]	; (800197c <HAL_RCC_OscConfig+0x298>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	604b      	str	r3, [r1, #4]
 80018a8:	e01a      	b.n	80018e0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018aa:	4b34      	ldr	r3, [pc, #208]	; (800197c <HAL_RCC_OscConfig+0x298>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a33      	ldr	r2, [pc, #204]	; (800197c <HAL_RCC_OscConfig+0x298>)
 80018b0:	f023 0301 	bic.w	r3, r3, #1
 80018b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018b6:	f7ff fb2f 	bl	8000f18 <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018be:	f7ff fb2b 	bl	8000f18 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e2d9      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018d0:	4b2a      	ldr	r3, [pc, #168]	; (800197c <HAL_RCC_OscConfig+0x298>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1f0      	bne.n	80018be <HAL_RCC_OscConfig+0x1da>
 80018dc:	e000      	b.n	80018e0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018de:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d074      	beq.n	80019d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	2b08      	cmp	r3, #8
 80018f0:	d005      	beq.n	80018fe <HAL_RCC_OscConfig+0x21a>
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	2b0c      	cmp	r3, #12
 80018f6:	d10e      	bne.n	8001916 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	d10b      	bne.n	8001916 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018fe:	4b1f      	ldr	r3, [pc, #124]	; (800197c <HAL_RCC_OscConfig+0x298>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d064      	beq.n	80019d4 <HAL_RCC_OscConfig+0x2f0>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d160      	bne.n	80019d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e2b6      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800191e:	d106      	bne.n	800192e <HAL_RCC_OscConfig+0x24a>
 8001920:	4b16      	ldr	r3, [pc, #88]	; (800197c <HAL_RCC_OscConfig+0x298>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a15      	ldr	r2, [pc, #84]	; (800197c <HAL_RCC_OscConfig+0x298>)
 8001926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	e01d      	b.n	800196a <HAL_RCC_OscConfig+0x286>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001936:	d10c      	bne.n	8001952 <HAL_RCC_OscConfig+0x26e>
 8001938:	4b10      	ldr	r3, [pc, #64]	; (800197c <HAL_RCC_OscConfig+0x298>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a0f      	ldr	r2, [pc, #60]	; (800197c <HAL_RCC_OscConfig+0x298>)
 800193e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	4b0d      	ldr	r3, [pc, #52]	; (800197c <HAL_RCC_OscConfig+0x298>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a0c      	ldr	r2, [pc, #48]	; (800197c <HAL_RCC_OscConfig+0x298>)
 800194a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	e00b      	b.n	800196a <HAL_RCC_OscConfig+0x286>
 8001952:	4b0a      	ldr	r3, [pc, #40]	; (800197c <HAL_RCC_OscConfig+0x298>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a09      	ldr	r2, [pc, #36]	; (800197c <HAL_RCC_OscConfig+0x298>)
 8001958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	4b07      	ldr	r3, [pc, #28]	; (800197c <HAL_RCC_OscConfig+0x298>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a06      	ldr	r2, [pc, #24]	; (800197c <HAL_RCC_OscConfig+0x298>)
 8001964:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001968:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d01c      	beq.n	80019ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001972:	f7ff fad1 	bl	8000f18 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001978:	e011      	b.n	800199e <HAL_RCC_OscConfig+0x2ba>
 800197a:	bf00      	nop
 800197c:	40021000 	.word	0x40021000
 8001980:	08004bf8 	.word	0x08004bf8
 8001984:	20000018 	.word	0x20000018
 8001988:	2000001c 	.word	0x2000001c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800198c:	f7ff fac4 	bl	8000f18 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b64      	cmp	r3, #100	; 0x64
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e272      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800199e:	4baf      	ldr	r3, [pc, #700]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f0      	beq.n	800198c <HAL_RCC_OscConfig+0x2a8>
 80019aa:	e014      	b.n	80019d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ac:	f7ff fab4 	bl	8000f18 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b4:	f7ff fab0 	bl	8000f18 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b64      	cmp	r3, #100	; 0x64
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e25e      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019c6:	4ba5      	ldr	r3, [pc, #660]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f0      	bne.n	80019b4 <HAL_RCC_OscConfig+0x2d0>
 80019d2:	e000      	b.n	80019d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d060      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d005      	beq.n	80019f4 <HAL_RCC_OscConfig+0x310>
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	2b0c      	cmp	r3, #12
 80019ec:	d119      	bne.n	8001a22 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d116      	bne.n	8001a22 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019f4:	4b99      	ldr	r3, [pc, #612]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d005      	beq.n	8001a0c <HAL_RCC_OscConfig+0x328>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e23b      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0c:	4b93      	ldr	r3, [pc, #588]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	061b      	lsls	r3, r3, #24
 8001a1a:	4990      	ldr	r1, [pc, #576]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a20:	e040      	b.n	8001aa4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d023      	beq.n	8001a72 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a2a:	4b8c      	ldr	r3, [pc, #560]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a8b      	ldr	r2, [pc, #556]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a36:	f7ff fa6f 	bl	8000f18 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a3e:	f7ff fa6b 	bl	8000f18 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e219      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a50:	4b82      	ldr	r3, [pc, #520]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f0      	beq.n	8001a3e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a5c:	4b7f      	ldr	r3, [pc, #508]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	061b      	lsls	r3, r3, #24
 8001a6a:	497c      	ldr	r1, [pc, #496]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	604b      	str	r3, [r1, #4]
 8001a70:	e018      	b.n	8001aa4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a72:	4b7a      	ldr	r3, [pc, #488]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a79      	ldr	r2, [pc, #484]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001a78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7e:	f7ff fa4b 	bl	8000f18 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a86:	f7ff fa47 	bl	8000f18 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e1f5      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a98:	4b70      	ldr	r3, [pc, #448]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1f0      	bne.n	8001a86 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0308 	and.w	r3, r3, #8
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d03c      	beq.n	8001b2a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d01c      	beq.n	8001af2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ab8:	4b68      	ldr	r3, [pc, #416]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001abe:	4a67      	ldr	r2, [pc, #412]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac8:	f7ff fa26 	bl	8000f18 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad0:	f7ff fa22 	bl	8000f18 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e1d0      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ae2:	4b5e      	ldr	r3, [pc, #376]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0ef      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x3ec>
 8001af0:	e01b      	b.n	8001b2a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001af2:	4b5a      	ldr	r3, [pc, #360]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af8:	4a58      	ldr	r2, [pc, #352]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001afa:	f023 0301 	bic.w	r3, r3, #1
 8001afe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b02:	f7ff fa09 	bl	8000f18 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b0a:	f7ff fa05 	bl	8000f18 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e1b3      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b1c:	4b4f      	ldr	r3, [pc, #316]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1ef      	bne.n	8001b0a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 80a6 	beq.w	8001c84 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b3c:	4b47      	ldr	r3, [pc, #284]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d10d      	bne.n	8001b64 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b48:	4b44      	ldr	r3, [pc, #272]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4c:	4a43      	ldr	r2, [pc, #268]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b52:	6593      	str	r3, [r2, #88]	; 0x58
 8001b54:	4b41      	ldr	r3, [pc, #260]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b60:	2301      	movs	r3, #1
 8001b62:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b64:	4b3e      	ldr	r3, [pc, #248]	; (8001c60 <HAL_RCC_OscConfig+0x57c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d118      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b70:	4b3b      	ldr	r3, [pc, #236]	; (8001c60 <HAL_RCC_OscConfig+0x57c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a3a      	ldr	r2, [pc, #232]	; (8001c60 <HAL_RCC_OscConfig+0x57c>)
 8001b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b7c:	f7ff f9cc 	bl	8000f18 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b84:	f7ff f9c8 	bl	8000f18 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e176      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b96:	4b32      	ldr	r3, [pc, #200]	; (8001c60 <HAL_RCC_OscConfig+0x57c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0f0      	beq.n	8001b84 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d108      	bne.n	8001bbc <HAL_RCC_OscConfig+0x4d8>
 8001baa:	4b2c      	ldr	r3, [pc, #176]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb0:	4a2a      	ldr	r2, [pc, #168]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bba:	e024      	b.n	8001c06 <HAL_RCC_OscConfig+0x522>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b05      	cmp	r3, #5
 8001bc2:	d110      	bne.n	8001be6 <HAL_RCC_OscConfig+0x502>
 8001bc4:	4b25      	ldr	r3, [pc, #148]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bca:	4a24      	ldr	r2, [pc, #144]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001bcc:	f043 0304 	orr.w	r3, r3, #4
 8001bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bd4:	4b21      	ldr	r3, [pc, #132]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bda:	4a20      	ldr	r2, [pc, #128]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001be4:	e00f      	b.n	8001c06 <HAL_RCC_OscConfig+0x522>
 8001be6:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bec:	4a1b      	ldr	r2, [pc, #108]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001bee:	f023 0301 	bic.w	r3, r3, #1
 8001bf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bf6:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bfc:	4a17      	ldr	r2, [pc, #92]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001bfe:	f023 0304 	bic.w	r3, r3, #4
 8001c02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d016      	beq.n	8001c3c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0e:	f7ff f983 	bl	8000f18 <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c14:	e00a      	b.n	8001c2c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c16:	f7ff f97f 	bl	8000f18 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e12b      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <HAL_RCC_OscConfig+0x578>)
 8001c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0ed      	beq.n	8001c16 <HAL_RCC_OscConfig+0x532>
 8001c3a:	e01a      	b.n	8001c72 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c3c:	f7ff f96c 	bl	8000f18 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c42:	e00f      	b.n	8001c64 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c44:	f7ff f968 	bl	8000f18 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d906      	bls.n	8001c64 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e114      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a0>
 8001c5a:	bf00      	nop
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c64:	4b89      	ldr	r3, [pc, #548]	; (8001e8c <HAL_RCC_OscConfig+0x7a8>)
 8001c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1e8      	bne.n	8001c44 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c72:	7ffb      	ldrb	r3, [r7, #31]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d105      	bne.n	8001c84 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c78:	4b84      	ldr	r3, [pc, #528]	; (8001e8c <HAL_RCC_OscConfig+0x7a8>)
 8001c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7c:	4a83      	ldr	r2, [pc, #524]	; (8001e8c <HAL_RCC_OscConfig+0x7a8>)
 8001c7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c82:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 80fa 	beq.w	8001e82 <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	f040 80d0 	bne.w	8001e38 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c98:	4b7c      	ldr	r3, [pc, #496]	; (8001e8c <HAL_RCC_OscConfig+0x7a8>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f003 0203 	and.w	r2, r3, #3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d130      	bne.n	8001d0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d127      	bne.n	8001d0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d11f      	bne.n	8001d0e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cd8:	2a07      	cmp	r2, #7
 8001cda:	bf14      	ite	ne
 8001cdc:	2201      	movne	r2, #1
 8001cde:	2200      	moveq	r2, #0
 8001ce0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d113      	bne.n	8001d0e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf0:	085b      	lsrs	r3, r3, #1
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d109      	bne.n	8001d0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	085b      	lsrs	r3, r3, #1
 8001d06:	3b01      	subs	r3, #1
 8001d08:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d06e      	beq.n	8001dec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	2b0c      	cmp	r3, #12
 8001d12:	d069      	beq.n	8001de8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d14:	4b5d      	ldr	r3, [pc, #372]	; (8001e8c <HAL_RCC_OscConfig+0x7a8>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d105      	bne.n	8001d2c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d20:	4b5a      	ldr	r3, [pc, #360]	; (8001e8c <HAL_RCC_OscConfig+0x7a8>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e0a9      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d30:	4b56      	ldr	r3, [pc, #344]	; (8001e8c <HAL_RCC_OscConfig+0x7a8>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a55      	ldr	r2, [pc, #340]	; (8001e8c <HAL_RCC_OscConfig+0x7a8>)
 8001d36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d3a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d3c:	f7ff f8ec 	bl	8000f18 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d44:	f7ff f8e8 	bl	8000f18 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e096      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d56:	4b4d      	ldr	r3, [pc, #308]	; (8001e8c <HAL_RCC_OscConfig+0x7a8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f0      	bne.n	8001d44 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d62:	4b4a      	ldr	r3, [pc, #296]	; (8001e8c <HAL_RCC_OscConfig+0x7a8>)
 8001d64:	68da      	ldr	r2, [r3, #12]
 8001d66:	4b4a      	ldr	r3, [pc, #296]	; (8001e90 <HAL_RCC_OscConfig+0x7ac>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d72:	3a01      	subs	r2, #1
 8001d74:	0112      	lsls	r2, r2, #4
 8001d76:	4311      	orrs	r1, r2
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d7c:	0212      	lsls	r2, r2, #8
 8001d7e:	4311      	orrs	r1, r2
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d84:	0852      	lsrs	r2, r2, #1
 8001d86:	3a01      	subs	r2, #1
 8001d88:	0552      	lsls	r2, r2, #21
 8001d8a:	4311      	orrs	r1, r2
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d90:	0852      	lsrs	r2, r2, #1
 8001d92:	3a01      	subs	r2, #1
 8001d94:	0652      	lsls	r2, r2, #25
 8001d96:	4311      	orrs	r1, r2
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d9c:	0912      	lsrs	r2, r2, #4
 8001d9e:	0452      	lsls	r2, r2, #17
 8001da0:	430a      	orrs	r2, r1
 8001da2:	493a      	ldr	r1, [pc, #232]	; (8001e8c <HAL_RCC_OscConfig+0x7a8>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001da8:	4b38      	ldr	r3, [pc, #224]	; (8001e8c <HAL_RCC_OscConfig+0x7a8>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a37      	ldr	r2, [pc, #220]	; (8001e8c <HAL_RCC_OscConfig+0x7a8>)
 8001dae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001db2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001db4:	4b35      	ldr	r3, [pc, #212]	; (8001e8c <HAL_RCC_OscConfig+0x7a8>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	4a34      	ldr	r2, [pc, #208]	; (8001e8c <HAL_RCC_OscConfig+0x7a8>)
 8001dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dbe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dc0:	f7ff f8aa 	bl	8000f18 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc8:	f7ff f8a6 	bl	8000f18 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e054      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dda:	4b2c      	ldr	r3, [pc, #176]	; (8001e8c <HAL_RCC_OscConfig+0x7a8>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001de6:	e04c      	b.n	8001e82 <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e04b      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dec:	4b27      	ldr	r3, [pc, #156]	; (8001e8c <HAL_RCC_OscConfig+0x7a8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d144      	bne.n	8001e82 <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001df8:	4b24      	ldr	r3, [pc, #144]	; (8001e8c <HAL_RCC_OscConfig+0x7a8>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a23      	ldr	r2, [pc, #140]	; (8001e8c <HAL_RCC_OscConfig+0x7a8>)
 8001dfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e04:	4b21      	ldr	r3, [pc, #132]	; (8001e8c <HAL_RCC_OscConfig+0x7a8>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	4a20      	ldr	r2, [pc, #128]	; (8001e8c <HAL_RCC_OscConfig+0x7a8>)
 8001e0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e10:	f7ff f882 	bl	8000f18 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e18:	f7ff f87e 	bl	8000f18 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e02c      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e2a:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <HAL_RCC_OscConfig+0x7a8>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <HAL_RCC_OscConfig+0x734>
 8001e36:	e024      	b.n	8001e82 <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	2b0c      	cmp	r3, #12
 8001e3c:	d01f      	beq.n	8001e7e <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3e:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <HAL_RCC_OscConfig+0x7a8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a12      	ldr	r2, [pc, #72]	; (8001e8c <HAL_RCC_OscConfig+0x7a8>)
 8001e44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4a:	f7ff f865 	bl	8000f18 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e52:	f7ff f861 	bl	8000f18 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e00f      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e64:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <HAL_RCC_OscConfig+0x7a8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1f0      	bne.n	8001e52 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <HAL_RCC_OscConfig+0x7a8>)
 8001e72:	68da      	ldr	r2, [r3, #12]
 8001e74:	4905      	ldr	r1, [pc, #20]	; (8001e8c <HAL_RCC_OscConfig+0x7a8>)
 8001e76:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <HAL_RCC_OscConfig+0x7b0>)
 8001e78:	4013      	ands	r3, r2
 8001e7a:	60cb      	str	r3, [r1, #12]
 8001e7c:	e001      	b.n	8001e82 <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3720      	adds	r7, #32
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	f99d808c 	.word	0xf99d808c
 8001e94:	feeefffc 	.word	0xfeeefffc

08001e98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e0e7      	b.n	800207c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eac:	4b75      	ldr	r3, [pc, #468]	; (8002084 <HAL_RCC_ClockConfig+0x1ec>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d910      	bls.n	8001edc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eba:	4b72      	ldr	r3, [pc, #456]	; (8002084 <HAL_RCC_ClockConfig+0x1ec>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f023 0207 	bic.w	r2, r3, #7
 8001ec2:	4970      	ldr	r1, [pc, #448]	; (8002084 <HAL_RCC_ClockConfig+0x1ec>)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eca:	4b6e      	ldr	r3, [pc, #440]	; (8002084 <HAL_RCC_ClockConfig+0x1ec>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d001      	beq.n	8001edc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e0cf      	b.n	800207c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d010      	beq.n	8001f0a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	4b66      	ldr	r3, [pc, #408]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d908      	bls.n	8001f0a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef8:	4b63      	ldr	r3, [pc, #396]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	4960      	ldr	r1, [pc, #384]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d04c      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b03      	cmp	r3, #3
 8001f1c:	d107      	bne.n	8001f2e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f1e:	4b5a      	ldr	r3, [pc, #360]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d121      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e0a6      	b.n	800207c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d107      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f36:	4b54      	ldr	r3, [pc, #336]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d115      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e09a      	b.n	800207c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d107      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f4e:	4b4e      	ldr	r3, [pc, #312]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d109      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e08e      	b.n	800207c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f5e:	4b4a      	ldr	r3, [pc, #296]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e086      	b.n	800207c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f6e:	4b46      	ldr	r3, [pc, #280]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f023 0203 	bic.w	r2, r3, #3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	4943      	ldr	r1, [pc, #268]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f80:	f7fe ffca 	bl	8000f18 <HAL_GetTick>
 8001f84:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f86:	e00a      	b.n	8001f9e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f88:	f7fe ffc6 	bl	8000f18 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e06e      	b.n	800207c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9e:	4b3a      	ldr	r3, [pc, #232]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 020c 	and.w	r2, r3, #12
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d1eb      	bne.n	8001f88 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d010      	beq.n	8001fde <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	4b31      	ldr	r3, [pc, #196]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d208      	bcs.n	8001fde <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fcc:	4b2e      	ldr	r3, [pc, #184]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	492b      	ldr	r1, [pc, #172]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fde:	4b29      	ldr	r3, [pc, #164]	; (8002084 <HAL_RCC_ClockConfig+0x1ec>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d210      	bcs.n	800200e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fec:	4b25      	ldr	r3, [pc, #148]	; (8002084 <HAL_RCC_ClockConfig+0x1ec>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f023 0207 	bic.w	r2, r3, #7
 8001ff4:	4923      	ldr	r1, [pc, #140]	; (8002084 <HAL_RCC_ClockConfig+0x1ec>)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffc:	4b21      	ldr	r3, [pc, #132]	; (8002084 <HAL_RCC_ClockConfig+0x1ec>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d001      	beq.n	800200e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e036      	b.n	800207c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	2b00      	cmp	r3, #0
 8002018:	d008      	beq.n	800202c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800201a:	4b1b      	ldr	r3, [pc, #108]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	4918      	ldr	r1, [pc, #96]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8002028:	4313      	orrs	r3, r2
 800202a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	2b00      	cmp	r3, #0
 8002036:	d009      	beq.n	800204c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002038:	4b13      	ldr	r3, [pc, #76]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4910      	ldr	r1, [pc, #64]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8002048:	4313      	orrs	r3, r2
 800204a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800204c:	f000 f824 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 8002050:	4602      	mov	r2, r0
 8002052:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	091b      	lsrs	r3, r3, #4
 8002058:	f003 030f 	and.w	r3, r3, #15
 800205c:	490b      	ldr	r1, [pc, #44]	; (800208c <HAL_RCC_ClockConfig+0x1f4>)
 800205e:	5ccb      	ldrb	r3, [r1, r3]
 8002060:	f003 031f 	and.w	r3, r3, #31
 8002064:	fa22 f303 	lsr.w	r3, r2, r3
 8002068:	4a09      	ldr	r2, [pc, #36]	; (8002090 <HAL_RCC_ClockConfig+0x1f8>)
 800206a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800206c:	4b09      	ldr	r3, [pc, #36]	; (8002094 <HAL_RCC_ClockConfig+0x1fc>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe ff01 	bl	8000e78 <HAL_InitTick>
 8002076:	4603      	mov	r3, r0
 8002078:	72fb      	strb	r3, [r7, #11]

  return status;
 800207a:	7afb      	ldrb	r3, [r7, #11]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40022000 	.word	0x40022000
 8002088:	40021000 	.word	0x40021000
 800208c:	08004bf8 	.word	0x08004bf8
 8002090:	20000018 	.word	0x20000018
 8002094:	2000001c 	.word	0x2000001c

08002098 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002098:	b480      	push	{r7}
 800209a:	b089      	sub	sp, #36	; 0x24
 800209c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	2300      	movs	r3, #0
 80020a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020a6:	4b3e      	ldr	r3, [pc, #248]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020b0:	4b3b      	ldr	r3, [pc, #236]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d005      	beq.n	80020cc <HAL_RCC_GetSysClockFreq+0x34>
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	2b0c      	cmp	r3, #12
 80020c4:	d121      	bne.n	800210a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d11e      	bne.n	800210a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020cc:	4b34      	ldr	r3, [pc, #208]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0308 	and.w	r3, r3, #8
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d107      	bne.n	80020e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020d8:	4b31      	ldr	r3, [pc, #196]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020de:	0a1b      	lsrs	r3, r3, #8
 80020e0:	f003 030f 	and.w	r3, r3, #15
 80020e4:	61fb      	str	r3, [r7, #28]
 80020e6:	e005      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020e8:	4b2d      	ldr	r3, [pc, #180]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	091b      	lsrs	r3, r3, #4
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020f4:	4a2b      	ldr	r2, [pc, #172]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10d      	bne.n	8002120 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002108:	e00a      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	2b04      	cmp	r3, #4
 800210e:	d102      	bne.n	8002116 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002110:	4b25      	ldr	r3, [pc, #148]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002112:	61bb      	str	r3, [r7, #24]
 8002114:	e004      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	2b08      	cmp	r3, #8
 800211a:	d101      	bne.n	8002120 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800211c:	4b23      	ldr	r3, [pc, #140]	; (80021ac <HAL_RCC_GetSysClockFreq+0x114>)
 800211e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	2b0c      	cmp	r3, #12
 8002124:	d134      	bne.n	8002190 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002126:	4b1e      	ldr	r3, [pc, #120]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d003      	beq.n	800213e <HAL_RCC_GetSysClockFreq+0xa6>
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	2b03      	cmp	r3, #3
 800213a:	d003      	beq.n	8002144 <HAL_RCC_GetSysClockFreq+0xac>
 800213c:	e005      	b.n	800214a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800213e:	4b1a      	ldr	r3, [pc, #104]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002140:	617b      	str	r3, [r7, #20]
      break;
 8002142:	e005      	b.n	8002150 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002144:	4b19      	ldr	r3, [pc, #100]	; (80021ac <HAL_RCC_GetSysClockFreq+0x114>)
 8002146:	617b      	str	r3, [r7, #20]
      break;
 8002148:	e002      	b.n	8002150 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	617b      	str	r3, [r7, #20]
      break;
 800214e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002150:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	091b      	lsrs	r3, r3, #4
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	3301      	adds	r3, #1
 800215c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800215e:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	0a1b      	lsrs	r3, r3, #8
 8002164:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	fb02 f203 	mul.w	r2, r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	fbb2 f3f3 	udiv	r3, r2, r3
 8002174:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002176:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	0e5b      	lsrs	r3, r3, #25
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	3301      	adds	r3, #1
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	fbb2 f3f3 	udiv	r3, r2, r3
 800218e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002190:	69bb      	ldr	r3, [r7, #24]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3724      	adds	r7, #36	; 0x24
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40021000 	.word	0x40021000
 80021a4:	08004c10 	.word	0x08004c10
 80021a8:	00f42400 	.word	0x00f42400
 80021ac:	007a1200 	.word	0x007a1200

080021b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021b4:	4b03      	ldr	r3, [pc, #12]	; (80021c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80021b6:	681b      	ldr	r3, [r3, #0]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	20000018 	.word	0x20000018

080021c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021cc:	f7ff fff0 	bl	80021b0 <HAL_RCC_GetHCLKFreq>
 80021d0:	4602      	mov	r2, r0
 80021d2:	4b06      	ldr	r3, [pc, #24]	; (80021ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	0a1b      	lsrs	r3, r3, #8
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	4904      	ldr	r1, [pc, #16]	; (80021f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021de:	5ccb      	ldrb	r3, [r1, r3]
 80021e0:	f003 031f 	and.w	r3, r3, #31
 80021e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40021000 	.word	0x40021000
 80021f0:	08004c08 	.word	0x08004c08

080021f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021f8:	f7ff ffda 	bl	80021b0 <HAL_RCC_GetHCLKFreq>
 80021fc:	4602      	mov	r2, r0
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	0adb      	lsrs	r3, r3, #11
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	4904      	ldr	r1, [pc, #16]	; (800221c <HAL_RCC_GetPCLK2Freq+0x28>)
 800220a:	5ccb      	ldrb	r3, [r1, r3]
 800220c:	f003 031f 	and.w	r3, r3, #31
 8002210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002214:	4618      	mov	r0, r3
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40021000 	.word	0x40021000
 800221c:	08004c08 	.word	0x08004c08

08002220 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002228:	2300      	movs	r3, #0
 800222a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800222c:	4b2a      	ldr	r3, [pc, #168]	; (80022d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800222e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002238:	f7ff f9f0 	bl	800161c <HAL_PWREx_GetVoltageRange>
 800223c:	6178      	str	r0, [r7, #20]
 800223e:	e014      	b.n	800226a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002240:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002244:	4a24      	ldr	r2, [pc, #144]	; (80022d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800224a:	6593      	str	r3, [r2, #88]	; 0x58
 800224c:	4b22      	ldr	r3, [pc, #136]	; (80022d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800224e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002258:	f7ff f9e0 	bl	800161c <HAL_PWREx_GetVoltageRange>
 800225c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800225e:	4b1e      	ldr	r3, [pc, #120]	; (80022d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002262:	4a1d      	ldr	r2, [pc, #116]	; (80022d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002268:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002270:	d10b      	bne.n	800228a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b80      	cmp	r3, #128	; 0x80
 8002276:	d919      	bls.n	80022ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2ba0      	cmp	r3, #160	; 0xa0
 800227c:	d902      	bls.n	8002284 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800227e:	2302      	movs	r3, #2
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	e013      	b.n	80022ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002284:	2301      	movs	r3, #1
 8002286:	613b      	str	r3, [r7, #16]
 8002288:	e010      	b.n	80022ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b80      	cmp	r3, #128	; 0x80
 800228e:	d902      	bls.n	8002296 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002290:	2303      	movs	r3, #3
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	e00a      	b.n	80022ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b80      	cmp	r3, #128	; 0x80
 800229a:	d102      	bne.n	80022a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800229c:	2302      	movs	r3, #2
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	e004      	b.n	80022ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b70      	cmp	r3, #112	; 0x70
 80022a6:	d101      	bne.n	80022ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022a8:	2301      	movs	r3, #1
 80022aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022ac:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f023 0207 	bic.w	r2, r3, #7
 80022b4:	4909      	ldr	r1, [pc, #36]	; (80022dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022bc:	4b07      	ldr	r3, [pc, #28]	; (80022dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d001      	beq.n	80022ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40022000 	.word	0x40022000

080022e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022e8:	2300      	movs	r3, #0
 80022ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022ec:	2300      	movs	r3, #0
 80022ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d041      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002300:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002304:	d02a      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002306:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800230a:	d824      	bhi.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800230c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002310:	d008      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002312:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002316:	d81e      	bhi.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00a      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800231c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002320:	d010      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002322:	e018      	b.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002324:	4b86      	ldr	r3, [pc, #536]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	4a85      	ldr	r2, [pc, #532]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800232a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002330:	e015      	b.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3304      	adds	r3, #4
 8002336:	2100      	movs	r1, #0
 8002338:	4618      	mov	r0, r3
 800233a:	f000 fabb 	bl	80028b4 <RCCEx_PLLSAI1_Config>
 800233e:	4603      	mov	r3, r0
 8002340:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002342:	e00c      	b.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3320      	adds	r3, #32
 8002348:	2100      	movs	r1, #0
 800234a:	4618      	mov	r0, r3
 800234c:	f000 fba6 	bl	8002a9c <RCCEx_PLLSAI2_Config>
 8002350:	4603      	mov	r3, r0
 8002352:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002354:	e003      	b.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	74fb      	strb	r3, [r7, #19]
      break;
 800235a:	e000      	b.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800235c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800235e:	7cfb      	ldrb	r3, [r7, #19]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10b      	bne.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002364:	4b76      	ldr	r3, [pc, #472]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002372:	4973      	ldr	r1, [pc, #460]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800237a:	e001      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800237c:	7cfb      	ldrb	r3, [r7, #19]
 800237e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d041      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002390:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002394:	d02a      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002396:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800239a:	d824      	bhi.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800239c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023a0:	d008      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80023a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023a6:	d81e      	bhi.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00a      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80023ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023b0:	d010      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80023b2:	e018      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023b4:	4b62      	ldr	r3, [pc, #392]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4a61      	ldr	r2, [pc, #388]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023be:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023c0:	e015      	b.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3304      	adds	r3, #4
 80023c6:	2100      	movs	r1, #0
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 fa73 	bl	80028b4 <RCCEx_PLLSAI1_Config>
 80023ce:	4603      	mov	r3, r0
 80023d0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023d2:	e00c      	b.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3320      	adds	r3, #32
 80023d8:	2100      	movs	r1, #0
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 fb5e 	bl	8002a9c <RCCEx_PLLSAI2_Config>
 80023e0:	4603      	mov	r3, r0
 80023e2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023e4:	e003      	b.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	74fb      	strb	r3, [r7, #19]
      break;
 80023ea:	e000      	b.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80023ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023ee:	7cfb      	ldrb	r3, [r7, #19]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10b      	bne.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023f4:	4b52      	ldr	r3, [pc, #328]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002402:	494f      	ldr	r1, [pc, #316]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002404:	4313      	orrs	r3, r2
 8002406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800240a:	e001      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800240c:	7cfb      	ldrb	r3, [r7, #19]
 800240e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 80a0 	beq.w	800255e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800241e:	2300      	movs	r3, #0
 8002420:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002422:	4b47      	ldr	r3, [pc, #284]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002432:	2300      	movs	r3, #0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00d      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002438:	4b41      	ldr	r3, [pc, #260]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800243a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243c:	4a40      	ldr	r2, [pc, #256]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800243e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002442:	6593      	str	r3, [r2, #88]	; 0x58
 8002444:	4b3e      	ldr	r3, [pc, #248]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002450:	2301      	movs	r3, #1
 8002452:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002454:	4b3b      	ldr	r3, [pc, #236]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a3a      	ldr	r2, [pc, #232]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800245a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800245e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002460:	f7fe fd5a 	bl	8000f18 <HAL_GetTick>
 8002464:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002466:	e009      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002468:	f7fe fd56 	bl	8000f18 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d902      	bls.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	74fb      	strb	r3, [r7, #19]
        break;
 800247a:	e005      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800247c:	4b31      	ldr	r3, [pc, #196]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0ef      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002488:	7cfb      	ldrb	r3, [r7, #19]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d15c      	bne.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800248e:	4b2c      	ldr	r3, [pc, #176]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002494:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002498:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d01f      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d019      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024ac:	4b24      	ldr	r3, [pc, #144]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024b8:	4b21      	ldr	r3, [pc, #132]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024be:	4a20      	ldr	r2, [pc, #128]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024c8:	4b1d      	ldr	r3, [pc, #116]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ce:	4a1c      	ldr	r2, [pc, #112]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024d8:	4a19      	ldr	r2, [pc, #100]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d016      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ea:	f7fe fd15 	bl	8000f18 <HAL_GetTick>
 80024ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024f0:	e00b      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f2:	f7fe fd11 	bl	8000f18 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002500:	4293      	cmp	r3, r2
 8002502:	d902      	bls.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	74fb      	strb	r3, [r7, #19]
            break;
 8002508:	e006      	b.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800250a:	4b0d      	ldr	r3, [pc, #52]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800250c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0ec      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002518:	7cfb      	ldrb	r3, [r7, #19]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10c      	bne.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800251e:	4b08      	ldr	r3, [pc, #32]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002524:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800252e:	4904      	ldr	r1, [pc, #16]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002530:	4313      	orrs	r3, r2
 8002532:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002536:	e009      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002538:	7cfb      	ldrb	r3, [r7, #19]
 800253a:	74bb      	strb	r3, [r7, #18]
 800253c:	e006      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800253e:	bf00      	nop
 8002540:	40021000 	.word	0x40021000
 8002544:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002548:	7cfb      	ldrb	r3, [r7, #19]
 800254a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800254c:	7c7b      	ldrb	r3, [r7, #17]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d105      	bne.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002552:	4b9e      	ldr	r3, [pc, #632]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002556:	4a9d      	ldr	r2, [pc, #628]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002558:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800255c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00a      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800256a:	4b98      	ldr	r3, [pc, #608]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002570:	f023 0203 	bic.w	r2, r3, #3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002578:	4994      	ldr	r1, [pc, #592]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800257a:	4313      	orrs	r3, r2
 800257c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00a      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800258c:	4b8f      	ldr	r3, [pc, #572]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002592:	f023 020c 	bic.w	r2, r3, #12
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259a:	498c      	ldr	r1, [pc, #560]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259c:	4313      	orrs	r3, r2
 800259e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0304 	and.w	r3, r3, #4
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00a      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025ae:	4b87      	ldr	r3, [pc, #540]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	4983      	ldr	r1, [pc, #524]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0308 	and.w	r3, r3, #8
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00a      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025d0:	4b7e      	ldr	r3, [pc, #504]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025de:	497b      	ldr	r1, [pc, #492]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00a      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025f2:	4b76      	ldr	r3, [pc, #472]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002600:	4972      	ldr	r1, [pc, #456]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002602:	4313      	orrs	r3, r2
 8002604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0320 	and.w	r3, r3, #32
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00a      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002614:	4b6d      	ldr	r3, [pc, #436]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002622:	496a      	ldr	r1, [pc, #424]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002624:	4313      	orrs	r3, r2
 8002626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00a      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002636:	4b65      	ldr	r3, [pc, #404]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002644:	4961      	ldr	r1, [pc, #388]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002646:	4313      	orrs	r3, r2
 8002648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00a      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002658:	4b5c      	ldr	r3, [pc, #368]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002666:	4959      	ldr	r1, [pc, #356]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800267a:	4b54      	ldr	r3, [pc, #336]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002680:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002688:	4950      	ldr	r1, [pc, #320]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268a:	4313      	orrs	r3, r2
 800268c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00a      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800269c:	4b4b      	ldr	r3, [pc, #300]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026aa:	4948      	ldr	r1, [pc, #288]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00a      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026be:	4b43      	ldr	r3, [pc, #268]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026cc:	493f      	ldr	r1, [pc, #252]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d028      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026e0:	4b3a      	ldr	r3, [pc, #232]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026ee:	4937      	ldr	r1, [pc, #220]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026fe:	d106      	bne.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002700:	4b32      	ldr	r3, [pc, #200]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	4a31      	ldr	r2, [pc, #196]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002706:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800270a:	60d3      	str	r3, [r2, #12]
 800270c:	e011      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002712:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002716:	d10c      	bne.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3304      	adds	r3, #4
 800271c:	2101      	movs	r1, #1
 800271e:	4618      	mov	r0, r3
 8002720:	f000 f8c8 	bl	80028b4 <RCCEx_PLLSAI1_Config>
 8002724:	4603      	mov	r3, r0
 8002726:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002728:	7cfb      	ldrb	r3, [r7, #19]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800272e:	7cfb      	ldrb	r3, [r7, #19]
 8002730:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d028      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800273e:	4b23      	ldr	r3, [pc, #140]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002744:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274c:	491f      	ldr	r1, [pc, #124]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274e:	4313      	orrs	r3, r2
 8002750:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002758:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800275c:	d106      	bne.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800275e:	4b1b      	ldr	r3, [pc, #108]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	4a1a      	ldr	r2, [pc, #104]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002764:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002768:	60d3      	str	r3, [r2, #12]
 800276a:	e011      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002770:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002774:	d10c      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	3304      	adds	r3, #4
 800277a:	2101      	movs	r1, #1
 800277c:	4618      	mov	r0, r3
 800277e:	f000 f899 	bl	80028b4 <RCCEx_PLLSAI1_Config>
 8002782:	4603      	mov	r3, r0
 8002784:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002786:	7cfb      	ldrb	r3, [r7, #19]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800278c:	7cfb      	ldrb	r3, [r7, #19]
 800278e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d02b      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800279c:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027aa:	4908      	ldr	r1, [pc, #32]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027ba:	d109      	bne.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027bc:	4b03      	ldr	r3, [pc, #12]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	4a02      	ldr	r2, [pc, #8]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027c6:	60d3      	str	r3, [r2, #12]
 80027c8:	e014      	b.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80027ca:	bf00      	nop
 80027cc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027d8:	d10c      	bne.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	3304      	adds	r3, #4
 80027de:	2101      	movs	r1, #1
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 f867 	bl	80028b4 <RCCEx_PLLSAI1_Config>
 80027e6:	4603      	mov	r3, r0
 80027e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027ea:	7cfb      	ldrb	r3, [r7, #19]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80027f0:	7cfb      	ldrb	r3, [r7, #19]
 80027f2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d02f      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002800:	4b2b      	ldr	r3, [pc, #172]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002806:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800280e:	4928      	ldr	r1, [pc, #160]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002810:	4313      	orrs	r3, r2
 8002812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800281a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800281e:	d10d      	bne.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3304      	adds	r3, #4
 8002824:	2102      	movs	r1, #2
 8002826:	4618      	mov	r0, r3
 8002828:	f000 f844 	bl	80028b4 <RCCEx_PLLSAI1_Config>
 800282c:	4603      	mov	r3, r0
 800282e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002830:	7cfb      	ldrb	r3, [r7, #19]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d014      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002836:	7cfb      	ldrb	r3, [r7, #19]
 8002838:	74bb      	strb	r3, [r7, #18]
 800283a:	e011      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002840:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002844:	d10c      	bne.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3320      	adds	r3, #32
 800284a:	2102      	movs	r1, #2
 800284c:	4618      	mov	r0, r3
 800284e:	f000 f925 	bl	8002a9c <RCCEx_PLLSAI2_Config>
 8002852:	4603      	mov	r3, r0
 8002854:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002856:	7cfb      	ldrb	r3, [r7, #19]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800285c:	7cfb      	ldrb	r3, [r7, #19]
 800285e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00a      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800286c:	4b10      	ldr	r3, [pc, #64]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800286e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002872:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800287a:	490d      	ldr	r1, [pc, #52]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800287c:	4313      	orrs	r3, r2
 800287e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00b      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800288e:	4b08      	ldr	r3, [pc, #32]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002894:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800289e:	4904      	ldr	r1, [pc, #16]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028a6:	7cbb      	ldrb	r3, [r7, #18]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40021000 	.word	0x40021000

080028b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028c2:	4b75      	ldr	r3, [pc, #468]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d018      	beq.n	8002900 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80028ce:	4b72      	ldr	r3, [pc, #456]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f003 0203 	and.w	r2, r3, #3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d10d      	bne.n	80028fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
       ||
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d009      	beq.n	80028fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80028e6:	4b6c      	ldr	r3, [pc, #432]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	091b      	lsrs	r3, r3, #4
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
       ||
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d047      	beq.n	800298a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	73fb      	strb	r3, [r7, #15]
 80028fe:	e044      	b.n	800298a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2b03      	cmp	r3, #3
 8002906:	d018      	beq.n	800293a <RCCEx_PLLSAI1_Config+0x86>
 8002908:	2b03      	cmp	r3, #3
 800290a:	d825      	bhi.n	8002958 <RCCEx_PLLSAI1_Config+0xa4>
 800290c:	2b01      	cmp	r3, #1
 800290e:	d002      	beq.n	8002916 <RCCEx_PLLSAI1_Config+0x62>
 8002910:	2b02      	cmp	r3, #2
 8002912:	d009      	beq.n	8002928 <RCCEx_PLLSAI1_Config+0x74>
 8002914:	e020      	b.n	8002958 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002916:	4b60      	ldr	r3, [pc, #384]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d11d      	bne.n	800295e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002926:	e01a      	b.n	800295e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002928:	4b5b      	ldr	r3, [pc, #364]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002930:	2b00      	cmp	r3, #0
 8002932:	d116      	bne.n	8002962 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002938:	e013      	b.n	8002962 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800293a:	4b57      	ldr	r3, [pc, #348]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10f      	bne.n	8002966 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002946:	4b54      	ldr	r3, [pc, #336]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d109      	bne.n	8002966 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002956:	e006      	b.n	8002966 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	73fb      	strb	r3, [r7, #15]
      break;
 800295c:	e004      	b.n	8002968 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800295e:	bf00      	nop
 8002960:	e002      	b.n	8002968 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002962:	bf00      	nop
 8002964:	e000      	b.n	8002968 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002966:	bf00      	nop
    }

    if(status == HAL_OK)
 8002968:	7bfb      	ldrb	r3, [r7, #15]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10d      	bne.n	800298a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800296e:	4b4a      	ldr	r3, [pc, #296]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6819      	ldr	r1, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	3b01      	subs	r3, #1
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	430b      	orrs	r3, r1
 8002984:	4944      	ldr	r1, [pc, #272]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002986:	4313      	orrs	r3, r2
 8002988:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d17d      	bne.n	8002a8c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002990:	4b41      	ldr	r3, [pc, #260]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a40      	ldr	r2, [pc, #256]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002996:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800299a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800299c:	f7fe fabc 	bl	8000f18 <HAL_GetTick>
 80029a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029a2:	e009      	b.n	80029b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029a4:	f7fe fab8 	bl	8000f18 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d902      	bls.n	80029b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	73fb      	strb	r3, [r7, #15]
        break;
 80029b6:	e005      	b.n	80029c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029b8:	4b37      	ldr	r3, [pc, #220]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1ef      	bne.n	80029a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d160      	bne.n	8002a8c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d111      	bne.n	80029f4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029d0:	4b31      	ldr	r3, [pc, #196]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80029d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6892      	ldr	r2, [r2, #8]
 80029e0:	0211      	lsls	r1, r2, #8
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	68d2      	ldr	r2, [r2, #12]
 80029e6:	0912      	lsrs	r2, r2, #4
 80029e8:	0452      	lsls	r2, r2, #17
 80029ea:	430a      	orrs	r2, r1
 80029ec:	492a      	ldr	r1, [pc, #168]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	610b      	str	r3, [r1, #16]
 80029f2:	e027      	b.n	8002a44 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d112      	bne.n	8002a20 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029fa:	4b27      	ldr	r3, [pc, #156]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a02:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6892      	ldr	r2, [r2, #8]
 8002a0a:	0211      	lsls	r1, r2, #8
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6912      	ldr	r2, [r2, #16]
 8002a10:	0852      	lsrs	r2, r2, #1
 8002a12:	3a01      	subs	r2, #1
 8002a14:	0552      	lsls	r2, r2, #21
 8002a16:	430a      	orrs	r2, r1
 8002a18:	491f      	ldr	r1, [pc, #124]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	610b      	str	r3, [r1, #16]
 8002a1e:	e011      	b.n	8002a44 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a20:	4b1d      	ldr	r3, [pc, #116]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a28:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6892      	ldr	r2, [r2, #8]
 8002a30:	0211      	lsls	r1, r2, #8
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6952      	ldr	r2, [r2, #20]
 8002a36:	0852      	lsrs	r2, r2, #1
 8002a38:	3a01      	subs	r2, #1
 8002a3a:	0652      	lsls	r2, r2, #25
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	4916      	ldr	r1, [pc, #88]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a44:	4b14      	ldr	r3, [pc, #80]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a13      	ldr	r2, [pc, #76]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a50:	f7fe fa62 	bl	8000f18 <HAL_GetTick>
 8002a54:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a56:	e009      	b.n	8002a6c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a58:	f7fe fa5e 	bl	8000f18 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d902      	bls.n	8002a6c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	73fb      	strb	r3, [r7, #15]
          break;
 8002a6a:	e005      	b.n	8002a78 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a6c:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0ef      	beq.n	8002a58 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d106      	bne.n	8002a8c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a7e:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a80:	691a      	ldr	r2, [r3, #16]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	4904      	ldr	r1, [pc, #16]	; (8002a98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40021000 	.word	0x40021000

08002a9c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002aaa:	4b6a      	ldr	r3, [pc, #424]	; (8002c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d018      	beq.n	8002ae8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ab6:	4b67      	ldr	r3, [pc, #412]	; (8002c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f003 0203 	and.w	r2, r3, #3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d10d      	bne.n	8002ae2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
       ||
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d009      	beq.n	8002ae2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002ace:	4b61      	ldr	r3, [pc, #388]	; (8002c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	091b      	lsrs	r3, r3, #4
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	1c5a      	adds	r2, r3, #1
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
       ||
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d047      	beq.n	8002b72 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	73fb      	strb	r3, [r7, #15]
 8002ae6:	e044      	b.n	8002b72 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b03      	cmp	r3, #3
 8002aee:	d018      	beq.n	8002b22 <RCCEx_PLLSAI2_Config+0x86>
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d825      	bhi.n	8002b40 <RCCEx_PLLSAI2_Config+0xa4>
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d002      	beq.n	8002afe <RCCEx_PLLSAI2_Config+0x62>
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d009      	beq.n	8002b10 <RCCEx_PLLSAI2_Config+0x74>
 8002afc:	e020      	b.n	8002b40 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002afe:	4b55      	ldr	r3, [pc, #340]	; (8002c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d11d      	bne.n	8002b46 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b0e:	e01a      	b.n	8002b46 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b10:	4b50      	ldr	r3, [pc, #320]	; (8002c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d116      	bne.n	8002b4a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b20:	e013      	b.n	8002b4a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b22:	4b4c      	ldr	r3, [pc, #304]	; (8002c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10f      	bne.n	8002b4e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b2e:	4b49      	ldr	r3, [pc, #292]	; (8002c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d109      	bne.n	8002b4e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b3e:	e006      	b.n	8002b4e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	73fb      	strb	r3, [r7, #15]
      break;
 8002b44:	e004      	b.n	8002b50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b46:	bf00      	nop
 8002b48:	e002      	b.n	8002b50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b4a:	bf00      	nop
 8002b4c:	e000      	b.n	8002b50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10d      	bne.n	8002b72 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b56:	4b3f      	ldr	r3, [pc, #252]	; (8002c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6819      	ldr	r1, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	430b      	orrs	r3, r1
 8002b6c:	4939      	ldr	r1, [pc, #228]	; (8002c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d167      	bne.n	8002c48 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b78:	4b36      	ldr	r3, [pc, #216]	; (8002c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a35      	ldr	r2, [pc, #212]	; (8002c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b84:	f7fe f9c8 	bl	8000f18 <HAL_GetTick>
 8002b88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b8a:	e009      	b.n	8002ba0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b8c:	f7fe f9c4 	bl	8000f18 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d902      	bls.n	8002ba0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	73fb      	strb	r3, [r7, #15]
        break;
 8002b9e:	e005      	b.n	8002bac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ba0:	4b2c      	ldr	r3, [pc, #176]	; (8002c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1ef      	bne.n	8002b8c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d14a      	bne.n	8002c48 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d111      	bne.n	8002bdc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bb8:	4b26      	ldr	r3, [pc, #152]	; (8002c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6892      	ldr	r2, [r2, #8]
 8002bc8:	0211      	lsls	r1, r2, #8
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	68d2      	ldr	r2, [r2, #12]
 8002bce:	0912      	lsrs	r2, r2, #4
 8002bd0:	0452      	lsls	r2, r2, #17
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	491f      	ldr	r1, [pc, #124]	; (8002c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	614b      	str	r3, [r1, #20]
 8002bda:	e011      	b.n	8002c00 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bdc:	4b1d      	ldr	r3, [pc, #116]	; (8002c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002be4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	6892      	ldr	r2, [r2, #8]
 8002bec:	0211      	lsls	r1, r2, #8
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6912      	ldr	r2, [r2, #16]
 8002bf2:	0852      	lsrs	r2, r2, #1
 8002bf4:	3a01      	subs	r2, #1
 8002bf6:	0652      	lsls	r2, r2, #25
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	4916      	ldr	r1, [pc, #88]	; (8002c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c00:	4b14      	ldr	r3, [pc, #80]	; (8002c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a13      	ldr	r2, [pc, #76]	; (8002c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0c:	f7fe f984 	bl	8000f18 <HAL_GetTick>
 8002c10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c12:	e009      	b.n	8002c28 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c14:	f7fe f980 	bl	8000f18 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d902      	bls.n	8002c28 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	73fb      	strb	r3, [r7, #15]
          break;
 8002c26:	e005      	b.n	8002c34 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c28:	4b0a      	ldr	r3, [pc, #40]	; (8002c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0ef      	beq.n	8002c14 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d106      	bne.n	8002c48 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c3a:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c3c:	695a      	ldr	r2, [r3, #20]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	4904      	ldr	r1, [pc, #16]	; (8002c54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40021000 	.word	0x40021000

08002c58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e049      	b.n	8002cfe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d106      	bne.n	8002c84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7fd ff90 	bl	8000ba4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3304      	adds	r3, #4
 8002c94:	4619      	mov	r1, r3
 8002c96:	4610      	mov	r0, r2
 8002c98:	f000 fa50 	bl	800313c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b082      	sub	sp, #8
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d122      	bne.n	8002d62 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d11b      	bne.n	8002d62 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f06f 0202 	mvn.w	r2, #2
 8002d32:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f9d8 	bl	80030fe <HAL_TIM_IC_CaptureCallback>
 8002d4e:	e005      	b.n	8002d5c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f9ca 	bl	80030ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f9db 	bl	8003112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b04      	cmp	r3, #4
 8002d6e:	d122      	bne.n	8002db6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	f003 0304 	and.w	r3, r3, #4
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d11b      	bne.n	8002db6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f06f 0204 	mvn.w	r2, #4
 8002d86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f9ae 	bl	80030fe <HAL_TIM_IC_CaptureCallback>
 8002da2:	e005      	b.n	8002db0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 f9a0 	bl	80030ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f9b1 	bl	8003112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	f003 0308 	and.w	r3, r3, #8
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d122      	bne.n	8002e0a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d11b      	bne.n	8002e0a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f06f 0208 	mvn.w	r2, #8
 8002dda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2204      	movs	r2, #4
 8002de0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	69db      	ldr	r3, [r3, #28]
 8002de8:	f003 0303 	and.w	r3, r3, #3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f984 	bl	80030fe <HAL_TIM_IC_CaptureCallback>
 8002df6:	e005      	b.n	8002e04 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 f976 	bl	80030ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f987 	bl	8003112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	f003 0310 	and.w	r3, r3, #16
 8002e14:	2b10      	cmp	r3, #16
 8002e16:	d122      	bne.n	8002e5e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	2b10      	cmp	r3, #16
 8002e24:	d11b      	bne.n	8002e5e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f06f 0210 	mvn.w	r2, #16
 8002e2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2208      	movs	r2, #8
 8002e34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f95a 	bl	80030fe <HAL_TIM_IC_CaptureCallback>
 8002e4a:	e005      	b.n	8002e58 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f94c 	bl	80030ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f95d 	bl	8003112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d10e      	bne.n	8002e8a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d107      	bne.n	8002e8a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f06f 0201 	mvn.w	r2, #1
 8002e82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 f926 	bl	80030d6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e94:	2b80      	cmp	r3, #128	; 0x80
 8002e96:	d10e      	bne.n	8002eb6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea2:	2b80      	cmp	r3, #128	; 0x80
 8002ea4:	d107      	bne.n	8002eb6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fb09 	bl	80034c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ec4:	d10e      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed0:	2b80      	cmp	r3, #128	; 0x80
 8002ed2:	d107      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 fafc 	bl	80034dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eee:	2b40      	cmp	r3, #64	; 0x40
 8002ef0:	d10e      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efc:	2b40      	cmp	r3, #64	; 0x40
 8002efe:	d107      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f90b 	bl	8003126 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f003 0320 	and.w	r3, r3, #32
 8002f1a:	2b20      	cmp	r3, #32
 8002f1c:	d10e      	bne.n	8002f3c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f003 0320 	and.w	r3, r3, #32
 8002f28:	2b20      	cmp	r3, #32
 8002f2a:	d107      	bne.n	8002f3c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0220 	mvn.w	r2, #32
 8002f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 fabc 	bl	80034b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f3c:	bf00      	nop
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d101      	bne.n	8002f60 <HAL_TIM_ConfigClockSource+0x1c>
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	e0b6      	b.n	80030ce <HAL_TIM_ConfigClockSource+0x18a>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68ba      	ldr	r2, [r7, #8]
 8002f92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f9c:	d03e      	beq.n	800301c <HAL_TIM_ConfigClockSource+0xd8>
 8002f9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fa2:	f200 8087 	bhi.w	80030b4 <HAL_TIM_ConfigClockSource+0x170>
 8002fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002faa:	f000 8086 	beq.w	80030ba <HAL_TIM_ConfigClockSource+0x176>
 8002fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb2:	d87f      	bhi.n	80030b4 <HAL_TIM_ConfigClockSource+0x170>
 8002fb4:	2b70      	cmp	r3, #112	; 0x70
 8002fb6:	d01a      	beq.n	8002fee <HAL_TIM_ConfigClockSource+0xaa>
 8002fb8:	2b70      	cmp	r3, #112	; 0x70
 8002fba:	d87b      	bhi.n	80030b4 <HAL_TIM_ConfigClockSource+0x170>
 8002fbc:	2b60      	cmp	r3, #96	; 0x60
 8002fbe:	d050      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0x11e>
 8002fc0:	2b60      	cmp	r3, #96	; 0x60
 8002fc2:	d877      	bhi.n	80030b4 <HAL_TIM_ConfigClockSource+0x170>
 8002fc4:	2b50      	cmp	r3, #80	; 0x50
 8002fc6:	d03c      	beq.n	8003042 <HAL_TIM_ConfigClockSource+0xfe>
 8002fc8:	2b50      	cmp	r3, #80	; 0x50
 8002fca:	d873      	bhi.n	80030b4 <HAL_TIM_ConfigClockSource+0x170>
 8002fcc:	2b40      	cmp	r3, #64	; 0x40
 8002fce:	d058      	beq.n	8003082 <HAL_TIM_ConfigClockSource+0x13e>
 8002fd0:	2b40      	cmp	r3, #64	; 0x40
 8002fd2:	d86f      	bhi.n	80030b4 <HAL_TIM_ConfigClockSource+0x170>
 8002fd4:	2b30      	cmp	r3, #48	; 0x30
 8002fd6:	d064      	beq.n	80030a2 <HAL_TIM_ConfigClockSource+0x15e>
 8002fd8:	2b30      	cmp	r3, #48	; 0x30
 8002fda:	d86b      	bhi.n	80030b4 <HAL_TIM_ConfigClockSource+0x170>
 8002fdc:	2b20      	cmp	r3, #32
 8002fde:	d060      	beq.n	80030a2 <HAL_TIM_ConfigClockSource+0x15e>
 8002fe0:	2b20      	cmp	r3, #32
 8002fe2:	d867      	bhi.n	80030b4 <HAL_TIM_ConfigClockSource+0x170>
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d05c      	beq.n	80030a2 <HAL_TIM_ConfigClockSource+0x15e>
 8002fe8:	2b10      	cmp	r3, #16
 8002fea:	d05a      	beq.n	80030a2 <HAL_TIM_ConfigClockSource+0x15e>
 8002fec:	e062      	b.n	80030b4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6818      	ldr	r0, [r3, #0]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	6899      	ldr	r1, [r3, #8]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f000 f9b1 	bl	8003364 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003010:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	609a      	str	r2, [r3, #8]
      break;
 800301a:	e04f      	b.n	80030bc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6818      	ldr	r0, [r3, #0]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	6899      	ldr	r1, [r3, #8]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f000 f99a 	bl	8003364 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800303e:	609a      	str	r2, [r3, #8]
      break;
 8003040:	e03c      	b.n	80030bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	6859      	ldr	r1, [r3, #4]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	461a      	mov	r2, r3
 8003050:	f000 f90e 	bl	8003270 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2150      	movs	r1, #80	; 0x50
 800305a:	4618      	mov	r0, r3
 800305c:	f000 f967 	bl	800332e <TIM_ITRx_SetConfig>
      break;
 8003060:	e02c      	b.n	80030bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6818      	ldr	r0, [r3, #0]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	6859      	ldr	r1, [r3, #4]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	461a      	mov	r2, r3
 8003070:	f000 f92d 	bl	80032ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2160      	movs	r1, #96	; 0x60
 800307a:	4618      	mov	r0, r3
 800307c:	f000 f957 	bl	800332e <TIM_ITRx_SetConfig>
      break;
 8003080:	e01c      	b.n	80030bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6818      	ldr	r0, [r3, #0]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	6859      	ldr	r1, [r3, #4]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	461a      	mov	r2, r3
 8003090:	f000 f8ee 	bl	8003270 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2140      	movs	r1, #64	; 0x40
 800309a:	4618      	mov	r0, r3
 800309c:	f000 f947 	bl	800332e <TIM_ITRx_SetConfig>
      break;
 80030a0:	e00c      	b.n	80030bc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4619      	mov	r1, r3
 80030ac:	4610      	mov	r0, r2
 80030ae:	f000 f93e 	bl	800332e <TIM_ITRx_SetConfig>
      break;
 80030b2:	e003      	b.n	80030bc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	73fb      	strb	r3, [r7, #15]
      break;
 80030b8:	e000      	b.n	80030bc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80030ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
	...

0800313c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a40      	ldr	r2, [pc, #256]	; (8003250 <TIM_Base_SetConfig+0x114>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d013      	beq.n	800317c <TIM_Base_SetConfig+0x40>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800315a:	d00f      	beq.n	800317c <TIM_Base_SetConfig+0x40>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a3d      	ldr	r2, [pc, #244]	; (8003254 <TIM_Base_SetConfig+0x118>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d00b      	beq.n	800317c <TIM_Base_SetConfig+0x40>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a3c      	ldr	r2, [pc, #240]	; (8003258 <TIM_Base_SetConfig+0x11c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d007      	beq.n	800317c <TIM_Base_SetConfig+0x40>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a3b      	ldr	r2, [pc, #236]	; (800325c <TIM_Base_SetConfig+0x120>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d003      	beq.n	800317c <TIM_Base_SetConfig+0x40>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a3a      	ldr	r2, [pc, #232]	; (8003260 <TIM_Base_SetConfig+0x124>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d108      	bne.n	800318e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	4313      	orrs	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a2f      	ldr	r2, [pc, #188]	; (8003250 <TIM_Base_SetConfig+0x114>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d01f      	beq.n	80031d6 <TIM_Base_SetConfig+0x9a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800319c:	d01b      	beq.n	80031d6 <TIM_Base_SetConfig+0x9a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a2c      	ldr	r2, [pc, #176]	; (8003254 <TIM_Base_SetConfig+0x118>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d017      	beq.n	80031d6 <TIM_Base_SetConfig+0x9a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a2b      	ldr	r2, [pc, #172]	; (8003258 <TIM_Base_SetConfig+0x11c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d013      	beq.n	80031d6 <TIM_Base_SetConfig+0x9a>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a2a      	ldr	r2, [pc, #168]	; (800325c <TIM_Base_SetConfig+0x120>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d00f      	beq.n	80031d6 <TIM_Base_SetConfig+0x9a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a29      	ldr	r2, [pc, #164]	; (8003260 <TIM_Base_SetConfig+0x124>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d00b      	beq.n	80031d6 <TIM_Base_SetConfig+0x9a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a28      	ldr	r2, [pc, #160]	; (8003264 <TIM_Base_SetConfig+0x128>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d007      	beq.n	80031d6 <TIM_Base_SetConfig+0x9a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a27      	ldr	r2, [pc, #156]	; (8003268 <TIM_Base_SetConfig+0x12c>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d003      	beq.n	80031d6 <TIM_Base_SetConfig+0x9a>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a26      	ldr	r2, [pc, #152]	; (800326c <TIM_Base_SetConfig+0x130>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d108      	bne.n	80031e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a10      	ldr	r2, [pc, #64]	; (8003250 <TIM_Base_SetConfig+0x114>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d00f      	beq.n	8003234 <TIM_Base_SetConfig+0xf8>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a12      	ldr	r2, [pc, #72]	; (8003260 <TIM_Base_SetConfig+0x124>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d00b      	beq.n	8003234 <TIM_Base_SetConfig+0xf8>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a11      	ldr	r2, [pc, #68]	; (8003264 <TIM_Base_SetConfig+0x128>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d007      	beq.n	8003234 <TIM_Base_SetConfig+0xf8>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a10      	ldr	r2, [pc, #64]	; (8003268 <TIM_Base_SetConfig+0x12c>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d003      	beq.n	8003234 <TIM_Base_SetConfig+0xf8>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a0f      	ldr	r2, [pc, #60]	; (800326c <TIM_Base_SetConfig+0x130>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d103      	bne.n	800323c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	615a      	str	r2, [r3, #20]
}
 8003242:	bf00      	nop
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	40012c00 	.word	0x40012c00
 8003254:	40000400 	.word	0x40000400
 8003258:	40000800 	.word	0x40000800
 800325c:	40000c00 	.word	0x40000c00
 8003260:	40013400 	.word	0x40013400
 8003264:	40014000 	.word	0x40014000
 8003268:	40014400 	.word	0x40014400
 800326c:	40014800 	.word	0x40014800

08003270 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003270:	b480      	push	{r7}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	f023 0201 	bic.w	r2, r3, #1
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800329a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f023 030a 	bic.w	r3, r3, #10
 80032ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	621a      	str	r2, [r3, #32]
}
 80032c2:	bf00      	nop
 80032c4:	371c      	adds	r7, #28
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b087      	sub	sp, #28
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	60f8      	str	r0, [r7, #12]
 80032d6:	60b9      	str	r1, [r7, #8]
 80032d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	f023 0210 	bic.w	r2, r3, #16
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	031b      	lsls	r3, r3, #12
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	4313      	orrs	r3, r2
 8003302:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800330a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	011b      	lsls	r3, r3, #4
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	621a      	str	r2, [r3, #32]
}
 8003322:	bf00      	nop
 8003324:	371c      	adds	r7, #28
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800332e:	b480      	push	{r7}
 8003330:	b085      	sub	sp, #20
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
 8003336:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003344:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	4313      	orrs	r3, r2
 800334c:	f043 0307 	orr.w	r3, r3, #7
 8003350:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	609a      	str	r2, [r3, #8]
}
 8003358:	bf00      	nop
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
 8003370:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800337e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	021a      	lsls	r2, r3, #8
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	431a      	orrs	r2, r3
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	4313      	orrs	r3, r2
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	4313      	orrs	r3, r2
 8003390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	609a      	str	r2, [r3, #8]
}
 8003398:	bf00      	nop
 800339a:	371c      	adds	r7, #28
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033b8:	2302      	movs	r3, #2
 80033ba:	e068      	b.n	800348e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a2e      	ldr	r2, [pc, #184]	; (800349c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d004      	beq.n	80033f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a2d      	ldr	r2, [pc, #180]	; (80034a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d108      	bne.n	8003402 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80033f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	4313      	orrs	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003408:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	4313      	orrs	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a1e      	ldr	r2, [pc, #120]	; (800349c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d01d      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800342e:	d018      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a1b      	ldr	r2, [pc, #108]	; (80034a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d013      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a1a      	ldr	r2, [pc, #104]	; (80034a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d00e      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a18      	ldr	r2, [pc, #96]	; (80034ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d009      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a13      	ldr	r2, [pc, #76]	; (80034a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d004      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a14      	ldr	r2, [pc, #80]	; (80034b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d10c      	bne.n	800347c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003468:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	4313      	orrs	r3, r2
 8003472:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40012c00 	.word	0x40012c00
 80034a0:	40013400 	.word	0x40013400
 80034a4:	40000400 	.word	0x40000400
 80034a8:	40000800 	.word	0x40000800
 80034ac:	40000c00 	.word	0x40000c00
 80034b0:	40014000 	.word	0x40014000

080034b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e040      	b.n	8003584 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003506:	2b00      	cmp	r3, #0
 8003508:	d106      	bne.n	8003518 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7fd fb8e 	bl	8000c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2224      	movs	r2, #36	; 0x24
 800351c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0201 	bic.w	r2, r2, #1
 800352c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 fc18 	bl	8003d64 <UART_SetConfig>
 8003534:	4603      	mov	r3, r0
 8003536:	2b01      	cmp	r3, #1
 8003538:	d101      	bne.n	800353e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e022      	b.n	8003584 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	2b00      	cmp	r3, #0
 8003544:	d002      	beq.n	800354c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 fe96 	bl	8004278 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800355a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800356a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0201 	orr.w	r2, r2, #1
 800357a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 ff1d 	bl	80043bc <UART_CheckIdleState>
 8003582:	4603      	mov	r3, r0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08a      	sub	sp, #40	; 0x28
 8003590:	af02      	add	r7, sp, #8
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	603b      	str	r3, [r7, #0]
 8003598:	4613      	mov	r3, r2
 800359a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035a0:	2b20      	cmp	r3, #32
 80035a2:	f040 8082 	bne.w	80036aa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <HAL_UART_Transmit+0x26>
 80035ac:	88fb      	ldrh	r3, [r7, #6]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e07a      	b.n	80036ac <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d101      	bne.n	80035c4 <HAL_UART_Transmit+0x38>
 80035c0:	2302      	movs	r3, #2
 80035c2:	e073      	b.n	80036ac <HAL_UART_Transmit+0x120>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2221      	movs	r2, #33	; 0x21
 80035d8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035da:	f7fd fc9d 	bl	8000f18 <HAL_GetTick>
 80035de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	88fa      	ldrh	r2, [r7, #6]
 80035e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	88fa      	ldrh	r2, [r7, #6]
 80035ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f8:	d108      	bne.n	800360c <HAL_UART_Transmit+0x80>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d104      	bne.n	800360c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003602:	2300      	movs	r3, #0
 8003604:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	61bb      	str	r3, [r7, #24]
 800360a:	e003      	b.n	8003614 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003610:	2300      	movs	r3, #0
 8003612:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800361c:	e02d      	b.n	800367a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2200      	movs	r2, #0
 8003626:	2180      	movs	r1, #128	; 0x80
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f000 ff10 	bl	800444e <UART_WaitOnFlagUntilTimeout>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e039      	b.n	80036ac <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10b      	bne.n	8003656 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	881a      	ldrh	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800364a:	b292      	uxth	r2, r2
 800364c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	3302      	adds	r3, #2
 8003652:	61bb      	str	r3, [r7, #24]
 8003654:	e008      	b.n	8003668 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	781a      	ldrb	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	b292      	uxth	r2, r2
 8003660:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	3301      	adds	r3, #1
 8003666:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800366e:	b29b      	uxth	r3, r3
 8003670:	3b01      	subs	r3, #1
 8003672:	b29a      	uxth	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003680:	b29b      	uxth	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1cb      	bne.n	800361e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	2200      	movs	r2, #0
 800368e:	2140      	movs	r1, #64	; 0x40
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 fedc 	bl	800444e <UART_WaitOnFlagUntilTimeout>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e005      	b.n	80036ac <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2220      	movs	r2, #32
 80036a4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	e000      	b.n	80036ac <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80036aa:	2302      	movs	r3, #2
  }
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3720      	adds	r7, #32
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08a      	sub	sp, #40	; 0x28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	4613      	mov	r3, r2
 80036c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036c6:	2b20      	cmp	r3, #32
 80036c8:	d142      	bne.n	8003750 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <HAL_UART_Receive_IT+0x22>
 80036d0:	88fb      	ldrh	r3, [r7, #6]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e03b      	b.n	8003752 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <HAL_UART_Receive_IT+0x34>
 80036e4:	2302      	movs	r3, #2
 80036e6:	e034      	b.n	8003752 <HAL_UART_Receive_IT+0x9e>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a18      	ldr	r2, [pc, #96]	; (800375c <HAL_UART_Receive_IT+0xa8>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d01f      	beq.n	8003740 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d018      	beq.n	8003740 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	e853 3f00 	ldrex	r3, [r3]
 800371a:	613b      	str	r3, [r7, #16]
   return(result);
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003722:	627b      	str	r3, [r7, #36]	; 0x24
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	461a      	mov	r2, r3
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	623b      	str	r3, [r7, #32]
 800372e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003730:	69f9      	ldr	r1, [r7, #28]
 8003732:	6a3a      	ldr	r2, [r7, #32]
 8003734:	e841 2300 	strex	r3, r2, [r1]
 8003738:	61bb      	str	r3, [r7, #24]
   return(result);
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1e6      	bne.n	800370e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003740:	88fb      	ldrh	r3, [r7, #6]
 8003742:	461a      	mov	r2, r3
 8003744:	68b9      	ldr	r1, [r7, #8]
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 ff46 	bl	80045d8 <UART_Start_Receive_IT>
 800374c:	4603      	mov	r3, r0
 800374e:	e000      	b.n	8003752 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003750:	2302      	movs	r3, #2
  }
}
 8003752:	4618      	mov	r0, r3
 8003754:	3728      	adds	r7, #40	; 0x28
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	40008000 	.word	0x40008000

08003760 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b0ba      	sub	sp, #232	; 0xe8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003786:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800378a:	f640 030f 	movw	r3, #2063	; 0x80f
 800378e:	4013      	ands	r3, r2
 8003790:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003794:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003798:	2b00      	cmp	r3, #0
 800379a:	d115      	bne.n	80037c8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800379c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037a0:	f003 0320 	and.w	r3, r3, #32
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00f      	beq.n	80037c8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037ac:	f003 0320 	and.w	r3, r3, #32
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d009      	beq.n	80037c8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 82a6 	beq.w	8003d0a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	4798      	blx	r3
      }
      return;
 80037c6:	e2a0      	b.n	8003d0a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80037c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 8117 	beq.w	8003a00 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80037d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d106      	bne.n	80037ec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80037de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80037e2:	4b85      	ldr	r3, [pc, #532]	; (80039f8 <HAL_UART_IRQHandler+0x298>)
 80037e4:	4013      	ands	r3, r2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 810a 	beq.w	8003a00 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80037ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d011      	beq.n	800381c <HAL_UART_IRQHandler+0xbc>
 80037f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00b      	beq.n	800381c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2201      	movs	r2, #1
 800380a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003812:	f043 0201 	orr.w	r2, r3, #1
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800381c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d011      	beq.n	800384c <HAL_UART_IRQHandler+0xec>
 8003828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00b      	beq.n	800384c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2202      	movs	r2, #2
 800383a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003842:	f043 0204 	orr.w	r2, r3, #4
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800384c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	d011      	beq.n	800387c <HAL_UART_IRQHandler+0x11c>
 8003858:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00b      	beq.n	800387c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2204      	movs	r2, #4
 800386a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003872:	f043 0202 	orr.w	r2, r3, #2
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800387c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	2b00      	cmp	r3, #0
 8003886:	d017      	beq.n	80038b8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800388c:	f003 0320 	and.w	r3, r3, #32
 8003890:	2b00      	cmp	r3, #0
 8003892:	d105      	bne.n	80038a0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003898:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00b      	beq.n	80038b8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2208      	movs	r2, #8
 80038a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038ae:	f043 0208 	orr.w	r2, r3, #8
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80038b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d012      	beq.n	80038ea <HAL_UART_IRQHandler+0x18a>
 80038c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00c      	beq.n	80038ea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038e0:	f043 0220 	orr.w	r2, r3, #32
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 820c 	beq.w	8003d0e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80038f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038fa:	f003 0320 	and.w	r3, r3, #32
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00d      	beq.n	800391e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003906:	f003 0320 	and.w	r3, r3, #32
 800390a:	2b00      	cmp	r3, #0
 800390c:	d007      	beq.n	800391e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003924:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003932:	2b40      	cmp	r3, #64	; 0x40
 8003934:	d005      	beq.n	8003942 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003936:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800393a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800393e:	2b00      	cmp	r3, #0
 8003940:	d04f      	beq.n	80039e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 ff12 	bl	800476c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003952:	2b40      	cmp	r3, #64	; 0x40
 8003954:	d141      	bne.n	80039da <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	3308      	adds	r3, #8
 800395c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003960:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003964:	e853 3f00 	ldrex	r3, [r3]
 8003968:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800396c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003970:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003974:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3308      	adds	r3, #8
 800397e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003982:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003986:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800398e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003992:	e841 2300 	strex	r3, r2, [r1]
 8003996:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800399a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1d9      	bne.n	8003956 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d013      	beq.n	80039d2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ae:	4a13      	ldr	r2, [pc, #76]	; (80039fc <HAL_UART_IRQHandler+0x29c>)
 80039b0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fd fc09 	bl	80011ce <HAL_DMA_Abort_IT>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d017      	beq.n	80039f2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80039cc:	4610      	mov	r0, r2
 80039ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d0:	e00f      	b.n	80039f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f9b0 	bl	8003d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d8:	e00b      	b.n	80039f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f9ac 	bl	8003d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e0:	e007      	b.n	80039f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f9a8 	bl	8003d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80039f0:	e18d      	b.n	8003d0e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f2:	bf00      	nop
    return;
 80039f4:	e18b      	b.n	8003d0e <HAL_UART_IRQHandler+0x5ae>
 80039f6:	bf00      	nop
 80039f8:	04000120 	.word	0x04000120
 80039fc:	08004833 	.word	0x08004833

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	f040 8146 	bne.w	8003c96 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a0e:	f003 0310 	and.w	r3, r3, #16
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 813f 	beq.w	8003c96 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a1c:	f003 0310 	and.w	r3, r3, #16
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 8138 	beq.w	8003c96 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2210      	movs	r2, #16
 8003a2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a38:	2b40      	cmp	r3, #64	; 0x40
 8003a3a:	f040 80b4 	bne.w	8003ba6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a4a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 815f 	beq.w	8003d12 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003a5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	f080 8157 	bcs.w	8003d12 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0320 	and.w	r3, r3, #32
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f040 8085 	bne.w	8003b8a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a8c:	e853 3f00 	ldrex	r3, [r3]
 8003a90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003a94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003aaa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003aae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003ab6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003aba:	e841 2300 	strex	r3, r2, [r1]
 8003abe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ac2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1da      	bne.n	8003a80 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	3308      	adds	r3, #8
 8003ad0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ad4:	e853 3f00 	ldrex	r3, [r3]
 8003ad8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ada:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003adc:	f023 0301 	bic.w	r3, r3, #1
 8003ae0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	3308      	adds	r3, #8
 8003aea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003aee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003af2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003af6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003afa:	e841 2300 	strex	r3, r2, [r1]
 8003afe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1e1      	bne.n	8003aca <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	3308      	adds	r3, #8
 8003b0c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b10:	e853 3f00 	ldrex	r3, [r3]
 8003b14:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	3308      	adds	r3, #8
 8003b26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b32:	e841 2300 	strex	r3, r2, [r1]
 8003b36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1e3      	bne.n	8003b06 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2220      	movs	r2, #32
 8003b42:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b52:	e853 3f00 	ldrex	r3, [r3]
 8003b56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b5a:	f023 0310 	bic.w	r3, r3, #16
 8003b5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	461a      	mov	r2, r3
 8003b68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b6e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b74:	e841 2300 	strex	r3, r2, [r1]
 8003b78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1e4      	bne.n	8003b4a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7fd fae4 	bl	8001152 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f8d4 	bl	8003d4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ba4:	e0b5      	b.n	8003d12 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 80a7 	beq.w	8003d16 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003bc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 80a2 	beq.w	8003d16 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bda:	e853 3f00 	ldrex	r3, [r3]
 8003bde:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003be6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003bf4:	647b      	str	r3, [r7, #68]	; 0x44
 8003bf6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003bfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bfc:	e841 2300 	strex	r3, r2, [r1]
 8003c00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1e4      	bne.n	8003bd2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	3308      	adds	r3, #8
 8003c0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	e853 3f00 	ldrex	r3, [r3]
 8003c16:	623b      	str	r3, [r7, #32]
   return(result);
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	f023 0301 	bic.w	r3, r3, #1
 8003c1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	3308      	adds	r3, #8
 8003c28:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c2c:	633a      	str	r2, [r7, #48]	; 0x30
 8003c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c34:	e841 2300 	strex	r3, r2, [r1]
 8003c38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1e3      	bne.n	8003c08 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2220      	movs	r2, #32
 8003c44:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	e853 3f00 	ldrex	r3, [r3]
 8003c5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f023 0310 	bic.w	r3, r3, #16
 8003c66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c74:	61fb      	str	r3, [r7, #28]
 8003c76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c78:	69b9      	ldr	r1, [r7, #24]
 8003c7a:	69fa      	ldr	r2, [r7, #28]
 8003c7c:	e841 2300 	strex	r3, r2, [r1]
 8003c80:	617b      	str	r3, [r7, #20]
   return(result);
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1e4      	bne.n	8003c52 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f85c 	bl	8003d4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c94:	e03f      	b.n	8003d16 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00e      	beq.n	8003cc0 <HAL_UART_IRQHandler+0x560>
 8003ca2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d008      	beq.n	8003cc0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003cb6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 ff5a 	bl	8004b72 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003cbe:	e02d      	b.n	8003d1c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00e      	beq.n	8003cea <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d008      	beq.n	8003cea <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d01c      	beq.n	8003d1a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	4798      	blx	r3
    }
    return;
 8003ce8:	e017      	b.n	8003d1a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d012      	beq.n	8003d1c <HAL_UART_IRQHandler+0x5bc>
 8003cf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00c      	beq.n	8003d1c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 fdab 	bl	800485e <UART_EndTransmit_IT>
    return;
 8003d08:	e008      	b.n	8003d1c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003d0a:	bf00      	nop
 8003d0c:	e006      	b.n	8003d1c <HAL_UART_IRQHandler+0x5bc>
    return;
 8003d0e:	bf00      	nop
 8003d10:	e004      	b.n	8003d1c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003d12:	bf00      	nop
 8003d14:	e002      	b.n	8003d1c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003d16:	bf00      	nop
 8003d18:	e000      	b.n	8003d1c <HAL_UART_IRQHandler+0x5bc>
    return;
 8003d1a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003d1c:	37e8      	adds	r7, #232	; 0xe8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop

08003d24 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	460b      	mov	r3, r1
 8003d56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d64:	b5b0      	push	{r4, r5, r7, lr}
 8003d66:	b088      	sub	sp, #32
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	4bad      	ldr	r3, [pc, #692]	; (8004044 <UART_SetConfig+0x2e0>)
 8003d90:	4013      	ands	r3, r2
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	6812      	ldr	r2, [r2, #0]
 8003d96:	69f9      	ldr	r1, [r7, #28]
 8003d98:	430b      	orrs	r3, r1
 8003d9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4aa2      	ldr	r2, [pc, #648]	; (8004048 <UART_SetConfig+0x2e4>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d004      	beq.n	8003dcc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	69fa      	ldr	r2, [r7, #28]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	69fa      	ldr	r2, [r7, #28]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a99      	ldr	r2, [pc, #612]	; (800404c <UART_SetConfig+0x2e8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d121      	bne.n	8003e2e <UART_SetConfig+0xca>
 8003dea:	4b99      	ldr	r3, [pc, #612]	; (8004050 <UART_SetConfig+0x2ec>)
 8003dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df0:	f003 0303 	and.w	r3, r3, #3
 8003df4:	2b03      	cmp	r3, #3
 8003df6:	d817      	bhi.n	8003e28 <UART_SetConfig+0xc4>
 8003df8:	a201      	add	r2, pc, #4	; (adr r2, 8003e00 <UART_SetConfig+0x9c>)
 8003dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfe:	bf00      	nop
 8003e00:	08003e11 	.word	0x08003e11
 8003e04:	08003e1d 	.word	0x08003e1d
 8003e08:	08003e17 	.word	0x08003e17
 8003e0c:	08003e23 	.word	0x08003e23
 8003e10:	2301      	movs	r3, #1
 8003e12:	76fb      	strb	r3, [r7, #27]
 8003e14:	e0e7      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003e16:	2302      	movs	r3, #2
 8003e18:	76fb      	strb	r3, [r7, #27]
 8003e1a:	e0e4      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003e1c:	2304      	movs	r3, #4
 8003e1e:	76fb      	strb	r3, [r7, #27]
 8003e20:	e0e1      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003e22:	2308      	movs	r3, #8
 8003e24:	76fb      	strb	r3, [r7, #27]
 8003e26:	e0de      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003e28:	2310      	movs	r3, #16
 8003e2a:	76fb      	strb	r3, [r7, #27]
 8003e2c:	e0db      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a88      	ldr	r2, [pc, #544]	; (8004054 <UART_SetConfig+0x2f0>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d132      	bne.n	8003e9e <UART_SetConfig+0x13a>
 8003e38:	4b85      	ldr	r3, [pc, #532]	; (8004050 <UART_SetConfig+0x2ec>)
 8003e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3e:	f003 030c 	and.w	r3, r3, #12
 8003e42:	2b0c      	cmp	r3, #12
 8003e44:	d828      	bhi.n	8003e98 <UART_SetConfig+0x134>
 8003e46:	a201      	add	r2, pc, #4	; (adr r2, 8003e4c <UART_SetConfig+0xe8>)
 8003e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4c:	08003e81 	.word	0x08003e81
 8003e50:	08003e99 	.word	0x08003e99
 8003e54:	08003e99 	.word	0x08003e99
 8003e58:	08003e99 	.word	0x08003e99
 8003e5c:	08003e8d 	.word	0x08003e8d
 8003e60:	08003e99 	.word	0x08003e99
 8003e64:	08003e99 	.word	0x08003e99
 8003e68:	08003e99 	.word	0x08003e99
 8003e6c:	08003e87 	.word	0x08003e87
 8003e70:	08003e99 	.word	0x08003e99
 8003e74:	08003e99 	.word	0x08003e99
 8003e78:	08003e99 	.word	0x08003e99
 8003e7c:	08003e93 	.word	0x08003e93
 8003e80:	2300      	movs	r3, #0
 8003e82:	76fb      	strb	r3, [r7, #27]
 8003e84:	e0af      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003e86:	2302      	movs	r3, #2
 8003e88:	76fb      	strb	r3, [r7, #27]
 8003e8a:	e0ac      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003e8c:	2304      	movs	r3, #4
 8003e8e:	76fb      	strb	r3, [r7, #27]
 8003e90:	e0a9      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003e92:	2308      	movs	r3, #8
 8003e94:	76fb      	strb	r3, [r7, #27]
 8003e96:	e0a6      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003e98:	2310      	movs	r3, #16
 8003e9a:	76fb      	strb	r3, [r7, #27]
 8003e9c:	e0a3      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a6d      	ldr	r2, [pc, #436]	; (8004058 <UART_SetConfig+0x2f4>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d120      	bne.n	8003eea <UART_SetConfig+0x186>
 8003ea8:	4b69      	ldr	r3, [pc, #420]	; (8004050 <UART_SetConfig+0x2ec>)
 8003eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003eb2:	2b30      	cmp	r3, #48	; 0x30
 8003eb4:	d013      	beq.n	8003ede <UART_SetConfig+0x17a>
 8003eb6:	2b30      	cmp	r3, #48	; 0x30
 8003eb8:	d814      	bhi.n	8003ee4 <UART_SetConfig+0x180>
 8003eba:	2b20      	cmp	r3, #32
 8003ebc:	d009      	beq.n	8003ed2 <UART_SetConfig+0x16e>
 8003ebe:	2b20      	cmp	r3, #32
 8003ec0:	d810      	bhi.n	8003ee4 <UART_SetConfig+0x180>
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d002      	beq.n	8003ecc <UART_SetConfig+0x168>
 8003ec6:	2b10      	cmp	r3, #16
 8003ec8:	d006      	beq.n	8003ed8 <UART_SetConfig+0x174>
 8003eca:	e00b      	b.n	8003ee4 <UART_SetConfig+0x180>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	76fb      	strb	r3, [r7, #27]
 8003ed0:	e089      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	76fb      	strb	r3, [r7, #27]
 8003ed6:	e086      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003ed8:	2304      	movs	r3, #4
 8003eda:	76fb      	strb	r3, [r7, #27]
 8003edc:	e083      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003ede:	2308      	movs	r3, #8
 8003ee0:	76fb      	strb	r3, [r7, #27]
 8003ee2:	e080      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003ee4:	2310      	movs	r3, #16
 8003ee6:	76fb      	strb	r3, [r7, #27]
 8003ee8:	e07d      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a5b      	ldr	r2, [pc, #364]	; (800405c <UART_SetConfig+0x2f8>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d120      	bne.n	8003f36 <UART_SetConfig+0x1d2>
 8003ef4:	4b56      	ldr	r3, [pc, #344]	; (8004050 <UART_SetConfig+0x2ec>)
 8003ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003efe:	2bc0      	cmp	r3, #192	; 0xc0
 8003f00:	d013      	beq.n	8003f2a <UART_SetConfig+0x1c6>
 8003f02:	2bc0      	cmp	r3, #192	; 0xc0
 8003f04:	d814      	bhi.n	8003f30 <UART_SetConfig+0x1cc>
 8003f06:	2b80      	cmp	r3, #128	; 0x80
 8003f08:	d009      	beq.n	8003f1e <UART_SetConfig+0x1ba>
 8003f0a:	2b80      	cmp	r3, #128	; 0x80
 8003f0c:	d810      	bhi.n	8003f30 <UART_SetConfig+0x1cc>
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <UART_SetConfig+0x1b4>
 8003f12:	2b40      	cmp	r3, #64	; 0x40
 8003f14:	d006      	beq.n	8003f24 <UART_SetConfig+0x1c0>
 8003f16:	e00b      	b.n	8003f30 <UART_SetConfig+0x1cc>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	76fb      	strb	r3, [r7, #27]
 8003f1c:	e063      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	76fb      	strb	r3, [r7, #27]
 8003f22:	e060      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003f24:	2304      	movs	r3, #4
 8003f26:	76fb      	strb	r3, [r7, #27]
 8003f28:	e05d      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003f2a:	2308      	movs	r3, #8
 8003f2c:	76fb      	strb	r3, [r7, #27]
 8003f2e:	e05a      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003f30:	2310      	movs	r3, #16
 8003f32:	76fb      	strb	r3, [r7, #27]
 8003f34:	e057      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a49      	ldr	r2, [pc, #292]	; (8004060 <UART_SetConfig+0x2fc>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d125      	bne.n	8003f8c <UART_SetConfig+0x228>
 8003f40:	4b43      	ldr	r3, [pc, #268]	; (8004050 <UART_SetConfig+0x2ec>)
 8003f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f4e:	d017      	beq.n	8003f80 <UART_SetConfig+0x21c>
 8003f50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f54:	d817      	bhi.n	8003f86 <UART_SetConfig+0x222>
 8003f56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f5a:	d00b      	beq.n	8003f74 <UART_SetConfig+0x210>
 8003f5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f60:	d811      	bhi.n	8003f86 <UART_SetConfig+0x222>
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <UART_SetConfig+0x20a>
 8003f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f6a:	d006      	beq.n	8003f7a <UART_SetConfig+0x216>
 8003f6c:	e00b      	b.n	8003f86 <UART_SetConfig+0x222>
 8003f6e:	2300      	movs	r3, #0
 8003f70:	76fb      	strb	r3, [r7, #27]
 8003f72:	e038      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003f74:	2302      	movs	r3, #2
 8003f76:	76fb      	strb	r3, [r7, #27]
 8003f78:	e035      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003f7a:	2304      	movs	r3, #4
 8003f7c:	76fb      	strb	r3, [r7, #27]
 8003f7e:	e032      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003f80:	2308      	movs	r3, #8
 8003f82:	76fb      	strb	r3, [r7, #27]
 8003f84:	e02f      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003f86:	2310      	movs	r3, #16
 8003f88:	76fb      	strb	r3, [r7, #27]
 8003f8a:	e02c      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a2d      	ldr	r2, [pc, #180]	; (8004048 <UART_SetConfig+0x2e4>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d125      	bne.n	8003fe2 <UART_SetConfig+0x27e>
 8003f96:	4b2e      	ldr	r3, [pc, #184]	; (8004050 <UART_SetConfig+0x2ec>)
 8003f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003fa0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fa4:	d017      	beq.n	8003fd6 <UART_SetConfig+0x272>
 8003fa6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003faa:	d817      	bhi.n	8003fdc <UART_SetConfig+0x278>
 8003fac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fb0:	d00b      	beq.n	8003fca <UART_SetConfig+0x266>
 8003fb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fb6:	d811      	bhi.n	8003fdc <UART_SetConfig+0x278>
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d003      	beq.n	8003fc4 <UART_SetConfig+0x260>
 8003fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc0:	d006      	beq.n	8003fd0 <UART_SetConfig+0x26c>
 8003fc2:	e00b      	b.n	8003fdc <UART_SetConfig+0x278>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	76fb      	strb	r3, [r7, #27]
 8003fc8:	e00d      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003fca:	2302      	movs	r3, #2
 8003fcc:	76fb      	strb	r3, [r7, #27]
 8003fce:	e00a      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003fd0:	2304      	movs	r3, #4
 8003fd2:	76fb      	strb	r3, [r7, #27]
 8003fd4:	e007      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003fd6:	2308      	movs	r3, #8
 8003fd8:	76fb      	strb	r3, [r7, #27]
 8003fda:	e004      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003fdc:	2310      	movs	r3, #16
 8003fde:	76fb      	strb	r3, [r7, #27]
 8003fe0:	e001      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003fe2:	2310      	movs	r3, #16
 8003fe4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a17      	ldr	r2, [pc, #92]	; (8004048 <UART_SetConfig+0x2e4>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	f040 8087 	bne.w	8004100 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ff2:	7efb      	ldrb	r3, [r7, #27]
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d837      	bhi.n	8004068 <UART_SetConfig+0x304>
 8003ff8:	a201      	add	r2, pc, #4	; (adr r2, 8004000 <UART_SetConfig+0x29c>)
 8003ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffe:	bf00      	nop
 8004000:	08004025 	.word	0x08004025
 8004004:	08004069 	.word	0x08004069
 8004008:	0800402d 	.word	0x0800402d
 800400c:	08004069 	.word	0x08004069
 8004010:	08004033 	.word	0x08004033
 8004014:	08004069 	.word	0x08004069
 8004018:	08004069 	.word	0x08004069
 800401c:	08004069 	.word	0x08004069
 8004020:	0800403b 	.word	0x0800403b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004024:	f7fe f8d0 	bl	80021c8 <HAL_RCC_GetPCLK1Freq>
 8004028:	6178      	str	r0, [r7, #20]
        break;
 800402a:	e022      	b.n	8004072 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800402c:	4b0d      	ldr	r3, [pc, #52]	; (8004064 <UART_SetConfig+0x300>)
 800402e:	617b      	str	r3, [r7, #20]
        break;
 8004030:	e01f      	b.n	8004072 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004032:	f7fe f831 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 8004036:	6178      	str	r0, [r7, #20]
        break;
 8004038:	e01b      	b.n	8004072 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800403a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800403e:	617b      	str	r3, [r7, #20]
        break;
 8004040:	e017      	b.n	8004072 <UART_SetConfig+0x30e>
 8004042:	bf00      	nop
 8004044:	efff69f3 	.word	0xefff69f3
 8004048:	40008000 	.word	0x40008000
 800404c:	40013800 	.word	0x40013800
 8004050:	40021000 	.word	0x40021000
 8004054:	40004400 	.word	0x40004400
 8004058:	40004800 	.word	0x40004800
 800405c:	40004c00 	.word	0x40004c00
 8004060:	40005000 	.word	0x40005000
 8004064:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	76bb      	strb	r3, [r7, #26]
        break;
 8004070:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 80f1 	beq.w	800425c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	4613      	mov	r3, r2
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	4413      	add	r3, r2
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	429a      	cmp	r2, r3
 8004088:	d305      	bcc.n	8004096 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	429a      	cmp	r2, r3
 8004094:	d902      	bls.n	800409c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	76bb      	strb	r3, [r7, #26]
 800409a:	e0df      	b.n	800425c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	4618      	mov	r0, r3
 80040a0:	f04f 0100 	mov.w	r1, #0
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	f04f 0300 	mov.w	r3, #0
 80040ac:	020b      	lsls	r3, r1, #8
 80040ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80040b2:	0202      	lsls	r2, r0, #8
 80040b4:	6879      	ldr	r1, [r7, #4]
 80040b6:	6849      	ldr	r1, [r1, #4]
 80040b8:	0849      	lsrs	r1, r1, #1
 80040ba:	4608      	mov	r0, r1
 80040bc:	f04f 0100 	mov.w	r1, #0
 80040c0:	1814      	adds	r4, r2, r0
 80040c2:	eb43 0501 	adc.w	r5, r3, r1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	461a      	mov	r2, r3
 80040cc:	f04f 0300 	mov.w	r3, #0
 80040d0:	4620      	mov	r0, r4
 80040d2:	4629      	mov	r1, r5
 80040d4:	f7fc f880 	bl	80001d8 <__aeabi_uldivmod>
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	4613      	mov	r3, r2
 80040de:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040e6:	d308      	bcc.n	80040fa <UART_SetConfig+0x396>
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040ee:	d204      	bcs.n	80040fa <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	60da      	str	r2, [r3, #12]
 80040f8:	e0b0      	b.n	800425c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	76bb      	strb	r3, [r7, #26]
 80040fe:	e0ad      	b.n	800425c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004108:	d15b      	bne.n	80041c2 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800410a:	7efb      	ldrb	r3, [r7, #27]
 800410c:	2b08      	cmp	r3, #8
 800410e:	d828      	bhi.n	8004162 <UART_SetConfig+0x3fe>
 8004110:	a201      	add	r2, pc, #4	; (adr r2, 8004118 <UART_SetConfig+0x3b4>)
 8004112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004116:	bf00      	nop
 8004118:	0800413d 	.word	0x0800413d
 800411c:	08004145 	.word	0x08004145
 8004120:	0800414d 	.word	0x0800414d
 8004124:	08004163 	.word	0x08004163
 8004128:	08004153 	.word	0x08004153
 800412c:	08004163 	.word	0x08004163
 8004130:	08004163 	.word	0x08004163
 8004134:	08004163 	.word	0x08004163
 8004138:	0800415b 	.word	0x0800415b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800413c:	f7fe f844 	bl	80021c8 <HAL_RCC_GetPCLK1Freq>
 8004140:	6178      	str	r0, [r7, #20]
        break;
 8004142:	e013      	b.n	800416c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004144:	f7fe f856 	bl	80021f4 <HAL_RCC_GetPCLK2Freq>
 8004148:	6178      	str	r0, [r7, #20]
        break;
 800414a:	e00f      	b.n	800416c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800414c:	4b49      	ldr	r3, [pc, #292]	; (8004274 <UART_SetConfig+0x510>)
 800414e:	617b      	str	r3, [r7, #20]
        break;
 8004150:	e00c      	b.n	800416c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004152:	f7fd ffa1 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 8004156:	6178      	str	r0, [r7, #20]
        break;
 8004158:	e008      	b.n	800416c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800415a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800415e:	617b      	str	r3, [r7, #20]
        break;
 8004160:	e004      	b.n	800416c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	76bb      	strb	r3, [r7, #26]
        break;
 800416a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d074      	beq.n	800425c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	005a      	lsls	r2, r3, #1
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	085b      	lsrs	r3, r3, #1
 800417c:	441a      	add	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	fbb2 f3f3 	udiv	r3, r2, r3
 8004186:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	2b0f      	cmp	r3, #15
 800418c:	d916      	bls.n	80041bc <UART_SetConfig+0x458>
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004194:	d212      	bcs.n	80041bc <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	b29b      	uxth	r3, r3
 800419a:	f023 030f 	bic.w	r3, r3, #15
 800419e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	085b      	lsrs	r3, r3, #1
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	f003 0307 	and.w	r3, r3, #7
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	89fb      	ldrh	r3, [r7, #14]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	89fa      	ldrh	r2, [r7, #14]
 80041b8:	60da      	str	r2, [r3, #12]
 80041ba:	e04f      	b.n	800425c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	76bb      	strb	r3, [r7, #26]
 80041c0:	e04c      	b.n	800425c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041c2:	7efb      	ldrb	r3, [r7, #27]
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d828      	bhi.n	800421a <UART_SetConfig+0x4b6>
 80041c8:	a201      	add	r2, pc, #4	; (adr r2, 80041d0 <UART_SetConfig+0x46c>)
 80041ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ce:	bf00      	nop
 80041d0:	080041f5 	.word	0x080041f5
 80041d4:	080041fd 	.word	0x080041fd
 80041d8:	08004205 	.word	0x08004205
 80041dc:	0800421b 	.word	0x0800421b
 80041e0:	0800420b 	.word	0x0800420b
 80041e4:	0800421b 	.word	0x0800421b
 80041e8:	0800421b 	.word	0x0800421b
 80041ec:	0800421b 	.word	0x0800421b
 80041f0:	08004213 	.word	0x08004213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041f4:	f7fd ffe8 	bl	80021c8 <HAL_RCC_GetPCLK1Freq>
 80041f8:	6178      	str	r0, [r7, #20]
        break;
 80041fa:	e013      	b.n	8004224 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041fc:	f7fd fffa 	bl	80021f4 <HAL_RCC_GetPCLK2Freq>
 8004200:	6178      	str	r0, [r7, #20]
        break;
 8004202:	e00f      	b.n	8004224 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004204:	4b1b      	ldr	r3, [pc, #108]	; (8004274 <UART_SetConfig+0x510>)
 8004206:	617b      	str	r3, [r7, #20]
        break;
 8004208:	e00c      	b.n	8004224 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800420a:	f7fd ff45 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 800420e:	6178      	str	r0, [r7, #20]
        break;
 8004210:	e008      	b.n	8004224 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004216:	617b      	str	r3, [r7, #20]
        break;
 8004218:	e004      	b.n	8004224 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800421a:	2300      	movs	r3, #0
 800421c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	76bb      	strb	r3, [r7, #26]
        break;
 8004222:	bf00      	nop
    }

    if (pclk != 0U)
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d018      	beq.n	800425c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	085a      	lsrs	r2, r3, #1
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	441a      	add	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	fbb2 f3f3 	udiv	r3, r2, r3
 800423c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	2b0f      	cmp	r3, #15
 8004242:	d909      	bls.n	8004258 <UART_SetConfig+0x4f4>
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800424a:	d205      	bcs.n	8004258 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	b29a      	uxth	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	60da      	str	r2, [r3, #12]
 8004256:	e001      	b.n	800425c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004268:	7ebb      	ldrb	r3, [r7, #26]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3720      	adds	r7, #32
 800426e:	46bd      	mov	sp, r7
 8004270:	bdb0      	pop	{r4, r5, r7, pc}
 8004272:	bf00      	nop
 8004274:	00f42400 	.word	0x00f42400

08004278 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	f003 0310 	and.w	r3, r3, #16
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00a      	beq.n	800432a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	f003 0320 	and.w	r3, r3, #32
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004354:	2b00      	cmp	r3, #0
 8004356:	d01a      	beq.n	800438e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004376:	d10a      	bne.n	800438e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00a      	beq.n	80043b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	605a      	str	r2, [r3, #4]
  }
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af02      	add	r7, sp, #8
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043cc:	f7fc fda4 	bl	8000f18 <HAL_GetTick>
 80043d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0308 	and.w	r3, r3, #8
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d10e      	bne.n	80043fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f82d 	bl	800444e <UART_WaitOnFlagUntilTimeout>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e023      	b.n	8004446 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b04      	cmp	r3, #4
 800440a:	d10e      	bne.n	800442a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800440c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f817 	bl	800444e <UART_WaitOnFlagUntilTimeout>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e00d      	b.n	8004446 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2220      	movs	r2, #32
 800442e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2220      	movs	r2, #32
 8004434:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b09c      	sub	sp, #112	; 0x70
 8004452:	af00      	add	r7, sp, #0
 8004454:	60f8      	str	r0, [r7, #12]
 8004456:	60b9      	str	r1, [r7, #8]
 8004458:	603b      	str	r3, [r7, #0]
 800445a:	4613      	mov	r3, r2
 800445c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800445e:	e0a5      	b.n	80045ac <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004460:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004466:	f000 80a1 	beq.w	80045ac <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800446a:	f7fc fd55 	bl	8000f18 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004476:	429a      	cmp	r2, r3
 8004478:	d302      	bcc.n	8004480 <UART_WaitOnFlagUntilTimeout+0x32>
 800447a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800447c:	2b00      	cmp	r3, #0
 800447e:	d13e      	bne.n	80044fe <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004488:	e853 3f00 	ldrex	r3, [r3]
 800448c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800448e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004490:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004494:	667b      	str	r3, [r7, #100]	; 0x64
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	461a      	mov	r2, r3
 800449c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800449e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044a0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80044a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80044a6:	e841 2300 	strex	r3, r2, [r1]
 80044aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80044ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1e6      	bne.n	8004480 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3308      	adds	r3, #8
 80044b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044bc:	e853 3f00 	ldrex	r3, [r3]
 80044c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c4:	f023 0301 	bic.w	r3, r3, #1
 80044c8:	663b      	str	r3, [r7, #96]	; 0x60
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	3308      	adds	r3, #8
 80044d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80044d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80044d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044da:	e841 2300 	strex	r3, r2, [r1]
 80044de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80044e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1e5      	bne.n	80044b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2220      	movs	r2, #32
 80044ea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2220      	movs	r2, #32
 80044f0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e067      	b.n	80045ce <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b00      	cmp	r3, #0
 800450a:	d04f      	beq.n	80045ac <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004516:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800451a:	d147      	bne.n	80045ac <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004524:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452e:	e853 3f00 	ldrex	r3, [r3]
 8004532:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800453a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	461a      	mov	r2, r3
 8004542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004544:	637b      	str	r3, [r7, #52]	; 0x34
 8004546:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004548:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800454a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800454c:	e841 2300 	strex	r3, r2, [r1]
 8004550:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1e6      	bne.n	8004526 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3308      	adds	r3, #8
 800455e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	e853 3f00 	ldrex	r3, [r3]
 8004566:	613b      	str	r3, [r7, #16]
   return(result);
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f023 0301 	bic.w	r3, r3, #1
 800456e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3308      	adds	r3, #8
 8004576:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004578:	623a      	str	r2, [r7, #32]
 800457a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457c:	69f9      	ldr	r1, [r7, #28]
 800457e:	6a3a      	ldr	r2, [r7, #32]
 8004580:	e841 2300 	strex	r3, r2, [r1]
 8004584:	61bb      	str	r3, [r7, #24]
   return(result);
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1e5      	bne.n	8004558 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2220      	movs	r2, #32
 8004590:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2220      	movs	r2, #32
 8004596:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2220      	movs	r2, #32
 800459c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e010      	b.n	80045ce <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	69da      	ldr	r2, [r3, #28]
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	4013      	ands	r3, r2
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	bf0c      	ite	eq
 80045bc:	2301      	moveq	r3, #1
 80045be:	2300      	movne	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	461a      	mov	r2, r3
 80045c4:	79fb      	ldrb	r3, [r7, #7]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	f43f af4a 	beq.w	8004460 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3770      	adds	r7, #112	; 0x70
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
	...

080045d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045d8:	b480      	push	{r7}
 80045da:	b097      	sub	sp, #92	; 0x5c
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	4613      	mov	r3, r2
 80045e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	88fa      	ldrh	r2, [r7, #6]
 80045f0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	88fa      	ldrh	r2, [r7, #6]
 80045f8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800460a:	d10e      	bne.n	800462a <UART_Start_Receive_IT+0x52>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d105      	bne.n	8004620 <UART_Start_Receive_IT+0x48>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f240 12ff 	movw	r2, #511	; 0x1ff
 800461a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800461e:	e02d      	b.n	800467c <UART_Start_Receive_IT+0xa4>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	22ff      	movs	r2, #255	; 0xff
 8004624:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004628:	e028      	b.n	800467c <UART_Start_Receive_IT+0xa4>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10d      	bne.n	800464e <UART_Start_Receive_IT+0x76>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d104      	bne.n	8004644 <UART_Start_Receive_IT+0x6c>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	22ff      	movs	r2, #255	; 0xff
 800463e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004642:	e01b      	b.n	800467c <UART_Start_Receive_IT+0xa4>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	227f      	movs	r2, #127	; 0x7f
 8004648:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800464c:	e016      	b.n	800467c <UART_Start_Receive_IT+0xa4>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004656:	d10d      	bne.n	8004674 <UART_Start_Receive_IT+0x9c>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d104      	bne.n	800466a <UART_Start_Receive_IT+0x92>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	227f      	movs	r2, #127	; 0x7f
 8004664:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004668:	e008      	b.n	800467c <UART_Start_Receive_IT+0xa4>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	223f      	movs	r2, #63	; 0x3f
 800466e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004672:	e003      	b.n	800467c <UART_Start_Receive_IT+0xa4>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2222      	movs	r2, #34	; 0x22
 8004688:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	3308      	adds	r3, #8
 8004690:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004694:	e853 3f00 	ldrex	r3, [r3]
 8004698:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800469a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469c:	f043 0301 	orr.w	r3, r3, #1
 80046a0:	657b      	str	r3, [r7, #84]	; 0x54
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	3308      	adds	r3, #8
 80046a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80046aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80046ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80046b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046b2:	e841 2300 	strex	r3, r2, [r1]
 80046b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80046b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1e5      	bne.n	800468a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c6:	d107      	bne.n	80046d8 <UART_Start_Receive_IT+0x100>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d103      	bne.n	80046d8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4a24      	ldr	r2, [pc, #144]	; (8004764 <UART_Start_Receive_IT+0x18c>)
 80046d4:	665a      	str	r2, [r3, #100]	; 0x64
 80046d6:	e002      	b.n	80046de <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4a23      	ldr	r2, [pc, #140]	; (8004768 <UART_Start_Receive_IT+0x190>)
 80046dc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d019      	beq.n	8004722 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f6:	e853 3f00 	ldrex	r3, [r3]
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fe:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004702:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	461a      	mov	r2, r3
 800470a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800470c:	637b      	str	r3, [r7, #52]	; 0x34
 800470e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004710:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004712:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004714:	e841 2300 	strex	r3, r2, [r1]
 8004718:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800471a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1e6      	bne.n	80046ee <UART_Start_Receive_IT+0x116>
 8004720:	e018      	b.n	8004754 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	e853 3f00 	ldrex	r3, [r3]
 800472e:	613b      	str	r3, [r7, #16]
   return(result);
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f043 0320 	orr.w	r3, r3, #32
 8004736:	653b      	str	r3, [r7, #80]	; 0x50
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	461a      	mov	r2, r3
 800473e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004740:	623b      	str	r3, [r7, #32]
 8004742:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004744:	69f9      	ldr	r1, [r7, #28]
 8004746:	6a3a      	ldr	r2, [r7, #32]
 8004748:	e841 2300 	strex	r3, r2, [r1]
 800474c:	61bb      	str	r3, [r7, #24]
   return(result);
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1e6      	bne.n	8004722 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	375c      	adds	r7, #92	; 0x5c
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	08004a13 	.word	0x08004a13
 8004768:	080048b3 	.word	0x080048b3

0800476c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800476c:	b480      	push	{r7}
 800476e:	b095      	sub	sp, #84	; 0x54
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800477c:	e853 3f00 	ldrex	r3, [r3]
 8004780:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004784:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004788:	64fb      	str	r3, [r7, #76]	; 0x4c
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	461a      	mov	r2, r3
 8004790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004792:	643b      	str	r3, [r7, #64]	; 0x40
 8004794:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004796:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004798:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800479a:	e841 2300 	strex	r3, r2, [r1]
 800479e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1e6      	bne.n	8004774 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	3308      	adds	r3, #8
 80047ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ae:	6a3b      	ldr	r3, [r7, #32]
 80047b0:	e853 3f00 	ldrex	r3, [r3]
 80047b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	f023 0301 	bic.w	r3, r3, #1
 80047bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	3308      	adds	r3, #8
 80047c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047ce:	e841 2300 	strex	r3, r2, [r1]
 80047d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1e5      	bne.n	80047a6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d118      	bne.n	8004814 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	e853 3f00 	ldrex	r3, [r3]
 80047ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	f023 0310 	bic.w	r3, r3, #16
 80047f6:	647b      	str	r3, [r7, #68]	; 0x44
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	461a      	mov	r2, r3
 80047fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004800:	61bb      	str	r3, [r7, #24]
 8004802:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004804:	6979      	ldr	r1, [r7, #20]
 8004806:	69ba      	ldr	r2, [r7, #24]
 8004808:	e841 2300 	strex	r3, r2, [r1]
 800480c:	613b      	str	r3, [r7, #16]
   return(result);
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1e6      	bne.n	80047e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2220      	movs	r2, #32
 8004818:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004826:	bf00      	nop
 8004828:	3754      	adds	r7, #84	; 0x54
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b084      	sub	sp, #16
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f7ff fa71 	bl	8003d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004856:	bf00      	nop
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b088      	sub	sp, #32
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	e853 3f00 	ldrex	r3, [r3]
 8004872:	60bb      	str	r3, [r7, #8]
   return(result);
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800487a:	61fb      	str	r3, [r7, #28]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	461a      	mov	r2, r3
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	61bb      	str	r3, [r7, #24]
 8004886:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004888:	6979      	ldr	r1, [r7, #20]
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	e841 2300 	strex	r3, r2, [r1]
 8004890:	613b      	str	r3, [r7, #16]
   return(result);
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1e6      	bne.n	8004866 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2220      	movs	r2, #32
 800489c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7ff fa3d 	bl	8003d24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048aa:	bf00      	nop
 80048ac:	3720      	adds	r7, #32
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b096      	sub	sp, #88	; 0x58
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80048c0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048c8:	2b22      	cmp	r3, #34	; 0x22
 80048ca:	f040 8094 	bne.w	80049f6 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80048d4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80048d8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80048dc:	b2d9      	uxtb	r1, r3
 80048de:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e8:	400a      	ands	r2, r1
 80048ea:	b2d2      	uxtb	r2, r2
 80048ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f2:	1c5a      	adds	r2, r3, #1
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048fe:	b29b      	uxth	r3, r3
 8004900:	3b01      	subs	r3, #1
 8004902:	b29a      	uxth	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004910:	b29b      	uxth	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d179      	bne.n	8004a0a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491e:	e853 3f00 	ldrex	r3, [r3]
 8004922:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004926:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800492a:	653b      	str	r3, [r7, #80]	; 0x50
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	461a      	mov	r2, r3
 8004932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004934:	647b      	str	r3, [r7, #68]	; 0x44
 8004936:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004938:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800493a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800493c:	e841 2300 	strex	r3, r2, [r1]
 8004940:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1e6      	bne.n	8004916 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	3308      	adds	r3, #8
 800494e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004952:	e853 3f00 	ldrex	r3, [r3]
 8004956:	623b      	str	r3, [r7, #32]
   return(result);
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	f023 0301 	bic.w	r3, r3, #1
 800495e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3308      	adds	r3, #8
 8004966:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004968:	633a      	str	r2, [r7, #48]	; 0x30
 800496a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800496e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004970:	e841 2300 	strex	r3, r2, [r1]
 8004974:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1e5      	bne.n	8004948 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2220      	movs	r2, #32
 8004980:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800498c:	2b01      	cmp	r3, #1
 800498e:	d12e      	bne.n	80049ee <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	e853 3f00 	ldrex	r3, [r3]
 80049a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f023 0310 	bic.w	r3, r3, #16
 80049aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	461a      	mov	r2, r3
 80049b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049b4:	61fb      	str	r3, [r7, #28]
 80049b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b8:	69b9      	ldr	r1, [r7, #24]
 80049ba:	69fa      	ldr	r2, [r7, #28]
 80049bc:	e841 2300 	strex	r3, r2, [r1]
 80049c0:	617b      	str	r3, [r7, #20]
   return(result);
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1e6      	bne.n	8004996 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	f003 0310 	and.w	r3, r3, #16
 80049d2:	2b10      	cmp	r3, #16
 80049d4:	d103      	bne.n	80049de <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2210      	movs	r2, #16
 80049dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80049e4:	4619      	mov	r1, r3
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7ff f9b0 	bl	8003d4c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80049ec:	e00d      	b.n	8004a0a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7fb fd6e 	bl	80004d0 <HAL_UART_RxCpltCallback>
}
 80049f4:	e009      	b.n	8004a0a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	8b1b      	ldrh	r3, [r3, #24]
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0208 	orr.w	r2, r2, #8
 8004a06:	b292      	uxth	r2, r2
 8004a08:	831a      	strh	r2, [r3, #24]
}
 8004a0a:	bf00      	nop
 8004a0c:	3758      	adds	r7, #88	; 0x58
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b096      	sub	sp, #88	; 0x58
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a20:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a28:	2b22      	cmp	r3, #34	; 0x22
 8004a2a:	f040 8094 	bne.w	8004b56 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004a34:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004a3e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004a42:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004a46:	4013      	ands	r3, r2
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a4c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a52:	1c9a      	adds	r2, r3, #2
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	3b01      	subs	r3, #1
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d179      	bne.n	8004b6a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a7e:	e853 3f00 	ldrex	r3, [r3]
 8004a82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	461a      	mov	r2, r3
 8004a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a94:	643b      	str	r3, [r7, #64]	; 0x40
 8004a96:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a9c:	e841 2300 	strex	r3, r2, [r1]
 8004aa0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1e6      	bne.n	8004a76 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	3308      	adds	r3, #8
 8004aae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	e853 3f00 	ldrex	r3, [r3]
 8004ab6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	f023 0301 	bic.w	r3, r3, #1
 8004abe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3308      	adds	r3, #8
 8004ac6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ac8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004aca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004acc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ace:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ad0:	e841 2300 	strex	r3, r2, [r1]
 8004ad4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1e5      	bne.n	8004aa8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d12e      	bne.n	8004b4e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	e853 3f00 	ldrex	r3, [r3]
 8004b02:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f023 0310 	bic.w	r3, r3, #16
 8004b0a:	647b      	str	r3, [r7, #68]	; 0x44
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	461a      	mov	r2, r3
 8004b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b14:	61bb      	str	r3, [r7, #24]
 8004b16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b18:	6979      	ldr	r1, [r7, #20]
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	e841 2300 	strex	r3, r2, [r1]
 8004b20:	613b      	str	r3, [r7, #16]
   return(result);
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1e6      	bne.n	8004af6 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	f003 0310 	and.w	r3, r3, #16
 8004b32:	2b10      	cmp	r3, #16
 8004b34:	d103      	bne.n	8004b3e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2210      	movs	r2, #16
 8004b3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b44:	4619      	mov	r1, r3
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7ff f900 	bl	8003d4c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b4c:	e00d      	b.n	8004b6a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7fb fcbe 	bl	80004d0 <HAL_UART_RxCpltCallback>
}
 8004b54:	e009      	b.n	8004b6a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	8b1b      	ldrh	r3, [r3, #24]
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f042 0208 	orr.w	r2, r2, #8
 8004b66:	b292      	uxth	r2, r2
 8004b68:	831a      	strh	r2, [r3, #24]
}
 8004b6a:	bf00      	nop
 8004b6c:	3758      	adds	r7, #88	; 0x58
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004b7a:	bf00      	nop
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
	...

08004b88 <__libc_init_array>:
 8004b88:	b570      	push	{r4, r5, r6, lr}
 8004b8a:	4d0d      	ldr	r5, [pc, #52]	; (8004bc0 <__libc_init_array+0x38>)
 8004b8c:	4c0d      	ldr	r4, [pc, #52]	; (8004bc4 <__libc_init_array+0x3c>)
 8004b8e:	1b64      	subs	r4, r4, r5
 8004b90:	10a4      	asrs	r4, r4, #2
 8004b92:	2600      	movs	r6, #0
 8004b94:	42a6      	cmp	r6, r4
 8004b96:	d109      	bne.n	8004bac <__libc_init_array+0x24>
 8004b98:	4d0b      	ldr	r5, [pc, #44]	; (8004bc8 <__libc_init_array+0x40>)
 8004b9a:	4c0c      	ldr	r4, [pc, #48]	; (8004bcc <__libc_init_array+0x44>)
 8004b9c:	f000 f820 	bl	8004be0 <_init>
 8004ba0:	1b64      	subs	r4, r4, r5
 8004ba2:	10a4      	asrs	r4, r4, #2
 8004ba4:	2600      	movs	r6, #0
 8004ba6:	42a6      	cmp	r6, r4
 8004ba8:	d105      	bne.n	8004bb6 <__libc_init_array+0x2e>
 8004baa:	bd70      	pop	{r4, r5, r6, pc}
 8004bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bb0:	4798      	blx	r3
 8004bb2:	3601      	adds	r6, #1
 8004bb4:	e7ee      	b.n	8004b94 <__libc_init_array+0xc>
 8004bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bba:	4798      	blx	r3
 8004bbc:	3601      	adds	r6, #1
 8004bbe:	e7f2      	b.n	8004ba6 <__libc_init_array+0x1e>
 8004bc0:	08004c48 	.word	0x08004c48
 8004bc4:	08004c48 	.word	0x08004c48
 8004bc8:	08004c48 	.word	0x08004c48
 8004bcc:	08004c4c 	.word	0x08004c4c

08004bd0 <memset>:
 8004bd0:	4402      	add	r2, r0
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d100      	bne.n	8004bda <memset+0xa>
 8004bd8:	4770      	bx	lr
 8004bda:	f803 1b01 	strb.w	r1, [r3], #1
 8004bde:	e7f9      	b.n	8004bd4 <memset+0x4>

08004be0 <_init>:
 8004be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004be2:	bf00      	nop
 8004be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004be6:	bc08      	pop	{r3}
 8004be8:	469e      	mov	lr, r3
 8004bea:	4770      	bx	lr

08004bec <_fini>:
 8004bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bee:	bf00      	nop
 8004bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bf2:	bc08      	pop	{r3}
 8004bf4:	469e      	mov	lr, r3
 8004bf6:	4770      	bx	lr
