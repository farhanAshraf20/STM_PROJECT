
00_far_Sw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005974  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  08005b08  08005b08  00015b08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fac  08005fac  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08005fac  08005fac  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005fac  08005fac  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fac  08005fac  00015fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fb0  08005fb0  00015fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08005fb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  200001e8  0800619c  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  0800619c  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc17  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c33  00000000  00000000  0002de2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  0002fa68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b10  00000000  00000000  00030650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027396  00000000  00000000  00031160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c688  00000000  00000000  000584f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0503  00000000  00000000  00064b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00155081  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041b4  00000000  00000000  001550d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005aec 	.word	0x08005aec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08005aec 	.word	0x08005aec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bac:	f000 fd95 	bl	80016da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb0:	f000 f90e 	bl	8000dd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb4:	f000 f986 	bl	8000ec4 <MX_GPIO_Init>
  MX_TIM16_Init();
 8000bb8:	f000 f95c 	bl	8000e74 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim16);
 8000bbc:	486d      	ldr	r0, [pc, #436]	; (8000d74 <main+0x1cc>)
 8000bbe:	f001 ff93 	bl	8002ae8 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    f_timertest = __HAL_TIM_GET_COUNTER(&htim16); // Get current time (microseconds)
 8000bc2:	4b6c      	ldr	r3, [pc, #432]	; (8000d74 <main+0x1cc>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fc9b 	bl	8000504 <__aeabi_ui2d>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	4969      	ldr	r1, [pc, #420]	; (8000d78 <main+0x1d0>)
 8000bd4:	e9c1 2300 	strd	r2, r3, [r1]



	    f_reading = HAL_GPIO_ReadPin (GPIOC, f_sw13_Pin);
 8000bd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bdc:	4867      	ldr	r0, [pc, #412]	; (8000d7c <main+0x1d4>)
 8000bde:	f001 f8ad 	bl	8001d3c <HAL_GPIO_ReadPin>
 8000be2:	4603      	mov	r3, r0
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	4b66      	ldr	r3, [pc, #408]	; (8000d80 <main+0x1d8>)
 8000be8:	801a      	strh	r2, [r3, #0]

	    if (f_reading != f_lastButtonState)
 8000bea:	4b65      	ldr	r3, [pc, #404]	; (8000d80 <main+0x1d8>)
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	4b64      	ldr	r3, [pc, #400]	; (8000d84 <main+0x1dc>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d009      	beq.n	8000c0c <main+0x64>
	    {
	    	// reset the debouncing timer
	    	f_lastDebounceTime = __HAL_TIM_GET_COUNTER(&htim16)/1000;//millis
 8000bf8:	4b5e      	ldr	r3, [pc, #376]	; (8000d74 <main+0x1cc>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bfe:	4a62      	ldr	r2, [pc, #392]	; (8000d88 <main+0x1e0>)
 8000c00:	fba2 2303 	umull	r2, r3, r2, r3
 8000c04:	099b      	lsrs	r3, r3, #6
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	4b60      	ldr	r3, [pc, #384]	; (8000d8c <main+0x1e4>)
 8000c0a:	801a      	strh	r2, [r3, #0]
	    }
	  	if (((__HAL_TIM_GET_COUNTER(&htim16)/100) - f_lastDebounceTime) > f_debounceDelay)
 8000c0c:	4b59      	ldr	r3, [pc, #356]	; (8000d74 <main+0x1cc>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c12:	4a5f      	ldr	r2, [pc, #380]	; (8000d90 <main+0x1e8>)
 8000c14:	fba2 2303 	umull	r2, r3, r2, r3
 8000c18:	095b      	lsrs	r3, r3, #5
 8000c1a:	4a5c      	ldr	r2, [pc, #368]	; (8000d8c <main+0x1e4>)
 8000c1c:	8812      	ldrh	r2, [r2, #0]
 8000c1e:	1a9b      	subs	r3, r3, r2
 8000c20:	4a5c      	ldr	r2, [pc, #368]	; (8000d94 <main+0x1ec>)
 8000c22:	8812      	ldrh	r2, [r2, #0]
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d90f      	bls.n	8000c48 <main+0xa0>
	  	{
	      // if the button state has changed:
	      if (f_reading != f_buttonState)
 8000c28:	4b5b      	ldr	r3, [pc, #364]	; (8000d98 <main+0x1f0>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	4b54      	ldr	r3, [pc, #336]	; (8000d80 <main+0x1d8>)
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d008      	beq.n	8000c48 <main+0xa0>
	      {
	        f_buttonState = f_reading;
 8000c36:	4b52      	ldr	r3, [pc, #328]	; (8000d80 <main+0x1d8>)
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	bf14      	ite	ne
 8000c3e:	2301      	movne	r3, #1
 8000c40:	2300      	moveq	r3, #0
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	4b54      	ldr	r3, [pc, #336]	; (8000d98 <main+0x1f0>)
 8000c46:	701a      	strb	r2, [r3, #0]
	      }
	    }

	    //printf("button stage : %d\n",f_buttonState)  //when switch is pressed
	    if ((f_buttonState == 0) && (f_flag2 == 0))
 8000c48:	4b53      	ldr	r3, [pc, #332]	; (8000d98 <main+0x1f0>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	f083 0301 	eor.w	r3, r3, #1
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d01c      	beq.n	8000c90 <main+0xe8>
 8000c56:	4b51      	ldr	r3, [pc, #324]	; (8000d9c <main+0x1f4>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	f083 0301 	eor.w	r3, r3, #1
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d015      	beq.n	8000c90 <main+0xe8>
	    {
	      f_presstime = (__HAL_TIM_GET_COUNTER(&htim16)/100); //press time in millis
 8000c64:	4b43      	ldr	r3, [pc, #268]	; (8000d74 <main+0x1cc>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c6a:	4a49      	ldr	r2, [pc, #292]	; (8000d90 <main+0x1e8>)
 8000c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c70:	095b      	lsrs	r3, r3, #5
 8000c72:	b29a      	uxth	r2, r3
 8000c74:	4b4a      	ldr	r3, [pc, #296]	; (8000da0 <main+0x1f8>)
 8000c76:	801a      	strh	r2, [r3, #0]
	      f_flag1 = 0;
 8000c78:	4b4a      	ldr	r3, [pc, #296]	; (8000da4 <main+0x1fc>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
	      f_flag2 = 1;
 8000c7e:	4b47      	ldr	r3, [pc, #284]	; (8000d9c <main+0x1f4>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	701a      	strb	r2, [r3, #0]
	      f_tapCounter++; //tap counter will increase by 1
 8000c84:	4b48      	ldr	r3, [pc, #288]	; (8000da8 <main+0x200>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	4b46      	ldr	r3, [pc, #280]	; (8000da8 <main+0x200>)
 8000c8e:	701a      	strb	r2, [r3, #0]
	      //printf("Button Press : %d\n",f_tapCounter);
	    }
	    //when button is released
	    if ((f_buttonState == 1) && (f_flag1 == 0))
 8000c90:	4b41      	ldr	r3, [pc, #260]	; (8000d98 <main+0x1f0>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d024      	beq.n	8000ce2 <main+0x13a>
 8000c98:	4b42      	ldr	r3, [pc, #264]	; (8000da4 <main+0x1fc>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	f083 0301 	eor.w	r3, r3, #1
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d01d      	beq.n	8000ce2 <main+0x13a>
	    {
	      f_releasetime = (__HAL_TIM_GET_COUNTER(&htim16)/100); //release time in millis
 8000ca6:	4b33      	ldr	r3, [pc, #204]	; (8000d74 <main+0x1cc>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cac:	4a38      	ldr	r2, [pc, #224]	; (8000d90 <main+0x1e8>)
 8000cae:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb2:	095b      	lsrs	r3, r3, #5
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	4b3d      	ldr	r3, [pc, #244]	; (8000dac <main+0x204>)
 8000cb8:	801a      	strh	r2, [r3, #0]
	      f_flag1 = 1;
 8000cba:	4b3a      	ldr	r3, [pc, #232]	; (8000da4 <main+0x1fc>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	701a      	strb	r2, [r3, #0]
	      f_flag2 = 0;
 8000cc0:	4b36      	ldr	r3, [pc, #216]	; (8000d9c <main+0x1f4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
	      f_timediff = f_releasetime - f_presstime; //the time gap between press and release
 8000cc6:	4b39      	ldr	r3, [pc, #228]	; (8000dac <main+0x204>)
 8000cc8:	881a      	ldrh	r2, [r3, #0]
 8000cca:	4b35      	ldr	r3, [pc, #212]	; (8000da0 <main+0x1f8>)
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	4b37      	ldr	r3, [pc, #220]	; (8000db0 <main+0x208>)
 8000cd4:	801a      	strh	r2, [r3, #0]
	      printf(" Time gap between Button press and release : %d\n",f_timediff);
 8000cd6:	4b36      	ldr	r3, [pc, #216]	; (8000db0 <main+0x208>)
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4835      	ldr	r0, [pc, #212]	; (8000db4 <main+0x20c>)
 8000cde:	f002 fe11 	bl	8003904 <iprintf>

//*****************************************


		  //wait for some time and if sw is in release position
			if (((__HAL_TIM_GET_COUNTER(&htim16)/100)- f_presstime) > 100 && f_buttonState == 1)
 8000ce2:	4b24      	ldr	r3, [pc, #144]	; (8000d74 <main+0x1cc>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce8:	4a29      	ldr	r2, [pc, #164]	; (8000d90 <main+0x1e8>)
 8000cea:	fba2 2303 	umull	r2, r3, r2, r3
 8000cee:	095b      	lsrs	r3, r3, #5
 8000cf0:	4a2b      	ldr	r2, [pc, #172]	; (8000da0 <main+0x1f8>)
 8000cf2:	8812      	ldrh	r2, [r2, #0]
 8000cf4:	1a9b      	subs	r3, r3, r2
 8000cf6:	2b64      	cmp	r3, #100	; 0x64
 8000cf8:	d935      	bls.n	8000d66 <main+0x1be>
 8000cfa:	4b27      	ldr	r3, [pc, #156]	; (8000d98 <main+0x1f0>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d031      	beq.n	8000d66 <main+0x1be>
			{
				  if (f_tapCounter == 1) //if tap counter is 1
 8000d02:	4b29      	ldr	r3, [pc, #164]	; (8000da8 <main+0x200>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d10b      	bne.n	8000d22 <main+0x17a>
				  {
					if (f_timediff >= 100) //if time diff is larger than 400 then its a hold
 8000d0a:	4b29      	ldr	r3, [pc, #164]	; (8000db0 <main+0x208>)
 8000d0c:	881b      	ldrh	r3, [r3, #0]
 8000d0e:	2b63      	cmp	r3, #99	; 0x63
 8000d10:	d903      	bls.n	8000d1a <main+0x172>
					{
						printf("Hold\n");
 8000d12:	4829      	ldr	r0, [pc, #164]	; (8000db8 <main+0x210>)
 8000d14:	f002 fe7c 	bl	8003a10 <puts>
 8000d18:	e022      	b.n	8000d60 <main+0x1b8>
					}
					else //if timediff is less than 400 then its a single tap
					{
						printf("single tap\n");
 8000d1a:	4828      	ldr	r0, [pc, #160]	; (8000dbc <main+0x214>)
 8000d1c:	f002 fe78 	bl	8003a10 <puts>
 8000d20:	e01e      	b.n	8000d60 <main+0x1b8>
					}
				  }
				  else if (f_tapCounter == 2 ) //if tapcounter is 2
 8000d22:	4b21      	ldr	r3, [pc, #132]	; (8000da8 <main+0x200>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d10b      	bne.n	8000d42 <main+0x19a>
				  {
					if (f_timediff >= 100) // if timediff is greater than  400 then its single tap and hold
 8000d2a:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <main+0x208>)
 8000d2c:	881b      	ldrh	r3, [r3, #0]
 8000d2e:	2b63      	cmp	r3, #99	; 0x63
 8000d30:	d903      	bls.n	8000d3a <main+0x192>
					{
						printf("single tap and hold\n");
 8000d32:	4823      	ldr	r0, [pc, #140]	; (8000dc0 <main+0x218>)
 8000d34:	f002 fe6c 	bl	8003a10 <puts>
 8000d38:	e012      	b.n	8000d60 <main+0x1b8>
					}
					else // if timediff is less than 400 then its just double tap
					{
						printf("double tap\n");
 8000d3a:	4822      	ldr	r0, [pc, #136]	; (8000dc4 <main+0x21c>)
 8000d3c:	f002 fe68 	bl	8003a10 <puts>
 8000d40:	e00e      	b.n	8000d60 <main+0x1b8>
					}
				  }
				  else if (f_tapCounter == 3) //if tapcounter is 3 //then its triple tap
 8000d42:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <main+0x200>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b03      	cmp	r3, #3
 8000d48:	d103      	bne.n	8000d52 <main+0x1aa>
				  {
					  printf("triple tap\n");
 8000d4a:	481f      	ldr	r0, [pc, #124]	; (8000dc8 <main+0x220>)
 8000d4c:	f002 fe60 	bl	8003a10 <puts>
 8000d50:	e006      	b.n	8000d60 <main+0x1b8>
				  }
				  else if (f_tapCounter == 4) //if tapcounter is 4 then its 4 tap
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <main+0x200>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b04      	cmp	r3, #4
 8000d58:	d102      	bne.n	8000d60 <main+0x1b8>
				  {
					  printf("four tap\n");
 8000d5a:	481c      	ldr	r0, [pc, #112]	; (8000dcc <main+0x224>)
 8000d5c:	f002 fe58 	bl	8003a10 <puts>
				  }

			  f_tapCounter = 0;
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <main+0x200>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]
			}

		f_lastButtonState = f_reading;
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <main+0x1d8>)
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <main+0x1dc>)
 8000d6e:	601a      	str	r2, [r3, #0]
	    f_timertest = __HAL_TIM_GET_COUNTER(&htim16); // Get current time (microseconds)
 8000d70:	e727      	b.n	8000bc2 <main+0x1a>
 8000d72:	bf00      	nop
 8000d74:	2000022c 	.word	0x2000022c
 8000d78:	20000210 	.word	0x20000210
 8000d7c:	48000800 	.word	0x48000800
 8000d80:	20000208 	.word	0x20000208
 8000d84:	20000004 	.word	0x20000004
 8000d88:	10624dd3 	.word	0x10624dd3
 8000d8c:	20000204 	.word	0x20000204
 8000d90:	51eb851f 	.word	0x51eb851f
 8000d94:	20000000 	.word	0x20000000
 8000d98:	20000008 	.word	0x20000008
 8000d9c:	20000226 	.word	0x20000226
 8000da0:	20000228 	.word	0x20000228
 8000da4:	2000022a 	.word	0x2000022a
 8000da8:	20000206 	.word	0x20000206
 8000dac:	20000278 	.word	0x20000278
 8000db0:	20000224 	.word	0x20000224
 8000db4:	08005b08 	.word	0x08005b08
 8000db8:	08005b3c 	.word	0x08005b3c
 8000dbc:	08005b44 	.word	0x08005b44
 8000dc0:	08005b50 	.word	0x08005b50
 8000dc4:	08005b64 	.word	0x08005b64
 8000dc8:	08005b70 	.word	0x08005b70
 8000dcc:	08005b7c 	.word	0x08005b7c

08000dd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b096      	sub	sp, #88	; 0x58
 8000dd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	2244      	movs	r2, #68	; 0x44
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f002 f91e 	bl	8003020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de4:	463b      	mov	r3, r7
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000df2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000df6:	f001 f803 	bl	8001e00 <HAL_PWREx_ControlVoltageScaling>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e00:	f000 fa98 	bl	8001334 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000e04:	2310      	movs	r3, #16
 8000e06:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e10:	2360      	movs	r3, #96	; 0x60
 8000e12:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e14:	2302      	movs	r3, #2
 8000e16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000e20:	2328      	movs	r3, #40	; 0x28
 8000e22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e24:	2307      	movs	r3, #7
 8000e26:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	4618      	mov	r0, r3
 8000e36:	f001 f839 	bl	8001eac <HAL_RCC_OscConfig>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000e40:	f000 fa78 	bl	8001334 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e44:	230f      	movs	r3, #15
 8000e46:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e58:	463b      	mov	r3, r7
 8000e5a:	2104      	movs	r1, #4
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f001 fbff 	bl	8002660 <HAL_RCC_ClockConfig>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000e68:	f000 fa64 	bl	8001334 <Error_Handler>
  }
}
 8000e6c:	bf00      	nop
 8000e6e:	3758      	adds	r7, #88	; 0x58
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000e78:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <MX_TIM16_Init+0x48>)
 8000e7a:	4a11      	ldr	r2, [pc, #68]	; (8000ec0 <MX_TIM16_Init+0x4c>)
 8000e7c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000-1;
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <MX_TIM16_Init+0x48>)
 8000e80:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e84:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e86:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <MX_TIM16_Init+0x48>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <MX_TIM16_Init+0x48>)
 8000e8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e92:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <MX_TIM16_Init+0x48>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000e9a:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <MX_TIM16_Init+0x48>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <MX_TIM16_Init+0x48>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_TIM16_Init+0x48>)
 8000ea8:	f001 fdc6 	bl	8002a38 <HAL_TIM_Base_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000eb2:	f000 fa3f 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	2000022c 	.word	0x2000022c
 8000ec0:	40014400 	.word	0x40014400

08000ec4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	; 0x28
 8000ec8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
 8000ed8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eda:	4bbb      	ldr	r3, [pc, #748]	; (80011c8 <MX_GPIO_Init+0x304>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	4aba      	ldr	r2, [pc, #744]	; (80011c8 <MX_GPIO_Init+0x304>)
 8000ee0:	f043 0310 	orr.w	r3, r3, #16
 8000ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee6:	4bb8      	ldr	r3, [pc, #736]	; (80011c8 <MX_GPIO_Init+0x304>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	f003 0310 	and.w	r3, r3, #16
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef2:	4bb5      	ldr	r3, [pc, #724]	; (80011c8 <MX_GPIO_Init+0x304>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	4ab4      	ldr	r2, [pc, #720]	; (80011c8 <MX_GPIO_Init+0x304>)
 8000ef8:	f043 0304 	orr.w	r3, r3, #4
 8000efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efe:	4bb2      	ldr	r3, [pc, #712]	; (80011c8 <MX_GPIO_Init+0x304>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	f003 0304 	and.w	r3, r3, #4
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	4baf      	ldr	r3, [pc, #700]	; (80011c8 <MX_GPIO_Init+0x304>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	4aae      	ldr	r2, [pc, #696]	; (80011c8 <MX_GPIO_Init+0x304>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f16:	4bac      	ldr	r3, [pc, #688]	; (80011c8 <MX_GPIO_Init+0x304>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f22:	4ba9      	ldr	r3, [pc, #676]	; (80011c8 <MX_GPIO_Init+0x304>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f26:	4aa8      	ldr	r2, [pc, #672]	; (80011c8 <MX_GPIO_Init+0x304>)
 8000f28:	f043 0302 	orr.w	r3, r3, #2
 8000f2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2e:	4ba6      	ldr	r3, [pc, #664]	; (80011c8 <MX_GPIO_Init+0x304>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f3a:	4ba3      	ldr	r3, [pc, #652]	; (80011c8 <MX_GPIO_Init+0x304>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3e:	4aa2      	ldr	r2, [pc, #648]	; (80011c8 <MX_GPIO_Init+0x304>)
 8000f40:	f043 0308 	orr.w	r3, r3, #8
 8000f44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f46:	4ba0      	ldr	r3, [pc, #640]	; (80011c8 <MX_GPIO_Init+0x304>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4a:	f003 0308 	and.w	r3, r3, #8
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000f58:	489c      	ldr	r0, [pc, #624]	; (80011cc <MX_GPIO_Init+0x308>)
 8000f5a:	f000 ff07 	bl	8001d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f248 1104 	movw	r1, #33028	; 0x8104
 8000f64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f68:	f000 ff00 	bl	8001d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000f72:	4897      	ldr	r0, [pc, #604]	; (80011d0 <MX_GPIO_Init+0x30c>)
 8000f74:	f000 fefa 	bl	8001d6c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f241 0181 	movw	r1, #4225	; 0x1081
 8000f7e:	4895      	ldr	r0, [pc, #596]	; (80011d4 <MX_GPIO_Init+0x310>)
 8000f80:	f000 fef4 	bl	8001d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f84:	2201      	movs	r2, #1
 8000f86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f8a:	4892      	ldr	r0, [pc, #584]	; (80011d4 <MX_GPIO_Init+0x310>)
 8000f8c:	f000 feee 	bl	8001d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000f96:	4890      	ldr	r0, [pc, #576]	; (80011d8 <MX_GPIO_Init+0x314>)
 8000f98:	f000 fee8 	bl	8001d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2120      	movs	r1, #32
 8000fa0:	488b      	ldr	r0, [pc, #556]	; (80011d0 <MX_GPIO_Init+0x30c>)
 8000fa2:	f000 fee3 	bl	8001d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2101      	movs	r1, #1
 8000faa:	4888      	ldr	r0, [pc, #544]	; (80011cc <MX_GPIO_Init+0x308>)
 8000fac:	f000 fede 	bl	8001d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000fb0:	f240 1315 	movw	r3, #277	; 0x115
 8000fb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4880      	ldr	r0, [pc, #512]	; (80011cc <MX_GPIO_Init+0x308>)
 8000fca:	f000 fd0d 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000fce:	236a      	movs	r3, #106	; 0x6a
 8000fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fd2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	487a      	ldr	r0, [pc, #488]	; (80011cc <MX_GPIO_Init+0x308>)
 8000fe4:	f000 fd00 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : f_sw13_Pin */
  GPIO_InitStruct.Pin = f_sw13_Pin;
 8000fe8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(f_sw13_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4876      	ldr	r0, [pc, #472]	; (80011d8 <MX_GPIO_Init+0x314>)
 8000ffe:	f000 fcf3 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001002:	233f      	movs	r3, #63	; 0x3f
 8001004:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001006:	230b      	movs	r3, #11
 8001008:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	4870      	ldr	r0, [pc, #448]	; (80011d8 <MX_GPIO_Init+0x314>)
 8001016:	f000 fce7 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800101a:	2303      	movs	r3, #3
 800101c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800102a:	2308      	movs	r3, #8
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001038:	f000 fcd6 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800103c:	f248 1304 	movw	r3, #33028	; 0x8104
 8001040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001042:	2301      	movs	r3, #1
 8001044:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	4619      	mov	r1, r3
 8001054:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001058:	f000 fcc6 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800105c:	2308      	movs	r3, #8
 800105e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800106c:	2301      	movs	r3, #1
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4619      	mov	r1, r3
 8001076:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107a:	f000 fcb5 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800107e:	2310      	movs	r3, #16
 8001080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001082:	230b      	movs	r3, #11
 8001084:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001094:	f000 fca8 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001098:	23e0      	movs	r3, #224	; 0xe0
 800109a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a4:	2303      	movs	r3, #3
 80010a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010a8:	2305      	movs	r3, #5
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4619      	mov	r1, r3
 80010b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b6:	f000 fc97 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80010ba:	2301      	movs	r3, #1
 80010bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4619      	mov	r1, r3
 80010ce:	4840      	ldr	r0, [pc, #256]	; (80011d0 <MX_GPIO_Init+0x30c>)
 80010d0:	f000 fc8a 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80010d4:	2302      	movs	r3, #2
 80010d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010d8:	230b      	movs	r3, #11
 80010da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	4619      	mov	r1, r3
 80010e6:	483a      	ldr	r0, [pc, #232]	; (80011d0 <MX_GPIO_Init+0x30c>)
 80010e8:	f000 fc7e 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80010ec:	f24f 0334 	movw	r3, #61492	; 0xf034
 80010f0:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f2:	2301      	movs	r3, #1
 80010f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	2300      	movs	r3, #0
 80010fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	4832      	ldr	r0, [pc, #200]	; (80011d0 <MX_GPIO_Init+0x30c>)
 8001106:	f000 fc6f 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800110a:	f44f 7320 	mov.w	r3, #640	; 0x280
 800110e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001110:	2302      	movs	r3, #2
 8001112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800111c:	2306      	movs	r3, #6
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	4619      	mov	r1, r3
 8001126:	4829      	ldr	r0, [pc, #164]	; (80011cc <MX_GPIO_Init+0x308>)
 8001128:	f000 fc5e 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800112c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001130:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113a:	2303      	movs	r3, #3
 800113c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800113e:	230a      	movs	r3, #10
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	4619      	mov	r1, r3
 8001148:	4820      	ldr	r0, [pc, #128]	; (80011cc <MX_GPIO_Init+0x308>)
 800114a:	f000 fc4d 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800114e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001152:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001154:	2312      	movs	r3, #18
 8001156:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115c:	2303      	movs	r3, #3
 800115e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001160:	2304      	movs	r3, #4
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	4619      	mov	r1, r3
 800116a:	4819      	ldr	r0, [pc, #100]	; (80011d0 <MX_GPIO_Init+0x30c>)
 800116c:	f000 fc3c 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001170:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117e:	2303      	movs	r3, #3
 8001180:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001182:	2307      	movs	r3, #7
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	4811      	ldr	r0, [pc, #68]	; (80011d4 <MX_GPIO_Init+0x310>)
 800118e:	f000 fc2b 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001192:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001196:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001198:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800119c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	4619      	mov	r1, r3
 80011a8:	480a      	ldr	r0, [pc, #40]	; (80011d4 <MX_GPIO_Init+0x310>)
 80011aa:	f000 fc1d 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80011ae:	f243 0381 	movw	r3, #12417	; 0x3081
 80011b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b4:	2301      	movs	r3, #1
 80011b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	4619      	mov	r1, r3
 80011c6:	e009      	b.n	80011dc <MX_GPIO_Init+0x318>
 80011c8:	40021000 	.word	0x40021000
 80011cc:	48001000 	.word	0x48001000
 80011d0:	48000400 	.word	0x48000400
 80011d4:	48000c00 	.word	0x48000c00
 80011d8:	48000800 	.word	0x48000800
 80011dc:	4852      	ldr	r0, [pc, #328]	; (8001328 <MX_GPIO_Init+0x464>)
 80011de:	f000 fc03 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80011e2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80011e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e8:	2301      	movs	r3, #1
 80011ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	484c      	ldr	r0, [pc, #304]	; (800132c <MX_GPIO_Init+0x468>)
 80011fc:	f000 fbf4 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001200:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001206:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800120a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4619      	mov	r1, r3
 8001216:	4845      	ldr	r0, [pc, #276]	; (800132c <MX_GPIO_Init+0x468>)
 8001218:	f000 fbe6 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800121c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	4619      	mov	r1, r3
 8001230:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001234:	f000 fbd8 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001238:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800123c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001246:	2303      	movs	r3, #3
 8001248:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800124a:	230a      	movs	r3, #10
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4619      	mov	r1, r3
 8001254:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001258:	f000 fbc6 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800125c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001260:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001262:	2302      	movs	r3, #2
 8001264:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126a:	2303      	movs	r3, #3
 800126c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800126e:	2306      	movs	r3, #6
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	482c      	ldr	r0, [pc, #176]	; (800132c <MX_GPIO_Init+0x468>)
 800127a:	f000 fbb5 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800127e:	2302      	movs	r3, #2
 8001280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128a:	2303      	movs	r3, #3
 800128c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800128e:	2305      	movs	r3, #5
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	4823      	ldr	r0, [pc, #140]	; (8001328 <MX_GPIO_Init+0x464>)
 800129a:	f000 fba5 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800129e:	2378      	movs	r3, #120	; 0x78
 80012a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	2302      	movs	r3, #2
 80012a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012aa:	2303      	movs	r3, #3
 80012ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012ae:	2307      	movs	r3, #7
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	4619      	mov	r1, r3
 80012b8:	481b      	ldr	r0, [pc, #108]	; (8001328 <MX_GPIO_Init+0x464>)
 80012ba:	f000 fb95 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST_LINK_UART1_TX_Pin ST_LINK_UART1_RX_Pin */
  GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80012be:	23c0      	movs	r3, #192	; 0xc0
 80012c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ca:	2303      	movs	r3, #3
 80012cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012ce:	2307      	movs	r3, #7
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	4815      	ldr	r0, [pc, #84]	; (8001330 <MX_GPIO_Init+0x46c>)
 80012da:	f000 fb85 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80012de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e4:	2312      	movs	r3, #18
 80012e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ec:	2303      	movs	r3, #3
 80012ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012f0:	2304      	movs	r3, #4
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	480d      	ldr	r0, [pc, #52]	; (8001330 <MX_GPIO_Init+0x46c>)
 80012fc:	f000 fb74 	bl	80019e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001300:	2200      	movs	r2, #0
 8001302:	2100      	movs	r1, #0
 8001304:	2017      	movs	r0, #23
 8001306:	f000 fb38 	bl	800197a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800130a:	2017      	movs	r0, #23
 800130c:	f000 fb51 	bl	80019b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	2100      	movs	r1, #0
 8001314:	2028      	movs	r0, #40	; 0x28
 8001316:	f000 fb30 	bl	800197a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800131a:	2028      	movs	r0, #40	; 0x28
 800131c:	f000 fb49 	bl	80019b2 <HAL_NVIC_EnableIRQ>

}
 8001320:	bf00      	nop
 8001322:	3728      	adds	r7, #40	; 0x28
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	48000c00 	.word	0x48000c00
 800132c:	48000800 	.word	0x48000800
 8001330:	48000400 	.word	0x48000400

08001334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001338:	b672      	cpsid	i
}
 800133a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800133c:	e7fe      	b.n	800133c <Error_Handler+0x8>
	...

08001340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001346:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <HAL_MspInit+0x44>)
 8001348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800134a:	4a0e      	ldr	r2, [pc, #56]	; (8001384 <HAL_MspInit+0x44>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6613      	str	r3, [r2, #96]	; 0x60
 8001352:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <HAL_MspInit+0x44>)
 8001354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <HAL_MspInit+0x44>)
 8001360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001362:	4a08      	ldr	r2, [pc, #32]	; (8001384 <HAL_MspInit+0x44>)
 8001364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001368:	6593      	str	r3, [r2, #88]	; 0x58
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_MspInit+0x44>)
 800136c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40021000 	.word	0x40021000

08001388 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a0d      	ldr	r2, [pc, #52]	; (80013cc <HAL_TIM_Base_MspInit+0x44>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d113      	bne.n	80013c2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800139a:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <HAL_TIM_Base_MspInit+0x48>)
 800139c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800139e:	4a0c      	ldr	r2, [pc, #48]	; (80013d0 <HAL_TIM_Base_MspInit+0x48>)
 80013a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a4:	6613      	str	r3, [r2, #96]	; 0x60
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <HAL_TIM_Base_MspInit+0x48>)
 80013a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2100      	movs	r1, #0
 80013b6:	2019      	movs	r0, #25
 80013b8:	f000 fadf 	bl	800197a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80013bc:	2019      	movs	r0, #25
 80013be:	f000 faf8 	bl	80019b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80013c2:	bf00      	nop
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40014400 	.word	0x40014400
 80013d0:	40021000 	.word	0x40021000

080013d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <NMI_Handler+0x4>

080013da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013de:	e7fe      	b.n	80013de <HardFault_Handler+0x4>

080013e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <MemManage_Handler+0x4>

080013e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <BusFault_Handler+0x4>

080013ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <UsageFault_Handler+0x4>

080013f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001420:	f000 f9b0 	bl	8001784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}

08001428 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800142c:	2020      	movs	r0, #32
 800142e:	f000 fcb5 	bl	8001d9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001432:	2040      	movs	r0, #64	; 0x40
 8001434:	f000 fcb2 	bl	8001d9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001438:	2080      	movs	r0, #128	; 0x80
 800143a:	f000 fcaf 	bl	8001d9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800143e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001442:	f000 fcab 	bl	8001d9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001450:	4802      	ldr	r0, [pc, #8]	; (800145c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001452:	f001 fbb1 	bl	8002bb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	2000022c 	.word	0x2000022c

08001460 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001464:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001468:	f000 fc98 	bl	8001d9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800146c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001470:	f000 fc94 	bl	8001d9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001474:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001478:	f000 fc90 	bl	8001d9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800147c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001480:	f000 fc8c 	bl	8001d9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}

08001488 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001492:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <ITM_SendChar+0x48>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a0e      	ldr	r2, [pc, #56]	; (80014d0 <ITM_SendChar+0x48>)
 8001498:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800149c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800149e:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <ITM_SendChar+0x4c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a0c      	ldr	r2, [pc, #48]	; (80014d4 <ITM_SendChar+0x4c>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80014aa:	bf00      	nop
 80014ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d0f8      	beq.n	80014ac <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80014ba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	6013      	str	r3, [r2, #0]
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000edfc 	.word	0xe000edfc
 80014d4:	e0000e00 	.word	0xe0000e00

080014d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
	return 1;
 80014dc:	2301      	movs	r3, #1
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <_kill>:

int _kill(int pid, int sig)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014f2:	f001 fd6b 	bl	8002fcc <__errno>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2216      	movs	r2, #22
 80014fa:	601a      	str	r2, [r3, #0]
	return -1;
 80014fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <_exit>:

void _exit (int status)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001510:	f04f 31ff 	mov.w	r1, #4294967295
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff ffe7 	bl	80014e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800151a:	e7fe      	b.n	800151a <_exit+0x12>

0800151c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	e00a      	b.n	8001544 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800152e:	f3af 8000 	nop.w
 8001532:	4601      	mov	r1, r0
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	1c5a      	adds	r2, r3, #1
 8001538:	60ba      	str	r2, [r7, #8]
 800153a:	b2ca      	uxtb	r2, r1
 800153c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	3301      	adds	r3, #1
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	697a      	ldr	r2, [r7, #20]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	429a      	cmp	r2, r3
 800154a:	dbf0      	blt.n	800152e <_read+0x12>
	}

return len;
 800154c:	687b      	ldr	r3, [r7, #4]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b086      	sub	sp, #24
 800155a:	af00      	add	r7, sp, #0
 800155c:	60f8      	str	r0, [r7, #12]
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	e009      	b.n	800157c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	1c5a      	adds	r2, r3, #1
 800156c:	60ba      	str	r2, [r7, #8]
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff89 	bl	8001488 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	3301      	adds	r3, #1
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	697a      	ldr	r2, [r7, #20]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	429a      	cmp	r2, r3
 8001582:	dbf1      	blt.n	8001568 <_write+0x12>
	}
	return len;
 8001584:	687b      	ldr	r3, [r7, #4]
}
 8001586:	4618      	mov	r0, r3
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <_close>:

int _close(int file)
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
	return -1;
 8001596:	f04f 33ff 	mov.w	r3, #4294967295
}
 800159a:	4618      	mov	r0, r3
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015b6:	605a      	str	r2, [r3, #4]
	return 0;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <_isatty>:

int _isatty(int file)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
	return 1;
 80015ce:	2301      	movs	r3, #1
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
	return 0;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001600:	4a14      	ldr	r2, [pc, #80]	; (8001654 <_sbrk+0x5c>)
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <_sbrk+0x60>)
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800160c:	4b13      	ldr	r3, [pc, #76]	; (800165c <_sbrk+0x64>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d102      	bne.n	800161a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <_sbrk+0x64>)
 8001616:	4a12      	ldr	r2, [pc, #72]	; (8001660 <_sbrk+0x68>)
 8001618:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <_sbrk+0x64>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	429a      	cmp	r2, r3
 8001626:	d207      	bcs.n	8001638 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001628:	f001 fcd0 	bl	8002fcc <__errno>
 800162c:	4603      	mov	r3, r0
 800162e:	220c      	movs	r2, #12
 8001630:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001632:	f04f 33ff 	mov.w	r3, #4294967295
 8001636:	e009      	b.n	800164c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <_sbrk+0x64>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800163e:	4b07      	ldr	r3, [pc, #28]	; (800165c <_sbrk+0x64>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	4a05      	ldr	r2, [pc, #20]	; (800165c <_sbrk+0x64>)
 8001648:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800164a:	68fb      	ldr	r3, [r7, #12]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20018000 	.word	0x20018000
 8001658:	00000400 	.word	0x00000400
 800165c:	20000218 	.word	0x20000218
 8001660:	20000290 	.word	0x20000290

08001664 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <SystemInit+0x20>)
 800166a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800166e:	4a05      	ldr	r2, [pc, #20]	; (8001684 <SystemInit+0x20>)
 8001670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001688:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800168c:	f7ff ffea 	bl	8001664 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001690:	480c      	ldr	r0, [pc, #48]	; (80016c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001692:	490d      	ldr	r1, [pc, #52]	; (80016c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001694:	4a0d      	ldr	r2, [pc, #52]	; (80016cc <LoopForever+0xe>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001698:	e002      	b.n	80016a0 <LoopCopyDataInit>

0800169a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800169c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169e:	3304      	adds	r3, #4

080016a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a4:	d3f9      	bcc.n	800169a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a6:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016a8:	4c0a      	ldr	r4, [pc, #40]	; (80016d4 <LoopForever+0x16>)
  movs r3, #0
 80016aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ac:	e001      	b.n	80016b2 <LoopFillZerobss>

080016ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b0:	3204      	adds	r2, #4

080016b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b4:	d3fb      	bcc.n	80016ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016b6:	f001 fc8f 	bl	8002fd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016ba:	f7ff fa75 	bl	8000ba8 <main>

080016be <LoopForever>:

LoopForever:
    b LoopForever
 80016be:	e7fe      	b.n	80016be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80016cc:	08005fb4 	.word	0x08005fb4
  ldr r2, =_sbss
 80016d0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80016d4:	20000290 	.word	0x20000290

080016d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016d8:	e7fe      	b.n	80016d8 <ADC1_2_IRQHandler>

080016da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016e0:	2300      	movs	r3, #0
 80016e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e4:	2003      	movs	r0, #3
 80016e6:	f000 f93d 	bl	8001964 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ea:	2000      	movs	r0, #0
 80016ec:	f000 f80e 	bl	800170c <HAL_InitTick>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d002      	beq.n	80016fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	71fb      	strb	r3, [r7, #7]
 80016fa:	e001      	b.n	8001700 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016fc:	f7ff fe20 	bl	8001340 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001700:	79fb      	ldrb	r3, [r7, #7]
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001714:	2300      	movs	r3, #0
 8001716:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001718:	4b17      	ldr	r3, [pc, #92]	; (8001778 <HAL_InitTick+0x6c>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d023      	beq.n	8001768 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001720:	4b16      	ldr	r3, [pc, #88]	; (800177c <HAL_InitTick+0x70>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4b14      	ldr	r3, [pc, #80]	; (8001778 <HAL_InitTick+0x6c>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	4619      	mov	r1, r3
 800172a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800172e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001732:	fbb2 f3f3 	udiv	r3, r2, r3
 8001736:	4618      	mov	r0, r3
 8001738:	f000 f949 	bl	80019ce <HAL_SYSTICK_Config>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10f      	bne.n	8001762 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b0f      	cmp	r3, #15
 8001746:	d809      	bhi.n	800175c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001748:	2200      	movs	r2, #0
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	f04f 30ff 	mov.w	r0, #4294967295
 8001750:	f000 f913 	bl	800197a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001754:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <HAL_InitTick+0x74>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	e007      	b.n	800176c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	73fb      	strb	r3, [r7, #15]
 8001760:	e004      	b.n	800176c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	73fb      	strb	r3, [r7, #15]
 8001766:	e001      	b.n	800176c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800176c:	7bfb      	ldrb	r3, [r7, #15]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000014 	.word	0x20000014
 800177c:	2000000c 	.word	0x2000000c
 8001780:	20000010 	.word	0x20000010

08001784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_IncTick+0x20>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_IncTick+0x24>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4413      	add	r3, r2
 8001794:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <HAL_IncTick+0x24>)
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20000014 	.word	0x20000014
 80017a8:	2000027c 	.word	0x2000027c

080017ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return uwTick;
 80017b0:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <HAL_GetTick+0x14>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	2000027c 	.word	0x2000027c

080017c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e0:	4013      	ands	r3, r2
 80017e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f6:	4a04      	ldr	r2, [pc, #16]	; (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	60d3      	str	r3, [r2, #12]
}
 80017fc:	bf00      	nop
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001810:	4b04      	ldr	r3, [pc, #16]	; (8001824 <__NVIC_GetPriorityGrouping+0x18>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	f003 0307 	and.w	r3, r3, #7
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	2b00      	cmp	r3, #0
 8001838:	db0b      	blt.n	8001852 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	f003 021f 	and.w	r2, r3, #31
 8001840:	4907      	ldr	r1, [pc, #28]	; (8001860 <__NVIC_EnableIRQ+0x38>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	095b      	lsrs	r3, r3, #5
 8001848:	2001      	movs	r0, #1
 800184a:	fa00 f202 	lsl.w	r2, r0, r2
 800184e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000e100 	.word	0xe000e100

08001864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	6039      	str	r1, [r7, #0]
 800186e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001874:	2b00      	cmp	r3, #0
 8001876:	db0a      	blt.n	800188e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	b2da      	uxtb	r2, r3
 800187c:	490c      	ldr	r1, [pc, #48]	; (80018b0 <__NVIC_SetPriority+0x4c>)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	0112      	lsls	r2, r2, #4
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	440b      	add	r3, r1
 8001888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800188c:	e00a      	b.n	80018a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4908      	ldr	r1, [pc, #32]	; (80018b4 <__NVIC_SetPriority+0x50>)
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	3b04      	subs	r3, #4
 800189c:	0112      	lsls	r2, r2, #4
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	440b      	add	r3, r1
 80018a2:	761a      	strb	r2, [r3, #24]
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000e100 	.word	0xe000e100
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b089      	sub	sp, #36	; 0x24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f1c3 0307 	rsb	r3, r3, #7
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	bf28      	it	cs
 80018d6:	2304      	movcs	r3, #4
 80018d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3304      	adds	r3, #4
 80018de:	2b06      	cmp	r3, #6
 80018e0:	d902      	bls.n	80018e8 <NVIC_EncodePriority+0x30>
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3b03      	subs	r3, #3
 80018e6:	e000      	b.n	80018ea <NVIC_EncodePriority+0x32>
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	f04f 32ff 	mov.w	r2, #4294967295
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43da      	mvns	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	401a      	ands	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001900:	f04f 31ff 	mov.w	r1, #4294967295
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	fa01 f303 	lsl.w	r3, r1, r3
 800190a:	43d9      	mvns	r1, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	4313      	orrs	r3, r2
         );
}
 8001912:	4618      	mov	r0, r3
 8001914:	3724      	adds	r7, #36	; 0x24
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3b01      	subs	r3, #1
 800192c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001930:	d301      	bcc.n	8001936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001932:	2301      	movs	r3, #1
 8001934:	e00f      	b.n	8001956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001936:	4a0a      	ldr	r2, [pc, #40]	; (8001960 <SysTick_Config+0x40>)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800193e:	210f      	movs	r1, #15
 8001940:	f04f 30ff 	mov.w	r0, #4294967295
 8001944:	f7ff ff8e 	bl	8001864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001948:	4b05      	ldr	r3, [pc, #20]	; (8001960 <SysTick_Config+0x40>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800194e:	4b04      	ldr	r3, [pc, #16]	; (8001960 <SysTick_Config+0x40>)
 8001950:	2207      	movs	r2, #7
 8001952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	e000e010 	.word	0xe000e010

08001964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ff29 	bl	80017c4 <__NVIC_SetPriorityGrouping>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b086      	sub	sp, #24
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
 8001986:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800198c:	f7ff ff3e 	bl	800180c <__NVIC_GetPriorityGrouping>
 8001990:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	68b9      	ldr	r1, [r7, #8]
 8001996:	6978      	ldr	r0, [r7, #20]
 8001998:	f7ff ff8e 	bl	80018b8 <NVIC_EncodePriority>
 800199c:	4602      	mov	r2, r0
 800199e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a2:	4611      	mov	r1, r2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff5d 	bl	8001864 <__NVIC_SetPriority>
}
 80019aa:	bf00      	nop
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	4603      	mov	r3, r0
 80019ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff31 	bl	8001828 <__NVIC_EnableIRQ>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff ffa2 	bl	8001920 <SysTick_Config>
 80019dc:	4603      	mov	r3, r0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b087      	sub	sp, #28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f6:	e17f      	b.n	8001cf8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	2101      	movs	r1, #1
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	fa01 f303 	lsl.w	r3, r1, r3
 8001a04:	4013      	ands	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 8171 	beq.w	8001cf2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 0303 	and.w	r3, r3, #3
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d005      	beq.n	8001a28 <HAL_GPIO_Init+0x40>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d130      	bne.n	8001a8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	2203      	movs	r2, #3
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a5e:	2201      	movs	r2, #1
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43db      	mvns	r3, r3
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	091b      	lsrs	r3, r3, #4
 8001a74:	f003 0201 	and.w	r2, r3, #1
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	d118      	bne.n	8001ac8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	08db      	lsrs	r3, r3, #3
 8001ab2:	f003 0201 	and.w	r2, r3, #1
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	2b03      	cmp	r3, #3
 8001ad2:	d017      	beq.n	8001b04 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	2203      	movs	r2, #3
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d123      	bne.n	8001b58 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	08da      	lsrs	r2, r3, #3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3208      	adds	r2, #8
 8001b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	220f      	movs	r2, #15
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4013      	ands	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	691a      	ldr	r2, [r3, #16]
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	08da      	lsrs	r2, r3, #3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3208      	adds	r2, #8
 8001b52:	6939      	ldr	r1, [r7, #16]
 8001b54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	2203      	movs	r2, #3
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 0203 	and.w	r2, r3, #3
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 80ac 	beq.w	8001cf2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9a:	4b5f      	ldr	r3, [pc, #380]	; (8001d18 <HAL_GPIO_Init+0x330>)
 8001b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b9e:	4a5e      	ldr	r2, [pc, #376]	; (8001d18 <HAL_GPIO_Init+0x330>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ba6:	4b5c      	ldr	r3, [pc, #368]	; (8001d18 <HAL_GPIO_Init+0x330>)
 8001ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bb2:	4a5a      	ldr	r2, [pc, #360]	; (8001d1c <HAL_GPIO_Init+0x334>)
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	089b      	lsrs	r3, r3, #2
 8001bb8:	3302      	adds	r3, #2
 8001bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	220f      	movs	r2, #15
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bdc:	d025      	beq.n	8001c2a <HAL_GPIO_Init+0x242>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a4f      	ldr	r2, [pc, #316]	; (8001d20 <HAL_GPIO_Init+0x338>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d01f      	beq.n	8001c26 <HAL_GPIO_Init+0x23e>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a4e      	ldr	r2, [pc, #312]	; (8001d24 <HAL_GPIO_Init+0x33c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d019      	beq.n	8001c22 <HAL_GPIO_Init+0x23a>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a4d      	ldr	r2, [pc, #308]	; (8001d28 <HAL_GPIO_Init+0x340>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d013      	beq.n	8001c1e <HAL_GPIO_Init+0x236>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a4c      	ldr	r2, [pc, #304]	; (8001d2c <HAL_GPIO_Init+0x344>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d00d      	beq.n	8001c1a <HAL_GPIO_Init+0x232>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a4b      	ldr	r2, [pc, #300]	; (8001d30 <HAL_GPIO_Init+0x348>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d007      	beq.n	8001c16 <HAL_GPIO_Init+0x22e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a4a      	ldr	r2, [pc, #296]	; (8001d34 <HAL_GPIO_Init+0x34c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d101      	bne.n	8001c12 <HAL_GPIO_Init+0x22a>
 8001c0e:	2306      	movs	r3, #6
 8001c10:	e00c      	b.n	8001c2c <HAL_GPIO_Init+0x244>
 8001c12:	2307      	movs	r3, #7
 8001c14:	e00a      	b.n	8001c2c <HAL_GPIO_Init+0x244>
 8001c16:	2305      	movs	r3, #5
 8001c18:	e008      	b.n	8001c2c <HAL_GPIO_Init+0x244>
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	e006      	b.n	8001c2c <HAL_GPIO_Init+0x244>
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e004      	b.n	8001c2c <HAL_GPIO_Init+0x244>
 8001c22:	2302      	movs	r3, #2
 8001c24:	e002      	b.n	8001c2c <HAL_GPIO_Init+0x244>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <HAL_GPIO_Init+0x244>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	f002 0203 	and.w	r2, r2, #3
 8001c32:	0092      	lsls	r2, r2, #2
 8001c34:	4093      	lsls	r3, r2
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c3c:	4937      	ldr	r1, [pc, #220]	; (8001d1c <HAL_GPIO_Init+0x334>)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	3302      	adds	r3, #2
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c4a:	4b3b      	ldr	r3, [pc, #236]	; (8001d38 <HAL_GPIO_Init+0x350>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4013      	ands	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c6e:	4a32      	ldr	r2, [pc, #200]	; (8001d38 <HAL_GPIO_Init+0x350>)
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c74:	4b30      	ldr	r3, [pc, #192]	; (8001d38 <HAL_GPIO_Init+0x350>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c98:	4a27      	ldr	r2, [pc, #156]	; (8001d38 <HAL_GPIO_Init+0x350>)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c9e:	4b26      	ldr	r3, [pc, #152]	; (8001d38 <HAL_GPIO_Init+0x350>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cc2:	4a1d      	ldr	r2, [pc, #116]	; (8001d38 <HAL_GPIO_Init+0x350>)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <HAL_GPIO_Init+0x350>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cec:	4a12      	ldr	r2, [pc, #72]	; (8001d38 <HAL_GPIO_Init+0x350>)
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f47f ae78 	bne.w	80019f8 <HAL_GPIO_Init+0x10>
  }
}
 8001d08:	bf00      	nop
 8001d0a:	bf00      	nop
 8001d0c:	371c      	adds	r7, #28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40010000 	.word	0x40010000
 8001d20:	48000400 	.word	0x48000400
 8001d24:	48000800 	.word	0x48000800
 8001d28:	48000c00 	.word	0x48000c00
 8001d2c:	48001000 	.word	0x48001000
 8001d30:	48001400 	.word	0x48001400
 8001d34:	48001800 	.word	0x48001800
 8001d38:	40010400 	.word	0x40010400

08001d3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691a      	ldr	r2, [r3, #16]
 8001d4c:	887b      	ldrh	r3, [r7, #2]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d54:	2301      	movs	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
 8001d58:	e001      	b.n	8001d5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	807b      	strh	r3, [r7, #2]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d7c:	787b      	ldrb	r3, [r7, #1]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d82:	887a      	ldrh	r2, [r7, #2]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d88:	e002      	b.n	8001d90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d8a:	887a      	ldrh	r2, [r7, #2]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001da6:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001da8:	695a      	ldr	r2, [r3, #20]
 8001daa:	88fb      	ldrh	r3, [r7, #6]
 8001dac:	4013      	ands	r3, r2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d006      	beq.n	8001dc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001db2:	4a05      	ldr	r2, [pc, #20]	; (8001dc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001db4:	88fb      	ldrh	r3, [r7, #6]
 8001db6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001db8:	88fb      	ldrh	r3, [r7, #6]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f000 f806 	bl	8001dcc <HAL_GPIO_EXTI_Callback>
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40010400 	.word	0x40010400

08001dcc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
	...

08001de4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001de8:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <HAL_PWREx_GetVoltageRange+0x18>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40007000 	.word	0x40007000

08001e00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e0e:	d130      	bne.n	8001e72 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e10:	4b23      	ldr	r3, [pc, #140]	; (8001ea0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e1c:	d038      	beq.n	8001e90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e1e:	4b20      	ldr	r3, [pc, #128]	; (8001ea0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e26:	4a1e      	ldr	r2, [pc, #120]	; (8001ea0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e2c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ea4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2232      	movs	r2, #50	; 0x32
 8001e34:	fb02 f303 	mul.w	r3, r2, r3
 8001e38:	4a1b      	ldr	r2, [pc, #108]	; (8001ea8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3e:	0c9b      	lsrs	r3, r3, #18
 8001e40:	3301      	adds	r3, #1
 8001e42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e44:	e002      	b.n	8001e4c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e4c:	4b14      	ldr	r3, [pc, #80]	; (8001ea0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e58:	d102      	bne.n	8001e60 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1f2      	bne.n	8001e46 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e60:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e6c:	d110      	bne.n	8001e90 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e00f      	b.n	8001e92 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e72:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e7e:	d007      	beq.n	8001e90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e80:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e88:	4a05      	ldr	r2, [pc, #20]	; (8001ea0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e8e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40007000 	.word	0x40007000
 8001ea4:	2000000c 	.word	0x2000000c
 8001ea8:	431bde83 	.word	0x431bde83

08001eac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e3c6      	b.n	800264c <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ebe:	4ba1      	ldr	r3, [pc, #644]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
 8001ec6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ec8:	4b9e      	ldr	r3, [pc, #632]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0310 	and.w	r3, r3, #16
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 80e4 	beq.w	80020a8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d007      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x4a>
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	2b0c      	cmp	r3, #12
 8001eea:	f040 808b 	bne.w	8002004 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	f040 8087 	bne.w	8002004 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ef6:	4b93      	ldr	r3, [pc, #588]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d005      	beq.n	8001f0e <HAL_RCC_OscConfig+0x62>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e39e      	b.n	800264c <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a1a      	ldr	r2, [r3, #32]
 8001f12:	4b8c      	ldr	r3, [pc, #560]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d004      	beq.n	8001f28 <HAL_RCC_OscConfig+0x7c>
 8001f1e:	4b89      	ldr	r3, [pc, #548]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f26:	e005      	b.n	8001f34 <HAL_RCC_OscConfig+0x88>
 8001f28:	4b86      	ldr	r3, [pc, #536]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 8001f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f2e:	091b      	lsrs	r3, r3, #4
 8001f30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d223      	bcs.n	8001f80 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f000 fd1b 	bl	8002978 <RCC_SetFlashLatencyFromMSIRange>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e37f      	b.n	800264c <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f4c:	4b7d      	ldr	r3, [pc, #500]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a7c      	ldr	r2, [pc, #496]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 8001f52:	f043 0308 	orr.w	r3, r3, #8
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	4b7a      	ldr	r3, [pc, #488]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	4977      	ldr	r1, [pc, #476]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f6a:	4b76      	ldr	r3, [pc, #472]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	021b      	lsls	r3, r3, #8
 8001f78:	4972      	ldr	r1, [pc, #456]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	604b      	str	r3, [r1, #4]
 8001f7e:	e025      	b.n	8001fcc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f80:	4b70      	ldr	r3, [pc, #448]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a6f      	ldr	r2, [pc, #444]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 8001f86:	f043 0308 	orr.w	r3, r3, #8
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	4b6d      	ldr	r3, [pc, #436]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	496a      	ldr	r1, [pc, #424]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f9e:	4b69      	ldr	r3, [pc, #420]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	021b      	lsls	r3, r3, #8
 8001fac:	4965      	ldr	r1, [pc, #404]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d109      	bne.n	8001fcc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f000 fcdb 	bl	8002978 <RCC_SetFlashLatencyFromMSIRange>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e33f      	b.n	800264c <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fcc:	f000 fc48 	bl	8002860 <HAL_RCC_GetSysClockFreq>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	4b5c      	ldr	r3, [pc, #368]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	091b      	lsrs	r3, r3, #4
 8001fd8:	f003 030f 	and.w	r3, r3, #15
 8001fdc:	495a      	ldr	r1, [pc, #360]	; (8002148 <HAL_RCC_OscConfig+0x29c>)
 8001fde:	5ccb      	ldrb	r3, [r1, r3]
 8001fe0:	f003 031f 	and.w	r3, r3, #31
 8001fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe8:	4a58      	ldr	r2, [pc, #352]	; (800214c <HAL_RCC_OscConfig+0x2a0>)
 8001fea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001fec:	4b58      	ldr	r3, [pc, #352]	; (8002150 <HAL_RCC_OscConfig+0x2a4>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff fb8b 	bl	800170c <HAL_InitTick>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ffa:	7bfb      	ldrb	r3, [r7, #15]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d052      	beq.n	80020a6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002000:	7bfb      	ldrb	r3, [r7, #15]
 8002002:	e323      	b.n	800264c <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d032      	beq.n	8002072 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800200c:	4b4d      	ldr	r3, [pc, #308]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a4c      	ldr	r2, [pc, #304]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002018:	f7ff fbc8 	bl	80017ac <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002020:	f7ff fbc4 	bl	80017ac <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e30c      	b.n	800264c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002032:	4b44      	ldr	r3, [pc, #272]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800203e:	4b41      	ldr	r3, [pc, #260]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a40      	ldr	r2, [pc, #256]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 8002044:	f043 0308 	orr.w	r3, r3, #8
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	4b3e      	ldr	r3, [pc, #248]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	493b      	ldr	r1, [pc, #236]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 8002058:	4313      	orrs	r3, r2
 800205a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800205c:	4b39      	ldr	r3, [pc, #228]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	021b      	lsls	r3, r3, #8
 800206a:	4936      	ldr	r1, [pc, #216]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 800206c:	4313      	orrs	r3, r2
 800206e:	604b      	str	r3, [r1, #4]
 8002070:	e01a      	b.n	80020a8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002072:	4b34      	ldr	r3, [pc, #208]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a33      	ldr	r2, [pc, #204]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 8002078:	f023 0301 	bic.w	r3, r3, #1
 800207c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800207e:	f7ff fb95 	bl	80017ac <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002086:	f7ff fb91 	bl	80017ac <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e2d9      	b.n	800264c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002098:	4b2a      	ldr	r3, [pc, #168]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1f0      	bne.n	8002086 <HAL_RCC_OscConfig+0x1da>
 80020a4:	e000      	b.n	80020a8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020a6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d074      	beq.n	800219e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d005      	beq.n	80020c6 <HAL_RCC_OscConfig+0x21a>
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	2b0c      	cmp	r3, #12
 80020be:	d10e      	bne.n	80020de <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	d10b      	bne.n	80020de <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c6:	4b1f      	ldr	r3, [pc, #124]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d064      	beq.n	800219c <HAL_RCC_OscConfig+0x2f0>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d160      	bne.n	800219c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e2b6      	b.n	800264c <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e6:	d106      	bne.n	80020f6 <HAL_RCC_OscConfig+0x24a>
 80020e8:	4b16      	ldr	r3, [pc, #88]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a15      	ldr	r2, [pc, #84]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 80020ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f2:	6013      	str	r3, [r2, #0]
 80020f4:	e01d      	b.n	8002132 <HAL_RCC_OscConfig+0x286>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020fe:	d10c      	bne.n	800211a <HAL_RCC_OscConfig+0x26e>
 8002100:	4b10      	ldr	r3, [pc, #64]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a0f      	ldr	r2, [pc, #60]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 8002106:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	4b0d      	ldr	r3, [pc, #52]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a0c      	ldr	r2, [pc, #48]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 8002112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002116:	6013      	str	r3, [r2, #0]
 8002118:	e00b      	b.n	8002132 <HAL_RCC_OscConfig+0x286>
 800211a:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a09      	ldr	r2, [pc, #36]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 8002120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	4b07      	ldr	r3, [pc, #28]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a06      	ldr	r2, [pc, #24]	; (8002144 <HAL_RCC_OscConfig+0x298>)
 800212c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002130:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d01c      	beq.n	8002174 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213a:	f7ff fb37 	bl	80017ac <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002140:	e011      	b.n	8002166 <HAL_RCC_OscConfig+0x2ba>
 8002142:	bf00      	nop
 8002144:	40021000 	.word	0x40021000
 8002148:	08005b88 	.word	0x08005b88
 800214c:	2000000c 	.word	0x2000000c
 8002150:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002154:	f7ff fb2a 	bl	80017ac <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b64      	cmp	r3, #100	; 0x64
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e272      	b.n	800264c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002166:	4baf      	ldr	r3, [pc, #700]	; (8002424 <HAL_RCC_OscConfig+0x578>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0x2a8>
 8002172:	e014      	b.n	800219e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002174:	f7ff fb1a 	bl	80017ac <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800217c:	f7ff fb16 	bl	80017ac <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b64      	cmp	r3, #100	; 0x64
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e25e      	b.n	800264c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800218e:	4ba5      	ldr	r3, [pc, #660]	; (8002424 <HAL_RCC_OscConfig+0x578>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x2d0>
 800219a:	e000      	b.n	800219e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800219c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d060      	beq.n	800226c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d005      	beq.n	80021bc <HAL_RCC_OscConfig+0x310>
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	2b0c      	cmp	r3, #12
 80021b4:	d119      	bne.n	80021ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d116      	bne.n	80021ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021bc:	4b99      	ldr	r3, [pc, #612]	; (8002424 <HAL_RCC_OscConfig+0x578>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d005      	beq.n	80021d4 <HAL_RCC_OscConfig+0x328>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e23b      	b.n	800264c <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d4:	4b93      	ldr	r3, [pc, #588]	; (8002424 <HAL_RCC_OscConfig+0x578>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	061b      	lsls	r3, r3, #24
 80021e2:	4990      	ldr	r1, [pc, #576]	; (8002424 <HAL_RCC_OscConfig+0x578>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021e8:	e040      	b.n	800226c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d023      	beq.n	800223a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f2:	4b8c      	ldr	r3, [pc, #560]	; (8002424 <HAL_RCC_OscConfig+0x578>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a8b      	ldr	r2, [pc, #556]	; (8002424 <HAL_RCC_OscConfig+0x578>)
 80021f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fe:	f7ff fad5 	bl	80017ac <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002206:	f7ff fad1 	bl	80017ac <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e219      	b.n	800264c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002218:	4b82      	ldr	r3, [pc, #520]	; (8002424 <HAL_RCC_OscConfig+0x578>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0f0      	beq.n	8002206 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002224:	4b7f      	ldr	r3, [pc, #508]	; (8002424 <HAL_RCC_OscConfig+0x578>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	061b      	lsls	r3, r3, #24
 8002232:	497c      	ldr	r1, [pc, #496]	; (8002424 <HAL_RCC_OscConfig+0x578>)
 8002234:	4313      	orrs	r3, r2
 8002236:	604b      	str	r3, [r1, #4]
 8002238:	e018      	b.n	800226c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800223a:	4b7a      	ldr	r3, [pc, #488]	; (8002424 <HAL_RCC_OscConfig+0x578>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a79      	ldr	r2, [pc, #484]	; (8002424 <HAL_RCC_OscConfig+0x578>)
 8002240:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002246:	f7ff fab1 	bl	80017ac <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800224e:	f7ff faad 	bl	80017ac <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e1f5      	b.n	800264c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002260:	4b70      	ldr	r3, [pc, #448]	; (8002424 <HAL_RCC_OscConfig+0x578>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1f0      	bne.n	800224e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0308 	and.w	r3, r3, #8
 8002274:	2b00      	cmp	r3, #0
 8002276:	d03c      	beq.n	80022f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d01c      	beq.n	80022ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002280:	4b68      	ldr	r3, [pc, #416]	; (8002424 <HAL_RCC_OscConfig+0x578>)
 8002282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002286:	4a67      	ldr	r2, [pc, #412]	; (8002424 <HAL_RCC_OscConfig+0x578>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002290:	f7ff fa8c 	bl	80017ac <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002298:	f7ff fa88 	bl	80017ac <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e1d0      	b.n	800264c <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022aa:	4b5e      	ldr	r3, [pc, #376]	; (8002424 <HAL_RCC_OscConfig+0x578>)
 80022ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0ef      	beq.n	8002298 <HAL_RCC_OscConfig+0x3ec>
 80022b8:	e01b      	b.n	80022f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ba:	4b5a      	ldr	r3, [pc, #360]	; (8002424 <HAL_RCC_OscConfig+0x578>)
 80022bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022c0:	4a58      	ldr	r2, [pc, #352]	; (8002424 <HAL_RCC_OscConfig+0x578>)
 80022c2:	f023 0301 	bic.w	r3, r3, #1
 80022c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ca:	f7ff fa6f 	bl	80017ac <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d2:	f7ff fa6b 	bl	80017ac <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e1b3      	b.n	800264c <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022e4:	4b4f      	ldr	r3, [pc, #316]	; (8002424 <HAL_RCC_OscConfig+0x578>)
 80022e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1ef      	bne.n	80022d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 80a6 	beq.w	800244c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002300:	2300      	movs	r3, #0
 8002302:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002304:	4b47      	ldr	r3, [pc, #284]	; (8002424 <HAL_RCC_OscConfig+0x578>)
 8002306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10d      	bne.n	800232c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002310:	4b44      	ldr	r3, [pc, #272]	; (8002424 <HAL_RCC_OscConfig+0x578>)
 8002312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002314:	4a43      	ldr	r2, [pc, #268]	; (8002424 <HAL_RCC_OscConfig+0x578>)
 8002316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800231a:	6593      	str	r3, [r2, #88]	; 0x58
 800231c:	4b41      	ldr	r3, [pc, #260]	; (8002424 <HAL_RCC_OscConfig+0x578>)
 800231e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002324:	60bb      	str	r3, [r7, #8]
 8002326:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002328:	2301      	movs	r3, #1
 800232a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800232c:	4b3e      	ldr	r3, [pc, #248]	; (8002428 <HAL_RCC_OscConfig+0x57c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002334:	2b00      	cmp	r3, #0
 8002336:	d118      	bne.n	800236a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002338:	4b3b      	ldr	r3, [pc, #236]	; (8002428 <HAL_RCC_OscConfig+0x57c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a3a      	ldr	r2, [pc, #232]	; (8002428 <HAL_RCC_OscConfig+0x57c>)
 800233e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002342:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002344:	f7ff fa32 	bl	80017ac <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800234c:	f7ff fa2e 	bl	80017ac <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e176      	b.n	800264c <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800235e:	4b32      	ldr	r3, [pc, #200]	; (8002428 <HAL_RCC_OscConfig+0x57c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0f0      	beq.n	800234c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d108      	bne.n	8002384 <HAL_RCC_OscConfig+0x4d8>
 8002372:	4b2c      	ldr	r3, [pc, #176]	; (8002424 <HAL_RCC_OscConfig+0x578>)
 8002374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002378:	4a2a      	ldr	r2, [pc, #168]	; (8002424 <HAL_RCC_OscConfig+0x578>)
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002382:	e024      	b.n	80023ce <HAL_RCC_OscConfig+0x522>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	2b05      	cmp	r3, #5
 800238a:	d110      	bne.n	80023ae <HAL_RCC_OscConfig+0x502>
 800238c:	4b25      	ldr	r3, [pc, #148]	; (8002424 <HAL_RCC_OscConfig+0x578>)
 800238e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002392:	4a24      	ldr	r2, [pc, #144]	; (8002424 <HAL_RCC_OscConfig+0x578>)
 8002394:	f043 0304 	orr.w	r3, r3, #4
 8002398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800239c:	4b21      	ldr	r3, [pc, #132]	; (8002424 <HAL_RCC_OscConfig+0x578>)
 800239e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a2:	4a20      	ldr	r2, [pc, #128]	; (8002424 <HAL_RCC_OscConfig+0x578>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023ac:	e00f      	b.n	80023ce <HAL_RCC_OscConfig+0x522>
 80023ae:	4b1d      	ldr	r3, [pc, #116]	; (8002424 <HAL_RCC_OscConfig+0x578>)
 80023b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b4:	4a1b      	ldr	r2, [pc, #108]	; (8002424 <HAL_RCC_OscConfig+0x578>)
 80023b6:	f023 0301 	bic.w	r3, r3, #1
 80023ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023be:	4b19      	ldr	r3, [pc, #100]	; (8002424 <HAL_RCC_OscConfig+0x578>)
 80023c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c4:	4a17      	ldr	r2, [pc, #92]	; (8002424 <HAL_RCC_OscConfig+0x578>)
 80023c6:	f023 0304 	bic.w	r3, r3, #4
 80023ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d016      	beq.n	8002404 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d6:	f7ff f9e9 	bl	80017ac <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023dc:	e00a      	b.n	80023f4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023de:	f7ff f9e5 	bl	80017ac <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e12b      	b.n	800264c <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <HAL_RCC_OscConfig+0x578>)
 80023f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0ed      	beq.n	80023de <HAL_RCC_OscConfig+0x532>
 8002402:	e01a      	b.n	800243a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002404:	f7ff f9d2 	bl	80017ac <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800240a:	e00f      	b.n	800242c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240c:	f7ff f9ce 	bl	80017ac <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	f241 3288 	movw	r2, #5000	; 0x1388
 800241a:	4293      	cmp	r3, r2
 800241c:	d906      	bls.n	800242c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e114      	b.n	800264c <HAL_RCC_OscConfig+0x7a0>
 8002422:	bf00      	nop
 8002424:	40021000 	.word	0x40021000
 8002428:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800242c:	4b89      	ldr	r3, [pc, #548]	; (8002654 <HAL_RCC_OscConfig+0x7a8>)
 800242e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1e8      	bne.n	800240c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800243a:	7ffb      	ldrb	r3, [r7, #31]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d105      	bne.n	800244c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002440:	4b84      	ldr	r3, [pc, #528]	; (8002654 <HAL_RCC_OscConfig+0x7a8>)
 8002442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002444:	4a83      	ldr	r2, [pc, #524]	; (8002654 <HAL_RCC_OscConfig+0x7a8>)
 8002446:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800244a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 80fa 	beq.w	800264a <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245a:	2b02      	cmp	r3, #2
 800245c:	f040 80d0 	bne.w	8002600 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002460:	4b7c      	ldr	r3, [pc, #496]	; (8002654 <HAL_RCC_OscConfig+0x7a8>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f003 0203 	and.w	r2, r3, #3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002470:	429a      	cmp	r2, r3
 8002472:	d130      	bne.n	80024d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	3b01      	subs	r3, #1
 8002480:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002482:	429a      	cmp	r2, r3
 8002484:	d127      	bne.n	80024d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002490:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002492:	429a      	cmp	r2, r3
 8002494:	d11f      	bne.n	80024d6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024a0:	2a07      	cmp	r2, #7
 80024a2:	bf14      	ite	ne
 80024a4:	2201      	movne	r2, #1
 80024a6:	2200      	moveq	r2, #0
 80024a8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d113      	bne.n	80024d6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b8:	085b      	lsrs	r3, r3, #1
 80024ba:	3b01      	subs	r3, #1
 80024bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024be:	429a      	cmp	r2, r3
 80024c0:	d109      	bne.n	80024d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024cc:	085b      	lsrs	r3, r3, #1
 80024ce:	3b01      	subs	r3, #1
 80024d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d06e      	beq.n	80025b4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	2b0c      	cmp	r3, #12
 80024da:	d069      	beq.n	80025b0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80024dc:	4b5d      	ldr	r3, [pc, #372]	; (8002654 <HAL_RCC_OscConfig+0x7a8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d105      	bne.n	80024f4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80024e8:	4b5a      	ldr	r3, [pc, #360]	; (8002654 <HAL_RCC_OscConfig+0x7a8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0a9      	b.n	800264c <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80024f8:	4b56      	ldr	r3, [pc, #344]	; (8002654 <HAL_RCC_OscConfig+0x7a8>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a55      	ldr	r2, [pc, #340]	; (8002654 <HAL_RCC_OscConfig+0x7a8>)
 80024fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002502:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002504:	f7ff f952 	bl	80017ac <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800250c:	f7ff f94e 	bl	80017ac <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e096      	b.n	800264c <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800251e:	4b4d      	ldr	r3, [pc, #308]	; (8002654 <HAL_RCC_OscConfig+0x7a8>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f0      	bne.n	800250c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800252a:	4b4a      	ldr	r3, [pc, #296]	; (8002654 <HAL_RCC_OscConfig+0x7a8>)
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	4b4a      	ldr	r3, [pc, #296]	; (8002658 <HAL_RCC_OscConfig+0x7ac>)
 8002530:	4013      	ands	r3, r2
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800253a:	3a01      	subs	r2, #1
 800253c:	0112      	lsls	r2, r2, #4
 800253e:	4311      	orrs	r1, r2
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002544:	0212      	lsls	r2, r2, #8
 8002546:	4311      	orrs	r1, r2
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800254c:	0852      	lsrs	r2, r2, #1
 800254e:	3a01      	subs	r2, #1
 8002550:	0552      	lsls	r2, r2, #21
 8002552:	4311      	orrs	r1, r2
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002558:	0852      	lsrs	r2, r2, #1
 800255a:	3a01      	subs	r2, #1
 800255c:	0652      	lsls	r2, r2, #25
 800255e:	4311      	orrs	r1, r2
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002564:	0912      	lsrs	r2, r2, #4
 8002566:	0452      	lsls	r2, r2, #17
 8002568:	430a      	orrs	r2, r1
 800256a:	493a      	ldr	r1, [pc, #232]	; (8002654 <HAL_RCC_OscConfig+0x7a8>)
 800256c:	4313      	orrs	r3, r2
 800256e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002570:	4b38      	ldr	r3, [pc, #224]	; (8002654 <HAL_RCC_OscConfig+0x7a8>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a37      	ldr	r2, [pc, #220]	; (8002654 <HAL_RCC_OscConfig+0x7a8>)
 8002576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800257a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800257c:	4b35      	ldr	r3, [pc, #212]	; (8002654 <HAL_RCC_OscConfig+0x7a8>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	4a34      	ldr	r2, [pc, #208]	; (8002654 <HAL_RCC_OscConfig+0x7a8>)
 8002582:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002586:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002588:	f7ff f910 	bl	80017ac <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002590:	f7ff f90c 	bl	80017ac <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e054      	b.n	800264c <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025a2:	4b2c      	ldr	r3, [pc, #176]	; (8002654 <HAL_RCC_OscConfig+0x7a8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0f0      	beq.n	8002590 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025ae:	e04c      	b.n	800264a <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e04b      	b.n	800264c <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025b4:	4b27      	ldr	r3, [pc, #156]	; (8002654 <HAL_RCC_OscConfig+0x7a8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d144      	bne.n	800264a <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025c0:	4b24      	ldr	r3, [pc, #144]	; (8002654 <HAL_RCC_OscConfig+0x7a8>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a23      	ldr	r2, [pc, #140]	; (8002654 <HAL_RCC_OscConfig+0x7a8>)
 80025c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025cc:	4b21      	ldr	r3, [pc, #132]	; (8002654 <HAL_RCC_OscConfig+0x7a8>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	4a20      	ldr	r2, [pc, #128]	; (8002654 <HAL_RCC_OscConfig+0x7a8>)
 80025d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025d8:	f7ff f8e8 	bl	80017ac <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e0:	f7ff f8e4 	bl	80017ac <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e02c      	b.n	800264c <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025f2:	4b18      	ldr	r3, [pc, #96]	; (8002654 <HAL_RCC_OscConfig+0x7a8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0x734>
 80025fe:	e024      	b.n	800264a <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	2b0c      	cmp	r3, #12
 8002604:	d01f      	beq.n	8002646 <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002606:	4b13      	ldr	r3, [pc, #76]	; (8002654 <HAL_RCC_OscConfig+0x7a8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a12      	ldr	r2, [pc, #72]	; (8002654 <HAL_RCC_OscConfig+0x7a8>)
 800260c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002612:	f7ff f8cb 	bl	80017ac <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261a:	f7ff f8c7 	bl	80017ac <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e00f      	b.n	800264c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800262c:	4b09      	ldr	r3, [pc, #36]	; (8002654 <HAL_RCC_OscConfig+0x7a8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f0      	bne.n	800261a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002638:	4b06      	ldr	r3, [pc, #24]	; (8002654 <HAL_RCC_OscConfig+0x7a8>)
 800263a:	68da      	ldr	r2, [r3, #12]
 800263c:	4905      	ldr	r1, [pc, #20]	; (8002654 <HAL_RCC_OscConfig+0x7a8>)
 800263e:	4b07      	ldr	r3, [pc, #28]	; (800265c <HAL_RCC_OscConfig+0x7b0>)
 8002640:	4013      	ands	r3, r2
 8002642:	60cb      	str	r3, [r1, #12]
 8002644:	e001      	b.n	800264a <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3720      	adds	r7, #32
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40021000 	.word	0x40021000
 8002658:	f99d808c 	.word	0xf99d808c
 800265c:	feeefffc 	.word	0xfeeefffc

08002660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0e7      	b.n	8002844 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002674:	4b75      	ldr	r3, [pc, #468]	; (800284c <HAL_RCC_ClockConfig+0x1ec>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d910      	bls.n	80026a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002682:	4b72      	ldr	r3, [pc, #456]	; (800284c <HAL_RCC_ClockConfig+0x1ec>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f023 0207 	bic.w	r2, r3, #7
 800268a:	4970      	ldr	r1, [pc, #448]	; (800284c <HAL_RCC_ClockConfig+0x1ec>)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	4313      	orrs	r3, r2
 8002690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002692:	4b6e      	ldr	r3, [pc, #440]	; (800284c <HAL_RCC_ClockConfig+0x1ec>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d001      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e0cf      	b.n	8002844 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d010      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	4b66      	ldr	r3, [pc, #408]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026bc:	429a      	cmp	r2, r3
 80026be:	d908      	bls.n	80026d2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c0:	4b63      	ldr	r3, [pc, #396]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	4960      	ldr	r1, [pc, #384]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d04c      	beq.n	8002778 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	d107      	bne.n	80026f6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026e6:	4b5a      	ldr	r3, [pc, #360]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d121      	bne.n	8002736 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e0a6      	b.n	8002844 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d107      	bne.n	800270e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026fe:	4b54      	ldr	r3, [pc, #336]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d115      	bne.n	8002736 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e09a      	b.n	8002844 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d107      	bne.n	8002726 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002716:	4b4e      	ldr	r3, [pc, #312]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d109      	bne.n	8002736 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e08e      	b.n	8002844 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002726:	4b4a      	ldr	r3, [pc, #296]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e086      	b.n	8002844 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002736:	4b46      	ldr	r3, [pc, #280]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f023 0203 	bic.w	r2, r3, #3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	4943      	ldr	r1, [pc, #268]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 8002744:	4313      	orrs	r3, r2
 8002746:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002748:	f7ff f830 	bl	80017ac <HAL_GetTick>
 800274c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274e:	e00a      	b.n	8002766 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002750:	f7ff f82c 	bl	80017ac <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	f241 3288 	movw	r2, #5000	; 0x1388
 800275e:	4293      	cmp	r3, r2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e06e      	b.n	8002844 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002766:	4b3a      	ldr	r3, [pc, #232]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 020c 	and.w	r2, r3, #12
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	429a      	cmp	r2, r3
 8002776:	d1eb      	bne.n	8002750 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d010      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	4b31      	ldr	r3, [pc, #196]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002790:	429a      	cmp	r2, r3
 8002792:	d208      	bcs.n	80027a6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002794:	4b2e      	ldr	r3, [pc, #184]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	492b      	ldr	r1, [pc, #172]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027a6:	4b29      	ldr	r3, [pc, #164]	; (800284c <HAL_RCC_ClockConfig+0x1ec>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d210      	bcs.n	80027d6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b4:	4b25      	ldr	r3, [pc, #148]	; (800284c <HAL_RCC_ClockConfig+0x1ec>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f023 0207 	bic.w	r2, r3, #7
 80027bc:	4923      	ldr	r1, [pc, #140]	; (800284c <HAL_RCC_ClockConfig+0x1ec>)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c4:	4b21      	ldr	r3, [pc, #132]	; (800284c <HAL_RCC_ClockConfig+0x1ec>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d001      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e036      	b.n	8002844 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0304 	and.w	r3, r3, #4
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d008      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027e2:	4b1b      	ldr	r3, [pc, #108]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	4918      	ldr	r1, [pc, #96]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d009      	beq.n	8002814 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002800:	4b13      	ldr	r3, [pc, #76]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	4910      	ldr	r1, [pc, #64]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 8002810:	4313      	orrs	r3, r2
 8002812:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002814:	f000 f824 	bl	8002860 <HAL_RCC_GetSysClockFreq>
 8002818:	4602      	mov	r2, r0
 800281a:	4b0d      	ldr	r3, [pc, #52]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	091b      	lsrs	r3, r3, #4
 8002820:	f003 030f 	and.w	r3, r3, #15
 8002824:	490b      	ldr	r1, [pc, #44]	; (8002854 <HAL_RCC_ClockConfig+0x1f4>)
 8002826:	5ccb      	ldrb	r3, [r1, r3]
 8002828:	f003 031f 	and.w	r3, r3, #31
 800282c:	fa22 f303 	lsr.w	r3, r2, r3
 8002830:	4a09      	ldr	r2, [pc, #36]	; (8002858 <HAL_RCC_ClockConfig+0x1f8>)
 8002832:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002834:	4b09      	ldr	r3, [pc, #36]	; (800285c <HAL_RCC_ClockConfig+0x1fc>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f7fe ff67 	bl	800170c <HAL_InitTick>
 800283e:	4603      	mov	r3, r0
 8002840:	72fb      	strb	r3, [r7, #11]

  return status;
 8002842:	7afb      	ldrb	r3, [r7, #11]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40022000 	.word	0x40022000
 8002850:	40021000 	.word	0x40021000
 8002854:	08005b88 	.word	0x08005b88
 8002858:	2000000c 	.word	0x2000000c
 800285c:	20000010 	.word	0x20000010

08002860 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002860:	b480      	push	{r7}
 8002862:	b089      	sub	sp, #36	; 0x24
 8002864:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002866:	2300      	movs	r3, #0
 8002868:	61fb      	str	r3, [r7, #28]
 800286a:	2300      	movs	r3, #0
 800286c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800286e:	4b3e      	ldr	r3, [pc, #248]	; (8002968 <HAL_RCC_GetSysClockFreq+0x108>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 030c 	and.w	r3, r3, #12
 8002876:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002878:	4b3b      	ldr	r3, [pc, #236]	; (8002968 <HAL_RCC_GetSysClockFreq+0x108>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 0303 	and.w	r3, r3, #3
 8002880:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <HAL_RCC_GetSysClockFreq+0x34>
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	2b0c      	cmp	r3, #12
 800288c:	d121      	bne.n	80028d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d11e      	bne.n	80028d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002894:	4b34      	ldr	r3, [pc, #208]	; (8002968 <HAL_RCC_GetSysClockFreq+0x108>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	2b00      	cmp	r3, #0
 800289e:	d107      	bne.n	80028b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028a0:	4b31      	ldr	r3, [pc, #196]	; (8002968 <HAL_RCC_GetSysClockFreq+0x108>)
 80028a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028a6:	0a1b      	lsrs	r3, r3, #8
 80028a8:	f003 030f 	and.w	r3, r3, #15
 80028ac:	61fb      	str	r3, [r7, #28]
 80028ae:	e005      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028b0:	4b2d      	ldr	r3, [pc, #180]	; (8002968 <HAL_RCC_GetSysClockFreq+0x108>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	091b      	lsrs	r3, r3, #4
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028bc:	4a2b      	ldr	r2, [pc, #172]	; (800296c <HAL_RCC_GetSysClockFreq+0x10c>)
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10d      	bne.n	80028e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028d0:	e00a      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d102      	bne.n	80028de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028d8:	4b25      	ldr	r3, [pc, #148]	; (8002970 <HAL_RCC_GetSysClockFreq+0x110>)
 80028da:	61bb      	str	r3, [r7, #24]
 80028dc:	e004      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028e4:	4b23      	ldr	r3, [pc, #140]	; (8002974 <HAL_RCC_GetSysClockFreq+0x114>)
 80028e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	2b0c      	cmp	r3, #12
 80028ec:	d134      	bne.n	8002958 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028ee:	4b1e      	ldr	r3, [pc, #120]	; (8002968 <HAL_RCC_GetSysClockFreq+0x108>)
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d003      	beq.n	8002906 <HAL_RCC_GetSysClockFreq+0xa6>
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2b03      	cmp	r3, #3
 8002902:	d003      	beq.n	800290c <HAL_RCC_GetSysClockFreq+0xac>
 8002904:	e005      	b.n	8002912 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002906:	4b1a      	ldr	r3, [pc, #104]	; (8002970 <HAL_RCC_GetSysClockFreq+0x110>)
 8002908:	617b      	str	r3, [r7, #20]
      break;
 800290a:	e005      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800290c:	4b19      	ldr	r3, [pc, #100]	; (8002974 <HAL_RCC_GetSysClockFreq+0x114>)
 800290e:	617b      	str	r3, [r7, #20]
      break;
 8002910:	e002      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	617b      	str	r3, [r7, #20]
      break;
 8002916:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002918:	4b13      	ldr	r3, [pc, #76]	; (8002968 <HAL_RCC_GetSysClockFreq+0x108>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	091b      	lsrs	r3, r3, #4
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	3301      	adds	r3, #1
 8002924:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002926:	4b10      	ldr	r3, [pc, #64]	; (8002968 <HAL_RCC_GetSysClockFreq+0x108>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	0a1b      	lsrs	r3, r3, #8
 800292c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	fb02 f203 	mul.w	r2, r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	fbb2 f3f3 	udiv	r3, r2, r3
 800293c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800293e:	4b0a      	ldr	r3, [pc, #40]	; (8002968 <HAL_RCC_GetSysClockFreq+0x108>)
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	0e5b      	lsrs	r3, r3, #25
 8002944:	f003 0303 	and.w	r3, r3, #3
 8002948:	3301      	adds	r3, #1
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	fbb2 f3f3 	udiv	r3, r2, r3
 8002956:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002958:	69bb      	ldr	r3, [r7, #24]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3724      	adds	r7, #36	; 0x24
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	40021000 	.word	0x40021000
 800296c:	08005b98 	.word	0x08005b98
 8002970:	00f42400 	.word	0x00f42400
 8002974:	007a1200 	.word	0x007a1200

08002978 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002980:	2300      	movs	r3, #0
 8002982:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002984:	4b2a      	ldr	r3, [pc, #168]	; (8002a30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002990:	f7ff fa28 	bl	8001de4 <HAL_PWREx_GetVoltageRange>
 8002994:	6178      	str	r0, [r7, #20]
 8002996:	e014      	b.n	80029c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002998:	4b25      	ldr	r3, [pc, #148]	; (8002a30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800299a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299c:	4a24      	ldr	r2, [pc, #144]	; (8002a30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800299e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a2:	6593      	str	r3, [r2, #88]	; 0x58
 80029a4:	4b22      	ldr	r3, [pc, #136]	; (8002a30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80029b0:	f7ff fa18 	bl	8001de4 <HAL_PWREx_GetVoltageRange>
 80029b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80029b6:	4b1e      	ldr	r3, [pc, #120]	; (8002a30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ba:	4a1d      	ldr	r2, [pc, #116]	; (8002a30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029c8:	d10b      	bne.n	80029e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b80      	cmp	r3, #128	; 0x80
 80029ce:	d919      	bls.n	8002a04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2ba0      	cmp	r3, #160	; 0xa0
 80029d4:	d902      	bls.n	80029dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029d6:	2302      	movs	r3, #2
 80029d8:	613b      	str	r3, [r7, #16]
 80029da:	e013      	b.n	8002a04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029dc:	2301      	movs	r3, #1
 80029de:	613b      	str	r3, [r7, #16]
 80029e0:	e010      	b.n	8002a04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b80      	cmp	r3, #128	; 0x80
 80029e6:	d902      	bls.n	80029ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80029e8:	2303      	movs	r3, #3
 80029ea:	613b      	str	r3, [r7, #16]
 80029ec:	e00a      	b.n	8002a04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b80      	cmp	r3, #128	; 0x80
 80029f2:	d102      	bne.n	80029fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029f4:	2302      	movs	r3, #2
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	e004      	b.n	8002a04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b70      	cmp	r3, #112	; 0x70
 80029fe:	d101      	bne.n	8002a04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a00:	2301      	movs	r3, #1
 8002a02:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a04:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f023 0207 	bic.w	r2, r3, #7
 8002a0c:	4909      	ldr	r1, [pc, #36]	; (8002a34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a14:	4b07      	ldr	r3, [pc, #28]	; (8002a34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d001      	beq.n	8002a26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e000      	b.n	8002a28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40021000 	.word	0x40021000
 8002a34:	40022000 	.word	0x40022000

08002a38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e049      	b.n	8002ade <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d106      	bne.n	8002a64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7fe fc92 	bl	8001388 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2202      	movs	r2, #2
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3304      	adds	r3, #4
 8002a74:	4619      	mov	r1, r3
 8002a76:	4610      	mov	r0, r2
 8002a78:	f000 f9f0 	bl	8002e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
	...

08002ae8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d001      	beq.n	8002b00 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e047      	b.n	8002b90 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2202      	movs	r2, #2
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a23      	ldr	r2, [pc, #140]	; (8002b9c <HAL_TIM_Base_Start+0xb4>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d01d      	beq.n	8002b4e <HAL_TIM_Base_Start+0x66>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b1a:	d018      	beq.n	8002b4e <HAL_TIM_Base_Start+0x66>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a1f      	ldr	r2, [pc, #124]	; (8002ba0 <HAL_TIM_Base_Start+0xb8>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d013      	beq.n	8002b4e <HAL_TIM_Base_Start+0x66>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a1e      	ldr	r2, [pc, #120]	; (8002ba4 <HAL_TIM_Base_Start+0xbc>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d00e      	beq.n	8002b4e <HAL_TIM_Base_Start+0x66>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a1c      	ldr	r2, [pc, #112]	; (8002ba8 <HAL_TIM_Base_Start+0xc0>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d009      	beq.n	8002b4e <HAL_TIM_Base_Start+0x66>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a1b      	ldr	r2, [pc, #108]	; (8002bac <HAL_TIM_Base_Start+0xc4>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d004      	beq.n	8002b4e <HAL_TIM_Base_Start+0x66>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a19      	ldr	r2, [pc, #100]	; (8002bb0 <HAL_TIM_Base_Start+0xc8>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d115      	bne.n	8002b7a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	4b17      	ldr	r3, [pc, #92]	; (8002bb4 <HAL_TIM_Base_Start+0xcc>)
 8002b56:	4013      	ands	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2b06      	cmp	r3, #6
 8002b5e:	d015      	beq.n	8002b8c <HAL_TIM_Base_Start+0xa4>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b66:	d011      	beq.n	8002b8c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0201 	orr.w	r2, r2, #1
 8002b76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b78:	e008      	b.n	8002b8c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f042 0201 	orr.w	r2, r2, #1
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	e000      	b.n	8002b8e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	40012c00 	.word	0x40012c00
 8002ba0:	40000400 	.word	0x40000400
 8002ba4:	40000800 	.word	0x40000800
 8002ba8:	40000c00 	.word	0x40000c00
 8002bac:	40013400 	.word	0x40013400
 8002bb0:	40014000 	.word	0x40014000
 8002bb4:	00010007 	.word	0x00010007

08002bb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d122      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d11b      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0202 	mvn.w	r2, #2
 8002be4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f90f 	bl	8002e1e <HAL_TIM_IC_CaptureCallback>
 8002c00:	e005      	b.n	8002c0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f901 	bl	8002e0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f912 	bl	8002e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f003 0304 	and.w	r3, r3, #4
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d122      	bne.n	8002c68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b04      	cmp	r3, #4
 8002c2e:	d11b      	bne.n	8002c68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f06f 0204 	mvn.w	r2, #4
 8002c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f8e5 	bl	8002e1e <HAL_TIM_IC_CaptureCallback>
 8002c54:	e005      	b.n	8002c62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f8d7 	bl	8002e0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 f8e8 	bl	8002e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	2b08      	cmp	r3, #8
 8002c74:	d122      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d11b      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f06f 0208 	mvn.w	r2, #8
 8002c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2204      	movs	r2, #4
 8002c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f8bb 	bl	8002e1e <HAL_TIM_IC_CaptureCallback>
 8002ca8:	e005      	b.n	8002cb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f8ad 	bl	8002e0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f8be 	bl	8002e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	f003 0310 	and.w	r3, r3, #16
 8002cc6:	2b10      	cmp	r3, #16
 8002cc8:	d122      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f003 0310 	and.w	r3, r3, #16
 8002cd4:	2b10      	cmp	r3, #16
 8002cd6:	d11b      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f06f 0210 	mvn.w	r2, #16
 8002ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2208      	movs	r2, #8
 8002ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f891 	bl	8002e1e <HAL_TIM_IC_CaptureCallback>
 8002cfc:	e005      	b.n	8002d0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f883 	bl	8002e0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f894 	bl	8002e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d10e      	bne.n	8002d3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d107      	bne.n	8002d3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f06f 0201 	mvn.w	r2, #1
 8002d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f85d 	bl	8002df6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d46:	2b80      	cmp	r3, #128	; 0x80
 8002d48:	d10e      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d54:	2b80      	cmp	r3, #128	; 0x80
 8002d56:	d107      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f91e 	bl	8002fa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d76:	d10e      	bne.n	8002d96 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d82:	2b80      	cmp	r3, #128	; 0x80
 8002d84:	d107      	bne.n	8002d96 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f911 	bl	8002fb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da0:	2b40      	cmp	r3, #64	; 0x40
 8002da2:	d10e      	bne.n	8002dc2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dae:	2b40      	cmp	r3, #64	; 0x40
 8002db0:	d107      	bne.n	8002dc2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f842 	bl	8002e46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	f003 0320 	and.w	r3, r3, #32
 8002dcc:	2b20      	cmp	r3, #32
 8002dce:	d10e      	bne.n	8002dee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	f003 0320 	and.w	r3, r3, #32
 8002dda:	2b20      	cmp	r3, #32
 8002ddc:	d107      	bne.n	8002dee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f06f 0220 	mvn.w	r2, #32
 8002de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f8d1 	bl	8002f90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dee:	bf00      	nop
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
	...

08002e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a40      	ldr	r2, [pc, #256]	; (8002f70 <TIM_Base_SetConfig+0x114>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d013      	beq.n	8002e9c <TIM_Base_SetConfig+0x40>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e7a:	d00f      	beq.n	8002e9c <TIM_Base_SetConfig+0x40>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a3d      	ldr	r2, [pc, #244]	; (8002f74 <TIM_Base_SetConfig+0x118>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d00b      	beq.n	8002e9c <TIM_Base_SetConfig+0x40>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a3c      	ldr	r2, [pc, #240]	; (8002f78 <TIM_Base_SetConfig+0x11c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d007      	beq.n	8002e9c <TIM_Base_SetConfig+0x40>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a3b      	ldr	r2, [pc, #236]	; (8002f7c <TIM_Base_SetConfig+0x120>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d003      	beq.n	8002e9c <TIM_Base_SetConfig+0x40>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a3a      	ldr	r2, [pc, #232]	; (8002f80 <TIM_Base_SetConfig+0x124>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d108      	bne.n	8002eae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a2f      	ldr	r2, [pc, #188]	; (8002f70 <TIM_Base_SetConfig+0x114>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d01f      	beq.n	8002ef6 <TIM_Base_SetConfig+0x9a>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ebc:	d01b      	beq.n	8002ef6 <TIM_Base_SetConfig+0x9a>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a2c      	ldr	r2, [pc, #176]	; (8002f74 <TIM_Base_SetConfig+0x118>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d017      	beq.n	8002ef6 <TIM_Base_SetConfig+0x9a>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a2b      	ldr	r2, [pc, #172]	; (8002f78 <TIM_Base_SetConfig+0x11c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d013      	beq.n	8002ef6 <TIM_Base_SetConfig+0x9a>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a2a      	ldr	r2, [pc, #168]	; (8002f7c <TIM_Base_SetConfig+0x120>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d00f      	beq.n	8002ef6 <TIM_Base_SetConfig+0x9a>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a29      	ldr	r2, [pc, #164]	; (8002f80 <TIM_Base_SetConfig+0x124>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d00b      	beq.n	8002ef6 <TIM_Base_SetConfig+0x9a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a28      	ldr	r2, [pc, #160]	; (8002f84 <TIM_Base_SetConfig+0x128>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d007      	beq.n	8002ef6 <TIM_Base_SetConfig+0x9a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a27      	ldr	r2, [pc, #156]	; (8002f88 <TIM_Base_SetConfig+0x12c>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d003      	beq.n	8002ef6 <TIM_Base_SetConfig+0x9a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a26      	ldr	r2, [pc, #152]	; (8002f8c <TIM_Base_SetConfig+0x130>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d108      	bne.n	8002f08 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a10      	ldr	r2, [pc, #64]	; (8002f70 <TIM_Base_SetConfig+0x114>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d00f      	beq.n	8002f54 <TIM_Base_SetConfig+0xf8>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a12      	ldr	r2, [pc, #72]	; (8002f80 <TIM_Base_SetConfig+0x124>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d00b      	beq.n	8002f54 <TIM_Base_SetConfig+0xf8>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a11      	ldr	r2, [pc, #68]	; (8002f84 <TIM_Base_SetConfig+0x128>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d007      	beq.n	8002f54 <TIM_Base_SetConfig+0xf8>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a10      	ldr	r2, [pc, #64]	; (8002f88 <TIM_Base_SetConfig+0x12c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d003      	beq.n	8002f54 <TIM_Base_SetConfig+0xf8>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a0f      	ldr	r2, [pc, #60]	; (8002f8c <TIM_Base_SetConfig+0x130>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d103      	bne.n	8002f5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	615a      	str	r2, [r3, #20]
}
 8002f62:	bf00      	nop
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40012c00 	.word	0x40012c00
 8002f74:	40000400 	.word	0x40000400
 8002f78:	40000800 	.word	0x40000800
 8002f7c:	40000c00 	.word	0x40000c00
 8002f80:	40013400 	.word	0x40013400
 8002f84:	40014000 	.word	0x40014000
 8002f88:	40014400 	.word	0x40014400
 8002f8c:	40014800 	.word	0x40014800

08002f90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <__errno>:
 8002fcc:	4b01      	ldr	r3, [pc, #4]	; (8002fd4 <__errno+0x8>)
 8002fce:	6818      	ldr	r0, [r3, #0]
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	20000018 	.word	0x20000018

08002fd8 <__libc_init_array>:
 8002fd8:	b570      	push	{r4, r5, r6, lr}
 8002fda:	4d0d      	ldr	r5, [pc, #52]	; (8003010 <__libc_init_array+0x38>)
 8002fdc:	4c0d      	ldr	r4, [pc, #52]	; (8003014 <__libc_init_array+0x3c>)
 8002fde:	1b64      	subs	r4, r4, r5
 8002fe0:	10a4      	asrs	r4, r4, #2
 8002fe2:	2600      	movs	r6, #0
 8002fe4:	42a6      	cmp	r6, r4
 8002fe6:	d109      	bne.n	8002ffc <__libc_init_array+0x24>
 8002fe8:	4d0b      	ldr	r5, [pc, #44]	; (8003018 <__libc_init_array+0x40>)
 8002fea:	4c0c      	ldr	r4, [pc, #48]	; (800301c <__libc_init_array+0x44>)
 8002fec:	f002 fd7e 	bl	8005aec <_init>
 8002ff0:	1b64      	subs	r4, r4, r5
 8002ff2:	10a4      	asrs	r4, r4, #2
 8002ff4:	2600      	movs	r6, #0
 8002ff6:	42a6      	cmp	r6, r4
 8002ff8:	d105      	bne.n	8003006 <__libc_init_array+0x2e>
 8002ffa:	bd70      	pop	{r4, r5, r6, pc}
 8002ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003000:	4798      	blx	r3
 8003002:	3601      	adds	r6, #1
 8003004:	e7ee      	b.n	8002fe4 <__libc_init_array+0xc>
 8003006:	f855 3b04 	ldr.w	r3, [r5], #4
 800300a:	4798      	blx	r3
 800300c:	3601      	adds	r6, #1
 800300e:	e7f2      	b.n	8002ff6 <__libc_init_array+0x1e>
 8003010:	08005fac 	.word	0x08005fac
 8003014:	08005fac 	.word	0x08005fac
 8003018:	08005fac 	.word	0x08005fac
 800301c:	08005fb0 	.word	0x08005fb0

08003020 <memset>:
 8003020:	4402      	add	r2, r0
 8003022:	4603      	mov	r3, r0
 8003024:	4293      	cmp	r3, r2
 8003026:	d100      	bne.n	800302a <memset+0xa>
 8003028:	4770      	bx	lr
 800302a:	f803 1b01 	strb.w	r1, [r3], #1
 800302e:	e7f9      	b.n	8003024 <memset+0x4>

08003030 <__cvt>:
 8003030:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003034:	ec55 4b10 	vmov	r4, r5, d0
 8003038:	2d00      	cmp	r5, #0
 800303a:	460e      	mov	r6, r1
 800303c:	4619      	mov	r1, r3
 800303e:	462b      	mov	r3, r5
 8003040:	bfbb      	ittet	lt
 8003042:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003046:	461d      	movlt	r5, r3
 8003048:	2300      	movge	r3, #0
 800304a:	232d      	movlt	r3, #45	; 0x2d
 800304c:	700b      	strb	r3, [r1, #0]
 800304e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003050:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003054:	4691      	mov	r9, r2
 8003056:	f023 0820 	bic.w	r8, r3, #32
 800305a:	bfbc      	itt	lt
 800305c:	4622      	movlt	r2, r4
 800305e:	4614      	movlt	r4, r2
 8003060:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003064:	d005      	beq.n	8003072 <__cvt+0x42>
 8003066:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800306a:	d100      	bne.n	800306e <__cvt+0x3e>
 800306c:	3601      	adds	r6, #1
 800306e:	2102      	movs	r1, #2
 8003070:	e000      	b.n	8003074 <__cvt+0x44>
 8003072:	2103      	movs	r1, #3
 8003074:	ab03      	add	r3, sp, #12
 8003076:	9301      	str	r3, [sp, #4]
 8003078:	ab02      	add	r3, sp, #8
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	ec45 4b10 	vmov	d0, r4, r5
 8003080:	4653      	mov	r3, sl
 8003082:	4632      	mov	r2, r6
 8003084:	f000 fe18 	bl	8003cb8 <_dtoa_r>
 8003088:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800308c:	4607      	mov	r7, r0
 800308e:	d102      	bne.n	8003096 <__cvt+0x66>
 8003090:	f019 0f01 	tst.w	r9, #1
 8003094:	d022      	beq.n	80030dc <__cvt+0xac>
 8003096:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800309a:	eb07 0906 	add.w	r9, r7, r6
 800309e:	d110      	bne.n	80030c2 <__cvt+0x92>
 80030a0:	783b      	ldrb	r3, [r7, #0]
 80030a2:	2b30      	cmp	r3, #48	; 0x30
 80030a4:	d10a      	bne.n	80030bc <__cvt+0x8c>
 80030a6:	2200      	movs	r2, #0
 80030a8:	2300      	movs	r3, #0
 80030aa:	4620      	mov	r0, r4
 80030ac:	4629      	mov	r1, r5
 80030ae:	f7fd fd0b 	bl	8000ac8 <__aeabi_dcmpeq>
 80030b2:	b918      	cbnz	r0, 80030bc <__cvt+0x8c>
 80030b4:	f1c6 0601 	rsb	r6, r6, #1
 80030b8:	f8ca 6000 	str.w	r6, [sl]
 80030bc:	f8da 3000 	ldr.w	r3, [sl]
 80030c0:	4499      	add	r9, r3
 80030c2:	2200      	movs	r2, #0
 80030c4:	2300      	movs	r3, #0
 80030c6:	4620      	mov	r0, r4
 80030c8:	4629      	mov	r1, r5
 80030ca:	f7fd fcfd 	bl	8000ac8 <__aeabi_dcmpeq>
 80030ce:	b108      	cbz	r0, 80030d4 <__cvt+0xa4>
 80030d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80030d4:	2230      	movs	r2, #48	; 0x30
 80030d6:	9b03      	ldr	r3, [sp, #12]
 80030d8:	454b      	cmp	r3, r9
 80030da:	d307      	bcc.n	80030ec <__cvt+0xbc>
 80030dc:	9b03      	ldr	r3, [sp, #12]
 80030de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80030e0:	1bdb      	subs	r3, r3, r7
 80030e2:	4638      	mov	r0, r7
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	b004      	add	sp, #16
 80030e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030ec:	1c59      	adds	r1, r3, #1
 80030ee:	9103      	str	r1, [sp, #12]
 80030f0:	701a      	strb	r2, [r3, #0]
 80030f2:	e7f0      	b.n	80030d6 <__cvt+0xa6>

080030f4 <__exponent>:
 80030f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030f6:	4603      	mov	r3, r0
 80030f8:	2900      	cmp	r1, #0
 80030fa:	bfb8      	it	lt
 80030fc:	4249      	neglt	r1, r1
 80030fe:	f803 2b02 	strb.w	r2, [r3], #2
 8003102:	bfb4      	ite	lt
 8003104:	222d      	movlt	r2, #45	; 0x2d
 8003106:	222b      	movge	r2, #43	; 0x2b
 8003108:	2909      	cmp	r1, #9
 800310a:	7042      	strb	r2, [r0, #1]
 800310c:	dd2a      	ble.n	8003164 <__exponent+0x70>
 800310e:	f10d 0407 	add.w	r4, sp, #7
 8003112:	46a4      	mov	ip, r4
 8003114:	270a      	movs	r7, #10
 8003116:	46a6      	mov	lr, r4
 8003118:	460a      	mov	r2, r1
 800311a:	fb91 f6f7 	sdiv	r6, r1, r7
 800311e:	fb07 1516 	mls	r5, r7, r6, r1
 8003122:	3530      	adds	r5, #48	; 0x30
 8003124:	2a63      	cmp	r2, #99	; 0x63
 8003126:	f104 34ff 	add.w	r4, r4, #4294967295
 800312a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800312e:	4631      	mov	r1, r6
 8003130:	dcf1      	bgt.n	8003116 <__exponent+0x22>
 8003132:	3130      	adds	r1, #48	; 0x30
 8003134:	f1ae 0502 	sub.w	r5, lr, #2
 8003138:	f804 1c01 	strb.w	r1, [r4, #-1]
 800313c:	1c44      	adds	r4, r0, #1
 800313e:	4629      	mov	r1, r5
 8003140:	4561      	cmp	r1, ip
 8003142:	d30a      	bcc.n	800315a <__exponent+0x66>
 8003144:	f10d 0209 	add.w	r2, sp, #9
 8003148:	eba2 020e 	sub.w	r2, r2, lr
 800314c:	4565      	cmp	r5, ip
 800314e:	bf88      	it	hi
 8003150:	2200      	movhi	r2, #0
 8003152:	4413      	add	r3, r2
 8003154:	1a18      	subs	r0, r3, r0
 8003156:	b003      	add	sp, #12
 8003158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800315a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800315e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003162:	e7ed      	b.n	8003140 <__exponent+0x4c>
 8003164:	2330      	movs	r3, #48	; 0x30
 8003166:	3130      	adds	r1, #48	; 0x30
 8003168:	7083      	strb	r3, [r0, #2]
 800316a:	70c1      	strb	r1, [r0, #3]
 800316c:	1d03      	adds	r3, r0, #4
 800316e:	e7f1      	b.n	8003154 <__exponent+0x60>

08003170 <_printf_float>:
 8003170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003174:	ed2d 8b02 	vpush	{d8}
 8003178:	b08d      	sub	sp, #52	; 0x34
 800317a:	460c      	mov	r4, r1
 800317c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003180:	4616      	mov	r6, r2
 8003182:	461f      	mov	r7, r3
 8003184:	4605      	mov	r5, r0
 8003186:	f001 fd3b 	bl	8004c00 <_localeconv_r>
 800318a:	f8d0 a000 	ldr.w	sl, [r0]
 800318e:	4650      	mov	r0, sl
 8003190:	f7fd f81e 	bl	80001d0 <strlen>
 8003194:	2300      	movs	r3, #0
 8003196:	930a      	str	r3, [sp, #40]	; 0x28
 8003198:	6823      	ldr	r3, [r4, #0]
 800319a:	9305      	str	r3, [sp, #20]
 800319c:	f8d8 3000 	ldr.w	r3, [r8]
 80031a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80031a4:	3307      	adds	r3, #7
 80031a6:	f023 0307 	bic.w	r3, r3, #7
 80031aa:	f103 0208 	add.w	r2, r3, #8
 80031ae:	f8c8 2000 	str.w	r2, [r8]
 80031b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80031ba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80031be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80031c2:	9307      	str	r3, [sp, #28]
 80031c4:	f8cd 8018 	str.w	r8, [sp, #24]
 80031c8:	ee08 0a10 	vmov	s16, r0
 80031cc:	4b9f      	ldr	r3, [pc, #636]	; (800344c <_printf_float+0x2dc>)
 80031ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80031d2:	f04f 32ff 	mov.w	r2, #4294967295
 80031d6:	f7fd fca9 	bl	8000b2c <__aeabi_dcmpun>
 80031da:	bb88      	cbnz	r0, 8003240 <_printf_float+0xd0>
 80031dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80031e0:	4b9a      	ldr	r3, [pc, #616]	; (800344c <_printf_float+0x2dc>)
 80031e2:	f04f 32ff 	mov.w	r2, #4294967295
 80031e6:	f7fd fc83 	bl	8000af0 <__aeabi_dcmple>
 80031ea:	bb48      	cbnz	r0, 8003240 <_printf_float+0xd0>
 80031ec:	2200      	movs	r2, #0
 80031ee:	2300      	movs	r3, #0
 80031f0:	4640      	mov	r0, r8
 80031f2:	4649      	mov	r1, r9
 80031f4:	f7fd fc72 	bl	8000adc <__aeabi_dcmplt>
 80031f8:	b110      	cbz	r0, 8003200 <_printf_float+0x90>
 80031fa:	232d      	movs	r3, #45	; 0x2d
 80031fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003200:	4b93      	ldr	r3, [pc, #588]	; (8003450 <_printf_float+0x2e0>)
 8003202:	4894      	ldr	r0, [pc, #592]	; (8003454 <_printf_float+0x2e4>)
 8003204:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003208:	bf94      	ite	ls
 800320a:	4698      	movls	r8, r3
 800320c:	4680      	movhi	r8, r0
 800320e:	2303      	movs	r3, #3
 8003210:	6123      	str	r3, [r4, #16]
 8003212:	9b05      	ldr	r3, [sp, #20]
 8003214:	f023 0204 	bic.w	r2, r3, #4
 8003218:	6022      	str	r2, [r4, #0]
 800321a:	f04f 0900 	mov.w	r9, #0
 800321e:	9700      	str	r7, [sp, #0]
 8003220:	4633      	mov	r3, r6
 8003222:	aa0b      	add	r2, sp, #44	; 0x2c
 8003224:	4621      	mov	r1, r4
 8003226:	4628      	mov	r0, r5
 8003228:	f000 f9d8 	bl	80035dc <_printf_common>
 800322c:	3001      	adds	r0, #1
 800322e:	f040 8090 	bne.w	8003352 <_printf_float+0x1e2>
 8003232:	f04f 30ff 	mov.w	r0, #4294967295
 8003236:	b00d      	add	sp, #52	; 0x34
 8003238:	ecbd 8b02 	vpop	{d8}
 800323c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003240:	4642      	mov	r2, r8
 8003242:	464b      	mov	r3, r9
 8003244:	4640      	mov	r0, r8
 8003246:	4649      	mov	r1, r9
 8003248:	f7fd fc70 	bl	8000b2c <__aeabi_dcmpun>
 800324c:	b140      	cbz	r0, 8003260 <_printf_float+0xf0>
 800324e:	464b      	mov	r3, r9
 8003250:	2b00      	cmp	r3, #0
 8003252:	bfbc      	itt	lt
 8003254:	232d      	movlt	r3, #45	; 0x2d
 8003256:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800325a:	487f      	ldr	r0, [pc, #508]	; (8003458 <_printf_float+0x2e8>)
 800325c:	4b7f      	ldr	r3, [pc, #508]	; (800345c <_printf_float+0x2ec>)
 800325e:	e7d1      	b.n	8003204 <_printf_float+0x94>
 8003260:	6863      	ldr	r3, [r4, #4]
 8003262:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003266:	9206      	str	r2, [sp, #24]
 8003268:	1c5a      	adds	r2, r3, #1
 800326a:	d13f      	bne.n	80032ec <_printf_float+0x17c>
 800326c:	2306      	movs	r3, #6
 800326e:	6063      	str	r3, [r4, #4]
 8003270:	9b05      	ldr	r3, [sp, #20]
 8003272:	6861      	ldr	r1, [r4, #4]
 8003274:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003278:	2300      	movs	r3, #0
 800327a:	9303      	str	r3, [sp, #12]
 800327c:	ab0a      	add	r3, sp, #40	; 0x28
 800327e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003282:	ab09      	add	r3, sp, #36	; 0x24
 8003284:	ec49 8b10 	vmov	d0, r8, r9
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	6022      	str	r2, [r4, #0]
 800328c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003290:	4628      	mov	r0, r5
 8003292:	f7ff fecd 	bl	8003030 <__cvt>
 8003296:	9b06      	ldr	r3, [sp, #24]
 8003298:	9909      	ldr	r1, [sp, #36]	; 0x24
 800329a:	2b47      	cmp	r3, #71	; 0x47
 800329c:	4680      	mov	r8, r0
 800329e:	d108      	bne.n	80032b2 <_printf_float+0x142>
 80032a0:	1cc8      	adds	r0, r1, #3
 80032a2:	db02      	blt.n	80032aa <_printf_float+0x13a>
 80032a4:	6863      	ldr	r3, [r4, #4]
 80032a6:	4299      	cmp	r1, r3
 80032a8:	dd41      	ble.n	800332e <_printf_float+0x1be>
 80032aa:	f1ab 0b02 	sub.w	fp, fp, #2
 80032ae:	fa5f fb8b 	uxtb.w	fp, fp
 80032b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80032b6:	d820      	bhi.n	80032fa <_printf_float+0x18a>
 80032b8:	3901      	subs	r1, #1
 80032ba:	465a      	mov	r2, fp
 80032bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80032c0:	9109      	str	r1, [sp, #36]	; 0x24
 80032c2:	f7ff ff17 	bl	80030f4 <__exponent>
 80032c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80032c8:	1813      	adds	r3, r2, r0
 80032ca:	2a01      	cmp	r2, #1
 80032cc:	4681      	mov	r9, r0
 80032ce:	6123      	str	r3, [r4, #16]
 80032d0:	dc02      	bgt.n	80032d8 <_printf_float+0x168>
 80032d2:	6822      	ldr	r2, [r4, #0]
 80032d4:	07d2      	lsls	r2, r2, #31
 80032d6:	d501      	bpl.n	80032dc <_printf_float+0x16c>
 80032d8:	3301      	adds	r3, #1
 80032da:	6123      	str	r3, [r4, #16]
 80032dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d09c      	beq.n	800321e <_printf_float+0xae>
 80032e4:	232d      	movs	r3, #45	; 0x2d
 80032e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032ea:	e798      	b.n	800321e <_printf_float+0xae>
 80032ec:	9a06      	ldr	r2, [sp, #24]
 80032ee:	2a47      	cmp	r2, #71	; 0x47
 80032f0:	d1be      	bne.n	8003270 <_printf_float+0x100>
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1bc      	bne.n	8003270 <_printf_float+0x100>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e7b9      	b.n	800326e <_printf_float+0xfe>
 80032fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80032fe:	d118      	bne.n	8003332 <_printf_float+0x1c2>
 8003300:	2900      	cmp	r1, #0
 8003302:	6863      	ldr	r3, [r4, #4]
 8003304:	dd0b      	ble.n	800331e <_printf_float+0x1ae>
 8003306:	6121      	str	r1, [r4, #16]
 8003308:	b913      	cbnz	r3, 8003310 <_printf_float+0x1a0>
 800330a:	6822      	ldr	r2, [r4, #0]
 800330c:	07d0      	lsls	r0, r2, #31
 800330e:	d502      	bpl.n	8003316 <_printf_float+0x1a6>
 8003310:	3301      	adds	r3, #1
 8003312:	440b      	add	r3, r1
 8003314:	6123      	str	r3, [r4, #16]
 8003316:	65a1      	str	r1, [r4, #88]	; 0x58
 8003318:	f04f 0900 	mov.w	r9, #0
 800331c:	e7de      	b.n	80032dc <_printf_float+0x16c>
 800331e:	b913      	cbnz	r3, 8003326 <_printf_float+0x1b6>
 8003320:	6822      	ldr	r2, [r4, #0]
 8003322:	07d2      	lsls	r2, r2, #31
 8003324:	d501      	bpl.n	800332a <_printf_float+0x1ba>
 8003326:	3302      	adds	r3, #2
 8003328:	e7f4      	b.n	8003314 <_printf_float+0x1a4>
 800332a:	2301      	movs	r3, #1
 800332c:	e7f2      	b.n	8003314 <_printf_float+0x1a4>
 800332e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003334:	4299      	cmp	r1, r3
 8003336:	db05      	blt.n	8003344 <_printf_float+0x1d4>
 8003338:	6823      	ldr	r3, [r4, #0]
 800333a:	6121      	str	r1, [r4, #16]
 800333c:	07d8      	lsls	r0, r3, #31
 800333e:	d5ea      	bpl.n	8003316 <_printf_float+0x1a6>
 8003340:	1c4b      	adds	r3, r1, #1
 8003342:	e7e7      	b.n	8003314 <_printf_float+0x1a4>
 8003344:	2900      	cmp	r1, #0
 8003346:	bfd4      	ite	le
 8003348:	f1c1 0202 	rsble	r2, r1, #2
 800334c:	2201      	movgt	r2, #1
 800334e:	4413      	add	r3, r2
 8003350:	e7e0      	b.n	8003314 <_printf_float+0x1a4>
 8003352:	6823      	ldr	r3, [r4, #0]
 8003354:	055a      	lsls	r2, r3, #21
 8003356:	d407      	bmi.n	8003368 <_printf_float+0x1f8>
 8003358:	6923      	ldr	r3, [r4, #16]
 800335a:	4642      	mov	r2, r8
 800335c:	4631      	mov	r1, r6
 800335e:	4628      	mov	r0, r5
 8003360:	47b8      	blx	r7
 8003362:	3001      	adds	r0, #1
 8003364:	d12c      	bne.n	80033c0 <_printf_float+0x250>
 8003366:	e764      	b.n	8003232 <_printf_float+0xc2>
 8003368:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800336c:	f240 80e0 	bls.w	8003530 <_printf_float+0x3c0>
 8003370:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003374:	2200      	movs	r2, #0
 8003376:	2300      	movs	r3, #0
 8003378:	f7fd fba6 	bl	8000ac8 <__aeabi_dcmpeq>
 800337c:	2800      	cmp	r0, #0
 800337e:	d034      	beq.n	80033ea <_printf_float+0x27a>
 8003380:	4a37      	ldr	r2, [pc, #220]	; (8003460 <_printf_float+0x2f0>)
 8003382:	2301      	movs	r3, #1
 8003384:	4631      	mov	r1, r6
 8003386:	4628      	mov	r0, r5
 8003388:	47b8      	blx	r7
 800338a:	3001      	adds	r0, #1
 800338c:	f43f af51 	beq.w	8003232 <_printf_float+0xc2>
 8003390:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003394:	429a      	cmp	r2, r3
 8003396:	db02      	blt.n	800339e <_printf_float+0x22e>
 8003398:	6823      	ldr	r3, [r4, #0]
 800339a:	07d8      	lsls	r0, r3, #31
 800339c:	d510      	bpl.n	80033c0 <_printf_float+0x250>
 800339e:	ee18 3a10 	vmov	r3, s16
 80033a2:	4652      	mov	r2, sl
 80033a4:	4631      	mov	r1, r6
 80033a6:	4628      	mov	r0, r5
 80033a8:	47b8      	blx	r7
 80033aa:	3001      	adds	r0, #1
 80033ac:	f43f af41 	beq.w	8003232 <_printf_float+0xc2>
 80033b0:	f04f 0800 	mov.w	r8, #0
 80033b4:	f104 091a 	add.w	r9, r4, #26
 80033b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80033ba:	3b01      	subs	r3, #1
 80033bc:	4543      	cmp	r3, r8
 80033be:	dc09      	bgt.n	80033d4 <_printf_float+0x264>
 80033c0:	6823      	ldr	r3, [r4, #0]
 80033c2:	079b      	lsls	r3, r3, #30
 80033c4:	f100 8105 	bmi.w	80035d2 <_printf_float+0x462>
 80033c8:	68e0      	ldr	r0, [r4, #12]
 80033ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80033cc:	4298      	cmp	r0, r3
 80033ce:	bfb8      	it	lt
 80033d0:	4618      	movlt	r0, r3
 80033d2:	e730      	b.n	8003236 <_printf_float+0xc6>
 80033d4:	2301      	movs	r3, #1
 80033d6:	464a      	mov	r2, r9
 80033d8:	4631      	mov	r1, r6
 80033da:	4628      	mov	r0, r5
 80033dc:	47b8      	blx	r7
 80033de:	3001      	adds	r0, #1
 80033e0:	f43f af27 	beq.w	8003232 <_printf_float+0xc2>
 80033e4:	f108 0801 	add.w	r8, r8, #1
 80033e8:	e7e6      	b.n	80033b8 <_printf_float+0x248>
 80033ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	dc39      	bgt.n	8003464 <_printf_float+0x2f4>
 80033f0:	4a1b      	ldr	r2, [pc, #108]	; (8003460 <_printf_float+0x2f0>)
 80033f2:	2301      	movs	r3, #1
 80033f4:	4631      	mov	r1, r6
 80033f6:	4628      	mov	r0, r5
 80033f8:	47b8      	blx	r7
 80033fa:	3001      	adds	r0, #1
 80033fc:	f43f af19 	beq.w	8003232 <_printf_float+0xc2>
 8003400:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003404:	4313      	orrs	r3, r2
 8003406:	d102      	bne.n	800340e <_printf_float+0x29e>
 8003408:	6823      	ldr	r3, [r4, #0]
 800340a:	07d9      	lsls	r1, r3, #31
 800340c:	d5d8      	bpl.n	80033c0 <_printf_float+0x250>
 800340e:	ee18 3a10 	vmov	r3, s16
 8003412:	4652      	mov	r2, sl
 8003414:	4631      	mov	r1, r6
 8003416:	4628      	mov	r0, r5
 8003418:	47b8      	blx	r7
 800341a:	3001      	adds	r0, #1
 800341c:	f43f af09 	beq.w	8003232 <_printf_float+0xc2>
 8003420:	f04f 0900 	mov.w	r9, #0
 8003424:	f104 0a1a 	add.w	sl, r4, #26
 8003428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800342a:	425b      	negs	r3, r3
 800342c:	454b      	cmp	r3, r9
 800342e:	dc01      	bgt.n	8003434 <_printf_float+0x2c4>
 8003430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003432:	e792      	b.n	800335a <_printf_float+0x1ea>
 8003434:	2301      	movs	r3, #1
 8003436:	4652      	mov	r2, sl
 8003438:	4631      	mov	r1, r6
 800343a:	4628      	mov	r0, r5
 800343c:	47b8      	blx	r7
 800343e:	3001      	adds	r0, #1
 8003440:	f43f aef7 	beq.w	8003232 <_printf_float+0xc2>
 8003444:	f109 0901 	add.w	r9, r9, #1
 8003448:	e7ee      	b.n	8003428 <_printf_float+0x2b8>
 800344a:	bf00      	nop
 800344c:	7fefffff 	.word	0x7fefffff
 8003450:	08005bcc 	.word	0x08005bcc
 8003454:	08005bd0 	.word	0x08005bd0
 8003458:	08005bd8 	.word	0x08005bd8
 800345c:	08005bd4 	.word	0x08005bd4
 8003460:	08005bdc 	.word	0x08005bdc
 8003464:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003466:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003468:	429a      	cmp	r2, r3
 800346a:	bfa8      	it	ge
 800346c:	461a      	movge	r2, r3
 800346e:	2a00      	cmp	r2, #0
 8003470:	4691      	mov	r9, r2
 8003472:	dc37      	bgt.n	80034e4 <_printf_float+0x374>
 8003474:	f04f 0b00 	mov.w	fp, #0
 8003478:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800347c:	f104 021a 	add.w	r2, r4, #26
 8003480:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003482:	9305      	str	r3, [sp, #20]
 8003484:	eba3 0309 	sub.w	r3, r3, r9
 8003488:	455b      	cmp	r3, fp
 800348a:	dc33      	bgt.n	80034f4 <_printf_float+0x384>
 800348c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003490:	429a      	cmp	r2, r3
 8003492:	db3b      	blt.n	800350c <_printf_float+0x39c>
 8003494:	6823      	ldr	r3, [r4, #0]
 8003496:	07da      	lsls	r2, r3, #31
 8003498:	d438      	bmi.n	800350c <_printf_float+0x39c>
 800349a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800349c:	9b05      	ldr	r3, [sp, #20]
 800349e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	eba2 0901 	sub.w	r9, r2, r1
 80034a6:	4599      	cmp	r9, r3
 80034a8:	bfa8      	it	ge
 80034aa:	4699      	movge	r9, r3
 80034ac:	f1b9 0f00 	cmp.w	r9, #0
 80034b0:	dc35      	bgt.n	800351e <_printf_float+0x3ae>
 80034b2:	f04f 0800 	mov.w	r8, #0
 80034b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80034ba:	f104 0a1a 	add.w	sl, r4, #26
 80034be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034c2:	1a9b      	subs	r3, r3, r2
 80034c4:	eba3 0309 	sub.w	r3, r3, r9
 80034c8:	4543      	cmp	r3, r8
 80034ca:	f77f af79 	ble.w	80033c0 <_printf_float+0x250>
 80034ce:	2301      	movs	r3, #1
 80034d0:	4652      	mov	r2, sl
 80034d2:	4631      	mov	r1, r6
 80034d4:	4628      	mov	r0, r5
 80034d6:	47b8      	blx	r7
 80034d8:	3001      	adds	r0, #1
 80034da:	f43f aeaa 	beq.w	8003232 <_printf_float+0xc2>
 80034de:	f108 0801 	add.w	r8, r8, #1
 80034e2:	e7ec      	b.n	80034be <_printf_float+0x34e>
 80034e4:	4613      	mov	r3, r2
 80034e6:	4631      	mov	r1, r6
 80034e8:	4642      	mov	r2, r8
 80034ea:	4628      	mov	r0, r5
 80034ec:	47b8      	blx	r7
 80034ee:	3001      	adds	r0, #1
 80034f0:	d1c0      	bne.n	8003474 <_printf_float+0x304>
 80034f2:	e69e      	b.n	8003232 <_printf_float+0xc2>
 80034f4:	2301      	movs	r3, #1
 80034f6:	4631      	mov	r1, r6
 80034f8:	4628      	mov	r0, r5
 80034fa:	9205      	str	r2, [sp, #20]
 80034fc:	47b8      	blx	r7
 80034fe:	3001      	adds	r0, #1
 8003500:	f43f ae97 	beq.w	8003232 <_printf_float+0xc2>
 8003504:	9a05      	ldr	r2, [sp, #20]
 8003506:	f10b 0b01 	add.w	fp, fp, #1
 800350a:	e7b9      	b.n	8003480 <_printf_float+0x310>
 800350c:	ee18 3a10 	vmov	r3, s16
 8003510:	4652      	mov	r2, sl
 8003512:	4631      	mov	r1, r6
 8003514:	4628      	mov	r0, r5
 8003516:	47b8      	blx	r7
 8003518:	3001      	adds	r0, #1
 800351a:	d1be      	bne.n	800349a <_printf_float+0x32a>
 800351c:	e689      	b.n	8003232 <_printf_float+0xc2>
 800351e:	9a05      	ldr	r2, [sp, #20]
 8003520:	464b      	mov	r3, r9
 8003522:	4442      	add	r2, r8
 8003524:	4631      	mov	r1, r6
 8003526:	4628      	mov	r0, r5
 8003528:	47b8      	blx	r7
 800352a:	3001      	adds	r0, #1
 800352c:	d1c1      	bne.n	80034b2 <_printf_float+0x342>
 800352e:	e680      	b.n	8003232 <_printf_float+0xc2>
 8003530:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003532:	2a01      	cmp	r2, #1
 8003534:	dc01      	bgt.n	800353a <_printf_float+0x3ca>
 8003536:	07db      	lsls	r3, r3, #31
 8003538:	d538      	bpl.n	80035ac <_printf_float+0x43c>
 800353a:	2301      	movs	r3, #1
 800353c:	4642      	mov	r2, r8
 800353e:	4631      	mov	r1, r6
 8003540:	4628      	mov	r0, r5
 8003542:	47b8      	blx	r7
 8003544:	3001      	adds	r0, #1
 8003546:	f43f ae74 	beq.w	8003232 <_printf_float+0xc2>
 800354a:	ee18 3a10 	vmov	r3, s16
 800354e:	4652      	mov	r2, sl
 8003550:	4631      	mov	r1, r6
 8003552:	4628      	mov	r0, r5
 8003554:	47b8      	blx	r7
 8003556:	3001      	adds	r0, #1
 8003558:	f43f ae6b 	beq.w	8003232 <_printf_float+0xc2>
 800355c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003560:	2200      	movs	r2, #0
 8003562:	2300      	movs	r3, #0
 8003564:	f7fd fab0 	bl	8000ac8 <__aeabi_dcmpeq>
 8003568:	b9d8      	cbnz	r0, 80035a2 <_printf_float+0x432>
 800356a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800356c:	f108 0201 	add.w	r2, r8, #1
 8003570:	3b01      	subs	r3, #1
 8003572:	4631      	mov	r1, r6
 8003574:	4628      	mov	r0, r5
 8003576:	47b8      	blx	r7
 8003578:	3001      	adds	r0, #1
 800357a:	d10e      	bne.n	800359a <_printf_float+0x42a>
 800357c:	e659      	b.n	8003232 <_printf_float+0xc2>
 800357e:	2301      	movs	r3, #1
 8003580:	4652      	mov	r2, sl
 8003582:	4631      	mov	r1, r6
 8003584:	4628      	mov	r0, r5
 8003586:	47b8      	blx	r7
 8003588:	3001      	adds	r0, #1
 800358a:	f43f ae52 	beq.w	8003232 <_printf_float+0xc2>
 800358e:	f108 0801 	add.w	r8, r8, #1
 8003592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003594:	3b01      	subs	r3, #1
 8003596:	4543      	cmp	r3, r8
 8003598:	dcf1      	bgt.n	800357e <_printf_float+0x40e>
 800359a:	464b      	mov	r3, r9
 800359c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80035a0:	e6dc      	b.n	800335c <_printf_float+0x1ec>
 80035a2:	f04f 0800 	mov.w	r8, #0
 80035a6:	f104 0a1a 	add.w	sl, r4, #26
 80035aa:	e7f2      	b.n	8003592 <_printf_float+0x422>
 80035ac:	2301      	movs	r3, #1
 80035ae:	4642      	mov	r2, r8
 80035b0:	e7df      	b.n	8003572 <_printf_float+0x402>
 80035b2:	2301      	movs	r3, #1
 80035b4:	464a      	mov	r2, r9
 80035b6:	4631      	mov	r1, r6
 80035b8:	4628      	mov	r0, r5
 80035ba:	47b8      	blx	r7
 80035bc:	3001      	adds	r0, #1
 80035be:	f43f ae38 	beq.w	8003232 <_printf_float+0xc2>
 80035c2:	f108 0801 	add.w	r8, r8, #1
 80035c6:	68e3      	ldr	r3, [r4, #12]
 80035c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80035ca:	1a5b      	subs	r3, r3, r1
 80035cc:	4543      	cmp	r3, r8
 80035ce:	dcf0      	bgt.n	80035b2 <_printf_float+0x442>
 80035d0:	e6fa      	b.n	80033c8 <_printf_float+0x258>
 80035d2:	f04f 0800 	mov.w	r8, #0
 80035d6:	f104 0919 	add.w	r9, r4, #25
 80035da:	e7f4      	b.n	80035c6 <_printf_float+0x456>

080035dc <_printf_common>:
 80035dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035e0:	4616      	mov	r6, r2
 80035e2:	4699      	mov	r9, r3
 80035e4:	688a      	ldr	r2, [r1, #8]
 80035e6:	690b      	ldr	r3, [r1, #16]
 80035e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035ec:	4293      	cmp	r3, r2
 80035ee:	bfb8      	it	lt
 80035f0:	4613      	movlt	r3, r2
 80035f2:	6033      	str	r3, [r6, #0]
 80035f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035f8:	4607      	mov	r7, r0
 80035fa:	460c      	mov	r4, r1
 80035fc:	b10a      	cbz	r2, 8003602 <_printf_common+0x26>
 80035fe:	3301      	adds	r3, #1
 8003600:	6033      	str	r3, [r6, #0]
 8003602:	6823      	ldr	r3, [r4, #0]
 8003604:	0699      	lsls	r1, r3, #26
 8003606:	bf42      	ittt	mi
 8003608:	6833      	ldrmi	r3, [r6, #0]
 800360a:	3302      	addmi	r3, #2
 800360c:	6033      	strmi	r3, [r6, #0]
 800360e:	6825      	ldr	r5, [r4, #0]
 8003610:	f015 0506 	ands.w	r5, r5, #6
 8003614:	d106      	bne.n	8003624 <_printf_common+0x48>
 8003616:	f104 0a19 	add.w	sl, r4, #25
 800361a:	68e3      	ldr	r3, [r4, #12]
 800361c:	6832      	ldr	r2, [r6, #0]
 800361e:	1a9b      	subs	r3, r3, r2
 8003620:	42ab      	cmp	r3, r5
 8003622:	dc26      	bgt.n	8003672 <_printf_common+0x96>
 8003624:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003628:	1e13      	subs	r3, r2, #0
 800362a:	6822      	ldr	r2, [r4, #0]
 800362c:	bf18      	it	ne
 800362e:	2301      	movne	r3, #1
 8003630:	0692      	lsls	r2, r2, #26
 8003632:	d42b      	bmi.n	800368c <_printf_common+0xb0>
 8003634:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003638:	4649      	mov	r1, r9
 800363a:	4638      	mov	r0, r7
 800363c:	47c0      	blx	r8
 800363e:	3001      	adds	r0, #1
 8003640:	d01e      	beq.n	8003680 <_printf_common+0xa4>
 8003642:	6823      	ldr	r3, [r4, #0]
 8003644:	68e5      	ldr	r5, [r4, #12]
 8003646:	6832      	ldr	r2, [r6, #0]
 8003648:	f003 0306 	and.w	r3, r3, #6
 800364c:	2b04      	cmp	r3, #4
 800364e:	bf08      	it	eq
 8003650:	1aad      	subeq	r5, r5, r2
 8003652:	68a3      	ldr	r3, [r4, #8]
 8003654:	6922      	ldr	r2, [r4, #16]
 8003656:	bf0c      	ite	eq
 8003658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800365c:	2500      	movne	r5, #0
 800365e:	4293      	cmp	r3, r2
 8003660:	bfc4      	itt	gt
 8003662:	1a9b      	subgt	r3, r3, r2
 8003664:	18ed      	addgt	r5, r5, r3
 8003666:	2600      	movs	r6, #0
 8003668:	341a      	adds	r4, #26
 800366a:	42b5      	cmp	r5, r6
 800366c:	d11a      	bne.n	80036a4 <_printf_common+0xc8>
 800366e:	2000      	movs	r0, #0
 8003670:	e008      	b.n	8003684 <_printf_common+0xa8>
 8003672:	2301      	movs	r3, #1
 8003674:	4652      	mov	r2, sl
 8003676:	4649      	mov	r1, r9
 8003678:	4638      	mov	r0, r7
 800367a:	47c0      	blx	r8
 800367c:	3001      	adds	r0, #1
 800367e:	d103      	bne.n	8003688 <_printf_common+0xac>
 8003680:	f04f 30ff 	mov.w	r0, #4294967295
 8003684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003688:	3501      	adds	r5, #1
 800368a:	e7c6      	b.n	800361a <_printf_common+0x3e>
 800368c:	18e1      	adds	r1, r4, r3
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	2030      	movs	r0, #48	; 0x30
 8003692:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003696:	4422      	add	r2, r4
 8003698:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800369c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036a0:	3302      	adds	r3, #2
 80036a2:	e7c7      	b.n	8003634 <_printf_common+0x58>
 80036a4:	2301      	movs	r3, #1
 80036a6:	4622      	mov	r2, r4
 80036a8:	4649      	mov	r1, r9
 80036aa:	4638      	mov	r0, r7
 80036ac:	47c0      	blx	r8
 80036ae:	3001      	adds	r0, #1
 80036b0:	d0e6      	beq.n	8003680 <_printf_common+0xa4>
 80036b2:	3601      	adds	r6, #1
 80036b4:	e7d9      	b.n	800366a <_printf_common+0x8e>
	...

080036b8 <_printf_i>:
 80036b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036bc:	460c      	mov	r4, r1
 80036be:	4691      	mov	r9, r2
 80036c0:	7e27      	ldrb	r7, [r4, #24]
 80036c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80036c4:	2f78      	cmp	r7, #120	; 0x78
 80036c6:	4680      	mov	r8, r0
 80036c8:	469a      	mov	sl, r3
 80036ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036ce:	d807      	bhi.n	80036e0 <_printf_i+0x28>
 80036d0:	2f62      	cmp	r7, #98	; 0x62
 80036d2:	d80a      	bhi.n	80036ea <_printf_i+0x32>
 80036d4:	2f00      	cmp	r7, #0
 80036d6:	f000 80d8 	beq.w	800388a <_printf_i+0x1d2>
 80036da:	2f58      	cmp	r7, #88	; 0x58
 80036dc:	f000 80a3 	beq.w	8003826 <_printf_i+0x16e>
 80036e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80036e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036e8:	e03a      	b.n	8003760 <_printf_i+0xa8>
 80036ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80036ee:	2b15      	cmp	r3, #21
 80036f0:	d8f6      	bhi.n	80036e0 <_printf_i+0x28>
 80036f2:	a001      	add	r0, pc, #4	; (adr r0, 80036f8 <_printf_i+0x40>)
 80036f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80036f8:	08003751 	.word	0x08003751
 80036fc:	08003765 	.word	0x08003765
 8003700:	080036e1 	.word	0x080036e1
 8003704:	080036e1 	.word	0x080036e1
 8003708:	080036e1 	.word	0x080036e1
 800370c:	080036e1 	.word	0x080036e1
 8003710:	08003765 	.word	0x08003765
 8003714:	080036e1 	.word	0x080036e1
 8003718:	080036e1 	.word	0x080036e1
 800371c:	080036e1 	.word	0x080036e1
 8003720:	080036e1 	.word	0x080036e1
 8003724:	08003871 	.word	0x08003871
 8003728:	08003795 	.word	0x08003795
 800372c:	08003853 	.word	0x08003853
 8003730:	080036e1 	.word	0x080036e1
 8003734:	080036e1 	.word	0x080036e1
 8003738:	08003893 	.word	0x08003893
 800373c:	080036e1 	.word	0x080036e1
 8003740:	08003795 	.word	0x08003795
 8003744:	080036e1 	.word	0x080036e1
 8003748:	080036e1 	.word	0x080036e1
 800374c:	0800385b 	.word	0x0800385b
 8003750:	680b      	ldr	r3, [r1, #0]
 8003752:	1d1a      	adds	r2, r3, #4
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	600a      	str	r2, [r1, #0]
 8003758:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800375c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003760:	2301      	movs	r3, #1
 8003762:	e0a3      	b.n	80038ac <_printf_i+0x1f4>
 8003764:	6825      	ldr	r5, [r4, #0]
 8003766:	6808      	ldr	r0, [r1, #0]
 8003768:	062e      	lsls	r6, r5, #24
 800376a:	f100 0304 	add.w	r3, r0, #4
 800376e:	d50a      	bpl.n	8003786 <_printf_i+0xce>
 8003770:	6805      	ldr	r5, [r0, #0]
 8003772:	600b      	str	r3, [r1, #0]
 8003774:	2d00      	cmp	r5, #0
 8003776:	da03      	bge.n	8003780 <_printf_i+0xc8>
 8003778:	232d      	movs	r3, #45	; 0x2d
 800377a:	426d      	negs	r5, r5
 800377c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003780:	485e      	ldr	r0, [pc, #376]	; (80038fc <_printf_i+0x244>)
 8003782:	230a      	movs	r3, #10
 8003784:	e019      	b.n	80037ba <_printf_i+0x102>
 8003786:	f015 0f40 	tst.w	r5, #64	; 0x40
 800378a:	6805      	ldr	r5, [r0, #0]
 800378c:	600b      	str	r3, [r1, #0]
 800378e:	bf18      	it	ne
 8003790:	b22d      	sxthne	r5, r5
 8003792:	e7ef      	b.n	8003774 <_printf_i+0xbc>
 8003794:	680b      	ldr	r3, [r1, #0]
 8003796:	6825      	ldr	r5, [r4, #0]
 8003798:	1d18      	adds	r0, r3, #4
 800379a:	6008      	str	r0, [r1, #0]
 800379c:	0628      	lsls	r0, r5, #24
 800379e:	d501      	bpl.n	80037a4 <_printf_i+0xec>
 80037a0:	681d      	ldr	r5, [r3, #0]
 80037a2:	e002      	b.n	80037aa <_printf_i+0xf2>
 80037a4:	0669      	lsls	r1, r5, #25
 80037a6:	d5fb      	bpl.n	80037a0 <_printf_i+0xe8>
 80037a8:	881d      	ldrh	r5, [r3, #0]
 80037aa:	4854      	ldr	r0, [pc, #336]	; (80038fc <_printf_i+0x244>)
 80037ac:	2f6f      	cmp	r7, #111	; 0x6f
 80037ae:	bf0c      	ite	eq
 80037b0:	2308      	moveq	r3, #8
 80037b2:	230a      	movne	r3, #10
 80037b4:	2100      	movs	r1, #0
 80037b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037ba:	6866      	ldr	r6, [r4, #4]
 80037bc:	60a6      	str	r6, [r4, #8]
 80037be:	2e00      	cmp	r6, #0
 80037c0:	bfa2      	ittt	ge
 80037c2:	6821      	ldrge	r1, [r4, #0]
 80037c4:	f021 0104 	bicge.w	r1, r1, #4
 80037c8:	6021      	strge	r1, [r4, #0]
 80037ca:	b90d      	cbnz	r5, 80037d0 <_printf_i+0x118>
 80037cc:	2e00      	cmp	r6, #0
 80037ce:	d04d      	beq.n	800386c <_printf_i+0x1b4>
 80037d0:	4616      	mov	r6, r2
 80037d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80037d6:	fb03 5711 	mls	r7, r3, r1, r5
 80037da:	5dc7      	ldrb	r7, [r0, r7]
 80037dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80037e0:	462f      	mov	r7, r5
 80037e2:	42bb      	cmp	r3, r7
 80037e4:	460d      	mov	r5, r1
 80037e6:	d9f4      	bls.n	80037d2 <_printf_i+0x11a>
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d10b      	bne.n	8003804 <_printf_i+0x14c>
 80037ec:	6823      	ldr	r3, [r4, #0]
 80037ee:	07df      	lsls	r7, r3, #31
 80037f0:	d508      	bpl.n	8003804 <_printf_i+0x14c>
 80037f2:	6923      	ldr	r3, [r4, #16]
 80037f4:	6861      	ldr	r1, [r4, #4]
 80037f6:	4299      	cmp	r1, r3
 80037f8:	bfde      	ittt	le
 80037fa:	2330      	movle	r3, #48	; 0x30
 80037fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003800:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003804:	1b92      	subs	r2, r2, r6
 8003806:	6122      	str	r2, [r4, #16]
 8003808:	f8cd a000 	str.w	sl, [sp]
 800380c:	464b      	mov	r3, r9
 800380e:	aa03      	add	r2, sp, #12
 8003810:	4621      	mov	r1, r4
 8003812:	4640      	mov	r0, r8
 8003814:	f7ff fee2 	bl	80035dc <_printf_common>
 8003818:	3001      	adds	r0, #1
 800381a:	d14c      	bne.n	80038b6 <_printf_i+0x1fe>
 800381c:	f04f 30ff 	mov.w	r0, #4294967295
 8003820:	b004      	add	sp, #16
 8003822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003826:	4835      	ldr	r0, [pc, #212]	; (80038fc <_printf_i+0x244>)
 8003828:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800382c:	6823      	ldr	r3, [r4, #0]
 800382e:	680e      	ldr	r6, [r1, #0]
 8003830:	061f      	lsls	r7, r3, #24
 8003832:	f856 5b04 	ldr.w	r5, [r6], #4
 8003836:	600e      	str	r6, [r1, #0]
 8003838:	d514      	bpl.n	8003864 <_printf_i+0x1ac>
 800383a:	07d9      	lsls	r1, r3, #31
 800383c:	bf44      	itt	mi
 800383e:	f043 0320 	orrmi.w	r3, r3, #32
 8003842:	6023      	strmi	r3, [r4, #0]
 8003844:	b91d      	cbnz	r5, 800384e <_printf_i+0x196>
 8003846:	6823      	ldr	r3, [r4, #0]
 8003848:	f023 0320 	bic.w	r3, r3, #32
 800384c:	6023      	str	r3, [r4, #0]
 800384e:	2310      	movs	r3, #16
 8003850:	e7b0      	b.n	80037b4 <_printf_i+0xfc>
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	f043 0320 	orr.w	r3, r3, #32
 8003858:	6023      	str	r3, [r4, #0]
 800385a:	2378      	movs	r3, #120	; 0x78
 800385c:	4828      	ldr	r0, [pc, #160]	; (8003900 <_printf_i+0x248>)
 800385e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003862:	e7e3      	b.n	800382c <_printf_i+0x174>
 8003864:	065e      	lsls	r6, r3, #25
 8003866:	bf48      	it	mi
 8003868:	b2ad      	uxthmi	r5, r5
 800386a:	e7e6      	b.n	800383a <_printf_i+0x182>
 800386c:	4616      	mov	r6, r2
 800386e:	e7bb      	b.n	80037e8 <_printf_i+0x130>
 8003870:	680b      	ldr	r3, [r1, #0]
 8003872:	6826      	ldr	r6, [r4, #0]
 8003874:	6960      	ldr	r0, [r4, #20]
 8003876:	1d1d      	adds	r5, r3, #4
 8003878:	600d      	str	r5, [r1, #0]
 800387a:	0635      	lsls	r5, r6, #24
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	d501      	bpl.n	8003884 <_printf_i+0x1cc>
 8003880:	6018      	str	r0, [r3, #0]
 8003882:	e002      	b.n	800388a <_printf_i+0x1d2>
 8003884:	0671      	lsls	r1, r6, #25
 8003886:	d5fb      	bpl.n	8003880 <_printf_i+0x1c8>
 8003888:	8018      	strh	r0, [r3, #0]
 800388a:	2300      	movs	r3, #0
 800388c:	6123      	str	r3, [r4, #16]
 800388e:	4616      	mov	r6, r2
 8003890:	e7ba      	b.n	8003808 <_printf_i+0x150>
 8003892:	680b      	ldr	r3, [r1, #0]
 8003894:	1d1a      	adds	r2, r3, #4
 8003896:	600a      	str	r2, [r1, #0]
 8003898:	681e      	ldr	r6, [r3, #0]
 800389a:	6862      	ldr	r2, [r4, #4]
 800389c:	2100      	movs	r1, #0
 800389e:	4630      	mov	r0, r6
 80038a0:	f7fc fc9e 	bl	80001e0 <memchr>
 80038a4:	b108      	cbz	r0, 80038aa <_printf_i+0x1f2>
 80038a6:	1b80      	subs	r0, r0, r6
 80038a8:	6060      	str	r0, [r4, #4]
 80038aa:	6863      	ldr	r3, [r4, #4]
 80038ac:	6123      	str	r3, [r4, #16]
 80038ae:	2300      	movs	r3, #0
 80038b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038b4:	e7a8      	b.n	8003808 <_printf_i+0x150>
 80038b6:	6923      	ldr	r3, [r4, #16]
 80038b8:	4632      	mov	r2, r6
 80038ba:	4649      	mov	r1, r9
 80038bc:	4640      	mov	r0, r8
 80038be:	47d0      	blx	sl
 80038c0:	3001      	adds	r0, #1
 80038c2:	d0ab      	beq.n	800381c <_printf_i+0x164>
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	079b      	lsls	r3, r3, #30
 80038c8:	d413      	bmi.n	80038f2 <_printf_i+0x23a>
 80038ca:	68e0      	ldr	r0, [r4, #12]
 80038cc:	9b03      	ldr	r3, [sp, #12]
 80038ce:	4298      	cmp	r0, r3
 80038d0:	bfb8      	it	lt
 80038d2:	4618      	movlt	r0, r3
 80038d4:	e7a4      	b.n	8003820 <_printf_i+0x168>
 80038d6:	2301      	movs	r3, #1
 80038d8:	4632      	mov	r2, r6
 80038da:	4649      	mov	r1, r9
 80038dc:	4640      	mov	r0, r8
 80038de:	47d0      	blx	sl
 80038e0:	3001      	adds	r0, #1
 80038e2:	d09b      	beq.n	800381c <_printf_i+0x164>
 80038e4:	3501      	adds	r5, #1
 80038e6:	68e3      	ldr	r3, [r4, #12]
 80038e8:	9903      	ldr	r1, [sp, #12]
 80038ea:	1a5b      	subs	r3, r3, r1
 80038ec:	42ab      	cmp	r3, r5
 80038ee:	dcf2      	bgt.n	80038d6 <_printf_i+0x21e>
 80038f0:	e7eb      	b.n	80038ca <_printf_i+0x212>
 80038f2:	2500      	movs	r5, #0
 80038f4:	f104 0619 	add.w	r6, r4, #25
 80038f8:	e7f5      	b.n	80038e6 <_printf_i+0x22e>
 80038fa:	bf00      	nop
 80038fc:	08005bde 	.word	0x08005bde
 8003900:	08005bef 	.word	0x08005bef

08003904 <iprintf>:
 8003904:	b40f      	push	{r0, r1, r2, r3}
 8003906:	4b0a      	ldr	r3, [pc, #40]	; (8003930 <iprintf+0x2c>)
 8003908:	b513      	push	{r0, r1, r4, lr}
 800390a:	681c      	ldr	r4, [r3, #0]
 800390c:	b124      	cbz	r4, 8003918 <iprintf+0x14>
 800390e:	69a3      	ldr	r3, [r4, #24]
 8003910:	b913      	cbnz	r3, 8003918 <iprintf+0x14>
 8003912:	4620      	mov	r0, r4
 8003914:	f001 f8d6 	bl	8004ac4 <__sinit>
 8003918:	ab05      	add	r3, sp, #20
 800391a:	9a04      	ldr	r2, [sp, #16]
 800391c:	68a1      	ldr	r1, [r4, #8]
 800391e:	9301      	str	r3, [sp, #4]
 8003920:	4620      	mov	r0, r4
 8003922:	f001 fe51 	bl	80055c8 <_vfiprintf_r>
 8003926:	b002      	add	sp, #8
 8003928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800392c:	b004      	add	sp, #16
 800392e:	4770      	bx	lr
 8003930:	20000018 	.word	0x20000018

08003934 <_puts_r>:
 8003934:	b570      	push	{r4, r5, r6, lr}
 8003936:	460e      	mov	r6, r1
 8003938:	4605      	mov	r5, r0
 800393a:	b118      	cbz	r0, 8003944 <_puts_r+0x10>
 800393c:	6983      	ldr	r3, [r0, #24]
 800393e:	b90b      	cbnz	r3, 8003944 <_puts_r+0x10>
 8003940:	f001 f8c0 	bl	8004ac4 <__sinit>
 8003944:	69ab      	ldr	r3, [r5, #24]
 8003946:	68ac      	ldr	r4, [r5, #8]
 8003948:	b913      	cbnz	r3, 8003950 <_puts_r+0x1c>
 800394a:	4628      	mov	r0, r5
 800394c:	f001 f8ba 	bl	8004ac4 <__sinit>
 8003950:	4b2c      	ldr	r3, [pc, #176]	; (8003a04 <_puts_r+0xd0>)
 8003952:	429c      	cmp	r4, r3
 8003954:	d120      	bne.n	8003998 <_puts_r+0x64>
 8003956:	686c      	ldr	r4, [r5, #4]
 8003958:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800395a:	07db      	lsls	r3, r3, #31
 800395c:	d405      	bmi.n	800396a <_puts_r+0x36>
 800395e:	89a3      	ldrh	r3, [r4, #12]
 8003960:	0598      	lsls	r0, r3, #22
 8003962:	d402      	bmi.n	800396a <_puts_r+0x36>
 8003964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003966:	f001 f950 	bl	8004c0a <__retarget_lock_acquire_recursive>
 800396a:	89a3      	ldrh	r3, [r4, #12]
 800396c:	0719      	lsls	r1, r3, #28
 800396e:	d51d      	bpl.n	80039ac <_puts_r+0x78>
 8003970:	6923      	ldr	r3, [r4, #16]
 8003972:	b1db      	cbz	r3, 80039ac <_puts_r+0x78>
 8003974:	3e01      	subs	r6, #1
 8003976:	68a3      	ldr	r3, [r4, #8]
 8003978:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800397c:	3b01      	subs	r3, #1
 800397e:	60a3      	str	r3, [r4, #8]
 8003980:	bb39      	cbnz	r1, 80039d2 <_puts_r+0x9e>
 8003982:	2b00      	cmp	r3, #0
 8003984:	da38      	bge.n	80039f8 <_puts_r+0xc4>
 8003986:	4622      	mov	r2, r4
 8003988:	210a      	movs	r1, #10
 800398a:	4628      	mov	r0, r5
 800398c:	f000 f848 	bl	8003a20 <__swbuf_r>
 8003990:	3001      	adds	r0, #1
 8003992:	d011      	beq.n	80039b8 <_puts_r+0x84>
 8003994:	250a      	movs	r5, #10
 8003996:	e011      	b.n	80039bc <_puts_r+0x88>
 8003998:	4b1b      	ldr	r3, [pc, #108]	; (8003a08 <_puts_r+0xd4>)
 800399a:	429c      	cmp	r4, r3
 800399c:	d101      	bne.n	80039a2 <_puts_r+0x6e>
 800399e:	68ac      	ldr	r4, [r5, #8]
 80039a0:	e7da      	b.n	8003958 <_puts_r+0x24>
 80039a2:	4b1a      	ldr	r3, [pc, #104]	; (8003a0c <_puts_r+0xd8>)
 80039a4:	429c      	cmp	r4, r3
 80039a6:	bf08      	it	eq
 80039a8:	68ec      	ldreq	r4, [r5, #12]
 80039aa:	e7d5      	b.n	8003958 <_puts_r+0x24>
 80039ac:	4621      	mov	r1, r4
 80039ae:	4628      	mov	r0, r5
 80039b0:	f000 f888 	bl	8003ac4 <__swsetup_r>
 80039b4:	2800      	cmp	r0, #0
 80039b6:	d0dd      	beq.n	8003974 <_puts_r+0x40>
 80039b8:	f04f 35ff 	mov.w	r5, #4294967295
 80039bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039be:	07da      	lsls	r2, r3, #31
 80039c0:	d405      	bmi.n	80039ce <_puts_r+0x9a>
 80039c2:	89a3      	ldrh	r3, [r4, #12]
 80039c4:	059b      	lsls	r3, r3, #22
 80039c6:	d402      	bmi.n	80039ce <_puts_r+0x9a>
 80039c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039ca:	f001 f91f 	bl	8004c0c <__retarget_lock_release_recursive>
 80039ce:	4628      	mov	r0, r5
 80039d0:	bd70      	pop	{r4, r5, r6, pc}
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	da04      	bge.n	80039e0 <_puts_r+0xac>
 80039d6:	69a2      	ldr	r2, [r4, #24]
 80039d8:	429a      	cmp	r2, r3
 80039da:	dc06      	bgt.n	80039ea <_puts_r+0xb6>
 80039dc:	290a      	cmp	r1, #10
 80039de:	d004      	beq.n	80039ea <_puts_r+0xb6>
 80039e0:	6823      	ldr	r3, [r4, #0]
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	6022      	str	r2, [r4, #0]
 80039e6:	7019      	strb	r1, [r3, #0]
 80039e8:	e7c5      	b.n	8003976 <_puts_r+0x42>
 80039ea:	4622      	mov	r2, r4
 80039ec:	4628      	mov	r0, r5
 80039ee:	f000 f817 	bl	8003a20 <__swbuf_r>
 80039f2:	3001      	adds	r0, #1
 80039f4:	d1bf      	bne.n	8003976 <_puts_r+0x42>
 80039f6:	e7df      	b.n	80039b8 <_puts_r+0x84>
 80039f8:	6823      	ldr	r3, [r4, #0]
 80039fa:	250a      	movs	r5, #10
 80039fc:	1c5a      	adds	r2, r3, #1
 80039fe:	6022      	str	r2, [r4, #0]
 8003a00:	701d      	strb	r5, [r3, #0]
 8003a02:	e7db      	b.n	80039bc <_puts_r+0x88>
 8003a04:	08005cb4 	.word	0x08005cb4
 8003a08:	08005cd4 	.word	0x08005cd4
 8003a0c:	08005c94 	.word	0x08005c94

08003a10 <puts>:
 8003a10:	4b02      	ldr	r3, [pc, #8]	; (8003a1c <puts+0xc>)
 8003a12:	4601      	mov	r1, r0
 8003a14:	6818      	ldr	r0, [r3, #0]
 8003a16:	f7ff bf8d 	b.w	8003934 <_puts_r>
 8003a1a:	bf00      	nop
 8003a1c:	20000018 	.word	0x20000018

08003a20 <__swbuf_r>:
 8003a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a22:	460e      	mov	r6, r1
 8003a24:	4614      	mov	r4, r2
 8003a26:	4605      	mov	r5, r0
 8003a28:	b118      	cbz	r0, 8003a32 <__swbuf_r+0x12>
 8003a2a:	6983      	ldr	r3, [r0, #24]
 8003a2c:	b90b      	cbnz	r3, 8003a32 <__swbuf_r+0x12>
 8003a2e:	f001 f849 	bl	8004ac4 <__sinit>
 8003a32:	4b21      	ldr	r3, [pc, #132]	; (8003ab8 <__swbuf_r+0x98>)
 8003a34:	429c      	cmp	r4, r3
 8003a36:	d12b      	bne.n	8003a90 <__swbuf_r+0x70>
 8003a38:	686c      	ldr	r4, [r5, #4]
 8003a3a:	69a3      	ldr	r3, [r4, #24]
 8003a3c:	60a3      	str	r3, [r4, #8]
 8003a3e:	89a3      	ldrh	r3, [r4, #12]
 8003a40:	071a      	lsls	r2, r3, #28
 8003a42:	d52f      	bpl.n	8003aa4 <__swbuf_r+0x84>
 8003a44:	6923      	ldr	r3, [r4, #16]
 8003a46:	b36b      	cbz	r3, 8003aa4 <__swbuf_r+0x84>
 8003a48:	6923      	ldr	r3, [r4, #16]
 8003a4a:	6820      	ldr	r0, [r4, #0]
 8003a4c:	1ac0      	subs	r0, r0, r3
 8003a4e:	6963      	ldr	r3, [r4, #20]
 8003a50:	b2f6      	uxtb	r6, r6
 8003a52:	4283      	cmp	r3, r0
 8003a54:	4637      	mov	r7, r6
 8003a56:	dc04      	bgt.n	8003a62 <__swbuf_r+0x42>
 8003a58:	4621      	mov	r1, r4
 8003a5a:	4628      	mov	r0, r5
 8003a5c:	f000 ff9e 	bl	800499c <_fflush_r>
 8003a60:	bb30      	cbnz	r0, 8003ab0 <__swbuf_r+0x90>
 8003a62:	68a3      	ldr	r3, [r4, #8]
 8003a64:	3b01      	subs	r3, #1
 8003a66:	60a3      	str	r3, [r4, #8]
 8003a68:	6823      	ldr	r3, [r4, #0]
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	6022      	str	r2, [r4, #0]
 8003a6e:	701e      	strb	r6, [r3, #0]
 8003a70:	6963      	ldr	r3, [r4, #20]
 8003a72:	3001      	adds	r0, #1
 8003a74:	4283      	cmp	r3, r0
 8003a76:	d004      	beq.n	8003a82 <__swbuf_r+0x62>
 8003a78:	89a3      	ldrh	r3, [r4, #12]
 8003a7a:	07db      	lsls	r3, r3, #31
 8003a7c:	d506      	bpl.n	8003a8c <__swbuf_r+0x6c>
 8003a7e:	2e0a      	cmp	r6, #10
 8003a80:	d104      	bne.n	8003a8c <__swbuf_r+0x6c>
 8003a82:	4621      	mov	r1, r4
 8003a84:	4628      	mov	r0, r5
 8003a86:	f000 ff89 	bl	800499c <_fflush_r>
 8003a8a:	b988      	cbnz	r0, 8003ab0 <__swbuf_r+0x90>
 8003a8c:	4638      	mov	r0, r7
 8003a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a90:	4b0a      	ldr	r3, [pc, #40]	; (8003abc <__swbuf_r+0x9c>)
 8003a92:	429c      	cmp	r4, r3
 8003a94:	d101      	bne.n	8003a9a <__swbuf_r+0x7a>
 8003a96:	68ac      	ldr	r4, [r5, #8]
 8003a98:	e7cf      	b.n	8003a3a <__swbuf_r+0x1a>
 8003a9a:	4b09      	ldr	r3, [pc, #36]	; (8003ac0 <__swbuf_r+0xa0>)
 8003a9c:	429c      	cmp	r4, r3
 8003a9e:	bf08      	it	eq
 8003aa0:	68ec      	ldreq	r4, [r5, #12]
 8003aa2:	e7ca      	b.n	8003a3a <__swbuf_r+0x1a>
 8003aa4:	4621      	mov	r1, r4
 8003aa6:	4628      	mov	r0, r5
 8003aa8:	f000 f80c 	bl	8003ac4 <__swsetup_r>
 8003aac:	2800      	cmp	r0, #0
 8003aae:	d0cb      	beq.n	8003a48 <__swbuf_r+0x28>
 8003ab0:	f04f 37ff 	mov.w	r7, #4294967295
 8003ab4:	e7ea      	b.n	8003a8c <__swbuf_r+0x6c>
 8003ab6:	bf00      	nop
 8003ab8:	08005cb4 	.word	0x08005cb4
 8003abc:	08005cd4 	.word	0x08005cd4
 8003ac0:	08005c94 	.word	0x08005c94

08003ac4 <__swsetup_r>:
 8003ac4:	4b32      	ldr	r3, [pc, #200]	; (8003b90 <__swsetup_r+0xcc>)
 8003ac6:	b570      	push	{r4, r5, r6, lr}
 8003ac8:	681d      	ldr	r5, [r3, #0]
 8003aca:	4606      	mov	r6, r0
 8003acc:	460c      	mov	r4, r1
 8003ace:	b125      	cbz	r5, 8003ada <__swsetup_r+0x16>
 8003ad0:	69ab      	ldr	r3, [r5, #24]
 8003ad2:	b913      	cbnz	r3, 8003ada <__swsetup_r+0x16>
 8003ad4:	4628      	mov	r0, r5
 8003ad6:	f000 fff5 	bl	8004ac4 <__sinit>
 8003ada:	4b2e      	ldr	r3, [pc, #184]	; (8003b94 <__swsetup_r+0xd0>)
 8003adc:	429c      	cmp	r4, r3
 8003ade:	d10f      	bne.n	8003b00 <__swsetup_r+0x3c>
 8003ae0:	686c      	ldr	r4, [r5, #4]
 8003ae2:	89a3      	ldrh	r3, [r4, #12]
 8003ae4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ae8:	0719      	lsls	r1, r3, #28
 8003aea:	d42c      	bmi.n	8003b46 <__swsetup_r+0x82>
 8003aec:	06dd      	lsls	r5, r3, #27
 8003aee:	d411      	bmi.n	8003b14 <__swsetup_r+0x50>
 8003af0:	2309      	movs	r3, #9
 8003af2:	6033      	str	r3, [r6, #0]
 8003af4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003af8:	81a3      	strh	r3, [r4, #12]
 8003afa:	f04f 30ff 	mov.w	r0, #4294967295
 8003afe:	e03e      	b.n	8003b7e <__swsetup_r+0xba>
 8003b00:	4b25      	ldr	r3, [pc, #148]	; (8003b98 <__swsetup_r+0xd4>)
 8003b02:	429c      	cmp	r4, r3
 8003b04:	d101      	bne.n	8003b0a <__swsetup_r+0x46>
 8003b06:	68ac      	ldr	r4, [r5, #8]
 8003b08:	e7eb      	b.n	8003ae2 <__swsetup_r+0x1e>
 8003b0a:	4b24      	ldr	r3, [pc, #144]	; (8003b9c <__swsetup_r+0xd8>)
 8003b0c:	429c      	cmp	r4, r3
 8003b0e:	bf08      	it	eq
 8003b10:	68ec      	ldreq	r4, [r5, #12]
 8003b12:	e7e6      	b.n	8003ae2 <__swsetup_r+0x1e>
 8003b14:	0758      	lsls	r0, r3, #29
 8003b16:	d512      	bpl.n	8003b3e <__swsetup_r+0x7a>
 8003b18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b1a:	b141      	cbz	r1, 8003b2e <__swsetup_r+0x6a>
 8003b1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b20:	4299      	cmp	r1, r3
 8003b22:	d002      	beq.n	8003b2a <__swsetup_r+0x66>
 8003b24:	4630      	mov	r0, r6
 8003b26:	f001 fc7b 	bl	8005420 <_free_r>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	6363      	str	r3, [r4, #52]	; 0x34
 8003b2e:	89a3      	ldrh	r3, [r4, #12]
 8003b30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003b34:	81a3      	strh	r3, [r4, #12]
 8003b36:	2300      	movs	r3, #0
 8003b38:	6063      	str	r3, [r4, #4]
 8003b3a:	6923      	ldr	r3, [r4, #16]
 8003b3c:	6023      	str	r3, [r4, #0]
 8003b3e:	89a3      	ldrh	r3, [r4, #12]
 8003b40:	f043 0308 	orr.w	r3, r3, #8
 8003b44:	81a3      	strh	r3, [r4, #12]
 8003b46:	6923      	ldr	r3, [r4, #16]
 8003b48:	b94b      	cbnz	r3, 8003b5e <__swsetup_r+0x9a>
 8003b4a:	89a3      	ldrh	r3, [r4, #12]
 8003b4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b54:	d003      	beq.n	8003b5e <__swsetup_r+0x9a>
 8003b56:	4621      	mov	r1, r4
 8003b58:	4630      	mov	r0, r6
 8003b5a:	f001 f87d 	bl	8004c58 <__smakebuf_r>
 8003b5e:	89a0      	ldrh	r0, [r4, #12]
 8003b60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b64:	f010 0301 	ands.w	r3, r0, #1
 8003b68:	d00a      	beq.n	8003b80 <__swsetup_r+0xbc>
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60a3      	str	r3, [r4, #8]
 8003b6e:	6963      	ldr	r3, [r4, #20]
 8003b70:	425b      	negs	r3, r3
 8003b72:	61a3      	str	r3, [r4, #24]
 8003b74:	6923      	ldr	r3, [r4, #16]
 8003b76:	b943      	cbnz	r3, 8003b8a <__swsetup_r+0xc6>
 8003b78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003b7c:	d1ba      	bne.n	8003af4 <__swsetup_r+0x30>
 8003b7e:	bd70      	pop	{r4, r5, r6, pc}
 8003b80:	0781      	lsls	r1, r0, #30
 8003b82:	bf58      	it	pl
 8003b84:	6963      	ldrpl	r3, [r4, #20]
 8003b86:	60a3      	str	r3, [r4, #8]
 8003b88:	e7f4      	b.n	8003b74 <__swsetup_r+0xb0>
 8003b8a:	2000      	movs	r0, #0
 8003b8c:	e7f7      	b.n	8003b7e <__swsetup_r+0xba>
 8003b8e:	bf00      	nop
 8003b90:	20000018 	.word	0x20000018
 8003b94:	08005cb4 	.word	0x08005cb4
 8003b98:	08005cd4 	.word	0x08005cd4
 8003b9c:	08005c94 	.word	0x08005c94

08003ba0 <quorem>:
 8003ba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ba4:	6903      	ldr	r3, [r0, #16]
 8003ba6:	690c      	ldr	r4, [r1, #16]
 8003ba8:	42a3      	cmp	r3, r4
 8003baa:	4607      	mov	r7, r0
 8003bac:	f2c0 8081 	blt.w	8003cb2 <quorem+0x112>
 8003bb0:	3c01      	subs	r4, #1
 8003bb2:	f101 0814 	add.w	r8, r1, #20
 8003bb6:	f100 0514 	add.w	r5, r0, #20
 8003bba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003bbe:	9301      	str	r3, [sp, #4]
 8003bc0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003bc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003bd0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003bd4:	fbb2 f6f3 	udiv	r6, r2, r3
 8003bd8:	d331      	bcc.n	8003c3e <quorem+0x9e>
 8003bda:	f04f 0e00 	mov.w	lr, #0
 8003bde:	4640      	mov	r0, r8
 8003be0:	46ac      	mov	ip, r5
 8003be2:	46f2      	mov	sl, lr
 8003be4:	f850 2b04 	ldr.w	r2, [r0], #4
 8003be8:	b293      	uxth	r3, r2
 8003bea:	fb06 e303 	mla	r3, r6, r3, lr
 8003bee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	ebaa 0303 	sub.w	r3, sl, r3
 8003bf8:	0c12      	lsrs	r2, r2, #16
 8003bfa:	f8dc a000 	ldr.w	sl, [ip]
 8003bfe:	fb06 e202 	mla	r2, r6, r2, lr
 8003c02:	fa13 f38a 	uxtah	r3, r3, sl
 8003c06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003c0a:	fa1f fa82 	uxth.w	sl, r2
 8003c0e:	f8dc 2000 	ldr.w	r2, [ip]
 8003c12:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8003c16:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c20:	4581      	cmp	r9, r0
 8003c22:	f84c 3b04 	str.w	r3, [ip], #4
 8003c26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003c2a:	d2db      	bcs.n	8003be4 <quorem+0x44>
 8003c2c:	f855 300b 	ldr.w	r3, [r5, fp]
 8003c30:	b92b      	cbnz	r3, 8003c3e <quorem+0x9e>
 8003c32:	9b01      	ldr	r3, [sp, #4]
 8003c34:	3b04      	subs	r3, #4
 8003c36:	429d      	cmp	r5, r3
 8003c38:	461a      	mov	r2, r3
 8003c3a:	d32e      	bcc.n	8003c9a <quorem+0xfa>
 8003c3c:	613c      	str	r4, [r7, #16]
 8003c3e:	4638      	mov	r0, r7
 8003c40:	f001 fade 	bl	8005200 <__mcmp>
 8003c44:	2800      	cmp	r0, #0
 8003c46:	db24      	blt.n	8003c92 <quorem+0xf2>
 8003c48:	3601      	adds	r6, #1
 8003c4a:	4628      	mov	r0, r5
 8003c4c:	f04f 0c00 	mov.w	ip, #0
 8003c50:	f858 2b04 	ldr.w	r2, [r8], #4
 8003c54:	f8d0 e000 	ldr.w	lr, [r0]
 8003c58:	b293      	uxth	r3, r2
 8003c5a:	ebac 0303 	sub.w	r3, ip, r3
 8003c5e:	0c12      	lsrs	r2, r2, #16
 8003c60:	fa13 f38e 	uxtah	r3, r3, lr
 8003c64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003c68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c72:	45c1      	cmp	r9, r8
 8003c74:	f840 3b04 	str.w	r3, [r0], #4
 8003c78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003c7c:	d2e8      	bcs.n	8003c50 <quorem+0xb0>
 8003c7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003c86:	b922      	cbnz	r2, 8003c92 <quorem+0xf2>
 8003c88:	3b04      	subs	r3, #4
 8003c8a:	429d      	cmp	r5, r3
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	d30a      	bcc.n	8003ca6 <quorem+0x106>
 8003c90:	613c      	str	r4, [r7, #16]
 8003c92:	4630      	mov	r0, r6
 8003c94:	b003      	add	sp, #12
 8003c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c9a:	6812      	ldr	r2, [r2, #0]
 8003c9c:	3b04      	subs	r3, #4
 8003c9e:	2a00      	cmp	r2, #0
 8003ca0:	d1cc      	bne.n	8003c3c <quorem+0x9c>
 8003ca2:	3c01      	subs	r4, #1
 8003ca4:	e7c7      	b.n	8003c36 <quorem+0x96>
 8003ca6:	6812      	ldr	r2, [r2, #0]
 8003ca8:	3b04      	subs	r3, #4
 8003caa:	2a00      	cmp	r2, #0
 8003cac:	d1f0      	bne.n	8003c90 <quorem+0xf0>
 8003cae:	3c01      	subs	r4, #1
 8003cb0:	e7eb      	b.n	8003c8a <quorem+0xea>
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	e7ee      	b.n	8003c94 <quorem+0xf4>
	...

08003cb8 <_dtoa_r>:
 8003cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cbc:	ed2d 8b02 	vpush	{d8}
 8003cc0:	ec57 6b10 	vmov	r6, r7, d0
 8003cc4:	b095      	sub	sp, #84	; 0x54
 8003cc6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003cc8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003ccc:	9105      	str	r1, [sp, #20]
 8003cce:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8003cd2:	4604      	mov	r4, r0
 8003cd4:	9209      	str	r2, [sp, #36]	; 0x24
 8003cd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8003cd8:	b975      	cbnz	r5, 8003cf8 <_dtoa_r+0x40>
 8003cda:	2010      	movs	r0, #16
 8003cdc:	f000 fffc 	bl	8004cd8 <malloc>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	6260      	str	r0, [r4, #36]	; 0x24
 8003ce4:	b920      	cbnz	r0, 8003cf0 <_dtoa_r+0x38>
 8003ce6:	4bb2      	ldr	r3, [pc, #712]	; (8003fb0 <_dtoa_r+0x2f8>)
 8003ce8:	21ea      	movs	r1, #234	; 0xea
 8003cea:	48b2      	ldr	r0, [pc, #712]	; (8003fb4 <_dtoa_r+0x2fc>)
 8003cec:	f001 fe02 	bl	80058f4 <__assert_func>
 8003cf0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003cf4:	6005      	str	r5, [r0, #0]
 8003cf6:	60c5      	str	r5, [r0, #12]
 8003cf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cfa:	6819      	ldr	r1, [r3, #0]
 8003cfc:	b151      	cbz	r1, 8003d14 <_dtoa_r+0x5c>
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	604a      	str	r2, [r1, #4]
 8003d02:	2301      	movs	r3, #1
 8003d04:	4093      	lsls	r3, r2
 8003d06:	608b      	str	r3, [r1, #8]
 8003d08:	4620      	mov	r0, r4
 8003d0a:	f001 f83b 	bl	8004d84 <_Bfree>
 8003d0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	1e3b      	subs	r3, r7, #0
 8003d16:	bfb9      	ittee	lt
 8003d18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003d1c:	9303      	strlt	r3, [sp, #12]
 8003d1e:	2300      	movge	r3, #0
 8003d20:	f8c8 3000 	strge.w	r3, [r8]
 8003d24:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003d28:	4ba3      	ldr	r3, [pc, #652]	; (8003fb8 <_dtoa_r+0x300>)
 8003d2a:	bfbc      	itt	lt
 8003d2c:	2201      	movlt	r2, #1
 8003d2e:	f8c8 2000 	strlt.w	r2, [r8]
 8003d32:	ea33 0309 	bics.w	r3, r3, r9
 8003d36:	d11b      	bne.n	8003d70 <_dtoa_r+0xb8>
 8003d38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003d3a:	f242 730f 	movw	r3, #9999	; 0x270f
 8003d3e:	6013      	str	r3, [r2, #0]
 8003d40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003d44:	4333      	orrs	r3, r6
 8003d46:	f000 857a 	beq.w	800483e <_dtoa_r+0xb86>
 8003d4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d4c:	b963      	cbnz	r3, 8003d68 <_dtoa_r+0xb0>
 8003d4e:	4b9b      	ldr	r3, [pc, #620]	; (8003fbc <_dtoa_r+0x304>)
 8003d50:	e024      	b.n	8003d9c <_dtoa_r+0xe4>
 8003d52:	4b9b      	ldr	r3, [pc, #620]	; (8003fc0 <_dtoa_r+0x308>)
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	3308      	adds	r3, #8
 8003d58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003d5a:	6013      	str	r3, [r2, #0]
 8003d5c:	9800      	ldr	r0, [sp, #0]
 8003d5e:	b015      	add	sp, #84	; 0x54
 8003d60:	ecbd 8b02 	vpop	{d8}
 8003d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d68:	4b94      	ldr	r3, [pc, #592]	; (8003fbc <_dtoa_r+0x304>)
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	3303      	adds	r3, #3
 8003d6e:	e7f3      	b.n	8003d58 <_dtoa_r+0xa0>
 8003d70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003d74:	2200      	movs	r2, #0
 8003d76:	ec51 0b17 	vmov	r0, r1, d7
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8003d80:	f7fc fea2 	bl	8000ac8 <__aeabi_dcmpeq>
 8003d84:	4680      	mov	r8, r0
 8003d86:	b158      	cbz	r0, 8003da0 <_dtoa_r+0xe8>
 8003d88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 8551 	beq.w	8004838 <_dtoa_r+0xb80>
 8003d96:	488b      	ldr	r0, [pc, #556]	; (8003fc4 <_dtoa_r+0x30c>)
 8003d98:	6018      	str	r0, [r3, #0]
 8003d9a:	1e43      	subs	r3, r0, #1
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	e7dd      	b.n	8003d5c <_dtoa_r+0xa4>
 8003da0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8003da4:	aa12      	add	r2, sp, #72	; 0x48
 8003da6:	a913      	add	r1, sp, #76	; 0x4c
 8003da8:	4620      	mov	r0, r4
 8003daa:	f001 facd 	bl	8005348 <__d2b>
 8003dae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8003db2:	4683      	mov	fp, r0
 8003db4:	2d00      	cmp	r5, #0
 8003db6:	d07c      	beq.n	8003eb2 <_dtoa_r+0x1fa>
 8003db8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003dba:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8003dbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dc2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8003dc6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8003dca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8003dce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003dd2:	4b7d      	ldr	r3, [pc, #500]	; (8003fc8 <_dtoa_r+0x310>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	4630      	mov	r0, r6
 8003dd8:	4639      	mov	r1, r7
 8003dda:	f7fc fa55 	bl	8000288 <__aeabi_dsub>
 8003dde:	a36e      	add	r3, pc, #440	; (adr r3, 8003f98 <_dtoa_r+0x2e0>)
 8003de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de4:	f7fc fc08 	bl	80005f8 <__aeabi_dmul>
 8003de8:	a36d      	add	r3, pc, #436	; (adr r3, 8003fa0 <_dtoa_r+0x2e8>)
 8003dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dee:	f7fc fa4d 	bl	800028c <__adddf3>
 8003df2:	4606      	mov	r6, r0
 8003df4:	4628      	mov	r0, r5
 8003df6:	460f      	mov	r7, r1
 8003df8:	f7fc fb94 	bl	8000524 <__aeabi_i2d>
 8003dfc:	a36a      	add	r3, pc, #424	; (adr r3, 8003fa8 <_dtoa_r+0x2f0>)
 8003dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e02:	f7fc fbf9 	bl	80005f8 <__aeabi_dmul>
 8003e06:	4602      	mov	r2, r0
 8003e08:	460b      	mov	r3, r1
 8003e0a:	4630      	mov	r0, r6
 8003e0c:	4639      	mov	r1, r7
 8003e0e:	f7fc fa3d 	bl	800028c <__adddf3>
 8003e12:	4606      	mov	r6, r0
 8003e14:	460f      	mov	r7, r1
 8003e16:	f7fc fe9f 	bl	8000b58 <__aeabi_d2iz>
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	4682      	mov	sl, r0
 8003e1e:	2300      	movs	r3, #0
 8003e20:	4630      	mov	r0, r6
 8003e22:	4639      	mov	r1, r7
 8003e24:	f7fc fe5a 	bl	8000adc <__aeabi_dcmplt>
 8003e28:	b148      	cbz	r0, 8003e3e <_dtoa_r+0x186>
 8003e2a:	4650      	mov	r0, sl
 8003e2c:	f7fc fb7a 	bl	8000524 <__aeabi_i2d>
 8003e30:	4632      	mov	r2, r6
 8003e32:	463b      	mov	r3, r7
 8003e34:	f7fc fe48 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e38:	b908      	cbnz	r0, 8003e3e <_dtoa_r+0x186>
 8003e3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003e3e:	f1ba 0f16 	cmp.w	sl, #22
 8003e42:	d854      	bhi.n	8003eee <_dtoa_r+0x236>
 8003e44:	4b61      	ldr	r3, [pc, #388]	; (8003fcc <_dtoa_r+0x314>)
 8003e46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003e52:	f7fc fe43 	bl	8000adc <__aeabi_dcmplt>
 8003e56:	2800      	cmp	r0, #0
 8003e58:	d04b      	beq.n	8003ef2 <_dtoa_r+0x23a>
 8003e5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003e5e:	2300      	movs	r3, #0
 8003e60:	930e      	str	r3, [sp, #56]	; 0x38
 8003e62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003e64:	1b5d      	subs	r5, r3, r5
 8003e66:	1e6b      	subs	r3, r5, #1
 8003e68:	9304      	str	r3, [sp, #16]
 8003e6a:	bf43      	ittte	mi
 8003e6c:	2300      	movmi	r3, #0
 8003e6e:	f1c5 0801 	rsbmi	r8, r5, #1
 8003e72:	9304      	strmi	r3, [sp, #16]
 8003e74:	f04f 0800 	movpl.w	r8, #0
 8003e78:	f1ba 0f00 	cmp.w	sl, #0
 8003e7c:	db3b      	blt.n	8003ef6 <_dtoa_r+0x23e>
 8003e7e:	9b04      	ldr	r3, [sp, #16]
 8003e80:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8003e84:	4453      	add	r3, sl
 8003e86:	9304      	str	r3, [sp, #16]
 8003e88:	2300      	movs	r3, #0
 8003e8a:	9306      	str	r3, [sp, #24]
 8003e8c:	9b05      	ldr	r3, [sp, #20]
 8003e8e:	2b09      	cmp	r3, #9
 8003e90:	d869      	bhi.n	8003f66 <_dtoa_r+0x2ae>
 8003e92:	2b05      	cmp	r3, #5
 8003e94:	bfc4      	itt	gt
 8003e96:	3b04      	subgt	r3, #4
 8003e98:	9305      	strgt	r3, [sp, #20]
 8003e9a:	9b05      	ldr	r3, [sp, #20]
 8003e9c:	f1a3 0302 	sub.w	r3, r3, #2
 8003ea0:	bfcc      	ite	gt
 8003ea2:	2500      	movgt	r5, #0
 8003ea4:	2501      	movle	r5, #1
 8003ea6:	2b03      	cmp	r3, #3
 8003ea8:	d869      	bhi.n	8003f7e <_dtoa_r+0x2c6>
 8003eaa:	e8df f003 	tbb	[pc, r3]
 8003eae:	4e2c      	.short	0x4e2c
 8003eb0:	5a4c      	.short	0x5a4c
 8003eb2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8003eb6:	441d      	add	r5, r3
 8003eb8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003ebc:	2b20      	cmp	r3, #32
 8003ebe:	bfc1      	itttt	gt
 8003ec0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003ec4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8003ec8:	fa09 f303 	lslgt.w	r3, r9, r3
 8003ecc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003ed0:	bfda      	itte	le
 8003ed2:	f1c3 0320 	rsble	r3, r3, #32
 8003ed6:	fa06 f003 	lslle.w	r0, r6, r3
 8003eda:	4318      	orrgt	r0, r3
 8003edc:	f7fc fb12 	bl	8000504 <__aeabi_ui2d>
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	4606      	mov	r6, r0
 8003ee4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8003ee8:	3d01      	subs	r5, #1
 8003eea:	9310      	str	r3, [sp, #64]	; 0x40
 8003eec:	e771      	b.n	8003dd2 <_dtoa_r+0x11a>
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e7b6      	b.n	8003e60 <_dtoa_r+0x1a8>
 8003ef2:	900e      	str	r0, [sp, #56]	; 0x38
 8003ef4:	e7b5      	b.n	8003e62 <_dtoa_r+0x1aa>
 8003ef6:	f1ca 0300 	rsb	r3, sl, #0
 8003efa:	9306      	str	r3, [sp, #24]
 8003efc:	2300      	movs	r3, #0
 8003efe:	eba8 080a 	sub.w	r8, r8, sl
 8003f02:	930d      	str	r3, [sp, #52]	; 0x34
 8003f04:	e7c2      	b.n	8003e8c <_dtoa_r+0x1d4>
 8003f06:	2300      	movs	r3, #0
 8003f08:	9308      	str	r3, [sp, #32]
 8003f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	dc39      	bgt.n	8003f84 <_dtoa_r+0x2cc>
 8003f10:	f04f 0901 	mov.w	r9, #1
 8003f14:	f8cd 9004 	str.w	r9, [sp, #4]
 8003f18:	464b      	mov	r3, r9
 8003f1a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8003f1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003f20:	2200      	movs	r2, #0
 8003f22:	6042      	str	r2, [r0, #4]
 8003f24:	2204      	movs	r2, #4
 8003f26:	f102 0614 	add.w	r6, r2, #20
 8003f2a:	429e      	cmp	r6, r3
 8003f2c:	6841      	ldr	r1, [r0, #4]
 8003f2e:	d92f      	bls.n	8003f90 <_dtoa_r+0x2d8>
 8003f30:	4620      	mov	r0, r4
 8003f32:	f000 fee7 	bl	8004d04 <_Balloc>
 8003f36:	9000      	str	r0, [sp, #0]
 8003f38:	2800      	cmp	r0, #0
 8003f3a:	d14b      	bne.n	8003fd4 <_dtoa_r+0x31c>
 8003f3c:	4b24      	ldr	r3, [pc, #144]	; (8003fd0 <_dtoa_r+0x318>)
 8003f3e:	4602      	mov	r2, r0
 8003f40:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003f44:	e6d1      	b.n	8003cea <_dtoa_r+0x32>
 8003f46:	2301      	movs	r3, #1
 8003f48:	e7de      	b.n	8003f08 <_dtoa_r+0x250>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	9308      	str	r3, [sp, #32]
 8003f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f50:	eb0a 0903 	add.w	r9, sl, r3
 8003f54:	f109 0301 	add.w	r3, r9, #1
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	9301      	str	r3, [sp, #4]
 8003f5c:	bfb8      	it	lt
 8003f5e:	2301      	movlt	r3, #1
 8003f60:	e7dd      	b.n	8003f1e <_dtoa_r+0x266>
 8003f62:	2301      	movs	r3, #1
 8003f64:	e7f2      	b.n	8003f4c <_dtoa_r+0x294>
 8003f66:	2501      	movs	r5, #1
 8003f68:	2300      	movs	r3, #0
 8003f6a:	9305      	str	r3, [sp, #20]
 8003f6c:	9508      	str	r5, [sp, #32]
 8003f6e:	f04f 39ff 	mov.w	r9, #4294967295
 8003f72:	2200      	movs	r2, #0
 8003f74:	f8cd 9004 	str.w	r9, [sp, #4]
 8003f78:	2312      	movs	r3, #18
 8003f7a:	9209      	str	r2, [sp, #36]	; 0x24
 8003f7c:	e7cf      	b.n	8003f1e <_dtoa_r+0x266>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	9308      	str	r3, [sp, #32]
 8003f82:	e7f4      	b.n	8003f6e <_dtoa_r+0x2b6>
 8003f84:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8003f88:	f8cd 9004 	str.w	r9, [sp, #4]
 8003f8c:	464b      	mov	r3, r9
 8003f8e:	e7c6      	b.n	8003f1e <_dtoa_r+0x266>
 8003f90:	3101      	adds	r1, #1
 8003f92:	6041      	str	r1, [r0, #4]
 8003f94:	0052      	lsls	r2, r2, #1
 8003f96:	e7c6      	b.n	8003f26 <_dtoa_r+0x26e>
 8003f98:	636f4361 	.word	0x636f4361
 8003f9c:	3fd287a7 	.word	0x3fd287a7
 8003fa0:	8b60c8b3 	.word	0x8b60c8b3
 8003fa4:	3fc68a28 	.word	0x3fc68a28
 8003fa8:	509f79fb 	.word	0x509f79fb
 8003fac:	3fd34413 	.word	0x3fd34413
 8003fb0:	08005c0d 	.word	0x08005c0d
 8003fb4:	08005c24 	.word	0x08005c24
 8003fb8:	7ff00000 	.word	0x7ff00000
 8003fbc:	08005c09 	.word	0x08005c09
 8003fc0:	08005c00 	.word	0x08005c00
 8003fc4:	08005bdd 	.word	0x08005bdd
 8003fc8:	3ff80000 	.word	0x3ff80000
 8003fcc:	08005d80 	.word	0x08005d80
 8003fd0:	08005c83 	.word	0x08005c83
 8003fd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fd6:	9a00      	ldr	r2, [sp, #0]
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	9b01      	ldr	r3, [sp, #4]
 8003fdc:	2b0e      	cmp	r3, #14
 8003fde:	f200 80ad 	bhi.w	800413c <_dtoa_r+0x484>
 8003fe2:	2d00      	cmp	r5, #0
 8003fe4:	f000 80aa 	beq.w	800413c <_dtoa_r+0x484>
 8003fe8:	f1ba 0f00 	cmp.w	sl, #0
 8003fec:	dd36      	ble.n	800405c <_dtoa_r+0x3a4>
 8003fee:	4ac3      	ldr	r2, [pc, #780]	; (80042fc <_dtoa_r+0x644>)
 8003ff0:	f00a 030f 	and.w	r3, sl, #15
 8003ff4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003ff8:	ed93 7b00 	vldr	d7, [r3]
 8003ffc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004000:	ea4f 172a 	mov.w	r7, sl, asr #4
 8004004:	eeb0 8a47 	vmov.f32	s16, s14
 8004008:	eef0 8a67 	vmov.f32	s17, s15
 800400c:	d016      	beq.n	800403c <_dtoa_r+0x384>
 800400e:	4bbc      	ldr	r3, [pc, #752]	; (8004300 <_dtoa_r+0x648>)
 8004010:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004014:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004018:	f7fc fc18 	bl	800084c <__aeabi_ddiv>
 800401c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004020:	f007 070f 	and.w	r7, r7, #15
 8004024:	2503      	movs	r5, #3
 8004026:	4eb6      	ldr	r6, [pc, #728]	; (8004300 <_dtoa_r+0x648>)
 8004028:	b957      	cbnz	r7, 8004040 <_dtoa_r+0x388>
 800402a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800402e:	ec53 2b18 	vmov	r2, r3, d8
 8004032:	f7fc fc0b 	bl	800084c <__aeabi_ddiv>
 8004036:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800403a:	e029      	b.n	8004090 <_dtoa_r+0x3d8>
 800403c:	2502      	movs	r5, #2
 800403e:	e7f2      	b.n	8004026 <_dtoa_r+0x36e>
 8004040:	07f9      	lsls	r1, r7, #31
 8004042:	d508      	bpl.n	8004056 <_dtoa_r+0x39e>
 8004044:	ec51 0b18 	vmov	r0, r1, d8
 8004048:	e9d6 2300 	ldrd	r2, r3, [r6]
 800404c:	f7fc fad4 	bl	80005f8 <__aeabi_dmul>
 8004050:	ec41 0b18 	vmov	d8, r0, r1
 8004054:	3501      	adds	r5, #1
 8004056:	107f      	asrs	r7, r7, #1
 8004058:	3608      	adds	r6, #8
 800405a:	e7e5      	b.n	8004028 <_dtoa_r+0x370>
 800405c:	f000 80a6 	beq.w	80041ac <_dtoa_r+0x4f4>
 8004060:	f1ca 0600 	rsb	r6, sl, #0
 8004064:	4ba5      	ldr	r3, [pc, #660]	; (80042fc <_dtoa_r+0x644>)
 8004066:	4fa6      	ldr	r7, [pc, #664]	; (8004300 <_dtoa_r+0x648>)
 8004068:	f006 020f 	and.w	r2, r6, #15
 800406c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004074:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004078:	f7fc fabe 	bl	80005f8 <__aeabi_dmul>
 800407c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004080:	1136      	asrs	r6, r6, #4
 8004082:	2300      	movs	r3, #0
 8004084:	2502      	movs	r5, #2
 8004086:	2e00      	cmp	r6, #0
 8004088:	f040 8085 	bne.w	8004196 <_dtoa_r+0x4de>
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1d2      	bne.n	8004036 <_dtoa_r+0x37e>
 8004090:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 808c 	beq.w	80041b0 <_dtoa_r+0x4f8>
 8004098:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800409c:	4b99      	ldr	r3, [pc, #612]	; (8004304 <_dtoa_r+0x64c>)
 800409e:	2200      	movs	r2, #0
 80040a0:	4630      	mov	r0, r6
 80040a2:	4639      	mov	r1, r7
 80040a4:	f7fc fd1a 	bl	8000adc <__aeabi_dcmplt>
 80040a8:	2800      	cmp	r0, #0
 80040aa:	f000 8081 	beq.w	80041b0 <_dtoa_r+0x4f8>
 80040ae:	9b01      	ldr	r3, [sp, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d07d      	beq.n	80041b0 <_dtoa_r+0x4f8>
 80040b4:	f1b9 0f00 	cmp.w	r9, #0
 80040b8:	dd3c      	ble.n	8004134 <_dtoa_r+0x47c>
 80040ba:	f10a 33ff 	add.w	r3, sl, #4294967295
 80040be:	9307      	str	r3, [sp, #28]
 80040c0:	2200      	movs	r2, #0
 80040c2:	4b91      	ldr	r3, [pc, #580]	; (8004308 <_dtoa_r+0x650>)
 80040c4:	4630      	mov	r0, r6
 80040c6:	4639      	mov	r1, r7
 80040c8:	f7fc fa96 	bl	80005f8 <__aeabi_dmul>
 80040cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040d0:	3501      	adds	r5, #1
 80040d2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80040d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80040da:	4628      	mov	r0, r5
 80040dc:	f7fc fa22 	bl	8000524 <__aeabi_i2d>
 80040e0:	4632      	mov	r2, r6
 80040e2:	463b      	mov	r3, r7
 80040e4:	f7fc fa88 	bl	80005f8 <__aeabi_dmul>
 80040e8:	4b88      	ldr	r3, [pc, #544]	; (800430c <_dtoa_r+0x654>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	f7fc f8ce 	bl	800028c <__adddf3>
 80040f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80040f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040f8:	9303      	str	r3, [sp, #12]
 80040fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d15c      	bne.n	80041ba <_dtoa_r+0x502>
 8004100:	4b83      	ldr	r3, [pc, #524]	; (8004310 <_dtoa_r+0x658>)
 8004102:	2200      	movs	r2, #0
 8004104:	4630      	mov	r0, r6
 8004106:	4639      	mov	r1, r7
 8004108:	f7fc f8be 	bl	8000288 <__aeabi_dsub>
 800410c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004110:	4606      	mov	r6, r0
 8004112:	460f      	mov	r7, r1
 8004114:	f7fc fd00 	bl	8000b18 <__aeabi_dcmpgt>
 8004118:	2800      	cmp	r0, #0
 800411a:	f040 8296 	bne.w	800464a <_dtoa_r+0x992>
 800411e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004122:	4630      	mov	r0, r6
 8004124:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004128:	4639      	mov	r1, r7
 800412a:	f7fc fcd7 	bl	8000adc <__aeabi_dcmplt>
 800412e:	2800      	cmp	r0, #0
 8004130:	f040 8288 	bne.w	8004644 <_dtoa_r+0x98c>
 8004134:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004138:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800413c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800413e:	2b00      	cmp	r3, #0
 8004140:	f2c0 8158 	blt.w	80043f4 <_dtoa_r+0x73c>
 8004144:	f1ba 0f0e 	cmp.w	sl, #14
 8004148:	f300 8154 	bgt.w	80043f4 <_dtoa_r+0x73c>
 800414c:	4b6b      	ldr	r3, [pc, #428]	; (80042fc <_dtoa_r+0x644>)
 800414e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004152:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004158:	2b00      	cmp	r3, #0
 800415a:	f280 80e3 	bge.w	8004324 <_dtoa_r+0x66c>
 800415e:	9b01      	ldr	r3, [sp, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	f300 80df 	bgt.w	8004324 <_dtoa_r+0x66c>
 8004166:	f040 826d 	bne.w	8004644 <_dtoa_r+0x98c>
 800416a:	4b69      	ldr	r3, [pc, #420]	; (8004310 <_dtoa_r+0x658>)
 800416c:	2200      	movs	r2, #0
 800416e:	4640      	mov	r0, r8
 8004170:	4649      	mov	r1, r9
 8004172:	f7fc fa41 	bl	80005f8 <__aeabi_dmul>
 8004176:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800417a:	f7fc fcc3 	bl	8000b04 <__aeabi_dcmpge>
 800417e:	9e01      	ldr	r6, [sp, #4]
 8004180:	4637      	mov	r7, r6
 8004182:	2800      	cmp	r0, #0
 8004184:	f040 8243 	bne.w	800460e <_dtoa_r+0x956>
 8004188:	9d00      	ldr	r5, [sp, #0]
 800418a:	2331      	movs	r3, #49	; 0x31
 800418c:	f805 3b01 	strb.w	r3, [r5], #1
 8004190:	f10a 0a01 	add.w	sl, sl, #1
 8004194:	e23f      	b.n	8004616 <_dtoa_r+0x95e>
 8004196:	07f2      	lsls	r2, r6, #31
 8004198:	d505      	bpl.n	80041a6 <_dtoa_r+0x4ee>
 800419a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800419e:	f7fc fa2b 	bl	80005f8 <__aeabi_dmul>
 80041a2:	3501      	adds	r5, #1
 80041a4:	2301      	movs	r3, #1
 80041a6:	1076      	asrs	r6, r6, #1
 80041a8:	3708      	adds	r7, #8
 80041aa:	e76c      	b.n	8004086 <_dtoa_r+0x3ce>
 80041ac:	2502      	movs	r5, #2
 80041ae:	e76f      	b.n	8004090 <_dtoa_r+0x3d8>
 80041b0:	9b01      	ldr	r3, [sp, #4]
 80041b2:	f8cd a01c 	str.w	sl, [sp, #28]
 80041b6:	930c      	str	r3, [sp, #48]	; 0x30
 80041b8:	e78d      	b.n	80040d6 <_dtoa_r+0x41e>
 80041ba:	9900      	ldr	r1, [sp, #0]
 80041bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80041be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80041c0:	4b4e      	ldr	r3, [pc, #312]	; (80042fc <_dtoa_r+0x644>)
 80041c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80041c6:	4401      	add	r1, r0
 80041c8:	9102      	str	r1, [sp, #8]
 80041ca:	9908      	ldr	r1, [sp, #32]
 80041cc:	eeb0 8a47 	vmov.f32	s16, s14
 80041d0:	eef0 8a67 	vmov.f32	s17, s15
 80041d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80041d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80041dc:	2900      	cmp	r1, #0
 80041de:	d045      	beq.n	800426c <_dtoa_r+0x5b4>
 80041e0:	494c      	ldr	r1, [pc, #304]	; (8004314 <_dtoa_r+0x65c>)
 80041e2:	2000      	movs	r0, #0
 80041e4:	f7fc fb32 	bl	800084c <__aeabi_ddiv>
 80041e8:	ec53 2b18 	vmov	r2, r3, d8
 80041ec:	f7fc f84c 	bl	8000288 <__aeabi_dsub>
 80041f0:	9d00      	ldr	r5, [sp, #0]
 80041f2:	ec41 0b18 	vmov	d8, r0, r1
 80041f6:	4639      	mov	r1, r7
 80041f8:	4630      	mov	r0, r6
 80041fa:	f7fc fcad 	bl	8000b58 <__aeabi_d2iz>
 80041fe:	900c      	str	r0, [sp, #48]	; 0x30
 8004200:	f7fc f990 	bl	8000524 <__aeabi_i2d>
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
 8004208:	4630      	mov	r0, r6
 800420a:	4639      	mov	r1, r7
 800420c:	f7fc f83c 	bl	8000288 <__aeabi_dsub>
 8004210:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004212:	3330      	adds	r3, #48	; 0x30
 8004214:	f805 3b01 	strb.w	r3, [r5], #1
 8004218:	ec53 2b18 	vmov	r2, r3, d8
 800421c:	4606      	mov	r6, r0
 800421e:	460f      	mov	r7, r1
 8004220:	f7fc fc5c 	bl	8000adc <__aeabi_dcmplt>
 8004224:	2800      	cmp	r0, #0
 8004226:	d165      	bne.n	80042f4 <_dtoa_r+0x63c>
 8004228:	4632      	mov	r2, r6
 800422a:	463b      	mov	r3, r7
 800422c:	4935      	ldr	r1, [pc, #212]	; (8004304 <_dtoa_r+0x64c>)
 800422e:	2000      	movs	r0, #0
 8004230:	f7fc f82a 	bl	8000288 <__aeabi_dsub>
 8004234:	ec53 2b18 	vmov	r2, r3, d8
 8004238:	f7fc fc50 	bl	8000adc <__aeabi_dcmplt>
 800423c:	2800      	cmp	r0, #0
 800423e:	f040 80b9 	bne.w	80043b4 <_dtoa_r+0x6fc>
 8004242:	9b02      	ldr	r3, [sp, #8]
 8004244:	429d      	cmp	r5, r3
 8004246:	f43f af75 	beq.w	8004134 <_dtoa_r+0x47c>
 800424a:	4b2f      	ldr	r3, [pc, #188]	; (8004308 <_dtoa_r+0x650>)
 800424c:	ec51 0b18 	vmov	r0, r1, d8
 8004250:	2200      	movs	r2, #0
 8004252:	f7fc f9d1 	bl	80005f8 <__aeabi_dmul>
 8004256:	4b2c      	ldr	r3, [pc, #176]	; (8004308 <_dtoa_r+0x650>)
 8004258:	ec41 0b18 	vmov	d8, r0, r1
 800425c:	2200      	movs	r2, #0
 800425e:	4630      	mov	r0, r6
 8004260:	4639      	mov	r1, r7
 8004262:	f7fc f9c9 	bl	80005f8 <__aeabi_dmul>
 8004266:	4606      	mov	r6, r0
 8004268:	460f      	mov	r7, r1
 800426a:	e7c4      	b.n	80041f6 <_dtoa_r+0x53e>
 800426c:	ec51 0b17 	vmov	r0, r1, d7
 8004270:	f7fc f9c2 	bl	80005f8 <__aeabi_dmul>
 8004274:	9b02      	ldr	r3, [sp, #8]
 8004276:	9d00      	ldr	r5, [sp, #0]
 8004278:	930c      	str	r3, [sp, #48]	; 0x30
 800427a:	ec41 0b18 	vmov	d8, r0, r1
 800427e:	4639      	mov	r1, r7
 8004280:	4630      	mov	r0, r6
 8004282:	f7fc fc69 	bl	8000b58 <__aeabi_d2iz>
 8004286:	9011      	str	r0, [sp, #68]	; 0x44
 8004288:	f7fc f94c 	bl	8000524 <__aeabi_i2d>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	4630      	mov	r0, r6
 8004292:	4639      	mov	r1, r7
 8004294:	f7fb fff8 	bl	8000288 <__aeabi_dsub>
 8004298:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800429a:	3330      	adds	r3, #48	; 0x30
 800429c:	f805 3b01 	strb.w	r3, [r5], #1
 80042a0:	9b02      	ldr	r3, [sp, #8]
 80042a2:	429d      	cmp	r5, r3
 80042a4:	4606      	mov	r6, r0
 80042a6:	460f      	mov	r7, r1
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	d134      	bne.n	8004318 <_dtoa_r+0x660>
 80042ae:	4b19      	ldr	r3, [pc, #100]	; (8004314 <_dtoa_r+0x65c>)
 80042b0:	ec51 0b18 	vmov	r0, r1, d8
 80042b4:	f7fb ffea 	bl	800028c <__adddf3>
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	4630      	mov	r0, r6
 80042be:	4639      	mov	r1, r7
 80042c0:	f7fc fc2a 	bl	8000b18 <__aeabi_dcmpgt>
 80042c4:	2800      	cmp	r0, #0
 80042c6:	d175      	bne.n	80043b4 <_dtoa_r+0x6fc>
 80042c8:	ec53 2b18 	vmov	r2, r3, d8
 80042cc:	4911      	ldr	r1, [pc, #68]	; (8004314 <_dtoa_r+0x65c>)
 80042ce:	2000      	movs	r0, #0
 80042d0:	f7fb ffda 	bl	8000288 <__aeabi_dsub>
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	4630      	mov	r0, r6
 80042da:	4639      	mov	r1, r7
 80042dc:	f7fc fbfe 	bl	8000adc <__aeabi_dcmplt>
 80042e0:	2800      	cmp	r0, #0
 80042e2:	f43f af27 	beq.w	8004134 <_dtoa_r+0x47c>
 80042e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80042e8:	1e6b      	subs	r3, r5, #1
 80042ea:	930c      	str	r3, [sp, #48]	; 0x30
 80042ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80042f0:	2b30      	cmp	r3, #48	; 0x30
 80042f2:	d0f8      	beq.n	80042e6 <_dtoa_r+0x62e>
 80042f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80042f8:	e04a      	b.n	8004390 <_dtoa_r+0x6d8>
 80042fa:	bf00      	nop
 80042fc:	08005d80 	.word	0x08005d80
 8004300:	08005d58 	.word	0x08005d58
 8004304:	3ff00000 	.word	0x3ff00000
 8004308:	40240000 	.word	0x40240000
 800430c:	401c0000 	.word	0x401c0000
 8004310:	40140000 	.word	0x40140000
 8004314:	3fe00000 	.word	0x3fe00000
 8004318:	4baf      	ldr	r3, [pc, #700]	; (80045d8 <_dtoa_r+0x920>)
 800431a:	f7fc f96d 	bl	80005f8 <__aeabi_dmul>
 800431e:	4606      	mov	r6, r0
 8004320:	460f      	mov	r7, r1
 8004322:	e7ac      	b.n	800427e <_dtoa_r+0x5c6>
 8004324:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004328:	9d00      	ldr	r5, [sp, #0]
 800432a:	4642      	mov	r2, r8
 800432c:	464b      	mov	r3, r9
 800432e:	4630      	mov	r0, r6
 8004330:	4639      	mov	r1, r7
 8004332:	f7fc fa8b 	bl	800084c <__aeabi_ddiv>
 8004336:	f7fc fc0f 	bl	8000b58 <__aeabi_d2iz>
 800433a:	9002      	str	r0, [sp, #8]
 800433c:	f7fc f8f2 	bl	8000524 <__aeabi_i2d>
 8004340:	4642      	mov	r2, r8
 8004342:	464b      	mov	r3, r9
 8004344:	f7fc f958 	bl	80005f8 <__aeabi_dmul>
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	4630      	mov	r0, r6
 800434e:	4639      	mov	r1, r7
 8004350:	f7fb ff9a 	bl	8000288 <__aeabi_dsub>
 8004354:	9e02      	ldr	r6, [sp, #8]
 8004356:	9f01      	ldr	r7, [sp, #4]
 8004358:	3630      	adds	r6, #48	; 0x30
 800435a:	f805 6b01 	strb.w	r6, [r5], #1
 800435e:	9e00      	ldr	r6, [sp, #0]
 8004360:	1bae      	subs	r6, r5, r6
 8004362:	42b7      	cmp	r7, r6
 8004364:	4602      	mov	r2, r0
 8004366:	460b      	mov	r3, r1
 8004368:	d137      	bne.n	80043da <_dtoa_r+0x722>
 800436a:	f7fb ff8f 	bl	800028c <__adddf3>
 800436e:	4642      	mov	r2, r8
 8004370:	464b      	mov	r3, r9
 8004372:	4606      	mov	r6, r0
 8004374:	460f      	mov	r7, r1
 8004376:	f7fc fbcf 	bl	8000b18 <__aeabi_dcmpgt>
 800437a:	b9c8      	cbnz	r0, 80043b0 <_dtoa_r+0x6f8>
 800437c:	4642      	mov	r2, r8
 800437e:	464b      	mov	r3, r9
 8004380:	4630      	mov	r0, r6
 8004382:	4639      	mov	r1, r7
 8004384:	f7fc fba0 	bl	8000ac8 <__aeabi_dcmpeq>
 8004388:	b110      	cbz	r0, 8004390 <_dtoa_r+0x6d8>
 800438a:	9b02      	ldr	r3, [sp, #8]
 800438c:	07d9      	lsls	r1, r3, #31
 800438e:	d40f      	bmi.n	80043b0 <_dtoa_r+0x6f8>
 8004390:	4620      	mov	r0, r4
 8004392:	4659      	mov	r1, fp
 8004394:	f000 fcf6 	bl	8004d84 <_Bfree>
 8004398:	2300      	movs	r3, #0
 800439a:	702b      	strb	r3, [r5, #0]
 800439c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800439e:	f10a 0001 	add.w	r0, sl, #1
 80043a2:	6018      	str	r0, [r3, #0]
 80043a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f43f acd8 	beq.w	8003d5c <_dtoa_r+0xa4>
 80043ac:	601d      	str	r5, [r3, #0]
 80043ae:	e4d5      	b.n	8003d5c <_dtoa_r+0xa4>
 80043b0:	f8cd a01c 	str.w	sl, [sp, #28]
 80043b4:	462b      	mov	r3, r5
 80043b6:	461d      	mov	r5, r3
 80043b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80043bc:	2a39      	cmp	r2, #57	; 0x39
 80043be:	d108      	bne.n	80043d2 <_dtoa_r+0x71a>
 80043c0:	9a00      	ldr	r2, [sp, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d1f7      	bne.n	80043b6 <_dtoa_r+0x6fe>
 80043c6:	9a07      	ldr	r2, [sp, #28]
 80043c8:	9900      	ldr	r1, [sp, #0]
 80043ca:	3201      	adds	r2, #1
 80043cc:	9207      	str	r2, [sp, #28]
 80043ce:	2230      	movs	r2, #48	; 0x30
 80043d0:	700a      	strb	r2, [r1, #0]
 80043d2:	781a      	ldrb	r2, [r3, #0]
 80043d4:	3201      	adds	r2, #1
 80043d6:	701a      	strb	r2, [r3, #0]
 80043d8:	e78c      	b.n	80042f4 <_dtoa_r+0x63c>
 80043da:	4b7f      	ldr	r3, [pc, #508]	; (80045d8 <_dtoa_r+0x920>)
 80043dc:	2200      	movs	r2, #0
 80043de:	f7fc f90b 	bl	80005f8 <__aeabi_dmul>
 80043e2:	2200      	movs	r2, #0
 80043e4:	2300      	movs	r3, #0
 80043e6:	4606      	mov	r6, r0
 80043e8:	460f      	mov	r7, r1
 80043ea:	f7fc fb6d 	bl	8000ac8 <__aeabi_dcmpeq>
 80043ee:	2800      	cmp	r0, #0
 80043f0:	d09b      	beq.n	800432a <_dtoa_r+0x672>
 80043f2:	e7cd      	b.n	8004390 <_dtoa_r+0x6d8>
 80043f4:	9a08      	ldr	r2, [sp, #32]
 80043f6:	2a00      	cmp	r2, #0
 80043f8:	f000 80c4 	beq.w	8004584 <_dtoa_r+0x8cc>
 80043fc:	9a05      	ldr	r2, [sp, #20]
 80043fe:	2a01      	cmp	r2, #1
 8004400:	f300 80a8 	bgt.w	8004554 <_dtoa_r+0x89c>
 8004404:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004406:	2a00      	cmp	r2, #0
 8004408:	f000 80a0 	beq.w	800454c <_dtoa_r+0x894>
 800440c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004410:	9e06      	ldr	r6, [sp, #24]
 8004412:	4645      	mov	r5, r8
 8004414:	9a04      	ldr	r2, [sp, #16]
 8004416:	2101      	movs	r1, #1
 8004418:	441a      	add	r2, r3
 800441a:	4620      	mov	r0, r4
 800441c:	4498      	add	r8, r3
 800441e:	9204      	str	r2, [sp, #16]
 8004420:	f000 fd6c 	bl	8004efc <__i2b>
 8004424:	4607      	mov	r7, r0
 8004426:	2d00      	cmp	r5, #0
 8004428:	dd0b      	ble.n	8004442 <_dtoa_r+0x78a>
 800442a:	9b04      	ldr	r3, [sp, #16]
 800442c:	2b00      	cmp	r3, #0
 800442e:	dd08      	ble.n	8004442 <_dtoa_r+0x78a>
 8004430:	42ab      	cmp	r3, r5
 8004432:	9a04      	ldr	r2, [sp, #16]
 8004434:	bfa8      	it	ge
 8004436:	462b      	movge	r3, r5
 8004438:	eba8 0803 	sub.w	r8, r8, r3
 800443c:	1aed      	subs	r5, r5, r3
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	9304      	str	r3, [sp, #16]
 8004442:	9b06      	ldr	r3, [sp, #24]
 8004444:	b1fb      	cbz	r3, 8004486 <_dtoa_r+0x7ce>
 8004446:	9b08      	ldr	r3, [sp, #32]
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 809f 	beq.w	800458c <_dtoa_r+0x8d4>
 800444e:	2e00      	cmp	r6, #0
 8004450:	dd11      	ble.n	8004476 <_dtoa_r+0x7be>
 8004452:	4639      	mov	r1, r7
 8004454:	4632      	mov	r2, r6
 8004456:	4620      	mov	r0, r4
 8004458:	f000 fe0c 	bl	8005074 <__pow5mult>
 800445c:	465a      	mov	r2, fp
 800445e:	4601      	mov	r1, r0
 8004460:	4607      	mov	r7, r0
 8004462:	4620      	mov	r0, r4
 8004464:	f000 fd60 	bl	8004f28 <__multiply>
 8004468:	4659      	mov	r1, fp
 800446a:	9007      	str	r0, [sp, #28]
 800446c:	4620      	mov	r0, r4
 800446e:	f000 fc89 	bl	8004d84 <_Bfree>
 8004472:	9b07      	ldr	r3, [sp, #28]
 8004474:	469b      	mov	fp, r3
 8004476:	9b06      	ldr	r3, [sp, #24]
 8004478:	1b9a      	subs	r2, r3, r6
 800447a:	d004      	beq.n	8004486 <_dtoa_r+0x7ce>
 800447c:	4659      	mov	r1, fp
 800447e:	4620      	mov	r0, r4
 8004480:	f000 fdf8 	bl	8005074 <__pow5mult>
 8004484:	4683      	mov	fp, r0
 8004486:	2101      	movs	r1, #1
 8004488:	4620      	mov	r0, r4
 800448a:	f000 fd37 	bl	8004efc <__i2b>
 800448e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004490:	2b00      	cmp	r3, #0
 8004492:	4606      	mov	r6, r0
 8004494:	dd7c      	ble.n	8004590 <_dtoa_r+0x8d8>
 8004496:	461a      	mov	r2, r3
 8004498:	4601      	mov	r1, r0
 800449a:	4620      	mov	r0, r4
 800449c:	f000 fdea 	bl	8005074 <__pow5mult>
 80044a0:	9b05      	ldr	r3, [sp, #20]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	4606      	mov	r6, r0
 80044a6:	dd76      	ble.n	8004596 <_dtoa_r+0x8de>
 80044a8:	2300      	movs	r3, #0
 80044aa:	9306      	str	r3, [sp, #24]
 80044ac:	6933      	ldr	r3, [r6, #16]
 80044ae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80044b2:	6918      	ldr	r0, [r3, #16]
 80044b4:	f000 fcd2 	bl	8004e5c <__hi0bits>
 80044b8:	f1c0 0020 	rsb	r0, r0, #32
 80044bc:	9b04      	ldr	r3, [sp, #16]
 80044be:	4418      	add	r0, r3
 80044c0:	f010 001f 	ands.w	r0, r0, #31
 80044c4:	f000 8086 	beq.w	80045d4 <_dtoa_r+0x91c>
 80044c8:	f1c0 0320 	rsb	r3, r0, #32
 80044cc:	2b04      	cmp	r3, #4
 80044ce:	dd7f      	ble.n	80045d0 <_dtoa_r+0x918>
 80044d0:	f1c0 001c 	rsb	r0, r0, #28
 80044d4:	9b04      	ldr	r3, [sp, #16]
 80044d6:	4403      	add	r3, r0
 80044d8:	4480      	add	r8, r0
 80044da:	4405      	add	r5, r0
 80044dc:	9304      	str	r3, [sp, #16]
 80044de:	f1b8 0f00 	cmp.w	r8, #0
 80044e2:	dd05      	ble.n	80044f0 <_dtoa_r+0x838>
 80044e4:	4659      	mov	r1, fp
 80044e6:	4642      	mov	r2, r8
 80044e8:	4620      	mov	r0, r4
 80044ea:	f000 fe1d 	bl	8005128 <__lshift>
 80044ee:	4683      	mov	fp, r0
 80044f0:	9b04      	ldr	r3, [sp, #16]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	dd05      	ble.n	8004502 <_dtoa_r+0x84a>
 80044f6:	4631      	mov	r1, r6
 80044f8:	461a      	mov	r2, r3
 80044fa:	4620      	mov	r0, r4
 80044fc:	f000 fe14 	bl	8005128 <__lshift>
 8004500:	4606      	mov	r6, r0
 8004502:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004504:	2b00      	cmp	r3, #0
 8004506:	d069      	beq.n	80045dc <_dtoa_r+0x924>
 8004508:	4631      	mov	r1, r6
 800450a:	4658      	mov	r0, fp
 800450c:	f000 fe78 	bl	8005200 <__mcmp>
 8004510:	2800      	cmp	r0, #0
 8004512:	da63      	bge.n	80045dc <_dtoa_r+0x924>
 8004514:	2300      	movs	r3, #0
 8004516:	4659      	mov	r1, fp
 8004518:	220a      	movs	r2, #10
 800451a:	4620      	mov	r0, r4
 800451c:	f000 fc54 	bl	8004dc8 <__multadd>
 8004520:	9b08      	ldr	r3, [sp, #32]
 8004522:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004526:	4683      	mov	fp, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 818f 	beq.w	800484c <_dtoa_r+0xb94>
 800452e:	4639      	mov	r1, r7
 8004530:	2300      	movs	r3, #0
 8004532:	220a      	movs	r2, #10
 8004534:	4620      	mov	r0, r4
 8004536:	f000 fc47 	bl	8004dc8 <__multadd>
 800453a:	f1b9 0f00 	cmp.w	r9, #0
 800453e:	4607      	mov	r7, r0
 8004540:	f300 808e 	bgt.w	8004660 <_dtoa_r+0x9a8>
 8004544:	9b05      	ldr	r3, [sp, #20]
 8004546:	2b02      	cmp	r3, #2
 8004548:	dc50      	bgt.n	80045ec <_dtoa_r+0x934>
 800454a:	e089      	b.n	8004660 <_dtoa_r+0x9a8>
 800454c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800454e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004552:	e75d      	b.n	8004410 <_dtoa_r+0x758>
 8004554:	9b01      	ldr	r3, [sp, #4]
 8004556:	1e5e      	subs	r6, r3, #1
 8004558:	9b06      	ldr	r3, [sp, #24]
 800455a:	42b3      	cmp	r3, r6
 800455c:	bfbf      	itttt	lt
 800455e:	9b06      	ldrlt	r3, [sp, #24]
 8004560:	9606      	strlt	r6, [sp, #24]
 8004562:	1af2      	sublt	r2, r6, r3
 8004564:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8004566:	bfb6      	itet	lt
 8004568:	189b      	addlt	r3, r3, r2
 800456a:	1b9e      	subge	r6, r3, r6
 800456c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800456e:	9b01      	ldr	r3, [sp, #4]
 8004570:	bfb8      	it	lt
 8004572:	2600      	movlt	r6, #0
 8004574:	2b00      	cmp	r3, #0
 8004576:	bfb5      	itete	lt
 8004578:	eba8 0503 	sublt.w	r5, r8, r3
 800457c:	9b01      	ldrge	r3, [sp, #4]
 800457e:	2300      	movlt	r3, #0
 8004580:	4645      	movge	r5, r8
 8004582:	e747      	b.n	8004414 <_dtoa_r+0x75c>
 8004584:	9e06      	ldr	r6, [sp, #24]
 8004586:	9f08      	ldr	r7, [sp, #32]
 8004588:	4645      	mov	r5, r8
 800458a:	e74c      	b.n	8004426 <_dtoa_r+0x76e>
 800458c:	9a06      	ldr	r2, [sp, #24]
 800458e:	e775      	b.n	800447c <_dtoa_r+0x7c4>
 8004590:	9b05      	ldr	r3, [sp, #20]
 8004592:	2b01      	cmp	r3, #1
 8004594:	dc18      	bgt.n	80045c8 <_dtoa_r+0x910>
 8004596:	9b02      	ldr	r3, [sp, #8]
 8004598:	b9b3      	cbnz	r3, 80045c8 <_dtoa_r+0x910>
 800459a:	9b03      	ldr	r3, [sp, #12]
 800459c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045a0:	b9a3      	cbnz	r3, 80045cc <_dtoa_r+0x914>
 80045a2:	9b03      	ldr	r3, [sp, #12]
 80045a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045a8:	0d1b      	lsrs	r3, r3, #20
 80045aa:	051b      	lsls	r3, r3, #20
 80045ac:	b12b      	cbz	r3, 80045ba <_dtoa_r+0x902>
 80045ae:	9b04      	ldr	r3, [sp, #16]
 80045b0:	3301      	adds	r3, #1
 80045b2:	9304      	str	r3, [sp, #16]
 80045b4:	f108 0801 	add.w	r8, r8, #1
 80045b8:	2301      	movs	r3, #1
 80045ba:	9306      	str	r3, [sp, #24]
 80045bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f47f af74 	bne.w	80044ac <_dtoa_r+0x7f4>
 80045c4:	2001      	movs	r0, #1
 80045c6:	e779      	b.n	80044bc <_dtoa_r+0x804>
 80045c8:	2300      	movs	r3, #0
 80045ca:	e7f6      	b.n	80045ba <_dtoa_r+0x902>
 80045cc:	9b02      	ldr	r3, [sp, #8]
 80045ce:	e7f4      	b.n	80045ba <_dtoa_r+0x902>
 80045d0:	d085      	beq.n	80044de <_dtoa_r+0x826>
 80045d2:	4618      	mov	r0, r3
 80045d4:	301c      	adds	r0, #28
 80045d6:	e77d      	b.n	80044d4 <_dtoa_r+0x81c>
 80045d8:	40240000 	.word	0x40240000
 80045dc:	9b01      	ldr	r3, [sp, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	dc38      	bgt.n	8004654 <_dtoa_r+0x99c>
 80045e2:	9b05      	ldr	r3, [sp, #20]
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	dd35      	ble.n	8004654 <_dtoa_r+0x99c>
 80045e8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80045ec:	f1b9 0f00 	cmp.w	r9, #0
 80045f0:	d10d      	bne.n	800460e <_dtoa_r+0x956>
 80045f2:	4631      	mov	r1, r6
 80045f4:	464b      	mov	r3, r9
 80045f6:	2205      	movs	r2, #5
 80045f8:	4620      	mov	r0, r4
 80045fa:	f000 fbe5 	bl	8004dc8 <__multadd>
 80045fe:	4601      	mov	r1, r0
 8004600:	4606      	mov	r6, r0
 8004602:	4658      	mov	r0, fp
 8004604:	f000 fdfc 	bl	8005200 <__mcmp>
 8004608:	2800      	cmp	r0, #0
 800460a:	f73f adbd 	bgt.w	8004188 <_dtoa_r+0x4d0>
 800460e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004610:	9d00      	ldr	r5, [sp, #0]
 8004612:	ea6f 0a03 	mvn.w	sl, r3
 8004616:	f04f 0800 	mov.w	r8, #0
 800461a:	4631      	mov	r1, r6
 800461c:	4620      	mov	r0, r4
 800461e:	f000 fbb1 	bl	8004d84 <_Bfree>
 8004622:	2f00      	cmp	r7, #0
 8004624:	f43f aeb4 	beq.w	8004390 <_dtoa_r+0x6d8>
 8004628:	f1b8 0f00 	cmp.w	r8, #0
 800462c:	d005      	beq.n	800463a <_dtoa_r+0x982>
 800462e:	45b8      	cmp	r8, r7
 8004630:	d003      	beq.n	800463a <_dtoa_r+0x982>
 8004632:	4641      	mov	r1, r8
 8004634:	4620      	mov	r0, r4
 8004636:	f000 fba5 	bl	8004d84 <_Bfree>
 800463a:	4639      	mov	r1, r7
 800463c:	4620      	mov	r0, r4
 800463e:	f000 fba1 	bl	8004d84 <_Bfree>
 8004642:	e6a5      	b.n	8004390 <_dtoa_r+0x6d8>
 8004644:	2600      	movs	r6, #0
 8004646:	4637      	mov	r7, r6
 8004648:	e7e1      	b.n	800460e <_dtoa_r+0x956>
 800464a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800464c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004650:	4637      	mov	r7, r6
 8004652:	e599      	b.n	8004188 <_dtoa_r+0x4d0>
 8004654:	9b08      	ldr	r3, [sp, #32]
 8004656:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 80fd 	beq.w	800485a <_dtoa_r+0xba2>
 8004660:	2d00      	cmp	r5, #0
 8004662:	dd05      	ble.n	8004670 <_dtoa_r+0x9b8>
 8004664:	4639      	mov	r1, r7
 8004666:	462a      	mov	r2, r5
 8004668:	4620      	mov	r0, r4
 800466a:	f000 fd5d 	bl	8005128 <__lshift>
 800466e:	4607      	mov	r7, r0
 8004670:	9b06      	ldr	r3, [sp, #24]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d05c      	beq.n	8004730 <_dtoa_r+0xa78>
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	4620      	mov	r0, r4
 800467a:	f000 fb43 	bl	8004d04 <_Balloc>
 800467e:	4605      	mov	r5, r0
 8004680:	b928      	cbnz	r0, 800468e <_dtoa_r+0x9d6>
 8004682:	4b80      	ldr	r3, [pc, #512]	; (8004884 <_dtoa_r+0xbcc>)
 8004684:	4602      	mov	r2, r0
 8004686:	f240 21ea 	movw	r1, #746	; 0x2ea
 800468a:	f7ff bb2e 	b.w	8003cea <_dtoa_r+0x32>
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	3202      	adds	r2, #2
 8004692:	0092      	lsls	r2, r2, #2
 8004694:	f107 010c 	add.w	r1, r7, #12
 8004698:	300c      	adds	r0, #12
 800469a:	f000 fb25 	bl	8004ce8 <memcpy>
 800469e:	2201      	movs	r2, #1
 80046a0:	4629      	mov	r1, r5
 80046a2:	4620      	mov	r0, r4
 80046a4:	f000 fd40 	bl	8005128 <__lshift>
 80046a8:	9b00      	ldr	r3, [sp, #0]
 80046aa:	3301      	adds	r3, #1
 80046ac:	9301      	str	r3, [sp, #4]
 80046ae:	9b00      	ldr	r3, [sp, #0]
 80046b0:	444b      	add	r3, r9
 80046b2:	9307      	str	r3, [sp, #28]
 80046b4:	9b02      	ldr	r3, [sp, #8]
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	46b8      	mov	r8, r7
 80046bc:	9306      	str	r3, [sp, #24]
 80046be:	4607      	mov	r7, r0
 80046c0:	9b01      	ldr	r3, [sp, #4]
 80046c2:	4631      	mov	r1, r6
 80046c4:	3b01      	subs	r3, #1
 80046c6:	4658      	mov	r0, fp
 80046c8:	9302      	str	r3, [sp, #8]
 80046ca:	f7ff fa69 	bl	8003ba0 <quorem>
 80046ce:	4603      	mov	r3, r0
 80046d0:	3330      	adds	r3, #48	; 0x30
 80046d2:	9004      	str	r0, [sp, #16]
 80046d4:	4641      	mov	r1, r8
 80046d6:	4658      	mov	r0, fp
 80046d8:	9308      	str	r3, [sp, #32]
 80046da:	f000 fd91 	bl	8005200 <__mcmp>
 80046de:	463a      	mov	r2, r7
 80046e0:	4681      	mov	r9, r0
 80046e2:	4631      	mov	r1, r6
 80046e4:	4620      	mov	r0, r4
 80046e6:	f000 fda7 	bl	8005238 <__mdiff>
 80046ea:	68c2      	ldr	r2, [r0, #12]
 80046ec:	9b08      	ldr	r3, [sp, #32]
 80046ee:	4605      	mov	r5, r0
 80046f0:	bb02      	cbnz	r2, 8004734 <_dtoa_r+0xa7c>
 80046f2:	4601      	mov	r1, r0
 80046f4:	4658      	mov	r0, fp
 80046f6:	f000 fd83 	bl	8005200 <__mcmp>
 80046fa:	9b08      	ldr	r3, [sp, #32]
 80046fc:	4602      	mov	r2, r0
 80046fe:	4629      	mov	r1, r5
 8004700:	4620      	mov	r0, r4
 8004702:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8004706:	f000 fb3d 	bl	8004d84 <_Bfree>
 800470a:	9b05      	ldr	r3, [sp, #20]
 800470c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800470e:	9d01      	ldr	r5, [sp, #4]
 8004710:	ea43 0102 	orr.w	r1, r3, r2
 8004714:	9b06      	ldr	r3, [sp, #24]
 8004716:	430b      	orrs	r3, r1
 8004718:	9b08      	ldr	r3, [sp, #32]
 800471a:	d10d      	bne.n	8004738 <_dtoa_r+0xa80>
 800471c:	2b39      	cmp	r3, #57	; 0x39
 800471e:	d029      	beq.n	8004774 <_dtoa_r+0xabc>
 8004720:	f1b9 0f00 	cmp.w	r9, #0
 8004724:	dd01      	ble.n	800472a <_dtoa_r+0xa72>
 8004726:	9b04      	ldr	r3, [sp, #16]
 8004728:	3331      	adds	r3, #49	; 0x31
 800472a:	9a02      	ldr	r2, [sp, #8]
 800472c:	7013      	strb	r3, [r2, #0]
 800472e:	e774      	b.n	800461a <_dtoa_r+0x962>
 8004730:	4638      	mov	r0, r7
 8004732:	e7b9      	b.n	80046a8 <_dtoa_r+0x9f0>
 8004734:	2201      	movs	r2, #1
 8004736:	e7e2      	b.n	80046fe <_dtoa_r+0xa46>
 8004738:	f1b9 0f00 	cmp.w	r9, #0
 800473c:	db06      	blt.n	800474c <_dtoa_r+0xa94>
 800473e:	9905      	ldr	r1, [sp, #20]
 8004740:	ea41 0909 	orr.w	r9, r1, r9
 8004744:	9906      	ldr	r1, [sp, #24]
 8004746:	ea59 0101 	orrs.w	r1, r9, r1
 800474a:	d120      	bne.n	800478e <_dtoa_r+0xad6>
 800474c:	2a00      	cmp	r2, #0
 800474e:	ddec      	ble.n	800472a <_dtoa_r+0xa72>
 8004750:	4659      	mov	r1, fp
 8004752:	2201      	movs	r2, #1
 8004754:	4620      	mov	r0, r4
 8004756:	9301      	str	r3, [sp, #4]
 8004758:	f000 fce6 	bl	8005128 <__lshift>
 800475c:	4631      	mov	r1, r6
 800475e:	4683      	mov	fp, r0
 8004760:	f000 fd4e 	bl	8005200 <__mcmp>
 8004764:	2800      	cmp	r0, #0
 8004766:	9b01      	ldr	r3, [sp, #4]
 8004768:	dc02      	bgt.n	8004770 <_dtoa_r+0xab8>
 800476a:	d1de      	bne.n	800472a <_dtoa_r+0xa72>
 800476c:	07da      	lsls	r2, r3, #31
 800476e:	d5dc      	bpl.n	800472a <_dtoa_r+0xa72>
 8004770:	2b39      	cmp	r3, #57	; 0x39
 8004772:	d1d8      	bne.n	8004726 <_dtoa_r+0xa6e>
 8004774:	9a02      	ldr	r2, [sp, #8]
 8004776:	2339      	movs	r3, #57	; 0x39
 8004778:	7013      	strb	r3, [r2, #0]
 800477a:	462b      	mov	r3, r5
 800477c:	461d      	mov	r5, r3
 800477e:	3b01      	subs	r3, #1
 8004780:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004784:	2a39      	cmp	r2, #57	; 0x39
 8004786:	d050      	beq.n	800482a <_dtoa_r+0xb72>
 8004788:	3201      	adds	r2, #1
 800478a:	701a      	strb	r2, [r3, #0]
 800478c:	e745      	b.n	800461a <_dtoa_r+0x962>
 800478e:	2a00      	cmp	r2, #0
 8004790:	dd03      	ble.n	800479a <_dtoa_r+0xae2>
 8004792:	2b39      	cmp	r3, #57	; 0x39
 8004794:	d0ee      	beq.n	8004774 <_dtoa_r+0xabc>
 8004796:	3301      	adds	r3, #1
 8004798:	e7c7      	b.n	800472a <_dtoa_r+0xa72>
 800479a:	9a01      	ldr	r2, [sp, #4]
 800479c:	9907      	ldr	r1, [sp, #28]
 800479e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80047a2:	428a      	cmp	r2, r1
 80047a4:	d02a      	beq.n	80047fc <_dtoa_r+0xb44>
 80047a6:	4659      	mov	r1, fp
 80047a8:	2300      	movs	r3, #0
 80047aa:	220a      	movs	r2, #10
 80047ac:	4620      	mov	r0, r4
 80047ae:	f000 fb0b 	bl	8004dc8 <__multadd>
 80047b2:	45b8      	cmp	r8, r7
 80047b4:	4683      	mov	fp, r0
 80047b6:	f04f 0300 	mov.w	r3, #0
 80047ba:	f04f 020a 	mov.w	r2, #10
 80047be:	4641      	mov	r1, r8
 80047c0:	4620      	mov	r0, r4
 80047c2:	d107      	bne.n	80047d4 <_dtoa_r+0xb1c>
 80047c4:	f000 fb00 	bl	8004dc8 <__multadd>
 80047c8:	4680      	mov	r8, r0
 80047ca:	4607      	mov	r7, r0
 80047cc:	9b01      	ldr	r3, [sp, #4]
 80047ce:	3301      	adds	r3, #1
 80047d0:	9301      	str	r3, [sp, #4]
 80047d2:	e775      	b.n	80046c0 <_dtoa_r+0xa08>
 80047d4:	f000 faf8 	bl	8004dc8 <__multadd>
 80047d8:	4639      	mov	r1, r7
 80047da:	4680      	mov	r8, r0
 80047dc:	2300      	movs	r3, #0
 80047de:	220a      	movs	r2, #10
 80047e0:	4620      	mov	r0, r4
 80047e2:	f000 faf1 	bl	8004dc8 <__multadd>
 80047e6:	4607      	mov	r7, r0
 80047e8:	e7f0      	b.n	80047cc <_dtoa_r+0xb14>
 80047ea:	f1b9 0f00 	cmp.w	r9, #0
 80047ee:	9a00      	ldr	r2, [sp, #0]
 80047f0:	bfcc      	ite	gt
 80047f2:	464d      	movgt	r5, r9
 80047f4:	2501      	movle	r5, #1
 80047f6:	4415      	add	r5, r2
 80047f8:	f04f 0800 	mov.w	r8, #0
 80047fc:	4659      	mov	r1, fp
 80047fe:	2201      	movs	r2, #1
 8004800:	4620      	mov	r0, r4
 8004802:	9301      	str	r3, [sp, #4]
 8004804:	f000 fc90 	bl	8005128 <__lshift>
 8004808:	4631      	mov	r1, r6
 800480a:	4683      	mov	fp, r0
 800480c:	f000 fcf8 	bl	8005200 <__mcmp>
 8004810:	2800      	cmp	r0, #0
 8004812:	dcb2      	bgt.n	800477a <_dtoa_r+0xac2>
 8004814:	d102      	bne.n	800481c <_dtoa_r+0xb64>
 8004816:	9b01      	ldr	r3, [sp, #4]
 8004818:	07db      	lsls	r3, r3, #31
 800481a:	d4ae      	bmi.n	800477a <_dtoa_r+0xac2>
 800481c:	462b      	mov	r3, r5
 800481e:	461d      	mov	r5, r3
 8004820:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004824:	2a30      	cmp	r2, #48	; 0x30
 8004826:	d0fa      	beq.n	800481e <_dtoa_r+0xb66>
 8004828:	e6f7      	b.n	800461a <_dtoa_r+0x962>
 800482a:	9a00      	ldr	r2, [sp, #0]
 800482c:	429a      	cmp	r2, r3
 800482e:	d1a5      	bne.n	800477c <_dtoa_r+0xac4>
 8004830:	f10a 0a01 	add.w	sl, sl, #1
 8004834:	2331      	movs	r3, #49	; 0x31
 8004836:	e779      	b.n	800472c <_dtoa_r+0xa74>
 8004838:	4b13      	ldr	r3, [pc, #76]	; (8004888 <_dtoa_r+0xbd0>)
 800483a:	f7ff baaf 	b.w	8003d9c <_dtoa_r+0xe4>
 800483e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004840:	2b00      	cmp	r3, #0
 8004842:	f47f aa86 	bne.w	8003d52 <_dtoa_r+0x9a>
 8004846:	4b11      	ldr	r3, [pc, #68]	; (800488c <_dtoa_r+0xbd4>)
 8004848:	f7ff baa8 	b.w	8003d9c <_dtoa_r+0xe4>
 800484c:	f1b9 0f00 	cmp.w	r9, #0
 8004850:	dc03      	bgt.n	800485a <_dtoa_r+0xba2>
 8004852:	9b05      	ldr	r3, [sp, #20]
 8004854:	2b02      	cmp	r3, #2
 8004856:	f73f aec9 	bgt.w	80045ec <_dtoa_r+0x934>
 800485a:	9d00      	ldr	r5, [sp, #0]
 800485c:	4631      	mov	r1, r6
 800485e:	4658      	mov	r0, fp
 8004860:	f7ff f99e 	bl	8003ba0 <quorem>
 8004864:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004868:	f805 3b01 	strb.w	r3, [r5], #1
 800486c:	9a00      	ldr	r2, [sp, #0]
 800486e:	1aaa      	subs	r2, r5, r2
 8004870:	4591      	cmp	r9, r2
 8004872:	ddba      	ble.n	80047ea <_dtoa_r+0xb32>
 8004874:	4659      	mov	r1, fp
 8004876:	2300      	movs	r3, #0
 8004878:	220a      	movs	r2, #10
 800487a:	4620      	mov	r0, r4
 800487c:	f000 faa4 	bl	8004dc8 <__multadd>
 8004880:	4683      	mov	fp, r0
 8004882:	e7eb      	b.n	800485c <_dtoa_r+0xba4>
 8004884:	08005c83 	.word	0x08005c83
 8004888:	08005bdc 	.word	0x08005bdc
 800488c:	08005c00 	.word	0x08005c00

08004890 <__sflush_r>:
 8004890:	898a      	ldrh	r2, [r1, #12]
 8004892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004896:	4605      	mov	r5, r0
 8004898:	0710      	lsls	r0, r2, #28
 800489a:	460c      	mov	r4, r1
 800489c:	d458      	bmi.n	8004950 <__sflush_r+0xc0>
 800489e:	684b      	ldr	r3, [r1, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	dc05      	bgt.n	80048b0 <__sflush_r+0x20>
 80048a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	dc02      	bgt.n	80048b0 <__sflush_r+0x20>
 80048aa:	2000      	movs	r0, #0
 80048ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048b2:	2e00      	cmp	r6, #0
 80048b4:	d0f9      	beq.n	80048aa <__sflush_r+0x1a>
 80048b6:	2300      	movs	r3, #0
 80048b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048bc:	682f      	ldr	r7, [r5, #0]
 80048be:	602b      	str	r3, [r5, #0]
 80048c0:	d032      	beq.n	8004928 <__sflush_r+0x98>
 80048c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048c4:	89a3      	ldrh	r3, [r4, #12]
 80048c6:	075a      	lsls	r2, r3, #29
 80048c8:	d505      	bpl.n	80048d6 <__sflush_r+0x46>
 80048ca:	6863      	ldr	r3, [r4, #4]
 80048cc:	1ac0      	subs	r0, r0, r3
 80048ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048d0:	b10b      	cbz	r3, 80048d6 <__sflush_r+0x46>
 80048d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048d4:	1ac0      	subs	r0, r0, r3
 80048d6:	2300      	movs	r3, #0
 80048d8:	4602      	mov	r2, r0
 80048da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048dc:	6a21      	ldr	r1, [r4, #32]
 80048de:	4628      	mov	r0, r5
 80048e0:	47b0      	blx	r6
 80048e2:	1c43      	adds	r3, r0, #1
 80048e4:	89a3      	ldrh	r3, [r4, #12]
 80048e6:	d106      	bne.n	80048f6 <__sflush_r+0x66>
 80048e8:	6829      	ldr	r1, [r5, #0]
 80048ea:	291d      	cmp	r1, #29
 80048ec:	d82c      	bhi.n	8004948 <__sflush_r+0xb8>
 80048ee:	4a2a      	ldr	r2, [pc, #168]	; (8004998 <__sflush_r+0x108>)
 80048f0:	40ca      	lsrs	r2, r1
 80048f2:	07d6      	lsls	r6, r2, #31
 80048f4:	d528      	bpl.n	8004948 <__sflush_r+0xb8>
 80048f6:	2200      	movs	r2, #0
 80048f8:	6062      	str	r2, [r4, #4]
 80048fa:	04d9      	lsls	r1, r3, #19
 80048fc:	6922      	ldr	r2, [r4, #16]
 80048fe:	6022      	str	r2, [r4, #0]
 8004900:	d504      	bpl.n	800490c <__sflush_r+0x7c>
 8004902:	1c42      	adds	r2, r0, #1
 8004904:	d101      	bne.n	800490a <__sflush_r+0x7a>
 8004906:	682b      	ldr	r3, [r5, #0]
 8004908:	b903      	cbnz	r3, 800490c <__sflush_r+0x7c>
 800490a:	6560      	str	r0, [r4, #84]	; 0x54
 800490c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800490e:	602f      	str	r7, [r5, #0]
 8004910:	2900      	cmp	r1, #0
 8004912:	d0ca      	beq.n	80048aa <__sflush_r+0x1a>
 8004914:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004918:	4299      	cmp	r1, r3
 800491a:	d002      	beq.n	8004922 <__sflush_r+0x92>
 800491c:	4628      	mov	r0, r5
 800491e:	f000 fd7f 	bl	8005420 <_free_r>
 8004922:	2000      	movs	r0, #0
 8004924:	6360      	str	r0, [r4, #52]	; 0x34
 8004926:	e7c1      	b.n	80048ac <__sflush_r+0x1c>
 8004928:	6a21      	ldr	r1, [r4, #32]
 800492a:	2301      	movs	r3, #1
 800492c:	4628      	mov	r0, r5
 800492e:	47b0      	blx	r6
 8004930:	1c41      	adds	r1, r0, #1
 8004932:	d1c7      	bne.n	80048c4 <__sflush_r+0x34>
 8004934:	682b      	ldr	r3, [r5, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0c4      	beq.n	80048c4 <__sflush_r+0x34>
 800493a:	2b1d      	cmp	r3, #29
 800493c:	d001      	beq.n	8004942 <__sflush_r+0xb2>
 800493e:	2b16      	cmp	r3, #22
 8004940:	d101      	bne.n	8004946 <__sflush_r+0xb6>
 8004942:	602f      	str	r7, [r5, #0]
 8004944:	e7b1      	b.n	80048aa <__sflush_r+0x1a>
 8004946:	89a3      	ldrh	r3, [r4, #12]
 8004948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800494c:	81a3      	strh	r3, [r4, #12]
 800494e:	e7ad      	b.n	80048ac <__sflush_r+0x1c>
 8004950:	690f      	ldr	r7, [r1, #16]
 8004952:	2f00      	cmp	r7, #0
 8004954:	d0a9      	beq.n	80048aa <__sflush_r+0x1a>
 8004956:	0793      	lsls	r3, r2, #30
 8004958:	680e      	ldr	r6, [r1, #0]
 800495a:	bf08      	it	eq
 800495c:	694b      	ldreq	r3, [r1, #20]
 800495e:	600f      	str	r7, [r1, #0]
 8004960:	bf18      	it	ne
 8004962:	2300      	movne	r3, #0
 8004964:	eba6 0807 	sub.w	r8, r6, r7
 8004968:	608b      	str	r3, [r1, #8]
 800496a:	f1b8 0f00 	cmp.w	r8, #0
 800496e:	dd9c      	ble.n	80048aa <__sflush_r+0x1a>
 8004970:	6a21      	ldr	r1, [r4, #32]
 8004972:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004974:	4643      	mov	r3, r8
 8004976:	463a      	mov	r2, r7
 8004978:	4628      	mov	r0, r5
 800497a:	47b0      	blx	r6
 800497c:	2800      	cmp	r0, #0
 800497e:	dc06      	bgt.n	800498e <__sflush_r+0xfe>
 8004980:	89a3      	ldrh	r3, [r4, #12]
 8004982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004986:	81a3      	strh	r3, [r4, #12]
 8004988:	f04f 30ff 	mov.w	r0, #4294967295
 800498c:	e78e      	b.n	80048ac <__sflush_r+0x1c>
 800498e:	4407      	add	r7, r0
 8004990:	eba8 0800 	sub.w	r8, r8, r0
 8004994:	e7e9      	b.n	800496a <__sflush_r+0xda>
 8004996:	bf00      	nop
 8004998:	20400001 	.word	0x20400001

0800499c <_fflush_r>:
 800499c:	b538      	push	{r3, r4, r5, lr}
 800499e:	690b      	ldr	r3, [r1, #16]
 80049a0:	4605      	mov	r5, r0
 80049a2:	460c      	mov	r4, r1
 80049a4:	b913      	cbnz	r3, 80049ac <_fflush_r+0x10>
 80049a6:	2500      	movs	r5, #0
 80049a8:	4628      	mov	r0, r5
 80049aa:	bd38      	pop	{r3, r4, r5, pc}
 80049ac:	b118      	cbz	r0, 80049b6 <_fflush_r+0x1a>
 80049ae:	6983      	ldr	r3, [r0, #24]
 80049b0:	b90b      	cbnz	r3, 80049b6 <_fflush_r+0x1a>
 80049b2:	f000 f887 	bl	8004ac4 <__sinit>
 80049b6:	4b14      	ldr	r3, [pc, #80]	; (8004a08 <_fflush_r+0x6c>)
 80049b8:	429c      	cmp	r4, r3
 80049ba:	d11b      	bne.n	80049f4 <_fflush_r+0x58>
 80049bc:	686c      	ldr	r4, [r5, #4]
 80049be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d0ef      	beq.n	80049a6 <_fflush_r+0xa>
 80049c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049c8:	07d0      	lsls	r0, r2, #31
 80049ca:	d404      	bmi.n	80049d6 <_fflush_r+0x3a>
 80049cc:	0599      	lsls	r1, r3, #22
 80049ce:	d402      	bmi.n	80049d6 <_fflush_r+0x3a>
 80049d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049d2:	f000 f91a 	bl	8004c0a <__retarget_lock_acquire_recursive>
 80049d6:	4628      	mov	r0, r5
 80049d8:	4621      	mov	r1, r4
 80049da:	f7ff ff59 	bl	8004890 <__sflush_r>
 80049de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049e0:	07da      	lsls	r2, r3, #31
 80049e2:	4605      	mov	r5, r0
 80049e4:	d4e0      	bmi.n	80049a8 <_fflush_r+0xc>
 80049e6:	89a3      	ldrh	r3, [r4, #12]
 80049e8:	059b      	lsls	r3, r3, #22
 80049ea:	d4dd      	bmi.n	80049a8 <_fflush_r+0xc>
 80049ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049ee:	f000 f90d 	bl	8004c0c <__retarget_lock_release_recursive>
 80049f2:	e7d9      	b.n	80049a8 <_fflush_r+0xc>
 80049f4:	4b05      	ldr	r3, [pc, #20]	; (8004a0c <_fflush_r+0x70>)
 80049f6:	429c      	cmp	r4, r3
 80049f8:	d101      	bne.n	80049fe <_fflush_r+0x62>
 80049fa:	68ac      	ldr	r4, [r5, #8]
 80049fc:	e7df      	b.n	80049be <_fflush_r+0x22>
 80049fe:	4b04      	ldr	r3, [pc, #16]	; (8004a10 <_fflush_r+0x74>)
 8004a00:	429c      	cmp	r4, r3
 8004a02:	bf08      	it	eq
 8004a04:	68ec      	ldreq	r4, [r5, #12]
 8004a06:	e7da      	b.n	80049be <_fflush_r+0x22>
 8004a08:	08005cb4 	.word	0x08005cb4
 8004a0c:	08005cd4 	.word	0x08005cd4
 8004a10:	08005c94 	.word	0x08005c94

08004a14 <std>:
 8004a14:	2300      	movs	r3, #0
 8004a16:	b510      	push	{r4, lr}
 8004a18:	4604      	mov	r4, r0
 8004a1a:	e9c0 3300 	strd	r3, r3, [r0]
 8004a1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a22:	6083      	str	r3, [r0, #8]
 8004a24:	8181      	strh	r1, [r0, #12]
 8004a26:	6643      	str	r3, [r0, #100]	; 0x64
 8004a28:	81c2      	strh	r2, [r0, #14]
 8004a2a:	6183      	str	r3, [r0, #24]
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	2208      	movs	r2, #8
 8004a30:	305c      	adds	r0, #92	; 0x5c
 8004a32:	f7fe faf5 	bl	8003020 <memset>
 8004a36:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <std+0x38>)
 8004a38:	6263      	str	r3, [r4, #36]	; 0x24
 8004a3a:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <std+0x3c>)
 8004a3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a3e:	4b05      	ldr	r3, [pc, #20]	; (8004a54 <std+0x40>)
 8004a40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a42:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <std+0x44>)
 8004a44:	6224      	str	r4, [r4, #32]
 8004a46:	6323      	str	r3, [r4, #48]	; 0x30
 8004a48:	bd10      	pop	{r4, pc}
 8004a4a:	bf00      	nop
 8004a4c:	08005849 	.word	0x08005849
 8004a50:	0800586b 	.word	0x0800586b
 8004a54:	080058a3 	.word	0x080058a3
 8004a58:	080058c7 	.word	0x080058c7

08004a5c <_cleanup_r>:
 8004a5c:	4901      	ldr	r1, [pc, #4]	; (8004a64 <_cleanup_r+0x8>)
 8004a5e:	f000 b8af 	b.w	8004bc0 <_fwalk_reent>
 8004a62:	bf00      	nop
 8004a64:	0800499d 	.word	0x0800499d

08004a68 <__sfmoreglue>:
 8004a68:	b570      	push	{r4, r5, r6, lr}
 8004a6a:	1e4a      	subs	r2, r1, #1
 8004a6c:	2568      	movs	r5, #104	; 0x68
 8004a6e:	4355      	muls	r5, r2
 8004a70:	460e      	mov	r6, r1
 8004a72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a76:	f000 fd23 	bl	80054c0 <_malloc_r>
 8004a7a:	4604      	mov	r4, r0
 8004a7c:	b140      	cbz	r0, 8004a90 <__sfmoreglue+0x28>
 8004a7e:	2100      	movs	r1, #0
 8004a80:	e9c0 1600 	strd	r1, r6, [r0]
 8004a84:	300c      	adds	r0, #12
 8004a86:	60a0      	str	r0, [r4, #8]
 8004a88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a8c:	f7fe fac8 	bl	8003020 <memset>
 8004a90:	4620      	mov	r0, r4
 8004a92:	bd70      	pop	{r4, r5, r6, pc}

08004a94 <__sfp_lock_acquire>:
 8004a94:	4801      	ldr	r0, [pc, #4]	; (8004a9c <__sfp_lock_acquire+0x8>)
 8004a96:	f000 b8b8 	b.w	8004c0a <__retarget_lock_acquire_recursive>
 8004a9a:	bf00      	nop
 8004a9c:	20000288 	.word	0x20000288

08004aa0 <__sfp_lock_release>:
 8004aa0:	4801      	ldr	r0, [pc, #4]	; (8004aa8 <__sfp_lock_release+0x8>)
 8004aa2:	f000 b8b3 	b.w	8004c0c <__retarget_lock_release_recursive>
 8004aa6:	bf00      	nop
 8004aa8:	20000288 	.word	0x20000288

08004aac <__sinit_lock_acquire>:
 8004aac:	4801      	ldr	r0, [pc, #4]	; (8004ab4 <__sinit_lock_acquire+0x8>)
 8004aae:	f000 b8ac 	b.w	8004c0a <__retarget_lock_acquire_recursive>
 8004ab2:	bf00      	nop
 8004ab4:	20000283 	.word	0x20000283

08004ab8 <__sinit_lock_release>:
 8004ab8:	4801      	ldr	r0, [pc, #4]	; (8004ac0 <__sinit_lock_release+0x8>)
 8004aba:	f000 b8a7 	b.w	8004c0c <__retarget_lock_release_recursive>
 8004abe:	bf00      	nop
 8004ac0:	20000283 	.word	0x20000283

08004ac4 <__sinit>:
 8004ac4:	b510      	push	{r4, lr}
 8004ac6:	4604      	mov	r4, r0
 8004ac8:	f7ff fff0 	bl	8004aac <__sinit_lock_acquire>
 8004acc:	69a3      	ldr	r3, [r4, #24]
 8004ace:	b11b      	cbz	r3, 8004ad8 <__sinit+0x14>
 8004ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ad4:	f7ff bff0 	b.w	8004ab8 <__sinit_lock_release>
 8004ad8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004adc:	6523      	str	r3, [r4, #80]	; 0x50
 8004ade:	4b13      	ldr	r3, [pc, #76]	; (8004b2c <__sinit+0x68>)
 8004ae0:	4a13      	ldr	r2, [pc, #76]	; (8004b30 <__sinit+0x6c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	62a2      	str	r2, [r4, #40]	; 0x28
 8004ae6:	42a3      	cmp	r3, r4
 8004ae8:	bf04      	itt	eq
 8004aea:	2301      	moveq	r3, #1
 8004aec:	61a3      	streq	r3, [r4, #24]
 8004aee:	4620      	mov	r0, r4
 8004af0:	f000 f820 	bl	8004b34 <__sfp>
 8004af4:	6060      	str	r0, [r4, #4]
 8004af6:	4620      	mov	r0, r4
 8004af8:	f000 f81c 	bl	8004b34 <__sfp>
 8004afc:	60a0      	str	r0, [r4, #8]
 8004afe:	4620      	mov	r0, r4
 8004b00:	f000 f818 	bl	8004b34 <__sfp>
 8004b04:	2200      	movs	r2, #0
 8004b06:	60e0      	str	r0, [r4, #12]
 8004b08:	2104      	movs	r1, #4
 8004b0a:	6860      	ldr	r0, [r4, #4]
 8004b0c:	f7ff ff82 	bl	8004a14 <std>
 8004b10:	68a0      	ldr	r0, [r4, #8]
 8004b12:	2201      	movs	r2, #1
 8004b14:	2109      	movs	r1, #9
 8004b16:	f7ff ff7d 	bl	8004a14 <std>
 8004b1a:	68e0      	ldr	r0, [r4, #12]
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	2112      	movs	r1, #18
 8004b20:	f7ff ff78 	bl	8004a14 <std>
 8004b24:	2301      	movs	r3, #1
 8004b26:	61a3      	str	r3, [r4, #24]
 8004b28:	e7d2      	b.n	8004ad0 <__sinit+0xc>
 8004b2a:	bf00      	nop
 8004b2c:	08005bc8 	.word	0x08005bc8
 8004b30:	08004a5d 	.word	0x08004a5d

08004b34 <__sfp>:
 8004b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b36:	4607      	mov	r7, r0
 8004b38:	f7ff ffac 	bl	8004a94 <__sfp_lock_acquire>
 8004b3c:	4b1e      	ldr	r3, [pc, #120]	; (8004bb8 <__sfp+0x84>)
 8004b3e:	681e      	ldr	r6, [r3, #0]
 8004b40:	69b3      	ldr	r3, [r6, #24]
 8004b42:	b913      	cbnz	r3, 8004b4a <__sfp+0x16>
 8004b44:	4630      	mov	r0, r6
 8004b46:	f7ff ffbd 	bl	8004ac4 <__sinit>
 8004b4a:	3648      	adds	r6, #72	; 0x48
 8004b4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b50:	3b01      	subs	r3, #1
 8004b52:	d503      	bpl.n	8004b5c <__sfp+0x28>
 8004b54:	6833      	ldr	r3, [r6, #0]
 8004b56:	b30b      	cbz	r3, 8004b9c <__sfp+0x68>
 8004b58:	6836      	ldr	r6, [r6, #0]
 8004b5a:	e7f7      	b.n	8004b4c <__sfp+0x18>
 8004b5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b60:	b9d5      	cbnz	r5, 8004b98 <__sfp+0x64>
 8004b62:	4b16      	ldr	r3, [pc, #88]	; (8004bbc <__sfp+0x88>)
 8004b64:	60e3      	str	r3, [r4, #12]
 8004b66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b6a:	6665      	str	r5, [r4, #100]	; 0x64
 8004b6c:	f000 f84c 	bl	8004c08 <__retarget_lock_init_recursive>
 8004b70:	f7ff ff96 	bl	8004aa0 <__sfp_lock_release>
 8004b74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b7c:	6025      	str	r5, [r4, #0]
 8004b7e:	61a5      	str	r5, [r4, #24]
 8004b80:	2208      	movs	r2, #8
 8004b82:	4629      	mov	r1, r5
 8004b84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b88:	f7fe fa4a 	bl	8003020 <memset>
 8004b8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b94:	4620      	mov	r0, r4
 8004b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b98:	3468      	adds	r4, #104	; 0x68
 8004b9a:	e7d9      	b.n	8004b50 <__sfp+0x1c>
 8004b9c:	2104      	movs	r1, #4
 8004b9e:	4638      	mov	r0, r7
 8004ba0:	f7ff ff62 	bl	8004a68 <__sfmoreglue>
 8004ba4:	4604      	mov	r4, r0
 8004ba6:	6030      	str	r0, [r6, #0]
 8004ba8:	2800      	cmp	r0, #0
 8004baa:	d1d5      	bne.n	8004b58 <__sfp+0x24>
 8004bac:	f7ff ff78 	bl	8004aa0 <__sfp_lock_release>
 8004bb0:	230c      	movs	r3, #12
 8004bb2:	603b      	str	r3, [r7, #0]
 8004bb4:	e7ee      	b.n	8004b94 <__sfp+0x60>
 8004bb6:	bf00      	nop
 8004bb8:	08005bc8 	.word	0x08005bc8
 8004bbc:	ffff0001 	.word	0xffff0001

08004bc0 <_fwalk_reent>:
 8004bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bc4:	4606      	mov	r6, r0
 8004bc6:	4688      	mov	r8, r1
 8004bc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004bcc:	2700      	movs	r7, #0
 8004bce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bd2:	f1b9 0901 	subs.w	r9, r9, #1
 8004bd6:	d505      	bpl.n	8004be4 <_fwalk_reent+0x24>
 8004bd8:	6824      	ldr	r4, [r4, #0]
 8004bda:	2c00      	cmp	r4, #0
 8004bdc:	d1f7      	bne.n	8004bce <_fwalk_reent+0xe>
 8004bde:	4638      	mov	r0, r7
 8004be0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004be4:	89ab      	ldrh	r3, [r5, #12]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d907      	bls.n	8004bfa <_fwalk_reent+0x3a>
 8004bea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	d003      	beq.n	8004bfa <_fwalk_reent+0x3a>
 8004bf2:	4629      	mov	r1, r5
 8004bf4:	4630      	mov	r0, r6
 8004bf6:	47c0      	blx	r8
 8004bf8:	4307      	orrs	r7, r0
 8004bfa:	3568      	adds	r5, #104	; 0x68
 8004bfc:	e7e9      	b.n	8004bd2 <_fwalk_reent+0x12>
	...

08004c00 <_localeconv_r>:
 8004c00:	4800      	ldr	r0, [pc, #0]	; (8004c04 <_localeconv_r+0x4>)
 8004c02:	4770      	bx	lr
 8004c04:	2000016c 	.word	0x2000016c

08004c08 <__retarget_lock_init_recursive>:
 8004c08:	4770      	bx	lr

08004c0a <__retarget_lock_acquire_recursive>:
 8004c0a:	4770      	bx	lr

08004c0c <__retarget_lock_release_recursive>:
 8004c0c:	4770      	bx	lr

08004c0e <__swhatbuf_r>:
 8004c0e:	b570      	push	{r4, r5, r6, lr}
 8004c10:	460e      	mov	r6, r1
 8004c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c16:	2900      	cmp	r1, #0
 8004c18:	b096      	sub	sp, #88	; 0x58
 8004c1a:	4614      	mov	r4, r2
 8004c1c:	461d      	mov	r5, r3
 8004c1e:	da07      	bge.n	8004c30 <__swhatbuf_r+0x22>
 8004c20:	2300      	movs	r3, #0
 8004c22:	602b      	str	r3, [r5, #0]
 8004c24:	89b3      	ldrh	r3, [r6, #12]
 8004c26:	061a      	lsls	r2, r3, #24
 8004c28:	d410      	bmi.n	8004c4c <__swhatbuf_r+0x3e>
 8004c2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c2e:	e00e      	b.n	8004c4e <__swhatbuf_r+0x40>
 8004c30:	466a      	mov	r2, sp
 8004c32:	f000 fe9f 	bl	8005974 <_fstat_r>
 8004c36:	2800      	cmp	r0, #0
 8004c38:	dbf2      	blt.n	8004c20 <__swhatbuf_r+0x12>
 8004c3a:	9a01      	ldr	r2, [sp, #4]
 8004c3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c44:	425a      	negs	r2, r3
 8004c46:	415a      	adcs	r2, r3
 8004c48:	602a      	str	r2, [r5, #0]
 8004c4a:	e7ee      	b.n	8004c2a <__swhatbuf_r+0x1c>
 8004c4c:	2340      	movs	r3, #64	; 0x40
 8004c4e:	2000      	movs	r0, #0
 8004c50:	6023      	str	r3, [r4, #0]
 8004c52:	b016      	add	sp, #88	; 0x58
 8004c54:	bd70      	pop	{r4, r5, r6, pc}
	...

08004c58 <__smakebuf_r>:
 8004c58:	898b      	ldrh	r3, [r1, #12]
 8004c5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c5c:	079d      	lsls	r5, r3, #30
 8004c5e:	4606      	mov	r6, r0
 8004c60:	460c      	mov	r4, r1
 8004c62:	d507      	bpl.n	8004c74 <__smakebuf_r+0x1c>
 8004c64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c68:	6023      	str	r3, [r4, #0]
 8004c6a:	6123      	str	r3, [r4, #16]
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	6163      	str	r3, [r4, #20]
 8004c70:	b002      	add	sp, #8
 8004c72:	bd70      	pop	{r4, r5, r6, pc}
 8004c74:	ab01      	add	r3, sp, #4
 8004c76:	466a      	mov	r2, sp
 8004c78:	f7ff ffc9 	bl	8004c0e <__swhatbuf_r>
 8004c7c:	9900      	ldr	r1, [sp, #0]
 8004c7e:	4605      	mov	r5, r0
 8004c80:	4630      	mov	r0, r6
 8004c82:	f000 fc1d 	bl	80054c0 <_malloc_r>
 8004c86:	b948      	cbnz	r0, 8004c9c <__smakebuf_r+0x44>
 8004c88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c8c:	059a      	lsls	r2, r3, #22
 8004c8e:	d4ef      	bmi.n	8004c70 <__smakebuf_r+0x18>
 8004c90:	f023 0303 	bic.w	r3, r3, #3
 8004c94:	f043 0302 	orr.w	r3, r3, #2
 8004c98:	81a3      	strh	r3, [r4, #12]
 8004c9a:	e7e3      	b.n	8004c64 <__smakebuf_r+0xc>
 8004c9c:	4b0d      	ldr	r3, [pc, #52]	; (8004cd4 <__smakebuf_r+0x7c>)
 8004c9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004ca0:	89a3      	ldrh	r3, [r4, #12]
 8004ca2:	6020      	str	r0, [r4, #0]
 8004ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca8:	81a3      	strh	r3, [r4, #12]
 8004caa:	9b00      	ldr	r3, [sp, #0]
 8004cac:	6163      	str	r3, [r4, #20]
 8004cae:	9b01      	ldr	r3, [sp, #4]
 8004cb0:	6120      	str	r0, [r4, #16]
 8004cb2:	b15b      	cbz	r3, 8004ccc <__smakebuf_r+0x74>
 8004cb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cb8:	4630      	mov	r0, r6
 8004cba:	f000 fe6d 	bl	8005998 <_isatty_r>
 8004cbe:	b128      	cbz	r0, 8004ccc <__smakebuf_r+0x74>
 8004cc0:	89a3      	ldrh	r3, [r4, #12]
 8004cc2:	f023 0303 	bic.w	r3, r3, #3
 8004cc6:	f043 0301 	orr.w	r3, r3, #1
 8004cca:	81a3      	strh	r3, [r4, #12]
 8004ccc:	89a0      	ldrh	r0, [r4, #12]
 8004cce:	4305      	orrs	r5, r0
 8004cd0:	81a5      	strh	r5, [r4, #12]
 8004cd2:	e7cd      	b.n	8004c70 <__smakebuf_r+0x18>
 8004cd4:	08004a5d 	.word	0x08004a5d

08004cd8 <malloc>:
 8004cd8:	4b02      	ldr	r3, [pc, #8]	; (8004ce4 <malloc+0xc>)
 8004cda:	4601      	mov	r1, r0
 8004cdc:	6818      	ldr	r0, [r3, #0]
 8004cde:	f000 bbef 	b.w	80054c0 <_malloc_r>
 8004ce2:	bf00      	nop
 8004ce4:	20000018 	.word	0x20000018

08004ce8 <memcpy>:
 8004ce8:	440a      	add	r2, r1
 8004cea:	4291      	cmp	r1, r2
 8004cec:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cf0:	d100      	bne.n	8004cf4 <memcpy+0xc>
 8004cf2:	4770      	bx	lr
 8004cf4:	b510      	push	{r4, lr}
 8004cf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cfe:	4291      	cmp	r1, r2
 8004d00:	d1f9      	bne.n	8004cf6 <memcpy+0xe>
 8004d02:	bd10      	pop	{r4, pc}

08004d04 <_Balloc>:
 8004d04:	b570      	push	{r4, r5, r6, lr}
 8004d06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004d08:	4604      	mov	r4, r0
 8004d0a:	460d      	mov	r5, r1
 8004d0c:	b976      	cbnz	r6, 8004d2c <_Balloc+0x28>
 8004d0e:	2010      	movs	r0, #16
 8004d10:	f7ff ffe2 	bl	8004cd8 <malloc>
 8004d14:	4602      	mov	r2, r0
 8004d16:	6260      	str	r0, [r4, #36]	; 0x24
 8004d18:	b920      	cbnz	r0, 8004d24 <_Balloc+0x20>
 8004d1a:	4b18      	ldr	r3, [pc, #96]	; (8004d7c <_Balloc+0x78>)
 8004d1c:	4818      	ldr	r0, [pc, #96]	; (8004d80 <_Balloc+0x7c>)
 8004d1e:	2166      	movs	r1, #102	; 0x66
 8004d20:	f000 fde8 	bl	80058f4 <__assert_func>
 8004d24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004d28:	6006      	str	r6, [r0, #0]
 8004d2a:	60c6      	str	r6, [r0, #12]
 8004d2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004d2e:	68f3      	ldr	r3, [r6, #12]
 8004d30:	b183      	cbz	r3, 8004d54 <_Balloc+0x50>
 8004d32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004d3a:	b9b8      	cbnz	r0, 8004d6c <_Balloc+0x68>
 8004d3c:	2101      	movs	r1, #1
 8004d3e:	fa01 f605 	lsl.w	r6, r1, r5
 8004d42:	1d72      	adds	r2, r6, #5
 8004d44:	0092      	lsls	r2, r2, #2
 8004d46:	4620      	mov	r0, r4
 8004d48:	f000 fb5a 	bl	8005400 <_calloc_r>
 8004d4c:	b160      	cbz	r0, 8004d68 <_Balloc+0x64>
 8004d4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004d52:	e00e      	b.n	8004d72 <_Balloc+0x6e>
 8004d54:	2221      	movs	r2, #33	; 0x21
 8004d56:	2104      	movs	r1, #4
 8004d58:	4620      	mov	r0, r4
 8004d5a:	f000 fb51 	bl	8005400 <_calloc_r>
 8004d5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d60:	60f0      	str	r0, [r6, #12]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1e4      	bne.n	8004d32 <_Balloc+0x2e>
 8004d68:	2000      	movs	r0, #0
 8004d6a:	bd70      	pop	{r4, r5, r6, pc}
 8004d6c:	6802      	ldr	r2, [r0, #0]
 8004d6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004d72:	2300      	movs	r3, #0
 8004d74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004d78:	e7f7      	b.n	8004d6a <_Balloc+0x66>
 8004d7a:	bf00      	nop
 8004d7c:	08005c0d 	.word	0x08005c0d
 8004d80:	08005cf4 	.word	0x08005cf4

08004d84 <_Bfree>:
 8004d84:	b570      	push	{r4, r5, r6, lr}
 8004d86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004d88:	4605      	mov	r5, r0
 8004d8a:	460c      	mov	r4, r1
 8004d8c:	b976      	cbnz	r6, 8004dac <_Bfree+0x28>
 8004d8e:	2010      	movs	r0, #16
 8004d90:	f7ff ffa2 	bl	8004cd8 <malloc>
 8004d94:	4602      	mov	r2, r0
 8004d96:	6268      	str	r0, [r5, #36]	; 0x24
 8004d98:	b920      	cbnz	r0, 8004da4 <_Bfree+0x20>
 8004d9a:	4b09      	ldr	r3, [pc, #36]	; (8004dc0 <_Bfree+0x3c>)
 8004d9c:	4809      	ldr	r0, [pc, #36]	; (8004dc4 <_Bfree+0x40>)
 8004d9e:	218a      	movs	r1, #138	; 0x8a
 8004da0:	f000 fda8 	bl	80058f4 <__assert_func>
 8004da4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004da8:	6006      	str	r6, [r0, #0]
 8004daa:	60c6      	str	r6, [r0, #12]
 8004dac:	b13c      	cbz	r4, 8004dbe <_Bfree+0x3a>
 8004dae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004db0:	6862      	ldr	r2, [r4, #4]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004db8:	6021      	str	r1, [r4, #0]
 8004dba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004dbe:	bd70      	pop	{r4, r5, r6, pc}
 8004dc0:	08005c0d 	.word	0x08005c0d
 8004dc4:	08005cf4 	.word	0x08005cf4

08004dc8 <__multadd>:
 8004dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dcc:	690e      	ldr	r6, [r1, #16]
 8004dce:	4607      	mov	r7, r0
 8004dd0:	4698      	mov	r8, r3
 8004dd2:	460c      	mov	r4, r1
 8004dd4:	f101 0014 	add.w	r0, r1, #20
 8004dd8:	2300      	movs	r3, #0
 8004dda:	6805      	ldr	r5, [r0, #0]
 8004ddc:	b2a9      	uxth	r1, r5
 8004dde:	fb02 8101 	mla	r1, r2, r1, r8
 8004de2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8004de6:	0c2d      	lsrs	r5, r5, #16
 8004de8:	fb02 c505 	mla	r5, r2, r5, ip
 8004dec:	b289      	uxth	r1, r1
 8004dee:	3301      	adds	r3, #1
 8004df0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004df4:	429e      	cmp	r6, r3
 8004df6:	f840 1b04 	str.w	r1, [r0], #4
 8004dfa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8004dfe:	dcec      	bgt.n	8004dda <__multadd+0x12>
 8004e00:	f1b8 0f00 	cmp.w	r8, #0
 8004e04:	d022      	beq.n	8004e4c <__multadd+0x84>
 8004e06:	68a3      	ldr	r3, [r4, #8]
 8004e08:	42b3      	cmp	r3, r6
 8004e0a:	dc19      	bgt.n	8004e40 <__multadd+0x78>
 8004e0c:	6861      	ldr	r1, [r4, #4]
 8004e0e:	4638      	mov	r0, r7
 8004e10:	3101      	adds	r1, #1
 8004e12:	f7ff ff77 	bl	8004d04 <_Balloc>
 8004e16:	4605      	mov	r5, r0
 8004e18:	b928      	cbnz	r0, 8004e26 <__multadd+0x5e>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	4b0d      	ldr	r3, [pc, #52]	; (8004e54 <__multadd+0x8c>)
 8004e1e:	480e      	ldr	r0, [pc, #56]	; (8004e58 <__multadd+0x90>)
 8004e20:	21b5      	movs	r1, #181	; 0xb5
 8004e22:	f000 fd67 	bl	80058f4 <__assert_func>
 8004e26:	6922      	ldr	r2, [r4, #16]
 8004e28:	3202      	adds	r2, #2
 8004e2a:	f104 010c 	add.w	r1, r4, #12
 8004e2e:	0092      	lsls	r2, r2, #2
 8004e30:	300c      	adds	r0, #12
 8004e32:	f7ff ff59 	bl	8004ce8 <memcpy>
 8004e36:	4621      	mov	r1, r4
 8004e38:	4638      	mov	r0, r7
 8004e3a:	f7ff ffa3 	bl	8004d84 <_Bfree>
 8004e3e:	462c      	mov	r4, r5
 8004e40:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004e44:	3601      	adds	r6, #1
 8004e46:	f8c3 8014 	str.w	r8, [r3, #20]
 8004e4a:	6126      	str	r6, [r4, #16]
 8004e4c:	4620      	mov	r0, r4
 8004e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e52:	bf00      	nop
 8004e54:	08005c83 	.word	0x08005c83
 8004e58:	08005cf4 	.word	0x08005cf4

08004e5c <__hi0bits>:
 8004e5c:	0c03      	lsrs	r3, r0, #16
 8004e5e:	041b      	lsls	r3, r3, #16
 8004e60:	b9d3      	cbnz	r3, 8004e98 <__hi0bits+0x3c>
 8004e62:	0400      	lsls	r0, r0, #16
 8004e64:	2310      	movs	r3, #16
 8004e66:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004e6a:	bf04      	itt	eq
 8004e6c:	0200      	lsleq	r0, r0, #8
 8004e6e:	3308      	addeq	r3, #8
 8004e70:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004e74:	bf04      	itt	eq
 8004e76:	0100      	lsleq	r0, r0, #4
 8004e78:	3304      	addeq	r3, #4
 8004e7a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004e7e:	bf04      	itt	eq
 8004e80:	0080      	lsleq	r0, r0, #2
 8004e82:	3302      	addeq	r3, #2
 8004e84:	2800      	cmp	r0, #0
 8004e86:	db05      	blt.n	8004e94 <__hi0bits+0x38>
 8004e88:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004e8c:	f103 0301 	add.w	r3, r3, #1
 8004e90:	bf08      	it	eq
 8004e92:	2320      	moveq	r3, #32
 8004e94:	4618      	mov	r0, r3
 8004e96:	4770      	bx	lr
 8004e98:	2300      	movs	r3, #0
 8004e9a:	e7e4      	b.n	8004e66 <__hi0bits+0xa>

08004e9c <__lo0bits>:
 8004e9c:	6803      	ldr	r3, [r0, #0]
 8004e9e:	f013 0207 	ands.w	r2, r3, #7
 8004ea2:	4601      	mov	r1, r0
 8004ea4:	d00b      	beq.n	8004ebe <__lo0bits+0x22>
 8004ea6:	07da      	lsls	r2, r3, #31
 8004ea8:	d424      	bmi.n	8004ef4 <__lo0bits+0x58>
 8004eaa:	0798      	lsls	r0, r3, #30
 8004eac:	bf49      	itett	mi
 8004eae:	085b      	lsrmi	r3, r3, #1
 8004eb0:	089b      	lsrpl	r3, r3, #2
 8004eb2:	2001      	movmi	r0, #1
 8004eb4:	600b      	strmi	r3, [r1, #0]
 8004eb6:	bf5c      	itt	pl
 8004eb8:	600b      	strpl	r3, [r1, #0]
 8004eba:	2002      	movpl	r0, #2
 8004ebc:	4770      	bx	lr
 8004ebe:	b298      	uxth	r0, r3
 8004ec0:	b9b0      	cbnz	r0, 8004ef0 <__lo0bits+0x54>
 8004ec2:	0c1b      	lsrs	r3, r3, #16
 8004ec4:	2010      	movs	r0, #16
 8004ec6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004eca:	bf04      	itt	eq
 8004ecc:	0a1b      	lsreq	r3, r3, #8
 8004ece:	3008      	addeq	r0, #8
 8004ed0:	071a      	lsls	r2, r3, #28
 8004ed2:	bf04      	itt	eq
 8004ed4:	091b      	lsreq	r3, r3, #4
 8004ed6:	3004      	addeq	r0, #4
 8004ed8:	079a      	lsls	r2, r3, #30
 8004eda:	bf04      	itt	eq
 8004edc:	089b      	lsreq	r3, r3, #2
 8004ede:	3002      	addeq	r0, #2
 8004ee0:	07da      	lsls	r2, r3, #31
 8004ee2:	d403      	bmi.n	8004eec <__lo0bits+0x50>
 8004ee4:	085b      	lsrs	r3, r3, #1
 8004ee6:	f100 0001 	add.w	r0, r0, #1
 8004eea:	d005      	beq.n	8004ef8 <__lo0bits+0x5c>
 8004eec:	600b      	str	r3, [r1, #0]
 8004eee:	4770      	bx	lr
 8004ef0:	4610      	mov	r0, r2
 8004ef2:	e7e8      	b.n	8004ec6 <__lo0bits+0x2a>
 8004ef4:	2000      	movs	r0, #0
 8004ef6:	4770      	bx	lr
 8004ef8:	2020      	movs	r0, #32
 8004efa:	4770      	bx	lr

08004efc <__i2b>:
 8004efc:	b510      	push	{r4, lr}
 8004efe:	460c      	mov	r4, r1
 8004f00:	2101      	movs	r1, #1
 8004f02:	f7ff feff 	bl	8004d04 <_Balloc>
 8004f06:	4602      	mov	r2, r0
 8004f08:	b928      	cbnz	r0, 8004f16 <__i2b+0x1a>
 8004f0a:	4b05      	ldr	r3, [pc, #20]	; (8004f20 <__i2b+0x24>)
 8004f0c:	4805      	ldr	r0, [pc, #20]	; (8004f24 <__i2b+0x28>)
 8004f0e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004f12:	f000 fcef 	bl	80058f4 <__assert_func>
 8004f16:	2301      	movs	r3, #1
 8004f18:	6144      	str	r4, [r0, #20]
 8004f1a:	6103      	str	r3, [r0, #16]
 8004f1c:	bd10      	pop	{r4, pc}
 8004f1e:	bf00      	nop
 8004f20:	08005c83 	.word	0x08005c83
 8004f24:	08005cf4 	.word	0x08005cf4

08004f28 <__multiply>:
 8004f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f2c:	4614      	mov	r4, r2
 8004f2e:	690a      	ldr	r2, [r1, #16]
 8004f30:	6923      	ldr	r3, [r4, #16]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	bfb8      	it	lt
 8004f36:	460b      	movlt	r3, r1
 8004f38:	460d      	mov	r5, r1
 8004f3a:	bfbc      	itt	lt
 8004f3c:	4625      	movlt	r5, r4
 8004f3e:	461c      	movlt	r4, r3
 8004f40:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004f44:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004f48:	68ab      	ldr	r3, [r5, #8]
 8004f4a:	6869      	ldr	r1, [r5, #4]
 8004f4c:	eb0a 0709 	add.w	r7, sl, r9
 8004f50:	42bb      	cmp	r3, r7
 8004f52:	b085      	sub	sp, #20
 8004f54:	bfb8      	it	lt
 8004f56:	3101      	addlt	r1, #1
 8004f58:	f7ff fed4 	bl	8004d04 <_Balloc>
 8004f5c:	b930      	cbnz	r0, 8004f6c <__multiply+0x44>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	4b42      	ldr	r3, [pc, #264]	; (800506c <__multiply+0x144>)
 8004f62:	4843      	ldr	r0, [pc, #268]	; (8005070 <__multiply+0x148>)
 8004f64:	f240 115d 	movw	r1, #349	; 0x15d
 8004f68:	f000 fcc4 	bl	80058f4 <__assert_func>
 8004f6c:	f100 0614 	add.w	r6, r0, #20
 8004f70:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8004f74:	4633      	mov	r3, r6
 8004f76:	2200      	movs	r2, #0
 8004f78:	4543      	cmp	r3, r8
 8004f7a:	d31e      	bcc.n	8004fba <__multiply+0x92>
 8004f7c:	f105 0c14 	add.w	ip, r5, #20
 8004f80:	f104 0314 	add.w	r3, r4, #20
 8004f84:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004f88:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004f8c:	9202      	str	r2, [sp, #8]
 8004f8e:	ebac 0205 	sub.w	r2, ip, r5
 8004f92:	3a15      	subs	r2, #21
 8004f94:	f022 0203 	bic.w	r2, r2, #3
 8004f98:	3204      	adds	r2, #4
 8004f9a:	f105 0115 	add.w	r1, r5, #21
 8004f9e:	458c      	cmp	ip, r1
 8004fa0:	bf38      	it	cc
 8004fa2:	2204      	movcc	r2, #4
 8004fa4:	9201      	str	r2, [sp, #4]
 8004fa6:	9a02      	ldr	r2, [sp, #8]
 8004fa8:	9303      	str	r3, [sp, #12]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d808      	bhi.n	8004fc0 <__multiply+0x98>
 8004fae:	2f00      	cmp	r7, #0
 8004fb0:	dc55      	bgt.n	800505e <__multiply+0x136>
 8004fb2:	6107      	str	r7, [r0, #16]
 8004fb4:	b005      	add	sp, #20
 8004fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fba:	f843 2b04 	str.w	r2, [r3], #4
 8004fbe:	e7db      	b.n	8004f78 <__multiply+0x50>
 8004fc0:	f8b3 a000 	ldrh.w	sl, [r3]
 8004fc4:	f1ba 0f00 	cmp.w	sl, #0
 8004fc8:	d020      	beq.n	800500c <__multiply+0xe4>
 8004fca:	f105 0e14 	add.w	lr, r5, #20
 8004fce:	46b1      	mov	r9, r6
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004fd6:	f8d9 b000 	ldr.w	fp, [r9]
 8004fda:	b2a1      	uxth	r1, r4
 8004fdc:	fa1f fb8b 	uxth.w	fp, fp
 8004fe0:	fb0a b101 	mla	r1, sl, r1, fp
 8004fe4:	4411      	add	r1, r2
 8004fe6:	f8d9 2000 	ldr.w	r2, [r9]
 8004fea:	0c24      	lsrs	r4, r4, #16
 8004fec:	0c12      	lsrs	r2, r2, #16
 8004fee:	fb0a 2404 	mla	r4, sl, r4, r2
 8004ff2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8004ff6:	b289      	uxth	r1, r1
 8004ff8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004ffc:	45f4      	cmp	ip, lr
 8004ffe:	f849 1b04 	str.w	r1, [r9], #4
 8005002:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005006:	d8e4      	bhi.n	8004fd2 <__multiply+0xaa>
 8005008:	9901      	ldr	r1, [sp, #4]
 800500a:	5072      	str	r2, [r6, r1]
 800500c:	9a03      	ldr	r2, [sp, #12]
 800500e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005012:	3304      	adds	r3, #4
 8005014:	f1b9 0f00 	cmp.w	r9, #0
 8005018:	d01f      	beq.n	800505a <__multiply+0x132>
 800501a:	6834      	ldr	r4, [r6, #0]
 800501c:	f105 0114 	add.w	r1, r5, #20
 8005020:	46b6      	mov	lr, r6
 8005022:	f04f 0a00 	mov.w	sl, #0
 8005026:	880a      	ldrh	r2, [r1, #0]
 8005028:	f8be b002 	ldrh.w	fp, [lr, #2]
 800502c:	fb09 b202 	mla	r2, r9, r2, fp
 8005030:	4492      	add	sl, r2
 8005032:	b2a4      	uxth	r4, r4
 8005034:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005038:	f84e 4b04 	str.w	r4, [lr], #4
 800503c:	f851 4b04 	ldr.w	r4, [r1], #4
 8005040:	f8be 2000 	ldrh.w	r2, [lr]
 8005044:	0c24      	lsrs	r4, r4, #16
 8005046:	fb09 2404 	mla	r4, r9, r4, r2
 800504a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800504e:	458c      	cmp	ip, r1
 8005050:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005054:	d8e7      	bhi.n	8005026 <__multiply+0xfe>
 8005056:	9a01      	ldr	r2, [sp, #4]
 8005058:	50b4      	str	r4, [r6, r2]
 800505a:	3604      	adds	r6, #4
 800505c:	e7a3      	b.n	8004fa6 <__multiply+0x7e>
 800505e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1a5      	bne.n	8004fb2 <__multiply+0x8a>
 8005066:	3f01      	subs	r7, #1
 8005068:	e7a1      	b.n	8004fae <__multiply+0x86>
 800506a:	bf00      	nop
 800506c:	08005c83 	.word	0x08005c83
 8005070:	08005cf4 	.word	0x08005cf4

08005074 <__pow5mult>:
 8005074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005078:	4615      	mov	r5, r2
 800507a:	f012 0203 	ands.w	r2, r2, #3
 800507e:	4606      	mov	r6, r0
 8005080:	460f      	mov	r7, r1
 8005082:	d007      	beq.n	8005094 <__pow5mult+0x20>
 8005084:	4c25      	ldr	r4, [pc, #148]	; (800511c <__pow5mult+0xa8>)
 8005086:	3a01      	subs	r2, #1
 8005088:	2300      	movs	r3, #0
 800508a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800508e:	f7ff fe9b 	bl	8004dc8 <__multadd>
 8005092:	4607      	mov	r7, r0
 8005094:	10ad      	asrs	r5, r5, #2
 8005096:	d03d      	beq.n	8005114 <__pow5mult+0xa0>
 8005098:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800509a:	b97c      	cbnz	r4, 80050bc <__pow5mult+0x48>
 800509c:	2010      	movs	r0, #16
 800509e:	f7ff fe1b 	bl	8004cd8 <malloc>
 80050a2:	4602      	mov	r2, r0
 80050a4:	6270      	str	r0, [r6, #36]	; 0x24
 80050a6:	b928      	cbnz	r0, 80050b4 <__pow5mult+0x40>
 80050a8:	4b1d      	ldr	r3, [pc, #116]	; (8005120 <__pow5mult+0xac>)
 80050aa:	481e      	ldr	r0, [pc, #120]	; (8005124 <__pow5mult+0xb0>)
 80050ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80050b0:	f000 fc20 	bl	80058f4 <__assert_func>
 80050b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80050b8:	6004      	str	r4, [r0, #0]
 80050ba:	60c4      	str	r4, [r0, #12]
 80050bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80050c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80050c4:	b94c      	cbnz	r4, 80050da <__pow5mult+0x66>
 80050c6:	f240 2171 	movw	r1, #625	; 0x271
 80050ca:	4630      	mov	r0, r6
 80050cc:	f7ff ff16 	bl	8004efc <__i2b>
 80050d0:	2300      	movs	r3, #0
 80050d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80050d6:	4604      	mov	r4, r0
 80050d8:	6003      	str	r3, [r0, #0]
 80050da:	f04f 0900 	mov.w	r9, #0
 80050de:	07eb      	lsls	r3, r5, #31
 80050e0:	d50a      	bpl.n	80050f8 <__pow5mult+0x84>
 80050e2:	4639      	mov	r1, r7
 80050e4:	4622      	mov	r2, r4
 80050e6:	4630      	mov	r0, r6
 80050e8:	f7ff ff1e 	bl	8004f28 <__multiply>
 80050ec:	4639      	mov	r1, r7
 80050ee:	4680      	mov	r8, r0
 80050f0:	4630      	mov	r0, r6
 80050f2:	f7ff fe47 	bl	8004d84 <_Bfree>
 80050f6:	4647      	mov	r7, r8
 80050f8:	106d      	asrs	r5, r5, #1
 80050fa:	d00b      	beq.n	8005114 <__pow5mult+0xa0>
 80050fc:	6820      	ldr	r0, [r4, #0]
 80050fe:	b938      	cbnz	r0, 8005110 <__pow5mult+0x9c>
 8005100:	4622      	mov	r2, r4
 8005102:	4621      	mov	r1, r4
 8005104:	4630      	mov	r0, r6
 8005106:	f7ff ff0f 	bl	8004f28 <__multiply>
 800510a:	6020      	str	r0, [r4, #0]
 800510c:	f8c0 9000 	str.w	r9, [r0]
 8005110:	4604      	mov	r4, r0
 8005112:	e7e4      	b.n	80050de <__pow5mult+0x6a>
 8005114:	4638      	mov	r0, r7
 8005116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800511a:	bf00      	nop
 800511c:	08005e48 	.word	0x08005e48
 8005120:	08005c0d 	.word	0x08005c0d
 8005124:	08005cf4 	.word	0x08005cf4

08005128 <__lshift>:
 8005128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800512c:	460c      	mov	r4, r1
 800512e:	6849      	ldr	r1, [r1, #4]
 8005130:	6923      	ldr	r3, [r4, #16]
 8005132:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005136:	68a3      	ldr	r3, [r4, #8]
 8005138:	4607      	mov	r7, r0
 800513a:	4691      	mov	r9, r2
 800513c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005140:	f108 0601 	add.w	r6, r8, #1
 8005144:	42b3      	cmp	r3, r6
 8005146:	db0b      	blt.n	8005160 <__lshift+0x38>
 8005148:	4638      	mov	r0, r7
 800514a:	f7ff fddb 	bl	8004d04 <_Balloc>
 800514e:	4605      	mov	r5, r0
 8005150:	b948      	cbnz	r0, 8005166 <__lshift+0x3e>
 8005152:	4602      	mov	r2, r0
 8005154:	4b28      	ldr	r3, [pc, #160]	; (80051f8 <__lshift+0xd0>)
 8005156:	4829      	ldr	r0, [pc, #164]	; (80051fc <__lshift+0xd4>)
 8005158:	f240 11d9 	movw	r1, #473	; 0x1d9
 800515c:	f000 fbca 	bl	80058f4 <__assert_func>
 8005160:	3101      	adds	r1, #1
 8005162:	005b      	lsls	r3, r3, #1
 8005164:	e7ee      	b.n	8005144 <__lshift+0x1c>
 8005166:	2300      	movs	r3, #0
 8005168:	f100 0114 	add.w	r1, r0, #20
 800516c:	f100 0210 	add.w	r2, r0, #16
 8005170:	4618      	mov	r0, r3
 8005172:	4553      	cmp	r3, sl
 8005174:	db33      	blt.n	80051de <__lshift+0xb6>
 8005176:	6920      	ldr	r0, [r4, #16]
 8005178:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800517c:	f104 0314 	add.w	r3, r4, #20
 8005180:	f019 091f 	ands.w	r9, r9, #31
 8005184:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005188:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800518c:	d02b      	beq.n	80051e6 <__lshift+0xbe>
 800518e:	f1c9 0e20 	rsb	lr, r9, #32
 8005192:	468a      	mov	sl, r1
 8005194:	2200      	movs	r2, #0
 8005196:	6818      	ldr	r0, [r3, #0]
 8005198:	fa00 f009 	lsl.w	r0, r0, r9
 800519c:	4302      	orrs	r2, r0
 800519e:	f84a 2b04 	str.w	r2, [sl], #4
 80051a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80051a6:	459c      	cmp	ip, r3
 80051a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80051ac:	d8f3      	bhi.n	8005196 <__lshift+0x6e>
 80051ae:	ebac 0304 	sub.w	r3, ip, r4
 80051b2:	3b15      	subs	r3, #21
 80051b4:	f023 0303 	bic.w	r3, r3, #3
 80051b8:	3304      	adds	r3, #4
 80051ba:	f104 0015 	add.w	r0, r4, #21
 80051be:	4584      	cmp	ip, r0
 80051c0:	bf38      	it	cc
 80051c2:	2304      	movcc	r3, #4
 80051c4:	50ca      	str	r2, [r1, r3]
 80051c6:	b10a      	cbz	r2, 80051cc <__lshift+0xa4>
 80051c8:	f108 0602 	add.w	r6, r8, #2
 80051cc:	3e01      	subs	r6, #1
 80051ce:	4638      	mov	r0, r7
 80051d0:	612e      	str	r6, [r5, #16]
 80051d2:	4621      	mov	r1, r4
 80051d4:	f7ff fdd6 	bl	8004d84 <_Bfree>
 80051d8:	4628      	mov	r0, r5
 80051da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051de:	f842 0f04 	str.w	r0, [r2, #4]!
 80051e2:	3301      	adds	r3, #1
 80051e4:	e7c5      	b.n	8005172 <__lshift+0x4a>
 80051e6:	3904      	subs	r1, #4
 80051e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80051ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80051f0:	459c      	cmp	ip, r3
 80051f2:	d8f9      	bhi.n	80051e8 <__lshift+0xc0>
 80051f4:	e7ea      	b.n	80051cc <__lshift+0xa4>
 80051f6:	bf00      	nop
 80051f8:	08005c83 	.word	0x08005c83
 80051fc:	08005cf4 	.word	0x08005cf4

08005200 <__mcmp>:
 8005200:	b530      	push	{r4, r5, lr}
 8005202:	6902      	ldr	r2, [r0, #16]
 8005204:	690c      	ldr	r4, [r1, #16]
 8005206:	1b12      	subs	r2, r2, r4
 8005208:	d10e      	bne.n	8005228 <__mcmp+0x28>
 800520a:	f100 0314 	add.w	r3, r0, #20
 800520e:	3114      	adds	r1, #20
 8005210:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005214:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005218:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800521c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005220:	42a5      	cmp	r5, r4
 8005222:	d003      	beq.n	800522c <__mcmp+0x2c>
 8005224:	d305      	bcc.n	8005232 <__mcmp+0x32>
 8005226:	2201      	movs	r2, #1
 8005228:	4610      	mov	r0, r2
 800522a:	bd30      	pop	{r4, r5, pc}
 800522c:	4283      	cmp	r3, r0
 800522e:	d3f3      	bcc.n	8005218 <__mcmp+0x18>
 8005230:	e7fa      	b.n	8005228 <__mcmp+0x28>
 8005232:	f04f 32ff 	mov.w	r2, #4294967295
 8005236:	e7f7      	b.n	8005228 <__mcmp+0x28>

08005238 <__mdiff>:
 8005238:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800523c:	460c      	mov	r4, r1
 800523e:	4606      	mov	r6, r0
 8005240:	4611      	mov	r1, r2
 8005242:	4620      	mov	r0, r4
 8005244:	4617      	mov	r7, r2
 8005246:	f7ff ffdb 	bl	8005200 <__mcmp>
 800524a:	1e05      	subs	r5, r0, #0
 800524c:	d110      	bne.n	8005270 <__mdiff+0x38>
 800524e:	4629      	mov	r1, r5
 8005250:	4630      	mov	r0, r6
 8005252:	f7ff fd57 	bl	8004d04 <_Balloc>
 8005256:	b930      	cbnz	r0, 8005266 <__mdiff+0x2e>
 8005258:	4b39      	ldr	r3, [pc, #228]	; (8005340 <__mdiff+0x108>)
 800525a:	4602      	mov	r2, r0
 800525c:	f240 2132 	movw	r1, #562	; 0x232
 8005260:	4838      	ldr	r0, [pc, #224]	; (8005344 <__mdiff+0x10c>)
 8005262:	f000 fb47 	bl	80058f4 <__assert_func>
 8005266:	2301      	movs	r3, #1
 8005268:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800526c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005270:	bfa4      	itt	ge
 8005272:	463b      	movge	r3, r7
 8005274:	4627      	movge	r7, r4
 8005276:	4630      	mov	r0, r6
 8005278:	6879      	ldr	r1, [r7, #4]
 800527a:	bfa6      	itte	ge
 800527c:	461c      	movge	r4, r3
 800527e:	2500      	movge	r5, #0
 8005280:	2501      	movlt	r5, #1
 8005282:	f7ff fd3f 	bl	8004d04 <_Balloc>
 8005286:	b920      	cbnz	r0, 8005292 <__mdiff+0x5a>
 8005288:	4b2d      	ldr	r3, [pc, #180]	; (8005340 <__mdiff+0x108>)
 800528a:	4602      	mov	r2, r0
 800528c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005290:	e7e6      	b.n	8005260 <__mdiff+0x28>
 8005292:	693e      	ldr	r6, [r7, #16]
 8005294:	60c5      	str	r5, [r0, #12]
 8005296:	6925      	ldr	r5, [r4, #16]
 8005298:	f107 0114 	add.w	r1, r7, #20
 800529c:	f104 0914 	add.w	r9, r4, #20
 80052a0:	f100 0e14 	add.w	lr, r0, #20
 80052a4:	f107 0210 	add.w	r2, r7, #16
 80052a8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80052ac:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80052b0:	46f2      	mov	sl, lr
 80052b2:	2700      	movs	r7, #0
 80052b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80052b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80052bc:	fa1f f883 	uxth.w	r8, r3
 80052c0:	fa17 f78b 	uxtah	r7, r7, fp
 80052c4:	0c1b      	lsrs	r3, r3, #16
 80052c6:	eba7 0808 	sub.w	r8, r7, r8
 80052ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80052ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80052d2:	fa1f f888 	uxth.w	r8, r8
 80052d6:	141f      	asrs	r7, r3, #16
 80052d8:	454d      	cmp	r5, r9
 80052da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80052de:	f84a 3b04 	str.w	r3, [sl], #4
 80052e2:	d8e7      	bhi.n	80052b4 <__mdiff+0x7c>
 80052e4:	1b2b      	subs	r3, r5, r4
 80052e6:	3b15      	subs	r3, #21
 80052e8:	f023 0303 	bic.w	r3, r3, #3
 80052ec:	3304      	adds	r3, #4
 80052ee:	3415      	adds	r4, #21
 80052f0:	42a5      	cmp	r5, r4
 80052f2:	bf38      	it	cc
 80052f4:	2304      	movcc	r3, #4
 80052f6:	4419      	add	r1, r3
 80052f8:	4473      	add	r3, lr
 80052fa:	469e      	mov	lr, r3
 80052fc:	460d      	mov	r5, r1
 80052fe:	4565      	cmp	r5, ip
 8005300:	d30e      	bcc.n	8005320 <__mdiff+0xe8>
 8005302:	f10c 0203 	add.w	r2, ip, #3
 8005306:	1a52      	subs	r2, r2, r1
 8005308:	f022 0203 	bic.w	r2, r2, #3
 800530c:	3903      	subs	r1, #3
 800530e:	458c      	cmp	ip, r1
 8005310:	bf38      	it	cc
 8005312:	2200      	movcc	r2, #0
 8005314:	441a      	add	r2, r3
 8005316:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800531a:	b17b      	cbz	r3, 800533c <__mdiff+0x104>
 800531c:	6106      	str	r6, [r0, #16]
 800531e:	e7a5      	b.n	800526c <__mdiff+0x34>
 8005320:	f855 8b04 	ldr.w	r8, [r5], #4
 8005324:	fa17 f488 	uxtah	r4, r7, r8
 8005328:	1422      	asrs	r2, r4, #16
 800532a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800532e:	b2a4      	uxth	r4, r4
 8005330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005334:	f84e 4b04 	str.w	r4, [lr], #4
 8005338:	1417      	asrs	r7, r2, #16
 800533a:	e7e0      	b.n	80052fe <__mdiff+0xc6>
 800533c:	3e01      	subs	r6, #1
 800533e:	e7ea      	b.n	8005316 <__mdiff+0xde>
 8005340:	08005c83 	.word	0x08005c83
 8005344:	08005cf4 	.word	0x08005cf4

08005348 <__d2b>:
 8005348:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800534c:	4689      	mov	r9, r1
 800534e:	2101      	movs	r1, #1
 8005350:	ec57 6b10 	vmov	r6, r7, d0
 8005354:	4690      	mov	r8, r2
 8005356:	f7ff fcd5 	bl	8004d04 <_Balloc>
 800535a:	4604      	mov	r4, r0
 800535c:	b930      	cbnz	r0, 800536c <__d2b+0x24>
 800535e:	4602      	mov	r2, r0
 8005360:	4b25      	ldr	r3, [pc, #148]	; (80053f8 <__d2b+0xb0>)
 8005362:	4826      	ldr	r0, [pc, #152]	; (80053fc <__d2b+0xb4>)
 8005364:	f240 310a 	movw	r1, #778	; 0x30a
 8005368:	f000 fac4 	bl	80058f4 <__assert_func>
 800536c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005370:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005374:	bb35      	cbnz	r5, 80053c4 <__d2b+0x7c>
 8005376:	2e00      	cmp	r6, #0
 8005378:	9301      	str	r3, [sp, #4]
 800537a:	d028      	beq.n	80053ce <__d2b+0x86>
 800537c:	4668      	mov	r0, sp
 800537e:	9600      	str	r6, [sp, #0]
 8005380:	f7ff fd8c 	bl	8004e9c <__lo0bits>
 8005384:	9900      	ldr	r1, [sp, #0]
 8005386:	b300      	cbz	r0, 80053ca <__d2b+0x82>
 8005388:	9a01      	ldr	r2, [sp, #4]
 800538a:	f1c0 0320 	rsb	r3, r0, #32
 800538e:	fa02 f303 	lsl.w	r3, r2, r3
 8005392:	430b      	orrs	r3, r1
 8005394:	40c2      	lsrs	r2, r0
 8005396:	6163      	str	r3, [r4, #20]
 8005398:	9201      	str	r2, [sp, #4]
 800539a:	9b01      	ldr	r3, [sp, #4]
 800539c:	61a3      	str	r3, [r4, #24]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	bf14      	ite	ne
 80053a2:	2202      	movne	r2, #2
 80053a4:	2201      	moveq	r2, #1
 80053a6:	6122      	str	r2, [r4, #16]
 80053a8:	b1d5      	cbz	r5, 80053e0 <__d2b+0x98>
 80053aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80053ae:	4405      	add	r5, r0
 80053b0:	f8c9 5000 	str.w	r5, [r9]
 80053b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80053b8:	f8c8 0000 	str.w	r0, [r8]
 80053bc:	4620      	mov	r0, r4
 80053be:	b003      	add	sp, #12
 80053c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80053c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053c8:	e7d5      	b.n	8005376 <__d2b+0x2e>
 80053ca:	6161      	str	r1, [r4, #20]
 80053cc:	e7e5      	b.n	800539a <__d2b+0x52>
 80053ce:	a801      	add	r0, sp, #4
 80053d0:	f7ff fd64 	bl	8004e9c <__lo0bits>
 80053d4:	9b01      	ldr	r3, [sp, #4]
 80053d6:	6163      	str	r3, [r4, #20]
 80053d8:	2201      	movs	r2, #1
 80053da:	6122      	str	r2, [r4, #16]
 80053dc:	3020      	adds	r0, #32
 80053de:	e7e3      	b.n	80053a8 <__d2b+0x60>
 80053e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80053e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80053e8:	f8c9 0000 	str.w	r0, [r9]
 80053ec:	6918      	ldr	r0, [r3, #16]
 80053ee:	f7ff fd35 	bl	8004e5c <__hi0bits>
 80053f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80053f6:	e7df      	b.n	80053b8 <__d2b+0x70>
 80053f8:	08005c83 	.word	0x08005c83
 80053fc:	08005cf4 	.word	0x08005cf4

08005400 <_calloc_r>:
 8005400:	b513      	push	{r0, r1, r4, lr}
 8005402:	434a      	muls	r2, r1
 8005404:	4611      	mov	r1, r2
 8005406:	9201      	str	r2, [sp, #4]
 8005408:	f000 f85a 	bl	80054c0 <_malloc_r>
 800540c:	4604      	mov	r4, r0
 800540e:	b118      	cbz	r0, 8005418 <_calloc_r+0x18>
 8005410:	9a01      	ldr	r2, [sp, #4]
 8005412:	2100      	movs	r1, #0
 8005414:	f7fd fe04 	bl	8003020 <memset>
 8005418:	4620      	mov	r0, r4
 800541a:	b002      	add	sp, #8
 800541c:	bd10      	pop	{r4, pc}
	...

08005420 <_free_r>:
 8005420:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005422:	2900      	cmp	r1, #0
 8005424:	d048      	beq.n	80054b8 <_free_r+0x98>
 8005426:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800542a:	9001      	str	r0, [sp, #4]
 800542c:	2b00      	cmp	r3, #0
 800542e:	f1a1 0404 	sub.w	r4, r1, #4
 8005432:	bfb8      	it	lt
 8005434:	18e4      	addlt	r4, r4, r3
 8005436:	f000 fae3 	bl	8005a00 <__malloc_lock>
 800543a:	4a20      	ldr	r2, [pc, #128]	; (80054bc <_free_r+0x9c>)
 800543c:	9801      	ldr	r0, [sp, #4]
 800543e:	6813      	ldr	r3, [r2, #0]
 8005440:	4615      	mov	r5, r2
 8005442:	b933      	cbnz	r3, 8005452 <_free_r+0x32>
 8005444:	6063      	str	r3, [r4, #4]
 8005446:	6014      	str	r4, [r2, #0]
 8005448:	b003      	add	sp, #12
 800544a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800544e:	f000 badd 	b.w	8005a0c <__malloc_unlock>
 8005452:	42a3      	cmp	r3, r4
 8005454:	d90b      	bls.n	800546e <_free_r+0x4e>
 8005456:	6821      	ldr	r1, [r4, #0]
 8005458:	1862      	adds	r2, r4, r1
 800545a:	4293      	cmp	r3, r2
 800545c:	bf04      	itt	eq
 800545e:	681a      	ldreq	r2, [r3, #0]
 8005460:	685b      	ldreq	r3, [r3, #4]
 8005462:	6063      	str	r3, [r4, #4]
 8005464:	bf04      	itt	eq
 8005466:	1852      	addeq	r2, r2, r1
 8005468:	6022      	streq	r2, [r4, #0]
 800546a:	602c      	str	r4, [r5, #0]
 800546c:	e7ec      	b.n	8005448 <_free_r+0x28>
 800546e:	461a      	mov	r2, r3
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	b10b      	cbz	r3, 8005478 <_free_r+0x58>
 8005474:	42a3      	cmp	r3, r4
 8005476:	d9fa      	bls.n	800546e <_free_r+0x4e>
 8005478:	6811      	ldr	r1, [r2, #0]
 800547a:	1855      	adds	r5, r2, r1
 800547c:	42a5      	cmp	r5, r4
 800547e:	d10b      	bne.n	8005498 <_free_r+0x78>
 8005480:	6824      	ldr	r4, [r4, #0]
 8005482:	4421      	add	r1, r4
 8005484:	1854      	adds	r4, r2, r1
 8005486:	42a3      	cmp	r3, r4
 8005488:	6011      	str	r1, [r2, #0]
 800548a:	d1dd      	bne.n	8005448 <_free_r+0x28>
 800548c:	681c      	ldr	r4, [r3, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	6053      	str	r3, [r2, #4]
 8005492:	4421      	add	r1, r4
 8005494:	6011      	str	r1, [r2, #0]
 8005496:	e7d7      	b.n	8005448 <_free_r+0x28>
 8005498:	d902      	bls.n	80054a0 <_free_r+0x80>
 800549a:	230c      	movs	r3, #12
 800549c:	6003      	str	r3, [r0, #0]
 800549e:	e7d3      	b.n	8005448 <_free_r+0x28>
 80054a0:	6825      	ldr	r5, [r4, #0]
 80054a2:	1961      	adds	r1, r4, r5
 80054a4:	428b      	cmp	r3, r1
 80054a6:	bf04      	itt	eq
 80054a8:	6819      	ldreq	r1, [r3, #0]
 80054aa:	685b      	ldreq	r3, [r3, #4]
 80054ac:	6063      	str	r3, [r4, #4]
 80054ae:	bf04      	itt	eq
 80054b0:	1949      	addeq	r1, r1, r5
 80054b2:	6021      	streq	r1, [r4, #0]
 80054b4:	6054      	str	r4, [r2, #4]
 80054b6:	e7c7      	b.n	8005448 <_free_r+0x28>
 80054b8:	b003      	add	sp, #12
 80054ba:	bd30      	pop	{r4, r5, pc}
 80054bc:	2000021c 	.word	0x2000021c

080054c0 <_malloc_r>:
 80054c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c2:	1ccd      	adds	r5, r1, #3
 80054c4:	f025 0503 	bic.w	r5, r5, #3
 80054c8:	3508      	adds	r5, #8
 80054ca:	2d0c      	cmp	r5, #12
 80054cc:	bf38      	it	cc
 80054ce:	250c      	movcc	r5, #12
 80054d0:	2d00      	cmp	r5, #0
 80054d2:	4606      	mov	r6, r0
 80054d4:	db01      	blt.n	80054da <_malloc_r+0x1a>
 80054d6:	42a9      	cmp	r1, r5
 80054d8:	d903      	bls.n	80054e2 <_malloc_r+0x22>
 80054da:	230c      	movs	r3, #12
 80054dc:	6033      	str	r3, [r6, #0]
 80054de:	2000      	movs	r0, #0
 80054e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054e2:	f000 fa8d 	bl	8005a00 <__malloc_lock>
 80054e6:	4921      	ldr	r1, [pc, #132]	; (800556c <_malloc_r+0xac>)
 80054e8:	680a      	ldr	r2, [r1, #0]
 80054ea:	4614      	mov	r4, r2
 80054ec:	b99c      	cbnz	r4, 8005516 <_malloc_r+0x56>
 80054ee:	4f20      	ldr	r7, [pc, #128]	; (8005570 <_malloc_r+0xb0>)
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	b923      	cbnz	r3, 80054fe <_malloc_r+0x3e>
 80054f4:	4621      	mov	r1, r4
 80054f6:	4630      	mov	r0, r6
 80054f8:	f000 f996 	bl	8005828 <_sbrk_r>
 80054fc:	6038      	str	r0, [r7, #0]
 80054fe:	4629      	mov	r1, r5
 8005500:	4630      	mov	r0, r6
 8005502:	f000 f991 	bl	8005828 <_sbrk_r>
 8005506:	1c43      	adds	r3, r0, #1
 8005508:	d123      	bne.n	8005552 <_malloc_r+0x92>
 800550a:	230c      	movs	r3, #12
 800550c:	6033      	str	r3, [r6, #0]
 800550e:	4630      	mov	r0, r6
 8005510:	f000 fa7c 	bl	8005a0c <__malloc_unlock>
 8005514:	e7e3      	b.n	80054de <_malloc_r+0x1e>
 8005516:	6823      	ldr	r3, [r4, #0]
 8005518:	1b5b      	subs	r3, r3, r5
 800551a:	d417      	bmi.n	800554c <_malloc_r+0x8c>
 800551c:	2b0b      	cmp	r3, #11
 800551e:	d903      	bls.n	8005528 <_malloc_r+0x68>
 8005520:	6023      	str	r3, [r4, #0]
 8005522:	441c      	add	r4, r3
 8005524:	6025      	str	r5, [r4, #0]
 8005526:	e004      	b.n	8005532 <_malloc_r+0x72>
 8005528:	6863      	ldr	r3, [r4, #4]
 800552a:	42a2      	cmp	r2, r4
 800552c:	bf0c      	ite	eq
 800552e:	600b      	streq	r3, [r1, #0]
 8005530:	6053      	strne	r3, [r2, #4]
 8005532:	4630      	mov	r0, r6
 8005534:	f000 fa6a 	bl	8005a0c <__malloc_unlock>
 8005538:	f104 000b 	add.w	r0, r4, #11
 800553c:	1d23      	adds	r3, r4, #4
 800553e:	f020 0007 	bic.w	r0, r0, #7
 8005542:	1ac2      	subs	r2, r0, r3
 8005544:	d0cc      	beq.n	80054e0 <_malloc_r+0x20>
 8005546:	1a1b      	subs	r3, r3, r0
 8005548:	50a3      	str	r3, [r4, r2]
 800554a:	e7c9      	b.n	80054e0 <_malloc_r+0x20>
 800554c:	4622      	mov	r2, r4
 800554e:	6864      	ldr	r4, [r4, #4]
 8005550:	e7cc      	b.n	80054ec <_malloc_r+0x2c>
 8005552:	1cc4      	adds	r4, r0, #3
 8005554:	f024 0403 	bic.w	r4, r4, #3
 8005558:	42a0      	cmp	r0, r4
 800555a:	d0e3      	beq.n	8005524 <_malloc_r+0x64>
 800555c:	1a21      	subs	r1, r4, r0
 800555e:	4630      	mov	r0, r6
 8005560:	f000 f962 	bl	8005828 <_sbrk_r>
 8005564:	3001      	adds	r0, #1
 8005566:	d1dd      	bne.n	8005524 <_malloc_r+0x64>
 8005568:	e7cf      	b.n	800550a <_malloc_r+0x4a>
 800556a:	bf00      	nop
 800556c:	2000021c 	.word	0x2000021c
 8005570:	20000220 	.word	0x20000220

08005574 <__sfputc_r>:
 8005574:	6893      	ldr	r3, [r2, #8]
 8005576:	3b01      	subs	r3, #1
 8005578:	2b00      	cmp	r3, #0
 800557a:	b410      	push	{r4}
 800557c:	6093      	str	r3, [r2, #8]
 800557e:	da08      	bge.n	8005592 <__sfputc_r+0x1e>
 8005580:	6994      	ldr	r4, [r2, #24]
 8005582:	42a3      	cmp	r3, r4
 8005584:	db01      	blt.n	800558a <__sfputc_r+0x16>
 8005586:	290a      	cmp	r1, #10
 8005588:	d103      	bne.n	8005592 <__sfputc_r+0x1e>
 800558a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800558e:	f7fe ba47 	b.w	8003a20 <__swbuf_r>
 8005592:	6813      	ldr	r3, [r2, #0]
 8005594:	1c58      	adds	r0, r3, #1
 8005596:	6010      	str	r0, [r2, #0]
 8005598:	7019      	strb	r1, [r3, #0]
 800559a:	4608      	mov	r0, r1
 800559c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <__sfputs_r>:
 80055a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055a4:	4606      	mov	r6, r0
 80055a6:	460f      	mov	r7, r1
 80055a8:	4614      	mov	r4, r2
 80055aa:	18d5      	adds	r5, r2, r3
 80055ac:	42ac      	cmp	r4, r5
 80055ae:	d101      	bne.n	80055b4 <__sfputs_r+0x12>
 80055b0:	2000      	movs	r0, #0
 80055b2:	e007      	b.n	80055c4 <__sfputs_r+0x22>
 80055b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055b8:	463a      	mov	r2, r7
 80055ba:	4630      	mov	r0, r6
 80055bc:	f7ff ffda 	bl	8005574 <__sfputc_r>
 80055c0:	1c43      	adds	r3, r0, #1
 80055c2:	d1f3      	bne.n	80055ac <__sfputs_r+0xa>
 80055c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080055c8 <_vfiprintf_r>:
 80055c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055cc:	460d      	mov	r5, r1
 80055ce:	b09d      	sub	sp, #116	; 0x74
 80055d0:	4614      	mov	r4, r2
 80055d2:	4698      	mov	r8, r3
 80055d4:	4606      	mov	r6, r0
 80055d6:	b118      	cbz	r0, 80055e0 <_vfiprintf_r+0x18>
 80055d8:	6983      	ldr	r3, [r0, #24]
 80055da:	b90b      	cbnz	r3, 80055e0 <_vfiprintf_r+0x18>
 80055dc:	f7ff fa72 	bl	8004ac4 <__sinit>
 80055e0:	4b89      	ldr	r3, [pc, #548]	; (8005808 <_vfiprintf_r+0x240>)
 80055e2:	429d      	cmp	r5, r3
 80055e4:	d11b      	bne.n	800561e <_vfiprintf_r+0x56>
 80055e6:	6875      	ldr	r5, [r6, #4]
 80055e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055ea:	07d9      	lsls	r1, r3, #31
 80055ec:	d405      	bmi.n	80055fa <_vfiprintf_r+0x32>
 80055ee:	89ab      	ldrh	r3, [r5, #12]
 80055f0:	059a      	lsls	r2, r3, #22
 80055f2:	d402      	bmi.n	80055fa <_vfiprintf_r+0x32>
 80055f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055f6:	f7ff fb08 	bl	8004c0a <__retarget_lock_acquire_recursive>
 80055fa:	89ab      	ldrh	r3, [r5, #12]
 80055fc:	071b      	lsls	r3, r3, #28
 80055fe:	d501      	bpl.n	8005604 <_vfiprintf_r+0x3c>
 8005600:	692b      	ldr	r3, [r5, #16]
 8005602:	b9eb      	cbnz	r3, 8005640 <_vfiprintf_r+0x78>
 8005604:	4629      	mov	r1, r5
 8005606:	4630      	mov	r0, r6
 8005608:	f7fe fa5c 	bl	8003ac4 <__swsetup_r>
 800560c:	b1c0      	cbz	r0, 8005640 <_vfiprintf_r+0x78>
 800560e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005610:	07dc      	lsls	r4, r3, #31
 8005612:	d50e      	bpl.n	8005632 <_vfiprintf_r+0x6a>
 8005614:	f04f 30ff 	mov.w	r0, #4294967295
 8005618:	b01d      	add	sp, #116	; 0x74
 800561a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800561e:	4b7b      	ldr	r3, [pc, #492]	; (800580c <_vfiprintf_r+0x244>)
 8005620:	429d      	cmp	r5, r3
 8005622:	d101      	bne.n	8005628 <_vfiprintf_r+0x60>
 8005624:	68b5      	ldr	r5, [r6, #8]
 8005626:	e7df      	b.n	80055e8 <_vfiprintf_r+0x20>
 8005628:	4b79      	ldr	r3, [pc, #484]	; (8005810 <_vfiprintf_r+0x248>)
 800562a:	429d      	cmp	r5, r3
 800562c:	bf08      	it	eq
 800562e:	68f5      	ldreq	r5, [r6, #12]
 8005630:	e7da      	b.n	80055e8 <_vfiprintf_r+0x20>
 8005632:	89ab      	ldrh	r3, [r5, #12]
 8005634:	0598      	lsls	r0, r3, #22
 8005636:	d4ed      	bmi.n	8005614 <_vfiprintf_r+0x4c>
 8005638:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800563a:	f7ff fae7 	bl	8004c0c <__retarget_lock_release_recursive>
 800563e:	e7e9      	b.n	8005614 <_vfiprintf_r+0x4c>
 8005640:	2300      	movs	r3, #0
 8005642:	9309      	str	r3, [sp, #36]	; 0x24
 8005644:	2320      	movs	r3, #32
 8005646:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800564a:	f8cd 800c 	str.w	r8, [sp, #12]
 800564e:	2330      	movs	r3, #48	; 0x30
 8005650:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005814 <_vfiprintf_r+0x24c>
 8005654:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005658:	f04f 0901 	mov.w	r9, #1
 800565c:	4623      	mov	r3, r4
 800565e:	469a      	mov	sl, r3
 8005660:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005664:	b10a      	cbz	r2, 800566a <_vfiprintf_r+0xa2>
 8005666:	2a25      	cmp	r2, #37	; 0x25
 8005668:	d1f9      	bne.n	800565e <_vfiprintf_r+0x96>
 800566a:	ebba 0b04 	subs.w	fp, sl, r4
 800566e:	d00b      	beq.n	8005688 <_vfiprintf_r+0xc0>
 8005670:	465b      	mov	r3, fp
 8005672:	4622      	mov	r2, r4
 8005674:	4629      	mov	r1, r5
 8005676:	4630      	mov	r0, r6
 8005678:	f7ff ff93 	bl	80055a2 <__sfputs_r>
 800567c:	3001      	adds	r0, #1
 800567e:	f000 80aa 	beq.w	80057d6 <_vfiprintf_r+0x20e>
 8005682:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005684:	445a      	add	r2, fp
 8005686:	9209      	str	r2, [sp, #36]	; 0x24
 8005688:	f89a 3000 	ldrb.w	r3, [sl]
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 80a2 	beq.w	80057d6 <_vfiprintf_r+0x20e>
 8005692:	2300      	movs	r3, #0
 8005694:	f04f 32ff 	mov.w	r2, #4294967295
 8005698:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800569c:	f10a 0a01 	add.w	sl, sl, #1
 80056a0:	9304      	str	r3, [sp, #16]
 80056a2:	9307      	str	r3, [sp, #28]
 80056a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056a8:	931a      	str	r3, [sp, #104]	; 0x68
 80056aa:	4654      	mov	r4, sl
 80056ac:	2205      	movs	r2, #5
 80056ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056b2:	4858      	ldr	r0, [pc, #352]	; (8005814 <_vfiprintf_r+0x24c>)
 80056b4:	f7fa fd94 	bl	80001e0 <memchr>
 80056b8:	9a04      	ldr	r2, [sp, #16]
 80056ba:	b9d8      	cbnz	r0, 80056f4 <_vfiprintf_r+0x12c>
 80056bc:	06d1      	lsls	r1, r2, #27
 80056be:	bf44      	itt	mi
 80056c0:	2320      	movmi	r3, #32
 80056c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056c6:	0713      	lsls	r3, r2, #28
 80056c8:	bf44      	itt	mi
 80056ca:	232b      	movmi	r3, #43	; 0x2b
 80056cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056d0:	f89a 3000 	ldrb.w	r3, [sl]
 80056d4:	2b2a      	cmp	r3, #42	; 0x2a
 80056d6:	d015      	beq.n	8005704 <_vfiprintf_r+0x13c>
 80056d8:	9a07      	ldr	r2, [sp, #28]
 80056da:	4654      	mov	r4, sl
 80056dc:	2000      	movs	r0, #0
 80056de:	f04f 0c0a 	mov.w	ip, #10
 80056e2:	4621      	mov	r1, r4
 80056e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056e8:	3b30      	subs	r3, #48	; 0x30
 80056ea:	2b09      	cmp	r3, #9
 80056ec:	d94e      	bls.n	800578c <_vfiprintf_r+0x1c4>
 80056ee:	b1b0      	cbz	r0, 800571e <_vfiprintf_r+0x156>
 80056f0:	9207      	str	r2, [sp, #28]
 80056f2:	e014      	b.n	800571e <_vfiprintf_r+0x156>
 80056f4:	eba0 0308 	sub.w	r3, r0, r8
 80056f8:	fa09 f303 	lsl.w	r3, r9, r3
 80056fc:	4313      	orrs	r3, r2
 80056fe:	9304      	str	r3, [sp, #16]
 8005700:	46a2      	mov	sl, r4
 8005702:	e7d2      	b.n	80056aa <_vfiprintf_r+0xe2>
 8005704:	9b03      	ldr	r3, [sp, #12]
 8005706:	1d19      	adds	r1, r3, #4
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	9103      	str	r1, [sp, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	bfbb      	ittet	lt
 8005710:	425b      	neglt	r3, r3
 8005712:	f042 0202 	orrlt.w	r2, r2, #2
 8005716:	9307      	strge	r3, [sp, #28]
 8005718:	9307      	strlt	r3, [sp, #28]
 800571a:	bfb8      	it	lt
 800571c:	9204      	strlt	r2, [sp, #16]
 800571e:	7823      	ldrb	r3, [r4, #0]
 8005720:	2b2e      	cmp	r3, #46	; 0x2e
 8005722:	d10c      	bne.n	800573e <_vfiprintf_r+0x176>
 8005724:	7863      	ldrb	r3, [r4, #1]
 8005726:	2b2a      	cmp	r3, #42	; 0x2a
 8005728:	d135      	bne.n	8005796 <_vfiprintf_r+0x1ce>
 800572a:	9b03      	ldr	r3, [sp, #12]
 800572c:	1d1a      	adds	r2, r3, #4
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	9203      	str	r2, [sp, #12]
 8005732:	2b00      	cmp	r3, #0
 8005734:	bfb8      	it	lt
 8005736:	f04f 33ff 	movlt.w	r3, #4294967295
 800573a:	3402      	adds	r4, #2
 800573c:	9305      	str	r3, [sp, #20]
 800573e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005824 <_vfiprintf_r+0x25c>
 8005742:	7821      	ldrb	r1, [r4, #0]
 8005744:	2203      	movs	r2, #3
 8005746:	4650      	mov	r0, sl
 8005748:	f7fa fd4a 	bl	80001e0 <memchr>
 800574c:	b140      	cbz	r0, 8005760 <_vfiprintf_r+0x198>
 800574e:	2340      	movs	r3, #64	; 0x40
 8005750:	eba0 000a 	sub.w	r0, r0, sl
 8005754:	fa03 f000 	lsl.w	r0, r3, r0
 8005758:	9b04      	ldr	r3, [sp, #16]
 800575a:	4303      	orrs	r3, r0
 800575c:	3401      	adds	r4, #1
 800575e:	9304      	str	r3, [sp, #16]
 8005760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005764:	482c      	ldr	r0, [pc, #176]	; (8005818 <_vfiprintf_r+0x250>)
 8005766:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800576a:	2206      	movs	r2, #6
 800576c:	f7fa fd38 	bl	80001e0 <memchr>
 8005770:	2800      	cmp	r0, #0
 8005772:	d03f      	beq.n	80057f4 <_vfiprintf_r+0x22c>
 8005774:	4b29      	ldr	r3, [pc, #164]	; (800581c <_vfiprintf_r+0x254>)
 8005776:	bb1b      	cbnz	r3, 80057c0 <_vfiprintf_r+0x1f8>
 8005778:	9b03      	ldr	r3, [sp, #12]
 800577a:	3307      	adds	r3, #7
 800577c:	f023 0307 	bic.w	r3, r3, #7
 8005780:	3308      	adds	r3, #8
 8005782:	9303      	str	r3, [sp, #12]
 8005784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005786:	443b      	add	r3, r7
 8005788:	9309      	str	r3, [sp, #36]	; 0x24
 800578a:	e767      	b.n	800565c <_vfiprintf_r+0x94>
 800578c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005790:	460c      	mov	r4, r1
 8005792:	2001      	movs	r0, #1
 8005794:	e7a5      	b.n	80056e2 <_vfiprintf_r+0x11a>
 8005796:	2300      	movs	r3, #0
 8005798:	3401      	adds	r4, #1
 800579a:	9305      	str	r3, [sp, #20]
 800579c:	4619      	mov	r1, r3
 800579e:	f04f 0c0a 	mov.w	ip, #10
 80057a2:	4620      	mov	r0, r4
 80057a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057a8:	3a30      	subs	r2, #48	; 0x30
 80057aa:	2a09      	cmp	r2, #9
 80057ac:	d903      	bls.n	80057b6 <_vfiprintf_r+0x1ee>
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d0c5      	beq.n	800573e <_vfiprintf_r+0x176>
 80057b2:	9105      	str	r1, [sp, #20]
 80057b4:	e7c3      	b.n	800573e <_vfiprintf_r+0x176>
 80057b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80057ba:	4604      	mov	r4, r0
 80057bc:	2301      	movs	r3, #1
 80057be:	e7f0      	b.n	80057a2 <_vfiprintf_r+0x1da>
 80057c0:	ab03      	add	r3, sp, #12
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	462a      	mov	r2, r5
 80057c6:	4b16      	ldr	r3, [pc, #88]	; (8005820 <_vfiprintf_r+0x258>)
 80057c8:	a904      	add	r1, sp, #16
 80057ca:	4630      	mov	r0, r6
 80057cc:	f7fd fcd0 	bl	8003170 <_printf_float>
 80057d0:	4607      	mov	r7, r0
 80057d2:	1c78      	adds	r0, r7, #1
 80057d4:	d1d6      	bne.n	8005784 <_vfiprintf_r+0x1bc>
 80057d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057d8:	07d9      	lsls	r1, r3, #31
 80057da:	d405      	bmi.n	80057e8 <_vfiprintf_r+0x220>
 80057dc:	89ab      	ldrh	r3, [r5, #12]
 80057de:	059a      	lsls	r2, r3, #22
 80057e0:	d402      	bmi.n	80057e8 <_vfiprintf_r+0x220>
 80057e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057e4:	f7ff fa12 	bl	8004c0c <__retarget_lock_release_recursive>
 80057e8:	89ab      	ldrh	r3, [r5, #12]
 80057ea:	065b      	lsls	r3, r3, #25
 80057ec:	f53f af12 	bmi.w	8005614 <_vfiprintf_r+0x4c>
 80057f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057f2:	e711      	b.n	8005618 <_vfiprintf_r+0x50>
 80057f4:	ab03      	add	r3, sp, #12
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	462a      	mov	r2, r5
 80057fa:	4b09      	ldr	r3, [pc, #36]	; (8005820 <_vfiprintf_r+0x258>)
 80057fc:	a904      	add	r1, sp, #16
 80057fe:	4630      	mov	r0, r6
 8005800:	f7fd ff5a 	bl	80036b8 <_printf_i>
 8005804:	e7e4      	b.n	80057d0 <_vfiprintf_r+0x208>
 8005806:	bf00      	nop
 8005808:	08005cb4 	.word	0x08005cb4
 800580c:	08005cd4 	.word	0x08005cd4
 8005810:	08005c94 	.word	0x08005c94
 8005814:	08005e54 	.word	0x08005e54
 8005818:	08005e5e 	.word	0x08005e5e
 800581c:	08003171 	.word	0x08003171
 8005820:	080055a3 	.word	0x080055a3
 8005824:	08005e5a 	.word	0x08005e5a

08005828 <_sbrk_r>:
 8005828:	b538      	push	{r3, r4, r5, lr}
 800582a:	4d06      	ldr	r5, [pc, #24]	; (8005844 <_sbrk_r+0x1c>)
 800582c:	2300      	movs	r3, #0
 800582e:	4604      	mov	r4, r0
 8005830:	4608      	mov	r0, r1
 8005832:	602b      	str	r3, [r5, #0]
 8005834:	f7fb fee0 	bl	80015f8 <_sbrk>
 8005838:	1c43      	adds	r3, r0, #1
 800583a:	d102      	bne.n	8005842 <_sbrk_r+0x1a>
 800583c:	682b      	ldr	r3, [r5, #0]
 800583e:	b103      	cbz	r3, 8005842 <_sbrk_r+0x1a>
 8005840:	6023      	str	r3, [r4, #0]
 8005842:	bd38      	pop	{r3, r4, r5, pc}
 8005844:	2000028c 	.word	0x2000028c

08005848 <__sread>:
 8005848:	b510      	push	{r4, lr}
 800584a:	460c      	mov	r4, r1
 800584c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005850:	f000 f8e2 	bl	8005a18 <_read_r>
 8005854:	2800      	cmp	r0, #0
 8005856:	bfab      	itete	ge
 8005858:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800585a:	89a3      	ldrhlt	r3, [r4, #12]
 800585c:	181b      	addge	r3, r3, r0
 800585e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005862:	bfac      	ite	ge
 8005864:	6563      	strge	r3, [r4, #84]	; 0x54
 8005866:	81a3      	strhlt	r3, [r4, #12]
 8005868:	bd10      	pop	{r4, pc}

0800586a <__swrite>:
 800586a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800586e:	461f      	mov	r7, r3
 8005870:	898b      	ldrh	r3, [r1, #12]
 8005872:	05db      	lsls	r3, r3, #23
 8005874:	4605      	mov	r5, r0
 8005876:	460c      	mov	r4, r1
 8005878:	4616      	mov	r6, r2
 800587a:	d505      	bpl.n	8005888 <__swrite+0x1e>
 800587c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005880:	2302      	movs	r3, #2
 8005882:	2200      	movs	r2, #0
 8005884:	f000 f898 	bl	80059b8 <_lseek_r>
 8005888:	89a3      	ldrh	r3, [r4, #12]
 800588a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800588e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005892:	81a3      	strh	r3, [r4, #12]
 8005894:	4632      	mov	r2, r6
 8005896:	463b      	mov	r3, r7
 8005898:	4628      	mov	r0, r5
 800589a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800589e:	f000 b817 	b.w	80058d0 <_write_r>

080058a2 <__sseek>:
 80058a2:	b510      	push	{r4, lr}
 80058a4:	460c      	mov	r4, r1
 80058a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058aa:	f000 f885 	bl	80059b8 <_lseek_r>
 80058ae:	1c43      	adds	r3, r0, #1
 80058b0:	89a3      	ldrh	r3, [r4, #12]
 80058b2:	bf15      	itete	ne
 80058b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80058b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80058be:	81a3      	strheq	r3, [r4, #12]
 80058c0:	bf18      	it	ne
 80058c2:	81a3      	strhne	r3, [r4, #12]
 80058c4:	bd10      	pop	{r4, pc}

080058c6 <__sclose>:
 80058c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058ca:	f000 b831 	b.w	8005930 <_close_r>
	...

080058d0 <_write_r>:
 80058d0:	b538      	push	{r3, r4, r5, lr}
 80058d2:	4d07      	ldr	r5, [pc, #28]	; (80058f0 <_write_r+0x20>)
 80058d4:	4604      	mov	r4, r0
 80058d6:	4608      	mov	r0, r1
 80058d8:	4611      	mov	r1, r2
 80058da:	2200      	movs	r2, #0
 80058dc:	602a      	str	r2, [r5, #0]
 80058de:	461a      	mov	r2, r3
 80058e0:	f7fb fe39 	bl	8001556 <_write>
 80058e4:	1c43      	adds	r3, r0, #1
 80058e6:	d102      	bne.n	80058ee <_write_r+0x1e>
 80058e8:	682b      	ldr	r3, [r5, #0]
 80058ea:	b103      	cbz	r3, 80058ee <_write_r+0x1e>
 80058ec:	6023      	str	r3, [r4, #0]
 80058ee:	bd38      	pop	{r3, r4, r5, pc}
 80058f0:	2000028c 	.word	0x2000028c

080058f4 <__assert_func>:
 80058f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80058f6:	4614      	mov	r4, r2
 80058f8:	461a      	mov	r2, r3
 80058fa:	4b09      	ldr	r3, [pc, #36]	; (8005920 <__assert_func+0x2c>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4605      	mov	r5, r0
 8005900:	68d8      	ldr	r0, [r3, #12]
 8005902:	b14c      	cbz	r4, 8005918 <__assert_func+0x24>
 8005904:	4b07      	ldr	r3, [pc, #28]	; (8005924 <__assert_func+0x30>)
 8005906:	9100      	str	r1, [sp, #0]
 8005908:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800590c:	4906      	ldr	r1, [pc, #24]	; (8005928 <__assert_func+0x34>)
 800590e:	462b      	mov	r3, r5
 8005910:	f000 f81e 	bl	8005950 <fiprintf>
 8005914:	f000 f89f 	bl	8005a56 <abort>
 8005918:	4b04      	ldr	r3, [pc, #16]	; (800592c <__assert_func+0x38>)
 800591a:	461c      	mov	r4, r3
 800591c:	e7f3      	b.n	8005906 <__assert_func+0x12>
 800591e:	bf00      	nop
 8005920:	20000018 	.word	0x20000018
 8005924:	08005e65 	.word	0x08005e65
 8005928:	08005e72 	.word	0x08005e72
 800592c:	08005ea0 	.word	0x08005ea0

08005930 <_close_r>:
 8005930:	b538      	push	{r3, r4, r5, lr}
 8005932:	4d06      	ldr	r5, [pc, #24]	; (800594c <_close_r+0x1c>)
 8005934:	2300      	movs	r3, #0
 8005936:	4604      	mov	r4, r0
 8005938:	4608      	mov	r0, r1
 800593a:	602b      	str	r3, [r5, #0]
 800593c:	f7fb fe27 	bl	800158e <_close>
 8005940:	1c43      	adds	r3, r0, #1
 8005942:	d102      	bne.n	800594a <_close_r+0x1a>
 8005944:	682b      	ldr	r3, [r5, #0]
 8005946:	b103      	cbz	r3, 800594a <_close_r+0x1a>
 8005948:	6023      	str	r3, [r4, #0]
 800594a:	bd38      	pop	{r3, r4, r5, pc}
 800594c:	2000028c 	.word	0x2000028c

08005950 <fiprintf>:
 8005950:	b40e      	push	{r1, r2, r3}
 8005952:	b503      	push	{r0, r1, lr}
 8005954:	4601      	mov	r1, r0
 8005956:	ab03      	add	r3, sp, #12
 8005958:	4805      	ldr	r0, [pc, #20]	; (8005970 <fiprintf+0x20>)
 800595a:	f853 2b04 	ldr.w	r2, [r3], #4
 800595e:	6800      	ldr	r0, [r0, #0]
 8005960:	9301      	str	r3, [sp, #4]
 8005962:	f7ff fe31 	bl	80055c8 <_vfiprintf_r>
 8005966:	b002      	add	sp, #8
 8005968:	f85d eb04 	ldr.w	lr, [sp], #4
 800596c:	b003      	add	sp, #12
 800596e:	4770      	bx	lr
 8005970:	20000018 	.word	0x20000018

08005974 <_fstat_r>:
 8005974:	b538      	push	{r3, r4, r5, lr}
 8005976:	4d07      	ldr	r5, [pc, #28]	; (8005994 <_fstat_r+0x20>)
 8005978:	2300      	movs	r3, #0
 800597a:	4604      	mov	r4, r0
 800597c:	4608      	mov	r0, r1
 800597e:	4611      	mov	r1, r2
 8005980:	602b      	str	r3, [r5, #0]
 8005982:	f7fb fe10 	bl	80015a6 <_fstat>
 8005986:	1c43      	adds	r3, r0, #1
 8005988:	d102      	bne.n	8005990 <_fstat_r+0x1c>
 800598a:	682b      	ldr	r3, [r5, #0]
 800598c:	b103      	cbz	r3, 8005990 <_fstat_r+0x1c>
 800598e:	6023      	str	r3, [r4, #0]
 8005990:	bd38      	pop	{r3, r4, r5, pc}
 8005992:	bf00      	nop
 8005994:	2000028c 	.word	0x2000028c

08005998 <_isatty_r>:
 8005998:	b538      	push	{r3, r4, r5, lr}
 800599a:	4d06      	ldr	r5, [pc, #24]	; (80059b4 <_isatty_r+0x1c>)
 800599c:	2300      	movs	r3, #0
 800599e:	4604      	mov	r4, r0
 80059a0:	4608      	mov	r0, r1
 80059a2:	602b      	str	r3, [r5, #0]
 80059a4:	f7fb fe0f 	bl	80015c6 <_isatty>
 80059a8:	1c43      	adds	r3, r0, #1
 80059aa:	d102      	bne.n	80059b2 <_isatty_r+0x1a>
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	b103      	cbz	r3, 80059b2 <_isatty_r+0x1a>
 80059b0:	6023      	str	r3, [r4, #0]
 80059b2:	bd38      	pop	{r3, r4, r5, pc}
 80059b4:	2000028c 	.word	0x2000028c

080059b8 <_lseek_r>:
 80059b8:	b538      	push	{r3, r4, r5, lr}
 80059ba:	4d07      	ldr	r5, [pc, #28]	; (80059d8 <_lseek_r+0x20>)
 80059bc:	4604      	mov	r4, r0
 80059be:	4608      	mov	r0, r1
 80059c0:	4611      	mov	r1, r2
 80059c2:	2200      	movs	r2, #0
 80059c4:	602a      	str	r2, [r5, #0]
 80059c6:	461a      	mov	r2, r3
 80059c8:	f7fb fe08 	bl	80015dc <_lseek>
 80059cc:	1c43      	adds	r3, r0, #1
 80059ce:	d102      	bne.n	80059d6 <_lseek_r+0x1e>
 80059d0:	682b      	ldr	r3, [r5, #0]
 80059d2:	b103      	cbz	r3, 80059d6 <_lseek_r+0x1e>
 80059d4:	6023      	str	r3, [r4, #0]
 80059d6:	bd38      	pop	{r3, r4, r5, pc}
 80059d8:	2000028c 	.word	0x2000028c

080059dc <__ascii_mbtowc>:
 80059dc:	b082      	sub	sp, #8
 80059de:	b901      	cbnz	r1, 80059e2 <__ascii_mbtowc+0x6>
 80059e0:	a901      	add	r1, sp, #4
 80059e2:	b142      	cbz	r2, 80059f6 <__ascii_mbtowc+0x1a>
 80059e4:	b14b      	cbz	r3, 80059fa <__ascii_mbtowc+0x1e>
 80059e6:	7813      	ldrb	r3, [r2, #0]
 80059e8:	600b      	str	r3, [r1, #0]
 80059ea:	7812      	ldrb	r2, [r2, #0]
 80059ec:	1e10      	subs	r0, r2, #0
 80059ee:	bf18      	it	ne
 80059f0:	2001      	movne	r0, #1
 80059f2:	b002      	add	sp, #8
 80059f4:	4770      	bx	lr
 80059f6:	4610      	mov	r0, r2
 80059f8:	e7fb      	b.n	80059f2 <__ascii_mbtowc+0x16>
 80059fa:	f06f 0001 	mvn.w	r0, #1
 80059fe:	e7f8      	b.n	80059f2 <__ascii_mbtowc+0x16>

08005a00 <__malloc_lock>:
 8005a00:	4801      	ldr	r0, [pc, #4]	; (8005a08 <__malloc_lock+0x8>)
 8005a02:	f7ff b902 	b.w	8004c0a <__retarget_lock_acquire_recursive>
 8005a06:	bf00      	nop
 8005a08:	20000284 	.word	0x20000284

08005a0c <__malloc_unlock>:
 8005a0c:	4801      	ldr	r0, [pc, #4]	; (8005a14 <__malloc_unlock+0x8>)
 8005a0e:	f7ff b8fd 	b.w	8004c0c <__retarget_lock_release_recursive>
 8005a12:	bf00      	nop
 8005a14:	20000284 	.word	0x20000284

08005a18 <_read_r>:
 8005a18:	b538      	push	{r3, r4, r5, lr}
 8005a1a:	4d07      	ldr	r5, [pc, #28]	; (8005a38 <_read_r+0x20>)
 8005a1c:	4604      	mov	r4, r0
 8005a1e:	4608      	mov	r0, r1
 8005a20:	4611      	mov	r1, r2
 8005a22:	2200      	movs	r2, #0
 8005a24:	602a      	str	r2, [r5, #0]
 8005a26:	461a      	mov	r2, r3
 8005a28:	f7fb fd78 	bl	800151c <_read>
 8005a2c:	1c43      	adds	r3, r0, #1
 8005a2e:	d102      	bne.n	8005a36 <_read_r+0x1e>
 8005a30:	682b      	ldr	r3, [r5, #0]
 8005a32:	b103      	cbz	r3, 8005a36 <_read_r+0x1e>
 8005a34:	6023      	str	r3, [r4, #0]
 8005a36:	bd38      	pop	{r3, r4, r5, pc}
 8005a38:	2000028c 	.word	0x2000028c

08005a3c <__ascii_wctomb>:
 8005a3c:	b149      	cbz	r1, 8005a52 <__ascii_wctomb+0x16>
 8005a3e:	2aff      	cmp	r2, #255	; 0xff
 8005a40:	bf85      	ittet	hi
 8005a42:	238a      	movhi	r3, #138	; 0x8a
 8005a44:	6003      	strhi	r3, [r0, #0]
 8005a46:	700a      	strbls	r2, [r1, #0]
 8005a48:	f04f 30ff 	movhi.w	r0, #4294967295
 8005a4c:	bf98      	it	ls
 8005a4e:	2001      	movls	r0, #1
 8005a50:	4770      	bx	lr
 8005a52:	4608      	mov	r0, r1
 8005a54:	4770      	bx	lr

08005a56 <abort>:
 8005a56:	b508      	push	{r3, lr}
 8005a58:	2006      	movs	r0, #6
 8005a5a:	f000 f82b 	bl	8005ab4 <raise>
 8005a5e:	2001      	movs	r0, #1
 8005a60:	f7fb fd52 	bl	8001508 <_exit>

08005a64 <_raise_r>:
 8005a64:	291f      	cmp	r1, #31
 8005a66:	b538      	push	{r3, r4, r5, lr}
 8005a68:	4604      	mov	r4, r0
 8005a6a:	460d      	mov	r5, r1
 8005a6c:	d904      	bls.n	8005a78 <_raise_r+0x14>
 8005a6e:	2316      	movs	r3, #22
 8005a70:	6003      	str	r3, [r0, #0]
 8005a72:	f04f 30ff 	mov.w	r0, #4294967295
 8005a76:	bd38      	pop	{r3, r4, r5, pc}
 8005a78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005a7a:	b112      	cbz	r2, 8005a82 <_raise_r+0x1e>
 8005a7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005a80:	b94b      	cbnz	r3, 8005a96 <_raise_r+0x32>
 8005a82:	4620      	mov	r0, r4
 8005a84:	f000 f830 	bl	8005ae8 <_getpid_r>
 8005a88:	462a      	mov	r2, r5
 8005a8a:	4601      	mov	r1, r0
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a92:	f000 b817 	b.w	8005ac4 <_kill_r>
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d00a      	beq.n	8005ab0 <_raise_r+0x4c>
 8005a9a:	1c59      	adds	r1, r3, #1
 8005a9c:	d103      	bne.n	8005aa6 <_raise_r+0x42>
 8005a9e:	2316      	movs	r3, #22
 8005aa0:	6003      	str	r3, [r0, #0]
 8005aa2:	2001      	movs	r0, #1
 8005aa4:	e7e7      	b.n	8005a76 <_raise_r+0x12>
 8005aa6:	2400      	movs	r4, #0
 8005aa8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005aac:	4628      	mov	r0, r5
 8005aae:	4798      	blx	r3
 8005ab0:	2000      	movs	r0, #0
 8005ab2:	e7e0      	b.n	8005a76 <_raise_r+0x12>

08005ab4 <raise>:
 8005ab4:	4b02      	ldr	r3, [pc, #8]	; (8005ac0 <raise+0xc>)
 8005ab6:	4601      	mov	r1, r0
 8005ab8:	6818      	ldr	r0, [r3, #0]
 8005aba:	f7ff bfd3 	b.w	8005a64 <_raise_r>
 8005abe:	bf00      	nop
 8005ac0:	20000018 	.word	0x20000018

08005ac4 <_kill_r>:
 8005ac4:	b538      	push	{r3, r4, r5, lr}
 8005ac6:	4d07      	ldr	r5, [pc, #28]	; (8005ae4 <_kill_r+0x20>)
 8005ac8:	2300      	movs	r3, #0
 8005aca:	4604      	mov	r4, r0
 8005acc:	4608      	mov	r0, r1
 8005ace:	4611      	mov	r1, r2
 8005ad0:	602b      	str	r3, [r5, #0]
 8005ad2:	f7fb fd09 	bl	80014e8 <_kill>
 8005ad6:	1c43      	adds	r3, r0, #1
 8005ad8:	d102      	bne.n	8005ae0 <_kill_r+0x1c>
 8005ada:	682b      	ldr	r3, [r5, #0]
 8005adc:	b103      	cbz	r3, 8005ae0 <_kill_r+0x1c>
 8005ade:	6023      	str	r3, [r4, #0]
 8005ae0:	bd38      	pop	{r3, r4, r5, pc}
 8005ae2:	bf00      	nop
 8005ae4:	2000028c 	.word	0x2000028c

08005ae8 <_getpid_r>:
 8005ae8:	f7fb bcf6 	b.w	80014d8 <_getpid>

08005aec <_init>:
 8005aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aee:	bf00      	nop
 8005af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005af2:	bc08      	pop	{r3}
 8005af4:	469e      	mov	lr, r3
 8005af6:	4770      	bx	lr

08005af8 <_fini>:
 8005af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afa:	bf00      	nop
 8005afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005afe:	bc08      	pop	{r3}
 8005b00:	469e      	mov	lr, r3
 8005b02:	4770      	bx	lr
