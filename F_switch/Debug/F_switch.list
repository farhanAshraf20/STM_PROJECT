
F_switch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08005c24  08005c24  00015c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d38  08005d38  00020138  2**0
                  CONTENTS
  4 .ARM          00000008  08005d38  08005d38  00015d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d40  08005d40  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d40  08005d40  00015d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d44  08005d44  00015d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  08005d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000138  08005e80  00020138  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08005e80  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .debug_info   000152c6  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000262f  00000000  00000000  0003542e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  00037a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f10  00000000  00000000  00038a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028222  00000000  00000000  00039968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001295d  00000000  00000000  00061b8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5ff5  00000000  00000000  000744e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016a4dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ac4  00000000  00000000  0016a530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000138 	.word	0x20000138
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c0c 	.word	0x08005c0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000013c 	.word	0x2000013c
 80001cc:	08005c0c 	.word	0x08005c0c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <f_Switch>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int f_Switch(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0


	  if(!HAL_GPIO_ReadPin (GPIOC, f_sw13_Pin))
 800057c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000580:	4827      	ldr	r0, [pc, #156]	; (8000620 <f_Switch+0xa8>)
 8000582:	f001 f9bd 	bl	8001900 <HAL_GPIO_ReadPin>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d12b      	bne.n	80005e4 <f_Switch+0x6c>
	  {

	 	    if(buttonState == 1 && !HAL_GPIO_ReadPin (GPIOC, f_sw13_Pin))
 800058c:	4b25      	ldr	r3, [pc, #148]	; (8000624 <f_Switch+0xac>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2b01      	cmp	r3, #1
 8000592:	d10b      	bne.n	80005ac <f_Switch+0x34>
 8000594:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000598:	4821      	ldr	r0, [pc, #132]	; (8000620 <f_Switch+0xa8>)
 800059a:	f001 f9b1 	bl	8001900 <HAL_GPIO_ReadPin>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d103      	bne.n	80005ac <f_Switch+0x34>
	 	    {
	 	    	buttonState = 2;
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <f_Switch+0xac>)
 80005a6:	2202      	movs	r2, #2
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	e01c      	b.n	80005e6 <f_Switch+0x6e>
	 	    }
	 	    else if(buttonState == 0 && !HAL_GPIO_ReadPin (GPIOC, f_sw13_Pin))
 80005ac:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <f_Switch+0xac>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d113      	bne.n	80005dc <f_Switch+0x64>
 80005b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b8:	4819      	ldr	r0, [pc, #100]	; (8000620 <f_Switch+0xa8>)
 80005ba:	f001 f9a1 	bl	8001900 <HAL_GPIO_ReadPin>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d10b      	bne.n	80005dc <f_Switch+0x64>
	 	    {
	 	    	HAL_Delay(50);
 80005c4:	2032      	movs	r0, #50	; 0x32
 80005c6:	f000 fe3d 	bl	8001244 <HAL_Delay>
	 	    	buttonState = 1;
 80005ca:	4b16      	ldr	r3, [pc, #88]	; (8000624 <f_Switch+0xac>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	601a      	str	r2, [r3, #0]
	 	    	HAL_Delay(200);
 80005d0:	20c8      	movs	r0, #200	; 0xc8
 80005d2:	f000 fe37 	bl	8001244 <HAL_Delay>
	 	    	f_Switch();
 80005d6:	f7ff ffcf 	bl	8000578 <f_Switch>
 80005da:	e004      	b.n	80005e6 <f_Switch+0x6e>
	 	    }
	 	    else
	 	    {
	 	    	buttonState = 0;
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <f_Switch+0xac>)
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	e000      	b.n	80005e6 <f_Switch+0x6e>
	 	    }
	  }
	  else
	  {
		  __NOP();
 80005e4:	bf00      	nop
	  }


	  switch(buttonState)
 80005e6:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <f_Switch+0xac>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b02      	cmp	r3, #2
 80005ec:	d00c      	beq.n	8000608 <f_Switch+0x90>
 80005ee:	2b02      	cmp	r3, #2
 80005f0:	dc12      	bgt.n	8000618 <f_Switch+0xa0>
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d00f      	beq.n	8000616 <f_Switch+0x9e>
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d10e      	bne.n	8000618 <f_Switch+0xa0>
	  		break;
	  		 // nothing is pressed
	  	  }
	  	  case 1:
	  	  {
	  		 buttonState = 0;
 80005fa:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <f_Switch+0xac>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
	  		 printf("button is pressed short\n");
 8000600:	4809      	ldr	r0, [pc, #36]	; (8000628 <f_Switch+0xb0>)
 8000602:	f004 fbbd 	bl	8004d80 <puts>
	  		 break;
 8000606:	e007      	b.n	8000618 <f_Switch+0xa0>
	  	  }
	  	  case 2:
	  	  {
	  		 buttonState = 0;
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <f_Switch+0xac>)
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
	  		 printf("button is pressed long\n");
 800060e:	4807      	ldr	r0, [pc, #28]	; (800062c <f_Switch+0xb4>)
 8000610:	f004 fbb6 	bl	8004d80 <puts>
	  		 break;
 8000614:	e000      	b.n	8000618 <f_Switch+0xa0>
	  		break;
 8000616:	bf00      	nop
	else
	{
		__NOP();
	}
	*/
	return 0;
 8000618:	2300      	movs	r3, #0
}
 800061a:	4618      	mov	r0, r3
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	48000800 	.word	0x48000800
 8000624:	20000158 	.word	0x20000158
 8000628:	08005c24 	.word	0x08005c24
 800062c:	08005c3c 	.word	0x08005c3c

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000634:	f000 fd91 	bl	800115a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000638:	f000 f860 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063c:	f000 f906 	bl	800084c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000640:	f000 f8d4 	bl	80007ec <MX_USART1_UART_Init>
  MX_TIM16_Init();
 8000644:	f000 f8ac 	bl	80007a0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Transmit(&huart1,(uint8_t*)TxBuffer,strlen(TxBuffer),500);
 8000648:	4824      	ldr	r0, [pc, #144]	; (80006dc <main+0xac>)
 800064a:	f7ff fdc1 	bl	80001d0 <strlen>
 800064e:	4603      	mov	r3, r0
 8000650:	b29a      	uxth	r2, r3
 8000652:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000656:	4921      	ldr	r1, [pc, #132]	; (80006dc <main+0xac>)
 8000658:	4821      	ldr	r0, [pc, #132]	; (80006e0 <main+0xb0>)
 800065a:	f002 ffdb 	bl	8003614 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart1,rxData,1);
 800065e:	2201      	movs	r2, #1
 8000660:	4920      	ldr	r1, [pc, #128]	; (80006e4 <main+0xb4>)
 8000662:	481f      	ldr	r0, [pc, #124]	; (80006e0 <main+0xb0>)
 8000664:	f003 f86a 	bl	800373c <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart1,msg3,sizeof(msg3),100);
 8000668:	2364      	movs	r3, #100	; 0x64
 800066a:	22a7      	movs	r2, #167	; 0xa7
 800066c:	491e      	ldr	r1, [pc, #120]	; (80006e8 <main+0xb8>)
 800066e:	481c      	ldr	r0, [pc, #112]	; (80006e0 <main+0xb0>)
 8000670:	f002 ffd0 	bl	8003614 <HAL_UART_Transmit>

  // Start timer
  HAL_TIM_Base_Start(&htim16);
 8000674:	481d      	ldr	r0, [pc, #116]	; (80006ec <main+0xbc>)
 8000676:	f002 fd0d 	bl	8003094 <HAL_TIM_Base_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		f_Switch();
 800067a:	f7ff ff7d 	bl	8000578 <f_Switch>


		if(newMsg)
 800067e:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <main+0xc0>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d0f9      	beq.n	800067a <main+0x4a>
		{
			size =strlen(rxBuffer);
 8000686:	481b      	ldr	r0, [pc, #108]	; (80006f4 <main+0xc4>)
 8000688:	f7ff fda2 	bl	80001d0 <strlen>
 800068c:	4603      	mov	r3, r0
 800068e:	b2da      	uxtb	r2, r3
 8000690:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <main+0xc8>)
 8000692:	701a      	strb	r2, [r3, #0]

			rxBuffer[size]='\r';
 8000694:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <main+0xc8>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	461a      	mov	r2, r3
 800069a:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <main+0xc4>)
 800069c:	210d      	movs	r1, #13
 800069e:	5499      	strb	r1, [r3, r2]
			rxBuffer[size+1]='\n';
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <main+0xc8>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	3301      	adds	r3, #1
 80006a6:	4a13      	ldr	r2, [pc, #76]	; (80006f4 <main+0xc4>)
 80006a8:	210a      	movs	r1, #10
 80006aa:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart1,(uint8_t*)rxBuffer,(size+3),500);
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <main+0xc8>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	3303      	adds	r3, #3
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006ba:	490e      	ldr	r1, [pc, #56]	; (80006f4 <main+0xc4>)
 80006bc:	4808      	ldr	r0, [pc, #32]	; (80006e0 <main+0xb0>)
 80006be:	f002 ffa9 	bl	8003614 <HAL_UART_Transmit>

			memset(rxBuffer,0,(size+3));
 80006c2:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <main+0xc8>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	3303      	adds	r3, #3
 80006c8:	461a      	mov	r2, r3
 80006ca:	2100      	movs	r1, #0
 80006cc:	4809      	ldr	r0, [pc, #36]	; (80006f4 <main+0xc4>)
 80006ce:	f004 fac9 	bl	8004c64 <memset>
			newMsg=0;
 80006d2:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <main+0xc0>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	701a      	strb	r2, [r3, #0]
		f_Switch();
 80006d8:	e7cf      	b.n	800067a <main+0x4a>
 80006da:	bf00      	nop
 80006dc:	20000000 	.word	0x20000000
 80006e0:	2000016c 	.word	0x2000016c
 80006e4:	20000168 	.word	0x20000168
 80006e8:	20000020 	.word	0x20000020
 80006ec:	20000204 	.word	0x20000204
 80006f0:	20000154 	.word	0x20000154
 80006f4:	200001f0 	.word	0x200001f0
 80006f8:	20000156 	.word	0x20000156

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b096      	sub	sp, #88	; 0x58
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	2244      	movs	r2, #68	; 0x44
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f004 faaa 	bl	8004c64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	463b      	mov	r3, r7
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800071e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000722:	f001 f94f 	bl	80019c4 <HAL_PWREx_ControlVoltageScaling>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800072c:	f000 faf4 	bl	8000d18 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000730:	2310      	movs	r3, #16
 8000732:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000734:	2301      	movs	r3, #1
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800073c:	2360      	movs	r3, #96	; 0x60
 800073e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000740:	2302      	movs	r3, #2
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000744:	2301      	movs	r3, #1
 8000746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000748:	2301      	movs	r3, #1
 800074a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800074c:	2328      	movs	r3, #40	; 0x28
 800074e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000750:	2307      	movs	r3, #7
 8000752:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000754:	2302      	movs	r3, #2
 8000756:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000758:	2302      	movs	r3, #2
 800075a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	4618      	mov	r0, r3
 8000762:	f001 f985 	bl	8001a70 <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800076c:	f000 fad4 	bl	8000d18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000770:	230f      	movs	r3, #15
 8000772:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000774:	2303      	movs	r3, #3
 8000776:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000784:	463b      	mov	r3, r7
 8000786:	2104      	movs	r1, #4
 8000788:	4618      	mov	r0, r3
 800078a:	f001 fd4b 	bl	8002224 <HAL_RCC_ClockConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000794:	f000 fac0 	bl	8000d18 <Error_Handler>
  }
}
 8000798:	bf00      	nop
 800079a:	3758      	adds	r7, #88	; 0x58
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_TIM16_Init+0x44>)
 80007a6:	4a10      	ldr	r2, [pc, #64]	; (80007e8 <MX_TIM16_Init+0x48>)
 80007a8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_TIM16_Init+0x44>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_TIM16_Init+0x44>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_TIM16_Init+0x44>)
 80007b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007bc:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_TIM16_Init+0x44>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <MX_TIM16_Init+0x44>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_TIM16_Init+0x44>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_TIM16_Init+0x44>)
 80007d2:	f002 fc07 	bl	8002fe4 <HAL_TIM_Base_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80007dc:	f000 fa9c 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000204 	.word	0x20000204
 80007e8:	40014400 	.word	0x40014400

080007ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007f0:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_USART1_UART_Init+0x58>)
 80007f2:	4a15      	ldr	r2, [pc, #84]	; (8000848 <MX_USART1_UART_Init+0x5c>)
 80007f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007f6:	4b13      	ldr	r3, [pc, #76]	; (8000844 <MX_USART1_UART_Init+0x58>)
 80007f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_USART1_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_USART1_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_USART1_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_USART1_UART_Init+0x58>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <MX_USART1_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_USART1_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <MX_USART1_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_USART1_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_USART1_UART_Init+0x58>)
 8000830:	f002 fea2 	bl	8003578 <HAL_UART_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800083a:	f000 fa6d 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	2000016c 	.word	0x2000016c
 8000848:	40013800 	.word	0x40013800

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	; 0x28
 8000850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000862:	4bbb      	ldr	r3, [pc, #748]	; (8000b50 <MX_GPIO_Init+0x304>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	4aba      	ldr	r2, [pc, #744]	; (8000b50 <MX_GPIO_Init+0x304>)
 8000868:	f043 0310 	orr.w	r3, r3, #16
 800086c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086e:	4bb8      	ldr	r3, [pc, #736]	; (8000b50 <MX_GPIO_Init+0x304>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	f003 0310 	and.w	r3, r3, #16
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	4bb5      	ldr	r3, [pc, #724]	; (8000b50 <MX_GPIO_Init+0x304>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	4ab4      	ldr	r2, [pc, #720]	; (8000b50 <MX_GPIO_Init+0x304>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000886:	4bb2      	ldr	r3, [pc, #712]	; (8000b50 <MX_GPIO_Init+0x304>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	4baf      	ldr	r3, [pc, #700]	; (8000b50 <MX_GPIO_Init+0x304>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	4aae      	ldr	r2, [pc, #696]	; (8000b50 <MX_GPIO_Init+0x304>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089e:	4bac      	ldr	r3, [pc, #688]	; (8000b50 <MX_GPIO_Init+0x304>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	4ba9      	ldr	r3, [pc, #676]	; (8000b50 <MX_GPIO_Init+0x304>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	4aa8      	ldr	r2, [pc, #672]	; (8000b50 <MX_GPIO_Init+0x304>)
 80008b0:	f043 0302 	orr.w	r3, r3, #2
 80008b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b6:	4ba6      	ldr	r3, [pc, #664]	; (8000b50 <MX_GPIO_Init+0x304>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	f003 0302 	and.w	r3, r3, #2
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c2:	4ba3      	ldr	r3, [pc, #652]	; (8000b50 <MX_GPIO_Init+0x304>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	4aa2      	ldr	r2, [pc, #648]	; (8000b50 <MX_GPIO_Init+0x304>)
 80008c8:	f043 0308 	orr.w	r3, r3, #8
 80008cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ce:	4ba0      	ldr	r3, [pc, #640]	; (8000b50 <MX_GPIO_Init+0x304>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	f003 0308 	and.w	r3, r3, #8
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	f44f 718a 	mov.w	r1, #276	; 0x114
 80008e0:	489c      	ldr	r0, [pc, #624]	; (8000b54 <MX_GPIO_Init+0x308>)
 80008e2:	f001 f825 	bl	8001930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f248 1104 	movw	r1, #33028	; 0x8104
 80008ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f0:	f001 f81e 	bl	8001930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80008f4:	2200      	movs	r2, #0
 80008f6:	f24f 0114 	movw	r1, #61460	; 0xf014
 80008fa:	4897      	ldr	r0, [pc, #604]	; (8000b58 <MX_GPIO_Init+0x30c>)
 80008fc:	f001 f818 	bl	8001930 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	f241 0181 	movw	r1, #4225	; 0x1081
 8000906:	4895      	ldr	r0, [pc, #596]	; (8000b5c <MX_GPIO_Init+0x310>)
 8000908:	f001 f812 	bl	8001930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 800090c:	2201      	movs	r2, #1
 800090e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000912:	4892      	ldr	r0, [pc, #584]	; (8000b5c <MX_GPIO_Init+0x310>)
 8000914:	f001 f80c 	bl	8001930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800091e:	4890      	ldr	r0, [pc, #576]	; (8000b60 <MX_GPIO_Init+0x314>)
 8000920:	f001 f806 	bl	8001930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000924:	2201      	movs	r2, #1
 8000926:	2120      	movs	r1, #32
 8000928:	488b      	ldr	r0, [pc, #556]	; (8000b58 <MX_GPIO_Init+0x30c>)
 800092a:	f001 f801 	bl	8001930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800092e:	2201      	movs	r2, #1
 8000930:	2101      	movs	r1, #1
 8000932:	4888      	ldr	r0, [pc, #544]	; (8000b54 <MX_GPIO_Init+0x308>)
 8000934:	f000 fffc 	bl	8001930 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000938:	f240 1315 	movw	r3, #277	; 0x115
 800093c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4619      	mov	r1, r3
 8000950:	4880      	ldr	r0, [pc, #512]	; (8000b54 <MX_GPIO_Init+0x308>)
 8000952:	f000 fe2b 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000956:	236a      	movs	r3, #106	; 0x6a
 8000958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800095a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800095e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	487a      	ldr	r0, [pc, #488]	; (8000b54 <MX_GPIO_Init+0x308>)
 800096c:	f000 fe1e 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pin : f_sw13_Pin */
  GPIO_InitStruct.Pin = f_sw13_Pin;
 8000970:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000976:	2300      	movs	r3, #0
 8000978:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(f_sw13_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4619      	mov	r1, r3
 8000984:	4876      	ldr	r0, [pc, #472]	; (8000b60 <MX_GPIO_Init+0x314>)
 8000986:	f000 fe11 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 800098a:	233f      	movs	r3, #63	; 0x3f
 800098c:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800098e:	230b      	movs	r3, #11
 8000990:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	4870      	ldr	r0, [pc, #448]	; (8000b60 <MX_GPIO_Init+0x314>)
 800099e:	f000 fe05 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80009a2:	2303      	movs	r3, #3
 80009a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	2302      	movs	r3, #2
 80009a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ae:	2303      	movs	r3, #3
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80009b2:	2308      	movs	r3, #8
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	4619      	mov	r1, r3
 80009bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c0:	f000 fdf4 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80009c4:	f248 1304 	movw	r3, #33028	; 0x8104
 80009c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4619      	mov	r1, r3
 80009dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e0:	f000 fde4 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80009e4:	2308      	movs	r3, #8
 80009e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009f4:	2301      	movs	r3, #1
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a02:	f000 fdd3 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000a06:	2310      	movs	r3, #16
 8000a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a0a:	230b      	movs	r3, #11
 8000a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	4619      	mov	r1, r3
 8000a18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1c:	f000 fdc6 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000a20:	23e0      	movs	r3, #224	; 0xe0
 8000a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a24:	2302      	movs	r3, #2
 8000a26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a30:	2305      	movs	r3, #5
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3e:	f000 fdb5 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000a42:	2301      	movs	r3, #1
 8000a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a46:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	4840      	ldr	r0, [pc, #256]	; (8000b58 <MX_GPIO_Init+0x30c>)
 8000a58:	f000 fda8 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a60:	230b      	movs	r3, #11
 8000a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	483a      	ldr	r0, [pc, #232]	; (8000b58 <MX_GPIO_Init+0x30c>)
 8000a70:	f000 fd9c 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000a74:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000a78:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4832      	ldr	r0, [pc, #200]	; (8000b58 <MX_GPIO_Init+0x30c>)
 8000a8e:	f000 fd8d 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000a92:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000aa4:	2306      	movs	r3, #6
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	4829      	ldr	r0, [pc, #164]	; (8000b54 <MX_GPIO_Init+0x308>)
 8000ab0:	f000 fd7c 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000ab4:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000ab8:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000ac6:	230a      	movs	r3, #10
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4820      	ldr	r0, [pc, #128]	; (8000b54 <MX_GPIO_Init+0x308>)
 8000ad2:	f000 fd6b 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000ad6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000adc:	2312      	movs	r3, #18
 8000ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ae8:	2304      	movs	r3, #4
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4619      	mov	r1, r3
 8000af2:	4819      	ldr	r0, [pc, #100]	; (8000b58 <MX_GPIO_Init+0x30c>)
 8000af4:	f000 fd5a 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000af8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000afc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b06:	2303      	movs	r3, #3
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b0a:	2307      	movs	r3, #7
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	4811      	ldr	r0, [pc, #68]	; (8000b5c <MX_GPIO_Init+0x310>)
 8000b16:	f000 fd49 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000b1a:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000b1e:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b20:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	480a      	ldr	r0, [pc, #40]	; (8000b5c <MX_GPIO_Init+0x310>)
 8000b32:	f000 fd3b 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000b36:	f243 0381 	movw	r3, #12417	; 0x3081
 8000b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	e009      	b.n	8000b64 <MX_GPIO_Init+0x318>
 8000b50:	40021000 	.word	0x40021000
 8000b54:	48001000 	.word	0x48001000
 8000b58:	48000400 	.word	0x48000400
 8000b5c:	48000c00 	.word	0x48000c00
 8000b60:	48000800 	.word	0x48000800
 8000b64:	484a      	ldr	r0, [pc, #296]	; (8000c90 <MX_GPIO_Init+0x444>)
 8000b66:	f000 fd21 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000b6a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4619      	mov	r1, r3
 8000b82:	4844      	ldr	r0, [pc, #272]	; (8000c94 <MX_GPIO_Init+0x448>)
 8000b84:	f000 fd12 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000b88:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b8e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	483d      	ldr	r0, [pc, #244]	; (8000c94 <MX_GPIO_Init+0x448>)
 8000ba0:	f000 fd04 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000ba4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bbc:	f000 fcf6 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000bc0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bd2:	230a      	movs	r3, #10
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be0:	f000 fce4 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000be4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bf6:	2306      	movs	r3, #6
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4824      	ldr	r0, [pc, #144]	; (8000c94 <MX_GPIO_Init+0x448>)
 8000c02:	f000 fcd3 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000c06:	2302      	movs	r3, #2
 8000c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c12:	2303      	movs	r3, #3
 8000c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c16:	2305      	movs	r3, #5
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4619      	mov	r1, r3
 8000c20:	481b      	ldr	r0, [pc, #108]	; (8000c90 <MX_GPIO_Init+0x444>)
 8000c22:	f000 fcc3 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000c26:	2378      	movs	r3, #120	; 0x78
 8000c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c32:	2303      	movs	r3, #3
 8000c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c36:	2307      	movs	r3, #7
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4813      	ldr	r0, [pc, #76]	; (8000c90 <MX_GPIO_Init+0x444>)
 8000c42:	f000 fcb3 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000c46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c4c:	2312      	movs	r3, #18
 8000c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c54:	2303      	movs	r3, #3
 8000c56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c58:	2304      	movs	r3, #4
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4619      	mov	r1, r3
 8000c62:	480d      	ldr	r0, [pc, #52]	; (8000c98 <MX_GPIO_Init+0x44c>)
 8000c64:	f000 fca2 	bl	80015ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2017      	movs	r0, #23
 8000c6e:	f000 fbe8 	bl	8001442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c72:	2017      	movs	r0, #23
 8000c74:	f000 fc01 	bl	800147a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	2028      	movs	r0, #40	; 0x28
 8000c7e:	f000 fbe0 	bl	8001442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c82:	2028      	movs	r0, #40	; 0x28
 8000c84:	f000 fbf9 	bl	800147a <HAL_NVIC_EnableIRQ>

}
 8000c88:	bf00      	nop
 8000c8a:	3728      	adds	r7, #40	; 0x28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	48000c00 	.word	0x48000c00
 8000c94:	48000800 	.word	0x48000800
 8000c98:	48000400 	.word	0x48000400

08000c9c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
    if(huart -> Instance == USART1)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a14      	ldr	r2, [pc, #80]	; (8000cfc <HAL_UART_RxCpltCallback+0x60>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d122      	bne.n	8000cf4 <HAL_UART_RxCpltCallback+0x58>
    {
    	//if((rxData[0]!='\r')||(rxData[0]!='\e'))
    	//if(rxData[0]!='\e')
    	//if(rxData[0]!='\r')
    	//if(rxData[0]!='[')
    	printf("%d\n",rxData[0]);
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <HAL_UART_RxCpltCallback+0x64>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4813      	ldr	r0, [pc, #76]	; (8000d04 <HAL_UART_RxCpltCallback+0x68>)
 8000cb6:	f003 ffdd 	bl	8004c74 <iprintf>
    	//if(rxData[0]!='\e')
    	if(rxData[0]!='\r')
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_UART_RxCpltCallback+0x64>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b0d      	cmp	r3, #13
 8000cc0:	d00d      	beq.n	8000cde <HAL_UART_RxCpltCallback+0x42>
    	{
            rxBuffer[rxIndex]=rxData[0];
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <HAL_UART_RxCpltCallback+0x6c>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <HAL_UART_RxCpltCallback+0x64>)
 8000cca:	7819      	ldrb	r1, [r3, #0]
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <HAL_UART_RxCpltCallback+0x70>)
 8000cce:	5499      	strb	r1, [r3, r2]
            rxIndex++;
 8000cd0:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <HAL_UART_RxCpltCallback+0x6c>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <HAL_UART_RxCpltCallback+0x6c>)
 8000cda:	701a      	strb	r2, [r3, #0]
 8000cdc:	e005      	b.n	8000cea <HAL_UART_RxCpltCallback+0x4e>

        }
        else
        {
            newMsg=1;
 8000cde:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <HAL_UART_RxCpltCallback+0x74>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	701a      	strb	r2, [r3, #0]
            rxIndex=0;
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <HAL_UART_RxCpltCallback+0x6c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(&huart1 ,rxData,1);
 8000cea:	2201      	movs	r2, #1
 8000cec:	4904      	ldr	r1, [pc, #16]	; (8000d00 <HAL_UART_RxCpltCallback+0x64>)
 8000cee:	4809      	ldr	r0, [pc, #36]	; (8000d14 <HAL_UART_RxCpltCallback+0x78>)
 8000cf0:	f002 fd24 	bl	800373c <HAL_UART_Receive_IT>
    }
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40013800 	.word	0x40013800
 8000d00:	20000168 	.word	0x20000168
 8000d04:	08005c54 	.word	0x08005c54
 8000d08:	20000155 	.word	0x20000155
 8000d0c:	200001f0 	.word	0x200001f0
 8000d10:	20000154 	.word	0x20000154
 8000d14:	2000016c 	.word	0x2000016c

08000d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d1c:	b672      	cpsid	i
}
 8000d1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <Error_Handler+0x8>
	...

08000d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <HAL_MspInit+0x44>)
 8000d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d2e:	4a0e      	ldr	r2, [pc, #56]	; (8000d68 <HAL_MspInit+0x44>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6613      	str	r3, [r2, #96]	; 0x60
 8000d36:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <HAL_MspInit+0x44>)
 8000d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <HAL_MspInit+0x44>)
 8000d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d46:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <HAL_MspInit+0x44>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_MspInit+0x44>)
 8000d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	40021000 	.word	0x40021000

08000d6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0d      	ldr	r2, [pc, #52]	; (8000db0 <HAL_TIM_Base_MspInit+0x44>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d113      	bne.n	8000da6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <HAL_TIM_Base_MspInit+0x48>)
 8000d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d82:	4a0c      	ldr	r2, [pc, #48]	; (8000db4 <HAL_TIM_Base_MspInit+0x48>)
 8000d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d88:	6613      	str	r3, [r2, #96]	; 0x60
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <HAL_TIM_Base_MspInit+0x48>)
 8000d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2019      	movs	r0, #25
 8000d9c:	f000 fb51 	bl	8001442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000da0:	2019      	movs	r0, #25
 8000da2:	f000 fb6a 	bl	800147a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000da6:	bf00      	nop
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40014400 	.word	0x40014400
 8000db4:	40021000 	.word	0x40021000

08000db8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b0ac      	sub	sp, #176	; 0xb0
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2288      	movs	r2, #136	; 0x88
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f003 ff43 	bl	8004c64 <memset>
  if(huart->Instance==USART1)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a25      	ldr	r2, [pc, #148]	; (8000e78 <HAL_UART_MspInit+0xc0>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d142      	bne.n	8000e6e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000de8:	2301      	movs	r3, #1
 8000dea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000dec:	2300      	movs	r3, #0
 8000dee:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4618      	mov	r0, r3
 8000df6:	f001 fc39 	bl	800266c <HAL_RCCEx_PeriphCLKConfig>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e00:	f7ff ff8a 	bl	8000d18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e04:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <HAL_UART_MspInit+0xc4>)
 8000e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e08:	4a1c      	ldr	r2, [pc, #112]	; (8000e7c <HAL_UART_MspInit+0xc4>)
 8000e0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e0e:	6613      	str	r3, [r2, #96]	; 0x60
 8000e10:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <HAL_UART_MspInit+0xc4>)
 8000e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1c:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <HAL_UART_MspInit+0xc4>)
 8000e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e20:	4a16      	ldr	r2, [pc, #88]	; (8000e7c <HAL_UART_MspInit+0xc4>)
 8000e22:	f043 0302 	orr.w	r3, r3, #2
 8000e26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e28:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <HAL_UART_MspInit+0xc4>)
 8000e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2c:	f003 0302 	and.w	r3, r3, #2
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000e34:	23c0      	movs	r3, #192	; 0xc0
 8000e36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e4c:	2307      	movs	r3, #7
 8000e4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e52:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e56:	4619      	mov	r1, r3
 8000e58:	4809      	ldr	r0, [pc, #36]	; (8000e80 <HAL_UART_MspInit+0xc8>)
 8000e5a:	f000 fba7 	bl	80015ac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2100      	movs	r1, #0
 8000e62:	2025      	movs	r0, #37	; 0x25
 8000e64:	f000 faed 	bl	8001442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e68:	2025      	movs	r0, #37	; 0x25
 8000e6a:	f000 fb06 	bl	800147a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e6e:	bf00      	nop
 8000e70:	37b0      	adds	r7, #176	; 0xb0
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40013800 	.word	0x40013800
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	48000400 	.word	0x48000400

08000e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <NMI_Handler+0x4>

08000e8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <HardFault_Handler+0x4>

08000e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <MemManage_Handler+0x4>

08000e96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <BusFault_Handler+0x4>

08000e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <UsageFault_Handler+0x4>

08000ea2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed0:	f000 f998 	bl	8001204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000edc:	2020      	movs	r0, #32
 8000ede:	f000 fd3f 	bl	8001960 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000ee2:	2040      	movs	r0, #64	; 0x40
 8000ee4:	f000 fd3c 	bl	8001960 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000ee8:	2080      	movs	r0, #128	; 0x80
 8000eea:	f000 fd39 	bl	8001960 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000eee:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000ef2:	f000 fd35 	bl	8001960 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000f00:	4802      	ldr	r0, [pc, #8]	; (8000f0c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000f02:	f002 f92f 	bl	8003164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000204 	.word	0x20000204

08000f10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f14:	4802      	ldr	r0, [pc, #8]	; (8000f20 <USART1_IRQHandler+0x10>)
 8000f16:	f002 fc67 	bl	80037e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	2000016c 	.word	0x2000016c

08000f24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000f28:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000f2c:	f000 fd18 	bl	8001960 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000f30:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000f34:	f000 fd14 	bl	8001960 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000f38:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000f3c:	f000 fd10 	bl	8001960 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000f40:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000f44:	f000 fd0c 	bl	8001960 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <ITM_SendChar+0x48>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a0e      	ldr	r2, [pc, #56]	; (8000f94 <ITM_SendChar+0x48>)
 8000f5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f60:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000f62:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <ITM_SendChar+0x4c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a0c      	ldr	r2, [pc, #48]	; (8000f98 <ITM_SendChar+0x4c>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000f6e:	bf00      	nop
 8000f70:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d0f8      	beq.n	8000f70 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000f7e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	6013      	str	r3, [r2, #0]
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000edfc 	.word	0xe000edfc
 8000f98:	e0000e00 	.word	0xe0000e00

08000f9c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	e00a      	b.n	8000fc4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fae:	f3af 8000 	nop.w
 8000fb2:	4601      	mov	r1, r0
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	1c5a      	adds	r2, r3, #1
 8000fb8:	60ba      	str	r2, [r7, #8]
 8000fba:	b2ca      	uxtb	r2, r1
 8000fbc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	dbf0      	blt.n	8000fae <_read+0x12>
	}

return len;
 8000fcc:	687b      	ldr	r3, [r7, #4]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b086      	sub	sp, #24
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	60f8      	str	r0, [r7, #12]
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
 8000fe6:	e009      	b.n	8000ffc <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	1c5a      	adds	r2, r3, #1
 8000fec:	60ba      	str	r2, [r7, #8]
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ffab 	bl	8000f4c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	697a      	ldr	r2, [r7, #20]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	429a      	cmp	r2, r3
 8001002:	dbf1      	blt.n	8000fe8 <_write+0x12>
	}
	return len;
 8001004:	687b      	ldr	r3, [r7, #4]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <_close>:

int _close(int file)
{
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
	return -1;
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
}
 800101a:	4618      	mov	r0, r3
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001036:	605a      	str	r2, [r3, #4]
	return 0;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <_isatty>:

int _isatty(int file)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
	return 1;
 800104e:	2301      	movs	r3, #1
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
	return 0;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3714      	adds	r7, #20
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
	...

08001078 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001080:	4a14      	ldr	r2, [pc, #80]	; (80010d4 <_sbrk+0x5c>)
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <_sbrk+0x60>)
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800108c:	4b13      	ldr	r3, [pc, #76]	; (80010dc <_sbrk+0x64>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d102      	bne.n	800109a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <_sbrk+0x64>)
 8001096:	4a12      	ldr	r2, [pc, #72]	; (80010e0 <_sbrk+0x68>)
 8001098:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800109a:	4b10      	ldr	r3, [pc, #64]	; (80010dc <_sbrk+0x64>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d207      	bcs.n	80010b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010a8:	f003 fdb2 	bl	8004c10 <__errno>
 80010ac:	4603      	mov	r3, r0
 80010ae:	220c      	movs	r2, #12
 80010b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295
 80010b6:	e009      	b.n	80010cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <_sbrk+0x64>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <_sbrk+0x64>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	4a05      	ldr	r2, [pc, #20]	; (80010dc <_sbrk+0x64>)
 80010c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ca:	68fb      	ldr	r3, [r7, #12]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20018000 	.word	0x20018000
 80010d8:	00000400 	.word	0x00000400
 80010dc:	2000015c 	.word	0x2000015c
 80010e0:	20000268 	.word	0x20000268

080010e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <SystemInit+0x20>)
 80010ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ee:	4a05      	ldr	r2, [pc, #20]	; (8001104 <SystemInit+0x20>)
 80010f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001108:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001140 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800110c:	f7ff ffea 	bl	80010e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001110:	480c      	ldr	r0, [pc, #48]	; (8001144 <LoopForever+0x6>)
  ldr r1, =_edata
 8001112:	490d      	ldr	r1, [pc, #52]	; (8001148 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001114:	4a0d      	ldr	r2, [pc, #52]	; (800114c <LoopForever+0xe>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001118:	e002      	b.n	8001120 <LoopCopyDataInit>

0800111a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800111c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111e:	3304      	adds	r3, #4

08001120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001124:	d3f9      	bcc.n	800111a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001126:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001128:	4c0a      	ldr	r4, [pc, #40]	; (8001154 <LoopForever+0x16>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800112c:	e001      	b.n	8001132 <LoopFillZerobss>

0800112e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001130:	3204      	adds	r2, #4

08001132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001134:	d3fb      	bcc.n	800112e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001136:	f003 fd71 	bl	8004c1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800113a:	f7ff fa79 	bl	8000630 <main>

0800113e <LoopForever>:

LoopForever:
    b LoopForever
 800113e:	e7fe      	b.n	800113e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001140:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001148:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 800114c:	08005d48 	.word	0x08005d48
  ldr r2, =_sbss
 8001150:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 8001154:	20000264 	.word	0x20000264

08001158 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001158:	e7fe      	b.n	8001158 <ADC1_2_IRQHandler>

0800115a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001160:	2300      	movs	r3, #0
 8001162:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001164:	2003      	movs	r0, #3
 8001166:	f000 f961 	bl	800142c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800116a:	2000      	movs	r0, #0
 800116c:	f000 f80e 	bl	800118c <HAL_InitTick>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d002      	beq.n	800117c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	71fb      	strb	r3, [r7, #7]
 800117a:	e001      	b.n	8001180 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800117c:	f7ff fdd2 	bl	8000d24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001180:	79fb      	ldrb	r3, [r7, #7]
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001194:	2300      	movs	r3, #0
 8001196:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001198:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <HAL_InitTick+0x6c>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d023      	beq.n	80011e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011a0:	4b16      	ldr	r3, [pc, #88]	; (80011fc <HAL_InitTick+0x70>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <HAL_InitTick+0x6c>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	4619      	mov	r1, r3
 80011aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 f96d 	bl	8001496 <HAL_SYSTICK_Config>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d10f      	bne.n	80011e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b0f      	cmp	r3, #15
 80011c6:	d809      	bhi.n	80011dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c8:	2200      	movs	r2, #0
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295
 80011d0:	f000 f937 	bl	8001442 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011d4:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <HAL_InitTick+0x74>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	e007      	b.n	80011ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	73fb      	strb	r3, [r7, #15]
 80011e0:	e004      	b.n	80011ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	73fb      	strb	r3, [r7, #15]
 80011e6:	e001      	b.n	80011ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200000d0 	.word	0x200000d0
 80011fc:	200000c8 	.word	0x200000c8
 8001200:	200000cc 	.word	0x200000cc

08001204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_IncTick+0x20>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_IncTick+0x24>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4413      	add	r3, r2
 8001214:	4a04      	ldr	r2, [pc, #16]	; (8001228 <HAL_IncTick+0x24>)
 8001216:	6013      	str	r3, [r2, #0]
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	200000d0 	.word	0x200000d0
 8001228:	20000250 	.word	0x20000250

0800122c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return uwTick;
 8001230:	4b03      	ldr	r3, [pc, #12]	; (8001240 <HAL_GetTick+0x14>)
 8001232:	681b      	ldr	r3, [r3, #0]
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000250 	.word	0x20000250

08001244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800124c:	f7ff ffee 	bl	800122c <HAL_GetTick>
 8001250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800125c:	d005      	beq.n	800126a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <HAL_Delay+0x44>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4413      	add	r3, r2
 8001268:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800126a:	bf00      	nop
 800126c:	f7ff ffde 	bl	800122c <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	429a      	cmp	r2, r3
 800127a:	d8f7      	bhi.n	800126c <HAL_Delay+0x28>
  {
  }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200000d0 	.word	0x200000d0

0800128c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <__NVIC_SetPriorityGrouping+0x44>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a8:	4013      	ands	r3, r2
 80012aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012be:	4a04      	ldr	r2, [pc, #16]	; (80012d0 <__NVIC_SetPriorityGrouping+0x44>)
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	60d3      	str	r3, [r2, #12]
}
 80012c4:	bf00      	nop
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d8:	4b04      	ldr	r3, [pc, #16]	; (80012ec <__NVIC_GetPriorityGrouping+0x18>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	0a1b      	lsrs	r3, r3, #8
 80012de:	f003 0307 	and.w	r3, r3, #7
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	db0b      	blt.n	800131a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	f003 021f 	and.w	r2, r3, #31
 8001308:	4907      	ldr	r1, [pc, #28]	; (8001328 <__NVIC_EnableIRQ+0x38>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	095b      	lsrs	r3, r3, #5
 8001310:	2001      	movs	r0, #1
 8001312:	fa00 f202 	lsl.w	r2, r0, r2
 8001316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000e100 	.word	0xe000e100

0800132c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	6039      	str	r1, [r7, #0]
 8001336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133c:	2b00      	cmp	r3, #0
 800133e:	db0a      	blt.n	8001356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	b2da      	uxtb	r2, r3
 8001344:	490c      	ldr	r1, [pc, #48]	; (8001378 <__NVIC_SetPriority+0x4c>)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	0112      	lsls	r2, r2, #4
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	440b      	add	r3, r1
 8001350:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001354:	e00a      	b.n	800136c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	b2da      	uxtb	r2, r3
 800135a:	4908      	ldr	r1, [pc, #32]	; (800137c <__NVIC_SetPriority+0x50>)
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	f003 030f 	and.w	r3, r3, #15
 8001362:	3b04      	subs	r3, #4
 8001364:	0112      	lsls	r2, r2, #4
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	440b      	add	r3, r1
 800136a:	761a      	strb	r2, [r3, #24]
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000e100 	.word	0xe000e100
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001380:	b480      	push	{r7}
 8001382:	b089      	sub	sp, #36	; 0x24
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f1c3 0307 	rsb	r3, r3, #7
 800139a:	2b04      	cmp	r3, #4
 800139c:	bf28      	it	cs
 800139e:	2304      	movcs	r3, #4
 80013a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3304      	adds	r3, #4
 80013a6:	2b06      	cmp	r3, #6
 80013a8:	d902      	bls.n	80013b0 <NVIC_EncodePriority+0x30>
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3b03      	subs	r3, #3
 80013ae:	e000      	b.n	80013b2 <NVIC_EncodePriority+0x32>
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	f04f 32ff 	mov.w	r2, #4294967295
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43da      	mvns	r2, r3
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	401a      	ands	r2, r3
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c8:	f04f 31ff 	mov.w	r1, #4294967295
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	fa01 f303 	lsl.w	r3, r1, r3
 80013d2:	43d9      	mvns	r1, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d8:	4313      	orrs	r3, r2
         );
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3724      	adds	r7, #36	; 0x24
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
	...

080013e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013f8:	d301      	bcc.n	80013fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013fa:	2301      	movs	r3, #1
 80013fc:	e00f      	b.n	800141e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013fe:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <SysTick_Config+0x40>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3b01      	subs	r3, #1
 8001404:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001406:	210f      	movs	r1, #15
 8001408:	f04f 30ff 	mov.w	r0, #4294967295
 800140c:	f7ff ff8e 	bl	800132c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <SysTick_Config+0x40>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001416:	4b04      	ldr	r3, [pc, #16]	; (8001428 <SysTick_Config+0x40>)
 8001418:	2207      	movs	r2, #7
 800141a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	e000e010 	.word	0xe000e010

0800142c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ff29 	bl	800128c <__NVIC_SetPriorityGrouping>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b086      	sub	sp, #24
 8001446:	af00      	add	r7, sp, #0
 8001448:	4603      	mov	r3, r0
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001454:	f7ff ff3e 	bl	80012d4 <__NVIC_GetPriorityGrouping>
 8001458:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	68b9      	ldr	r1, [r7, #8]
 800145e:	6978      	ldr	r0, [r7, #20]
 8001460:	f7ff ff8e 	bl	8001380 <NVIC_EncodePriority>
 8001464:	4602      	mov	r2, r0
 8001466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146a:	4611      	mov	r1, r2
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff5d 	bl	800132c <__NVIC_SetPriority>
}
 8001472:	bf00      	nop
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ff31 	bl	80012f0 <__NVIC_EnableIRQ>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff ffa2 	bl	80013e8 <SysTick_Config>
 80014a4:	4603      	mov	r3, r0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b085      	sub	sp, #20
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d008      	beq.n	80014d8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2204      	movs	r2, #4
 80014ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e022      	b.n	800151e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 020e 	bic.w	r2, r2, #14
 80014e6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 0201 	bic.w	r2, r2, #1
 80014f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fc:	f003 021c 	and.w	r2, r3, #28
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	2101      	movs	r1, #1
 8001506:	fa01 f202 	lsl.w	r2, r1, r2
 800150a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2201      	movs	r2, #1
 8001510:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800151c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800151e:	4618      	mov	r0, r3
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b084      	sub	sp, #16
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001532:	2300      	movs	r3, #0
 8001534:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d005      	beq.n	800154e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2204      	movs	r2, #4
 8001546:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	73fb      	strb	r3, [r7, #15]
 800154c:	e029      	b.n	80015a2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 020e 	bic.w	r2, r2, #14
 800155c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f022 0201 	bic.w	r2, r2, #1
 800156c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	f003 021c 	and.w	r2, r3, #28
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	2101      	movs	r1, #1
 800157c:	fa01 f202 	lsl.w	r2, r1, r2
 8001580:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2201      	movs	r2, #1
 8001586:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	4798      	blx	r3
    }
  }
  return status;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b087      	sub	sp, #28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ba:	e17f      	b.n	80018bc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	2101      	movs	r1, #1
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	fa01 f303 	lsl.w	r3, r1, r3
 80015c8:	4013      	ands	r3, r2
 80015ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 8171 	beq.w	80018b6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 0303 	and.w	r3, r3, #3
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d005      	beq.n	80015ec <HAL_GPIO_Init+0x40>
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 0303 	and.w	r3, r3, #3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d130      	bne.n	800164e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	2203      	movs	r2, #3
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	4013      	ands	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	68da      	ldr	r2, [r3, #12]
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	4313      	orrs	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001622:	2201      	movs	r2, #1
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4013      	ands	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	091b      	lsrs	r3, r3, #4
 8001638:	f003 0201 	and.w	r2, r3, #1
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	4313      	orrs	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f003 0303 	and.w	r3, r3, #3
 8001656:	2b03      	cmp	r3, #3
 8001658:	d118      	bne.n	800168c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001660:	2201      	movs	r2, #1
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4013      	ands	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	08db      	lsrs	r3, r3, #3
 8001676:	f003 0201 	and.w	r2, r3, #1
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4313      	orrs	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	2b03      	cmp	r3, #3
 8001696:	d017      	beq.n	80016c8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	2203      	movs	r2, #3
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4313      	orrs	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 0303 	and.w	r3, r3, #3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d123      	bne.n	800171c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	08da      	lsrs	r2, r3, #3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3208      	adds	r2, #8
 80016dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	220f      	movs	r2, #15
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	691a      	ldr	r2, [r3, #16]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	4313      	orrs	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	08da      	lsrs	r2, r3, #3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3208      	adds	r2, #8
 8001716:	6939      	ldr	r1, [r7, #16]
 8001718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	2203      	movs	r2, #3
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4013      	ands	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 0203 	and.w	r2, r3, #3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	4313      	orrs	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 80ac 	beq.w	80018b6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175e:	4b5f      	ldr	r3, [pc, #380]	; (80018dc <HAL_GPIO_Init+0x330>)
 8001760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001762:	4a5e      	ldr	r2, [pc, #376]	; (80018dc <HAL_GPIO_Init+0x330>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6613      	str	r3, [r2, #96]	; 0x60
 800176a:	4b5c      	ldr	r3, [pc, #368]	; (80018dc <HAL_GPIO_Init+0x330>)
 800176c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001776:	4a5a      	ldr	r2, [pc, #360]	; (80018e0 <HAL_GPIO_Init+0x334>)
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	089b      	lsrs	r3, r3, #2
 800177c:	3302      	adds	r3, #2
 800177e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001782:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	220f      	movs	r2, #15
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4013      	ands	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017a0:	d025      	beq.n	80017ee <HAL_GPIO_Init+0x242>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a4f      	ldr	r2, [pc, #316]	; (80018e4 <HAL_GPIO_Init+0x338>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d01f      	beq.n	80017ea <HAL_GPIO_Init+0x23e>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a4e      	ldr	r2, [pc, #312]	; (80018e8 <HAL_GPIO_Init+0x33c>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d019      	beq.n	80017e6 <HAL_GPIO_Init+0x23a>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a4d      	ldr	r2, [pc, #308]	; (80018ec <HAL_GPIO_Init+0x340>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d013      	beq.n	80017e2 <HAL_GPIO_Init+0x236>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a4c      	ldr	r2, [pc, #304]	; (80018f0 <HAL_GPIO_Init+0x344>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d00d      	beq.n	80017de <HAL_GPIO_Init+0x232>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a4b      	ldr	r2, [pc, #300]	; (80018f4 <HAL_GPIO_Init+0x348>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d007      	beq.n	80017da <HAL_GPIO_Init+0x22e>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a4a      	ldr	r2, [pc, #296]	; (80018f8 <HAL_GPIO_Init+0x34c>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d101      	bne.n	80017d6 <HAL_GPIO_Init+0x22a>
 80017d2:	2306      	movs	r3, #6
 80017d4:	e00c      	b.n	80017f0 <HAL_GPIO_Init+0x244>
 80017d6:	2307      	movs	r3, #7
 80017d8:	e00a      	b.n	80017f0 <HAL_GPIO_Init+0x244>
 80017da:	2305      	movs	r3, #5
 80017dc:	e008      	b.n	80017f0 <HAL_GPIO_Init+0x244>
 80017de:	2304      	movs	r3, #4
 80017e0:	e006      	b.n	80017f0 <HAL_GPIO_Init+0x244>
 80017e2:	2303      	movs	r3, #3
 80017e4:	e004      	b.n	80017f0 <HAL_GPIO_Init+0x244>
 80017e6:	2302      	movs	r3, #2
 80017e8:	e002      	b.n	80017f0 <HAL_GPIO_Init+0x244>
 80017ea:	2301      	movs	r3, #1
 80017ec:	e000      	b.n	80017f0 <HAL_GPIO_Init+0x244>
 80017ee:	2300      	movs	r3, #0
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	f002 0203 	and.w	r2, r2, #3
 80017f6:	0092      	lsls	r2, r2, #2
 80017f8:	4093      	lsls	r3, r2
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001800:	4937      	ldr	r1, [pc, #220]	; (80018e0 <HAL_GPIO_Init+0x334>)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	089b      	lsrs	r3, r3, #2
 8001806:	3302      	adds	r3, #2
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800180e:	4b3b      	ldr	r3, [pc, #236]	; (80018fc <HAL_GPIO_Init+0x350>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	43db      	mvns	r3, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4013      	ands	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4313      	orrs	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001832:	4a32      	ldr	r2, [pc, #200]	; (80018fc <HAL_GPIO_Init+0x350>)
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001838:	4b30      	ldr	r3, [pc, #192]	; (80018fc <HAL_GPIO_Init+0x350>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	43db      	mvns	r3, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	4313      	orrs	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800185c:	4a27      	ldr	r2, [pc, #156]	; (80018fc <HAL_GPIO_Init+0x350>)
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001862:	4b26      	ldr	r3, [pc, #152]	; (80018fc <HAL_GPIO_Init+0x350>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	43db      	mvns	r3, r3
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4013      	ands	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d003      	beq.n	8001886 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4313      	orrs	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001886:	4a1d      	ldr	r2, [pc, #116]	; (80018fc <HAL_GPIO_Init+0x350>)
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800188c:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <HAL_GPIO_Init+0x350>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	43db      	mvns	r3, r3
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4013      	ands	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018b0:	4a12      	ldr	r2, [pc, #72]	; (80018fc <HAL_GPIO_Init+0x350>)
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	3301      	adds	r3, #1
 80018ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	fa22 f303 	lsr.w	r3, r2, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f47f ae78 	bne.w	80015bc <HAL_GPIO_Init+0x10>
  }
}
 80018cc:	bf00      	nop
 80018ce:	bf00      	nop
 80018d0:	371c      	adds	r7, #28
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40010000 	.word	0x40010000
 80018e4:	48000400 	.word	0x48000400
 80018e8:	48000800 	.word	0x48000800
 80018ec:	48000c00 	.word	0x48000c00
 80018f0:	48001000 	.word	0x48001000
 80018f4:	48001400 	.word	0x48001400
 80018f8:	48001800 	.word	0x48001800
 80018fc:	40010400 	.word	0x40010400

08001900 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691a      	ldr	r2, [r3, #16]
 8001910:	887b      	ldrh	r3, [r7, #2]
 8001912:	4013      	ands	r3, r2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d002      	beq.n	800191e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001918:	2301      	movs	r3, #1
 800191a:	73fb      	strb	r3, [r7, #15]
 800191c:	e001      	b.n	8001922 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800191e:	2300      	movs	r3, #0
 8001920:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001922:	7bfb      	ldrb	r3, [r7, #15]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	807b      	strh	r3, [r7, #2]
 800193c:	4613      	mov	r3, r2
 800193e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001940:	787b      	ldrb	r3, [r7, #1]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001946:	887a      	ldrh	r2, [r7, #2]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800194c:	e002      	b.n	8001954 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800194e:	887a      	ldrh	r2, [r7, #2]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800196a:	4b08      	ldr	r3, [pc, #32]	; (800198c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800196c:	695a      	ldr	r2, [r3, #20]
 800196e:	88fb      	ldrh	r3, [r7, #6]
 8001970:	4013      	ands	r3, r2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d006      	beq.n	8001984 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001976:	4a05      	ldr	r2, [pc, #20]	; (800198c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001978:	88fb      	ldrh	r3, [r7, #6]
 800197a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800197c:	88fb      	ldrh	r3, [r7, #6]
 800197e:	4618      	mov	r0, r3
 8001980:	f000 f806 	bl	8001990 <HAL_GPIO_EXTI_Callback>
  }
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40010400 	.word	0x40010400

08001990 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
	...

080019a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019ac:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40007000 	.word	0x40007000

080019c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019d2:	d130      	bne.n	8001a36 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019d4:	4b23      	ldr	r3, [pc, #140]	; (8001a64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019e0:	d038      	beq.n	8001a54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019e2:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019ea:	4a1e      	ldr	r2, [pc, #120]	; (8001a64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019f2:	4b1d      	ldr	r3, [pc, #116]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2232      	movs	r2, #50	; 0x32
 80019f8:	fb02 f303 	mul.w	r3, r2, r3
 80019fc:	4a1b      	ldr	r2, [pc, #108]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001a02:	0c9b      	lsrs	r3, r3, #18
 8001a04:	3301      	adds	r3, #1
 8001a06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a08:	e002      	b.n	8001a10 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a10:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a1c:	d102      	bne.n	8001a24 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1f2      	bne.n	8001a0a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a24:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a30:	d110      	bne.n	8001a54 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e00f      	b.n	8001a56 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a36:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a42:	d007      	beq.n	8001a54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a44:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a4c:	4a05      	ldr	r2, [pc, #20]	; (8001a64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a52:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	40007000 	.word	0x40007000
 8001a68:	200000c8 	.word	0x200000c8
 8001a6c:	431bde83 	.word	0x431bde83

08001a70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b088      	sub	sp, #32
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e3c6      	b.n	8002210 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a82:	4ba1      	ldr	r3, [pc, #644]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 030c 	and.w	r3, r3, #12
 8001a8a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a8c:	4b9e      	ldr	r3, [pc, #632]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0310 	and.w	r3, r3, #16
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 80e4 	beq.w	8001c6c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d007      	beq.n	8001aba <HAL_RCC_OscConfig+0x4a>
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	2b0c      	cmp	r3, #12
 8001aae:	f040 808b 	bne.w	8001bc8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	f040 8087 	bne.w	8001bc8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001aba:	4b93      	ldr	r3, [pc, #588]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d005      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x62>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e39e      	b.n	8002210 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a1a      	ldr	r2, [r3, #32]
 8001ad6:	4b8c      	ldr	r3, [pc, #560]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d004      	beq.n	8001aec <HAL_RCC_OscConfig+0x7c>
 8001ae2:	4b89      	ldr	r3, [pc, #548]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aea:	e005      	b.n	8001af8 <HAL_RCC_OscConfig+0x88>
 8001aec:	4b86      	ldr	r3, [pc, #536]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af2:	091b      	lsrs	r3, r3, #4
 8001af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d223      	bcs.n	8001b44 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f000 fd53 	bl	80025ac <RCC_SetFlashLatencyFromMSIRange>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e37f      	b.n	8002210 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b10:	4b7d      	ldr	r3, [pc, #500]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a7c      	ldr	r2, [pc, #496]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001b16:	f043 0308 	orr.w	r3, r3, #8
 8001b1a:	6013      	str	r3, [r2, #0]
 8001b1c:	4b7a      	ldr	r3, [pc, #488]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	4977      	ldr	r1, [pc, #476]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b2e:	4b76      	ldr	r3, [pc, #472]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	4972      	ldr	r1, [pc, #456]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	604b      	str	r3, [r1, #4]
 8001b42:	e025      	b.n	8001b90 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b44:	4b70      	ldr	r3, [pc, #448]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a6f      	ldr	r2, [pc, #444]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001b4a:	f043 0308 	orr.w	r3, r3, #8
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	4b6d      	ldr	r3, [pc, #436]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	496a      	ldr	r1, [pc, #424]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b62:	4b69      	ldr	r3, [pc, #420]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	021b      	lsls	r3, r3, #8
 8001b70:	4965      	ldr	r1, [pc, #404]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d109      	bne.n	8001b90 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f000 fd13 	bl	80025ac <RCC_SetFlashLatencyFromMSIRange>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e33f      	b.n	8002210 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b90:	f000 fc48 	bl	8002424 <HAL_RCC_GetSysClockFreq>
 8001b94:	4602      	mov	r2, r0
 8001b96:	4b5c      	ldr	r3, [pc, #368]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	091b      	lsrs	r3, r3, #4
 8001b9c:	f003 030f 	and.w	r3, r3, #15
 8001ba0:	495a      	ldr	r1, [pc, #360]	; (8001d0c <HAL_RCC_OscConfig+0x29c>)
 8001ba2:	5ccb      	ldrb	r3, [r1, r3]
 8001ba4:	f003 031f 	and.w	r3, r3, #31
 8001ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bac:	4a58      	ldr	r2, [pc, #352]	; (8001d10 <HAL_RCC_OscConfig+0x2a0>)
 8001bae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bb0:	4b58      	ldr	r3, [pc, #352]	; (8001d14 <HAL_RCC_OscConfig+0x2a4>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fae9 	bl	800118c <HAL_InitTick>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d052      	beq.n	8001c6a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	e323      	b.n	8002210 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d032      	beq.n	8001c36 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bd0:	4b4d      	ldr	r3, [pc, #308]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a4c      	ldr	r2, [pc, #304]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bdc:	f7ff fb26 	bl	800122c <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001be4:	f7ff fb22 	bl	800122c <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e30c      	b.n	8002210 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bf6:	4b44      	ldr	r3, [pc, #272]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0f0      	beq.n	8001be4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c02:	4b41      	ldr	r3, [pc, #260]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a40      	ldr	r2, [pc, #256]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001c08:	f043 0308 	orr.w	r3, r3, #8
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	4b3e      	ldr	r3, [pc, #248]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	493b      	ldr	r1, [pc, #236]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c20:	4b39      	ldr	r3, [pc, #228]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	021b      	lsls	r3, r3, #8
 8001c2e:	4936      	ldr	r1, [pc, #216]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	604b      	str	r3, [r1, #4]
 8001c34:	e01a      	b.n	8001c6c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c36:	4b34      	ldr	r3, [pc, #208]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a33      	ldr	r2, [pc, #204]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001c3c:	f023 0301 	bic.w	r3, r3, #1
 8001c40:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c42:	f7ff faf3 	bl	800122c <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c4a:	f7ff faef 	bl	800122c <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e2d9      	b.n	8002210 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c5c:	4b2a      	ldr	r3, [pc, #168]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1f0      	bne.n	8001c4a <HAL_RCC_OscConfig+0x1da>
 8001c68:	e000      	b.n	8001c6c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c6a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d074      	beq.n	8001d62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	2b08      	cmp	r3, #8
 8001c7c:	d005      	beq.n	8001c8a <HAL_RCC_OscConfig+0x21a>
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	2b0c      	cmp	r3, #12
 8001c82:	d10e      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	2b03      	cmp	r3, #3
 8001c88:	d10b      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8a:	4b1f      	ldr	r3, [pc, #124]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d064      	beq.n	8001d60 <HAL_RCC_OscConfig+0x2f0>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d160      	bne.n	8001d60 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e2b6      	b.n	8002210 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001caa:	d106      	bne.n	8001cba <HAL_RCC_OscConfig+0x24a>
 8001cac:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a15      	ldr	r2, [pc, #84]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb6:	6013      	str	r3, [r2, #0]
 8001cb8:	e01d      	b.n	8001cf6 <HAL_RCC_OscConfig+0x286>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cc2:	d10c      	bne.n	8001cde <HAL_RCC_OscConfig+0x26e>
 8001cc4:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a0f      	ldr	r2, [pc, #60]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001cca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a0c      	ldr	r2, [pc, #48]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cda:	6013      	str	r3, [r2, #0]
 8001cdc:	e00b      	b.n	8001cf6 <HAL_RCC_OscConfig+0x286>
 8001cde:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a09      	ldr	r2, [pc, #36]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001ce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a06      	ldr	r2, [pc, #24]	; (8001d08 <HAL_RCC_OscConfig+0x298>)
 8001cf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cf4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d01c      	beq.n	8001d38 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfe:	f7ff fa95 	bl	800122c <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d04:	e011      	b.n	8001d2a <HAL_RCC_OscConfig+0x2ba>
 8001d06:	bf00      	nop
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	08005c58 	.word	0x08005c58
 8001d10:	200000c8 	.word	0x200000c8
 8001d14:	200000cc 	.word	0x200000cc
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d18:	f7ff fa88 	bl	800122c <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b64      	cmp	r3, #100	; 0x64
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e272      	b.n	8002210 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d2a:	4baf      	ldr	r3, [pc, #700]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0x2a8>
 8001d36:	e014      	b.n	8001d62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d38:	f7ff fa78 	bl	800122c <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d40:	f7ff fa74 	bl	800122c <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b64      	cmp	r3, #100	; 0x64
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e25e      	b.n	8002210 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d52:	4ba5      	ldr	r3, [pc, #660]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x2d0>
 8001d5e:	e000      	b.n	8001d62 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d060      	beq.n	8001e30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d005      	beq.n	8001d80 <HAL_RCC_OscConfig+0x310>
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	2b0c      	cmp	r3, #12
 8001d78:	d119      	bne.n	8001dae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d116      	bne.n	8001dae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d80:	4b99      	ldr	r3, [pc, #612]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d005      	beq.n	8001d98 <HAL_RCC_OscConfig+0x328>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e23b      	b.n	8002210 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d98:	4b93      	ldr	r3, [pc, #588]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	061b      	lsls	r3, r3, #24
 8001da6:	4990      	ldr	r1, [pc, #576]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dac:	e040      	b.n	8001e30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d023      	beq.n	8001dfe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db6:	4b8c      	ldr	r3, [pc, #560]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a8b      	ldr	r2, [pc, #556]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc2:	f7ff fa33 	bl	800122c <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dca:	f7ff fa2f 	bl	800122c <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e219      	b.n	8002210 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ddc:	4b82      	ldr	r3, [pc, #520]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0f0      	beq.n	8001dca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de8:	4b7f      	ldr	r3, [pc, #508]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	061b      	lsls	r3, r3, #24
 8001df6:	497c      	ldr	r1, [pc, #496]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	604b      	str	r3, [r1, #4]
 8001dfc:	e018      	b.n	8001e30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dfe:	4b7a      	ldr	r3, [pc, #488]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a79      	ldr	r2, [pc, #484]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001e04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0a:	f7ff fa0f 	bl	800122c <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e12:	f7ff fa0b 	bl	800122c <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e1f5      	b.n	8002210 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e24:	4b70      	ldr	r3, [pc, #448]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1f0      	bne.n	8001e12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d03c      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d01c      	beq.n	8001e7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e44:	4b68      	ldr	r3, [pc, #416]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e4a:	4a67      	ldr	r2, [pc, #412]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e54:	f7ff f9ea 	bl	800122c <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e5c:	f7ff f9e6 	bl	800122c <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e1d0      	b.n	8002210 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e6e:	4b5e      	ldr	r3, [pc, #376]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0ef      	beq.n	8001e5c <HAL_RCC_OscConfig+0x3ec>
 8001e7c:	e01b      	b.n	8001eb6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e7e:	4b5a      	ldr	r3, [pc, #360]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e84:	4a58      	ldr	r2, [pc, #352]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001e86:	f023 0301 	bic.w	r3, r3, #1
 8001e8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8e:	f7ff f9cd 	bl	800122c <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e96:	f7ff f9c9 	bl	800122c <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e1b3      	b.n	8002210 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ea8:	4b4f      	ldr	r3, [pc, #316]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1ef      	bne.n	8001e96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0304 	and.w	r3, r3, #4
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 80a6 	beq.w	8002010 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ec8:	4b47      	ldr	r3, [pc, #284]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10d      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed4:	4b44      	ldr	r3, [pc, #272]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed8:	4a43      	ldr	r2, [pc, #268]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ede:	6593      	str	r3, [r2, #88]	; 0x58
 8001ee0:	4b41      	ldr	r3, [pc, #260]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eec:	2301      	movs	r3, #1
 8001eee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ef0:	4b3e      	ldr	r3, [pc, #248]	; (8001fec <HAL_RCC_OscConfig+0x57c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d118      	bne.n	8001f2e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001efc:	4b3b      	ldr	r3, [pc, #236]	; (8001fec <HAL_RCC_OscConfig+0x57c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a3a      	ldr	r2, [pc, #232]	; (8001fec <HAL_RCC_OscConfig+0x57c>)
 8001f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f08:	f7ff f990 	bl	800122c <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f10:	f7ff f98c 	bl	800122c <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e176      	b.n	8002210 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f22:	4b32      	ldr	r3, [pc, #200]	; (8001fec <HAL_RCC_OscConfig+0x57c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d108      	bne.n	8001f48 <HAL_RCC_OscConfig+0x4d8>
 8001f36:	4b2c      	ldr	r3, [pc, #176]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f3c:	4a2a      	ldr	r2, [pc, #168]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f46:	e024      	b.n	8001f92 <HAL_RCC_OscConfig+0x522>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	2b05      	cmp	r3, #5
 8001f4e:	d110      	bne.n	8001f72 <HAL_RCC_OscConfig+0x502>
 8001f50:	4b25      	ldr	r3, [pc, #148]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f56:	4a24      	ldr	r2, [pc, #144]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001f58:	f043 0304 	orr.w	r3, r3, #4
 8001f5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f60:	4b21      	ldr	r3, [pc, #132]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f66:	4a20      	ldr	r2, [pc, #128]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f70:	e00f      	b.n	8001f92 <HAL_RCC_OscConfig+0x522>
 8001f72:	4b1d      	ldr	r3, [pc, #116]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f78:	4a1b      	ldr	r2, [pc, #108]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001f7a:	f023 0301 	bic.w	r3, r3, #1
 8001f7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f82:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f88:	4a17      	ldr	r2, [pc, #92]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001f8a:	f023 0304 	bic.w	r3, r3, #4
 8001f8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d016      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9a:	f7ff f947 	bl	800122c <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fa0:	e00a      	b.n	8001fb8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa2:	f7ff f943 	bl	800122c <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e12b      	b.n	8002210 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <HAL_RCC_OscConfig+0x578>)
 8001fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0ed      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x532>
 8001fc6:	e01a      	b.n	8001ffe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc8:	f7ff f930 	bl	800122c <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fce:	e00f      	b.n	8001ff0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd0:	f7ff f92c 	bl	800122c <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d906      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e114      	b.n	8002210 <HAL_RCC_OscConfig+0x7a0>
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ff0:	4b89      	ldr	r3, [pc, #548]	; (8002218 <HAL_RCC_OscConfig+0x7a8>)
 8001ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1e8      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ffe:	7ffb      	ldrb	r3, [r7, #31]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d105      	bne.n	8002010 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002004:	4b84      	ldr	r3, [pc, #528]	; (8002218 <HAL_RCC_OscConfig+0x7a8>)
 8002006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002008:	4a83      	ldr	r2, [pc, #524]	; (8002218 <HAL_RCC_OscConfig+0x7a8>)
 800200a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800200e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 80fa 	beq.w	800220e <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201e:	2b02      	cmp	r3, #2
 8002020:	f040 80d0 	bne.w	80021c4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002024:	4b7c      	ldr	r3, [pc, #496]	; (8002218 <HAL_RCC_OscConfig+0x7a8>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	f003 0203 	and.w	r2, r3, #3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002034:	429a      	cmp	r2, r3
 8002036:	d130      	bne.n	800209a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	3b01      	subs	r3, #1
 8002044:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002046:	429a      	cmp	r2, r3
 8002048:	d127      	bne.n	800209a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002054:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002056:	429a      	cmp	r2, r3
 8002058:	d11f      	bne.n	800209a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002064:	2a07      	cmp	r2, #7
 8002066:	bf14      	ite	ne
 8002068:	2201      	movne	r2, #1
 800206a:	2200      	moveq	r2, #0
 800206c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800206e:	4293      	cmp	r3, r2
 8002070:	d113      	bne.n	800209a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207c:	085b      	lsrs	r3, r3, #1
 800207e:	3b01      	subs	r3, #1
 8002080:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002082:	429a      	cmp	r2, r3
 8002084:	d109      	bne.n	800209a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	085b      	lsrs	r3, r3, #1
 8002092:	3b01      	subs	r3, #1
 8002094:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002096:	429a      	cmp	r2, r3
 8002098:	d06e      	beq.n	8002178 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	2b0c      	cmp	r3, #12
 800209e:	d069      	beq.n	8002174 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020a0:	4b5d      	ldr	r3, [pc, #372]	; (8002218 <HAL_RCC_OscConfig+0x7a8>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d105      	bne.n	80020b8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020ac:	4b5a      	ldr	r3, [pc, #360]	; (8002218 <HAL_RCC_OscConfig+0x7a8>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e0a9      	b.n	8002210 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020bc:	4b56      	ldr	r3, [pc, #344]	; (8002218 <HAL_RCC_OscConfig+0x7a8>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a55      	ldr	r2, [pc, #340]	; (8002218 <HAL_RCC_OscConfig+0x7a8>)
 80020c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020c6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020c8:	f7ff f8b0 	bl	800122c <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d0:	f7ff f8ac 	bl	800122c <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e096      	b.n	8002210 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020e2:	4b4d      	ldr	r3, [pc, #308]	; (8002218 <HAL_RCC_OscConfig+0x7a8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ee:	4b4a      	ldr	r3, [pc, #296]	; (8002218 <HAL_RCC_OscConfig+0x7a8>)
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	4b4a      	ldr	r3, [pc, #296]	; (800221c <HAL_RCC_OscConfig+0x7ac>)
 80020f4:	4013      	ands	r3, r2
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80020fe:	3a01      	subs	r2, #1
 8002100:	0112      	lsls	r2, r2, #4
 8002102:	4311      	orrs	r1, r2
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002108:	0212      	lsls	r2, r2, #8
 800210a:	4311      	orrs	r1, r2
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002110:	0852      	lsrs	r2, r2, #1
 8002112:	3a01      	subs	r2, #1
 8002114:	0552      	lsls	r2, r2, #21
 8002116:	4311      	orrs	r1, r2
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800211c:	0852      	lsrs	r2, r2, #1
 800211e:	3a01      	subs	r2, #1
 8002120:	0652      	lsls	r2, r2, #25
 8002122:	4311      	orrs	r1, r2
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002128:	0912      	lsrs	r2, r2, #4
 800212a:	0452      	lsls	r2, r2, #17
 800212c:	430a      	orrs	r2, r1
 800212e:	493a      	ldr	r1, [pc, #232]	; (8002218 <HAL_RCC_OscConfig+0x7a8>)
 8002130:	4313      	orrs	r3, r2
 8002132:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002134:	4b38      	ldr	r3, [pc, #224]	; (8002218 <HAL_RCC_OscConfig+0x7a8>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a37      	ldr	r2, [pc, #220]	; (8002218 <HAL_RCC_OscConfig+0x7a8>)
 800213a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800213e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002140:	4b35      	ldr	r3, [pc, #212]	; (8002218 <HAL_RCC_OscConfig+0x7a8>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	4a34      	ldr	r2, [pc, #208]	; (8002218 <HAL_RCC_OscConfig+0x7a8>)
 8002146:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800214a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800214c:	f7ff f86e 	bl	800122c <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002154:	f7ff f86a 	bl	800122c <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e054      	b.n	8002210 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002166:	4b2c      	ldr	r3, [pc, #176]	; (8002218 <HAL_RCC_OscConfig+0x7a8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002172:	e04c      	b.n	800220e <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e04b      	b.n	8002210 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002178:	4b27      	ldr	r3, [pc, #156]	; (8002218 <HAL_RCC_OscConfig+0x7a8>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d144      	bne.n	800220e <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002184:	4b24      	ldr	r3, [pc, #144]	; (8002218 <HAL_RCC_OscConfig+0x7a8>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a23      	ldr	r2, [pc, #140]	; (8002218 <HAL_RCC_OscConfig+0x7a8>)
 800218a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800218e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002190:	4b21      	ldr	r3, [pc, #132]	; (8002218 <HAL_RCC_OscConfig+0x7a8>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	4a20      	ldr	r2, [pc, #128]	; (8002218 <HAL_RCC_OscConfig+0x7a8>)
 8002196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800219a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800219c:	f7ff f846 	bl	800122c <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a4:	f7ff f842 	bl	800122c <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e02c      	b.n	8002210 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021b6:	4b18      	ldr	r3, [pc, #96]	; (8002218 <HAL_RCC_OscConfig+0x7a8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0f0      	beq.n	80021a4 <HAL_RCC_OscConfig+0x734>
 80021c2:	e024      	b.n	800220e <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	2b0c      	cmp	r3, #12
 80021c8:	d01f      	beq.n	800220a <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ca:	4b13      	ldr	r3, [pc, #76]	; (8002218 <HAL_RCC_OscConfig+0x7a8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a12      	ldr	r2, [pc, #72]	; (8002218 <HAL_RCC_OscConfig+0x7a8>)
 80021d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d6:	f7ff f829 	bl	800122c <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021de:	f7ff f825 	bl	800122c <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e00f      	b.n	8002210 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021f0:	4b09      	ldr	r3, [pc, #36]	; (8002218 <HAL_RCC_OscConfig+0x7a8>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1f0      	bne.n	80021de <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_RCC_OscConfig+0x7a8>)
 80021fe:	68da      	ldr	r2, [r3, #12]
 8002200:	4905      	ldr	r1, [pc, #20]	; (8002218 <HAL_RCC_OscConfig+0x7a8>)
 8002202:	4b07      	ldr	r3, [pc, #28]	; (8002220 <HAL_RCC_OscConfig+0x7b0>)
 8002204:	4013      	ands	r3, r2
 8002206:	60cb      	str	r3, [r1, #12]
 8002208:	e001      	b.n	800220e <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3720      	adds	r7, #32
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40021000 	.word	0x40021000
 800221c:	f99d808c 	.word	0xf99d808c
 8002220:	feeefffc 	.word	0xfeeefffc

08002224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e0e7      	b.n	8002408 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002238:	4b75      	ldr	r3, [pc, #468]	; (8002410 <HAL_RCC_ClockConfig+0x1ec>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d910      	bls.n	8002268 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002246:	4b72      	ldr	r3, [pc, #456]	; (8002410 <HAL_RCC_ClockConfig+0x1ec>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f023 0207 	bic.w	r2, r3, #7
 800224e:	4970      	ldr	r1, [pc, #448]	; (8002410 <HAL_RCC_ClockConfig+0x1ec>)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	4313      	orrs	r3, r2
 8002254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002256:	4b6e      	ldr	r3, [pc, #440]	; (8002410 <HAL_RCC_ClockConfig+0x1ec>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d001      	beq.n	8002268 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e0cf      	b.n	8002408 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d010      	beq.n	8002296 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	4b66      	ldr	r3, [pc, #408]	; (8002414 <HAL_RCC_ClockConfig+0x1f0>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002280:	429a      	cmp	r2, r3
 8002282:	d908      	bls.n	8002296 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002284:	4b63      	ldr	r3, [pc, #396]	; (8002414 <HAL_RCC_ClockConfig+0x1f0>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	4960      	ldr	r1, [pc, #384]	; (8002414 <HAL_RCC_ClockConfig+0x1f0>)
 8002292:	4313      	orrs	r3, r2
 8002294:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d04c      	beq.n	800233c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b03      	cmp	r3, #3
 80022a8:	d107      	bne.n	80022ba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022aa:	4b5a      	ldr	r3, [pc, #360]	; (8002414 <HAL_RCC_ClockConfig+0x1f0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d121      	bne.n	80022fa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e0a6      	b.n	8002408 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d107      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022c2:	4b54      	ldr	r3, [pc, #336]	; (8002414 <HAL_RCC_ClockConfig+0x1f0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d115      	bne.n	80022fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e09a      	b.n	8002408 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d107      	bne.n	80022ea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022da:	4b4e      	ldr	r3, [pc, #312]	; (8002414 <HAL_RCC_ClockConfig+0x1f0>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d109      	bne.n	80022fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e08e      	b.n	8002408 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022ea:	4b4a      	ldr	r3, [pc, #296]	; (8002414 <HAL_RCC_ClockConfig+0x1f0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e086      	b.n	8002408 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022fa:	4b46      	ldr	r3, [pc, #280]	; (8002414 <HAL_RCC_ClockConfig+0x1f0>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f023 0203 	bic.w	r2, r3, #3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	4943      	ldr	r1, [pc, #268]	; (8002414 <HAL_RCC_ClockConfig+0x1f0>)
 8002308:	4313      	orrs	r3, r2
 800230a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800230c:	f7fe ff8e 	bl	800122c <HAL_GetTick>
 8002310:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002312:	e00a      	b.n	800232a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002314:	f7fe ff8a 	bl	800122c <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002322:	4293      	cmp	r3, r2
 8002324:	d901      	bls.n	800232a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e06e      	b.n	8002408 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232a:	4b3a      	ldr	r3, [pc, #232]	; (8002414 <HAL_RCC_ClockConfig+0x1f0>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 020c 	and.w	r2, r3, #12
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	429a      	cmp	r2, r3
 800233a:	d1eb      	bne.n	8002314 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d010      	beq.n	800236a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	4b31      	ldr	r3, [pc, #196]	; (8002414 <HAL_RCC_ClockConfig+0x1f0>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002354:	429a      	cmp	r2, r3
 8002356:	d208      	bcs.n	800236a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002358:	4b2e      	ldr	r3, [pc, #184]	; (8002414 <HAL_RCC_ClockConfig+0x1f0>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	492b      	ldr	r1, [pc, #172]	; (8002414 <HAL_RCC_ClockConfig+0x1f0>)
 8002366:	4313      	orrs	r3, r2
 8002368:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800236a:	4b29      	ldr	r3, [pc, #164]	; (8002410 <HAL_RCC_ClockConfig+0x1ec>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d210      	bcs.n	800239a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002378:	4b25      	ldr	r3, [pc, #148]	; (8002410 <HAL_RCC_ClockConfig+0x1ec>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f023 0207 	bic.w	r2, r3, #7
 8002380:	4923      	ldr	r1, [pc, #140]	; (8002410 <HAL_RCC_ClockConfig+0x1ec>)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	4313      	orrs	r3, r2
 8002386:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002388:	4b21      	ldr	r3, [pc, #132]	; (8002410 <HAL_RCC_ClockConfig+0x1ec>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d001      	beq.n	800239a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e036      	b.n	8002408 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0304 	and.w	r3, r3, #4
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d008      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023a6:	4b1b      	ldr	r3, [pc, #108]	; (8002414 <HAL_RCC_ClockConfig+0x1f0>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	4918      	ldr	r1, [pc, #96]	; (8002414 <HAL_RCC_ClockConfig+0x1f0>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d009      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023c4:	4b13      	ldr	r3, [pc, #76]	; (8002414 <HAL_RCC_ClockConfig+0x1f0>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4910      	ldr	r1, [pc, #64]	; (8002414 <HAL_RCC_ClockConfig+0x1f0>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023d8:	f000 f824 	bl	8002424 <HAL_RCC_GetSysClockFreq>
 80023dc:	4602      	mov	r2, r0
 80023de:	4b0d      	ldr	r3, [pc, #52]	; (8002414 <HAL_RCC_ClockConfig+0x1f0>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	091b      	lsrs	r3, r3, #4
 80023e4:	f003 030f 	and.w	r3, r3, #15
 80023e8:	490b      	ldr	r1, [pc, #44]	; (8002418 <HAL_RCC_ClockConfig+0x1f4>)
 80023ea:	5ccb      	ldrb	r3, [r1, r3]
 80023ec:	f003 031f 	and.w	r3, r3, #31
 80023f0:	fa22 f303 	lsr.w	r3, r2, r3
 80023f4:	4a09      	ldr	r2, [pc, #36]	; (800241c <HAL_RCC_ClockConfig+0x1f8>)
 80023f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023f8:	4b09      	ldr	r3, [pc, #36]	; (8002420 <HAL_RCC_ClockConfig+0x1fc>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe fec5 	bl	800118c <HAL_InitTick>
 8002402:	4603      	mov	r3, r0
 8002404:	72fb      	strb	r3, [r7, #11]

  return status;
 8002406:	7afb      	ldrb	r3, [r7, #11]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40022000 	.word	0x40022000
 8002414:	40021000 	.word	0x40021000
 8002418:	08005c58 	.word	0x08005c58
 800241c:	200000c8 	.word	0x200000c8
 8002420:	200000cc 	.word	0x200000cc

08002424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002424:	b480      	push	{r7}
 8002426:	b089      	sub	sp, #36	; 0x24
 8002428:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
 800242e:	2300      	movs	r3, #0
 8002430:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002432:	4b3e      	ldr	r3, [pc, #248]	; (800252c <HAL_RCC_GetSysClockFreq+0x108>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 030c 	and.w	r3, r3, #12
 800243a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800243c:	4b3b      	ldr	r3, [pc, #236]	; (800252c <HAL_RCC_GetSysClockFreq+0x108>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	f003 0303 	and.w	r3, r3, #3
 8002444:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d005      	beq.n	8002458 <HAL_RCC_GetSysClockFreq+0x34>
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	2b0c      	cmp	r3, #12
 8002450:	d121      	bne.n	8002496 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d11e      	bne.n	8002496 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002458:	4b34      	ldr	r3, [pc, #208]	; (800252c <HAL_RCC_GetSysClockFreq+0x108>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	2b00      	cmp	r3, #0
 8002462:	d107      	bne.n	8002474 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002464:	4b31      	ldr	r3, [pc, #196]	; (800252c <HAL_RCC_GetSysClockFreq+0x108>)
 8002466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800246a:	0a1b      	lsrs	r3, r3, #8
 800246c:	f003 030f 	and.w	r3, r3, #15
 8002470:	61fb      	str	r3, [r7, #28]
 8002472:	e005      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002474:	4b2d      	ldr	r3, [pc, #180]	; (800252c <HAL_RCC_GetSysClockFreq+0x108>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	091b      	lsrs	r3, r3, #4
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002480:	4a2b      	ldr	r2, [pc, #172]	; (8002530 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002488:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10d      	bne.n	80024ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002494:	e00a      	b.n	80024ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	2b04      	cmp	r3, #4
 800249a:	d102      	bne.n	80024a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800249c:	4b25      	ldr	r3, [pc, #148]	; (8002534 <HAL_RCC_GetSysClockFreq+0x110>)
 800249e:	61bb      	str	r3, [r7, #24]
 80024a0:	e004      	b.n	80024ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	d101      	bne.n	80024ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024a8:	4b23      	ldr	r3, [pc, #140]	; (8002538 <HAL_RCC_GetSysClockFreq+0x114>)
 80024aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	2b0c      	cmp	r3, #12
 80024b0:	d134      	bne.n	800251c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024b2:	4b1e      	ldr	r3, [pc, #120]	; (800252c <HAL_RCC_GetSysClockFreq+0x108>)
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d003      	beq.n	80024ca <HAL_RCC_GetSysClockFreq+0xa6>
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	d003      	beq.n	80024d0 <HAL_RCC_GetSysClockFreq+0xac>
 80024c8:	e005      	b.n	80024d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024ca:	4b1a      	ldr	r3, [pc, #104]	; (8002534 <HAL_RCC_GetSysClockFreq+0x110>)
 80024cc:	617b      	str	r3, [r7, #20]
      break;
 80024ce:	e005      	b.n	80024dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024d0:	4b19      	ldr	r3, [pc, #100]	; (8002538 <HAL_RCC_GetSysClockFreq+0x114>)
 80024d2:	617b      	str	r3, [r7, #20]
      break;
 80024d4:	e002      	b.n	80024dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	617b      	str	r3, [r7, #20]
      break;
 80024da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024dc:	4b13      	ldr	r3, [pc, #76]	; (800252c <HAL_RCC_GetSysClockFreq+0x108>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	091b      	lsrs	r3, r3, #4
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	3301      	adds	r3, #1
 80024e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024ea:	4b10      	ldr	r3, [pc, #64]	; (800252c <HAL_RCC_GetSysClockFreq+0x108>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	0a1b      	lsrs	r3, r3, #8
 80024f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	fb02 f203 	mul.w	r2, r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002500:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002502:	4b0a      	ldr	r3, [pc, #40]	; (800252c <HAL_RCC_GetSysClockFreq+0x108>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	0e5b      	lsrs	r3, r3, #25
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	3301      	adds	r3, #1
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	fbb2 f3f3 	udiv	r3, r2, r3
 800251a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800251c:	69bb      	ldr	r3, [r7, #24]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3724      	adds	r7, #36	; 0x24
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000
 8002530:	08005c70 	.word	0x08005c70
 8002534:	00f42400 	.word	0x00f42400
 8002538:	007a1200 	.word	0x007a1200

0800253c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002540:	4b03      	ldr	r3, [pc, #12]	; (8002550 <HAL_RCC_GetHCLKFreq+0x14>)
 8002542:	681b      	ldr	r3, [r3, #0]
}
 8002544:	4618      	mov	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	200000c8 	.word	0x200000c8

08002554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002558:	f7ff fff0 	bl	800253c <HAL_RCC_GetHCLKFreq>
 800255c:	4602      	mov	r2, r0
 800255e:	4b06      	ldr	r3, [pc, #24]	; (8002578 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	4904      	ldr	r1, [pc, #16]	; (800257c <HAL_RCC_GetPCLK1Freq+0x28>)
 800256a:	5ccb      	ldrb	r3, [r1, r3]
 800256c:	f003 031f 	and.w	r3, r3, #31
 8002570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002574:	4618      	mov	r0, r3
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40021000 	.word	0x40021000
 800257c:	08005c68 	.word	0x08005c68

08002580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002584:	f7ff ffda 	bl	800253c <HAL_RCC_GetHCLKFreq>
 8002588:	4602      	mov	r2, r0
 800258a:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	0adb      	lsrs	r3, r3, #11
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	4904      	ldr	r1, [pc, #16]	; (80025a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002596:	5ccb      	ldrb	r3, [r1, r3]
 8002598:	f003 031f 	and.w	r3, r3, #31
 800259c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40021000 	.word	0x40021000
 80025a8:	08005c68 	.word	0x08005c68

080025ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025b4:	2300      	movs	r3, #0
 80025b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025b8:	4b2a      	ldr	r3, [pc, #168]	; (8002664 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025c4:	f7ff f9f0 	bl	80019a8 <HAL_PWREx_GetVoltageRange>
 80025c8:	6178      	str	r0, [r7, #20]
 80025ca:	e014      	b.n	80025f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025cc:	4b25      	ldr	r3, [pc, #148]	; (8002664 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d0:	4a24      	ldr	r2, [pc, #144]	; (8002664 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d6:	6593      	str	r3, [r2, #88]	; 0x58
 80025d8:	4b22      	ldr	r3, [pc, #136]	; (8002664 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025e4:	f7ff f9e0 	bl	80019a8 <HAL_PWREx_GetVoltageRange>
 80025e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025ea:	4b1e      	ldr	r3, [pc, #120]	; (8002664 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ee:	4a1d      	ldr	r2, [pc, #116]	; (8002664 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025fc:	d10b      	bne.n	8002616 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b80      	cmp	r3, #128	; 0x80
 8002602:	d919      	bls.n	8002638 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2ba0      	cmp	r3, #160	; 0xa0
 8002608:	d902      	bls.n	8002610 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800260a:	2302      	movs	r3, #2
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	e013      	b.n	8002638 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002610:	2301      	movs	r3, #1
 8002612:	613b      	str	r3, [r7, #16]
 8002614:	e010      	b.n	8002638 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b80      	cmp	r3, #128	; 0x80
 800261a:	d902      	bls.n	8002622 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800261c:	2303      	movs	r3, #3
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	e00a      	b.n	8002638 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b80      	cmp	r3, #128	; 0x80
 8002626:	d102      	bne.n	800262e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002628:	2302      	movs	r3, #2
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	e004      	b.n	8002638 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b70      	cmp	r3, #112	; 0x70
 8002632:	d101      	bne.n	8002638 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002634:	2301      	movs	r3, #1
 8002636:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002638:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f023 0207 	bic.w	r2, r3, #7
 8002640:	4909      	ldr	r1, [pc, #36]	; (8002668 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4313      	orrs	r3, r2
 8002646:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002648:	4b07      	ldr	r3, [pc, #28]	; (8002668 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	429a      	cmp	r2, r3
 8002654:	d001      	beq.n	800265a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3718      	adds	r7, #24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40021000 	.word	0x40021000
 8002668:	40022000 	.word	0x40022000

0800266c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002674:	2300      	movs	r3, #0
 8002676:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002678:	2300      	movs	r3, #0
 800267a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002684:	2b00      	cmp	r3, #0
 8002686:	d041      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800268c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002690:	d02a      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002692:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002696:	d824      	bhi.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002698:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800269c:	d008      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800269e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026a2:	d81e      	bhi.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00a      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x52>
 80026a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026ac:	d010      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026ae:	e018      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026b0:	4b86      	ldr	r3, [pc, #536]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	4a85      	ldr	r2, [pc, #532]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026bc:	e015      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3304      	adds	r3, #4
 80026c2:	2100      	movs	r1, #0
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 fabb 	bl	8002c40 <RCCEx_PLLSAI1_Config>
 80026ca:	4603      	mov	r3, r0
 80026cc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026ce:	e00c      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3320      	adds	r3, #32
 80026d4:	2100      	movs	r1, #0
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 fba6 	bl	8002e28 <RCCEx_PLLSAI2_Config>
 80026dc:	4603      	mov	r3, r0
 80026de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026e0:	e003      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	74fb      	strb	r3, [r7, #19]
      break;
 80026e6:	e000      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80026e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026ea:	7cfb      	ldrb	r3, [r7, #19]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10b      	bne.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026f0:	4b76      	ldr	r3, [pc, #472]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026fe:	4973      	ldr	r1, [pc, #460]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002700:	4313      	orrs	r3, r2
 8002702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002706:	e001      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002708:	7cfb      	ldrb	r3, [r7, #19]
 800270a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d041      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800271c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002720:	d02a      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002722:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002726:	d824      	bhi.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002728:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800272c:	d008      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800272e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002732:	d81e      	bhi.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00a      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002738:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800273c:	d010      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800273e:	e018      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002740:	4b62      	ldr	r3, [pc, #392]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	4a61      	ldr	r2, [pc, #388]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800274a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800274c:	e015      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3304      	adds	r3, #4
 8002752:	2100      	movs	r1, #0
 8002754:	4618      	mov	r0, r3
 8002756:	f000 fa73 	bl	8002c40 <RCCEx_PLLSAI1_Config>
 800275a:	4603      	mov	r3, r0
 800275c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800275e:	e00c      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3320      	adds	r3, #32
 8002764:	2100      	movs	r1, #0
 8002766:	4618      	mov	r0, r3
 8002768:	f000 fb5e 	bl	8002e28 <RCCEx_PLLSAI2_Config>
 800276c:	4603      	mov	r3, r0
 800276e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002770:	e003      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	74fb      	strb	r3, [r7, #19]
      break;
 8002776:	e000      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002778:	bf00      	nop
    }

    if(ret == HAL_OK)
 800277a:	7cfb      	ldrb	r3, [r7, #19]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10b      	bne.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002780:	4b52      	ldr	r3, [pc, #328]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002786:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800278e:	494f      	ldr	r1, [pc, #316]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002790:	4313      	orrs	r3, r2
 8002792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002796:	e001      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002798:	7cfb      	ldrb	r3, [r7, #19]
 800279a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 80a0 	beq.w	80028ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027aa:	2300      	movs	r3, #0
 80027ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027ae:	4b47      	ldr	r3, [pc, #284]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x152>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80027be:	2300      	movs	r3, #0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00d      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c4:	4b41      	ldr	r3, [pc, #260]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c8:	4a40      	ldr	r2, [pc, #256]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ce:	6593      	str	r3, [r2, #88]	; 0x58
 80027d0:	4b3e      	ldr	r3, [pc, #248]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027dc:	2301      	movs	r3, #1
 80027de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027e0:	4b3b      	ldr	r3, [pc, #236]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a3a      	ldr	r2, [pc, #232]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027ec:	f7fe fd1e 	bl	800122c <HAL_GetTick>
 80027f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027f2:	e009      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f4:	f7fe fd1a 	bl	800122c <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d902      	bls.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	74fb      	strb	r3, [r7, #19]
        break;
 8002806:	e005      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002808:	4b31      	ldr	r3, [pc, #196]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0ef      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002814:	7cfb      	ldrb	r3, [r7, #19]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d15c      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800281a:	4b2c      	ldr	r3, [pc, #176]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800281c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002820:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002824:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d01f      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	429a      	cmp	r2, r3
 8002836:	d019      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002838:	4b24      	ldr	r3, [pc, #144]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800283a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002842:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002844:	4b21      	ldr	r3, [pc, #132]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284a:	4a20      	ldr	r2, [pc, #128]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800284c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002854:	4b1d      	ldr	r3, [pc, #116]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285a:	4a1c      	ldr	r2, [pc, #112]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800285c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002860:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002864:	4a19      	ldr	r2, [pc, #100]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d016      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002876:	f7fe fcd9 	bl	800122c <HAL_GetTick>
 800287a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800287c:	e00b      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800287e:	f7fe fcd5 	bl	800122c <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	f241 3288 	movw	r2, #5000	; 0x1388
 800288c:	4293      	cmp	r3, r2
 800288e:	d902      	bls.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	74fb      	strb	r3, [r7, #19]
            break;
 8002894:	e006      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002896:	4b0d      	ldr	r3, [pc, #52]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0ec      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80028a4:	7cfb      	ldrb	r3, [r7, #19]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10c      	bne.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028aa:	4b08      	ldr	r3, [pc, #32]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028ba:	4904      	ldr	r1, [pc, #16]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028c2:	e009      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028c4:	7cfb      	ldrb	r3, [r7, #19]
 80028c6:	74bb      	strb	r3, [r7, #18]
 80028c8:	e006      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80028ca:	bf00      	nop
 80028cc:	40021000 	.word	0x40021000
 80028d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d4:	7cfb      	ldrb	r3, [r7, #19]
 80028d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028d8:	7c7b      	ldrb	r3, [r7, #17]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d105      	bne.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028de:	4b9e      	ldr	r3, [pc, #632]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e2:	4a9d      	ldr	r2, [pc, #628]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00a      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028f6:	4b98      	ldr	r3, [pc, #608]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fc:	f023 0203 	bic.w	r2, r3, #3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002904:	4994      	ldr	r1, [pc, #592]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002906:	4313      	orrs	r3, r2
 8002908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00a      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002918:	4b8f      	ldr	r3, [pc, #572]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291e:	f023 020c 	bic.w	r2, r3, #12
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002926:	498c      	ldr	r1, [pc, #560]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002928:	4313      	orrs	r3, r2
 800292a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0304 	and.w	r3, r3, #4
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00a      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800293a:	4b87      	ldr	r3, [pc, #540]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002940:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002948:	4983      	ldr	r1, [pc, #524]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294a:	4313      	orrs	r3, r2
 800294c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0308 	and.w	r3, r3, #8
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00a      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800295c:	4b7e      	ldr	r3, [pc, #504]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002962:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	497b      	ldr	r1, [pc, #492]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0310 	and.w	r3, r3, #16
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00a      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800297e:	4b76      	ldr	r3, [pc, #472]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002984:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800298c:	4972      	ldr	r1, [pc, #456]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298e:	4313      	orrs	r3, r2
 8002990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0320 	and.w	r3, r3, #32
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00a      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029a0:	4b6d      	ldr	r3, [pc, #436]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ae:	496a      	ldr	r1, [pc, #424]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00a      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029c2:	4b65      	ldr	r3, [pc, #404]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d0:	4961      	ldr	r1, [pc, #388]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00a      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029e4:	4b5c      	ldr	r3, [pc, #368]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f2:	4959      	ldr	r1, [pc, #356]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00a      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a06:	4b54      	ldr	r3, [pc, #336]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a14:	4950      	ldr	r1, [pc, #320]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00a      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a28:	4b4b      	ldr	r3, [pc, #300]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a36:	4948      	ldr	r1, [pc, #288]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00a      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a4a:	4b43      	ldr	r3, [pc, #268]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a58:	493f      	ldr	r1, [pc, #252]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d028      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a6c:	4b3a      	ldr	r3, [pc, #232]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a7a:	4937      	ldr	r1, [pc, #220]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a8a:	d106      	bne.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a8c:	4b32      	ldr	r3, [pc, #200]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	4a31      	ldr	r2, [pc, #196]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a96:	60d3      	str	r3, [r2, #12]
 8002a98:	e011      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002aa2:	d10c      	bne.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 f8c8 	bl	8002c40 <RCCEx_PLLSAI1_Config>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ab4:	7cfb      	ldrb	r3, [r7, #19]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002aba:	7cfb      	ldrb	r3, [r7, #19]
 8002abc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d028      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002aca:	4b23      	ldr	r3, [pc, #140]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad8:	491f      	ldr	r1, [pc, #124]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ae8:	d106      	bne.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aea:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	4a1a      	ldr	r2, [pc, #104]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002af4:	60d3      	str	r3, [r2, #12]
 8002af6:	e011      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b00:	d10c      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	3304      	adds	r3, #4
 8002b06:	2101      	movs	r1, #1
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f000 f899 	bl	8002c40 <RCCEx_PLLSAI1_Config>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b12:	7cfb      	ldrb	r3, [r7, #19]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002b18:	7cfb      	ldrb	r3, [r7, #19]
 8002b1a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d02b      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b28:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b36:	4908      	ldr	r1, [pc, #32]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b46:	d109      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b48:	4b03      	ldr	r3, [pc, #12]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	4a02      	ldr	r2, [pc, #8]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b52:	60d3      	str	r3, [r2, #12]
 8002b54:	e014      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002b56:	bf00      	nop
 8002b58:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b64:	d10c      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3304      	adds	r3, #4
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 f867 	bl	8002c40 <RCCEx_PLLSAI1_Config>
 8002b72:	4603      	mov	r3, r0
 8002b74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b76:	7cfb      	ldrb	r3, [r7, #19]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002b7c:	7cfb      	ldrb	r3, [r7, #19]
 8002b7e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d02f      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b8c:	4b2b      	ldr	r3, [pc, #172]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b9a:	4928      	ldr	r1, [pc, #160]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ba6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002baa:	d10d      	bne.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3304      	adds	r3, #4
 8002bb0:	2102      	movs	r1, #2
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 f844 	bl	8002c40 <RCCEx_PLLSAI1_Config>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bbc:	7cfb      	ldrb	r3, [r7, #19]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d014      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002bc2:	7cfb      	ldrb	r3, [r7, #19]
 8002bc4:	74bb      	strb	r3, [r7, #18]
 8002bc6:	e011      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3320      	adds	r3, #32
 8002bd6:	2102      	movs	r1, #2
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f000 f925 	bl	8002e28 <RCCEx_PLLSAI2_Config>
 8002bde:	4603      	mov	r3, r0
 8002be0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002be2:	7cfb      	ldrb	r3, [r7, #19]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002be8:	7cfb      	ldrb	r3, [r7, #19]
 8002bea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00a      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002bf8:	4b10      	ldr	r3, [pc, #64]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c06:	490d      	ldr	r1, [pc, #52]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00b      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c1a:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c20:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c2a:	4904      	ldr	r1, [pc, #16]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c32:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40021000 	.word	0x40021000

08002c40 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c4e:	4b75      	ldr	r3, [pc, #468]	; (8002e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d018      	beq.n	8002c8c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c5a:	4b72      	ldr	r3, [pc, #456]	; (8002e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	f003 0203 	and.w	r2, r3, #3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d10d      	bne.n	8002c86 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
       ||
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d009      	beq.n	8002c86 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c72:	4b6c      	ldr	r3, [pc, #432]	; (8002e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	091b      	lsrs	r3, r3, #4
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
       ||
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d047      	beq.n	8002d16 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	73fb      	strb	r3, [r7, #15]
 8002c8a:	e044      	b.n	8002d16 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b03      	cmp	r3, #3
 8002c92:	d018      	beq.n	8002cc6 <RCCEx_PLLSAI1_Config+0x86>
 8002c94:	2b03      	cmp	r3, #3
 8002c96:	d825      	bhi.n	8002ce4 <RCCEx_PLLSAI1_Config+0xa4>
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d002      	beq.n	8002ca2 <RCCEx_PLLSAI1_Config+0x62>
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d009      	beq.n	8002cb4 <RCCEx_PLLSAI1_Config+0x74>
 8002ca0:	e020      	b.n	8002ce4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ca2:	4b60      	ldr	r3, [pc, #384]	; (8002e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d11d      	bne.n	8002cea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cb2:	e01a      	b.n	8002cea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cb4:	4b5b      	ldr	r3, [pc, #364]	; (8002e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d116      	bne.n	8002cee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cc4:	e013      	b.n	8002cee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cc6:	4b57      	ldr	r3, [pc, #348]	; (8002e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10f      	bne.n	8002cf2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cd2:	4b54      	ldr	r3, [pc, #336]	; (8002e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d109      	bne.n	8002cf2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ce2:	e006      	b.n	8002cf2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ce8:	e004      	b.n	8002cf4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cea:	bf00      	nop
 8002cec:	e002      	b.n	8002cf4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cee:	bf00      	nop
 8002cf0:	e000      	b.n	8002cf4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cf2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10d      	bne.n	8002d16 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002cfa:	4b4a      	ldr	r3, [pc, #296]	; (8002e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6819      	ldr	r1, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	430b      	orrs	r3, r1
 8002d10:	4944      	ldr	r1, [pc, #272]	; (8002e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d16:	7bfb      	ldrb	r3, [r7, #15]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d17d      	bne.n	8002e18 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d1c:	4b41      	ldr	r3, [pc, #260]	; (8002e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a40      	ldr	r2, [pc, #256]	; (8002e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d28:	f7fe fa80 	bl	800122c <HAL_GetTick>
 8002d2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d2e:	e009      	b.n	8002d44 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d30:	f7fe fa7c 	bl	800122c <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d902      	bls.n	8002d44 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	73fb      	strb	r3, [r7, #15]
        break;
 8002d42:	e005      	b.n	8002d50 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d44:	4b37      	ldr	r3, [pc, #220]	; (8002e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1ef      	bne.n	8002d30 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d160      	bne.n	8002e18 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d111      	bne.n	8002d80 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d5c:	4b31      	ldr	r3, [pc, #196]	; (8002e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6892      	ldr	r2, [r2, #8]
 8002d6c:	0211      	lsls	r1, r2, #8
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	68d2      	ldr	r2, [r2, #12]
 8002d72:	0912      	lsrs	r2, r2, #4
 8002d74:	0452      	lsls	r2, r2, #17
 8002d76:	430a      	orrs	r2, r1
 8002d78:	492a      	ldr	r1, [pc, #168]	; (8002e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	610b      	str	r3, [r1, #16]
 8002d7e:	e027      	b.n	8002dd0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d112      	bne.n	8002dac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d86:	4b27      	ldr	r3, [pc, #156]	; (8002e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002d8e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6892      	ldr	r2, [r2, #8]
 8002d96:	0211      	lsls	r1, r2, #8
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6912      	ldr	r2, [r2, #16]
 8002d9c:	0852      	lsrs	r2, r2, #1
 8002d9e:	3a01      	subs	r2, #1
 8002da0:	0552      	lsls	r2, r2, #21
 8002da2:	430a      	orrs	r2, r1
 8002da4:	491f      	ldr	r1, [pc, #124]	; (8002e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	610b      	str	r3, [r1, #16]
 8002daa:	e011      	b.n	8002dd0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dac:	4b1d      	ldr	r3, [pc, #116]	; (8002e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002db4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	6892      	ldr	r2, [r2, #8]
 8002dbc:	0211      	lsls	r1, r2, #8
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	6952      	ldr	r2, [r2, #20]
 8002dc2:	0852      	lsrs	r2, r2, #1
 8002dc4:	3a01      	subs	r2, #1
 8002dc6:	0652      	lsls	r2, r2, #25
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	4916      	ldr	r1, [pc, #88]	; (8002e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002dd0:	4b14      	ldr	r3, [pc, #80]	; (8002e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a13      	ldr	r2, [pc, #76]	; (8002e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002dda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ddc:	f7fe fa26 	bl	800122c <HAL_GetTick>
 8002de0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002de2:	e009      	b.n	8002df8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002de4:	f7fe fa22 	bl	800122c <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d902      	bls.n	8002df8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	73fb      	strb	r3, [r7, #15]
          break;
 8002df6:	e005      	b.n	8002e04 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002df8:	4b0a      	ldr	r3, [pc, #40]	; (8002e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0ef      	beq.n	8002de4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d106      	bne.n	8002e18 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e0a:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e0c:	691a      	ldr	r2, [r3, #16]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	4904      	ldr	r1, [pc, #16]	; (8002e24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40021000 	.word	0x40021000

08002e28 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e32:	2300      	movs	r3, #0
 8002e34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e36:	4b6a      	ldr	r3, [pc, #424]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d018      	beq.n	8002e74 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e42:	4b67      	ldr	r3, [pc, #412]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f003 0203 	and.w	r2, r3, #3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d10d      	bne.n	8002e6e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
       ||
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d009      	beq.n	8002e6e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e5a:	4b61      	ldr	r3, [pc, #388]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	091b      	lsrs	r3, r3, #4
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	1c5a      	adds	r2, r3, #1
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
       ||
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d047      	beq.n	8002efe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	73fb      	strb	r3, [r7, #15]
 8002e72:	e044      	b.n	8002efe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b03      	cmp	r3, #3
 8002e7a:	d018      	beq.n	8002eae <RCCEx_PLLSAI2_Config+0x86>
 8002e7c:	2b03      	cmp	r3, #3
 8002e7e:	d825      	bhi.n	8002ecc <RCCEx_PLLSAI2_Config+0xa4>
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d002      	beq.n	8002e8a <RCCEx_PLLSAI2_Config+0x62>
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d009      	beq.n	8002e9c <RCCEx_PLLSAI2_Config+0x74>
 8002e88:	e020      	b.n	8002ecc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e8a:	4b55      	ldr	r3, [pc, #340]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d11d      	bne.n	8002ed2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e9a:	e01a      	b.n	8002ed2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e9c:	4b50      	ldr	r3, [pc, #320]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d116      	bne.n	8002ed6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eac:	e013      	b.n	8002ed6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002eae:	4b4c      	ldr	r3, [pc, #304]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10f      	bne.n	8002eda <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002eba:	4b49      	ldr	r3, [pc, #292]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d109      	bne.n	8002eda <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002eca:	e006      	b.n	8002eda <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	73fb      	strb	r3, [r7, #15]
      break;
 8002ed0:	e004      	b.n	8002edc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ed2:	bf00      	nop
 8002ed4:	e002      	b.n	8002edc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ed6:	bf00      	nop
 8002ed8:	e000      	b.n	8002edc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002eda:	bf00      	nop
    }

    if(status == HAL_OK)
 8002edc:	7bfb      	ldrb	r3, [r7, #15]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10d      	bne.n	8002efe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ee2:	4b3f      	ldr	r3, [pc, #252]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6819      	ldr	r1, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	430b      	orrs	r3, r1
 8002ef8:	4939      	ldr	r1, [pc, #228]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002efe:	7bfb      	ldrb	r3, [r7, #15]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d167      	bne.n	8002fd4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f04:	4b36      	ldr	r3, [pc, #216]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a35      	ldr	r2, [pc, #212]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f10:	f7fe f98c 	bl	800122c <HAL_GetTick>
 8002f14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f16:	e009      	b.n	8002f2c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f18:	f7fe f988 	bl	800122c <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d902      	bls.n	8002f2c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	73fb      	strb	r3, [r7, #15]
        break;
 8002f2a:	e005      	b.n	8002f38 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f2c:	4b2c      	ldr	r3, [pc, #176]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1ef      	bne.n	8002f18 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d14a      	bne.n	8002fd4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d111      	bne.n	8002f68 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f44:	4b26      	ldr	r3, [pc, #152]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6892      	ldr	r2, [r2, #8]
 8002f54:	0211      	lsls	r1, r2, #8
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	68d2      	ldr	r2, [r2, #12]
 8002f5a:	0912      	lsrs	r2, r2, #4
 8002f5c:	0452      	lsls	r2, r2, #17
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	491f      	ldr	r1, [pc, #124]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	614b      	str	r3, [r1, #20]
 8002f66:	e011      	b.n	8002f8c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f68:	4b1d      	ldr	r3, [pc, #116]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f70:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6892      	ldr	r2, [r2, #8]
 8002f78:	0211      	lsls	r1, r2, #8
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6912      	ldr	r2, [r2, #16]
 8002f7e:	0852      	lsrs	r2, r2, #1
 8002f80:	3a01      	subs	r2, #1
 8002f82:	0652      	lsls	r2, r2, #25
 8002f84:	430a      	orrs	r2, r1
 8002f86:	4916      	ldr	r1, [pc, #88]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f8c:	4b14      	ldr	r3, [pc, #80]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a13      	ldr	r2, [pc, #76]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f96:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f98:	f7fe f948 	bl	800122c <HAL_GetTick>
 8002f9c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f9e:	e009      	b.n	8002fb4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fa0:	f7fe f944 	bl	800122c <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d902      	bls.n	8002fb4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	73fb      	strb	r3, [r7, #15]
          break;
 8002fb2:	e005      	b.n	8002fc0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fb4:	4b0a      	ldr	r3, [pc, #40]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0ef      	beq.n	8002fa0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002fc6:	4b06      	ldr	r3, [pc, #24]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fc8:	695a      	ldr	r2, [r3, #20]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	4904      	ldr	r1, [pc, #16]	; (8002fe0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40021000 	.word	0x40021000

08002fe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e049      	b.n	800308a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d106      	bne.n	8003010 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7fd feae 	bl	8000d6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2202      	movs	r2, #2
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3304      	adds	r3, #4
 8003020:	4619      	mov	r1, r3
 8003022:	4610      	mov	r0, r2
 8003024:	f000 f9f0 	bl	8003408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
	...

08003094 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d001      	beq.n	80030ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e047      	b.n	800313c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a23      	ldr	r2, [pc, #140]	; (8003148 <HAL_TIM_Base_Start+0xb4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d01d      	beq.n	80030fa <HAL_TIM_Base_Start+0x66>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c6:	d018      	beq.n	80030fa <HAL_TIM_Base_Start+0x66>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a1f      	ldr	r2, [pc, #124]	; (800314c <HAL_TIM_Base_Start+0xb8>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d013      	beq.n	80030fa <HAL_TIM_Base_Start+0x66>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a1e      	ldr	r2, [pc, #120]	; (8003150 <HAL_TIM_Base_Start+0xbc>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d00e      	beq.n	80030fa <HAL_TIM_Base_Start+0x66>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a1c      	ldr	r2, [pc, #112]	; (8003154 <HAL_TIM_Base_Start+0xc0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d009      	beq.n	80030fa <HAL_TIM_Base_Start+0x66>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a1b      	ldr	r2, [pc, #108]	; (8003158 <HAL_TIM_Base_Start+0xc4>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d004      	beq.n	80030fa <HAL_TIM_Base_Start+0x66>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a19      	ldr	r2, [pc, #100]	; (800315c <HAL_TIM_Base_Start+0xc8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d115      	bne.n	8003126 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	4b17      	ldr	r3, [pc, #92]	; (8003160 <HAL_TIM_Base_Start+0xcc>)
 8003102:	4013      	ands	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2b06      	cmp	r3, #6
 800310a:	d015      	beq.n	8003138 <HAL_TIM_Base_Start+0xa4>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003112:	d011      	beq.n	8003138 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0201 	orr.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003124:	e008      	b.n	8003138 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f042 0201 	orr.w	r2, r2, #1
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	e000      	b.n	800313a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003138:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	40012c00 	.word	0x40012c00
 800314c:	40000400 	.word	0x40000400
 8003150:	40000800 	.word	0x40000800
 8003154:	40000c00 	.word	0x40000c00
 8003158:	40013400 	.word	0x40013400
 800315c:	40014000 	.word	0x40014000
 8003160:	00010007 	.word	0x00010007

08003164 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b02      	cmp	r3, #2
 8003178:	d122      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b02      	cmp	r3, #2
 8003186:	d11b      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f06f 0202 	mvn.w	r2, #2
 8003190:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f90f 	bl	80033ca <HAL_TIM_IC_CaptureCallback>
 80031ac:	e005      	b.n	80031ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f901 	bl	80033b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f912 	bl	80033de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d122      	bne.n	8003214 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d11b      	bne.n	8003214 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f06f 0204 	mvn.w	r2, #4
 80031e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2202      	movs	r2, #2
 80031ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f8e5 	bl	80033ca <HAL_TIM_IC_CaptureCallback>
 8003200:	e005      	b.n	800320e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f8d7 	bl	80033b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 f8e8 	bl	80033de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b08      	cmp	r3, #8
 8003220:	d122      	bne.n	8003268 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f003 0308 	and.w	r3, r3, #8
 800322c:	2b08      	cmp	r3, #8
 800322e:	d11b      	bne.n	8003268 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f06f 0208 	mvn.w	r2, #8
 8003238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2204      	movs	r2, #4
 800323e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f8bb 	bl	80033ca <HAL_TIM_IC_CaptureCallback>
 8003254:	e005      	b.n	8003262 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f8ad 	bl	80033b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f8be 	bl	80033de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	f003 0310 	and.w	r3, r3, #16
 8003272:	2b10      	cmp	r3, #16
 8003274:	d122      	bne.n	80032bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	f003 0310 	and.w	r3, r3, #16
 8003280:	2b10      	cmp	r3, #16
 8003282:	d11b      	bne.n	80032bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f06f 0210 	mvn.w	r2, #16
 800328c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2208      	movs	r2, #8
 8003292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f891 	bl	80033ca <HAL_TIM_IC_CaptureCallback>
 80032a8:	e005      	b.n	80032b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f883 	bl	80033b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f894 	bl	80033de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d10e      	bne.n	80032e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d107      	bne.n	80032e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f06f 0201 	mvn.w	r2, #1
 80032e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f85d 	bl	80033a2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f2:	2b80      	cmp	r3, #128	; 0x80
 80032f4:	d10e      	bne.n	8003314 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003300:	2b80      	cmp	r3, #128	; 0x80
 8003302:	d107      	bne.n	8003314 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800330c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f91e 	bl	8003550 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003322:	d10e      	bne.n	8003342 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800332e:	2b80      	cmp	r3, #128	; 0x80
 8003330:	d107      	bne.n	8003342 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800333a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 f911 	bl	8003564 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334c:	2b40      	cmp	r3, #64	; 0x40
 800334e:	d10e      	bne.n	800336e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335a:	2b40      	cmp	r3, #64	; 0x40
 800335c:	d107      	bne.n	800336e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f842 	bl	80033f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	f003 0320 	and.w	r3, r3, #32
 8003378:	2b20      	cmp	r3, #32
 800337a:	d10e      	bne.n	800339a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	f003 0320 	and.w	r3, r3, #32
 8003386:	2b20      	cmp	r3, #32
 8003388:	d107      	bne.n	800339a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f06f 0220 	mvn.w	r2, #32
 8003392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f8d1 	bl	800353c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b083      	sub	sp, #12
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033de:	b480      	push	{r7}
 80033e0:	b083      	sub	sp, #12
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033e6:	bf00      	nop
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
	...

08003408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a40      	ldr	r2, [pc, #256]	; (800351c <TIM_Base_SetConfig+0x114>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d013      	beq.n	8003448 <TIM_Base_SetConfig+0x40>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003426:	d00f      	beq.n	8003448 <TIM_Base_SetConfig+0x40>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a3d      	ldr	r2, [pc, #244]	; (8003520 <TIM_Base_SetConfig+0x118>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d00b      	beq.n	8003448 <TIM_Base_SetConfig+0x40>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a3c      	ldr	r2, [pc, #240]	; (8003524 <TIM_Base_SetConfig+0x11c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d007      	beq.n	8003448 <TIM_Base_SetConfig+0x40>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a3b      	ldr	r2, [pc, #236]	; (8003528 <TIM_Base_SetConfig+0x120>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d003      	beq.n	8003448 <TIM_Base_SetConfig+0x40>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a3a      	ldr	r2, [pc, #232]	; (800352c <TIM_Base_SetConfig+0x124>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d108      	bne.n	800345a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800344e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	4313      	orrs	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a2f      	ldr	r2, [pc, #188]	; (800351c <TIM_Base_SetConfig+0x114>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d01f      	beq.n	80034a2 <TIM_Base_SetConfig+0x9a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003468:	d01b      	beq.n	80034a2 <TIM_Base_SetConfig+0x9a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a2c      	ldr	r2, [pc, #176]	; (8003520 <TIM_Base_SetConfig+0x118>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d017      	beq.n	80034a2 <TIM_Base_SetConfig+0x9a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a2b      	ldr	r2, [pc, #172]	; (8003524 <TIM_Base_SetConfig+0x11c>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d013      	beq.n	80034a2 <TIM_Base_SetConfig+0x9a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a2a      	ldr	r2, [pc, #168]	; (8003528 <TIM_Base_SetConfig+0x120>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d00f      	beq.n	80034a2 <TIM_Base_SetConfig+0x9a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a29      	ldr	r2, [pc, #164]	; (800352c <TIM_Base_SetConfig+0x124>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d00b      	beq.n	80034a2 <TIM_Base_SetConfig+0x9a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a28      	ldr	r2, [pc, #160]	; (8003530 <TIM_Base_SetConfig+0x128>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d007      	beq.n	80034a2 <TIM_Base_SetConfig+0x9a>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a27      	ldr	r2, [pc, #156]	; (8003534 <TIM_Base_SetConfig+0x12c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d003      	beq.n	80034a2 <TIM_Base_SetConfig+0x9a>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a26      	ldr	r2, [pc, #152]	; (8003538 <TIM_Base_SetConfig+0x130>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d108      	bne.n	80034b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	4313      	orrs	r3, r2
 80034c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a10      	ldr	r2, [pc, #64]	; (800351c <TIM_Base_SetConfig+0x114>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d00f      	beq.n	8003500 <TIM_Base_SetConfig+0xf8>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a12      	ldr	r2, [pc, #72]	; (800352c <TIM_Base_SetConfig+0x124>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d00b      	beq.n	8003500 <TIM_Base_SetConfig+0xf8>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a11      	ldr	r2, [pc, #68]	; (8003530 <TIM_Base_SetConfig+0x128>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d007      	beq.n	8003500 <TIM_Base_SetConfig+0xf8>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a10      	ldr	r2, [pc, #64]	; (8003534 <TIM_Base_SetConfig+0x12c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d003      	beq.n	8003500 <TIM_Base_SetConfig+0xf8>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a0f      	ldr	r2, [pc, #60]	; (8003538 <TIM_Base_SetConfig+0x130>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d103      	bne.n	8003508 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	691a      	ldr	r2, [r3, #16]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	615a      	str	r2, [r3, #20]
}
 800350e:	bf00      	nop
 8003510:	3714      	adds	r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	40012c00 	.word	0x40012c00
 8003520:	40000400 	.word	0x40000400
 8003524:	40000800 	.word	0x40000800
 8003528:	40000c00 	.word	0x40000c00
 800352c:	40013400 	.word	0x40013400
 8003530:	40014000 	.word	0x40014000
 8003534:	40014400 	.word	0x40014400
 8003538:	40014800 	.word	0x40014800

0800353c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e040      	b.n	800360c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800358e:	2b00      	cmp	r3, #0
 8003590:	d106      	bne.n	80035a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7fd fc0c 	bl	8000db8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2224      	movs	r2, #36	; 0x24
 80035a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 fc18 	bl	8003dec <UART_SetConfig>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d101      	bne.n	80035c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e022      	b.n	800360c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d002      	beq.n	80035d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 fe96 	bl	8004300 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689a      	ldr	r2, [r3, #8]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0201 	orr.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 ff1d 	bl	8004444 <UART_CheckIdleState>
 800360a:	4603      	mov	r3, r0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b08a      	sub	sp, #40	; 0x28
 8003618:	af02      	add	r7, sp, #8
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	603b      	str	r3, [r7, #0]
 8003620:	4613      	mov	r3, r2
 8003622:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003628:	2b20      	cmp	r3, #32
 800362a:	f040 8082 	bne.w	8003732 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d002      	beq.n	800363a <HAL_UART_Transmit+0x26>
 8003634:	88fb      	ldrh	r3, [r7, #6]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e07a      	b.n	8003734 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003644:	2b01      	cmp	r3, #1
 8003646:	d101      	bne.n	800364c <HAL_UART_Transmit+0x38>
 8003648:	2302      	movs	r3, #2
 800364a:	e073      	b.n	8003734 <HAL_UART_Transmit+0x120>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2221      	movs	r2, #33	; 0x21
 8003660:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003662:	f7fd fde3 	bl	800122c <HAL_GetTick>
 8003666:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	88fa      	ldrh	r2, [r7, #6]
 800366c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	88fa      	ldrh	r2, [r7, #6]
 8003674:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003680:	d108      	bne.n	8003694 <HAL_UART_Transmit+0x80>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d104      	bne.n	8003694 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800368a:	2300      	movs	r3, #0
 800368c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	61bb      	str	r3, [r7, #24]
 8003692:	e003      	b.n	800369c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003698:	2300      	movs	r3, #0
 800369a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80036a4:	e02d      	b.n	8003702 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2200      	movs	r2, #0
 80036ae:	2180      	movs	r1, #128	; 0x80
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f000 ff10 	bl	80044d6 <UART_WaitOnFlagUntilTimeout>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e039      	b.n	8003734 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10b      	bne.n	80036de <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	881a      	ldrh	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036d2:	b292      	uxth	r2, r2
 80036d4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	3302      	adds	r3, #2
 80036da:	61bb      	str	r3, [r7, #24]
 80036dc:	e008      	b.n	80036f0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	781a      	ldrb	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	b292      	uxth	r2, r2
 80036e8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	3301      	adds	r3, #1
 80036ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003708:	b29b      	uxth	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1cb      	bne.n	80036a6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2200      	movs	r2, #0
 8003716:	2140      	movs	r1, #64	; 0x40
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 fedc 	bl	80044d6 <UART_WaitOnFlagUntilTimeout>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e005      	b.n	8003734 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2220      	movs	r2, #32
 800372c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800372e:	2300      	movs	r3, #0
 8003730:	e000      	b.n	8003734 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003732:	2302      	movs	r3, #2
  }
}
 8003734:	4618      	mov	r0, r3
 8003736:	3720      	adds	r7, #32
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b08a      	sub	sp, #40	; 0x28
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	4613      	mov	r3, r2
 8003748:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800374e:	2b20      	cmp	r3, #32
 8003750:	d142      	bne.n	80037d8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d002      	beq.n	800375e <HAL_UART_Receive_IT+0x22>
 8003758:	88fb      	ldrh	r3, [r7, #6]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e03b      	b.n	80037da <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_UART_Receive_IT+0x34>
 800376c:	2302      	movs	r3, #2
 800376e:	e034      	b.n	80037da <HAL_UART_Receive_IT+0x9e>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a18      	ldr	r2, [pc, #96]	; (80037e4 <HAL_UART_Receive_IT+0xa8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d01f      	beq.n	80037c8 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d018      	beq.n	80037c8 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	e853 3f00 	ldrex	r3, [r3]
 80037a2:	613b      	str	r3, [r7, #16]
   return(result);
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037aa:	627b      	str	r3, [r7, #36]	; 0x24
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	461a      	mov	r2, r3
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	623b      	str	r3, [r7, #32]
 80037b6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b8:	69f9      	ldr	r1, [r7, #28]
 80037ba:	6a3a      	ldr	r2, [r7, #32]
 80037bc:	e841 2300 	strex	r3, r2, [r1]
 80037c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1e6      	bne.n	8003796 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80037c8:	88fb      	ldrh	r3, [r7, #6]
 80037ca:	461a      	mov	r2, r3
 80037cc:	68b9      	ldr	r1, [r7, #8]
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 ff46 	bl	8004660 <UART_Start_Receive_IT>
 80037d4:	4603      	mov	r3, r0
 80037d6:	e000      	b.n	80037da <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80037d8:	2302      	movs	r3, #2
  }
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3728      	adds	r7, #40	; 0x28
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40008000 	.word	0x40008000

080037e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b0ba      	sub	sp, #232	; 0xe8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800380e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003812:	f640 030f 	movw	r3, #2063	; 0x80f
 8003816:	4013      	ands	r3, r2
 8003818:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800381c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003820:	2b00      	cmp	r3, #0
 8003822:	d115      	bne.n	8003850 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003828:	f003 0320 	and.w	r3, r3, #32
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00f      	beq.n	8003850 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003834:	f003 0320 	and.w	r3, r3, #32
 8003838:	2b00      	cmp	r3, #0
 800383a:	d009      	beq.n	8003850 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 82a6 	beq.w	8003d92 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	4798      	blx	r3
      }
      return;
 800384e:	e2a0      	b.n	8003d92 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003850:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 8117 	beq.w	8003a88 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800385a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003866:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800386a:	4b85      	ldr	r3, [pc, #532]	; (8003a80 <HAL_UART_IRQHandler+0x298>)
 800386c:	4013      	ands	r3, r2
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 810a 	beq.w	8003a88 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b00      	cmp	r3, #0
 800387e:	d011      	beq.n	80038a4 <HAL_UART_IRQHandler+0xbc>
 8003880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00b      	beq.n	80038a4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2201      	movs	r2, #1
 8003892:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800389a:	f043 0201 	orr.w	r2, r3, #1
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d011      	beq.n	80038d4 <HAL_UART_IRQHandler+0xec>
 80038b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00b      	beq.n	80038d4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2202      	movs	r2, #2
 80038c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038ca:	f043 0204 	orr.w	r2, r3, #4
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d011      	beq.n	8003904 <HAL_UART_IRQHandler+0x11c>
 80038e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00b      	beq.n	8003904 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2204      	movs	r2, #4
 80038f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038fa:	f043 0202 	orr.w	r2, r3, #2
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003908:	f003 0308 	and.w	r3, r3, #8
 800390c:	2b00      	cmp	r3, #0
 800390e:	d017      	beq.n	8003940 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003914:	f003 0320 	and.w	r3, r3, #32
 8003918:	2b00      	cmp	r3, #0
 800391a:	d105      	bne.n	8003928 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800391c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003920:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00b      	beq.n	8003940 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2208      	movs	r2, #8
 800392e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003936:	f043 0208 	orr.w	r2, r3, #8
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003944:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003948:	2b00      	cmp	r3, #0
 800394a:	d012      	beq.n	8003972 <HAL_UART_IRQHandler+0x18a>
 800394c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003950:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00c      	beq.n	8003972 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003960:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003968:	f043 0220 	orr.w	r2, r3, #32
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 820c 	beq.w	8003d96 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800397e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003982:	f003 0320 	and.w	r3, r3, #32
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00d      	beq.n	80039a6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800398a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800398e:	f003 0320 	and.w	r3, r3, #32
 8003992:	2b00      	cmp	r3, #0
 8003994:	d007      	beq.n	80039a6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ba:	2b40      	cmp	r3, #64	; 0x40
 80039bc:	d005      	beq.n	80039ca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80039be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d04f      	beq.n	8003a6a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 ff12 	bl	80047f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039da:	2b40      	cmp	r3, #64	; 0x40
 80039dc:	d141      	bne.n	8003a62 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3308      	adds	r3, #8
 80039e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039ec:	e853 3f00 	ldrex	r3, [r3]
 80039f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80039f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	3308      	adds	r3, #8
 8003a06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a1a:	e841 2300 	strex	r3, r2, [r1]
 8003a1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003a22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1d9      	bne.n	80039de <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d013      	beq.n	8003a5a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a36:	4a13      	ldr	r2, [pc, #76]	; (8003a84 <HAL_UART_IRQHandler+0x29c>)
 8003a38:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fd fd73 	bl	800152a <HAL_DMA_Abort_IT>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d017      	beq.n	8003a7a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003a54:	4610      	mov	r0, r2
 8003a56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a58:	e00f      	b.n	8003a7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f9b0 	bl	8003dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a60:	e00b      	b.n	8003a7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f9ac 	bl	8003dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a68:	e007      	b.n	8003a7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f9a8 	bl	8003dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003a78:	e18d      	b.n	8003d96 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a7a:	bf00      	nop
    return;
 8003a7c:	e18b      	b.n	8003d96 <HAL_UART_IRQHandler+0x5ae>
 8003a7e:	bf00      	nop
 8003a80:	04000120 	.word	0x04000120
 8003a84:	080048bb 	.word	0x080048bb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	f040 8146 	bne.w	8003d1e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a96:	f003 0310 	and.w	r3, r3, #16
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 813f 	beq.w	8003d1e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aa4:	f003 0310 	and.w	r3, r3, #16
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 8138 	beq.w	8003d1e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2210      	movs	r2, #16
 8003ab4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac0:	2b40      	cmp	r3, #64	; 0x40
 8003ac2:	f040 80b4 	bne.w	8003c2e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ad2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 815f 	beq.w	8003d9a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ae2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	f080 8157 	bcs.w	8003d9a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003af2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0320 	and.w	r3, r3, #32
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f040 8085 	bne.w	8003c12 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b14:	e853 3f00 	ldrex	r3, [r3]
 8003b18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003b32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003b36:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003b3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b42:	e841 2300 	strex	r3, r2, [r1]
 8003b46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1da      	bne.n	8003b08 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	3308      	adds	r3, #8
 8003b58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b5c:	e853 3f00 	ldrex	r3, [r3]
 8003b60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b64:	f023 0301 	bic.w	r3, r3, #1
 8003b68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3308      	adds	r3, #8
 8003b72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b82:	e841 2300 	strex	r3, r2, [r1]
 8003b86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1e1      	bne.n	8003b52 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	3308      	adds	r3, #8
 8003b94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b98:	e853 3f00 	ldrex	r3, [r3]
 8003b9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ba0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ba4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	3308      	adds	r3, #8
 8003bae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003bb2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003bb4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003bb8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003bba:	e841 2300 	strex	r3, r2, [r1]
 8003bbe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003bc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1e3      	bne.n	8003b8e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bda:	e853 3f00 	ldrex	r3, [r3]
 8003bde:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003be2:	f023 0310 	bic.w	r3, r3, #16
 8003be6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003bf4:	65bb      	str	r3, [r7, #88]	; 0x58
 8003bf6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bfa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bfc:	e841 2300 	strex	r3, r2, [r1]
 8003c00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1e4      	bne.n	8003bd2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7fd fc4e 	bl	80014ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	4619      	mov	r1, r3
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f8d4 	bl	8003dd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c2c:	e0b5      	b.n	8003d9a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 80a7 	beq.w	8003d9e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003c50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 80a2 	beq.w	8003d9e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c62:	e853 3f00 	ldrex	r3, [r3]
 8003c66:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	461a      	mov	r2, r3
 8003c78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003c7c:	647b      	str	r3, [r7, #68]	; 0x44
 8003c7e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c84:	e841 2300 	strex	r3, r2, [r1]
 8003c88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1e4      	bne.n	8003c5a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3308      	adds	r3, #8
 8003c96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	e853 3f00 	ldrex	r3, [r3]
 8003c9e:	623b      	str	r3, [r7, #32]
   return(result);
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	f023 0301 	bic.w	r3, r3, #1
 8003ca6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	3308      	adds	r3, #8
 8003cb0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003cb4:	633a      	str	r2, [r7, #48]	; 0x30
 8003cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cbc:	e841 2300 	strex	r3, r2, [r1]
 8003cc0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1e3      	bne.n	8003c90 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	e853 3f00 	ldrex	r3, [r3]
 8003ce6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f023 0310 	bic.w	r3, r3, #16
 8003cee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003cfc:	61fb      	str	r3, [r7, #28]
 8003cfe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d00:	69b9      	ldr	r1, [r7, #24]
 8003d02:	69fa      	ldr	r2, [r7, #28]
 8003d04:	e841 2300 	strex	r3, r2, [r1]
 8003d08:	617b      	str	r3, [r7, #20]
   return(result);
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1e4      	bne.n	8003cda <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d14:	4619      	mov	r1, r3
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f85c 	bl	8003dd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d1c:	e03f      	b.n	8003d9e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00e      	beq.n	8003d48 <HAL_UART_IRQHandler+0x560>
 8003d2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d008      	beq.n	8003d48 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003d3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 ff5a 	bl	8004bfa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d46:	e02d      	b.n	8003da4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00e      	beq.n	8003d72 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d008      	beq.n	8003d72 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d01c      	beq.n	8003da2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	4798      	blx	r3
    }
    return;
 8003d70:	e017      	b.n	8003da2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d012      	beq.n	8003da4 <HAL_UART_IRQHandler+0x5bc>
 8003d7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00c      	beq.n	8003da4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fdab 	bl	80048e6 <UART_EndTransmit_IT>
    return;
 8003d90:	e008      	b.n	8003da4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003d92:	bf00      	nop
 8003d94:	e006      	b.n	8003da4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003d96:	bf00      	nop
 8003d98:	e004      	b.n	8003da4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003d9a:	bf00      	nop
 8003d9c:	e002      	b.n	8003da4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003d9e:	bf00      	nop
 8003da0:	e000      	b.n	8003da4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003da2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003da4:	37e8      	adds	r7, #232	; 0xe8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop

08003dac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dec:	b5b0      	push	{r4, r5, r7, lr}
 8003dee:	b088      	sub	sp, #32
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003df4:	2300      	movs	r3, #0
 8003df6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	431a      	orrs	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	4bad      	ldr	r3, [pc, #692]	; (80040cc <UART_SetConfig+0x2e0>)
 8003e18:	4013      	ands	r3, r2
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6812      	ldr	r2, [r2, #0]
 8003e1e:	69f9      	ldr	r1, [r7, #28]
 8003e20:	430b      	orrs	r3, r1
 8003e22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4aa2      	ldr	r2, [pc, #648]	; (80040d0 <UART_SetConfig+0x2e4>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d004      	beq.n	8003e54 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	69fa      	ldr	r2, [r7, #28]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	69fa      	ldr	r2, [r7, #28]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a99      	ldr	r2, [pc, #612]	; (80040d4 <UART_SetConfig+0x2e8>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d121      	bne.n	8003eb6 <UART_SetConfig+0xca>
 8003e72:	4b99      	ldr	r3, [pc, #612]	; (80040d8 <UART_SetConfig+0x2ec>)
 8003e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e78:	f003 0303 	and.w	r3, r3, #3
 8003e7c:	2b03      	cmp	r3, #3
 8003e7e:	d817      	bhi.n	8003eb0 <UART_SetConfig+0xc4>
 8003e80:	a201      	add	r2, pc, #4	; (adr r2, 8003e88 <UART_SetConfig+0x9c>)
 8003e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e86:	bf00      	nop
 8003e88:	08003e99 	.word	0x08003e99
 8003e8c:	08003ea5 	.word	0x08003ea5
 8003e90:	08003e9f 	.word	0x08003e9f
 8003e94:	08003eab 	.word	0x08003eab
 8003e98:	2301      	movs	r3, #1
 8003e9a:	76fb      	strb	r3, [r7, #27]
 8003e9c:	e0e7      	b.n	800406e <UART_SetConfig+0x282>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	76fb      	strb	r3, [r7, #27]
 8003ea2:	e0e4      	b.n	800406e <UART_SetConfig+0x282>
 8003ea4:	2304      	movs	r3, #4
 8003ea6:	76fb      	strb	r3, [r7, #27]
 8003ea8:	e0e1      	b.n	800406e <UART_SetConfig+0x282>
 8003eaa:	2308      	movs	r3, #8
 8003eac:	76fb      	strb	r3, [r7, #27]
 8003eae:	e0de      	b.n	800406e <UART_SetConfig+0x282>
 8003eb0:	2310      	movs	r3, #16
 8003eb2:	76fb      	strb	r3, [r7, #27]
 8003eb4:	e0db      	b.n	800406e <UART_SetConfig+0x282>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a88      	ldr	r2, [pc, #544]	; (80040dc <UART_SetConfig+0x2f0>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d132      	bne.n	8003f26 <UART_SetConfig+0x13a>
 8003ec0:	4b85      	ldr	r3, [pc, #532]	; (80040d8 <UART_SetConfig+0x2ec>)
 8003ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec6:	f003 030c 	and.w	r3, r3, #12
 8003eca:	2b0c      	cmp	r3, #12
 8003ecc:	d828      	bhi.n	8003f20 <UART_SetConfig+0x134>
 8003ece:	a201      	add	r2, pc, #4	; (adr r2, 8003ed4 <UART_SetConfig+0xe8>)
 8003ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed4:	08003f09 	.word	0x08003f09
 8003ed8:	08003f21 	.word	0x08003f21
 8003edc:	08003f21 	.word	0x08003f21
 8003ee0:	08003f21 	.word	0x08003f21
 8003ee4:	08003f15 	.word	0x08003f15
 8003ee8:	08003f21 	.word	0x08003f21
 8003eec:	08003f21 	.word	0x08003f21
 8003ef0:	08003f21 	.word	0x08003f21
 8003ef4:	08003f0f 	.word	0x08003f0f
 8003ef8:	08003f21 	.word	0x08003f21
 8003efc:	08003f21 	.word	0x08003f21
 8003f00:	08003f21 	.word	0x08003f21
 8003f04:	08003f1b 	.word	0x08003f1b
 8003f08:	2300      	movs	r3, #0
 8003f0a:	76fb      	strb	r3, [r7, #27]
 8003f0c:	e0af      	b.n	800406e <UART_SetConfig+0x282>
 8003f0e:	2302      	movs	r3, #2
 8003f10:	76fb      	strb	r3, [r7, #27]
 8003f12:	e0ac      	b.n	800406e <UART_SetConfig+0x282>
 8003f14:	2304      	movs	r3, #4
 8003f16:	76fb      	strb	r3, [r7, #27]
 8003f18:	e0a9      	b.n	800406e <UART_SetConfig+0x282>
 8003f1a:	2308      	movs	r3, #8
 8003f1c:	76fb      	strb	r3, [r7, #27]
 8003f1e:	e0a6      	b.n	800406e <UART_SetConfig+0x282>
 8003f20:	2310      	movs	r3, #16
 8003f22:	76fb      	strb	r3, [r7, #27]
 8003f24:	e0a3      	b.n	800406e <UART_SetConfig+0x282>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a6d      	ldr	r2, [pc, #436]	; (80040e0 <UART_SetConfig+0x2f4>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d120      	bne.n	8003f72 <UART_SetConfig+0x186>
 8003f30:	4b69      	ldr	r3, [pc, #420]	; (80040d8 <UART_SetConfig+0x2ec>)
 8003f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f36:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f3a:	2b30      	cmp	r3, #48	; 0x30
 8003f3c:	d013      	beq.n	8003f66 <UART_SetConfig+0x17a>
 8003f3e:	2b30      	cmp	r3, #48	; 0x30
 8003f40:	d814      	bhi.n	8003f6c <UART_SetConfig+0x180>
 8003f42:	2b20      	cmp	r3, #32
 8003f44:	d009      	beq.n	8003f5a <UART_SetConfig+0x16e>
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	d810      	bhi.n	8003f6c <UART_SetConfig+0x180>
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d002      	beq.n	8003f54 <UART_SetConfig+0x168>
 8003f4e:	2b10      	cmp	r3, #16
 8003f50:	d006      	beq.n	8003f60 <UART_SetConfig+0x174>
 8003f52:	e00b      	b.n	8003f6c <UART_SetConfig+0x180>
 8003f54:	2300      	movs	r3, #0
 8003f56:	76fb      	strb	r3, [r7, #27]
 8003f58:	e089      	b.n	800406e <UART_SetConfig+0x282>
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	76fb      	strb	r3, [r7, #27]
 8003f5e:	e086      	b.n	800406e <UART_SetConfig+0x282>
 8003f60:	2304      	movs	r3, #4
 8003f62:	76fb      	strb	r3, [r7, #27]
 8003f64:	e083      	b.n	800406e <UART_SetConfig+0x282>
 8003f66:	2308      	movs	r3, #8
 8003f68:	76fb      	strb	r3, [r7, #27]
 8003f6a:	e080      	b.n	800406e <UART_SetConfig+0x282>
 8003f6c:	2310      	movs	r3, #16
 8003f6e:	76fb      	strb	r3, [r7, #27]
 8003f70:	e07d      	b.n	800406e <UART_SetConfig+0x282>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a5b      	ldr	r2, [pc, #364]	; (80040e4 <UART_SetConfig+0x2f8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d120      	bne.n	8003fbe <UART_SetConfig+0x1d2>
 8003f7c:	4b56      	ldr	r3, [pc, #344]	; (80040d8 <UART_SetConfig+0x2ec>)
 8003f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003f86:	2bc0      	cmp	r3, #192	; 0xc0
 8003f88:	d013      	beq.n	8003fb2 <UART_SetConfig+0x1c6>
 8003f8a:	2bc0      	cmp	r3, #192	; 0xc0
 8003f8c:	d814      	bhi.n	8003fb8 <UART_SetConfig+0x1cc>
 8003f8e:	2b80      	cmp	r3, #128	; 0x80
 8003f90:	d009      	beq.n	8003fa6 <UART_SetConfig+0x1ba>
 8003f92:	2b80      	cmp	r3, #128	; 0x80
 8003f94:	d810      	bhi.n	8003fb8 <UART_SetConfig+0x1cc>
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d002      	beq.n	8003fa0 <UART_SetConfig+0x1b4>
 8003f9a:	2b40      	cmp	r3, #64	; 0x40
 8003f9c:	d006      	beq.n	8003fac <UART_SetConfig+0x1c0>
 8003f9e:	e00b      	b.n	8003fb8 <UART_SetConfig+0x1cc>
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	76fb      	strb	r3, [r7, #27]
 8003fa4:	e063      	b.n	800406e <UART_SetConfig+0x282>
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	76fb      	strb	r3, [r7, #27]
 8003faa:	e060      	b.n	800406e <UART_SetConfig+0x282>
 8003fac:	2304      	movs	r3, #4
 8003fae:	76fb      	strb	r3, [r7, #27]
 8003fb0:	e05d      	b.n	800406e <UART_SetConfig+0x282>
 8003fb2:	2308      	movs	r3, #8
 8003fb4:	76fb      	strb	r3, [r7, #27]
 8003fb6:	e05a      	b.n	800406e <UART_SetConfig+0x282>
 8003fb8:	2310      	movs	r3, #16
 8003fba:	76fb      	strb	r3, [r7, #27]
 8003fbc:	e057      	b.n	800406e <UART_SetConfig+0x282>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a49      	ldr	r2, [pc, #292]	; (80040e8 <UART_SetConfig+0x2fc>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d125      	bne.n	8004014 <UART_SetConfig+0x228>
 8003fc8:	4b43      	ldr	r3, [pc, #268]	; (80040d8 <UART_SetConfig+0x2ec>)
 8003fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fd6:	d017      	beq.n	8004008 <UART_SetConfig+0x21c>
 8003fd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fdc:	d817      	bhi.n	800400e <UART_SetConfig+0x222>
 8003fde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fe2:	d00b      	beq.n	8003ffc <UART_SetConfig+0x210>
 8003fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fe8:	d811      	bhi.n	800400e <UART_SetConfig+0x222>
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <UART_SetConfig+0x20a>
 8003fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ff2:	d006      	beq.n	8004002 <UART_SetConfig+0x216>
 8003ff4:	e00b      	b.n	800400e <UART_SetConfig+0x222>
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	76fb      	strb	r3, [r7, #27]
 8003ffa:	e038      	b.n	800406e <UART_SetConfig+0x282>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	76fb      	strb	r3, [r7, #27]
 8004000:	e035      	b.n	800406e <UART_SetConfig+0x282>
 8004002:	2304      	movs	r3, #4
 8004004:	76fb      	strb	r3, [r7, #27]
 8004006:	e032      	b.n	800406e <UART_SetConfig+0x282>
 8004008:	2308      	movs	r3, #8
 800400a:	76fb      	strb	r3, [r7, #27]
 800400c:	e02f      	b.n	800406e <UART_SetConfig+0x282>
 800400e:	2310      	movs	r3, #16
 8004010:	76fb      	strb	r3, [r7, #27]
 8004012:	e02c      	b.n	800406e <UART_SetConfig+0x282>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a2d      	ldr	r2, [pc, #180]	; (80040d0 <UART_SetConfig+0x2e4>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d125      	bne.n	800406a <UART_SetConfig+0x27e>
 800401e:	4b2e      	ldr	r3, [pc, #184]	; (80040d8 <UART_SetConfig+0x2ec>)
 8004020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004024:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004028:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800402c:	d017      	beq.n	800405e <UART_SetConfig+0x272>
 800402e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004032:	d817      	bhi.n	8004064 <UART_SetConfig+0x278>
 8004034:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004038:	d00b      	beq.n	8004052 <UART_SetConfig+0x266>
 800403a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800403e:	d811      	bhi.n	8004064 <UART_SetConfig+0x278>
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <UART_SetConfig+0x260>
 8004044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004048:	d006      	beq.n	8004058 <UART_SetConfig+0x26c>
 800404a:	e00b      	b.n	8004064 <UART_SetConfig+0x278>
 800404c:	2300      	movs	r3, #0
 800404e:	76fb      	strb	r3, [r7, #27]
 8004050:	e00d      	b.n	800406e <UART_SetConfig+0x282>
 8004052:	2302      	movs	r3, #2
 8004054:	76fb      	strb	r3, [r7, #27]
 8004056:	e00a      	b.n	800406e <UART_SetConfig+0x282>
 8004058:	2304      	movs	r3, #4
 800405a:	76fb      	strb	r3, [r7, #27]
 800405c:	e007      	b.n	800406e <UART_SetConfig+0x282>
 800405e:	2308      	movs	r3, #8
 8004060:	76fb      	strb	r3, [r7, #27]
 8004062:	e004      	b.n	800406e <UART_SetConfig+0x282>
 8004064:	2310      	movs	r3, #16
 8004066:	76fb      	strb	r3, [r7, #27]
 8004068:	e001      	b.n	800406e <UART_SetConfig+0x282>
 800406a:	2310      	movs	r3, #16
 800406c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a17      	ldr	r2, [pc, #92]	; (80040d0 <UART_SetConfig+0x2e4>)
 8004074:	4293      	cmp	r3, r2
 8004076:	f040 8087 	bne.w	8004188 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800407a:	7efb      	ldrb	r3, [r7, #27]
 800407c:	2b08      	cmp	r3, #8
 800407e:	d837      	bhi.n	80040f0 <UART_SetConfig+0x304>
 8004080:	a201      	add	r2, pc, #4	; (adr r2, 8004088 <UART_SetConfig+0x29c>)
 8004082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004086:	bf00      	nop
 8004088:	080040ad 	.word	0x080040ad
 800408c:	080040f1 	.word	0x080040f1
 8004090:	080040b5 	.word	0x080040b5
 8004094:	080040f1 	.word	0x080040f1
 8004098:	080040bb 	.word	0x080040bb
 800409c:	080040f1 	.word	0x080040f1
 80040a0:	080040f1 	.word	0x080040f1
 80040a4:	080040f1 	.word	0x080040f1
 80040a8:	080040c3 	.word	0x080040c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040ac:	f7fe fa52 	bl	8002554 <HAL_RCC_GetPCLK1Freq>
 80040b0:	6178      	str	r0, [r7, #20]
        break;
 80040b2:	e022      	b.n	80040fa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040b4:	4b0d      	ldr	r3, [pc, #52]	; (80040ec <UART_SetConfig+0x300>)
 80040b6:	617b      	str	r3, [r7, #20]
        break;
 80040b8:	e01f      	b.n	80040fa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ba:	f7fe f9b3 	bl	8002424 <HAL_RCC_GetSysClockFreq>
 80040be:	6178      	str	r0, [r7, #20]
        break;
 80040c0:	e01b      	b.n	80040fa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040c6:	617b      	str	r3, [r7, #20]
        break;
 80040c8:	e017      	b.n	80040fa <UART_SetConfig+0x30e>
 80040ca:	bf00      	nop
 80040cc:	efff69f3 	.word	0xefff69f3
 80040d0:	40008000 	.word	0x40008000
 80040d4:	40013800 	.word	0x40013800
 80040d8:	40021000 	.word	0x40021000
 80040dc:	40004400 	.word	0x40004400
 80040e0:	40004800 	.word	0x40004800
 80040e4:	40004c00 	.word	0x40004c00
 80040e8:	40005000 	.word	0x40005000
 80040ec:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	76bb      	strb	r3, [r7, #26]
        break;
 80040f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 80f1 	beq.w	80042e4 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	4613      	mov	r3, r2
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	4413      	add	r3, r2
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	429a      	cmp	r2, r3
 8004110:	d305      	bcc.n	800411e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	429a      	cmp	r2, r3
 800411c:	d902      	bls.n	8004124 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	76bb      	strb	r3, [r7, #26]
 8004122:	e0df      	b.n	80042e4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	4618      	mov	r0, r3
 8004128:	f04f 0100 	mov.w	r1, #0
 800412c:	f04f 0200 	mov.w	r2, #0
 8004130:	f04f 0300 	mov.w	r3, #0
 8004134:	020b      	lsls	r3, r1, #8
 8004136:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800413a:	0202      	lsls	r2, r0, #8
 800413c:	6879      	ldr	r1, [r7, #4]
 800413e:	6849      	ldr	r1, [r1, #4]
 8004140:	0849      	lsrs	r1, r1, #1
 8004142:	4608      	mov	r0, r1
 8004144:	f04f 0100 	mov.w	r1, #0
 8004148:	1814      	adds	r4, r2, r0
 800414a:	eb43 0501 	adc.w	r5, r3, r1
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	461a      	mov	r2, r3
 8004154:	f04f 0300 	mov.w	r3, #0
 8004158:	4620      	mov	r0, r4
 800415a:	4629      	mov	r1, r5
 800415c:	f7fc f890 	bl	8000280 <__aeabi_uldivmod>
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1
 8004164:	4613      	mov	r3, r2
 8004166:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800416e:	d308      	bcc.n	8004182 <UART_SetConfig+0x396>
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004176:	d204      	bcs.n	8004182 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	60da      	str	r2, [r3, #12]
 8004180:	e0b0      	b.n	80042e4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	76bb      	strb	r3, [r7, #26]
 8004186:	e0ad      	b.n	80042e4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004190:	d15b      	bne.n	800424a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8004192:	7efb      	ldrb	r3, [r7, #27]
 8004194:	2b08      	cmp	r3, #8
 8004196:	d828      	bhi.n	80041ea <UART_SetConfig+0x3fe>
 8004198:	a201      	add	r2, pc, #4	; (adr r2, 80041a0 <UART_SetConfig+0x3b4>)
 800419a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419e:	bf00      	nop
 80041a0:	080041c5 	.word	0x080041c5
 80041a4:	080041cd 	.word	0x080041cd
 80041a8:	080041d5 	.word	0x080041d5
 80041ac:	080041eb 	.word	0x080041eb
 80041b0:	080041db 	.word	0x080041db
 80041b4:	080041eb 	.word	0x080041eb
 80041b8:	080041eb 	.word	0x080041eb
 80041bc:	080041eb 	.word	0x080041eb
 80041c0:	080041e3 	.word	0x080041e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041c4:	f7fe f9c6 	bl	8002554 <HAL_RCC_GetPCLK1Freq>
 80041c8:	6178      	str	r0, [r7, #20]
        break;
 80041ca:	e013      	b.n	80041f4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041cc:	f7fe f9d8 	bl	8002580 <HAL_RCC_GetPCLK2Freq>
 80041d0:	6178      	str	r0, [r7, #20]
        break;
 80041d2:	e00f      	b.n	80041f4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041d4:	4b49      	ldr	r3, [pc, #292]	; (80042fc <UART_SetConfig+0x510>)
 80041d6:	617b      	str	r3, [r7, #20]
        break;
 80041d8:	e00c      	b.n	80041f4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041da:	f7fe f923 	bl	8002424 <HAL_RCC_GetSysClockFreq>
 80041de:	6178      	str	r0, [r7, #20]
        break;
 80041e0:	e008      	b.n	80041f4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041e6:	617b      	str	r3, [r7, #20]
        break;
 80041e8:	e004      	b.n	80041f4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	76bb      	strb	r3, [r7, #26]
        break;
 80041f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d074      	beq.n	80042e4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	005a      	lsls	r2, r3, #1
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	085b      	lsrs	r3, r3, #1
 8004204:	441a      	add	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	fbb2 f3f3 	udiv	r3, r2, r3
 800420e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	2b0f      	cmp	r3, #15
 8004214:	d916      	bls.n	8004244 <UART_SetConfig+0x458>
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800421c:	d212      	bcs.n	8004244 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	b29b      	uxth	r3, r3
 8004222:	f023 030f 	bic.w	r3, r3, #15
 8004226:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	085b      	lsrs	r3, r3, #1
 800422c:	b29b      	uxth	r3, r3
 800422e:	f003 0307 	and.w	r3, r3, #7
 8004232:	b29a      	uxth	r2, r3
 8004234:	89fb      	ldrh	r3, [r7, #14]
 8004236:	4313      	orrs	r3, r2
 8004238:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	89fa      	ldrh	r2, [r7, #14]
 8004240:	60da      	str	r2, [r3, #12]
 8004242:	e04f      	b.n	80042e4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	76bb      	strb	r3, [r7, #26]
 8004248:	e04c      	b.n	80042e4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800424a:	7efb      	ldrb	r3, [r7, #27]
 800424c:	2b08      	cmp	r3, #8
 800424e:	d828      	bhi.n	80042a2 <UART_SetConfig+0x4b6>
 8004250:	a201      	add	r2, pc, #4	; (adr r2, 8004258 <UART_SetConfig+0x46c>)
 8004252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004256:	bf00      	nop
 8004258:	0800427d 	.word	0x0800427d
 800425c:	08004285 	.word	0x08004285
 8004260:	0800428d 	.word	0x0800428d
 8004264:	080042a3 	.word	0x080042a3
 8004268:	08004293 	.word	0x08004293
 800426c:	080042a3 	.word	0x080042a3
 8004270:	080042a3 	.word	0x080042a3
 8004274:	080042a3 	.word	0x080042a3
 8004278:	0800429b 	.word	0x0800429b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800427c:	f7fe f96a 	bl	8002554 <HAL_RCC_GetPCLK1Freq>
 8004280:	6178      	str	r0, [r7, #20]
        break;
 8004282:	e013      	b.n	80042ac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004284:	f7fe f97c 	bl	8002580 <HAL_RCC_GetPCLK2Freq>
 8004288:	6178      	str	r0, [r7, #20]
        break;
 800428a:	e00f      	b.n	80042ac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800428c:	4b1b      	ldr	r3, [pc, #108]	; (80042fc <UART_SetConfig+0x510>)
 800428e:	617b      	str	r3, [r7, #20]
        break;
 8004290:	e00c      	b.n	80042ac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004292:	f7fe f8c7 	bl	8002424 <HAL_RCC_GetSysClockFreq>
 8004296:	6178      	str	r0, [r7, #20]
        break;
 8004298:	e008      	b.n	80042ac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800429a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800429e:	617b      	str	r3, [r7, #20]
        break;
 80042a0:	e004      	b.n	80042ac <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80042a2:	2300      	movs	r3, #0
 80042a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	76bb      	strb	r3, [r7, #26]
        break;
 80042aa:	bf00      	nop
    }

    if (pclk != 0U)
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d018      	beq.n	80042e4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	085a      	lsrs	r2, r3, #1
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	441a      	add	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	2b0f      	cmp	r3, #15
 80042ca:	d909      	bls.n	80042e0 <UART_SetConfig+0x4f4>
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d2:	d205      	bcs.n	80042e0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	60da      	str	r2, [r3, #12]
 80042de:	e001      	b.n	80042e4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80042f0:	7ebb      	ldrb	r3, [r7, #26]
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3720      	adds	r7, #32
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bdb0      	pop	{r4, r5, r7, pc}
 80042fa:	bf00      	nop
 80042fc:	00f42400 	.word	0x00f42400

08004300 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00a      	beq.n	800432a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	f003 0304 	and.w	r3, r3, #4
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00a      	beq.n	800436e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	f003 0308 	and.w	r3, r3, #8
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00a      	beq.n	8004390 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	f003 0310 	and.w	r3, r3, #16
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00a      	beq.n	80043b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	f003 0320 	and.w	r3, r3, #32
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00a      	beq.n	80043d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d01a      	beq.n	8004416 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043fe:	d10a      	bne.n	8004416 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00a      	beq.n	8004438 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	605a      	str	r2, [r3, #4]
  }
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af02      	add	r7, sp, #8
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004454:	f7fc feea 	bl	800122c <HAL_GetTick>
 8004458:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0308 	and.w	r3, r3, #8
 8004464:	2b08      	cmp	r3, #8
 8004466:	d10e      	bne.n	8004486 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004468:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f82d 	bl	80044d6 <UART_WaitOnFlagUntilTimeout>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e023      	b.n	80044ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b04      	cmp	r3, #4
 8004492:	d10e      	bne.n	80044b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004494:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f817 	bl	80044d6 <UART_WaitOnFlagUntilTimeout>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e00d      	b.n	80044ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2220      	movs	r2, #32
 80044b6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2220      	movs	r2, #32
 80044bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b09c      	sub	sp, #112	; 0x70
 80044da:	af00      	add	r7, sp, #0
 80044dc:	60f8      	str	r0, [r7, #12]
 80044de:	60b9      	str	r1, [r7, #8]
 80044e0:	603b      	str	r3, [r7, #0]
 80044e2:	4613      	mov	r3, r2
 80044e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044e6:	e0a5      	b.n	8004634 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ee:	f000 80a1 	beq.w	8004634 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f2:	f7fc fe9b 	bl	800122c <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80044fe:	429a      	cmp	r2, r3
 8004500:	d302      	bcc.n	8004508 <UART_WaitOnFlagUntilTimeout+0x32>
 8004502:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004504:	2b00      	cmp	r3, #0
 8004506:	d13e      	bne.n	8004586 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004510:	e853 3f00 	ldrex	r3, [r3]
 8004514:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004518:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800451c:	667b      	str	r3, [r7, #100]	; 0x64
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004526:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004528:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800452c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800452e:	e841 2300 	strex	r3, r2, [r1]
 8004532:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004534:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1e6      	bne.n	8004508 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	3308      	adds	r3, #8
 8004540:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004544:	e853 3f00 	ldrex	r3, [r3]
 8004548:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800454a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454c:	f023 0301 	bic.w	r3, r3, #1
 8004550:	663b      	str	r3, [r7, #96]	; 0x60
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	3308      	adds	r3, #8
 8004558:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800455a:	64ba      	str	r2, [r7, #72]	; 0x48
 800455c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004560:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004562:	e841 2300 	strex	r3, r2, [r1]
 8004566:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1e5      	bne.n	800453a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2220      	movs	r2, #32
 8004572:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2220      	movs	r2, #32
 8004578:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e067      	b.n	8004656 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0304 	and.w	r3, r3, #4
 8004590:	2b00      	cmp	r3, #0
 8004592:	d04f      	beq.n	8004634 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800459e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045a2:	d147      	bne.n	8004634 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045ac:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b6:	e853 3f00 	ldrex	r3, [r3]
 80045ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	461a      	mov	r2, r3
 80045ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045cc:	637b      	str	r3, [r7, #52]	; 0x34
 80045ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045d4:	e841 2300 	strex	r3, r2, [r1]
 80045d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80045da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1e6      	bne.n	80045ae <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3308      	adds	r3, #8
 80045e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	e853 3f00 	ldrex	r3, [r3]
 80045ee:	613b      	str	r3, [r7, #16]
   return(result);
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	f023 0301 	bic.w	r3, r3, #1
 80045f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	3308      	adds	r3, #8
 80045fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004600:	623a      	str	r2, [r7, #32]
 8004602:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004604:	69f9      	ldr	r1, [r7, #28]
 8004606:	6a3a      	ldr	r2, [r7, #32]
 8004608:	e841 2300 	strex	r3, r2, [r1]
 800460c:	61bb      	str	r3, [r7, #24]
   return(result);
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1e5      	bne.n	80045e0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2220      	movs	r2, #32
 8004618:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2220      	movs	r2, #32
 800461e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2220      	movs	r2, #32
 8004624:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e010      	b.n	8004656 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	69da      	ldr	r2, [r3, #28]
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	4013      	ands	r3, r2
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	429a      	cmp	r2, r3
 8004642:	bf0c      	ite	eq
 8004644:	2301      	moveq	r3, #1
 8004646:	2300      	movne	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	461a      	mov	r2, r3
 800464c:	79fb      	ldrb	r3, [r7, #7]
 800464e:	429a      	cmp	r2, r3
 8004650:	f43f af4a 	beq.w	80044e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3770      	adds	r7, #112	; 0x70
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
	...

08004660 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004660:	b480      	push	{r7}
 8004662:	b097      	sub	sp, #92	; 0x5c
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	4613      	mov	r3, r2
 800466c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	88fa      	ldrh	r2, [r7, #6]
 8004678:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	88fa      	ldrh	r2, [r7, #6]
 8004680:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004692:	d10e      	bne.n	80046b2 <UART_Start_Receive_IT+0x52>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d105      	bne.n	80046a8 <UART_Start_Receive_IT+0x48>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80046a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046a6:	e02d      	b.n	8004704 <UART_Start_Receive_IT+0xa4>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	22ff      	movs	r2, #255	; 0xff
 80046ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046b0:	e028      	b.n	8004704 <UART_Start_Receive_IT+0xa4>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10d      	bne.n	80046d6 <UART_Start_Receive_IT+0x76>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d104      	bne.n	80046cc <UART_Start_Receive_IT+0x6c>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	22ff      	movs	r2, #255	; 0xff
 80046c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046ca:	e01b      	b.n	8004704 <UART_Start_Receive_IT+0xa4>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	227f      	movs	r2, #127	; 0x7f
 80046d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046d4:	e016      	b.n	8004704 <UART_Start_Receive_IT+0xa4>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046de:	d10d      	bne.n	80046fc <UART_Start_Receive_IT+0x9c>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d104      	bne.n	80046f2 <UART_Start_Receive_IT+0x92>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	227f      	movs	r2, #127	; 0x7f
 80046ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046f0:	e008      	b.n	8004704 <UART_Start_Receive_IT+0xa4>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	223f      	movs	r2, #63	; 0x3f
 80046f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046fa:	e003      	b.n	8004704 <UART_Start_Receive_IT+0xa4>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2222      	movs	r2, #34	; 0x22
 8004710:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	3308      	adds	r3, #8
 8004718:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800471c:	e853 3f00 	ldrex	r3, [r3]
 8004720:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004724:	f043 0301 	orr.w	r3, r3, #1
 8004728:	657b      	str	r3, [r7, #84]	; 0x54
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	3308      	adds	r3, #8
 8004730:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004732:	64ba      	str	r2, [r7, #72]	; 0x48
 8004734:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004736:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004738:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800473a:	e841 2300 	strex	r3, r2, [r1]
 800473e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1e5      	bne.n	8004712 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800474e:	d107      	bne.n	8004760 <UART_Start_Receive_IT+0x100>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d103      	bne.n	8004760 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4a24      	ldr	r2, [pc, #144]	; (80047ec <UART_Start_Receive_IT+0x18c>)
 800475c:	665a      	str	r2, [r3, #100]	; 0x64
 800475e:	e002      	b.n	8004766 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4a23      	ldr	r2, [pc, #140]	; (80047f0 <UART_Start_Receive_IT+0x190>)
 8004764:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d019      	beq.n	80047aa <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477e:	e853 3f00 	ldrex	r3, [r3]
 8004782:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004786:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800478a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	461a      	mov	r2, r3
 8004792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004794:	637b      	str	r3, [r7, #52]	; 0x34
 8004796:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004798:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800479a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800479c:	e841 2300 	strex	r3, r2, [r1]
 80047a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1e6      	bne.n	8004776 <UART_Start_Receive_IT+0x116>
 80047a8:	e018      	b.n	80047dc <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	e853 3f00 	ldrex	r3, [r3]
 80047b6:	613b      	str	r3, [r7, #16]
   return(result);
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f043 0320 	orr.w	r3, r3, #32
 80047be:	653b      	str	r3, [r7, #80]	; 0x50
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	461a      	mov	r2, r3
 80047c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047c8:	623b      	str	r3, [r7, #32]
 80047ca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047cc:	69f9      	ldr	r1, [r7, #28]
 80047ce:	6a3a      	ldr	r2, [r7, #32]
 80047d0:	e841 2300 	strex	r3, r2, [r1]
 80047d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1e6      	bne.n	80047aa <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	375c      	adds	r7, #92	; 0x5c
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	08004a9b 	.word	0x08004a9b
 80047f0:	0800493b 	.word	0x0800493b

080047f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b095      	sub	sp, #84	; 0x54
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004804:	e853 3f00 	ldrex	r3, [r3]
 8004808:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800480a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004810:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	461a      	mov	r2, r3
 8004818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800481a:	643b      	str	r3, [r7, #64]	; 0x40
 800481c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004820:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004822:	e841 2300 	strex	r3, r2, [r1]
 8004826:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1e6      	bne.n	80047fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	3308      	adds	r3, #8
 8004834:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004836:	6a3b      	ldr	r3, [r7, #32]
 8004838:	e853 3f00 	ldrex	r3, [r3]
 800483c:	61fb      	str	r3, [r7, #28]
   return(result);
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	f023 0301 	bic.w	r3, r3, #1
 8004844:	64bb      	str	r3, [r7, #72]	; 0x48
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3308      	adds	r3, #8
 800484c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800484e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004850:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004852:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004856:	e841 2300 	strex	r3, r2, [r1]
 800485a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1e5      	bne.n	800482e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004866:	2b01      	cmp	r3, #1
 8004868:	d118      	bne.n	800489c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	e853 3f00 	ldrex	r3, [r3]
 8004876:	60bb      	str	r3, [r7, #8]
   return(result);
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	f023 0310 	bic.w	r3, r3, #16
 800487e:	647b      	str	r3, [r7, #68]	; 0x44
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	461a      	mov	r2, r3
 8004886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004888:	61bb      	str	r3, [r7, #24]
 800488a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488c:	6979      	ldr	r1, [r7, #20]
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	e841 2300 	strex	r3, r2, [r1]
 8004894:	613b      	str	r3, [r7, #16]
   return(result);
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1e6      	bne.n	800486a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2220      	movs	r2, #32
 80048a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	665a      	str	r2, [r3, #100]	; 0x64
}
 80048ae:	bf00      	nop
 80048b0:	3754      	adds	r7, #84	; 0x54
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b084      	sub	sp, #16
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f7ff fa71 	bl	8003dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048de:	bf00      	nop
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b088      	sub	sp, #32
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	e853 3f00 	ldrex	r3, [r3]
 80048fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004902:	61fb      	str	r3, [r7, #28]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	461a      	mov	r2, r3
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	61bb      	str	r3, [r7, #24]
 800490e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004910:	6979      	ldr	r1, [r7, #20]
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	e841 2300 	strex	r3, r2, [r1]
 8004918:	613b      	str	r3, [r7, #16]
   return(result);
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1e6      	bne.n	80048ee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2220      	movs	r2, #32
 8004924:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f7ff fa3d 	bl	8003dac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004932:	bf00      	nop
 8004934:	3720      	adds	r7, #32
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b096      	sub	sp, #88	; 0x58
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004948:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004950:	2b22      	cmp	r3, #34	; 0x22
 8004952:	f040 8094 	bne.w	8004a7e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800495c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004960:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004964:	b2d9      	uxtb	r1, r3
 8004966:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800496a:	b2da      	uxtb	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004970:	400a      	ands	r2, r1
 8004972:	b2d2      	uxtb	r2, r2
 8004974:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497a:	1c5a      	adds	r2, r3, #1
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004986:	b29b      	uxth	r3, r3
 8004988:	3b01      	subs	r3, #1
 800498a:	b29a      	uxth	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004998:	b29b      	uxth	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d179      	bne.n	8004a92 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a6:	e853 3f00 	ldrex	r3, [r3]
 80049aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049b2:	653b      	str	r3, [r7, #80]	; 0x50
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	461a      	mov	r2, r3
 80049ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049bc:	647b      	str	r3, [r7, #68]	; 0x44
 80049be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049c4:	e841 2300 	strex	r3, r2, [r1]
 80049c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1e6      	bne.n	800499e <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	3308      	adds	r3, #8
 80049d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	e853 3f00 	ldrex	r3, [r3]
 80049de:	623b      	str	r3, [r7, #32]
   return(result);
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	f023 0301 	bic.w	r3, r3, #1
 80049e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3308      	adds	r3, #8
 80049ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049f0:	633a      	str	r2, [r7, #48]	; 0x30
 80049f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049f8:	e841 2300 	strex	r3, r2, [r1]
 80049fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1e5      	bne.n	80049d0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2220      	movs	r2, #32
 8004a08:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d12e      	bne.n	8004a76 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	e853 3f00 	ldrex	r3, [r3]
 8004a2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f023 0310 	bic.w	r3, r3, #16
 8004a32:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	461a      	mov	r2, r3
 8004a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a3c:	61fb      	str	r3, [r7, #28]
 8004a3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a40:	69b9      	ldr	r1, [r7, #24]
 8004a42:	69fa      	ldr	r2, [r7, #28]
 8004a44:	e841 2300 	strex	r3, r2, [r1]
 8004a48:	617b      	str	r3, [r7, #20]
   return(result);
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1e6      	bne.n	8004a1e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	f003 0310 	and.w	r3, r3, #16
 8004a5a:	2b10      	cmp	r3, #16
 8004a5c:	d103      	bne.n	8004a66 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2210      	movs	r2, #16
 8004a64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7ff f9b0 	bl	8003dd4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a74:	e00d      	b.n	8004a92 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7fc f910 	bl	8000c9c <HAL_UART_RxCpltCallback>
}
 8004a7c:	e009      	b.n	8004a92 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	8b1b      	ldrh	r3, [r3, #24]
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0208 	orr.w	r2, r2, #8
 8004a8e:	b292      	uxth	r2, r2
 8004a90:	831a      	strh	r2, [r3, #24]
}
 8004a92:	bf00      	nop
 8004a94:	3758      	adds	r7, #88	; 0x58
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b096      	sub	sp, #88	; 0x58
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004aa8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ab0:	2b22      	cmp	r3, #34	; 0x22
 8004ab2:	f040 8094 	bne.w	8004bde <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004abc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004ac6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004aca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004ace:	4013      	ands	r3, r2
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ad4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ada:	1c9a      	adds	r2, r3, #2
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d179      	bne.n	8004bf2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b06:	e853 3f00 	ldrex	r3, [r3]
 8004b0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b1c:	643b      	str	r3, [r7, #64]	; 0x40
 8004b1e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b24:	e841 2300 	strex	r3, r2, [r1]
 8004b28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1e6      	bne.n	8004afe <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3308      	adds	r3, #8
 8004b36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	e853 3f00 	ldrex	r3, [r3]
 8004b3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f023 0301 	bic.w	r3, r3, #1
 8004b46:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	3308      	adds	r3, #8
 8004b4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b58:	e841 2300 	strex	r3, r2, [r1]
 8004b5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1e5      	bne.n	8004b30 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2220      	movs	r2, #32
 8004b68:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d12e      	bne.n	8004bd6 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	e853 3f00 	ldrex	r3, [r3]
 8004b8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	f023 0310 	bic.w	r3, r3, #16
 8004b92:	647b      	str	r3, [r7, #68]	; 0x44
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	461a      	mov	r2, r3
 8004b9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b9c:	61bb      	str	r3, [r7, #24]
 8004b9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba0:	6979      	ldr	r1, [r7, #20]
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	e841 2300 	strex	r3, r2, [r1]
 8004ba8:	613b      	str	r3, [r7, #16]
   return(result);
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1e6      	bne.n	8004b7e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	f003 0310 	and.w	r3, r3, #16
 8004bba:	2b10      	cmp	r3, #16
 8004bbc:	d103      	bne.n	8004bc6 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2210      	movs	r2, #16
 8004bc4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004bcc:	4619      	mov	r1, r3
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7ff f900 	bl	8003dd4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004bd4:	e00d      	b.n	8004bf2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7fc f860 	bl	8000c9c <HAL_UART_RxCpltCallback>
}
 8004bdc:	e009      	b.n	8004bf2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	8b1b      	ldrh	r3, [r3, #24]
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f042 0208 	orr.w	r2, r2, #8
 8004bee:	b292      	uxth	r2, r2
 8004bf0:	831a      	strh	r2, [r3, #24]
}
 8004bf2:	bf00      	nop
 8004bf4:	3758      	adds	r7, #88	; 0x58
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b083      	sub	sp, #12
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004c02:	bf00      	nop
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
	...

08004c10 <__errno>:
 8004c10:	4b01      	ldr	r3, [pc, #4]	; (8004c18 <__errno+0x8>)
 8004c12:	6818      	ldr	r0, [r3, #0]
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	200000d4 	.word	0x200000d4

08004c1c <__libc_init_array>:
 8004c1c:	b570      	push	{r4, r5, r6, lr}
 8004c1e:	4d0d      	ldr	r5, [pc, #52]	; (8004c54 <__libc_init_array+0x38>)
 8004c20:	4c0d      	ldr	r4, [pc, #52]	; (8004c58 <__libc_init_array+0x3c>)
 8004c22:	1b64      	subs	r4, r4, r5
 8004c24:	10a4      	asrs	r4, r4, #2
 8004c26:	2600      	movs	r6, #0
 8004c28:	42a6      	cmp	r6, r4
 8004c2a:	d109      	bne.n	8004c40 <__libc_init_array+0x24>
 8004c2c:	4d0b      	ldr	r5, [pc, #44]	; (8004c5c <__libc_init_array+0x40>)
 8004c2e:	4c0c      	ldr	r4, [pc, #48]	; (8004c60 <__libc_init_array+0x44>)
 8004c30:	f000 ffec 	bl	8005c0c <_init>
 8004c34:	1b64      	subs	r4, r4, r5
 8004c36:	10a4      	asrs	r4, r4, #2
 8004c38:	2600      	movs	r6, #0
 8004c3a:	42a6      	cmp	r6, r4
 8004c3c:	d105      	bne.n	8004c4a <__libc_init_array+0x2e>
 8004c3e:	bd70      	pop	{r4, r5, r6, pc}
 8004c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c44:	4798      	blx	r3
 8004c46:	3601      	adds	r6, #1
 8004c48:	e7ee      	b.n	8004c28 <__libc_init_array+0xc>
 8004c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c4e:	4798      	blx	r3
 8004c50:	3601      	adds	r6, #1
 8004c52:	e7f2      	b.n	8004c3a <__libc_init_array+0x1e>
 8004c54:	08005d40 	.word	0x08005d40
 8004c58:	08005d40 	.word	0x08005d40
 8004c5c:	08005d40 	.word	0x08005d40
 8004c60:	08005d44 	.word	0x08005d44

08004c64 <memset>:
 8004c64:	4402      	add	r2, r0
 8004c66:	4603      	mov	r3, r0
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d100      	bne.n	8004c6e <memset+0xa>
 8004c6c:	4770      	bx	lr
 8004c6e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c72:	e7f9      	b.n	8004c68 <memset+0x4>

08004c74 <iprintf>:
 8004c74:	b40f      	push	{r0, r1, r2, r3}
 8004c76:	4b0a      	ldr	r3, [pc, #40]	; (8004ca0 <iprintf+0x2c>)
 8004c78:	b513      	push	{r0, r1, r4, lr}
 8004c7a:	681c      	ldr	r4, [r3, #0]
 8004c7c:	b124      	cbz	r4, 8004c88 <iprintf+0x14>
 8004c7e:	69a3      	ldr	r3, [r4, #24]
 8004c80:	b913      	cbnz	r3, 8004c88 <iprintf+0x14>
 8004c82:	4620      	mov	r0, r4
 8004c84:	f000 fa5e 	bl	8005144 <__sinit>
 8004c88:	ab05      	add	r3, sp, #20
 8004c8a:	9a04      	ldr	r2, [sp, #16]
 8004c8c:	68a1      	ldr	r1, [r4, #8]
 8004c8e:	9301      	str	r3, [sp, #4]
 8004c90:	4620      	mov	r0, r4
 8004c92:	f000 fc2f 	bl	80054f4 <_vfiprintf_r>
 8004c96:	b002      	add	sp, #8
 8004c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c9c:	b004      	add	sp, #16
 8004c9e:	4770      	bx	lr
 8004ca0:	200000d4 	.word	0x200000d4

08004ca4 <_puts_r>:
 8004ca4:	b570      	push	{r4, r5, r6, lr}
 8004ca6:	460e      	mov	r6, r1
 8004ca8:	4605      	mov	r5, r0
 8004caa:	b118      	cbz	r0, 8004cb4 <_puts_r+0x10>
 8004cac:	6983      	ldr	r3, [r0, #24]
 8004cae:	b90b      	cbnz	r3, 8004cb4 <_puts_r+0x10>
 8004cb0:	f000 fa48 	bl	8005144 <__sinit>
 8004cb4:	69ab      	ldr	r3, [r5, #24]
 8004cb6:	68ac      	ldr	r4, [r5, #8]
 8004cb8:	b913      	cbnz	r3, 8004cc0 <_puts_r+0x1c>
 8004cba:	4628      	mov	r0, r5
 8004cbc:	f000 fa42 	bl	8005144 <__sinit>
 8004cc0:	4b2c      	ldr	r3, [pc, #176]	; (8004d74 <_puts_r+0xd0>)
 8004cc2:	429c      	cmp	r4, r3
 8004cc4:	d120      	bne.n	8004d08 <_puts_r+0x64>
 8004cc6:	686c      	ldr	r4, [r5, #4]
 8004cc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cca:	07db      	lsls	r3, r3, #31
 8004ccc:	d405      	bmi.n	8004cda <_puts_r+0x36>
 8004cce:	89a3      	ldrh	r3, [r4, #12]
 8004cd0:	0598      	lsls	r0, r3, #22
 8004cd2:	d402      	bmi.n	8004cda <_puts_r+0x36>
 8004cd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cd6:	f000 fad3 	bl	8005280 <__retarget_lock_acquire_recursive>
 8004cda:	89a3      	ldrh	r3, [r4, #12]
 8004cdc:	0719      	lsls	r1, r3, #28
 8004cde:	d51d      	bpl.n	8004d1c <_puts_r+0x78>
 8004ce0:	6923      	ldr	r3, [r4, #16]
 8004ce2:	b1db      	cbz	r3, 8004d1c <_puts_r+0x78>
 8004ce4:	3e01      	subs	r6, #1
 8004ce6:	68a3      	ldr	r3, [r4, #8]
 8004ce8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004cec:	3b01      	subs	r3, #1
 8004cee:	60a3      	str	r3, [r4, #8]
 8004cf0:	bb39      	cbnz	r1, 8004d42 <_puts_r+0x9e>
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	da38      	bge.n	8004d68 <_puts_r+0xc4>
 8004cf6:	4622      	mov	r2, r4
 8004cf8:	210a      	movs	r1, #10
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	f000 f848 	bl	8004d90 <__swbuf_r>
 8004d00:	3001      	adds	r0, #1
 8004d02:	d011      	beq.n	8004d28 <_puts_r+0x84>
 8004d04:	250a      	movs	r5, #10
 8004d06:	e011      	b.n	8004d2c <_puts_r+0x88>
 8004d08:	4b1b      	ldr	r3, [pc, #108]	; (8004d78 <_puts_r+0xd4>)
 8004d0a:	429c      	cmp	r4, r3
 8004d0c:	d101      	bne.n	8004d12 <_puts_r+0x6e>
 8004d0e:	68ac      	ldr	r4, [r5, #8]
 8004d10:	e7da      	b.n	8004cc8 <_puts_r+0x24>
 8004d12:	4b1a      	ldr	r3, [pc, #104]	; (8004d7c <_puts_r+0xd8>)
 8004d14:	429c      	cmp	r4, r3
 8004d16:	bf08      	it	eq
 8004d18:	68ec      	ldreq	r4, [r5, #12]
 8004d1a:	e7d5      	b.n	8004cc8 <_puts_r+0x24>
 8004d1c:	4621      	mov	r1, r4
 8004d1e:	4628      	mov	r0, r5
 8004d20:	f000 f888 	bl	8004e34 <__swsetup_r>
 8004d24:	2800      	cmp	r0, #0
 8004d26:	d0dd      	beq.n	8004ce4 <_puts_r+0x40>
 8004d28:	f04f 35ff 	mov.w	r5, #4294967295
 8004d2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d2e:	07da      	lsls	r2, r3, #31
 8004d30:	d405      	bmi.n	8004d3e <_puts_r+0x9a>
 8004d32:	89a3      	ldrh	r3, [r4, #12]
 8004d34:	059b      	lsls	r3, r3, #22
 8004d36:	d402      	bmi.n	8004d3e <_puts_r+0x9a>
 8004d38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d3a:	f000 faa2 	bl	8005282 <__retarget_lock_release_recursive>
 8004d3e:	4628      	mov	r0, r5
 8004d40:	bd70      	pop	{r4, r5, r6, pc}
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	da04      	bge.n	8004d50 <_puts_r+0xac>
 8004d46:	69a2      	ldr	r2, [r4, #24]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	dc06      	bgt.n	8004d5a <_puts_r+0xb6>
 8004d4c:	290a      	cmp	r1, #10
 8004d4e:	d004      	beq.n	8004d5a <_puts_r+0xb6>
 8004d50:	6823      	ldr	r3, [r4, #0]
 8004d52:	1c5a      	adds	r2, r3, #1
 8004d54:	6022      	str	r2, [r4, #0]
 8004d56:	7019      	strb	r1, [r3, #0]
 8004d58:	e7c5      	b.n	8004ce6 <_puts_r+0x42>
 8004d5a:	4622      	mov	r2, r4
 8004d5c:	4628      	mov	r0, r5
 8004d5e:	f000 f817 	bl	8004d90 <__swbuf_r>
 8004d62:	3001      	adds	r0, #1
 8004d64:	d1bf      	bne.n	8004ce6 <_puts_r+0x42>
 8004d66:	e7df      	b.n	8004d28 <_puts_r+0x84>
 8004d68:	6823      	ldr	r3, [r4, #0]
 8004d6a:	250a      	movs	r5, #10
 8004d6c:	1c5a      	adds	r2, r3, #1
 8004d6e:	6022      	str	r2, [r4, #0]
 8004d70:	701d      	strb	r5, [r3, #0]
 8004d72:	e7db      	b.n	8004d2c <_puts_r+0x88>
 8004d74:	08005cc4 	.word	0x08005cc4
 8004d78:	08005ce4 	.word	0x08005ce4
 8004d7c:	08005ca4 	.word	0x08005ca4

08004d80 <puts>:
 8004d80:	4b02      	ldr	r3, [pc, #8]	; (8004d8c <puts+0xc>)
 8004d82:	4601      	mov	r1, r0
 8004d84:	6818      	ldr	r0, [r3, #0]
 8004d86:	f7ff bf8d 	b.w	8004ca4 <_puts_r>
 8004d8a:	bf00      	nop
 8004d8c:	200000d4 	.word	0x200000d4

08004d90 <__swbuf_r>:
 8004d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d92:	460e      	mov	r6, r1
 8004d94:	4614      	mov	r4, r2
 8004d96:	4605      	mov	r5, r0
 8004d98:	b118      	cbz	r0, 8004da2 <__swbuf_r+0x12>
 8004d9a:	6983      	ldr	r3, [r0, #24]
 8004d9c:	b90b      	cbnz	r3, 8004da2 <__swbuf_r+0x12>
 8004d9e:	f000 f9d1 	bl	8005144 <__sinit>
 8004da2:	4b21      	ldr	r3, [pc, #132]	; (8004e28 <__swbuf_r+0x98>)
 8004da4:	429c      	cmp	r4, r3
 8004da6:	d12b      	bne.n	8004e00 <__swbuf_r+0x70>
 8004da8:	686c      	ldr	r4, [r5, #4]
 8004daa:	69a3      	ldr	r3, [r4, #24]
 8004dac:	60a3      	str	r3, [r4, #8]
 8004dae:	89a3      	ldrh	r3, [r4, #12]
 8004db0:	071a      	lsls	r2, r3, #28
 8004db2:	d52f      	bpl.n	8004e14 <__swbuf_r+0x84>
 8004db4:	6923      	ldr	r3, [r4, #16]
 8004db6:	b36b      	cbz	r3, 8004e14 <__swbuf_r+0x84>
 8004db8:	6923      	ldr	r3, [r4, #16]
 8004dba:	6820      	ldr	r0, [r4, #0]
 8004dbc:	1ac0      	subs	r0, r0, r3
 8004dbe:	6963      	ldr	r3, [r4, #20]
 8004dc0:	b2f6      	uxtb	r6, r6
 8004dc2:	4283      	cmp	r3, r0
 8004dc4:	4637      	mov	r7, r6
 8004dc6:	dc04      	bgt.n	8004dd2 <__swbuf_r+0x42>
 8004dc8:	4621      	mov	r1, r4
 8004dca:	4628      	mov	r0, r5
 8004dcc:	f000 f926 	bl	800501c <_fflush_r>
 8004dd0:	bb30      	cbnz	r0, 8004e20 <__swbuf_r+0x90>
 8004dd2:	68a3      	ldr	r3, [r4, #8]
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	60a3      	str	r3, [r4, #8]
 8004dd8:	6823      	ldr	r3, [r4, #0]
 8004dda:	1c5a      	adds	r2, r3, #1
 8004ddc:	6022      	str	r2, [r4, #0]
 8004dde:	701e      	strb	r6, [r3, #0]
 8004de0:	6963      	ldr	r3, [r4, #20]
 8004de2:	3001      	adds	r0, #1
 8004de4:	4283      	cmp	r3, r0
 8004de6:	d004      	beq.n	8004df2 <__swbuf_r+0x62>
 8004de8:	89a3      	ldrh	r3, [r4, #12]
 8004dea:	07db      	lsls	r3, r3, #31
 8004dec:	d506      	bpl.n	8004dfc <__swbuf_r+0x6c>
 8004dee:	2e0a      	cmp	r6, #10
 8004df0:	d104      	bne.n	8004dfc <__swbuf_r+0x6c>
 8004df2:	4621      	mov	r1, r4
 8004df4:	4628      	mov	r0, r5
 8004df6:	f000 f911 	bl	800501c <_fflush_r>
 8004dfa:	b988      	cbnz	r0, 8004e20 <__swbuf_r+0x90>
 8004dfc:	4638      	mov	r0, r7
 8004dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e00:	4b0a      	ldr	r3, [pc, #40]	; (8004e2c <__swbuf_r+0x9c>)
 8004e02:	429c      	cmp	r4, r3
 8004e04:	d101      	bne.n	8004e0a <__swbuf_r+0x7a>
 8004e06:	68ac      	ldr	r4, [r5, #8]
 8004e08:	e7cf      	b.n	8004daa <__swbuf_r+0x1a>
 8004e0a:	4b09      	ldr	r3, [pc, #36]	; (8004e30 <__swbuf_r+0xa0>)
 8004e0c:	429c      	cmp	r4, r3
 8004e0e:	bf08      	it	eq
 8004e10:	68ec      	ldreq	r4, [r5, #12]
 8004e12:	e7ca      	b.n	8004daa <__swbuf_r+0x1a>
 8004e14:	4621      	mov	r1, r4
 8004e16:	4628      	mov	r0, r5
 8004e18:	f000 f80c 	bl	8004e34 <__swsetup_r>
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	d0cb      	beq.n	8004db8 <__swbuf_r+0x28>
 8004e20:	f04f 37ff 	mov.w	r7, #4294967295
 8004e24:	e7ea      	b.n	8004dfc <__swbuf_r+0x6c>
 8004e26:	bf00      	nop
 8004e28:	08005cc4 	.word	0x08005cc4
 8004e2c:	08005ce4 	.word	0x08005ce4
 8004e30:	08005ca4 	.word	0x08005ca4

08004e34 <__swsetup_r>:
 8004e34:	4b32      	ldr	r3, [pc, #200]	; (8004f00 <__swsetup_r+0xcc>)
 8004e36:	b570      	push	{r4, r5, r6, lr}
 8004e38:	681d      	ldr	r5, [r3, #0]
 8004e3a:	4606      	mov	r6, r0
 8004e3c:	460c      	mov	r4, r1
 8004e3e:	b125      	cbz	r5, 8004e4a <__swsetup_r+0x16>
 8004e40:	69ab      	ldr	r3, [r5, #24]
 8004e42:	b913      	cbnz	r3, 8004e4a <__swsetup_r+0x16>
 8004e44:	4628      	mov	r0, r5
 8004e46:	f000 f97d 	bl	8005144 <__sinit>
 8004e4a:	4b2e      	ldr	r3, [pc, #184]	; (8004f04 <__swsetup_r+0xd0>)
 8004e4c:	429c      	cmp	r4, r3
 8004e4e:	d10f      	bne.n	8004e70 <__swsetup_r+0x3c>
 8004e50:	686c      	ldr	r4, [r5, #4]
 8004e52:	89a3      	ldrh	r3, [r4, #12]
 8004e54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e58:	0719      	lsls	r1, r3, #28
 8004e5a:	d42c      	bmi.n	8004eb6 <__swsetup_r+0x82>
 8004e5c:	06dd      	lsls	r5, r3, #27
 8004e5e:	d411      	bmi.n	8004e84 <__swsetup_r+0x50>
 8004e60:	2309      	movs	r3, #9
 8004e62:	6033      	str	r3, [r6, #0]
 8004e64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e68:	81a3      	strh	r3, [r4, #12]
 8004e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e6e:	e03e      	b.n	8004eee <__swsetup_r+0xba>
 8004e70:	4b25      	ldr	r3, [pc, #148]	; (8004f08 <__swsetup_r+0xd4>)
 8004e72:	429c      	cmp	r4, r3
 8004e74:	d101      	bne.n	8004e7a <__swsetup_r+0x46>
 8004e76:	68ac      	ldr	r4, [r5, #8]
 8004e78:	e7eb      	b.n	8004e52 <__swsetup_r+0x1e>
 8004e7a:	4b24      	ldr	r3, [pc, #144]	; (8004f0c <__swsetup_r+0xd8>)
 8004e7c:	429c      	cmp	r4, r3
 8004e7e:	bf08      	it	eq
 8004e80:	68ec      	ldreq	r4, [r5, #12]
 8004e82:	e7e6      	b.n	8004e52 <__swsetup_r+0x1e>
 8004e84:	0758      	lsls	r0, r3, #29
 8004e86:	d512      	bpl.n	8004eae <__swsetup_r+0x7a>
 8004e88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e8a:	b141      	cbz	r1, 8004e9e <__swsetup_r+0x6a>
 8004e8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e90:	4299      	cmp	r1, r3
 8004e92:	d002      	beq.n	8004e9a <__swsetup_r+0x66>
 8004e94:	4630      	mov	r0, r6
 8004e96:	f000 fa59 	bl	800534c <_free_r>
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	6363      	str	r3, [r4, #52]	; 0x34
 8004e9e:	89a3      	ldrh	r3, [r4, #12]
 8004ea0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ea4:	81a3      	strh	r3, [r4, #12]
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	6063      	str	r3, [r4, #4]
 8004eaa:	6923      	ldr	r3, [r4, #16]
 8004eac:	6023      	str	r3, [r4, #0]
 8004eae:	89a3      	ldrh	r3, [r4, #12]
 8004eb0:	f043 0308 	orr.w	r3, r3, #8
 8004eb4:	81a3      	strh	r3, [r4, #12]
 8004eb6:	6923      	ldr	r3, [r4, #16]
 8004eb8:	b94b      	cbnz	r3, 8004ece <__swsetup_r+0x9a>
 8004eba:	89a3      	ldrh	r3, [r4, #12]
 8004ebc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ec4:	d003      	beq.n	8004ece <__swsetup_r+0x9a>
 8004ec6:	4621      	mov	r1, r4
 8004ec8:	4630      	mov	r0, r6
 8004eca:	f000 f9ff 	bl	80052cc <__smakebuf_r>
 8004ece:	89a0      	ldrh	r0, [r4, #12]
 8004ed0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ed4:	f010 0301 	ands.w	r3, r0, #1
 8004ed8:	d00a      	beq.n	8004ef0 <__swsetup_r+0xbc>
 8004eda:	2300      	movs	r3, #0
 8004edc:	60a3      	str	r3, [r4, #8]
 8004ede:	6963      	ldr	r3, [r4, #20]
 8004ee0:	425b      	negs	r3, r3
 8004ee2:	61a3      	str	r3, [r4, #24]
 8004ee4:	6923      	ldr	r3, [r4, #16]
 8004ee6:	b943      	cbnz	r3, 8004efa <__swsetup_r+0xc6>
 8004ee8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004eec:	d1ba      	bne.n	8004e64 <__swsetup_r+0x30>
 8004eee:	bd70      	pop	{r4, r5, r6, pc}
 8004ef0:	0781      	lsls	r1, r0, #30
 8004ef2:	bf58      	it	pl
 8004ef4:	6963      	ldrpl	r3, [r4, #20]
 8004ef6:	60a3      	str	r3, [r4, #8]
 8004ef8:	e7f4      	b.n	8004ee4 <__swsetup_r+0xb0>
 8004efa:	2000      	movs	r0, #0
 8004efc:	e7f7      	b.n	8004eee <__swsetup_r+0xba>
 8004efe:	bf00      	nop
 8004f00:	200000d4 	.word	0x200000d4
 8004f04:	08005cc4 	.word	0x08005cc4
 8004f08:	08005ce4 	.word	0x08005ce4
 8004f0c:	08005ca4 	.word	0x08005ca4

08004f10 <__sflush_r>:
 8004f10:	898a      	ldrh	r2, [r1, #12]
 8004f12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f16:	4605      	mov	r5, r0
 8004f18:	0710      	lsls	r0, r2, #28
 8004f1a:	460c      	mov	r4, r1
 8004f1c:	d458      	bmi.n	8004fd0 <__sflush_r+0xc0>
 8004f1e:	684b      	ldr	r3, [r1, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	dc05      	bgt.n	8004f30 <__sflush_r+0x20>
 8004f24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	dc02      	bgt.n	8004f30 <__sflush_r+0x20>
 8004f2a:	2000      	movs	r0, #0
 8004f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f32:	2e00      	cmp	r6, #0
 8004f34:	d0f9      	beq.n	8004f2a <__sflush_r+0x1a>
 8004f36:	2300      	movs	r3, #0
 8004f38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f3c:	682f      	ldr	r7, [r5, #0]
 8004f3e:	602b      	str	r3, [r5, #0]
 8004f40:	d032      	beq.n	8004fa8 <__sflush_r+0x98>
 8004f42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f44:	89a3      	ldrh	r3, [r4, #12]
 8004f46:	075a      	lsls	r2, r3, #29
 8004f48:	d505      	bpl.n	8004f56 <__sflush_r+0x46>
 8004f4a:	6863      	ldr	r3, [r4, #4]
 8004f4c:	1ac0      	subs	r0, r0, r3
 8004f4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f50:	b10b      	cbz	r3, 8004f56 <__sflush_r+0x46>
 8004f52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f54:	1ac0      	subs	r0, r0, r3
 8004f56:	2300      	movs	r3, #0
 8004f58:	4602      	mov	r2, r0
 8004f5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f5c:	6a21      	ldr	r1, [r4, #32]
 8004f5e:	4628      	mov	r0, r5
 8004f60:	47b0      	blx	r6
 8004f62:	1c43      	adds	r3, r0, #1
 8004f64:	89a3      	ldrh	r3, [r4, #12]
 8004f66:	d106      	bne.n	8004f76 <__sflush_r+0x66>
 8004f68:	6829      	ldr	r1, [r5, #0]
 8004f6a:	291d      	cmp	r1, #29
 8004f6c:	d82c      	bhi.n	8004fc8 <__sflush_r+0xb8>
 8004f6e:	4a2a      	ldr	r2, [pc, #168]	; (8005018 <__sflush_r+0x108>)
 8004f70:	40ca      	lsrs	r2, r1
 8004f72:	07d6      	lsls	r6, r2, #31
 8004f74:	d528      	bpl.n	8004fc8 <__sflush_r+0xb8>
 8004f76:	2200      	movs	r2, #0
 8004f78:	6062      	str	r2, [r4, #4]
 8004f7a:	04d9      	lsls	r1, r3, #19
 8004f7c:	6922      	ldr	r2, [r4, #16]
 8004f7e:	6022      	str	r2, [r4, #0]
 8004f80:	d504      	bpl.n	8004f8c <__sflush_r+0x7c>
 8004f82:	1c42      	adds	r2, r0, #1
 8004f84:	d101      	bne.n	8004f8a <__sflush_r+0x7a>
 8004f86:	682b      	ldr	r3, [r5, #0]
 8004f88:	b903      	cbnz	r3, 8004f8c <__sflush_r+0x7c>
 8004f8a:	6560      	str	r0, [r4, #84]	; 0x54
 8004f8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f8e:	602f      	str	r7, [r5, #0]
 8004f90:	2900      	cmp	r1, #0
 8004f92:	d0ca      	beq.n	8004f2a <__sflush_r+0x1a>
 8004f94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f98:	4299      	cmp	r1, r3
 8004f9a:	d002      	beq.n	8004fa2 <__sflush_r+0x92>
 8004f9c:	4628      	mov	r0, r5
 8004f9e:	f000 f9d5 	bl	800534c <_free_r>
 8004fa2:	2000      	movs	r0, #0
 8004fa4:	6360      	str	r0, [r4, #52]	; 0x34
 8004fa6:	e7c1      	b.n	8004f2c <__sflush_r+0x1c>
 8004fa8:	6a21      	ldr	r1, [r4, #32]
 8004faa:	2301      	movs	r3, #1
 8004fac:	4628      	mov	r0, r5
 8004fae:	47b0      	blx	r6
 8004fb0:	1c41      	adds	r1, r0, #1
 8004fb2:	d1c7      	bne.n	8004f44 <__sflush_r+0x34>
 8004fb4:	682b      	ldr	r3, [r5, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0c4      	beq.n	8004f44 <__sflush_r+0x34>
 8004fba:	2b1d      	cmp	r3, #29
 8004fbc:	d001      	beq.n	8004fc2 <__sflush_r+0xb2>
 8004fbe:	2b16      	cmp	r3, #22
 8004fc0:	d101      	bne.n	8004fc6 <__sflush_r+0xb6>
 8004fc2:	602f      	str	r7, [r5, #0]
 8004fc4:	e7b1      	b.n	8004f2a <__sflush_r+0x1a>
 8004fc6:	89a3      	ldrh	r3, [r4, #12]
 8004fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fcc:	81a3      	strh	r3, [r4, #12]
 8004fce:	e7ad      	b.n	8004f2c <__sflush_r+0x1c>
 8004fd0:	690f      	ldr	r7, [r1, #16]
 8004fd2:	2f00      	cmp	r7, #0
 8004fd4:	d0a9      	beq.n	8004f2a <__sflush_r+0x1a>
 8004fd6:	0793      	lsls	r3, r2, #30
 8004fd8:	680e      	ldr	r6, [r1, #0]
 8004fda:	bf08      	it	eq
 8004fdc:	694b      	ldreq	r3, [r1, #20]
 8004fde:	600f      	str	r7, [r1, #0]
 8004fe0:	bf18      	it	ne
 8004fe2:	2300      	movne	r3, #0
 8004fe4:	eba6 0807 	sub.w	r8, r6, r7
 8004fe8:	608b      	str	r3, [r1, #8]
 8004fea:	f1b8 0f00 	cmp.w	r8, #0
 8004fee:	dd9c      	ble.n	8004f2a <__sflush_r+0x1a>
 8004ff0:	6a21      	ldr	r1, [r4, #32]
 8004ff2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ff4:	4643      	mov	r3, r8
 8004ff6:	463a      	mov	r2, r7
 8004ff8:	4628      	mov	r0, r5
 8004ffa:	47b0      	blx	r6
 8004ffc:	2800      	cmp	r0, #0
 8004ffe:	dc06      	bgt.n	800500e <__sflush_r+0xfe>
 8005000:	89a3      	ldrh	r3, [r4, #12]
 8005002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005006:	81a3      	strh	r3, [r4, #12]
 8005008:	f04f 30ff 	mov.w	r0, #4294967295
 800500c:	e78e      	b.n	8004f2c <__sflush_r+0x1c>
 800500e:	4407      	add	r7, r0
 8005010:	eba8 0800 	sub.w	r8, r8, r0
 8005014:	e7e9      	b.n	8004fea <__sflush_r+0xda>
 8005016:	bf00      	nop
 8005018:	20400001 	.word	0x20400001

0800501c <_fflush_r>:
 800501c:	b538      	push	{r3, r4, r5, lr}
 800501e:	690b      	ldr	r3, [r1, #16]
 8005020:	4605      	mov	r5, r0
 8005022:	460c      	mov	r4, r1
 8005024:	b913      	cbnz	r3, 800502c <_fflush_r+0x10>
 8005026:	2500      	movs	r5, #0
 8005028:	4628      	mov	r0, r5
 800502a:	bd38      	pop	{r3, r4, r5, pc}
 800502c:	b118      	cbz	r0, 8005036 <_fflush_r+0x1a>
 800502e:	6983      	ldr	r3, [r0, #24]
 8005030:	b90b      	cbnz	r3, 8005036 <_fflush_r+0x1a>
 8005032:	f000 f887 	bl	8005144 <__sinit>
 8005036:	4b14      	ldr	r3, [pc, #80]	; (8005088 <_fflush_r+0x6c>)
 8005038:	429c      	cmp	r4, r3
 800503a:	d11b      	bne.n	8005074 <_fflush_r+0x58>
 800503c:	686c      	ldr	r4, [r5, #4]
 800503e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d0ef      	beq.n	8005026 <_fflush_r+0xa>
 8005046:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005048:	07d0      	lsls	r0, r2, #31
 800504a:	d404      	bmi.n	8005056 <_fflush_r+0x3a>
 800504c:	0599      	lsls	r1, r3, #22
 800504e:	d402      	bmi.n	8005056 <_fflush_r+0x3a>
 8005050:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005052:	f000 f915 	bl	8005280 <__retarget_lock_acquire_recursive>
 8005056:	4628      	mov	r0, r5
 8005058:	4621      	mov	r1, r4
 800505a:	f7ff ff59 	bl	8004f10 <__sflush_r>
 800505e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005060:	07da      	lsls	r2, r3, #31
 8005062:	4605      	mov	r5, r0
 8005064:	d4e0      	bmi.n	8005028 <_fflush_r+0xc>
 8005066:	89a3      	ldrh	r3, [r4, #12]
 8005068:	059b      	lsls	r3, r3, #22
 800506a:	d4dd      	bmi.n	8005028 <_fflush_r+0xc>
 800506c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800506e:	f000 f908 	bl	8005282 <__retarget_lock_release_recursive>
 8005072:	e7d9      	b.n	8005028 <_fflush_r+0xc>
 8005074:	4b05      	ldr	r3, [pc, #20]	; (800508c <_fflush_r+0x70>)
 8005076:	429c      	cmp	r4, r3
 8005078:	d101      	bne.n	800507e <_fflush_r+0x62>
 800507a:	68ac      	ldr	r4, [r5, #8]
 800507c:	e7df      	b.n	800503e <_fflush_r+0x22>
 800507e:	4b04      	ldr	r3, [pc, #16]	; (8005090 <_fflush_r+0x74>)
 8005080:	429c      	cmp	r4, r3
 8005082:	bf08      	it	eq
 8005084:	68ec      	ldreq	r4, [r5, #12]
 8005086:	e7da      	b.n	800503e <_fflush_r+0x22>
 8005088:	08005cc4 	.word	0x08005cc4
 800508c:	08005ce4 	.word	0x08005ce4
 8005090:	08005ca4 	.word	0x08005ca4

08005094 <std>:
 8005094:	2300      	movs	r3, #0
 8005096:	b510      	push	{r4, lr}
 8005098:	4604      	mov	r4, r0
 800509a:	e9c0 3300 	strd	r3, r3, [r0]
 800509e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050a2:	6083      	str	r3, [r0, #8]
 80050a4:	8181      	strh	r1, [r0, #12]
 80050a6:	6643      	str	r3, [r0, #100]	; 0x64
 80050a8:	81c2      	strh	r2, [r0, #14]
 80050aa:	6183      	str	r3, [r0, #24]
 80050ac:	4619      	mov	r1, r3
 80050ae:	2208      	movs	r2, #8
 80050b0:	305c      	adds	r0, #92	; 0x5c
 80050b2:	f7ff fdd7 	bl	8004c64 <memset>
 80050b6:	4b05      	ldr	r3, [pc, #20]	; (80050cc <std+0x38>)
 80050b8:	6263      	str	r3, [r4, #36]	; 0x24
 80050ba:	4b05      	ldr	r3, [pc, #20]	; (80050d0 <std+0x3c>)
 80050bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80050be:	4b05      	ldr	r3, [pc, #20]	; (80050d4 <std+0x40>)
 80050c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80050c2:	4b05      	ldr	r3, [pc, #20]	; (80050d8 <std+0x44>)
 80050c4:	6224      	str	r4, [r4, #32]
 80050c6:	6323      	str	r3, [r4, #48]	; 0x30
 80050c8:	bd10      	pop	{r4, pc}
 80050ca:	bf00      	nop
 80050cc:	08005a9d 	.word	0x08005a9d
 80050d0:	08005abf 	.word	0x08005abf
 80050d4:	08005af7 	.word	0x08005af7
 80050d8:	08005b1b 	.word	0x08005b1b

080050dc <_cleanup_r>:
 80050dc:	4901      	ldr	r1, [pc, #4]	; (80050e4 <_cleanup_r+0x8>)
 80050de:	f000 b8af 	b.w	8005240 <_fwalk_reent>
 80050e2:	bf00      	nop
 80050e4:	0800501d 	.word	0x0800501d

080050e8 <__sfmoreglue>:
 80050e8:	b570      	push	{r4, r5, r6, lr}
 80050ea:	1e4a      	subs	r2, r1, #1
 80050ec:	2568      	movs	r5, #104	; 0x68
 80050ee:	4355      	muls	r5, r2
 80050f0:	460e      	mov	r6, r1
 80050f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80050f6:	f000 f979 	bl	80053ec <_malloc_r>
 80050fa:	4604      	mov	r4, r0
 80050fc:	b140      	cbz	r0, 8005110 <__sfmoreglue+0x28>
 80050fe:	2100      	movs	r1, #0
 8005100:	e9c0 1600 	strd	r1, r6, [r0]
 8005104:	300c      	adds	r0, #12
 8005106:	60a0      	str	r0, [r4, #8]
 8005108:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800510c:	f7ff fdaa 	bl	8004c64 <memset>
 8005110:	4620      	mov	r0, r4
 8005112:	bd70      	pop	{r4, r5, r6, pc}

08005114 <__sfp_lock_acquire>:
 8005114:	4801      	ldr	r0, [pc, #4]	; (800511c <__sfp_lock_acquire+0x8>)
 8005116:	f000 b8b3 	b.w	8005280 <__retarget_lock_acquire_recursive>
 800511a:	bf00      	nop
 800511c:	2000025c 	.word	0x2000025c

08005120 <__sfp_lock_release>:
 8005120:	4801      	ldr	r0, [pc, #4]	; (8005128 <__sfp_lock_release+0x8>)
 8005122:	f000 b8ae 	b.w	8005282 <__retarget_lock_release_recursive>
 8005126:	bf00      	nop
 8005128:	2000025c 	.word	0x2000025c

0800512c <__sinit_lock_acquire>:
 800512c:	4801      	ldr	r0, [pc, #4]	; (8005134 <__sinit_lock_acquire+0x8>)
 800512e:	f000 b8a7 	b.w	8005280 <__retarget_lock_acquire_recursive>
 8005132:	bf00      	nop
 8005134:	20000257 	.word	0x20000257

08005138 <__sinit_lock_release>:
 8005138:	4801      	ldr	r0, [pc, #4]	; (8005140 <__sinit_lock_release+0x8>)
 800513a:	f000 b8a2 	b.w	8005282 <__retarget_lock_release_recursive>
 800513e:	bf00      	nop
 8005140:	20000257 	.word	0x20000257

08005144 <__sinit>:
 8005144:	b510      	push	{r4, lr}
 8005146:	4604      	mov	r4, r0
 8005148:	f7ff fff0 	bl	800512c <__sinit_lock_acquire>
 800514c:	69a3      	ldr	r3, [r4, #24]
 800514e:	b11b      	cbz	r3, 8005158 <__sinit+0x14>
 8005150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005154:	f7ff bff0 	b.w	8005138 <__sinit_lock_release>
 8005158:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800515c:	6523      	str	r3, [r4, #80]	; 0x50
 800515e:	4b13      	ldr	r3, [pc, #76]	; (80051ac <__sinit+0x68>)
 8005160:	4a13      	ldr	r2, [pc, #76]	; (80051b0 <__sinit+0x6c>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	62a2      	str	r2, [r4, #40]	; 0x28
 8005166:	42a3      	cmp	r3, r4
 8005168:	bf04      	itt	eq
 800516a:	2301      	moveq	r3, #1
 800516c:	61a3      	streq	r3, [r4, #24]
 800516e:	4620      	mov	r0, r4
 8005170:	f000 f820 	bl	80051b4 <__sfp>
 8005174:	6060      	str	r0, [r4, #4]
 8005176:	4620      	mov	r0, r4
 8005178:	f000 f81c 	bl	80051b4 <__sfp>
 800517c:	60a0      	str	r0, [r4, #8]
 800517e:	4620      	mov	r0, r4
 8005180:	f000 f818 	bl	80051b4 <__sfp>
 8005184:	2200      	movs	r2, #0
 8005186:	60e0      	str	r0, [r4, #12]
 8005188:	2104      	movs	r1, #4
 800518a:	6860      	ldr	r0, [r4, #4]
 800518c:	f7ff ff82 	bl	8005094 <std>
 8005190:	68a0      	ldr	r0, [r4, #8]
 8005192:	2201      	movs	r2, #1
 8005194:	2109      	movs	r1, #9
 8005196:	f7ff ff7d 	bl	8005094 <std>
 800519a:	68e0      	ldr	r0, [r4, #12]
 800519c:	2202      	movs	r2, #2
 800519e:	2112      	movs	r1, #18
 80051a0:	f7ff ff78 	bl	8005094 <std>
 80051a4:	2301      	movs	r3, #1
 80051a6:	61a3      	str	r3, [r4, #24]
 80051a8:	e7d2      	b.n	8005150 <__sinit+0xc>
 80051aa:	bf00      	nop
 80051ac:	08005ca0 	.word	0x08005ca0
 80051b0:	080050dd 	.word	0x080050dd

080051b4 <__sfp>:
 80051b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051b6:	4607      	mov	r7, r0
 80051b8:	f7ff ffac 	bl	8005114 <__sfp_lock_acquire>
 80051bc:	4b1e      	ldr	r3, [pc, #120]	; (8005238 <__sfp+0x84>)
 80051be:	681e      	ldr	r6, [r3, #0]
 80051c0:	69b3      	ldr	r3, [r6, #24]
 80051c2:	b913      	cbnz	r3, 80051ca <__sfp+0x16>
 80051c4:	4630      	mov	r0, r6
 80051c6:	f7ff ffbd 	bl	8005144 <__sinit>
 80051ca:	3648      	adds	r6, #72	; 0x48
 80051cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80051d0:	3b01      	subs	r3, #1
 80051d2:	d503      	bpl.n	80051dc <__sfp+0x28>
 80051d4:	6833      	ldr	r3, [r6, #0]
 80051d6:	b30b      	cbz	r3, 800521c <__sfp+0x68>
 80051d8:	6836      	ldr	r6, [r6, #0]
 80051da:	e7f7      	b.n	80051cc <__sfp+0x18>
 80051dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80051e0:	b9d5      	cbnz	r5, 8005218 <__sfp+0x64>
 80051e2:	4b16      	ldr	r3, [pc, #88]	; (800523c <__sfp+0x88>)
 80051e4:	60e3      	str	r3, [r4, #12]
 80051e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80051ea:	6665      	str	r5, [r4, #100]	; 0x64
 80051ec:	f000 f847 	bl	800527e <__retarget_lock_init_recursive>
 80051f0:	f7ff ff96 	bl	8005120 <__sfp_lock_release>
 80051f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80051f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80051fc:	6025      	str	r5, [r4, #0]
 80051fe:	61a5      	str	r5, [r4, #24]
 8005200:	2208      	movs	r2, #8
 8005202:	4629      	mov	r1, r5
 8005204:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005208:	f7ff fd2c 	bl	8004c64 <memset>
 800520c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005210:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005214:	4620      	mov	r0, r4
 8005216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005218:	3468      	adds	r4, #104	; 0x68
 800521a:	e7d9      	b.n	80051d0 <__sfp+0x1c>
 800521c:	2104      	movs	r1, #4
 800521e:	4638      	mov	r0, r7
 8005220:	f7ff ff62 	bl	80050e8 <__sfmoreglue>
 8005224:	4604      	mov	r4, r0
 8005226:	6030      	str	r0, [r6, #0]
 8005228:	2800      	cmp	r0, #0
 800522a:	d1d5      	bne.n	80051d8 <__sfp+0x24>
 800522c:	f7ff ff78 	bl	8005120 <__sfp_lock_release>
 8005230:	230c      	movs	r3, #12
 8005232:	603b      	str	r3, [r7, #0]
 8005234:	e7ee      	b.n	8005214 <__sfp+0x60>
 8005236:	bf00      	nop
 8005238:	08005ca0 	.word	0x08005ca0
 800523c:	ffff0001 	.word	0xffff0001

08005240 <_fwalk_reent>:
 8005240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005244:	4606      	mov	r6, r0
 8005246:	4688      	mov	r8, r1
 8005248:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800524c:	2700      	movs	r7, #0
 800524e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005252:	f1b9 0901 	subs.w	r9, r9, #1
 8005256:	d505      	bpl.n	8005264 <_fwalk_reent+0x24>
 8005258:	6824      	ldr	r4, [r4, #0]
 800525a:	2c00      	cmp	r4, #0
 800525c:	d1f7      	bne.n	800524e <_fwalk_reent+0xe>
 800525e:	4638      	mov	r0, r7
 8005260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005264:	89ab      	ldrh	r3, [r5, #12]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d907      	bls.n	800527a <_fwalk_reent+0x3a>
 800526a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800526e:	3301      	adds	r3, #1
 8005270:	d003      	beq.n	800527a <_fwalk_reent+0x3a>
 8005272:	4629      	mov	r1, r5
 8005274:	4630      	mov	r0, r6
 8005276:	47c0      	blx	r8
 8005278:	4307      	orrs	r7, r0
 800527a:	3568      	adds	r5, #104	; 0x68
 800527c:	e7e9      	b.n	8005252 <_fwalk_reent+0x12>

0800527e <__retarget_lock_init_recursive>:
 800527e:	4770      	bx	lr

08005280 <__retarget_lock_acquire_recursive>:
 8005280:	4770      	bx	lr

08005282 <__retarget_lock_release_recursive>:
 8005282:	4770      	bx	lr

08005284 <__swhatbuf_r>:
 8005284:	b570      	push	{r4, r5, r6, lr}
 8005286:	460e      	mov	r6, r1
 8005288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800528c:	2900      	cmp	r1, #0
 800528e:	b096      	sub	sp, #88	; 0x58
 8005290:	4614      	mov	r4, r2
 8005292:	461d      	mov	r5, r3
 8005294:	da07      	bge.n	80052a6 <__swhatbuf_r+0x22>
 8005296:	2300      	movs	r3, #0
 8005298:	602b      	str	r3, [r5, #0]
 800529a:	89b3      	ldrh	r3, [r6, #12]
 800529c:	061a      	lsls	r2, r3, #24
 800529e:	d410      	bmi.n	80052c2 <__swhatbuf_r+0x3e>
 80052a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052a4:	e00e      	b.n	80052c4 <__swhatbuf_r+0x40>
 80052a6:	466a      	mov	r2, sp
 80052a8:	f000 fc5e 	bl	8005b68 <_fstat_r>
 80052ac:	2800      	cmp	r0, #0
 80052ae:	dbf2      	blt.n	8005296 <__swhatbuf_r+0x12>
 80052b0:	9a01      	ldr	r2, [sp, #4]
 80052b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80052b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80052ba:	425a      	negs	r2, r3
 80052bc:	415a      	adcs	r2, r3
 80052be:	602a      	str	r2, [r5, #0]
 80052c0:	e7ee      	b.n	80052a0 <__swhatbuf_r+0x1c>
 80052c2:	2340      	movs	r3, #64	; 0x40
 80052c4:	2000      	movs	r0, #0
 80052c6:	6023      	str	r3, [r4, #0]
 80052c8:	b016      	add	sp, #88	; 0x58
 80052ca:	bd70      	pop	{r4, r5, r6, pc}

080052cc <__smakebuf_r>:
 80052cc:	898b      	ldrh	r3, [r1, #12]
 80052ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80052d0:	079d      	lsls	r5, r3, #30
 80052d2:	4606      	mov	r6, r0
 80052d4:	460c      	mov	r4, r1
 80052d6:	d507      	bpl.n	80052e8 <__smakebuf_r+0x1c>
 80052d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80052dc:	6023      	str	r3, [r4, #0]
 80052de:	6123      	str	r3, [r4, #16]
 80052e0:	2301      	movs	r3, #1
 80052e2:	6163      	str	r3, [r4, #20]
 80052e4:	b002      	add	sp, #8
 80052e6:	bd70      	pop	{r4, r5, r6, pc}
 80052e8:	ab01      	add	r3, sp, #4
 80052ea:	466a      	mov	r2, sp
 80052ec:	f7ff ffca 	bl	8005284 <__swhatbuf_r>
 80052f0:	9900      	ldr	r1, [sp, #0]
 80052f2:	4605      	mov	r5, r0
 80052f4:	4630      	mov	r0, r6
 80052f6:	f000 f879 	bl	80053ec <_malloc_r>
 80052fa:	b948      	cbnz	r0, 8005310 <__smakebuf_r+0x44>
 80052fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005300:	059a      	lsls	r2, r3, #22
 8005302:	d4ef      	bmi.n	80052e4 <__smakebuf_r+0x18>
 8005304:	f023 0303 	bic.w	r3, r3, #3
 8005308:	f043 0302 	orr.w	r3, r3, #2
 800530c:	81a3      	strh	r3, [r4, #12]
 800530e:	e7e3      	b.n	80052d8 <__smakebuf_r+0xc>
 8005310:	4b0d      	ldr	r3, [pc, #52]	; (8005348 <__smakebuf_r+0x7c>)
 8005312:	62b3      	str	r3, [r6, #40]	; 0x28
 8005314:	89a3      	ldrh	r3, [r4, #12]
 8005316:	6020      	str	r0, [r4, #0]
 8005318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800531c:	81a3      	strh	r3, [r4, #12]
 800531e:	9b00      	ldr	r3, [sp, #0]
 8005320:	6163      	str	r3, [r4, #20]
 8005322:	9b01      	ldr	r3, [sp, #4]
 8005324:	6120      	str	r0, [r4, #16]
 8005326:	b15b      	cbz	r3, 8005340 <__smakebuf_r+0x74>
 8005328:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800532c:	4630      	mov	r0, r6
 800532e:	f000 fc2d 	bl	8005b8c <_isatty_r>
 8005332:	b128      	cbz	r0, 8005340 <__smakebuf_r+0x74>
 8005334:	89a3      	ldrh	r3, [r4, #12]
 8005336:	f023 0303 	bic.w	r3, r3, #3
 800533a:	f043 0301 	orr.w	r3, r3, #1
 800533e:	81a3      	strh	r3, [r4, #12]
 8005340:	89a0      	ldrh	r0, [r4, #12]
 8005342:	4305      	orrs	r5, r0
 8005344:	81a5      	strh	r5, [r4, #12]
 8005346:	e7cd      	b.n	80052e4 <__smakebuf_r+0x18>
 8005348:	080050dd 	.word	0x080050dd

0800534c <_free_r>:
 800534c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800534e:	2900      	cmp	r1, #0
 8005350:	d048      	beq.n	80053e4 <_free_r+0x98>
 8005352:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005356:	9001      	str	r0, [sp, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	f1a1 0404 	sub.w	r4, r1, #4
 800535e:	bfb8      	it	lt
 8005360:	18e4      	addlt	r4, r4, r3
 8005362:	f000 fc35 	bl	8005bd0 <__malloc_lock>
 8005366:	4a20      	ldr	r2, [pc, #128]	; (80053e8 <_free_r+0x9c>)
 8005368:	9801      	ldr	r0, [sp, #4]
 800536a:	6813      	ldr	r3, [r2, #0]
 800536c:	4615      	mov	r5, r2
 800536e:	b933      	cbnz	r3, 800537e <_free_r+0x32>
 8005370:	6063      	str	r3, [r4, #4]
 8005372:	6014      	str	r4, [r2, #0]
 8005374:	b003      	add	sp, #12
 8005376:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800537a:	f000 bc2f 	b.w	8005bdc <__malloc_unlock>
 800537e:	42a3      	cmp	r3, r4
 8005380:	d90b      	bls.n	800539a <_free_r+0x4e>
 8005382:	6821      	ldr	r1, [r4, #0]
 8005384:	1862      	adds	r2, r4, r1
 8005386:	4293      	cmp	r3, r2
 8005388:	bf04      	itt	eq
 800538a:	681a      	ldreq	r2, [r3, #0]
 800538c:	685b      	ldreq	r3, [r3, #4]
 800538e:	6063      	str	r3, [r4, #4]
 8005390:	bf04      	itt	eq
 8005392:	1852      	addeq	r2, r2, r1
 8005394:	6022      	streq	r2, [r4, #0]
 8005396:	602c      	str	r4, [r5, #0]
 8005398:	e7ec      	b.n	8005374 <_free_r+0x28>
 800539a:	461a      	mov	r2, r3
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	b10b      	cbz	r3, 80053a4 <_free_r+0x58>
 80053a0:	42a3      	cmp	r3, r4
 80053a2:	d9fa      	bls.n	800539a <_free_r+0x4e>
 80053a4:	6811      	ldr	r1, [r2, #0]
 80053a6:	1855      	adds	r5, r2, r1
 80053a8:	42a5      	cmp	r5, r4
 80053aa:	d10b      	bne.n	80053c4 <_free_r+0x78>
 80053ac:	6824      	ldr	r4, [r4, #0]
 80053ae:	4421      	add	r1, r4
 80053b0:	1854      	adds	r4, r2, r1
 80053b2:	42a3      	cmp	r3, r4
 80053b4:	6011      	str	r1, [r2, #0]
 80053b6:	d1dd      	bne.n	8005374 <_free_r+0x28>
 80053b8:	681c      	ldr	r4, [r3, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	6053      	str	r3, [r2, #4]
 80053be:	4421      	add	r1, r4
 80053c0:	6011      	str	r1, [r2, #0]
 80053c2:	e7d7      	b.n	8005374 <_free_r+0x28>
 80053c4:	d902      	bls.n	80053cc <_free_r+0x80>
 80053c6:	230c      	movs	r3, #12
 80053c8:	6003      	str	r3, [r0, #0]
 80053ca:	e7d3      	b.n	8005374 <_free_r+0x28>
 80053cc:	6825      	ldr	r5, [r4, #0]
 80053ce:	1961      	adds	r1, r4, r5
 80053d0:	428b      	cmp	r3, r1
 80053d2:	bf04      	itt	eq
 80053d4:	6819      	ldreq	r1, [r3, #0]
 80053d6:	685b      	ldreq	r3, [r3, #4]
 80053d8:	6063      	str	r3, [r4, #4]
 80053da:	bf04      	itt	eq
 80053dc:	1949      	addeq	r1, r1, r5
 80053de:	6021      	streq	r1, [r4, #0]
 80053e0:	6054      	str	r4, [r2, #4]
 80053e2:	e7c7      	b.n	8005374 <_free_r+0x28>
 80053e4:	b003      	add	sp, #12
 80053e6:	bd30      	pop	{r4, r5, pc}
 80053e8:	20000160 	.word	0x20000160

080053ec <_malloc_r>:
 80053ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ee:	1ccd      	adds	r5, r1, #3
 80053f0:	f025 0503 	bic.w	r5, r5, #3
 80053f4:	3508      	adds	r5, #8
 80053f6:	2d0c      	cmp	r5, #12
 80053f8:	bf38      	it	cc
 80053fa:	250c      	movcc	r5, #12
 80053fc:	2d00      	cmp	r5, #0
 80053fe:	4606      	mov	r6, r0
 8005400:	db01      	blt.n	8005406 <_malloc_r+0x1a>
 8005402:	42a9      	cmp	r1, r5
 8005404:	d903      	bls.n	800540e <_malloc_r+0x22>
 8005406:	230c      	movs	r3, #12
 8005408:	6033      	str	r3, [r6, #0]
 800540a:	2000      	movs	r0, #0
 800540c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800540e:	f000 fbdf 	bl	8005bd0 <__malloc_lock>
 8005412:	4921      	ldr	r1, [pc, #132]	; (8005498 <_malloc_r+0xac>)
 8005414:	680a      	ldr	r2, [r1, #0]
 8005416:	4614      	mov	r4, r2
 8005418:	b99c      	cbnz	r4, 8005442 <_malloc_r+0x56>
 800541a:	4f20      	ldr	r7, [pc, #128]	; (800549c <_malloc_r+0xb0>)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	b923      	cbnz	r3, 800542a <_malloc_r+0x3e>
 8005420:	4621      	mov	r1, r4
 8005422:	4630      	mov	r0, r6
 8005424:	f000 fb2a 	bl	8005a7c <_sbrk_r>
 8005428:	6038      	str	r0, [r7, #0]
 800542a:	4629      	mov	r1, r5
 800542c:	4630      	mov	r0, r6
 800542e:	f000 fb25 	bl	8005a7c <_sbrk_r>
 8005432:	1c43      	adds	r3, r0, #1
 8005434:	d123      	bne.n	800547e <_malloc_r+0x92>
 8005436:	230c      	movs	r3, #12
 8005438:	6033      	str	r3, [r6, #0]
 800543a:	4630      	mov	r0, r6
 800543c:	f000 fbce 	bl	8005bdc <__malloc_unlock>
 8005440:	e7e3      	b.n	800540a <_malloc_r+0x1e>
 8005442:	6823      	ldr	r3, [r4, #0]
 8005444:	1b5b      	subs	r3, r3, r5
 8005446:	d417      	bmi.n	8005478 <_malloc_r+0x8c>
 8005448:	2b0b      	cmp	r3, #11
 800544a:	d903      	bls.n	8005454 <_malloc_r+0x68>
 800544c:	6023      	str	r3, [r4, #0]
 800544e:	441c      	add	r4, r3
 8005450:	6025      	str	r5, [r4, #0]
 8005452:	e004      	b.n	800545e <_malloc_r+0x72>
 8005454:	6863      	ldr	r3, [r4, #4]
 8005456:	42a2      	cmp	r2, r4
 8005458:	bf0c      	ite	eq
 800545a:	600b      	streq	r3, [r1, #0]
 800545c:	6053      	strne	r3, [r2, #4]
 800545e:	4630      	mov	r0, r6
 8005460:	f000 fbbc 	bl	8005bdc <__malloc_unlock>
 8005464:	f104 000b 	add.w	r0, r4, #11
 8005468:	1d23      	adds	r3, r4, #4
 800546a:	f020 0007 	bic.w	r0, r0, #7
 800546e:	1ac2      	subs	r2, r0, r3
 8005470:	d0cc      	beq.n	800540c <_malloc_r+0x20>
 8005472:	1a1b      	subs	r3, r3, r0
 8005474:	50a3      	str	r3, [r4, r2]
 8005476:	e7c9      	b.n	800540c <_malloc_r+0x20>
 8005478:	4622      	mov	r2, r4
 800547a:	6864      	ldr	r4, [r4, #4]
 800547c:	e7cc      	b.n	8005418 <_malloc_r+0x2c>
 800547e:	1cc4      	adds	r4, r0, #3
 8005480:	f024 0403 	bic.w	r4, r4, #3
 8005484:	42a0      	cmp	r0, r4
 8005486:	d0e3      	beq.n	8005450 <_malloc_r+0x64>
 8005488:	1a21      	subs	r1, r4, r0
 800548a:	4630      	mov	r0, r6
 800548c:	f000 faf6 	bl	8005a7c <_sbrk_r>
 8005490:	3001      	adds	r0, #1
 8005492:	d1dd      	bne.n	8005450 <_malloc_r+0x64>
 8005494:	e7cf      	b.n	8005436 <_malloc_r+0x4a>
 8005496:	bf00      	nop
 8005498:	20000160 	.word	0x20000160
 800549c:	20000164 	.word	0x20000164

080054a0 <__sfputc_r>:
 80054a0:	6893      	ldr	r3, [r2, #8]
 80054a2:	3b01      	subs	r3, #1
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	b410      	push	{r4}
 80054a8:	6093      	str	r3, [r2, #8]
 80054aa:	da08      	bge.n	80054be <__sfputc_r+0x1e>
 80054ac:	6994      	ldr	r4, [r2, #24]
 80054ae:	42a3      	cmp	r3, r4
 80054b0:	db01      	blt.n	80054b6 <__sfputc_r+0x16>
 80054b2:	290a      	cmp	r1, #10
 80054b4:	d103      	bne.n	80054be <__sfputc_r+0x1e>
 80054b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054ba:	f7ff bc69 	b.w	8004d90 <__swbuf_r>
 80054be:	6813      	ldr	r3, [r2, #0]
 80054c0:	1c58      	adds	r0, r3, #1
 80054c2:	6010      	str	r0, [r2, #0]
 80054c4:	7019      	strb	r1, [r3, #0]
 80054c6:	4608      	mov	r0, r1
 80054c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <__sfputs_r>:
 80054ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d0:	4606      	mov	r6, r0
 80054d2:	460f      	mov	r7, r1
 80054d4:	4614      	mov	r4, r2
 80054d6:	18d5      	adds	r5, r2, r3
 80054d8:	42ac      	cmp	r4, r5
 80054da:	d101      	bne.n	80054e0 <__sfputs_r+0x12>
 80054dc:	2000      	movs	r0, #0
 80054de:	e007      	b.n	80054f0 <__sfputs_r+0x22>
 80054e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054e4:	463a      	mov	r2, r7
 80054e6:	4630      	mov	r0, r6
 80054e8:	f7ff ffda 	bl	80054a0 <__sfputc_r>
 80054ec:	1c43      	adds	r3, r0, #1
 80054ee:	d1f3      	bne.n	80054d8 <__sfputs_r+0xa>
 80054f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080054f4 <_vfiprintf_r>:
 80054f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054f8:	460d      	mov	r5, r1
 80054fa:	b09d      	sub	sp, #116	; 0x74
 80054fc:	4614      	mov	r4, r2
 80054fe:	4698      	mov	r8, r3
 8005500:	4606      	mov	r6, r0
 8005502:	b118      	cbz	r0, 800550c <_vfiprintf_r+0x18>
 8005504:	6983      	ldr	r3, [r0, #24]
 8005506:	b90b      	cbnz	r3, 800550c <_vfiprintf_r+0x18>
 8005508:	f7ff fe1c 	bl	8005144 <__sinit>
 800550c:	4b89      	ldr	r3, [pc, #548]	; (8005734 <_vfiprintf_r+0x240>)
 800550e:	429d      	cmp	r5, r3
 8005510:	d11b      	bne.n	800554a <_vfiprintf_r+0x56>
 8005512:	6875      	ldr	r5, [r6, #4]
 8005514:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005516:	07d9      	lsls	r1, r3, #31
 8005518:	d405      	bmi.n	8005526 <_vfiprintf_r+0x32>
 800551a:	89ab      	ldrh	r3, [r5, #12]
 800551c:	059a      	lsls	r2, r3, #22
 800551e:	d402      	bmi.n	8005526 <_vfiprintf_r+0x32>
 8005520:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005522:	f7ff fead 	bl	8005280 <__retarget_lock_acquire_recursive>
 8005526:	89ab      	ldrh	r3, [r5, #12]
 8005528:	071b      	lsls	r3, r3, #28
 800552a:	d501      	bpl.n	8005530 <_vfiprintf_r+0x3c>
 800552c:	692b      	ldr	r3, [r5, #16]
 800552e:	b9eb      	cbnz	r3, 800556c <_vfiprintf_r+0x78>
 8005530:	4629      	mov	r1, r5
 8005532:	4630      	mov	r0, r6
 8005534:	f7ff fc7e 	bl	8004e34 <__swsetup_r>
 8005538:	b1c0      	cbz	r0, 800556c <_vfiprintf_r+0x78>
 800553a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800553c:	07dc      	lsls	r4, r3, #31
 800553e:	d50e      	bpl.n	800555e <_vfiprintf_r+0x6a>
 8005540:	f04f 30ff 	mov.w	r0, #4294967295
 8005544:	b01d      	add	sp, #116	; 0x74
 8005546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800554a:	4b7b      	ldr	r3, [pc, #492]	; (8005738 <_vfiprintf_r+0x244>)
 800554c:	429d      	cmp	r5, r3
 800554e:	d101      	bne.n	8005554 <_vfiprintf_r+0x60>
 8005550:	68b5      	ldr	r5, [r6, #8]
 8005552:	e7df      	b.n	8005514 <_vfiprintf_r+0x20>
 8005554:	4b79      	ldr	r3, [pc, #484]	; (800573c <_vfiprintf_r+0x248>)
 8005556:	429d      	cmp	r5, r3
 8005558:	bf08      	it	eq
 800555a:	68f5      	ldreq	r5, [r6, #12]
 800555c:	e7da      	b.n	8005514 <_vfiprintf_r+0x20>
 800555e:	89ab      	ldrh	r3, [r5, #12]
 8005560:	0598      	lsls	r0, r3, #22
 8005562:	d4ed      	bmi.n	8005540 <_vfiprintf_r+0x4c>
 8005564:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005566:	f7ff fe8c 	bl	8005282 <__retarget_lock_release_recursive>
 800556a:	e7e9      	b.n	8005540 <_vfiprintf_r+0x4c>
 800556c:	2300      	movs	r3, #0
 800556e:	9309      	str	r3, [sp, #36]	; 0x24
 8005570:	2320      	movs	r3, #32
 8005572:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005576:	f8cd 800c 	str.w	r8, [sp, #12]
 800557a:	2330      	movs	r3, #48	; 0x30
 800557c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005740 <_vfiprintf_r+0x24c>
 8005580:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005584:	f04f 0901 	mov.w	r9, #1
 8005588:	4623      	mov	r3, r4
 800558a:	469a      	mov	sl, r3
 800558c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005590:	b10a      	cbz	r2, 8005596 <_vfiprintf_r+0xa2>
 8005592:	2a25      	cmp	r2, #37	; 0x25
 8005594:	d1f9      	bne.n	800558a <_vfiprintf_r+0x96>
 8005596:	ebba 0b04 	subs.w	fp, sl, r4
 800559a:	d00b      	beq.n	80055b4 <_vfiprintf_r+0xc0>
 800559c:	465b      	mov	r3, fp
 800559e:	4622      	mov	r2, r4
 80055a0:	4629      	mov	r1, r5
 80055a2:	4630      	mov	r0, r6
 80055a4:	f7ff ff93 	bl	80054ce <__sfputs_r>
 80055a8:	3001      	adds	r0, #1
 80055aa:	f000 80aa 	beq.w	8005702 <_vfiprintf_r+0x20e>
 80055ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055b0:	445a      	add	r2, fp
 80055b2:	9209      	str	r2, [sp, #36]	; 0x24
 80055b4:	f89a 3000 	ldrb.w	r3, [sl]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f000 80a2 	beq.w	8005702 <_vfiprintf_r+0x20e>
 80055be:	2300      	movs	r3, #0
 80055c0:	f04f 32ff 	mov.w	r2, #4294967295
 80055c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055c8:	f10a 0a01 	add.w	sl, sl, #1
 80055cc:	9304      	str	r3, [sp, #16]
 80055ce:	9307      	str	r3, [sp, #28]
 80055d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055d4:	931a      	str	r3, [sp, #104]	; 0x68
 80055d6:	4654      	mov	r4, sl
 80055d8:	2205      	movs	r2, #5
 80055da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055de:	4858      	ldr	r0, [pc, #352]	; (8005740 <_vfiprintf_r+0x24c>)
 80055e0:	f7fa fdfe 	bl	80001e0 <memchr>
 80055e4:	9a04      	ldr	r2, [sp, #16]
 80055e6:	b9d8      	cbnz	r0, 8005620 <_vfiprintf_r+0x12c>
 80055e8:	06d1      	lsls	r1, r2, #27
 80055ea:	bf44      	itt	mi
 80055ec:	2320      	movmi	r3, #32
 80055ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055f2:	0713      	lsls	r3, r2, #28
 80055f4:	bf44      	itt	mi
 80055f6:	232b      	movmi	r3, #43	; 0x2b
 80055f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055fc:	f89a 3000 	ldrb.w	r3, [sl]
 8005600:	2b2a      	cmp	r3, #42	; 0x2a
 8005602:	d015      	beq.n	8005630 <_vfiprintf_r+0x13c>
 8005604:	9a07      	ldr	r2, [sp, #28]
 8005606:	4654      	mov	r4, sl
 8005608:	2000      	movs	r0, #0
 800560a:	f04f 0c0a 	mov.w	ip, #10
 800560e:	4621      	mov	r1, r4
 8005610:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005614:	3b30      	subs	r3, #48	; 0x30
 8005616:	2b09      	cmp	r3, #9
 8005618:	d94e      	bls.n	80056b8 <_vfiprintf_r+0x1c4>
 800561a:	b1b0      	cbz	r0, 800564a <_vfiprintf_r+0x156>
 800561c:	9207      	str	r2, [sp, #28]
 800561e:	e014      	b.n	800564a <_vfiprintf_r+0x156>
 8005620:	eba0 0308 	sub.w	r3, r0, r8
 8005624:	fa09 f303 	lsl.w	r3, r9, r3
 8005628:	4313      	orrs	r3, r2
 800562a:	9304      	str	r3, [sp, #16]
 800562c:	46a2      	mov	sl, r4
 800562e:	e7d2      	b.n	80055d6 <_vfiprintf_r+0xe2>
 8005630:	9b03      	ldr	r3, [sp, #12]
 8005632:	1d19      	adds	r1, r3, #4
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	9103      	str	r1, [sp, #12]
 8005638:	2b00      	cmp	r3, #0
 800563a:	bfbb      	ittet	lt
 800563c:	425b      	neglt	r3, r3
 800563e:	f042 0202 	orrlt.w	r2, r2, #2
 8005642:	9307      	strge	r3, [sp, #28]
 8005644:	9307      	strlt	r3, [sp, #28]
 8005646:	bfb8      	it	lt
 8005648:	9204      	strlt	r2, [sp, #16]
 800564a:	7823      	ldrb	r3, [r4, #0]
 800564c:	2b2e      	cmp	r3, #46	; 0x2e
 800564e:	d10c      	bne.n	800566a <_vfiprintf_r+0x176>
 8005650:	7863      	ldrb	r3, [r4, #1]
 8005652:	2b2a      	cmp	r3, #42	; 0x2a
 8005654:	d135      	bne.n	80056c2 <_vfiprintf_r+0x1ce>
 8005656:	9b03      	ldr	r3, [sp, #12]
 8005658:	1d1a      	adds	r2, r3, #4
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	9203      	str	r2, [sp, #12]
 800565e:	2b00      	cmp	r3, #0
 8005660:	bfb8      	it	lt
 8005662:	f04f 33ff 	movlt.w	r3, #4294967295
 8005666:	3402      	adds	r4, #2
 8005668:	9305      	str	r3, [sp, #20]
 800566a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005750 <_vfiprintf_r+0x25c>
 800566e:	7821      	ldrb	r1, [r4, #0]
 8005670:	2203      	movs	r2, #3
 8005672:	4650      	mov	r0, sl
 8005674:	f7fa fdb4 	bl	80001e0 <memchr>
 8005678:	b140      	cbz	r0, 800568c <_vfiprintf_r+0x198>
 800567a:	2340      	movs	r3, #64	; 0x40
 800567c:	eba0 000a 	sub.w	r0, r0, sl
 8005680:	fa03 f000 	lsl.w	r0, r3, r0
 8005684:	9b04      	ldr	r3, [sp, #16]
 8005686:	4303      	orrs	r3, r0
 8005688:	3401      	adds	r4, #1
 800568a:	9304      	str	r3, [sp, #16]
 800568c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005690:	482c      	ldr	r0, [pc, #176]	; (8005744 <_vfiprintf_r+0x250>)
 8005692:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005696:	2206      	movs	r2, #6
 8005698:	f7fa fda2 	bl	80001e0 <memchr>
 800569c:	2800      	cmp	r0, #0
 800569e:	d03f      	beq.n	8005720 <_vfiprintf_r+0x22c>
 80056a0:	4b29      	ldr	r3, [pc, #164]	; (8005748 <_vfiprintf_r+0x254>)
 80056a2:	bb1b      	cbnz	r3, 80056ec <_vfiprintf_r+0x1f8>
 80056a4:	9b03      	ldr	r3, [sp, #12]
 80056a6:	3307      	adds	r3, #7
 80056a8:	f023 0307 	bic.w	r3, r3, #7
 80056ac:	3308      	adds	r3, #8
 80056ae:	9303      	str	r3, [sp, #12]
 80056b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056b2:	443b      	add	r3, r7
 80056b4:	9309      	str	r3, [sp, #36]	; 0x24
 80056b6:	e767      	b.n	8005588 <_vfiprintf_r+0x94>
 80056b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80056bc:	460c      	mov	r4, r1
 80056be:	2001      	movs	r0, #1
 80056c0:	e7a5      	b.n	800560e <_vfiprintf_r+0x11a>
 80056c2:	2300      	movs	r3, #0
 80056c4:	3401      	adds	r4, #1
 80056c6:	9305      	str	r3, [sp, #20]
 80056c8:	4619      	mov	r1, r3
 80056ca:	f04f 0c0a 	mov.w	ip, #10
 80056ce:	4620      	mov	r0, r4
 80056d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056d4:	3a30      	subs	r2, #48	; 0x30
 80056d6:	2a09      	cmp	r2, #9
 80056d8:	d903      	bls.n	80056e2 <_vfiprintf_r+0x1ee>
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d0c5      	beq.n	800566a <_vfiprintf_r+0x176>
 80056de:	9105      	str	r1, [sp, #20]
 80056e0:	e7c3      	b.n	800566a <_vfiprintf_r+0x176>
 80056e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80056e6:	4604      	mov	r4, r0
 80056e8:	2301      	movs	r3, #1
 80056ea:	e7f0      	b.n	80056ce <_vfiprintf_r+0x1da>
 80056ec:	ab03      	add	r3, sp, #12
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	462a      	mov	r2, r5
 80056f2:	4b16      	ldr	r3, [pc, #88]	; (800574c <_vfiprintf_r+0x258>)
 80056f4:	a904      	add	r1, sp, #16
 80056f6:	4630      	mov	r0, r6
 80056f8:	f3af 8000 	nop.w
 80056fc:	4607      	mov	r7, r0
 80056fe:	1c78      	adds	r0, r7, #1
 8005700:	d1d6      	bne.n	80056b0 <_vfiprintf_r+0x1bc>
 8005702:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005704:	07d9      	lsls	r1, r3, #31
 8005706:	d405      	bmi.n	8005714 <_vfiprintf_r+0x220>
 8005708:	89ab      	ldrh	r3, [r5, #12]
 800570a:	059a      	lsls	r2, r3, #22
 800570c:	d402      	bmi.n	8005714 <_vfiprintf_r+0x220>
 800570e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005710:	f7ff fdb7 	bl	8005282 <__retarget_lock_release_recursive>
 8005714:	89ab      	ldrh	r3, [r5, #12]
 8005716:	065b      	lsls	r3, r3, #25
 8005718:	f53f af12 	bmi.w	8005540 <_vfiprintf_r+0x4c>
 800571c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800571e:	e711      	b.n	8005544 <_vfiprintf_r+0x50>
 8005720:	ab03      	add	r3, sp, #12
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	462a      	mov	r2, r5
 8005726:	4b09      	ldr	r3, [pc, #36]	; (800574c <_vfiprintf_r+0x258>)
 8005728:	a904      	add	r1, sp, #16
 800572a:	4630      	mov	r0, r6
 800572c:	f000 f880 	bl	8005830 <_printf_i>
 8005730:	e7e4      	b.n	80056fc <_vfiprintf_r+0x208>
 8005732:	bf00      	nop
 8005734:	08005cc4 	.word	0x08005cc4
 8005738:	08005ce4 	.word	0x08005ce4
 800573c:	08005ca4 	.word	0x08005ca4
 8005740:	08005d04 	.word	0x08005d04
 8005744:	08005d0e 	.word	0x08005d0e
 8005748:	00000000 	.word	0x00000000
 800574c:	080054cf 	.word	0x080054cf
 8005750:	08005d0a 	.word	0x08005d0a

08005754 <_printf_common>:
 8005754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005758:	4616      	mov	r6, r2
 800575a:	4699      	mov	r9, r3
 800575c:	688a      	ldr	r2, [r1, #8]
 800575e:	690b      	ldr	r3, [r1, #16]
 8005760:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005764:	4293      	cmp	r3, r2
 8005766:	bfb8      	it	lt
 8005768:	4613      	movlt	r3, r2
 800576a:	6033      	str	r3, [r6, #0]
 800576c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005770:	4607      	mov	r7, r0
 8005772:	460c      	mov	r4, r1
 8005774:	b10a      	cbz	r2, 800577a <_printf_common+0x26>
 8005776:	3301      	adds	r3, #1
 8005778:	6033      	str	r3, [r6, #0]
 800577a:	6823      	ldr	r3, [r4, #0]
 800577c:	0699      	lsls	r1, r3, #26
 800577e:	bf42      	ittt	mi
 8005780:	6833      	ldrmi	r3, [r6, #0]
 8005782:	3302      	addmi	r3, #2
 8005784:	6033      	strmi	r3, [r6, #0]
 8005786:	6825      	ldr	r5, [r4, #0]
 8005788:	f015 0506 	ands.w	r5, r5, #6
 800578c:	d106      	bne.n	800579c <_printf_common+0x48>
 800578e:	f104 0a19 	add.w	sl, r4, #25
 8005792:	68e3      	ldr	r3, [r4, #12]
 8005794:	6832      	ldr	r2, [r6, #0]
 8005796:	1a9b      	subs	r3, r3, r2
 8005798:	42ab      	cmp	r3, r5
 800579a:	dc26      	bgt.n	80057ea <_printf_common+0x96>
 800579c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057a0:	1e13      	subs	r3, r2, #0
 80057a2:	6822      	ldr	r2, [r4, #0]
 80057a4:	bf18      	it	ne
 80057a6:	2301      	movne	r3, #1
 80057a8:	0692      	lsls	r2, r2, #26
 80057aa:	d42b      	bmi.n	8005804 <_printf_common+0xb0>
 80057ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057b0:	4649      	mov	r1, r9
 80057b2:	4638      	mov	r0, r7
 80057b4:	47c0      	blx	r8
 80057b6:	3001      	adds	r0, #1
 80057b8:	d01e      	beq.n	80057f8 <_printf_common+0xa4>
 80057ba:	6823      	ldr	r3, [r4, #0]
 80057bc:	68e5      	ldr	r5, [r4, #12]
 80057be:	6832      	ldr	r2, [r6, #0]
 80057c0:	f003 0306 	and.w	r3, r3, #6
 80057c4:	2b04      	cmp	r3, #4
 80057c6:	bf08      	it	eq
 80057c8:	1aad      	subeq	r5, r5, r2
 80057ca:	68a3      	ldr	r3, [r4, #8]
 80057cc:	6922      	ldr	r2, [r4, #16]
 80057ce:	bf0c      	ite	eq
 80057d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057d4:	2500      	movne	r5, #0
 80057d6:	4293      	cmp	r3, r2
 80057d8:	bfc4      	itt	gt
 80057da:	1a9b      	subgt	r3, r3, r2
 80057dc:	18ed      	addgt	r5, r5, r3
 80057de:	2600      	movs	r6, #0
 80057e0:	341a      	adds	r4, #26
 80057e2:	42b5      	cmp	r5, r6
 80057e4:	d11a      	bne.n	800581c <_printf_common+0xc8>
 80057e6:	2000      	movs	r0, #0
 80057e8:	e008      	b.n	80057fc <_printf_common+0xa8>
 80057ea:	2301      	movs	r3, #1
 80057ec:	4652      	mov	r2, sl
 80057ee:	4649      	mov	r1, r9
 80057f0:	4638      	mov	r0, r7
 80057f2:	47c0      	blx	r8
 80057f4:	3001      	adds	r0, #1
 80057f6:	d103      	bne.n	8005800 <_printf_common+0xac>
 80057f8:	f04f 30ff 	mov.w	r0, #4294967295
 80057fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005800:	3501      	adds	r5, #1
 8005802:	e7c6      	b.n	8005792 <_printf_common+0x3e>
 8005804:	18e1      	adds	r1, r4, r3
 8005806:	1c5a      	adds	r2, r3, #1
 8005808:	2030      	movs	r0, #48	; 0x30
 800580a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800580e:	4422      	add	r2, r4
 8005810:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005814:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005818:	3302      	adds	r3, #2
 800581a:	e7c7      	b.n	80057ac <_printf_common+0x58>
 800581c:	2301      	movs	r3, #1
 800581e:	4622      	mov	r2, r4
 8005820:	4649      	mov	r1, r9
 8005822:	4638      	mov	r0, r7
 8005824:	47c0      	blx	r8
 8005826:	3001      	adds	r0, #1
 8005828:	d0e6      	beq.n	80057f8 <_printf_common+0xa4>
 800582a:	3601      	adds	r6, #1
 800582c:	e7d9      	b.n	80057e2 <_printf_common+0x8e>
	...

08005830 <_printf_i>:
 8005830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005834:	460c      	mov	r4, r1
 8005836:	4691      	mov	r9, r2
 8005838:	7e27      	ldrb	r7, [r4, #24]
 800583a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800583c:	2f78      	cmp	r7, #120	; 0x78
 800583e:	4680      	mov	r8, r0
 8005840:	469a      	mov	sl, r3
 8005842:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005846:	d807      	bhi.n	8005858 <_printf_i+0x28>
 8005848:	2f62      	cmp	r7, #98	; 0x62
 800584a:	d80a      	bhi.n	8005862 <_printf_i+0x32>
 800584c:	2f00      	cmp	r7, #0
 800584e:	f000 80d8 	beq.w	8005a02 <_printf_i+0x1d2>
 8005852:	2f58      	cmp	r7, #88	; 0x58
 8005854:	f000 80a3 	beq.w	800599e <_printf_i+0x16e>
 8005858:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800585c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005860:	e03a      	b.n	80058d8 <_printf_i+0xa8>
 8005862:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005866:	2b15      	cmp	r3, #21
 8005868:	d8f6      	bhi.n	8005858 <_printf_i+0x28>
 800586a:	a001      	add	r0, pc, #4	; (adr r0, 8005870 <_printf_i+0x40>)
 800586c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005870:	080058c9 	.word	0x080058c9
 8005874:	080058dd 	.word	0x080058dd
 8005878:	08005859 	.word	0x08005859
 800587c:	08005859 	.word	0x08005859
 8005880:	08005859 	.word	0x08005859
 8005884:	08005859 	.word	0x08005859
 8005888:	080058dd 	.word	0x080058dd
 800588c:	08005859 	.word	0x08005859
 8005890:	08005859 	.word	0x08005859
 8005894:	08005859 	.word	0x08005859
 8005898:	08005859 	.word	0x08005859
 800589c:	080059e9 	.word	0x080059e9
 80058a0:	0800590d 	.word	0x0800590d
 80058a4:	080059cb 	.word	0x080059cb
 80058a8:	08005859 	.word	0x08005859
 80058ac:	08005859 	.word	0x08005859
 80058b0:	08005a0b 	.word	0x08005a0b
 80058b4:	08005859 	.word	0x08005859
 80058b8:	0800590d 	.word	0x0800590d
 80058bc:	08005859 	.word	0x08005859
 80058c0:	08005859 	.word	0x08005859
 80058c4:	080059d3 	.word	0x080059d3
 80058c8:	680b      	ldr	r3, [r1, #0]
 80058ca:	1d1a      	adds	r2, r3, #4
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	600a      	str	r2, [r1, #0]
 80058d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80058d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058d8:	2301      	movs	r3, #1
 80058da:	e0a3      	b.n	8005a24 <_printf_i+0x1f4>
 80058dc:	6825      	ldr	r5, [r4, #0]
 80058de:	6808      	ldr	r0, [r1, #0]
 80058e0:	062e      	lsls	r6, r5, #24
 80058e2:	f100 0304 	add.w	r3, r0, #4
 80058e6:	d50a      	bpl.n	80058fe <_printf_i+0xce>
 80058e8:	6805      	ldr	r5, [r0, #0]
 80058ea:	600b      	str	r3, [r1, #0]
 80058ec:	2d00      	cmp	r5, #0
 80058ee:	da03      	bge.n	80058f8 <_printf_i+0xc8>
 80058f0:	232d      	movs	r3, #45	; 0x2d
 80058f2:	426d      	negs	r5, r5
 80058f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058f8:	485e      	ldr	r0, [pc, #376]	; (8005a74 <_printf_i+0x244>)
 80058fa:	230a      	movs	r3, #10
 80058fc:	e019      	b.n	8005932 <_printf_i+0x102>
 80058fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005902:	6805      	ldr	r5, [r0, #0]
 8005904:	600b      	str	r3, [r1, #0]
 8005906:	bf18      	it	ne
 8005908:	b22d      	sxthne	r5, r5
 800590a:	e7ef      	b.n	80058ec <_printf_i+0xbc>
 800590c:	680b      	ldr	r3, [r1, #0]
 800590e:	6825      	ldr	r5, [r4, #0]
 8005910:	1d18      	adds	r0, r3, #4
 8005912:	6008      	str	r0, [r1, #0]
 8005914:	0628      	lsls	r0, r5, #24
 8005916:	d501      	bpl.n	800591c <_printf_i+0xec>
 8005918:	681d      	ldr	r5, [r3, #0]
 800591a:	e002      	b.n	8005922 <_printf_i+0xf2>
 800591c:	0669      	lsls	r1, r5, #25
 800591e:	d5fb      	bpl.n	8005918 <_printf_i+0xe8>
 8005920:	881d      	ldrh	r5, [r3, #0]
 8005922:	4854      	ldr	r0, [pc, #336]	; (8005a74 <_printf_i+0x244>)
 8005924:	2f6f      	cmp	r7, #111	; 0x6f
 8005926:	bf0c      	ite	eq
 8005928:	2308      	moveq	r3, #8
 800592a:	230a      	movne	r3, #10
 800592c:	2100      	movs	r1, #0
 800592e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005932:	6866      	ldr	r6, [r4, #4]
 8005934:	60a6      	str	r6, [r4, #8]
 8005936:	2e00      	cmp	r6, #0
 8005938:	bfa2      	ittt	ge
 800593a:	6821      	ldrge	r1, [r4, #0]
 800593c:	f021 0104 	bicge.w	r1, r1, #4
 8005940:	6021      	strge	r1, [r4, #0]
 8005942:	b90d      	cbnz	r5, 8005948 <_printf_i+0x118>
 8005944:	2e00      	cmp	r6, #0
 8005946:	d04d      	beq.n	80059e4 <_printf_i+0x1b4>
 8005948:	4616      	mov	r6, r2
 800594a:	fbb5 f1f3 	udiv	r1, r5, r3
 800594e:	fb03 5711 	mls	r7, r3, r1, r5
 8005952:	5dc7      	ldrb	r7, [r0, r7]
 8005954:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005958:	462f      	mov	r7, r5
 800595a:	42bb      	cmp	r3, r7
 800595c:	460d      	mov	r5, r1
 800595e:	d9f4      	bls.n	800594a <_printf_i+0x11a>
 8005960:	2b08      	cmp	r3, #8
 8005962:	d10b      	bne.n	800597c <_printf_i+0x14c>
 8005964:	6823      	ldr	r3, [r4, #0]
 8005966:	07df      	lsls	r7, r3, #31
 8005968:	d508      	bpl.n	800597c <_printf_i+0x14c>
 800596a:	6923      	ldr	r3, [r4, #16]
 800596c:	6861      	ldr	r1, [r4, #4]
 800596e:	4299      	cmp	r1, r3
 8005970:	bfde      	ittt	le
 8005972:	2330      	movle	r3, #48	; 0x30
 8005974:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005978:	f106 36ff 	addle.w	r6, r6, #4294967295
 800597c:	1b92      	subs	r2, r2, r6
 800597e:	6122      	str	r2, [r4, #16]
 8005980:	f8cd a000 	str.w	sl, [sp]
 8005984:	464b      	mov	r3, r9
 8005986:	aa03      	add	r2, sp, #12
 8005988:	4621      	mov	r1, r4
 800598a:	4640      	mov	r0, r8
 800598c:	f7ff fee2 	bl	8005754 <_printf_common>
 8005990:	3001      	adds	r0, #1
 8005992:	d14c      	bne.n	8005a2e <_printf_i+0x1fe>
 8005994:	f04f 30ff 	mov.w	r0, #4294967295
 8005998:	b004      	add	sp, #16
 800599a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800599e:	4835      	ldr	r0, [pc, #212]	; (8005a74 <_printf_i+0x244>)
 80059a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80059a4:	6823      	ldr	r3, [r4, #0]
 80059a6:	680e      	ldr	r6, [r1, #0]
 80059a8:	061f      	lsls	r7, r3, #24
 80059aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80059ae:	600e      	str	r6, [r1, #0]
 80059b0:	d514      	bpl.n	80059dc <_printf_i+0x1ac>
 80059b2:	07d9      	lsls	r1, r3, #31
 80059b4:	bf44      	itt	mi
 80059b6:	f043 0320 	orrmi.w	r3, r3, #32
 80059ba:	6023      	strmi	r3, [r4, #0]
 80059bc:	b91d      	cbnz	r5, 80059c6 <_printf_i+0x196>
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	f023 0320 	bic.w	r3, r3, #32
 80059c4:	6023      	str	r3, [r4, #0]
 80059c6:	2310      	movs	r3, #16
 80059c8:	e7b0      	b.n	800592c <_printf_i+0xfc>
 80059ca:	6823      	ldr	r3, [r4, #0]
 80059cc:	f043 0320 	orr.w	r3, r3, #32
 80059d0:	6023      	str	r3, [r4, #0]
 80059d2:	2378      	movs	r3, #120	; 0x78
 80059d4:	4828      	ldr	r0, [pc, #160]	; (8005a78 <_printf_i+0x248>)
 80059d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059da:	e7e3      	b.n	80059a4 <_printf_i+0x174>
 80059dc:	065e      	lsls	r6, r3, #25
 80059de:	bf48      	it	mi
 80059e0:	b2ad      	uxthmi	r5, r5
 80059e2:	e7e6      	b.n	80059b2 <_printf_i+0x182>
 80059e4:	4616      	mov	r6, r2
 80059e6:	e7bb      	b.n	8005960 <_printf_i+0x130>
 80059e8:	680b      	ldr	r3, [r1, #0]
 80059ea:	6826      	ldr	r6, [r4, #0]
 80059ec:	6960      	ldr	r0, [r4, #20]
 80059ee:	1d1d      	adds	r5, r3, #4
 80059f0:	600d      	str	r5, [r1, #0]
 80059f2:	0635      	lsls	r5, r6, #24
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	d501      	bpl.n	80059fc <_printf_i+0x1cc>
 80059f8:	6018      	str	r0, [r3, #0]
 80059fa:	e002      	b.n	8005a02 <_printf_i+0x1d2>
 80059fc:	0671      	lsls	r1, r6, #25
 80059fe:	d5fb      	bpl.n	80059f8 <_printf_i+0x1c8>
 8005a00:	8018      	strh	r0, [r3, #0]
 8005a02:	2300      	movs	r3, #0
 8005a04:	6123      	str	r3, [r4, #16]
 8005a06:	4616      	mov	r6, r2
 8005a08:	e7ba      	b.n	8005980 <_printf_i+0x150>
 8005a0a:	680b      	ldr	r3, [r1, #0]
 8005a0c:	1d1a      	adds	r2, r3, #4
 8005a0e:	600a      	str	r2, [r1, #0]
 8005a10:	681e      	ldr	r6, [r3, #0]
 8005a12:	6862      	ldr	r2, [r4, #4]
 8005a14:	2100      	movs	r1, #0
 8005a16:	4630      	mov	r0, r6
 8005a18:	f7fa fbe2 	bl	80001e0 <memchr>
 8005a1c:	b108      	cbz	r0, 8005a22 <_printf_i+0x1f2>
 8005a1e:	1b80      	subs	r0, r0, r6
 8005a20:	6060      	str	r0, [r4, #4]
 8005a22:	6863      	ldr	r3, [r4, #4]
 8005a24:	6123      	str	r3, [r4, #16]
 8005a26:	2300      	movs	r3, #0
 8005a28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a2c:	e7a8      	b.n	8005980 <_printf_i+0x150>
 8005a2e:	6923      	ldr	r3, [r4, #16]
 8005a30:	4632      	mov	r2, r6
 8005a32:	4649      	mov	r1, r9
 8005a34:	4640      	mov	r0, r8
 8005a36:	47d0      	blx	sl
 8005a38:	3001      	adds	r0, #1
 8005a3a:	d0ab      	beq.n	8005994 <_printf_i+0x164>
 8005a3c:	6823      	ldr	r3, [r4, #0]
 8005a3e:	079b      	lsls	r3, r3, #30
 8005a40:	d413      	bmi.n	8005a6a <_printf_i+0x23a>
 8005a42:	68e0      	ldr	r0, [r4, #12]
 8005a44:	9b03      	ldr	r3, [sp, #12]
 8005a46:	4298      	cmp	r0, r3
 8005a48:	bfb8      	it	lt
 8005a4a:	4618      	movlt	r0, r3
 8005a4c:	e7a4      	b.n	8005998 <_printf_i+0x168>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	4632      	mov	r2, r6
 8005a52:	4649      	mov	r1, r9
 8005a54:	4640      	mov	r0, r8
 8005a56:	47d0      	blx	sl
 8005a58:	3001      	adds	r0, #1
 8005a5a:	d09b      	beq.n	8005994 <_printf_i+0x164>
 8005a5c:	3501      	adds	r5, #1
 8005a5e:	68e3      	ldr	r3, [r4, #12]
 8005a60:	9903      	ldr	r1, [sp, #12]
 8005a62:	1a5b      	subs	r3, r3, r1
 8005a64:	42ab      	cmp	r3, r5
 8005a66:	dcf2      	bgt.n	8005a4e <_printf_i+0x21e>
 8005a68:	e7eb      	b.n	8005a42 <_printf_i+0x212>
 8005a6a:	2500      	movs	r5, #0
 8005a6c:	f104 0619 	add.w	r6, r4, #25
 8005a70:	e7f5      	b.n	8005a5e <_printf_i+0x22e>
 8005a72:	bf00      	nop
 8005a74:	08005d15 	.word	0x08005d15
 8005a78:	08005d26 	.word	0x08005d26

08005a7c <_sbrk_r>:
 8005a7c:	b538      	push	{r3, r4, r5, lr}
 8005a7e:	4d06      	ldr	r5, [pc, #24]	; (8005a98 <_sbrk_r+0x1c>)
 8005a80:	2300      	movs	r3, #0
 8005a82:	4604      	mov	r4, r0
 8005a84:	4608      	mov	r0, r1
 8005a86:	602b      	str	r3, [r5, #0]
 8005a88:	f7fb faf6 	bl	8001078 <_sbrk>
 8005a8c:	1c43      	adds	r3, r0, #1
 8005a8e:	d102      	bne.n	8005a96 <_sbrk_r+0x1a>
 8005a90:	682b      	ldr	r3, [r5, #0]
 8005a92:	b103      	cbz	r3, 8005a96 <_sbrk_r+0x1a>
 8005a94:	6023      	str	r3, [r4, #0]
 8005a96:	bd38      	pop	{r3, r4, r5, pc}
 8005a98:	20000260 	.word	0x20000260

08005a9c <__sread>:
 8005a9c:	b510      	push	{r4, lr}
 8005a9e:	460c      	mov	r4, r1
 8005aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aa4:	f000 f8a0 	bl	8005be8 <_read_r>
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	bfab      	itete	ge
 8005aac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005aae:	89a3      	ldrhlt	r3, [r4, #12]
 8005ab0:	181b      	addge	r3, r3, r0
 8005ab2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ab6:	bfac      	ite	ge
 8005ab8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005aba:	81a3      	strhlt	r3, [r4, #12]
 8005abc:	bd10      	pop	{r4, pc}

08005abe <__swrite>:
 8005abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ac2:	461f      	mov	r7, r3
 8005ac4:	898b      	ldrh	r3, [r1, #12]
 8005ac6:	05db      	lsls	r3, r3, #23
 8005ac8:	4605      	mov	r5, r0
 8005aca:	460c      	mov	r4, r1
 8005acc:	4616      	mov	r6, r2
 8005ace:	d505      	bpl.n	8005adc <__swrite+0x1e>
 8005ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f000 f868 	bl	8005bac <_lseek_r>
 8005adc:	89a3      	ldrh	r3, [r4, #12]
 8005ade:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ae2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ae6:	81a3      	strh	r3, [r4, #12]
 8005ae8:	4632      	mov	r2, r6
 8005aea:	463b      	mov	r3, r7
 8005aec:	4628      	mov	r0, r5
 8005aee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005af2:	f000 b817 	b.w	8005b24 <_write_r>

08005af6 <__sseek>:
 8005af6:	b510      	push	{r4, lr}
 8005af8:	460c      	mov	r4, r1
 8005afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005afe:	f000 f855 	bl	8005bac <_lseek_r>
 8005b02:	1c43      	adds	r3, r0, #1
 8005b04:	89a3      	ldrh	r3, [r4, #12]
 8005b06:	bf15      	itete	ne
 8005b08:	6560      	strne	r0, [r4, #84]	; 0x54
 8005b0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005b0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005b12:	81a3      	strheq	r3, [r4, #12]
 8005b14:	bf18      	it	ne
 8005b16:	81a3      	strhne	r3, [r4, #12]
 8005b18:	bd10      	pop	{r4, pc}

08005b1a <__sclose>:
 8005b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b1e:	f000 b813 	b.w	8005b48 <_close_r>
	...

08005b24 <_write_r>:
 8005b24:	b538      	push	{r3, r4, r5, lr}
 8005b26:	4d07      	ldr	r5, [pc, #28]	; (8005b44 <_write_r+0x20>)
 8005b28:	4604      	mov	r4, r0
 8005b2a:	4608      	mov	r0, r1
 8005b2c:	4611      	mov	r1, r2
 8005b2e:	2200      	movs	r2, #0
 8005b30:	602a      	str	r2, [r5, #0]
 8005b32:	461a      	mov	r2, r3
 8005b34:	f7fb fa4f 	bl	8000fd6 <_write>
 8005b38:	1c43      	adds	r3, r0, #1
 8005b3a:	d102      	bne.n	8005b42 <_write_r+0x1e>
 8005b3c:	682b      	ldr	r3, [r5, #0]
 8005b3e:	b103      	cbz	r3, 8005b42 <_write_r+0x1e>
 8005b40:	6023      	str	r3, [r4, #0]
 8005b42:	bd38      	pop	{r3, r4, r5, pc}
 8005b44:	20000260 	.word	0x20000260

08005b48 <_close_r>:
 8005b48:	b538      	push	{r3, r4, r5, lr}
 8005b4a:	4d06      	ldr	r5, [pc, #24]	; (8005b64 <_close_r+0x1c>)
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	4604      	mov	r4, r0
 8005b50:	4608      	mov	r0, r1
 8005b52:	602b      	str	r3, [r5, #0]
 8005b54:	f7fb fa5b 	bl	800100e <_close>
 8005b58:	1c43      	adds	r3, r0, #1
 8005b5a:	d102      	bne.n	8005b62 <_close_r+0x1a>
 8005b5c:	682b      	ldr	r3, [r5, #0]
 8005b5e:	b103      	cbz	r3, 8005b62 <_close_r+0x1a>
 8005b60:	6023      	str	r3, [r4, #0]
 8005b62:	bd38      	pop	{r3, r4, r5, pc}
 8005b64:	20000260 	.word	0x20000260

08005b68 <_fstat_r>:
 8005b68:	b538      	push	{r3, r4, r5, lr}
 8005b6a:	4d07      	ldr	r5, [pc, #28]	; (8005b88 <_fstat_r+0x20>)
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	4604      	mov	r4, r0
 8005b70:	4608      	mov	r0, r1
 8005b72:	4611      	mov	r1, r2
 8005b74:	602b      	str	r3, [r5, #0]
 8005b76:	f7fb fa56 	bl	8001026 <_fstat>
 8005b7a:	1c43      	adds	r3, r0, #1
 8005b7c:	d102      	bne.n	8005b84 <_fstat_r+0x1c>
 8005b7e:	682b      	ldr	r3, [r5, #0]
 8005b80:	b103      	cbz	r3, 8005b84 <_fstat_r+0x1c>
 8005b82:	6023      	str	r3, [r4, #0]
 8005b84:	bd38      	pop	{r3, r4, r5, pc}
 8005b86:	bf00      	nop
 8005b88:	20000260 	.word	0x20000260

08005b8c <_isatty_r>:
 8005b8c:	b538      	push	{r3, r4, r5, lr}
 8005b8e:	4d06      	ldr	r5, [pc, #24]	; (8005ba8 <_isatty_r+0x1c>)
 8005b90:	2300      	movs	r3, #0
 8005b92:	4604      	mov	r4, r0
 8005b94:	4608      	mov	r0, r1
 8005b96:	602b      	str	r3, [r5, #0]
 8005b98:	f7fb fa55 	bl	8001046 <_isatty>
 8005b9c:	1c43      	adds	r3, r0, #1
 8005b9e:	d102      	bne.n	8005ba6 <_isatty_r+0x1a>
 8005ba0:	682b      	ldr	r3, [r5, #0]
 8005ba2:	b103      	cbz	r3, 8005ba6 <_isatty_r+0x1a>
 8005ba4:	6023      	str	r3, [r4, #0]
 8005ba6:	bd38      	pop	{r3, r4, r5, pc}
 8005ba8:	20000260 	.word	0x20000260

08005bac <_lseek_r>:
 8005bac:	b538      	push	{r3, r4, r5, lr}
 8005bae:	4d07      	ldr	r5, [pc, #28]	; (8005bcc <_lseek_r+0x20>)
 8005bb0:	4604      	mov	r4, r0
 8005bb2:	4608      	mov	r0, r1
 8005bb4:	4611      	mov	r1, r2
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	602a      	str	r2, [r5, #0]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	f7fb fa4e 	bl	800105c <_lseek>
 8005bc0:	1c43      	adds	r3, r0, #1
 8005bc2:	d102      	bne.n	8005bca <_lseek_r+0x1e>
 8005bc4:	682b      	ldr	r3, [r5, #0]
 8005bc6:	b103      	cbz	r3, 8005bca <_lseek_r+0x1e>
 8005bc8:	6023      	str	r3, [r4, #0]
 8005bca:	bd38      	pop	{r3, r4, r5, pc}
 8005bcc:	20000260 	.word	0x20000260

08005bd0 <__malloc_lock>:
 8005bd0:	4801      	ldr	r0, [pc, #4]	; (8005bd8 <__malloc_lock+0x8>)
 8005bd2:	f7ff bb55 	b.w	8005280 <__retarget_lock_acquire_recursive>
 8005bd6:	bf00      	nop
 8005bd8:	20000258 	.word	0x20000258

08005bdc <__malloc_unlock>:
 8005bdc:	4801      	ldr	r0, [pc, #4]	; (8005be4 <__malloc_unlock+0x8>)
 8005bde:	f7ff bb50 	b.w	8005282 <__retarget_lock_release_recursive>
 8005be2:	bf00      	nop
 8005be4:	20000258 	.word	0x20000258

08005be8 <_read_r>:
 8005be8:	b538      	push	{r3, r4, r5, lr}
 8005bea:	4d07      	ldr	r5, [pc, #28]	; (8005c08 <_read_r+0x20>)
 8005bec:	4604      	mov	r4, r0
 8005bee:	4608      	mov	r0, r1
 8005bf0:	4611      	mov	r1, r2
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	602a      	str	r2, [r5, #0]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	f7fb f9d0 	bl	8000f9c <_read>
 8005bfc:	1c43      	adds	r3, r0, #1
 8005bfe:	d102      	bne.n	8005c06 <_read_r+0x1e>
 8005c00:	682b      	ldr	r3, [r5, #0]
 8005c02:	b103      	cbz	r3, 8005c06 <_read_r+0x1e>
 8005c04:	6023      	str	r3, [r4, #0]
 8005c06:	bd38      	pop	{r3, r4, r5, pc}
 8005c08:	20000260 	.word	0x20000260

08005c0c <_init>:
 8005c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c0e:	bf00      	nop
 8005c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c12:	bc08      	pop	{r3}
 8005c14:	469e      	mov	lr, r3
 8005c16:	4770      	bx	lr

08005c18 <_fini>:
 8005c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c1a:	bf00      	nop
 8005c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c1e:	bc08      	pop	{r3}
 8005c20:	469e      	mov	lr, r3
 8005c22:	4770      	bx	lr
