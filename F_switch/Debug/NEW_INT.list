
NEW_INT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005478  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08005608  08005608  00015608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005704  08005704  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08005704  08005704  00015704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800570c  0800570c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800570c  0800570c  0001570c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005710  08005710  00015710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08005714  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000090  080057a4  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  080057a4  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff03  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002134  00000000  00000000  0002ffc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  000320f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a8  00000000  00000000  00032b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000270f5  00000000  00000000  00033510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ccc3  00000000  00000000  0005a605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb42b  00000000  00000000  000672c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001526f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003124  00000000  00000000  00152748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080055f0 	.word	0x080055f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	080055f0 	.word	0x080055f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fd30 	bl	8000fe2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f84f 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f8cf 	bl	8000728 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800058a:	f000 f89d 	bl	80006c8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Transmit(&huart1,(uint8_t*)TxBuffer,strlen(TxBuffer),500);
 800058e:	481e      	ldr	r0, [pc, #120]	; (8000608 <main+0x90>)
 8000590:	f7ff fe1e 	bl	80001d0 <strlen>
 8000594:	4603      	mov	r3, r0
 8000596:	b29a      	uxth	r2, r3
 8000598:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800059c:	491a      	ldr	r1, [pc, #104]	; (8000608 <main+0x90>)
 800059e:	481b      	ldr	r0, [pc, #108]	; (800060c <main+0x94>)
 80005a0:	f002 fc76 	bl	8002e90 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart1,rxData,1);
 80005a4:	2201      	movs	r2, #1
 80005a6:	491a      	ldr	r1, [pc, #104]	; (8000610 <main+0x98>)
 80005a8:	4818      	ldr	r0, [pc, #96]	; (800060c <main+0x94>)
 80005aa:	f002 fd73 	bl	8003094 <HAL_UART_Receive_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  if(newMsg)
 80005ae:	4b19      	ldr	r3, [pc, #100]	; (8000614 <main+0x9c>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d0fb      	beq.n	80005ae <main+0x36>
	     {
		  	 size = strlen(rxBuffer);
 80005b6:	4818      	ldr	r0, [pc, #96]	; (8000618 <main+0xa0>)
 80005b8:	f7ff fe0a 	bl	80001d0 <strlen>
 80005bc:	4603      	mov	r3, r0
 80005be:	b2da      	uxtb	r2, r3
 80005c0:	4b16      	ldr	r3, [pc, #88]	; (800061c <main+0xa4>)
 80005c2:	701a      	strb	r2, [r3, #0]
		  	 printf("size of Rx buffer %d\n", size);
 80005c4:	4b15      	ldr	r3, [pc, #84]	; (800061c <main+0xa4>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	4619      	mov	r1, r3
 80005ca:	4815      	ldr	r0, [pc, #84]	; (8000620 <main+0xa8>)
 80005cc:	f004 f8ba 	bl	8004744 <iprintf>
		  	 /*rxBuffer[size]='\r';
		  	 rxBuffer[size+1]='\n';*/
		    // HAL_UART_Transmit(&huart1,(uint8_t*)rxBuffer,(size+3),500);
		  	HAL_UART_Transmit_IT(&huart1,(uint8_t*)rxBuffer,(size+3));
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <main+0xa4>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	b29b      	uxth	r3, r3
 80005d6:	3303      	adds	r3, #3
 80005d8:	b29b      	uxth	r3, r3
 80005da:	461a      	mov	r2, r3
 80005dc:	490e      	ldr	r1, [pc, #56]	; (8000618 <main+0xa0>)
 80005de:	480b      	ldr	r0, [pc, #44]	; (800060c <main+0x94>)
 80005e0:	f002 fcea 	bl	8002fb8 <HAL_UART_Transmit_IT>

	         for(int i=0;i< BUFFERRX ;i++)
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	e007      	b.n	80005fa <main+0x82>
	         {
	             rxBuffer[i]=0;
 80005ea:	4a0b      	ldr	r2, [pc, #44]	; (8000618 <main+0xa0>)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4413      	add	r3, r2
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]
	         for(int i=0;i< BUFFERRX ;i++)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	3301      	adds	r3, #1
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b13      	cmp	r3, #19
 80005fe:	ddf4      	ble.n	80005ea <main+0x72>
	         }
	         newMsg=0;
 8000600:	4b04      	ldr	r3, [pc, #16]	; (8000614 <main+0x9c>)
 8000602:	2200      	movs	r2, #0
 8000604:	701a      	strb	r2, [r3, #0]
	  if(newMsg)
 8000606:	e7d2      	b.n	80005ae <main+0x36>
 8000608:	20000000 	.word	0x20000000
 800060c:	200000c0 	.word	0x200000c0
 8000610:	200000bc 	.word	0x200000bc
 8000614:	200000ac 	.word	0x200000ac
 8000618:	20000144 	.word	0x20000144
 800061c:	200000ae 	.word	0x200000ae
 8000620:	08005608 	.word	0x08005608

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b096      	sub	sp, #88	; 0x58
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	2244      	movs	r2, #68	; 0x44
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f004 f87e 	bl	8004734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	463b      	mov	r3, r7
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000646:	f44f 7000 	mov.w	r0, #512	; 0x200
 800064a:	f001 f8c3 	bl	80017d4 <HAL_PWREx_ControlVoltageScaling>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000654:	f000 fad0 	bl	8000bf8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000658:	2310      	movs	r3, #16
 800065a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000664:	2360      	movs	r3, #96	; 0x60
 8000666:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000668:	2302      	movs	r3, #2
 800066a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800066c:	2301      	movs	r3, #1
 800066e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000670:	2301      	movs	r3, #1
 8000672:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000674:	2328      	movs	r3, #40	; 0x28
 8000676:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000678:	2307      	movs	r3, #7
 800067a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4618      	mov	r0, r3
 800068a:	f001 f8f9 	bl	8001880 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000694:	f000 fab0 	bl	8000bf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	2303      	movs	r3, #3
 800069e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ac:	463b      	mov	r3, r7
 80006ae:	2104      	movs	r1, #4
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 fcbf 	bl	8002034 <HAL_RCC_ClockConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006bc:	f000 fa9c 	bl	8000bf8 <Error_Handler>
  }
}
 80006c0:	bf00      	nop
 80006c2:	3758      	adds	r7, #88	; 0x58
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006cc:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_USART1_UART_Init+0x58>)
 80006ce:	4a15      	ldr	r2, [pc, #84]	; (8000724 <MX_USART1_UART_Init+0x5c>)
 80006d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006d2:	4b13      	ldr	r3, [pc, #76]	; (8000720 <MX_USART1_UART_Init+0x58>)
 80006d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_USART1_UART_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_USART1_UART_Init+0x58>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_USART1_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_USART1_UART_Init+0x58>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_USART1_UART_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_USART1_UART_Init+0x58>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_USART1_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_USART1_UART_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_USART1_UART_Init+0x58>)
 800070c:	f002 fb72 	bl	8002df4 <HAL_UART_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000716:	f000 fa6f 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200000c0 	.word	0x200000c0
 8000724:	40013800 	.word	0x40013800

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	; 0x28
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800073e:	4bbc      	ldr	r3, [pc, #752]	; (8000a30 <MX_GPIO_Init+0x308>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	4abb      	ldr	r2, [pc, #748]	; (8000a30 <MX_GPIO_Init+0x308>)
 8000744:	f043 0310 	orr.w	r3, r3, #16
 8000748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074a:	4bb9      	ldr	r3, [pc, #740]	; (8000a30 <MX_GPIO_Init+0x308>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	f003 0310 	and.w	r3, r3, #16
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	4bb6      	ldr	r3, [pc, #728]	; (8000a30 <MX_GPIO_Init+0x308>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	4ab5      	ldr	r2, [pc, #724]	; (8000a30 <MX_GPIO_Init+0x308>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000762:	4bb3      	ldr	r3, [pc, #716]	; (8000a30 <MX_GPIO_Init+0x308>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	4bb0      	ldr	r3, [pc, #704]	; (8000a30 <MX_GPIO_Init+0x308>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	4aaf      	ldr	r2, [pc, #700]	; (8000a30 <MX_GPIO_Init+0x308>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077a:	4bad      	ldr	r3, [pc, #692]	; (8000a30 <MX_GPIO_Init+0x308>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	4baa      	ldr	r3, [pc, #680]	; (8000a30 <MX_GPIO_Init+0x308>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	4aa9      	ldr	r2, [pc, #676]	; (8000a30 <MX_GPIO_Init+0x308>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000792:	4ba7      	ldr	r3, [pc, #668]	; (8000a30 <MX_GPIO_Init+0x308>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079e:	4ba4      	ldr	r3, [pc, #656]	; (8000a30 <MX_GPIO_Init+0x308>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	4aa3      	ldr	r2, [pc, #652]	; (8000a30 <MX_GPIO_Init+0x308>)
 80007a4:	f043 0308 	orr.w	r3, r3, #8
 80007a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007aa:	4ba1      	ldr	r3, [pc, #644]	; (8000a30 <MX_GPIO_Init+0x308>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	f003 0308 	and.w	r3, r3, #8
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 718a 	mov.w	r1, #276	; 0x114
 80007bc:	489d      	ldr	r0, [pc, #628]	; (8000a34 <MX_GPIO_Init+0x30c>)
 80007be:	f000 ffbf 	bl	8001740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	f248 1104 	movw	r1, #33028	; 0x8104
 80007c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007cc:	f000 ffb8 	bl	8001740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80007d0:	2200      	movs	r2, #0
 80007d2:	f24f 0114 	movw	r1, #61460	; 0xf014
 80007d6:	4898      	ldr	r0, [pc, #608]	; (8000a38 <MX_GPIO_Init+0x310>)
 80007d8:	f000 ffb2 	bl	8001740 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	f241 0181 	movw	r1, #4225	; 0x1081
 80007e2:	4896      	ldr	r0, [pc, #600]	; (8000a3c <MX_GPIO_Init+0x314>)
 80007e4:	f000 ffac 	bl	8001740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ee:	4893      	ldr	r0, [pc, #588]	; (8000a3c <MX_GPIO_Init+0x314>)
 80007f0:	f000 ffa6 	bl	8001740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80007fa:	4891      	ldr	r0, [pc, #580]	; (8000a40 <MX_GPIO_Init+0x318>)
 80007fc:	f000 ffa0 	bl	8001740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000800:	2201      	movs	r2, #1
 8000802:	2120      	movs	r1, #32
 8000804:	488c      	ldr	r0, [pc, #560]	; (8000a38 <MX_GPIO_Init+0x310>)
 8000806:	f000 ff9b 	bl	8001740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800080a:	2201      	movs	r2, #1
 800080c:	2101      	movs	r1, #1
 800080e:	4889      	ldr	r0, [pc, #548]	; (8000a34 <MX_GPIO_Init+0x30c>)
 8000810:	f000 ff96 	bl	8001740 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000814:	f240 1315 	movw	r3, #277	; 0x115
 8000818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081a:	2301      	movs	r3, #1
 800081c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	4619      	mov	r1, r3
 800082c:	4881      	ldr	r0, [pc, #516]	; (8000a34 <MX_GPIO_Init+0x30c>)
 800082e:	f000 fddd 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000832:	236a      	movs	r3, #106	; 0x6a
 8000834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000836:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800083a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4619      	mov	r1, r3
 8000846:	487b      	ldr	r0, [pc, #492]	; (8000a34 <MX_GPIO_Init+0x30c>)
 8000848:	f000 fdd0 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 800084c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000852:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	4877      	ldr	r0, [pc, #476]	; (8000a40 <MX_GPIO_Init+0x318>)
 8000864:	f000 fdc2 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000868:	233f      	movs	r3, #63	; 0x3f
 800086a:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800086c:	230b      	movs	r3, #11
 800086e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4619      	mov	r1, r3
 800087a:	4871      	ldr	r0, [pc, #452]	; (8000a40 <MX_GPIO_Init+0x318>)
 800087c:	f000 fdb6 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000880:	2303      	movs	r3, #3
 8000882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088c:	2303      	movs	r3, #3
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000890:	2308      	movs	r3, #8
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4619      	mov	r1, r3
 800089a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089e:	f000 fda5 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80008a2:	f248 1304 	movw	r3, #33028	; 0x8104
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008be:	f000 fd95 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80008c2:	2308      	movs	r3, #8
 80008c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80008d2:	2301      	movs	r3, #1
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e0:	f000 fd84 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80008e4:	2310      	movs	r3, #16
 80008e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80008e8:	230b      	movs	r3, #11
 80008ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4619      	mov	r1, r3
 80008f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fa:	f000 fd77 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80008fe:	23e0      	movs	r3, #224	; 0xe0
 8000900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090a:	2303      	movs	r3, #3
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800090e:	2305      	movs	r3, #5
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4619      	mov	r1, r3
 8000918:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091c:	f000 fd66 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000920:	2301      	movs	r3, #1
 8000922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000924:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4619      	mov	r1, r3
 8000934:	4840      	ldr	r0, [pc, #256]	; (8000a38 <MX_GPIO_Init+0x310>)
 8000936:	f000 fd59 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800093a:	2302      	movs	r3, #2
 800093c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800093e:	230b      	movs	r3, #11
 8000940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4619      	mov	r1, r3
 800094c:	483a      	ldr	r0, [pc, #232]	; (8000a38 <MX_GPIO_Init+0x310>)
 800094e:	f000 fd4d 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000952:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000956:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	4833      	ldr	r0, [pc, #204]	; (8000a38 <MX_GPIO_Init+0x310>)
 800096c:	f000 fd3e 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000970:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000982:	2306      	movs	r3, #6
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4619      	mov	r1, r3
 800098c:	4829      	ldr	r0, [pc, #164]	; (8000a34 <MX_GPIO_Init+0x30c>)
 800098e:	f000 fd2d 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000992:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000996:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000998:	2302      	movs	r3, #2
 800099a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a0:	2303      	movs	r3, #3
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80009a4:	230a      	movs	r3, #10
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4619      	mov	r1, r3
 80009ae:	4821      	ldr	r0, [pc, #132]	; (8000a34 <MX_GPIO_Init+0x30c>)
 80009b0:	f000 fd1c 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80009b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ba:	2312      	movs	r3, #18
 80009bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c2:	2303      	movs	r3, #3
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80009c6:	2304      	movs	r3, #4
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	4619      	mov	r1, r3
 80009d0:	4819      	ldr	r0, [pc, #100]	; (8000a38 <MX_GPIO_Init+0x310>)
 80009d2:	f000 fd0b 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80009d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e4:	2303      	movs	r3, #3
 80009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009e8:	2307      	movs	r3, #7
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4619      	mov	r1, r3
 80009f2:	4812      	ldr	r0, [pc, #72]	; (8000a3c <MX_GPIO_Init+0x314>)
 80009f4:	f000 fcfa 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80009f8:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80009fc:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	480b      	ldr	r0, [pc, #44]	; (8000a3c <MX_GPIO_Init+0x314>)
 8000a10:	f000 fcec 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000a14:	f243 0381 	movw	r3, #12417	; 0x3081
 8000a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	e00a      	b.n	8000a44 <MX_GPIO_Init+0x31c>
 8000a2e:	bf00      	nop
 8000a30:	40021000 	.word	0x40021000
 8000a34:	48001000 	.word	0x48001000
 8000a38:	48000400 	.word	0x48000400
 8000a3c:	48000c00 	.word	0x48000c00
 8000a40:	48000800 	.word	0x48000800
 8000a44:	484a      	ldr	r0, [pc, #296]	; (8000b70 <MX_GPIO_Init+0x448>)
 8000a46:	f000 fcd1 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000a4a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	4844      	ldr	r0, [pc, #272]	; (8000b74 <MX_GPIO_Init+0x44c>)
 8000a64:	f000 fcc2 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000a68:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	483d      	ldr	r0, [pc, #244]	; (8000b74 <MX_GPIO_Init+0x44c>)
 8000a80:	f000 fcb4 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000a84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9c:	f000 fca6 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000aa0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ab2:	230a      	movs	r3, #10
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac0:	f000 fc94 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000ac4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ac8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ad6:	2306      	movs	r3, #6
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4824      	ldr	r0, [pc, #144]	; (8000b74 <MX_GPIO_Init+0x44c>)
 8000ae2:	f000 fc83 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af2:	2303      	movs	r3, #3
 8000af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000af6:	2305      	movs	r3, #5
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	481b      	ldr	r0, [pc, #108]	; (8000b70 <MX_GPIO_Init+0x448>)
 8000b02:	f000 fc73 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000b06:	2378      	movs	r3, #120	; 0x78
 8000b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b12:	2303      	movs	r3, #3
 8000b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b16:	2307      	movs	r3, #7
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4813      	ldr	r0, [pc, #76]	; (8000b70 <MX_GPIO_Init+0x448>)
 8000b22:	f000 fc63 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000b26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b2c:	2312      	movs	r3, #18
 8000b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b38:	2304      	movs	r3, #4
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	480d      	ldr	r0, [pc, #52]	; (8000b78 <MX_GPIO_Init+0x450>)
 8000b44:	f000 fc52 	bl	80013ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	2017      	movs	r0, #23
 8000b4e:	f000 fb98 	bl	8001282 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b52:	2017      	movs	r0, #23
 8000b54:	f000 fbb1 	bl	80012ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2028      	movs	r0, #40	; 0x28
 8000b5e:	f000 fb90 	bl	8001282 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b62:	2028      	movs	r0, #40	; 0x28
 8000b64:	f000 fba9 	bl	80012ba <HAL_NVIC_EnableIRQ>

}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	; 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	48000c00 	.word	0x48000c00
 8000b74:	48000800 	.word	0x48000800
 8000b78:	48000400 	.word	0x48000400

08000b7c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
    if(huart -> Instance == USART1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a14      	ldr	r2, [pc, #80]	; (8000bdc <HAL_UART_RxCpltCallback+0x60>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d122      	bne.n	8000bd4 <HAL_UART_RxCpltCallback+0x58>
    {
    	//if((rxData[0]!='\r')||(rxData[0]!='\e'))
    	//if(rxData[0]!='\e')
    	//if(rxData[0]!='\r')
    	//if(rxData[0]!='[')
    	printf("%d\n",rxData[0]);
 8000b8e:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <HAL_UART_RxCpltCallback+0x64>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	4619      	mov	r1, r3
 8000b94:	4813      	ldr	r0, [pc, #76]	; (8000be4 <HAL_UART_RxCpltCallback+0x68>)
 8000b96:	f003 fdd5 	bl	8004744 <iprintf>
    	//if(rxData[0]!='\e')
    	if(rxData[0]!='\r')
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <HAL_UART_RxCpltCallback+0x64>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b0d      	cmp	r3, #13
 8000ba0:	d00d      	beq.n	8000bbe <HAL_UART_RxCpltCallback+0x42>
    	{
            rxBuffer[rxIndex]=rxData[0];
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <HAL_UART_RxCpltCallback+0x6c>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <HAL_UART_RxCpltCallback+0x64>)
 8000baa:	7819      	ldrb	r1, [r3, #0]
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <HAL_UART_RxCpltCallback+0x70>)
 8000bae:	5499      	strb	r1, [r3, r2]
            rxIndex++;
 8000bb0:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <HAL_UART_RxCpltCallback+0x6c>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <HAL_UART_RxCpltCallback+0x6c>)
 8000bba:	701a      	strb	r2, [r3, #0]
 8000bbc:	e005      	b.n	8000bca <HAL_UART_RxCpltCallback+0x4e>

        }
        else
        {
            newMsg=1;
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <HAL_UART_RxCpltCallback+0x74>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	701a      	strb	r2, [r3, #0]
            rxIndex=0;
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <HAL_UART_RxCpltCallback+0x6c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	701a      	strb	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(&huart1 ,rxData,1);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	4904      	ldr	r1, [pc, #16]	; (8000be0 <HAL_UART_RxCpltCallback+0x64>)
 8000bce:	4809      	ldr	r0, [pc, #36]	; (8000bf4 <HAL_UART_RxCpltCallback+0x78>)
 8000bd0:	f002 fa60 	bl	8003094 <HAL_UART_Receive_IT>
    }
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40013800 	.word	0x40013800
 8000be0:	200000bc 	.word	0x200000bc
 8000be4:	08005620 	.word	0x08005620
 8000be8:	200000ad 	.word	0x200000ad
 8000bec:	20000144 	.word	0x20000144
 8000bf0:	200000ac 	.word	0x200000ac
 8000bf4:	200000c0 	.word	0x200000c0

08000bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <Error_Handler+0x8>
	...

08000c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <HAL_MspInit+0x44>)
 8000c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c0e:	4a0e      	ldr	r2, [pc, #56]	; (8000c48 <HAL_MspInit+0x44>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6613      	str	r3, [r2, #96]	; 0x60
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <HAL_MspInit+0x44>)
 8000c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <HAL_MspInit+0x44>)
 8000c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c26:	4a08      	ldr	r2, [pc, #32]	; (8000c48 <HAL_MspInit+0x44>)
 8000c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_MspInit+0x44>)
 8000c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40021000 	.word	0x40021000

08000c4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b0ac      	sub	sp, #176	; 0xb0
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2288      	movs	r2, #136	; 0x88
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f003 fd61 	bl	8004734 <memset>
  if(huart->Instance==USART1)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a25      	ldr	r2, [pc, #148]	; (8000d0c <HAL_UART_MspInit+0xc0>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d142      	bne.n	8000d02 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c80:	2300      	movs	r3, #0
 8000c82:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f001 fbf7 	bl	800247c <HAL_RCCEx_PeriphCLKConfig>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c94:	f7ff ffb0 	bl	8000bf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c98:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <HAL_UART_MspInit+0xc4>)
 8000c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c9c:	4a1c      	ldr	r2, [pc, #112]	; (8000d10 <HAL_UART_MspInit+0xc4>)
 8000c9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca2:	6613      	str	r3, [r2, #96]	; 0x60
 8000ca4:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <HAL_UART_MspInit+0xc4>)
 8000ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb0:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <HAL_UART_MspInit+0xc4>)
 8000cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb4:	4a16      	ldr	r2, [pc, #88]	; (8000d10 <HAL_UART_MspInit+0xc4>)
 8000cb6:	f043 0302 	orr.w	r3, r3, #2
 8000cba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cbc:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <HAL_UART_MspInit+0xc4>)
 8000cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc0:	f003 0302 	and.w	r3, r3, #2
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000cc8:	23c0      	movs	r3, #192	; 0xc0
 8000cca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ce0:	2307      	movs	r3, #7
 8000ce2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cea:	4619      	mov	r1, r3
 8000cec:	4809      	ldr	r0, [pc, #36]	; (8000d14 <HAL_UART_MspInit+0xc8>)
 8000cee:	f000 fb7d 	bl	80013ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	2025      	movs	r0, #37	; 0x25
 8000cf8:	f000 fac3 	bl	8001282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cfc:	2025      	movs	r0, #37	; 0x25
 8000cfe:	f000 fadc 	bl	80012ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d02:	bf00      	nop
 8000d04:	37b0      	adds	r7, #176	; 0xb0
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40013800 	.word	0x40013800
 8000d10:	40021000 	.word	0x40021000
 8000d14:	48000400 	.word	0x48000400

08000d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <NMI_Handler+0x4>

08000d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <HardFault_Handler+0x4>

08000d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <MemManage_Handler+0x4>

08000d2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <BusFault_Handler+0x4>

08000d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <UsageFault_Handler+0x4>

08000d36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d64:	f000 f992 	bl	800108c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000d70:	2020      	movs	r0, #32
 8000d72:	f000 fcfd 	bl	8001770 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000d76:	2040      	movs	r0, #64	; 0x40
 8000d78:	f000 fcfa 	bl	8001770 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000d7c:	2080      	movs	r0, #128	; 0x80
 8000d7e:	f000 fcf7 	bl	8001770 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000d82:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000d86:	f000 fcf3 	bl	8001770 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d94:	4802      	ldr	r0, [pc, #8]	; (8000da0 <USART1_IRQHandler+0x10>)
 8000d96:	f002 f9d3 	bl	8003140 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200000c0 	.word	0x200000c0

08000da4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000da8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000dac:	f000 fce0 	bl	8001770 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000db0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000db4:	f000 fcdc 	bl	8001770 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000db8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000dbc:	f000 fcd8 	bl	8001770 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000dc0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000dc4:	f000 fcd4 	bl	8001770 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000dc8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000dcc:	f000 fcd0 	bl	8001770 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <ITM_SendChar+0x48>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a0e      	ldr	r2, [pc, #56]	; (8000e1c <ITM_SendChar+0x48>)
 8000de4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000de8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000dea:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <ITM_SendChar+0x4c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a0c      	ldr	r2, [pc, #48]	; (8000e20 <ITM_SendChar+0x4c>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000df6:	bf00      	nop
 8000df8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d0f8      	beq.n	8000df8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000e06:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	6013      	str	r3, [r2, #0]
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000edfc 	.word	0xe000edfc
 8000e20:	e0000e00 	.word	0xe0000e00

08000e24 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	e00a      	b.n	8000e4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e36:	f3af 8000 	nop.w
 8000e3a:	4601      	mov	r1, r0
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	1c5a      	adds	r2, r3, #1
 8000e40:	60ba      	str	r2, [r7, #8]
 8000e42:	b2ca      	uxtb	r2, r1
 8000e44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	697a      	ldr	r2, [r7, #20]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	dbf0      	blt.n	8000e36 <_read+0x12>
	}

return len;
 8000e54:	687b      	ldr	r3, [r7, #4]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b086      	sub	sp, #24
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	60f8      	str	r0, [r7, #12]
 8000e66:	60b9      	str	r1, [r7, #8]
 8000e68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	e009      	b.n	8000e84 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	1c5a      	adds	r2, r3, #1
 8000e74:	60ba      	str	r2, [r7, #8]
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ffab 	bl	8000dd4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	3301      	adds	r3, #1
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	dbf1      	blt.n	8000e70 <_write+0x12>
	}
	return len;
 8000e8c:	687b      	ldr	r3, [r7, #4]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <_close>:

int _close(int file)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
	return -1;
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ebe:	605a      	str	r2, [r3, #4]
	return 0;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <_isatty>:

int _isatty(int file)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
	return 1;
 8000ed6:	2301      	movs	r3, #1
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
	return 0;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f08:	4a14      	ldr	r2, [pc, #80]	; (8000f5c <_sbrk+0x5c>)
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <_sbrk+0x60>)
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <_sbrk+0x64>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d102      	bne.n	8000f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <_sbrk+0x64>)
 8000f1e:	4a12      	ldr	r2, [pc, #72]	; (8000f68 <_sbrk+0x68>)
 8000f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <_sbrk+0x64>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d207      	bcs.n	8000f40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f30:	f003 fbd6 	bl	80046e0 <__errno>
 8000f34:	4603      	mov	r3, r0
 8000f36:	220c      	movs	r2, #12
 8000f38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3e:	e009      	b.n	8000f54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <_sbrk+0x64>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f46:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <_sbrk+0x64>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <_sbrk+0x64>)
 8000f50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f52:	68fb      	ldr	r3, [r7, #12]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20018000 	.word	0x20018000
 8000f60:	00000400 	.word	0x00000400
 8000f64:	200000b0 	.word	0x200000b0
 8000f68:	20000170 	.word	0x20000170

08000f6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <SystemInit+0x20>)
 8000f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f76:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <SystemInit+0x20>)
 8000f78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fc8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f94:	f7ff ffea 	bl	8000f6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f98:	480c      	ldr	r0, [pc, #48]	; (8000fcc <LoopForever+0x6>)
  ldr r1, =_edata
 8000f9a:	490d      	ldr	r1, [pc, #52]	; (8000fd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	; (8000fd4 <LoopForever+0xe>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa0:	e002      	b.n	8000fa8 <LoopCopyDataInit>

08000fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa6:	3304      	adds	r3, #4

08000fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fac:	d3f9      	bcc.n	8000fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fae:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fb0:	4c0a      	ldr	r4, [pc, #40]	; (8000fdc <LoopForever+0x16>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb4:	e001      	b.n	8000fba <LoopFillZerobss>

08000fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb8:	3204      	adds	r2, #4

08000fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fbc:	d3fb      	bcc.n	8000fb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fbe:	f003 fb95 	bl	80046ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fc2:	f7ff fad9 	bl	8000578 <main>

08000fc6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fc6:	e7fe      	b.n	8000fc6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fc8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000fd4:	08005714 	.word	0x08005714
  ldr r2, =_sbss
 8000fd8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000fdc:	2000016c 	.word	0x2000016c

08000fe0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fe0:	e7fe      	b.n	8000fe0 <ADC1_2_IRQHandler>

08000fe2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fec:	2003      	movs	r0, #3
 8000fee:	f000 f93d 	bl	800126c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f000 f80e 	bl	8001014 <HAL_InitTick>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d002      	beq.n	8001004 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	71fb      	strb	r3, [r7, #7]
 8001002:	e001      	b.n	8001008 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001004:	f7ff fdfe 	bl	8000c04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001008:	79fb      	ldrb	r3, [r7, #7]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800101c:	2300      	movs	r3, #0
 800101e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001020:	4b17      	ldr	r3, [pc, #92]	; (8001080 <HAL_InitTick+0x6c>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d023      	beq.n	8001070 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001028:	4b16      	ldr	r3, [pc, #88]	; (8001084 <HAL_InitTick+0x70>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b14      	ldr	r3, [pc, #80]	; (8001080 <HAL_InitTick+0x6c>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4619      	mov	r1, r3
 8001032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001036:	fbb3 f3f1 	udiv	r3, r3, r1
 800103a:	fbb2 f3f3 	udiv	r3, r2, r3
 800103e:	4618      	mov	r0, r3
 8001040:	f000 f949 	bl	80012d6 <HAL_SYSTICK_Config>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d10f      	bne.n	800106a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b0f      	cmp	r3, #15
 800104e:	d809      	bhi.n	8001064 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001050:	2200      	movs	r2, #0
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	f04f 30ff 	mov.w	r0, #4294967295
 8001058:	f000 f913 	bl	8001282 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800105c:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <HAL_InitTick+0x74>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6013      	str	r3, [r2, #0]
 8001062:	e007      	b.n	8001074 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	e004      	b.n	8001074 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	73fb      	strb	r3, [r7, #15]
 800106e:	e001      	b.n	8001074 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001074:	7bfb      	ldrb	r3, [r7, #15]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000028 	.word	0x20000028
 8001084:	20000020 	.word	0x20000020
 8001088:	20000024 	.word	0x20000024

0800108c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_IncTick+0x20>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_IncTick+0x24>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4413      	add	r3, r2
 800109c:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <HAL_IncTick+0x24>)
 800109e:	6013      	str	r3, [r2, #0]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000028 	.word	0x20000028
 80010b0:	20000158 	.word	0x20000158

080010b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return uwTick;
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <HAL_GetTick+0x14>)
 80010ba:	681b      	ldr	r3, [r3, #0]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	20000158 	.word	0x20000158

080010cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e8:	4013      	ands	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fe:	4a04      	ldr	r2, [pc, #16]	; (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	60d3      	str	r3, [r2, #12]
}
 8001104:	bf00      	nop
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <__NVIC_GetPriorityGrouping+0x18>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	f003 0307 	and.w	r3, r3, #7
}
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	2b00      	cmp	r3, #0
 8001140:	db0b      	blt.n	800115a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	f003 021f 	and.w	r2, r3, #31
 8001148:	4907      	ldr	r1, [pc, #28]	; (8001168 <__NVIC_EnableIRQ+0x38>)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	095b      	lsrs	r3, r3, #5
 8001150:	2001      	movs	r0, #1
 8001152:	fa00 f202 	lsl.w	r2, r0, r2
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000e100 	.word	0xe000e100

0800116c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117c:	2b00      	cmp	r3, #0
 800117e:	db0a      	blt.n	8001196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	490c      	ldr	r1, [pc, #48]	; (80011b8 <__NVIC_SetPriority+0x4c>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	0112      	lsls	r2, r2, #4
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	440b      	add	r3, r1
 8001190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001194:	e00a      	b.n	80011ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4908      	ldr	r1, [pc, #32]	; (80011bc <__NVIC_SetPriority+0x50>)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	3b04      	subs	r3, #4
 80011a4:	0112      	lsls	r2, r2, #4
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	440b      	add	r3, r1
 80011aa:	761a      	strb	r2, [r3, #24]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000e100 	.word	0xe000e100
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b089      	sub	sp, #36	; 0x24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f1c3 0307 	rsb	r3, r3, #7
 80011da:	2b04      	cmp	r3, #4
 80011dc:	bf28      	it	cs
 80011de:	2304      	movcs	r3, #4
 80011e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3304      	adds	r3, #4
 80011e6:	2b06      	cmp	r3, #6
 80011e8:	d902      	bls.n	80011f0 <NVIC_EncodePriority+0x30>
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3b03      	subs	r3, #3
 80011ee:	e000      	b.n	80011f2 <NVIC_EncodePriority+0x32>
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	f04f 32ff 	mov.w	r2, #4294967295
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43da      	mvns	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	401a      	ands	r2, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001208:	f04f 31ff 	mov.w	r1, #4294967295
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	43d9      	mvns	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	4313      	orrs	r3, r2
         );
}
 800121a:	4618      	mov	r0, r3
 800121c:	3724      	adds	r7, #36	; 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001238:	d301      	bcc.n	800123e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123a:	2301      	movs	r3, #1
 800123c:	e00f      	b.n	800125e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123e:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <SysTick_Config+0x40>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001246:	210f      	movs	r1, #15
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f7ff ff8e 	bl	800116c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <SysTick_Config+0x40>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001256:	4b04      	ldr	r3, [pc, #16]	; (8001268 <SysTick_Config+0x40>)
 8001258:	2207      	movs	r2, #7
 800125a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	e000e010 	.word	0xe000e010

0800126c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff29 	bl	80010cc <__NVIC_SetPriorityGrouping>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001294:	f7ff ff3e 	bl	8001114 <__NVIC_GetPriorityGrouping>
 8001298:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	6978      	ldr	r0, [r7, #20]
 80012a0:	f7ff ff8e 	bl	80011c0 <NVIC_EncodePriority>
 80012a4:	4602      	mov	r2, r0
 80012a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff5d 	bl	800116c <__NVIC_SetPriority>
}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff31 	bl	8001130 <__NVIC_EnableIRQ>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff ffa2 	bl	8001228 <SysTick_Config>
 80012e4:	4603      	mov	r3, r0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b085      	sub	sp, #20
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d008      	beq.n	8001318 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2204      	movs	r2, #4
 800130a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e022      	b.n	800135e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 020e 	bic.w	r2, r2, #14
 8001326:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 0201 	bic.w	r2, r2, #1
 8001336:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133c:	f003 021c 	and.w	r2, r3, #28
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001344:	2101      	movs	r1, #1
 8001346:	fa01 f202 	lsl.w	r2, r1, r2
 800134a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800135c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800135e:	4618      	mov	r0, r3
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b084      	sub	sp, #16
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001372:	2300      	movs	r3, #0
 8001374:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d005      	beq.n	800138e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2204      	movs	r2, #4
 8001386:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	73fb      	strb	r3, [r7, #15]
 800138c:	e029      	b.n	80013e2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f022 020e 	bic.w	r2, r2, #14
 800139c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f022 0201 	bic.w	r2, r2, #1
 80013ac:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	f003 021c 	and.w	r2, r3, #28
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	2101      	movs	r1, #1
 80013bc:	fa01 f202 	lsl.w	r2, r1, r2
 80013c0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2201      	movs	r2, #1
 80013c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	4798      	blx	r3
    }
  }
  return status;
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b087      	sub	sp, #28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013fa:	e17f      	b.n	80016fc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	2101      	movs	r1, #1
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	fa01 f303 	lsl.w	r3, r1, r3
 8001408:	4013      	ands	r3, r2
 800140a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 8171 	beq.w	80016f6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	2b01      	cmp	r3, #1
 800141e:	d005      	beq.n	800142c <HAL_GPIO_Init+0x40>
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d130      	bne.n	800148e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	2203      	movs	r2, #3
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4013      	ands	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	68da      	ldr	r2, [r3, #12]
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4313      	orrs	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001462:	2201      	movs	r2, #1
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	091b      	lsrs	r3, r3, #4
 8001478:	f003 0201 	and.w	r2, r3, #1
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	2b03      	cmp	r3, #3
 8001498:	d118      	bne.n	80014cc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80014a0:	2201      	movs	r2, #1
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4013      	ands	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	08db      	lsrs	r3, r3, #3
 80014b6:	f003 0201 	and.w	r2, r3, #1
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	d017      	beq.n	8001508 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	2203      	movs	r2, #3
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4313      	orrs	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d123      	bne.n	800155c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	08da      	lsrs	r2, r3, #3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3208      	adds	r2, #8
 800151c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001520:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	220f      	movs	r2, #15
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4013      	ands	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	691a      	ldr	r2, [r3, #16]
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	4313      	orrs	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	08da      	lsrs	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3208      	adds	r2, #8
 8001556:	6939      	ldr	r1, [r7, #16]
 8001558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	2203      	movs	r2, #3
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4013      	ands	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0203 	and.w	r2, r3, #3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80ac 	beq.w	80016f6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159e:	4b5f      	ldr	r3, [pc, #380]	; (800171c <HAL_GPIO_Init+0x330>)
 80015a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a2:	4a5e      	ldr	r2, [pc, #376]	; (800171c <HAL_GPIO_Init+0x330>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6613      	str	r3, [r2, #96]	; 0x60
 80015aa:	4b5c      	ldr	r3, [pc, #368]	; (800171c <HAL_GPIO_Init+0x330>)
 80015ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015b6:	4a5a      	ldr	r2, [pc, #360]	; (8001720 <HAL_GPIO_Init+0x334>)
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	089b      	lsrs	r3, r3, #2
 80015bc:	3302      	adds	r3, #2
 80015be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	220f      	movs	r2, #15
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	4013      	ands	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015e0:	d025      	beq.n	800162e <HAL_GPIO_Init+0x242>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a4f      	ldr	r2, [pc, #316]	; (8001724 <HAL_GPIO_Init+0x338>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d01f      	beq.n	800162a <HAL_GPIO_Init+0x23e>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a4e      	ldr	r2, [pc, #312]	; (8001728 <HAL_GPIO_Init+0x33c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d019      	beq.n	8001626 <HAL_GPIO_Init+0x23a>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a4d      	ldr	r2, [pc, #308]	; (800172c <HAL_GPIO_Init+0x340>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d013      	beq.n	8001622 <HAL_GPIO_Init+0x236>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a4c      	ldr	r2, [pc, #304]	; (8001730 <HAL_GPIO_Init+0x344>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d00d      	beq.n	800161e <HAL_GPIO_Init+0x232>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a4b      	ldr	r2, [pc, #300]	; (8001734 <HAL_GPIO_Init+0x348>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d007      	beq.n	800161a <HAL_GPIO_Init+0x22e>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a4a      	ldr	r2, [pc, #296]	; (8001738 <HAL_GPIO_Init+0x34c>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d101      	bne.n	8001616 <HAL_GPIO_Init+0x22a>
 8001612:	2306      	movs	r3, #6
 8001614:	e00c      	b.n	8001630 <HAL_GPIO_Init+0x244>
 8001616:	2307      	movs	r3, #7
 8001618:	e00a      	b.n	8001630 <HAL_GPIO_Init+0x244>
 800161a:	2305      	movs	r3, #5
 800161c:	e008      	b.n	8001630 <HAL_GPIO_Init+0x244>
 800161e:	2304      	movs	r3, #4
 8001620:	e006      	b.n	8001630 <HAL_GPIO_Init+0x244>
 8001622:	2303      	movs	r3, #3
 8001624:	e004      	b.n	8001630 <HAL_GPIO_Init+0x244>
 8001626:	2302      	movs	r3, #2
 8001628:	e002      	b.n	8001630 <HAL_GPIO_Init+0x244>
 800162a:	2301      	movs	r3, #1
 800162c:	e000      	b.n	8001630 <HAL_GPIO_Init+0x244>
 800162e:	2300      	movs	r3, #0
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	f002 0203 	and.w	r2, r2, #3
 8001636:	0092      	lsls	r2, r2, #2
 8001638:	4093      	lsls	r3, r2
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001640:	4937      	ldr	r1, [pc, #220]	; (8001720 <HAL_GPIO_Init+0x334>)
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	089b      	lsrs	r3, r3, #2
 8001646:	3302      	adds	r3, #2
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800164e:	4b3b      	ldr	r3, [pc, #236]	; (800173c <HAL_GPIO_Init+0x350>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	43db      	mvns	r3, r3
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4313      	orrs	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001672:	4a32      	ldr	r2, [pc, #200]	; (800173c <HAL_GPIO_Init+0x350>)
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001678:	4b30      	ldr	r3, [pc, #192]	; (800173c <HAL_GPIO_Init+0x350>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	43db      	mvns	r3, r3
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4013      	ands	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	4313      	orrs	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800169c:	4a27      	ldr	r2, [pc, #156]	; (800173c <HAL_GPIO_Init+0x350>)
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016a2:	4b26      	ldr	r3, [pc, #152]	; (800173c <HAL_GPIO_Init+0x350>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	43db      	mvns	r3, r3
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4013      	ands	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016c6:	4a1d      	ldr	r2, [pc, #116]	; (800173c <HAL_GPIO_Init+0x350>)
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <HAL_GPIO_Init+0x350>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	43db      	mvns	r3, r3
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4013      	ands	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d003      	beq.n	80016f0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016f0:	4a12      	ldr	r2, [pc, #72]	; (800173c <HAL_GPIO_Init+0x350>)
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	3301      	adds	r3, #1
 80016fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	fa22 f303 	lsr.w	r3, r2, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	f47f ae78 	bne.w	80013fc <HAL_GPIO_Init+0x10>
  }
}
 800170c:	bf00      	nop
 800170e:	bf00      	nop
 8001710:	371c      	adds	r7, #28
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	40021000 	.word	0x40021000
 8001720:	40010000 	.word	0x40010000
 8001724:	48000400 	.word	0x48000400
 8001728:	48000800 	.word	0x48000800
 800172c:	48000c00 	.word	0x48000c00
 8001730:	48001000 	.word	0x48001000
 8001734:	48001400 	.word	0x48001400
 8001738:	48001800 	.word	0x48001800
 800173c:	40010400 	.word	0x40010400

08001740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	807b      	strh	r3, [r7, #2]
 800174c:	4613      	mov	r3, r2
 800174e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001750:	787b      	ldrb	r3, [r7, #1]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001756:	887a      	ldrh	r2, [r7, #2]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800175c:	e002      	b.n	8001764 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800175e:	887a      	ldrh	r2, [r7, #2]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800177a:	4b08      	ldr	r3, [pc, #32]	; (800179c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800177c:	695a      	ldr	r2, [r3, #20]
 800177e:	88fb      	ldrh	r3, [r7, #6]
 8001780:	4013      	ands	r3, r2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d006      	beq.n	8001794 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001786:	4a05      	ldr	r2, [pc, #20]	; (800179c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001788:	88fb      	ldrh	r3, [r7, #6]
 800178a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800178c:	88fb      	ldrh	r3, [r7, #6]
 800178e:	4618      	mov	r0, r3
 8001790:	f000 f806 	bl	80017a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40010400 	.word	0x40010400

080017a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
	...

080017b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80017bc:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40007000 	.word	0x40007000

080017d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017e2:	d130      	bne.n	8001846 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80017e4:	4b23      	ldr	r3, [pc, #140]	; (8001874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017f0:	d038      	beq.n	8001864 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017f2:	4b20      	ldr	r3, [pc, #128]	; (8001874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017fa:	4a1e      	ldr	r2, [pc, #120]	; (8001874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001800:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001802:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2232      	movs	r2, #50	; 0x32
 8001808:	fb02 f303 	mul.w	r3, r2, r3
 800180c:	4a1b      	ldr	r2, [pc, #108]	; (800187c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800180e:	fba2 2303 	umull	r2, r3, r2, r3
 8001812:	0c9b      	lsrs	r3, r3, #18
 8001814:	3301      	adds	r3, #1
 8001816:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001818:	e002      	b.n	8001820 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	3b01      	subs	r3, #1
 800181e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001820:	4b14      	ldr	r3, [pc, #80]	; (8001874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001822:	695b      	ldr	r3, [r3, #20]
 8001824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800182c:	d102      	bne.n	8001834 <HAL_PWREx_ControlVoltageScaling+0x60>
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1f2      	bne.n	800181a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001834:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001836:	695b      	ldr	r3, [r3, #20]
 8001838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800183c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001840:	d110      	bne.n	8001864 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e00f      	b.n	8001866 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001846:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800184e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001852:	d007      	beq.n	8001864 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001854:	4b07      	ldr	r3, [pc, #28]	; (8001874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800185c:	4a05      	ldr	r2, [pc, #20]	; (8001874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800185e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001862:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40007000 	.word	0x40007000
 8001878:	20000020 	.word	0x20000020
 800187c:	431bde83 	.word	0x431bde83

08001880 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b088      	sub	sp, #32
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e3c6      	b.n	8002020 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001892:	4ba1      	ldr	r3, [pc, #644]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 030c 	and.w	r3, r3, #12
 800189a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800189c:	4b9e      	ldr	r3, [pc, #632]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	f003 0303 	and.w	r3, r3, #3
 80018a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0310 	and.w	r3, r3, #16
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 80e4 	beq.w	8001a7c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d007      	beq.n	80018ca <HAL_RCC_OscConfig+0x4a>
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	2b0c      	cmp	r3, #12
 80018be:	f040 808b 	bne.w	80019d8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	f040 8087 	bne.w	80019d8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018ca:	4b93      	ldr	r3, [pc, #588]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d005      	beq.n	80018e2 <HAL_RCC_OscConfig+0x62>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e39e      	b.n	8002020 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a1a      	ldr	r2, [r3, #32]
 80018e6:	4b8c      	ldr	r3, [pc, #560]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d004      	beq.n	80018fc <HAL_RCC_OscConfig+0x7c>
 80018f2:	4b89      	ldr	r3, [pc, #548]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018fa:	e005      	b.n	8001908 <HAL_RCC_OscConfig+0x88>
 80018fc:	4b86      	ldr	r3, [pc, #536]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 80018fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001902:	091b      	lsrs	r3, r3, #4
 8001904:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001908:	4293      	cmp	r3, r2
 800190a:	d223      	bcs.n	8001954 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	4618      	mov	r0, r3
 8001912:	f000 fd53 	bl	80023bc <RCC_SetFlashLatencyFromMSIRange>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e37f      	b.n	8002020 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001920:	4b7d      	ldr	r3, [pc, #500]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a7c      	ldr	r2, [pc, #496]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 8001926:	f043 0308 	orr.w	r3, r3, #8
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	4b7a      	ldr	r3, [pc, #488]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	4977      	ldr	r1, [pc, #476]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 800193a:	4313      	orrs	r3, r2
 800193c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800193e:	4b76      	ldr	r3, [pc, #472]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	021b      	lsls	r3, r3, #8
 800194c:	4972      	ldr	r1, [pc, #456]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 800194e:	4313      	orrs	r3, r2
 8001950:	604b      	str	r3, [r1, #4]
 8001952:	e025      	b.n	80019a0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001954:	4b70      	ldr	r3, [pc, #448]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a6f      	ldr	r2, [pc, #444]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 800195a:	f043 0308 	orr.w	r3, r3, #8
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	4b6d      	ldr	r3, [pc, #436]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	496a      	ldr	r1, [pc, #424]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 800196e:	4313      	orrs	r3, r2
 8001970:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001972:	4b69      	ldr	r3, [pc, #420]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	021b      	lsls	r3, r3, #8
 8001980:	4965      	ldr	r1, [pc, #404]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 8001982:	4313      	orrs	r3, r2
 8001984:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d109      	bne.n	80019a0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	4618      	mov	r0, r3
 8001992:	f000 fd13 	bl	80023bc <RCC_SetFlashLatencyFromMSIRange>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e33f      	b.n	8002020 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019a0:	f000 fc48 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 80019a4:	4602      	mov	r2, r0
 80019a6:	4b5c      	ldr	r3, [pc, #368]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	091b      	lsrs	r3, r3, #4
 80019ac:	f003 030f 	and.w	r3, r3, #15
 80019b0:	495a      	ldr	r1, [pc, #360]	; (8001b1c <HAL_RCC_OscConfig+0x29c>)
 80019b2:	5ccb      	ldrb	r3, [r1, r3]
 80019b4:	f003 031f 	and.w	r3, r3, #31
 80019b8:	fa22 f303 	lsr.w	r3, r2, r3
 80019bc:	4a58      	ldr	r2, [pc, #352]	; (8001b20 <HAL_RCC_OscConfig+0x2a0>)
 80019be:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019c0:	4b58      	ldr	r3, [pc, #352]	; (8001b24 <HAL_RCC_OscConfig+0x2a4>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fb25 	bl	8001014 <HAL_InitTick>
 80019ca:	4603      	mov	r3, r0
 80019cc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d052      	beq.n	8001a7a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	e323      	b.n	8002020 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d032      	beq.n	8001a46 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019e0:	4b4d      	ldr	r3, [pc, #308]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a4c      	ldr	r2, [pc, #304]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019ec:	f7ff fb62 	bl	80010b4 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019f4:	f7ff fb5e 	bl	80010b4 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e30c      	b.n	8002020 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a06:	4b44      	ldr	r3, [pc, #272]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0f0      	beq.n	80019f4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a12:	4b41      	ldr	r3, [pc, #260]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a40      	ldr	r2, [pc, #256]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 8001a18:	f043 0308 	orr.w	r3, r3, #8
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	4b3e      	ldr	r3, [pc, #248]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	493b      	ldr	r1, [pc, #236]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a30:	4b39      	ldr	r3, [pc, #228]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69db      	ldr	r3, [r3, #28]
 8001a3c:	021b      	lsls	r3, r3, #8
 8001a3e:	4936      	ldr	r1, [pc, #216]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	604b      	str	r3, [r1, #4]
 8001a44:	e01a      	b.n	8001a7c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a46:	4b34      	ldr	r3, [pc, #208]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a33      	ldr	r2, [pc, #204]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 8001a4c:	f023 0301 	bic.w	r3, r3, #1
 8001a50:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a52:	f7ff fb2f 	bl	80010b4 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a5a:	f7ff fb2b 	bl	80010b4 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e2d9      	b.n	8002020 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a6c:	4b2a      	ldr	r3, [pc, #168]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1f0      	bne.n	8001a5a <HAL_RCC_OscConfig+0x1da>
 8001a78:	e000      	b.n	8001a7c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a7a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d074      	beq.n	8001b72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	2b08      	cmp	r3, #8
 8001a8c:	d005      	beq.n	8001a9a <HAL_RCC_OscConfig+0x21a>
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	2b0c      	cmp	r3, #12
 8001a92:	d10e      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	2b03      	cmp	r3, #3
 8001a98:	d10b      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a9a:	4b1f      	ldr	r3, [pc, #124]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d064      	beq.n	8001b70 <HAL_RCC_OscConfig+0x2f0>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d160      	bne.n	8001b70 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e2b6      	b.n	8002020 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aba:	d106      	bne.n	8001aca <HAL_RCC_OscConfig+0x24a>
 8001abc:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a15      	ldr	r2, [pc, #84]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 8001ac2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	e01d      	b.n	8001b06 <HAL_RCC_OscConfig+0x286>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ad2:	d10c      	bne.n	8001aee <HAL_RCC_OscConfig+0x26e>
 8001ad4:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a0f      	ldr	r2, [pc, #60]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 8001ada:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	4b0d      	ldr	r3, [pc, #52]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0c      	ldr	r2, [pc, #48]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 8001ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	e00b      	b.n	8001b06 <HAL_RCC_OscConfig+0x286>
 8001aee:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a09      	ldr	r2, [pc, #36]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 8001af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a06      	ldr	r2, [pc, #24]	; (8001b18 <HAL_RCC_OscConfig+0x298>)
 8001b00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b04:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d01c      	beq.n	8001b48 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0e:	f7ff fad1 	bl	80010b4 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b14:	e011      	b.n	8001b3a <HAL_RCC_OscConfig+0x2ba>
 8001b16:	bf00      	nop
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	08005624 	.word	0x08005624
 8001b20:	20000020 	.word	0x20000020
 8001b24:	20000024 	.word	0x20000024
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b28:	f7ff fac4 	bl	80010b4 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b64      	cmp	r3, #100	; 0x64
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e272      	b.n	8002020 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b3a:	4baf      	ldr	r3, [pc, #700]	; (8001df8 <HAL_RCC_OscConfig+0x578>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0f0      	beq.n	8001b28 <HAL_RCC_OscConfig+0x2a8>
 8001b46:	e014      	b.n	8001b72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b48:	f7ff fab4 	bl	80010b4 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b50:	f7ff fab0 	bl	80010b4 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b64      	cmp	r3, #100	; 0x64
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e25e      	b.n	8002020 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b62:	4ba5      	ldr	r3, [pc, #660]	; (8001df8 <HAL_RCC_OscConfig+0x578>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0x2d0>
 8001b6e:	e000      	b.n	8001b72 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d060      	beq.n	8001c40 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d005      	beq.n	8001b90 <HAL_RCC_OscConfig+0x310>
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	2b0c      	cmp	r3, #12
 8001b88:	d119      	bne.n	8001bbe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d116      	bne.n	8001bbe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b90:	4b99      	ldr	r3, [pc, #612]	; (8001df8 <HAL_RCC_OscConfig+0x578>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x328>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e23b      	b.n	8002020 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba8:	4b93      	ldr	r3, [pc, #588]	; (8001df8 <HAL_RCC_OscConfig+0x578>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	061b      	lsls	r3, r3, #24
 8001bb6:	4990      	ldr	r1, [pc, #576]	; (8001df8 <HAL_RCC_OscConfig+0x578>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bbc:	e040      	b.n	8001c40 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d023      	beq.n	8001c0e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bc6:	4b8c      	ldr	r3, [pc, #560]	; (8001df8 <HAL_RCC_OscConfig+0x578>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a8b      	ldr	r2, [pc, #556]	; (8001df8 <HAL_RCC_OscConfig+0x578>)
 8001bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd2:	f7ff fa6f 	bl	80010b4 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bda:	f7ff fa6b 	bl	80010b4 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e219      	b.n	8002020 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bec:	4b82      	ldr	r3, [pc, #520]	; (8001df8 <HAL_RCC_OscConfig+0x578>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0f0      	beq.n	8001bda <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf8:	4b7f      	ldr	r3, [pc, #508]	; (8001df8 <HAL_RCC_OscConfig+0x578>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	061b      	lsls	r3, r3, #24
 8001c06:	497c      	ldr	r1, [pc, #496]	; (8001df8 <HAL_RCC_OscConfig+0x578>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	604b      	str	r3, [r1, #4]
 8001c0c:	e018      	b.n	8001c40 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c0e:	4b7a      	ldr	r3, [pc, #488]	; (8001df8 <HAL_RCC_OscConfig+0x578>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a79      	ldr	r2, [pc, #484]	; (8001df8 <HAL_RCC_OscConfig+0x578>)
 8001c14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1a:	f7ff fa4b 	bl	80010b4 <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c22:	f7ff fa47 	bl	80010b4 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e1f5      	b.n	8002020 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c34:	4b70      	ldr	r3, [pc, #448]	; (8001df8 <HAL_RCC_OscConfig+0x578>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1f0      	bne.n	8001c22 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0308 	and.w	r3, r3, #8
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d03c      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d01c      	beq.n	8001c8e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c54:	4b68      	ldr	r3, [pc, #416]	; (8001df8 <HAL_RCC_OscConfig+0x578>)
 8001c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c5a:	4a67      	ldr	r2, [pc, #412]	; (8001df8 <HAL_RCC_OscConfig+0x578>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c64:	f7ff fa26 	bl	80010b4 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c6c:	f7ff fa22 	bl	80010b4 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e1d0      	b.n	8002020 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c7e:	4b5e      	ldr	r3, [pc, #376]	; (8001df8 <HAL_RCC_OscConfig+0x578>)
 8001c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0ef      	beq.n	8001c6c <HAL_RCC_OscConfig+0x3ec>
 8001c8c:	e01b      	b.n	8001cc6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c8e:	4b5a      	ldr	r3, [pc, #360]	; (8001df8 <HAL_RCC_OscConfig+0x578>)
 8001c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c94:	4a58      	ldr	r2, [pc, #352]	; (8001df8 <HAL_RCC_OscConfig+0x578>)
 8001c96:	f023 0301 	bic.w	r3, r3, #1
 8001c9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9e:	f7ff fa09 	bl	80010b4 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca6:	f7ff fa05 	bl	80010b4 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e1b3      	b.n	8002020 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cb8:	4b4f      	ldr	r3, [pc, #316]	; (8001df8 <HAL_RCC_OscConfig+0x578>)
 8001cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1ef      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0304 	and.w	r3, r3, #4
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 80a6 	beq.w	8001e20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001cd8:	4b47      	ldr	r3, [pc, #284]	; (8001df8 <HAL_RCC_OscConfig+0x578>)
 8001cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10d      	bne.n	8001d00 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce4:	4b44      	ldr	r3, [pc, #272]	; (8001df8 <HAL_RCC_OscConfig+0x578>)
 8001ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce8:	4a43      	ldr	r2, [pc, #268]	; (8001df8 <HAL_RCC_OscConfig+0x578>)
 8001cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cee:	6593      	str	r3, [r2, #88]	; 0x58
 8001cf0:	4b41      	ldr	r3, [pc, #260]	; (8001df8 <HAL_RCC_OscConfig+0x578>)
 8001cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d00:	4b3e      	ldr	r3, [pc, #248]	; (8001dfc <HAL_RCC_OscConfig+0x57c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d118      	bne.n	8001d3e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d0c:	4b3b      	ldr	r3, [pc, #236]	; (8001dfc <HAL_RCC_OscConfig+0x57c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a3a      	ldr	r2, [pc, #232]	; (8001dfc <HAL_RCC_OscConfig+0x57c>)
 8001d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d18:	f7ff f9cc 	bl	80010b4 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d20:	f7ff f9c8 	bl	80010b4 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e176      	b.n	8002020 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d32:	4b32      	ldr	r3, [pc, #200]	; (8001dfc <HAL_RCC_OscConfig+0x57c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0f0      	beq.n	8001d20 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d108      	bne.n	8001d58 <HAL_RCC_OscConfig+0x4d8>
 8001d46:	4b2c      	ldr	r3, [pc, #176]	; (8001df8 <HAL_RCC_OscConfig+0x578>)
 8001d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d4c:	4a2a      	ldr	r2, [pc, #168]	; (8001df8 <HAL_RCC_OscConfig+0x578>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d56:	e024      	b.n	8001da2 <HAL_RCC_OscConfig+0x522>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	2b05      	cmp	r3, #5
 8001d5e:	d110      	bne.n	8001d82 <HAL_RCC_OscConfig+0x502>
 8001d60:	4b25      	ldr	r3, [pc, #148]	; (8001df8 <HAL_RCC_OscConfig+0x578>)
 8001d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d66:	4a24      	ldr	r2, [pc, #144]	; (8001df8 <HAL_RCC_OscConfig+0x578>)
 8001d68:	f043 0304 	orr.w	r3, r3, #4
 8001d6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d70:	4b21      	ldr	r3, [pc, #132]	; (8001df8 <HAL_RCC_OscConfig+0x578>)
 8001d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d76:	4a20      	ldr	r2, [pc, #128]	; (8001df8 <HAL_RCC_OscConfig+0x578>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d80:	e00f      	b.n	8001da2 <HAL_RCC_OscConfig+0x522>
 8001d82:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <HAL_RCC_OscConfig+0x578>)
 8001d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d88:	4a1b      	ldr	r2, [pc, #108]	; (8001df8 <HAL_RCC_OscConfig+0x578>)
 8001d8a:	f023 0301 	bic.w	r3, r3, #1
 8001d8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d92:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <HAL_RCC_OscConfig+0x578>)
 8001d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d98:	4a17      	ldr	r2, [pc, #92]	; (8001df8 <HAL_RCC_OscConfig+0x578>)
 8001d9a:	f023 0304 	bic.w	r3, r3, #4
 8001d9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d016      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001daa:	f7ff f983 	bl	80010b4 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001db0:	e00a      	b.n	8001dc8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db2:	f7ff f97f 	bl	80010b4 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e12b      	b.n	8002020 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <HAL_RCC_OscConfig+0x578>)
 8001dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0ed      	beq.n	8001db2 <HAL_RCC_OscConfig+0x532>
 8001dd6:	e01a      	b.n	8001e0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd8:	f7ff f96c 	bl	80010b4 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dde:	e00f      	b.n	8001e00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de0:	f7ff f968 	bl	80010b4 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d906      	bls.n	8001e00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e114      	b.n	8002020 <HAL_RCC_OscConfig+0x7a0>
 8001df6:	bf00      	nop
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e00:	4b89      	ldr	r3, [pc, #548]	; (8002028 <HAL_RCC_OscConfig+0x7a8>)
 8001e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1e8      	bne.n	8001de0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e0e:	7ffb      	ldrb	r3, [r7, #31]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d105      	bne.n	8001e20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e14:	4b84      	ldr	r3, [pc, #528]	; (8002028 <HAL_RCC_OscConfig+0x7a8>)
 8001e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e18:	4a83      	ldr	r2, [pc, #524]	; (8002028 <HAL_RCC_OscConfig+0x7a8>)
 8001e1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 80fa 	beq.w	800201e <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	f040 80d0 	bne.w	8001fd4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e34:	4b7c      	ldr	r3, [pc, #496]	; (8002028 <HAL_RCC_OscConfig+0x7a8>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f003 0203 	and.w	r2, r3, #3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d130      	bne.n	8001eaa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	3b01      	subs	r3, #1
 8001e54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d127      	bne.n	8001eaa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e64:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d11f      	bne.n	8001eaa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e74:	2a07      	cmp	r2, #7
 8001e76:	bf14      	ite	ne
 8001e78:	2201      	movne	r2, #1
 8001e7a:	2200      	moveq	r2, #0
 8001e7c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d113      	bne.n	8001eaa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e8c:	085b      	lsrs	r3, r3, #1
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d109      	bne.n	8001eaa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea0:	085b      	lsrs	r3, r3, #1
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d06e      	beq.n	8001f88 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	2b0c      	cmp	r3, #12
 8001eae:	d069      	beq.n	8001f84 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001eb0:	4b5d      	ldr	r3, [pc, #372]	; (8002028 <HAL_RCC_OscConfig+0x7a8>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d105      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ebc:	4b5a      	ldr	r3, [pc, #360]	; (8002028 <HAL_RCC_OscConfig+0x7a8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0a9      	b.n	8002020 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ecc:	4b56      	ldr	r3, [pc, #344]	; (8002028 <HAL_RCC_OscConfig+0x7a8>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a55      	ldr	r2, [pc, #340]	; (8002028 <HAL_RCC_OscConfig+0x7a8>)
 8001ed2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ed6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ed8:	f7ff f8ec 	bl	80010b4 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee0:	f7ff f8e8 	bl	80010b4 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e096      	b.n	8002020 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef2:	4b4d      	ldr	r3, [pc, #308]	; (8002028 <HAL_RCC_OscConfig+0x7a8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001efe:	4b4a      	ldr	r3, [pc, #296]	; (8002028 <HAL_RCC_OscConfig+0x7a8>)
 8001f00:	68da      	ldr	r2, [r3, #12]
 8001f02:	4b4a      	ldr	r3, [pc, #296]	; (800202c <HAL_RCC_OscConfig+0x7ac>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f0e:	3a01      	subs	r2, #1
 8001f10:	0112      	lsls	r2, r2, #4
 8001f12:	4311      	orrs	r1, r2
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f18:	0212      	lsls	r2, r2, #8
 8001f1a:	4311      	orrs	r1, r2
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f20:	0852      	lsrs	r2, r2, #1
 8001f22:	3a01      	subs	r2, #1
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	4311      	orrs	r1, r2
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f2c:	0852      	lsrs	r2, r2, #1
 8001f2e:	3a01      	subs	r2, #1
 8001f30:	0652      	lsls	r2, r2, #25
 8001f32:	4311      	orrs	r1, r2
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f38:	0912      	lsrs	r2, r2, #4
 8001f3a:	0452      	lsls	r2, r2, #17
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	493a      	ldr	r1, [pc, #232]	; (8002028 <HAL_RCC_OscConfig+0x7a8>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f44:	4b38      	ldr	r3, [pc, #224]	; (8002028 <HAL_RCC_OscConfig+0x7a8>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a37      	ldr	r2, [pc, #220]	; (8002028 <HAL_RCC_OscConfig+0x7a8>)
 8001f4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f50:	4b35      	ldr	r3, [pc, #212]	; (8002028 <HAL_RCC_OscConfig+0x7a8>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	4a34      	ldr	r2, [pc, #208]	; (8002028 <HAL_RCC_OscConfig+0x7a8>)
 8001f56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f5c:	f7ff f8aa 	bl	80010b4 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f64:	f7ff f8a6 	bl	80010b4 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e054      	b.n	8002020 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f76:	4b2c      	ldr	r3, [pc, #176]	; (8002028 <HAL_RCC_OscConfig+0x7a8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f82:	e04c      	b.n	800201e <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e04b      	b.n	8002020 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f88:	4b27      	ldr	r3, [pc, #156]	; (8002028 <HAL_RCC_OscConfig+0x7a8>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d144      	bne.n	800201e <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f94:	4b24      	ldr	r3, [pc, #144]	; (8002028 <HAL_RCC_OscConfig+0x7a8>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a23      	ldr	r2, [pc, #140]	; (8002028 <HAL_RCC_OscConfig+0x7a8>)
 8001f9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f9e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fa0:	4b21      	ldr	r3, [pc, #132]	; (8002028 <HAL_RCC_OscConfig+0x7a8>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	4a20      	ldr	r2, [pc, #128]	; (8002028 <HAL_RCC_OscConfig+0x7a8>)
 8001fa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001faa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fac:	f7ff f882 	bl	80010b4 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb4:	f7ff f87e 	bl	80010b4 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e02c      	b.n	8002020 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fc6:	4b18      	ldr	r3, [pc, #96]	; (8002028 <HAL_RCC_OscConfig+0x7a8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0f0      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x734>
 8001fd2:	e024      	b.n	800201e <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	2b0c      	cmp	r3, #12
 8001fd8:	d01f      	beq.n	800201a <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fda:	4b13      	ldr	r3, [pc, #76]	; (8002028 <HAL_RCC_OscConfig+0x7a8>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a12      	ldr	r2, [pc, #72]	; (8002028 <HAL_RCC_OscConfig+0x7a8>)
 8001fe0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe6:	f7ff f865 	bl	80010b4 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fee:	f7ff f861 	bl	80010b4 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e00f      	b.n	8002020 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002000:	4b09      	ldr	r3, [pc, #36]	; (8002028 <HAL_RCC_OscConfig+0x7a8>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f0      	bne.n	8001fee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800200c:	4b06      	ldr	r3, [pc, #24]	; (8002028 <HAL_RCC_OscConfig+0x7a8>)
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	4905      	ldr	r1, [pc, #20]	; (8002028 <HAL_RCC_OscConfig+0x7a8>)
 8002012:	4b07      	ldr	r3, [pc, #28]	; (8002030 <HAL_RCC_OscConfig+0x7b0>)
 8002014:	4013      	ands	r3, r2
 8002016:	60cb      	str	r3, [r1, #12]
 8002018:	e001      	b.n	800201e <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3720      	adds	r7, #32
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40021000 	.word	0x40021000
 800202c:	f99d808c 	.word	0xf99d808c
 8002030:	feeefffc 	.word	0xfeeefffc

08002034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0e7      	b.n	8002218 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002048:	4b75      	ldr	r3, [pc, #468]	; (8002220 <HAL_RCC_ClockConfig+0x1ec>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d910      	bls.n	8002078 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002056:	4b72      	ldr	r3, [pc, #456]	; (8002220 <HAL_RCC_ClockConfig+0x1ec>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f023 0207 	bic.w	r2, r3, #7
 800205e:	4970      	ldr	r1, [pc, #448]	; (8002220 <HAL_RCC_ClockConfig+0x1ec>)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002066:	4b6e      	ldr	r3, [pc, #440]	; (8002220 <HAL_RCC_ClockConfig+0x1ec>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d001      	beq.n	8002078 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e0cf      	b.n	8002218 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d010      	beq.n	80020a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	4b66      	ldr	r3, [pc, #408]	; (8002224 <HAL_RCC_ClockConfig+0x1f0>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002090:	429a      	cmp	r2, r3
 8002092:	d908      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002094:	4b63      	ldr	r3, [pc, #396]	; (8002224 <HAL_RCC_ClockConfig+0x1f0>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	4960      	ldr	r1, [pc, #384]	; (8002224 <HAL_RCC_ClockConfig+0x1f0>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d04c      	beq.n	800214c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	d107      	bne.n	80020ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ba:	4b5a      	ldr	r3, [pc, #360]	; (8002224 <HAL_RCC_ClockConfig+0x1f0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d121      	bne.n	800210a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e0a6      	b.n	8002218 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d107      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020d2:	4b54      	ldr	r3, [pc, #336]	; (8002224 <HAL_RCC_ClockConfig+0x1f0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d115      	bne.n	800210a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e09a      	b.n	8002218 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d107      	bne.n	80020fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020ea:	4b4e      	ldr	r3, [pc, #312]	; (8002224 <HAL_RCC_ClockConfig+0x1f0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d109      	bne.n	800210a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e08e      	b.n	8002218 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020fa:	4b4a      	ldr	r3, [pc, #296]	; (8002224 <HAL_RCC_ClockConfig+0x1f0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e086      	b.n	8002218 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800210a:	4b46      	ldr	r3, [pc, #280]	; (8002224 <HAL_RCC_ClockConfig+0x1f0>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f023 0203 	bic.w	r2, r3, #3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	4943      	ldr	r1, [pc, #268]	; (8002224 <HAL_RCC_ClockConfig+0x1f0>)
 8002118:	4313      	orrs	r3, r2
 800211a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800211c:	f7fe ffca 	bl	80010b4 <HAL_GetTick>
 8002120:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002122:	e00a      	b.n	800213a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002124:	f7fe ffc6 	bl	80010b4 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002132:	4293      	cmp	r3, r2
 8002134:	d901      	bls.n	800213a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e06e      	b.n	8002218 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213a:	4b3a      	ldr	r3, [pc, #232]	; (8002224 <HAL_RCC_ClockConfig+0x1f0>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 020c 	and.w	r2, r3, #12
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	429a      	cmp	r2, r3
 800214a:	d1eb      	bne.n	8002124 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d010      	beq.n	800217a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	4b31      	ldr	r3, [pc, #196]	; (8002224 <HAL_RCC_ClockConfig+0x1f0>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002164:	429a      	cmp	r2, r3
 8002166:	d208      	bcs.n	800217a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002168:	4b2e      	ldr	r3, [pc, #184]	; (8002224 <HAL_RCC_ClockConfig+0x1f0>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	492b      	ldr	r1, [pc, #172]	; (8002224 <HAL_RCC_ClockConfig+0x1f0>)
 8002176:	4313      	orrs	r3, r2
 8002178:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800217a:	4b29      	ldr	r3, [pc, #164]	; (8002220 <HAL_RCC_ClockConfig+0x1ec>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d210      	bcs.n	80021aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002188:	4b25      	ldr	r3, [pc, #148]	; (8002220 <HAL_RCC_ClockConfig+0x1ec>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f023 0207 	bic.w	r2, r3, #7
 8002190:	4923      	ldr	r1, [pc, #140]	; (8002220 <HAL_RCC_ClockConfig+0x1ec>)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	4313      	orrs	r3, r2
 8002196:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002198:	4b21      	ldr	r3, [pc, #132]	; (8002220 <HAL_RCC_ClockConfig+0x1ec>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d001      	beq.n	80021aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e036      	b.n	8002218 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0304 	and.w	r3, r3, #4
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d008      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b6:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <HAL_RCC_ClockConfig+0x1f0>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	4918      	ldr	r1, [pc, #96]	; (8002224 <HAL_RCC_ClockConfig+0x1f0>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0308 	and.w	r3, r3, #8
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d009      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021d4:	4b13      	ldr	r3, [pc, #76]	; (8002224 <HAL_RCC_ClockConfig+0x1f0>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	4910      	ldr	r1, [pc, #64]	; (8002224 <HAL_RCC_ClockConfig+0x1f0>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021e8:	f000 f824 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 80021ec:	4602      	mov	r2, r0
 80021ee:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <HAL_RCC_ClockConfig+0x1f0>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	091b      	lsrs	r3, r3, #4
 80021f4:	f003 030f 	and.w	r3, r3, #15
 80021f8:	490b      	ldr	r1, [pc, #44]	; (8002228 <HAL_RCC_ClockConfig+0x1f4>)
 80021fa:	5ccb      	ldrb	r3, [r1, r3]
 80021fc:	f003 031f 	and.w	r3, r3, #31
 8002200:	fa22 f303 	lsr.w	r3, r2, r3
 8002204:	4a09      	ldr	r2, [pc, #36]	; (800222c <HAL_RCC_ClockConfig+0x1f8>)
 8002206:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002208:	4b09      	ldr	r3, [pc, #36]	; (8002230 <HAL_RCC_ClockConfig+0x1fc>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe ff01 	bl	8001014 <HAL_InitTick>
 8002212:	4603      	mov	r3, r0
 8002214:	72fb      	strb	r3, [r7, #11]

  return status;
 8002216:	7afb      	ldrb	r3, [r7, #11]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40022000 	.word	0x40022000
 8002224:	40021000 	.word	0x40021000
 8002228:	08005624 	.word	0x08005624
 800222c:	20000020 	.word	0x20000020
 8002230:	20000024 	.word	0x20000024

08002234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002234:	b480      	push	{r7}
 8002236:	b089      	sub	sp, #36	; 0x24
 8002238:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800223a:	2300      	movs	r3, #0
 800223c:	61fb      	str	r3, [r7, #28]
 800223e:	2300      	movs	r3, #0
 8002240:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002242:	4b3e      	ldr	r3, [pc, #248]	; (800233c <HAL_RCC_GetSysClockFreq+0x108>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 030c 	and.w	r3, r3, #12
 800224a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800224c:	4b3b      	ldr	r3, [pc, #236]	; (800233c <HAL_RCC_GetSysClockFreq+0x108>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d005      	beq.n	8002268 <HAL_RCC_GetSysClockFreq+0x34>
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	2b0c      	cmp	r3, #12
 8002260:	d121      	bne.n	80022a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d11e      	bne.n	80022a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002268:	4b34      	ldr	r3, [pc, #208]	; (800233c <HAL_RCC_GetSysClockFreq+0x108>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	2b00      	cmp	r3, #0
 8002272:	d107      	bne.n	8002284 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002274:	4b31      	ldr	r3, [pc, #196]	; (800233c <HAL_RCC_GetSysClockFreq+0x108>)
 8002276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800227a:	0a1b      	lsrs	r3, r3, #8
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	61fb      	str	r3, [r7, #28]
 8002282:	e005      	b.n	8002290 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002284:	4b2d      	ldr	r3, [pc, #180]	; (800233c <HAL_RCC_GetSysClockFreq+0x108>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	091b      	lsrs	r3, r3, #4
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002290:	4a2b      	ldr	r2, [pc, #172]	; (8002340 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002298:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10d      	bne.n	80022bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022a4:	e00a      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d102      	bne.n	80022b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022ac:	4b25      	ldr	r3, [pc, #148]	; (8002344 <HAL_RCC_GetSysClockFreq+0x110>)
 80022ae:	61bb      	str	r3, [r7, #24]
 80022b0:	e004      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d101      	bne.n	80022bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022b8:	4b23      	ldr	r3, [pc, #140]	; (8002348 <HAL_RCC_GetSysClockFreq+0x114>)
 80022ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	2b0c      	cmp	r3, #12
 80022c0:	d134      	bne.n	800232c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022c2:	4b1e      	ldr	r3, [pc, #120]	; (800233c <HAL_RCC_GetSysClockFreq+0x108>)
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d003      	beq.n	80022da <HAL_RCC_GetSysClockFreq+0xa6>
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	d003      	beq.n	80022e0 <HAL_RCC_GetSysClockFreq+0xac>
 80022d8:	e005      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022da:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <HAL_RCC_GetSysClockFreq+0x110>)
 80022dc:	617b      	str	r3, [r7, #20]
      break;
 80022de:	e005      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022e0:	4b19      	ldr	r3, [pc, #100]	; (8002348 <HAL_RCC_GetSysClockFreq+0x114>)
 80022e2:	617b      	str	r3, [r7, #20]
      break;
 80022e4:	e002      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	617b      	str	r3, [r7, #20]
      break;
 80022ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022ec:	4b13      	ldr	r3, [pc, #76]	; (800233c <HAL_RCC_GetSysClockFreq+0x108>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	091b      	lsrs	r3, r3, #4
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	3301      	adds	r3, #1
 80022f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022fa:	4b10      	ldr	r3, [pc, #64]	; (800233c <HAL_RCC_GetSysClockFreq+0x108>)
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	0a1b      	lsrs	r3, r3, #8
 8002300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	fb02 f203 	mul.w	r2, r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002310:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002312:	4b0a      	ldr	r3, [pc, #40]	; (800233c <HAL_RCC_GetSysClockFreq+0x108>)
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	0e5b      	lsrs	r3, r3, #25
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	3301      	adds	r3, #1
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	fbb2 f3f3 	udiv	r3, r2, r3
 800232a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800232c:	69bb      	ldr	r3, [r7, #24]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3724      	adds	r7, #36	; 0x24
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000
 8002340:	0800563c 	.word	0x0800563c
 8002344:	00f42400 	.word	0x00f42400
 8002348:	007a1200 	.word	0x007a1200

0800234c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <HAL_RCC_GetHCLKFreq+0x14>)
 8002352:	681b      	ldr	r3, [r3, #0]
}
 8002354:	4618      	mov	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	20000020 	.word	0x20000020

08002364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002368:	f7ff fff0 	bl	800234c <HAL_RCC_GetHCLKFreq>
 800236c:	4602      	mov	r2, r0
 800236e:	4b06      	ldr	r3, [pc, #24]	; (8002388 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	0a1b      	lsrs	r3, r3, #8
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	4904      	ldr	r1, [pc, #16]	; (800238c <HAL_RCC_GetPCLK1Freq+0x28>)
 800237a:	5ccb      	ldrb	r3, [r1, r3]
 800237c:	f003 031f 	and.w	r3, r3, #31
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002384:	4618      	mov	r0, r3
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40021000 	.word	0x40021000
 800238c:	08005634 	.word	0x08005634

08002390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002394:	f7ff ffda 	bl	800234c <HAL_RCC_GetHCLKFreq>
 8002398:	4602      	mov	r2, r0
 800239a:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	0adb      	lsrs	r3, r3, #11
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	4904      	ldr	r1, [pc, #16]	; (80023b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80023a6:	5ccb      	ldrb	r3, [r1, r3]
 80023a8:	f003 031f 	and.w	r3, r3, #31
 80023ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40021000 	.word	0x40021000
 80023b8:	08005634 	.word	0x08005634

080023bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023c4:	2300      	movs	r3, #0
 80023c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023c8:	4b2a      	ldr	r3, [pc, #168]	; (8002474 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023d4:	f7ff f9f0 	bl	80017b8 <HAL_PWREx_GetVoltageRange>
 80023d8:	6178      	str	r0, [r7, #20]
 80023da:	e014      	b.n	8002406 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023dc:	4b25      	ldr	r3, [pc, #148]	; (8002474 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e0:	4a24      	ldr	r2, [pc, #144]	; (8002474 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e6:	6593      	str	r3, [r2, #88]	; 0x58
 80023e8:	4b22      	ldr	r3, [pc, #136]	; (8002474 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023f4:	f7ff f9e0 	bl	80017b8 <HAL_PWREx_GetVoltageRange>
 80023f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023fa:	4b1e      	ldr	r3, [pc, #120]	; (8002474 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fe:	4a1d      	ldr	r2, [pc, #116]	; (8002474 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002404:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800240c:	d10b      	bne.n	8002426 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b80      	cmp	r3, #128	; 0x80
 8002412:	d919      	bls.n	8002448 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2ba0      	cmp	r3, #160	; 0xa0
 8002418:	d902      	bls.n	8002420 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800241a:	2302      	movs	r3, #2
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	e013      	b.n	8002448 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002420:	2301      	movs	r3, #1
 8002422:	613b      	str	r3, [r7, #16]
 8002424:	e010      	b.n	8002448 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b80      	cmp	r3, #128	; 0x80
 800242a:	d902      	bls.n	8002432 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800242c:	2303      	movs	r3, #3
 800242e:	613b      	str	r3, [r7, #16]
 8002430:	e00a      	b.n	8002448 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b80      	cmp	r3, #128	; 0x80
 8002436:	d102      	bne.n	800243e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002438:	2302      	movs	r3, #2
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	e004      	b.n	8002448 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b70      	cmp	r3, #112	; 0x70
 8002442:	d101      	bne.n	8002448 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002444:	2301      	movs	r3, #1
 8002446:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f023 0207 	bic.w	r2, r3, #7
 8002450:	4909      	ldr	r1, [pc, #36]	; (8002478 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	4313      	orrs	r3, r2
 8002456:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002458:	4b07      	ldr	r3, [pc, #28]	; (8002478 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	429a      	cmp	r2, r3
 8002464:	d001      	beq.n	800246a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40021000 	.word	0x40021000
 8002478:	40022000 	.word	0x40022000

0800247c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002484:	2300      	movs	r3, #0
 8002486:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002488:	2300      	movs	r3, #0
 800248a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002494:	2b00      	cmp	r3, #0
 8002496:	d041      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800249c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024a0:	d02a      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80024a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024a6:	d824      	bhi.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024ac:	d008      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80024ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024b2:	d81e      	bhi.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00a      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80024b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024bc:	d010      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80024be:	e018      	b.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024c0:	4b86      	ldr	r3, [pc, #536]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	4a85      	ldr	r2, [pc, #532]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024cc:	e015      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	3304      	adds	r3, #4
 80024d2:	2100      	movs	r1, #0
 80024d4:	4618      	mov	r0, r3
 80024d6:	f000 fabb 	bl	8002a50 <RCCEx_PLLSAI1_Config>
 80024da:	4603      	mov	r3, r0
 80024dc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024de:	e00c      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3320      	adds	r3, #32
 80024e4:	2100      	movs	r1, #0
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 fba6 	bl	8002c38 <RCCEx_PLLSAI2_Config>
 80024ec:	4603      	mov	r3, r0
 80024ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024f0:	e003      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	74fb      	strb	r3, [r7, #19]
      break;
 80024f6:	e000      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80024f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024fa:	7cfb      	ldrb	r3, [r7, #19]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10b      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002500:	4b76      	ldr	r3, [pc, #472]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002506:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800250e:	4973      	ldr	r1, [pc, #460]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002510:	4313      	orrs	r3, r2
 8002512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002516:	e001      	b.n	800251c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002518:	7cfb      	ldrb	r3, [r7, #19]
 800251a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d041      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800252c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002530:	d02a      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002532:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002536:	d824      	bhi.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002538:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800253c:	d008      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800253e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002542:	d81e      	bhi.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00a      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002548:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800254c:	d010      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800254e:	e018      	b.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002550:	4b62      	ldr	r3, [pc, #392]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	4a61      	ldr	r2, [pc, #388]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800255a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800255c:	e015      	b.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3304      	adds	r3, #4
 8002562:	2100      	movs	r1, #0
 8002564:	4618      	mov	r0, r3
 8002566:	f000 fa73 	bl	8002a50 <RCCEx_PLLSAI1_Config>
 800256a:	4603      	mov	r3, r0
 800256c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800256e:	e00c      	b.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3320      	adds	r3, #32
 8002574:	2100      	movs	r1, #0
 8002576:	4618      	mov	r0, r3
 8002578:	f000 fb5e 	bl	8002c38 <RCCEx_PLLSAI2_Config>
 800257c:	4603      	mov	r3, r0
 800257e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002580:	e003      	b.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	74fb      	strb	r3, [r7, #19]
      break;
 8002586:	e000      	b.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002588:	bf00      	nop
    }

    if(ret == HAL_OK)
 800258a:	7cfb      	ldrb	r3, [r7, #19]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10b      	bne.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002590:	4b52      	ldr	r3, [pc, #328]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002596:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800259e:	494f      	ldr	r1, [pc, #316]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025a6:	e001      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025a8:	7cfb      	ldrb	r3, [r7, #19]
 80025aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 80a0 	beq.w	80026fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ba:	2300      	movs	r3, #0
 80025bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025be:	4b47      	ldr	r3, [pc, #284]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x152>
 80025ca:	2301      	movs	r3, #1
 80025cc:	e000      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80025ce:	2300      	movs	r3, #0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00d      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025d4:	4b41      	ldr	r3, [pc, #260]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d8:	4a40      	ldr	r2, [pc, #256]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025de:	6593      	str	r3, [r2, #88]	; 0x58
 80025e0:	4b3e      	ldr	r3, [pc, #248]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ec:	2301      	movs	r3, #1
 80025ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025f0:	4b3b      	ldr	r3, [pc, #236]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a3a      	ldr	r2, [pc, #232]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025fc:	f7fe fd5a 	bl	80010b4 <HAL_GetTick>
 8002600:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002602:	e009      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002604:	f7fe fd56 	bl	80010b4 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d902      	bls.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	74fb      	strb	r3, [r7, #19]
        break;
 8002616:	e005      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002618:	4b31      	ldr	r3, [pc, #196]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0ef      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002624:	7cfb      	ldrb	r3, [r7, #19]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d15c      	bne.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800262a:	4b2c      	ldr	r3, [pc, #176]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800262c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002634:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d01f      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	429a      	cmp	r2, r3
 8002646:	d019      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002648:	4b24      	ldr	r3, [pc, #144]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800264a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002652:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002654:	4b21      	ldr	r3, [pc, #132]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265a:	4a20      	ldr	r2, [pc, #128]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800265c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002664:	4b1d      	ldr	r3, [pc, #116]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266a:	4a1c      	ldr	r2, [pc, #112]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800266c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002674:	4a19      	ldr	r2, [pc, #100]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d016      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002686:	f7fe fd15 	bl	80010b4 <HAL_GetTick>
 800268a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800268c:	e00b      	b.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800268e:	f7fe fd11 	bl	80010b4 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	f241 3288 	movw	r2, #5000	; 0x1388
 800269c:	4293      	cmp	r3, r2
 800269e:	d902      	bls.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	74fb      	strb	r3, [r7, #19]
            break;
 80026a4:	e006      	b.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026a6:	4b0d      	ldr	r3, [pc, #52]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0ec      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80026b4:	7cfb      	ldrb	r3, [r7, #19]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10c      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026ba:	4b08      	ldr	r3, [pc, #32]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026ca:	4904      	ldr	r1, [pc, #16]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80026d2:	e009      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026d4:	7cfb      	ldrb	r3, [r7, #19]
 80026d6:	74bb      	strb	r3, [r7, #18]
 80026d8:	e006      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80026da:	bf00      	nop
 80026dc:	40021000 	.word	0x40021000
 80026e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026e4:	7cfb      	ldrb	r3, [r7, #19]
 80026e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026e8:	7c7b      	ldrb	r3, [r7, #17]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d105      	bne.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ee:	4b9e      	ldr	r3, [pc, #632]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f2:	4a9d      	ldr	r2, [pc, #628]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00a      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002706:	4b98      	ldr	r3, [pc, #608]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270c:	f023 0203 	bic.w	r2, r3, #3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002714:	4994      	ldr	r1, [pc, #592]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002716:	4313      	orrs	r3, r2
 8002718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00a      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002728:	4b8f      	ldr	r3, [pc, #572]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272e:	f023 020c 	bic.w	r2, r3, #12
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002736:	498c      	ldr	r1, [pc, #560]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002738:	4313      	orrs	r3, r2
 800273a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00a      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800274a:	4b87      	ldr	r3, [pc, #540]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002750:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	4983      	ldr	r1, [pc, #524]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275a:	4313      	orrs	r3, r2
 800275c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00a      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800276c:	4b7e      	ldr	r3, [pc, #504]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002772:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277a:	497b      	ldr	r1, [pc, #492]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0310 	and.w	r3, r3, #16
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00a      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800278e:	4b76      	ldr	r3, [pc, #472]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002794:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800279c:	4972      	ldr	r1, [pc, #456]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0320 	and.w	r3, r3, #32
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00a      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027b0:	4b6d      	ldr	r3, [pc, #436]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027be:	496a      	ldr	r1, [pc, #424]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00a      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027d2:	4b65      	ldr	r3, [pc, #404]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e0:	4961      	ldr	r1, [pc, #388]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00a      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027f4:	4b5c      	ldr	r3, [pc, #368]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002802:	4959      	ldr	r1, [pc, #356]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00a      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002816:	4b54      	ldr	r3, [pc, #336]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002824:	4950      	ldr	r1, [pc, #320]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002826:	4313      	orrs	r3, r2
 8002828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00a      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002838:	4b4b      	ldr	r3, [pc, #300]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800283a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002846:	4948      	ldr	r1, [pc, #288]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002848:	4313      	orrs	r3, r2
 800284a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00a      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800285a:	4b43      	ldr	r3, [pc, #268]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002860:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002868:	493f      	ldr	r1, [pc, #252]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286a:	4313      	orrs	r3, r2
 800286c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d028      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800287c:	4b3a      	ldr	r3, [pc, #232]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002882:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800288a:	4937      	ldr	r1, [pc, #220]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288c:	4313      	orrs	r3, r2
 800288e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002896:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800289a:	d106      	bne.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800289c:	4b32      	ldr	r3, [pc, #200]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	4a31      	ldr	r2, [pc, #196]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028a6:	60d3      	str	r3, [r2, #12]
 80028a8:	e011      	b.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028b2:	d10c      	bne.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3304      	adds	r3, #4
 80028b8:	2101      	movs	r1, #1
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 f8c8 	bl	8002a50 <RCCEx_PLLSAI1_Config>
 80028c0:	4603      	mov	r3, r0
 80028c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80028c4:	7cfb      	ldrb	r3, [r7, #19]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80028ca:	7cfb      	ldrb	r3, [r7, #19]
 80028cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d028      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028da:	4b23      	ldr	r3, [pc, #140]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e8:	491f      	ldr	r1, [pc, #124]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028f8:	d106      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028fa:	4b1b      	ldr	r3, [pc, #108]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	4a1a      	ldr	r2, [pc, #104]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002900:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002904:	60d3      	str	r3, [r2, #12]
 8002906:	e011      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002910:	d10c      	bne.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3304      	adds	r3, #4
 8002916:	2101      	movs	r1, #1
 8002918:	4618      	mov	r0, r3
 800291a:	f000 f899 	bl	8002a50 <RCCEx_PLLSAI1_Config>
 800291e:	4603      	mov	r3, r0
 8002920:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002922:	7cfb      	ldrb	r3, [r7, #19]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002928:	7cfb      	ldrb	r3, [r7, #19]
 800292a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d02b      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002938:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002946:	4908      	ldr	r1, [pc, #32]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002948:	4313      	orrs	r3, r2
 800294a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002952:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002956:	d109      	bne.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002958:	4b03      	ldr	r3, [pc, #12]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	4a02      	ldr	r2, [pc, #8]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002962:	60d3      	str	r3, [r2, #12]
 8002964:	e014      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002966:	bf00      	nop
 8002968:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002970:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002974:	d10c      	bne.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3304      	adds	r3, #4
 800297a:	2101      	movs	r1, #1
 800297c:	4618      	mov	r0, r3
 800297e:	f000 f867 	bl	8002a50 <RCCEx_PLLSAI1_Config>
 8002982:	4603      	mov	r3, r0
 8002984:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002986:	7cfb      	ldrb	r3, [r7, #19]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800298c:	7cfb      	ldrb	r3, [r7, #19]
 800298e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d02f      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800299c:	4b2b      	ldr	r3, [pc, #172]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800299e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029aa:	4928      	ldr	r1, [pc, #160]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029ba:	d10d      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3304      	adds	r3, #4
 80029c0:	2102      	movs	r1, #2
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 f844 	bl	8002a50 <RCCEx_PLLSAI1_Config>
 80029c8:	4603      	mov	r3, r0
 80029ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029cc:	7cfb      	ldrb	r3, [r7, #19]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d014      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80029d2:	7cfb      	ldrb	r3, [r7, #19]
 80029d4:	74bb      	strb	r3, [r7, #18]
 80029d6:	e011      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029e0:	d10c      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	3320      	adds	r3, #32
 80029e6:	2102      	movs	r1, #2
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 f925 	bl	8002c38 <RCCEx_PLLSAI2_Config>
 80029ee:	4603      	mov	r3, r0
 80029f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029f2:	7cfb      	ldrb	r3, [r7, #19]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80029f8:	7cfb      	ldrb	r3, [r7, #19]
 80029fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00a      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a08:	4b10      	ldr	r3, [pc, #64]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a16:	490d      	ldr	r1, [pc, #52]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00b      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a2a:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a30:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a3a:	4904      	ldr	r1, [pc, #16]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a42:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3718      	adds	r7, #24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40021000 	.word	0x40021000

08002a50 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a5e:	4b75      	ldr	r3, [pc, #468]	; (8002c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d018      	beq.n	8002a9c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a6a:	4b72      	ldr	r3, [pc, #456]	; (8002c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	f003 0203 	and.w	r2, r3, #3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d10d      	bne.n	8002a96 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
       ||
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d009      	beq.n	8002a96 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a82:	4b6c      	ldr	r3, [pc, #432]	; (8002c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	091b      	lsrs	r3, r3, #4
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	1c5a      	adds	r2, r3, #1
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
       ||
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d047      	beq.n	8002b26 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	73fb      	strb	r3, [r7, #15]
 8002a9a:	e044      	b.n	8002b26 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	d018      	beq.n	8002ad6 <RCCEx_PLLSAI1_Config+0x86>
 8002aa4:	2b03      	cmp	r3, #3
 8002aa6:	d825      	bhi.n	8002af4 <RCCEx_PLLSAI1_Config+0xa4>
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d002      	beq.n	8002ab2 <RCCEx_PLLSAI1_Config+0x62>
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d009      	beq.n	8002ac4 <RCCEx_PLLSAI1_Config+0x74>
 8002ab0:	e020      	b.n	8002af4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ab2:	4b60      	ldr	r3, [pc, #384]	; (8002c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d11d      	bne.n	8002afa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ac2:	e01a      	b.n	8002afa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ac4:	4b5b      	ldr	r3, [pc, #364]	; (8002c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d116      	bne.n	8002afe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ad4:	e013      	b.n	8002afe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ad6:	4b57      	ldr	r3, [pc, #348]	; (8002c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10f      	bne.n	8002b02 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ae2:	4b54      	ldr	r3, [pc, #336]	; (8002c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d109      	bne.n	8002b02 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002af2:	e006      	b.n	8002b02 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	73fb      	strb	r3, [r7, #15]
      break;
 8002af8:	e004      	b.n	8002b04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002afa:	bf00      	nop
 8002afc:	e002      	b.n	8002b04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002afe:	bf00      	nop
 8002b00:	e000      	b.n	8002b04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b02:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10d      	bne.n	8002b26 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b0a:	4b4a      	ldr	r3, [pc, #296]	; (8002c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6819      	ldr	r1, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	011b      	lsls	r3, r3, #4
 8002b1e:	430b      	orrs	r3, r1
 8002b20:	4944      	ldr	r1, [pc, #272]	; (8002c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d17d      	bne.n	8002c28 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b2c:	4b41      	ldr	r3, [pc, #260]	; (8002c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a40      	ldr	r2, [pc, #256]	; (8002c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b38:	f7fe fabc 	bl	80010b4 <HAL_GetTick>
 8002b3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b3e:	e009      	b.n	8002b54 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b40:	f7fe fab8 	bl	80010b4 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d902      	bls.n	8002b54 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	73fb      	strb	r3, [r7, #15]
        break;
 8002b52:	e005      	b.n	8002b60 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b54:	4b37      	ldr	r3, [pc, #220]	; (8002c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1ef      	bne.n	8002b40 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d160      	bne.n	8002c28 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d111      	bne.n	8002b90 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b6c:	4b31      	ldr	r3, [pc, #196]	; (8002c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6892      	ldr	r2, [r2, #8]
 8002b7c:	0211      	lsls	r1, r2, #8
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	68d2      	ldr	r2, [r2, #12]
 8002b82:	0912      	lsrs	r2, r2, #4
 8002b84:	0452      	lsls	r2, r2, #17
 8002b86:	430a      	orrs	r2, r1
 8002b88:	492a      	ldr	r1, [pc, #168]	; (8002c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	610b      	str	r3, [r1, #16]
 8002b8e:	e027      	b.n	8002be0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d112      	bne.n	8002bbc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b96:	4b27      	ldr	r3, [pc, #156]	; (8002c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002b9e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6892      	ldr	r2, [r2, #8]
 8002ba6:	0211      	lsls	r1, r2, #8
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6912      	ldr	r2, [r2, #16]
 8002bac:	0852      	lsrs	r2, r2, #1
 8002bae:	3a01      	subs	r2, #1
 8002bb0:	0552      	lsls	r2, r2, #21
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	491f      	ldr	r1, [pc, #124]	; (8002c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	610b      	str	r3, [r1, #16]
 8002bba:	e011      	b.n	8002be0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bbc:	4b1d      	ldr	r3, [pc, #116]	; (8002c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002bc4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6892      	ldr	r2, [r2, #8]
 8002bcc:	0211      	lsls	r1, r2, #8
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6952      	ldr	r2, [r2, #20]
 8002bd2:	0852      	lsrs	r2, r2, #1
 8002bd4:	3a01      	subs	r2, #1
 8002bd6:	0652      	lsls	r2, r2, #25
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	4916      	ldr	r1, [pc, #88]	; (8002c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002be0:	4b14      	ldr	r3, [pc, #80]	; (8002c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a13      	ldr	r2, [pc, #76]	; (8002c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bec:	f7fe fa62 	bl	80010b4 <HAL_GetTick>
 8002bf0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bf2:	e009      	b.n	8002c08 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bf4:	f7fe fa5e 	bl	80010b4 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d902      	bls.n	8002c08 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	73fb      	strb	r3, [r7, #15]
          break;
 8002c06:	e005      	b.n	8002c14 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c08:	4b0a      	ldr	r3, [pc, #40]	; (8002c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d0ef      	beq.n	8002bf4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d106      	bne.n	8002c28 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c1a:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c1c:	691a      	ldr	r2, [r3, #16]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	4904      	ldr	r1, [pc, #16]	; (8002c34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40021000 	.word	0x40021000

08002c38 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c42:	2300      	movs	r3, #0
 8002c44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c46:	4b6a      	ldr	r3, [pc, #424]	; (8002df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d018      	beq.n	8002c84 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c52:	4b67      	ldr	r3, [pc, #412]	; (8002df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f003 0203 	and.w	r2, r3, #3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d10d      	bne.n	8002c7e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
       ||
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d009      	beq.n	8002c7e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c6a:	4b61      	ldr	r3, [pc, #388]	; (8002df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	091b      	lsrs	r3, r3, #4
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	1c5a      	adds	r2, r3, #1
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
       ||
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d047      	beq.n	8002d0e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	73fb      	strb	r3, [r7, #15]
 8002c82:	e044      	b.n	8002d0e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d018      	beq.n	8002cbe <RCCEx_PLLSAI2_Config+0x86>
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d825      	bhi.n	8002cdc <RCCEx_PLLSAI2_Config+0xa4>
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d002      	beq.n	8002c9a <RCCEx_PLLSAI2_Config+0x62>
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d009      	beq.n	8002cac <RCCEx_PLLSAI2_Config+0x74>
 8002c98:	e020      	b.n	8002cdc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c9a:	4b55      	ldr	r3, [pc, #340]	; (8002df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d11d      	bne.n	8002ce2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002caa:	e01a      	b.n	8002ce2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cac:	4b50      	ldr	r3, [pc, #320]	; (8002df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d116      	bne.n	8002ce6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cbc:	e013      	b.n	8002ce6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cbe:	4b4c      	ldr	r3, [pc, #304]	; (8002df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10f      	bne.n	8002cea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cca:	4b49      	ldr	r3, [pc, #292]	; (8002df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d109      	bne.n	8002cea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cda:	e006      	b.n	8002cea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	73fb      	strb	r3, [r7, #15]
      break;
 8002ce0:	e004      	b.n	8002cec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ce2:	bf00      	nop
 8002ce4:	e002      	b.n	8002cec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ce6:	bf00      	nop
 8002ce8:	e000      	b.n	8002cec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002cea:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10d      	bne.n	8002d0e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002cf2:	4b3f      	ldr	r3, [pc, #252]	; (8002df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6819      	ldr	r1, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	3b01      	subs	r3, #1
 8002d04:	011b      	lsls	r3, r3, #4
 8002d06:	430b      	orrs	r3, r1
 8002d08:	4939      	ldr	r1, [pc, #228]	; (8002df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d167      	bne.n	8002de4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d14:	4b36      	ldr	r3, [pc, #216]	; (8002df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a35      	ldr	r2, [pc, #212]	; (8002df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d20:	f7fe f9c8 	bl	80010b4 <HAL_GetTick>
 8002d24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d26:	e009      	b.n	8002d3c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d28:	f7fe f9c4 	bl	80010b4 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d902      	bls.n	8002d3c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	73fb      	strb	r3, [r7, #15]
        break;
 8002d3a:	e005      	b.n	8002d48 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d3c:	4b2c      	ldr	r3, [pc, #176]	; (8002df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1ef      	bne.n	8002d28 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d14a      	bne.n	8002de4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d111      	bne.n	8002d78 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d54:	4b26      	ldr	r3, [pc, #152]	; (8002df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6892      	ldr	r2, [r2, #8]
 8002d64:	0211      	lsls	r1, r2, #8
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	68d2      	ldr	r2, [r2, #12]
 8002d6a:	0912      	lsrs	r2, r2, #4
 8002d6c:	0452      	lsls	r2, r2, #17
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	491f      	ldr	r1, [pc, #124]	; (8002df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	614b      	str	r3, [r1, #20]
 8002d76:	e011      	b.n	8002d9c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d78:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6892      	ldr	r2, [r2, #8]
 8002d88:	0211      	lsls	r1, r2, #8
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6912      	ldr	r2, [r2, #16]
 8002d8e:	0852      	lsrs	r2, r2, #1
 8002d90:	3a01      	subs	r2, #1
 8002d92:	0652      	lsls	r2, r2, #25
 8002d94:	430a      	orrs	r2, r1
 8002d96:	4916      	ldr	r1, [pc, #88]	; (8002df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d9c:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a13      	ldr	r2, [pc, #76]	; (8002df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da8:	f7fe f984 	bl	80010b4 <HAL_GetTick>
 8002dac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002dae:	e009      	b.n	8002dc4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002db0:	f7fe f980 	bl	80010b4 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d902      	bls.n	8002dc4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	73fb      	strb	r3, [r7, #15]
          break;
 8002dc2:	e005      	b.n	8002dd0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002dc4:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0ef      	beq.n	8002db0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d106      	bne.n	8002de4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002dd6:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dd8:	695a      	ldr	r2, [r3, #20]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	4904      	ldr	r1, [pc, #16]	; (8002df0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40021000 	.word	0x40021000

08002df4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e040      	b.n	8002e88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d106      	bne.n	8002e1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7fd ff18 	bl	8000c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2224      	movs	r2, #36	; 0x24
 8002e20:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 0201 	bic.w	r2, r2, #1
 8002e30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 fc86 	bl	8003744 <UART_SetConfig>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d101      	bne.n	8002e42 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e022      	b.n	8002e88 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d002      	beq.n	8002e50 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 ff04 	bl	8003c58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0201 	orr.w	r2, r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 ff8b 	bl	8003d9c <UART_CheckIdleState>
 8002e86:	4603      	mov	r3, r0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b08a      	sub	sp, #40	; 0x28
 8002e94:	af02      	add	r7, sp, #8
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	603b      	str	r3, [r7, #0]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ea4:	2b20      	cmp	r3, #32
 8002ea6:	f040 8082 	bne.w	8002fae <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d002      	beq.n	8002eb6 <HAL_UART_Transmit+0x26>
 8002eb0:	88fb      	ldrh	r3, [r7, #6]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e07a      	b.n	8002fb0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d101      	bne.n	8002ec8 <HAL_UART_Transmit+0x38>
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	e073      	b.n	8002fb0 <HAL_UART_Transmit+0x120>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2221      	movs	r2, #33	; 0x21
 8002edc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ede:	f7fe f8e9 	bl	80010b4 <HAL_GetTick>
 8002ee2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	88fa      	ldrh	r2, [r7, #6]
 8002ee8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	88fa      	ldrh	r2, [r7, #6]
 8002ef0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002efc:	d108      	bne.n	8002f10 <HAL_UART_Transmit+0x80>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d104      	bne.n	8002f10 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002f06:	2300      	movs	r3, #0
 8002f08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	61bb      	str	r3, [r7, #24]
 8002f0e:	e003      	b.n	8002f18 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f14:	2300      	movs	r3, #0
 8002f16:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002f20:	e02d      	b.n	8002f7e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2180      	movs	r1, #128	; 0x80
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 ff7e 	bl	8003e2e <UART_WaitOnFlagUntilTimeout>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e039      	b.n	8002fb0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10b      	bne.n	8002f5a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	881a      	ldrh	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f4e:	b292      	uxth	r2, r2
 8002f50:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	3302      	adds	r3, #2
 8002f56:	61bb      	str	r3, [r7, #24]
 8002f58:	e008      	b.n	8002f6c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	781a      	ldrb	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	b292      	uxth	r2, r2
 8002f64:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1cb      	bne.n	8002f22 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2200      	movs	r2, #0
 8002f92:	2140      	movs	r1, #64	; 0x40
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f000 ff4a 	bl	8003e2e <UART_WaitOnFlagUntilTimeout>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e005      	b.n	8002fb0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	e000      	b.n	8002fb0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002fae:	2302      	movs	r3, #2
  }
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3720      	adds	r7, #32
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b08b      	sub	sp, #44	; 0x2c
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fca:	2b20      	cmp	r3, #32
 8002fcc:	d156      	bne.n	800307c <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d002      	beq.n	8002fda <HAL_UART_Transmit_IT+0x22>
 8002fd4:	88fb      	ldrh	r3, [r7, #6]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e04f      	b.n	800307e <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_UART_Transmit_IT+0x34>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e048      	b.n	800307e <HAL_UART_Transmit_IT+0xc6>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	88fa      	ldrh	r2, [r7, #6]
 8002ffe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	88fa      	ldrh	r2, [r7, #6]
 8003006:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2221      	movs	r2, #33	; 0x21
 800301c:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003026:	d107      	bne.n	8003038 <HAL_UART_Transmit_IT+0x80>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d103      	bne.n	8003038 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4a16      	ldr	r2, [pc, #88]	; (800308c <HAL_UART_Transmit_IT+0xd4>)
 8003034:	669a      	str	r2, [r3, #104]	; 0x68
 8003036:	e002      	b.n	800303e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4a15      	ldr	r2, [pc, #84]	; (8003090 <HAL_UART_Transmit_IT+0xd8>)
 800303c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	e853 3f00 	ldrex	r3, [r3]
 8003052:	613b      	str	r3, [r7, #16]
   return(result);
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800305a:	627b      	str	r3, [r7, #36]	; 0x24
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	461a      	mov	r2, r3
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	623b      	str	r3, [r7, #32]
 8003066:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003068:	69f9      	ldr	r1, [r7, #28]
 800306a:	6a3a      	ldr	r2, [r7, #32]
 800306c:	e841 2300 	strex	r3, r2, [r1]
 8003070:	61bb      	str	r3, [r7, #24]
   return(result);
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1e6      	bne.n	8003046 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003078:	2300      	movs	r3, #0
 800307a:	e000      	b.n	800307e <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800307c:	2302      	movs	r3, #2
  }
}
 800307e:	4618      	mov	r0, r3
 8003080:	372c      	adds	r7, #44	; 0x2c
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	080042f7 	.word	0x080042f7
 8003090:	0800423f 	.word	0x0800423f

08003094 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b08a      	sub	sp, #40	; 0x28
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	4613      	mov	r3, r2
 80030a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030a6:	2b20      	cmp	r3, #32
 80030a8:	d142      	bne.n	8003130 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d002      	beq.n	80030b6 <HAL_UART_Receive_IT+0x22>
 80030b0:	88fb      	ldrh	r3, [r7, #6]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e03b      	b.n	8003132 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <HAL_UART_Receive_IT+0x34>
 80030c4:	2302      	movs	r3, #2
 80030c6:	e034      	b.n	8003132 <HAL_UART_Receive_IT+0x9e>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a18      	ldr	r2, [pc, #96]	; (800313c <HAL_UART_Receive_IT+0xa8>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d01f      	beq.n	8003120 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d018      	beq.n	8003120 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	e853 3f00 	ldrex	r3, [r3]
 80030fa:	613b      	str	r3, [r7, #16]
   return(result);
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003102:	627b      	str	r3, [r7, #36]	; 0x24
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	461a      	mov	r2, r3
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	623b      	str	r3, [r7, #32]
 800310e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003110:	69f9      	ldr	r1, [r7, #28]
 8003112:	6a3a      	ldr	r2, [r7, #32]
 8003114:	e841 2300 	strex	r3, r2, [r1]
 8003118:	61bb      	str	r3, [r7, #24]
   return(result);
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1e6      	bne.n	80030ee <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003120:	88fb      	ldrh	r3, [r7, #6]
 8003122:	461a      	mov	r2, r3
 8003124:	68b9      	ldr	r1, [r7, #8]
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 ff46 	bl	8003fb8 <UART_Start_Receive_IT>
 800312c:	4603      	mov	r3, r0
 800312e:	e000      	b.n	8003132 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003130:	2302      	movs	r3, #2
  }
}
 8003132:	4618      	mov	r0, r3
 8003134:	3728      	adds	r7, #40	; 0x28
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40008000 	.word	0x40008000

08003140 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b0ba      	sub	sp, #232	; 0xe8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003166:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800316a:	f640 030f 	movw	r3, #2063	; 0x80f
 800316e:	4013      	ands	r3, r2
 8003170:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003174:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003178:	2b00      	cmp	r3, #0
 800317a:	d115      	bne.n	80031a8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800317c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003180:	f003 0320 	and.w	r3, r3, #32
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00f      	beq.n	80031a8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800318c:	f003 0320 	and.w	r3, r3, #32
 8003190:	2b00      	cmp	r3, #0
 8003192:	d009      	beq.n	80031a8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 82a6 	beq.w	80036ea <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	4798      	blx	r3
      }
      return;
 80031a6:	e2a0      	b.n	80036ea <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80031a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 8117 	beq.w	80033e0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80031b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d106      	bne.n	80031cc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80031be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80031c2:	4b85      	ldr	r3, [pc, #532]	; (80033d8 <HAL_UART_IRQHandler+0x298>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 810a 	beq.w	80033e0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80031cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d011      	beq.n	80031fc <HAL_UART_IRQHandler+0xbc>
 80031d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00b      	beq.n	80031fc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2201      	movs	r2, #1
 80031ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031f2:	f043 0201 	orr.w	r2, r3, #1
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d011      	beq.n	800322c <HAL_UART_IRQHandler+0xec>
 8003208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00b      	beq.n	800322c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2202      	movs	r2, #2
 800321a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003222:	f043 0204 	orr.w	r2, r3, #4
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800322c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	d011      	beq.n	800325c <HAL_UART_IRQHandler+0x11c>
 8003238:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00b      	beq.n	800325c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2204      	movs	r2, #4
 800324a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003252:	f043 0202 	orr.w	r2, r3, #2
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800325c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003260:	f003 0308 	and.w	r3, r3, #8
 8003264:	2b00      	cmp	r3, #0
 8003266:	d017      	beq.n	8003298 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800326c:	f003 0320 	and.w	r3, r3, #32
 8003270:	2b00      	cmp	r3, #0
 8003272:	d105      	bne.n	8003280 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003278:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00b      	beq.n	8003298 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2208      	movs	r2, #8
 8003286:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800328e:	f043 0208 	orr.w	r2, r3, #8
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800329c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d012      	beq.n	80032ca <HAL_UART_IRQHandler+0x18a>
 80032a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00c      	beq.n	80032ca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032c0:	f043 0220 	orr.w	r2, r3, #32
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 820c 	beq.w	80036ee <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80032d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032da:	f003 0320 	and.w	r3, r3, #32
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00d      	beq.n	80032fe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032e6:	f003 0320 	and.w	r3, r3, #32
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d007      	beq.n	80032fe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003304:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003312:	2b40      	cmp	r3, #64	; 0x40
 8003314:	d005      	beq.n	8003322 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003316:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800331a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800331e:	2b00      	cmp	r3, #0
 8003320:	d04f      	beq.n	80033c2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 ff12 	bl	800414c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003332:	2b40      	cmp	r3, #64	; 0x40
 8003334:	d141      	bne.n	80033ba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	3308      	adds	r3, #8
 800333c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003340:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003344:	e853 3f00 	ldrex	r3, [r3]
 8003348:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800334c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003354:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	3308      	adds	r3, #8
 800335e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003362:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003366:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800336e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003372:	e841 2300 	strex	r3, r2, [r1]
 8003376:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800337a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1d9      	bne.n	8003336 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003386:	2b00      	cmp	r3, #0
 8003388:	d013      	beq.n	80033b2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338e:	4a13      	ldr	r2, [pc, #76]	; (80033dc <HAL_UART_IRQHandler+0x29c>)
 8003390:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003396:	4618      	mov	r0, r3
 8003398:	f7fd ffe7 	bl	800136a <HAL_DMA_Abort_IT>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d017      	beq.n	80033d2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80033ac:	4610      	mov	r0, r2
 80033ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b0:	e00f      	b.n	80033d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f9b0 	bl	8003718 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b8:	e00b      	b.n	80033d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f9ac 	bl	8003718 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c0:	e007      	b.n	80033d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f9a8 	bl	8003718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80033d0:	e18d      	b.n	80036ee <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d2:	bf00      	nop
    return;
 80033d4:	e18b      	b.n	80036ee <HAL_UART_IRQHandler+0x5ae>
 80033d6:	bf00      	nop
 80033d8:	04000120 	.word	0x04000120
 80033dc:	08004213 	.word	0x08004213

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	f040 8146 	bne.w	8003676 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80033ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ee:	f003 0310 	and.w	r3, r3, #16
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 813f 	beq.w	8003676 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80033f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 8138 	beq.w	8003676 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2210      	movs	r2, #16
 800340c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003418:	2b40      	cmp	r3, #64	; 0x40
 800341a:	f040 80b4 	bne.w	8003586 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800342a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 815f 	beq.w	80036f2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800343a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800343e:	429a      	cmp	r2, r3
 8003440:	f080 8157 	bcs.w	80036f2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800344a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0320 	and.w	r3, r3, #32
 800345a:	2b00      	cmp	r3, #0
 800345c:	f040 8085 	bne.w	800356a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003468:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800346c:	e853 3f00 	ldrex	r3, [r3]
 8003470:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003474:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800347c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	461a      	mov	r2, r3
 8003486:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800348a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800348e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003492:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003496:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800349a:	e841 2300 	strex	r3, r2, [r1]
 800349e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80034a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1da      	bne.n	8003460 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	3308      	adds	r3, #8
 80034b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034b4:	e853 3f00 	ldrex	r3, [r3]
 80034b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80034ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034bc:	f023 0301 	bic.w	r3, r3, #1
 80034c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	3308      	adds	r3, #8
 80034ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80034d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80034d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80034da:	e841 2300 	strex	r3, r2, [r1]
 80034de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80034e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1e1      	bne.n	80034aa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	3308      	adds	r3, #8
 80034ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034f0:	e853 3f00 	ldrex	r3, [r3]
 80034f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80034f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	3308      	adds	r3, #8
 8003506:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800350a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800350c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003510:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003512:	e841 2300 	strex	r3, r2, [r1]
 8003516:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003518:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1e3      	bne.n	80034e6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2220      	movs	r2, #32
 8003522:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003532:	e853 3f00 	ldrex	r3, [r3]
 8003536:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800353a:	f023 0310 	bic.w	r3, r3, #16
 800353e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	461a      	mov	r2, r3
 8003548:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800354c:	65bb      	str	r3, [r7, #88]	; 0x58
 800354e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003550:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003552:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003554:	e841 2300 	strex	r3, r2, [r1]
 8003558:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800355a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1e4      	bne.n	800352a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003564:	4618      	mov	r0, r3
 8003566:	f7fd fec2 	bl	80012ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003576:	b29b      	uxth	r3, r3
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	b29b      	uxth	r3, r3
 800357c:	4619      	mov	r1, r3
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f8d4 	bl	800372c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003584:	e0b5      	b.n	80036f2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003592:	b29b      	uxth	r3, r3
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 80a7 	beq.w	80036f6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80035a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 80a2 	beq.w	80036f6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ba:	e853 3f00 	ldrex	r3, [r3]
 80035be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80035c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	461a      	mov	r2, r3
 80035d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80035d4:	647b      	str	r3, [r7, #68]	; 0x44
 80035d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035dc:	e841 2300 	strex	r3, r2, [r1]
 80035e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1e4      	bne.n	80035b2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	3308      	adds	r3, #8
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	e853 3f00 	ldrex	r3, [r3]
 80035f6:	623b      	str	r3, [r7, #32]
   return(result);
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	f023 0301 	bic.w	r3, r3, #1
 80035fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	3308      	adds	r3, #8
 8003608:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800360c:	633a      	str	r2, [r7, #48]	; 0x30
 800360e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003610:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003614:	e841 2300 	strex	r3, r2, [r1]
 8003618:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800361a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1e3      	bne.n	80035e8 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2220      	movs	r2, #32
 8003624:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	e853 3f00 	ldrex	r3, [r3]
 800363e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f023 0310 	bic.w	r3, r3, #16
 8003646:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	461a      	mov	r2, r3
 8003650:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003654:	61fb      	str	r3, [r7, #28]
 8003656:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003658:	69b9      	ldr	r1, [r7, #24]
 800365a:	69fa      	ldr	r2, [r7, #28]
 800365c:	e841 2300 	strex	r3, r2, [r1]
 8003660:	617b      	str	r3, [r7, #20]
   return(result);
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1e4      	bne.n	8003632 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003668:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800366c:	4619      	mov	r1, r3
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f85c 	bl	800372c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003674:	e03f      	b.n	80036f6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800367a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00e      	beq.n	80036a0 <HAL_UART_IRQHandler+0x560>
 8003682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d008      	beq.n	80036a0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003696:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f001 f816 	bl	80046ca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800369e:	e02d      	b.n	80036fc <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80036a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00e      	beq.n	80036ca <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80036ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d008      	beq.n	80036ca <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d01c      	beq.n	80036fa <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	4798      	blx	r3
    }
    return;
 80036c8:	e017      	b.n	80036fa <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80036ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d012      	beq.n	80036fc <HAL_UART_IRQHandler+0x5bc>
 80036d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00c      	beq.n	80036fc <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 fe67 	bl	80043b6 <UART_EndTransmit_IT>
    return;
 80036e8:	e008      	b.n	80036fc <HAL_UART_IRQHandler+0x5bc>
      return;
 80036ea:	bf00      	nop
 80036ec:	e006      	b.n	80036fc <HAL_UART_IRQHandler+0x5bc>
    return;
 80036ee:	bf00      	nop
 80036f0:	e004      	b.n	80036fc <HAL_UART_IRQHandler+0x5bc>
      return;
 80036f2:	bf00      	nop
 80036f4:	e002      	b.n	80036fc <HAL_UART_IRQHandler+0x5bc>
      return;
 80036f6:	bf00      	nop
 80036f8:	e000      	b.n	80036fc <HAL_UART_IRQHandler+0x5bc>
    return;
 80036fa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80036fc:	37e8      	adds	r7, #232	; 0xe8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop

08003704 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003744:	b5b0      	push	{r4, r5, r7, lr}
 8003746:	b088      	sub	sp, #32
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800374c:	2300      	movs	r3, #0
 800374e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	69db      	ldr	r3, [r3, #28]
 8003764:	4313      	orrs	r3, r2
 8003766:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	4bad      	ldr	r3, [pc, #692]	; (8003a24 <UART_SetConfig+0x2e0>)
 8003770:	4013      	ands	r3, r2
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6812      	ldr	r2, [r2, #0]
 8003776:	69f9      	ldr	r1, [r7, #28]
 8003778:	430b      	orrs	r3, r1
 800377a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4aa2      	ldr	r2, [pc, #648]	; (8003a28 <UART_SetConfig+0x2e4>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d004      	beq.n	80037ac <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	69fa      	ldr	r2, [r7, #28]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	69fa      	ldr	r2, [r7, #28]
 80037bc:	430a      	orrs	r2, r1
 80037be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a99      	ldr	r2, [pc, #612]	; (8003a2c <UART_SetConfig+0x2e8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d121      	bne.n	800380e <UART_SetConfig+0xca>
 80037ca:	4b99      	ldr	r3, [pc, #612]	; (8003a30 <UART_SetConfig+0x2ec>)
 80037cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d0:	f003 0303 	and.w	r3, r3, #3
 80037d4:	2b03      	cmp	r3, #3
 80037d6:	d817      	bhi.n	8003808 <UART_SetConfig+0xc4>
 80037d8:	a201      	add	r2, pc, #4	; (adr r2, 80037e0 <UART_SetConfig+0x9c>)
 80037da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037de:	bf00      	nop
 80037e0:	080037f1 	.word	0x080037f1
 80037e4:	080037fd 	.word	0x080037fd
 80037e8:	080037f7 	.word	0x080037f7
 80037ec:	08003803 	.word	0x08003803
 80037f0:	2301      	movs	r3, #1
 80037f2:	76fb      	strb	r3, [r7, #27]
 80037f4:	e0e7      	b.n	80039c6 <UART_SetConfig+0x282>
 80037f6:	2302      	movs	r3, #2
 80037f8:	76fb      	strb	r3, [r7, #27]
 80037fa:	e0e4      	b.n	80039c6 <UART_SetConfig+0x282>
 80037fc:	2304      	movs	r3, #4
 80037fe:	76fb      	strb	r3, [r7, #27]
 8003800:	e0e1      	b.n	80039c6 <UART_SetConfig+0x282>
 8003802:	2308      	movs	r3, #8
 8003804:	76fb      	strb	r3, [r7, #27]
 8003806:	e0de      	b.n	80039c6 <UART_SetConfig+0x282>
 8003808:	2310      	movs	r3, #16
 800380a:	76fb      	strb	r3, [r7, #27]
 800380c:	e0db      	b.n	80039c6 <UART_SetConfig+0x282>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a88      	ldr	r2, [pc, #544]	; (8003a34 <UART_SetConfig+0x2f0>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d132      	bne.n	800387e <UART_SetConfig+0x13a>
 8003818:	4b85      	ldr	r3, [pc, #532]	; (8003a30 <UART_SetConfig+0x2ec>)
 800381a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381e:	f003 030c 	and.w	r3, r3, #12
 8003822:	2b0c      	cmp	r3, #12
 8003824:	d828      	bhi.n	8003878 <UART_SetConfig+0x134>
 8003826:	a201      	add	r2, pc, #4	; (adr r2, 800382c <UART_SetConfig+0xe8>)
 8003828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382c:	08003861 	.word	0x08003861
 8003830:	08003879 	.word	0x08003879
 8003834:	08003879 	.word	0x08003879
 8003838:	08003879 	.word	0x08003879
 800383c:	0800386d 	.word	0x0800386d
 8003840:	08003879 	.word	0x08003879
 8003844:	08003879 	.word	0x08003879
 8003848:	08003879 	.word	0x08003879
 800384c:	08003867 	.word	0x08003867
 8003850:	08003879 	.word	0x08003879
 8003854:	08003879 	.word	0x08003879
 8003858:	08003879 	.word	0x08003879
 800385c:	08003873 	.word	0x08003873
 8003860:	2300      	movs	r3, #0
 8003862:	76fb      	strb	r3, [r7, #27]
 8003864:	e0af      	b.n	80039c6 <UART_SetConfig+0x282>
 8003866:	2302      	movs	r3, #2
 8003868:	76fb      	strb	r3, [r7, #27]
 800386a:	e0ac      	b.n	80039c6 <UART_SetConfig+0x282>
 800386c:	2304      	movs	r3, #4
 800386e:	76fb      	strb	r3, [r7, #27]
 8003870:	e0a9      	b.n	80039c6 <UART_SetConfig+0x282>
 8003872:	2308      	movs	r3, #8
 8003874:	76fb      	strb	r3, [r7, #27]
 8003876:	e0a6      	b.n	80039c6 <UART_SetConfig+0x282>
 8003878:	2310      	movs	r3, #16
 800387a:	76fb      	strb	r3, [r7, #27]
 800387c:	e0a3      	b.n	80039c6 <UART_SetConfig+0x282>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a6d      	ldr	r2, [pc, #436]	; (8003a38 <UART_SetConfig+0x2f4>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d120      	bne.n	80038ca <UART_SetConfig+0x186>
 8003888:	4b69      	ldr	r3, [pc, #420]	; (8003a30 <UART_SetConfig+0x2ec>)
 800388a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003892:	2b30      	cmp	r3, #48	; 0x30
 8003894:	d013      	beq.n	80038be <UART_SetConfig+0x17a>
 8003896:	2b30      	cmp	r3, #48	; 0x30
 8003898:	d814      	bhi.n	80038c4 <UART_SetConfig+0x180>
 800389a:	2b20      	cmp	r3, #32
 800389c:	d009      	beq.n	80038b2 <UART_SetConfig+0x16e>
 800389e:	2b20      	cmp	r3, #32
 80038a0:	d810      	bhi.n	80038c4 <UART_SetConfig+0x180>
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d002      	beq.n	80038ac <UART_SetConfig+0x168>
 80038a6:	2b10      	cmp	r3, #16
 80038a8:	d006      	beq.n	80038b8 <UART_SetConfig+0x174>
 80038aa:	e00b      	b.n	80038c4 <UART_SetConfig+0x180>
 80038ac:	2300      	movs	r3, #0
 80038ae:	76fb      	strb	r3, [r7, #27]
 80038b0:	e089      	b.n	80039c6 <UART_SetConfig+0x282>
 80038b2:	2302      	movs	r3, #2
 80038b4:	76fb      	strb	r3, [r7, #27]
 80038b6:	e086      	b.n	80039c6 <UART_SetConfig+0x282>
 80038b8:	2304      	movs	r3, #4
 80038ba:	76fb      	strb	r3, [r7, #27]
 80038bc:	e083      	b.n	80039c6 <UART_SetConfig+0x282>
 80038be:	2308      	movs	r3, #8
 80038c0:	76fb      	strb	r3, [r7, #27]
 80038c2:	e080      	b.n	80039c6 <UART_SetConfig+0x282>
 80038c4:	2310      	movs	r3, #16
 80038c6:	76fb      	strb	r3, [r7, #27]
 80038c8:	e07d      	b.n	80039c6 <UART_SetConfig+0x282>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a5b      	ldr	r2, [pc, #364]	; (8003a3c <UART_SetConfig+0x2f8>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d120      	bne.n	8003916 <UART_SetConfig+0x1d2>
 80038d4:	4b56      	ldr	r3, [pc, #344]	; (8003a30 <UART_SetConfig+0x2ec>)
 80038d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80038de:	2bc0      	cmp	r3, #192	; 0xc0
 80038e0:	d013      	beq.n	800390a <UART_SetConfig+0x1c6>
 80038e2:	2bc0      	cmp	r3, #192	; 0xc0
 80038e4:	d814      	bhi.n	8003910 <UART_SetConfig+0x1cc>
 80038e6:	2b80      	cmp	r3, #128	; 0x80
 80038e8:	d009      	beq.n	80038fe <UART_SetConfig+0x1ba>
 80038ea:	2b80      	cmp	r3, #128	; 0x80
 80038ec:	d810      	bhi.n	8003910 <UART_SetConfig+0x1cc>
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d002      	beq.n	80038f8 <UART_SetConfig+0x1b4>
 80038f2:	2b40      	cmp	r3, #64	; 0x40
 80038f4:	d006      	beq.n	8003904 <UART_SetConfig+0x1c0>
 80038f6:	e00b      	b.n	8003910 <UART_SetConfig+0x1cc>
 80038f8:	2300      	movs	r3, #0
 80038fa:	76fb      	strb	r3, [r7, #27]
 80038fc:	e063      	b.n	80039c6 <UART_SetConfig+0x282>
 80038fe:	2302      	movs	r3, #2
 8003900:	76fb      	strb	r3, [r7, #27]
 8003902:	e060      	b.n	80039c6 <UART_SetConfig+0x282>
 8003904:	2304      	movs	r3, #4
 8003906:	76fb      	strb	r3, [r7, #27]
 8003908:	e05d      	b.n	80039c6 <UART_SetConfig+0x282>
 800390a:	2308      	movs	r3, #8
 800390c:	76fb      	strb	r3, [r7, #27]
 800390e:	e05a      	b.n	80039c6 <UART_SetConfig+0x282>
 8003910:	2310      	movs	r3, #16
 8003912:	76fb      	strb	r3, [r7, #27]
 8003914:	e057      	b.n	80039c6 <UART_SetConfig+0x282>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a49      	ldr	r2, [pc, #292]	; (8003a40 <UART_SetConfig+0x2fc>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d125      	bne.n	800396c <UART_SetConfig+0x228>
 8003920:	4b43      	ldr	r3, [pc, #268]	; (8003a30 <UART_SetConfig+0x2ec>)
 8003922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800392a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800392e:	d017      	beq.n	8003960 <UART_SetConfig+0x21c>
 8003930:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003934:	d817      	bhi.n	8003966 <UART_SetConfig+0x222>
 8003936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800393a:	d00b      	beq.n	8003954 <UART_SetConfig+0x210>
 800393c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003940:	d811      	bhi.n	8003966 <UART_SetConfig+0x222>
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <UART_SetConfig+0x20a>
 8003946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800394a:	d006      	beq.n	800395a <UART_SetConfig+0x216>
 800394c:	e00b      	b.n	8003966 <UART_SetConfig+0x222>
 800394e:	2300      	movs	r3, #0
 8003950:	76fb      	strb	r3, [r7, #27]
 8003952:	e038      	b.n	80039c6 <UART_SetConfig+0x282>
 8003954:	2302      	movs	r3, #2
 8003956:	76fb      	strb	r3, [r7, #27]
 8003958:	e035      	b.n	80039c6 <UART_SetConfig+0x282>
 800395a:	2304      	movs	r3, #4
 800395c:	76fb      	strb	r3, [r7, #27]
 800395e:	e032      	b.n	80039c6 <UART_SetConfig+0x282>
 8003960:	2308      	movs	r3, #8
 8003962:	76fb      	strb	r3, [r7, #27]
 8003964:	e02f      	b.n	80039c6 <UART_SetConfig+0x282>
 8003966:	2310      	movs	r3, #16
 8003968:	76fb      	strb	r3, [r7, #27]
 800396a:	e02c      	b.n	80039c6 <UART_SetConfig+0x282>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a2d      	ldr	r2, [pc, #180]	; (8003a28 <UART_SetConfig+0x2e4>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d125      	bne.n	80039c2 <UART_SetConfig+0x27e>
 8003976:	4b2e      	ldr	r3, [pc, #184]	; (8003a30 <UART_SetConfig+0x2ec>)
 8003978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003980:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003984:	d017      	beq.n	80039b6 <UART_SetConfig+0x272>
 8003986:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800398a:	d817      	bhi.n	80039bc <UART_SetConfig+0x278>
 800398c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003990:	d00b      	beq.n	80039aa <UART_SetConfig+0x266>
 8003992:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003996:	d811      	bhi.n	80039bc <UART_SetConfig+0x278>
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <UART_SetConfig+0x260>
 800399c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039a0:	d006      	beq.n	80039b0 <UART_SetConfig+0x26c>
 80039a2:	e00b      	b.n	80039bc <UART_SetConfig+0x278>
 80039a4:	2300      	movs	r3, #0
 80039a6:	76fb      	strb	r3, [r7, #27]
 80039a8:	e00d      	b.n	80039c6 <UART_SetConfig+0x282>
 80039aa:	2302      	movs	r3, #2
 80039ac:	76fb      	strb	r3, [r7, #27]
 80039ae:	e00a      	b.n	80039c6 <UART_SetConfig+0x282>
 80039b0:	2304      	movs	r3, #4
 80039b2:	76fb      	strb	r3, [r7, #27]
 80039b4:	e007      	b.n	80039c6 <UART_SetConfig+0x282>
 80039b6:	2308      	movs	r3, #8
 80039b8:	76fb      	strb	r3, [r7, #27]
 80039ba:	e004      	b.n	80039c6 <UART_SetConfig+0x282>
 80039bc:	2310      	movs	r3, #16
 80039be:	76fb      	strb	r3, [r7, #27]
 80039c0:	e001      	b.n	80039c6 <UART_SetConfig+0x282>
 80039c2:	2310      	movs	r3, #16
 80039c4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a17      	ldr	r2, [pc, #92]	; (8003a28 <UART_SetConfig+0x2e4>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	f040 8087 	bne.w	8003ae0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039d2:	7efb      	ldrb	r3, [r7, #27]
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	d837      	bhi.n	8003a48 <UART_SetConfig+0x304>
 80039d8:	a201      	add	r2, pc, #4	; (adr r2, 80039e0 <UART_SetConfig+0x29c>)
 80039da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039de:	bf00      	nop
 80039e0:	08003a05 	.word	0x08003a05
 80039e4:	08003a49 	.word	0x08003a49
 80039e8:	08003a0d 	.word	0x08003a0d
 80039ec:	08003a49 	.word	0x08003a49
 80039f0:	08003a13 	.word	0x08003a13
 80039f4:	08003a49 	.word	0x08003a49
 80039f8:	08003a49 	.word	0x08003a49
 80039fc:	08003a49 	.word	0x08003a49
 8003a00:	08003a1b 	.word	0x08003a1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a04:	f7fe fcae 	bl	8002364 <HAL_RCC_GetPCLK1Freq>
 8003a08:	6178      	str	r0, [r7, #20]
        break;
 8003a0a:	e022      	b.n	8003a52 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a0c:	4b0d      	ldr	r3, [pc, #52]	; (8003a44 <UART_SetConfig+0x300>)
 8003a0e:	617b      	str	r3, [r7, #20]
        break;
 8003a10:	e01f      	b.n	8003a52 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a12:	f7fe fc0f 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 8003a16:	6178      	str	r0, [r7, #20]
        break;
 8003a18:	e01b      	b.n	8003a52 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a1e:	617b      	str	r3, [r7, #20]
        break;
 8003a20:	e017      	b.n	8003a52 <UART_SetConfig+0x30e>
 8003a22:	bf00      	nop
 8003a24:	efff69f3 	.word	0xefff69f3
 8003a28:	40008000 	.word	0x40008000
 8003a2c:	40013800 	.word	0x40013800
 8003a30:	40021000 	.word	0x40021000
 8003a34:	40004400 	.word	0x40004400
 8003a38:	40004800 	.word	0x40004800
 8003a3c:	40004c00 	.word	0x40004c00
 8003a40:	40005000 	.word	0x40005000
 8003a44:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	76bb      	strb	r3, [r7, #26]
        break;
 8003a50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 80f1 	beq.w	8003c3c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	4413      	add	r3, r2
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d305      	bcc.n	8003a76 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d902      	bls.n	8003a7c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	76bb      	strb	r3, [r7, #26]
 8003a7a:	e0df      	b.n	8003c3c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f04f 0100 	mov.w	r1, #0
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	020b      	lsls	r3, r1, #8
 8003a8e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003a92:	0202      	lsls	r2, r0, #8
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	6849      	ldr	r1, [r1, #4]
 8003a98:	0849      	lsrs	r1, r1, #1
 8003a9a:	4608      	mov	r0, r1
 8003a9c:	f04f 0100 	mov.w	r1, #0
 8003aa0:	1814      	adds	r4, r2, r0
 8003aa2:	eb43 0501 	adc.w	r5, r3, r1
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	f04f 0300 	mov.w	r3, #0
 8003ab0:	4620      	mov	r0, r4
 8003ab2:	4629      	mov	r1, r5
 8003ab4:	f7fc fbe4 	bl	8000280 <__aeabi_uldivmod>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	460b      	mov	r3, r1
 8003abc:	4613      	mov	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ac6:	d308      	bcc.n	8003ada <UART_SetConfig+0x396>
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ace:	d204      	bcs.n	8003ada <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	60da      	str	r2, [r3, #12]
 8003ad8:	e0b0      	b.n	8003c3c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	76bb      	strb	r3, [r7, #26]
 8003ade:	e0ad      	b.n	8003c3c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	69db      	ldr	r3, [r3, #28]
 8003ae4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ae8:	d15b      	bne.n	8003ba2 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8003aea:	7efb      	ldrb	r3, [r7, #27]
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d828      	bhi.n	8003b42 <UART_SetConfig+0x3fe>
 8003af0:	a201      	add	r2, pc, #4	; (adr r2, 8003af8 <UART_SetConfig+0x3b4>)
 8003af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af6:	bf00      	nop
 8003af8:	08003b1d 	.word	0x08003b1d
 8003afc:	08003b25 	.word	0x08003b25
 8003b00:	08003b2d 	.word	0x08003b2d
 8003b04:	08003b43 	.word	0x08003b43
 8003b08:	08003b33 	.word	0x08003b33
 8003b0c:	08003b43 	.word	0x08003b43
 8003b10:	08003b43 	.word	0x08003b43
 8003b14:	08003b43 	.word	0x08003b43
 8003b18:	08003b3b 	.word	0x08003b3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b1c:	f7fe fc22 	bl	8002364 <HAL_RCC_GetPCLK1Freq>
 8003b20:	6178      	str	r0, [r7, #20]
        break;
 8003b22:	e013      	b.n	8003b4c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b24:	f7fe fc34 	bl	8002390 <HAL_RCC_GetPCLK2Freq>
 8003b28:	6178      	str	r0, [r7, #20]
        break;
 8003b2a:	e00f      	b.n	8003b4c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b2c:	4b49      	ldr	r3, [pc, #292]	; (8003c54 <UART_SetConfig+0x510>)
 8003b2e:	617b      	str	r3, [r7, #20]
        break;
 8003b30:	e00c      	b.n	8003b4c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b32:	f7fe fb7f 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 8003b36:	6178      	str	r0, [r7, #20]
        break;
 8003b38:	e008      	b.n	8003b4c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b3e:	617b      	str	r3, [r7, #20]
        break;
 8003b40:	e004      	b.n	8003b4c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	76bb      	strb	r3, [r7, #26]
        break;
 8003b4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d074      	beq.n	8003c3c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	005a      	lsls	r2, r3, #1
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	085b      	lsrs	r3, r3, #1
 8003b5c:	441a      	add	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b66:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	2b0f      	cmp	r3, #15
 8003b6c:	d916      	bls.n	8003b9c <UART_SetConfig+0x458>
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b74:	d212      	bcs.n	8003b9c <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	f023 030f 	bic.w	r3, r3, #15
 8003b7e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	085b      	lsrs	r3, r3, #1
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	89fb      	ldrh	r3, [r7, #14]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	89fa      	ldrh	r2, [r7, #14]
 8003b98:	60da      	str	r2, [r3, #12]
 8003b9a:	e04f      	b.n	8003c3c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	76bb      	strb	r3, [r7, #26]
 8003ba0:	e04c      	b.n	8003c3c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ba2:	7efb      	ldrb	r3, [r7, #27]
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d828      	bhi.n	8003bfa <UART_SetConfig+0x4b6>
 8003ba8:	a201      	add	r2, pc, #4	; (adr r2, 8003bb0 <UART_SetConfig+0x46c>)
 8003baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bae:	bf00      	nop
 8003bb0:	08003bd5 	.word	0x08003bd5
 8003bb4:	08003bdd 	.word	0x08003bdd
 8003bb8:	08003be5 	.word	0x08003be5
 8003bbc:	08003bfb 	.word	0x08003bfb
 8003bc0:	08003beb 	.word	0x08003beb
 8003bc4:	08003bfb 	.word	0x08003bfb
 8003bc8:	08003bfb 	.word	0x08003bfb
 8003bcc:	08003bfb 	.word	0x08003bfb
 8003bd0:	08003bf3 	.word	0x08003bf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bd4:	f7fe fbc6 	bl	8002364 <HAL_RCC_GetPCLK1Freq>
 8003bd8:	6178      	str	r0, [r7, #20]
        break;
 8003bda:	e013      	b.n	8003c04 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bdc:	f7fe fbd8 	bl	8002390 <HAL_RCC_GetPCLK2Freq>
 8003be0:	6178      	str	r0, [r7, #20]
        break;
 8003be2:	e00f      	b.n	8003c04 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003be4:	4b1b      	ldr	r3, [pc, #108]	; (8003c54 <UART_SetConfig+0x510>)
 8003be6:	617b      	str	r3, [r7, #20]
        break;
 8003be8:	e00c      	b.n	8003c04 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bea:	f7fe fb23 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 8003bee:	6178      	str	r0, [r7, #20]
        break;
 8003bf0:	e008      	b.n	8003c04 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bf6:	617b      	str	r3, [r7, #20]
        break;
 8003bf8:	e004      	b.n	8003c04 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	76bb      	strb	r3, [r7, #26]
        break;
 8003c02:	bf00      	nop
    }

    if (pclk != 0U)
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d018      	beq.n	8003c3c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	085a      	lsrs	r2, r3, #1
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	441a      	add	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	2b0f      	cmp	r3, #15
 8003c22:	d909      	bls.n	8003c38 <UART_SetConfig+0x4f4>
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c2a:	d205      	bcs.n	8003c38 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	60da      	str	r2, [r3, #12]
 8003c36:	e001      	b.n	8003c3c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003c48:	7ebb      	ldrb	r3, [r7, #26]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3720      	adds	r7, #32
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bdb0      	pop	{r4, r5, r7, pc}
 8003c52:	bf00      	nop
 8003c54:	00f42400 	.word	0x00f42400

08003c58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00a      	beq.n	8003c82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00a      	beq.n	8003cc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	f003 0308 	and.w	r3, r3, #8
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	f003 0310 	and.w	r3, r3, #16
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00a      	beq.n	8003d0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	f003 0320 	and.w	r3, r3, #32
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d01a      	beq.n	8003d6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d56:	d10a      	bne.n	8003d6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00a      	beq.n	8003d90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	605a      	str	r2, [r3, #4]
  }
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af02      	add	r7, sp, #8
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dac:	f7fd f982 	bl	80010b4 <HAL_GetTick>
 8003db0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d10e      	bne.n	8003dde <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f82d 	bl	8003e2e <UART_WaitOnFlagUntilTimeout>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e023      	b.n	8003e26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b04      	cmp	r3, #4
 8003dea:	d10e      	bne.n	8003e0a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f817 	bl	8003e2e <UART_WaitOnFlagUntilTimeout>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e00d      	b.n	8003e26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2220      	movs	r2, #32
 8003e14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b09c      	sub	sp, #112	; 0x70
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	60f8      	str	r0, [r7, #12]
 8003e36:	60b9      	str	r1, [r7, #8]
 8003e38:	603b      	str	r3, [r7, #0]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e3e:	e0a5      	b.n	8003f8c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e46:	f000 80a1 	beq.w	8003f8c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e4a:	f7fd f933 	bl	80010b4 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d302      	bcc.n	8003e60 <UART_WaitOnFlagUntilTimeout+0x32>
 8003e5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d13e      	bne.n	8003ede <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e68:	e853 3f00 	ldrex	r3, [r3]
 8003e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e74:	667b      	str	r3, [r7, #100]	; 0x64
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e80:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003e84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e86:	e841 2300 	strex	r3, r2, [r1]
 8003e8a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1e6      	bne.n	8003e60 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	3308      	adds	r3, #8
 8003e98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e9c:	e853 3f00 	ldrex	r3, [r3]
 8003ea0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea4:	f023 0301 	bic.w	r3, r3, #1
 8003ea8:	663b      	str	r3, [r7, #96]	; 0x60
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	3308      	adds	r3, #8
 8003eb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003eb2:	64ba      	str	r2, [r7, #72]	; 0x48
 8003eb4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003eb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003eba:	e841 2300 	strex	r3, r2, [r1]
 8003ebe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1e5      	bne.n	8003e92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e067      	b.n	8003fae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d04f      	beq.n	8003f8c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ef6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003efa:	d147      	bne.n	8003f8c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f04:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0e:	e853 3f00 	ldrex	r3, [r3]
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	461a      	mov	r2, r3
 8003f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f24:	637b      	str	r3, [r7, #52]	; 0x34
 8003f26:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f2c:	e841 2300 	strex	r3, r2, [r1]
 8003f30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1e6      	bne.n	8003f06 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3308      	adds	r3, #8
 8003f3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	e853 3f00 	ldrex	r3, [r3]
 8003f46:	613b      	str	r3, [r7, #16]
   return(result);
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f023 0301 	bic.w	r3, r3, #1
 8003f4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	3308      	adds	r3, #8
 8003f56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f58:	623a      	str	r2, [r7, #32]
 8003f5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5c:	69f9      	ldr	r1, [r7, #28]
 8003f5e:	6a3a      	ldr	r2, [r7, #32]
 8003f60:	e841 2300 	strex	r3, r2, [r1]
 8003f64:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1e5      	bne.n	8003f38 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2220      	movs	r2, #32
 8003f76:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e010      	b.n	8003fae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	69da      	ldr	r2, [r3, #28]
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	4013      	ands	r3, r2
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	bf0c      	ite	eq
 8003f9c:	2301      	moveq	r3, #1
 8003f9e:	2300      	movne	r3, #0
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	79fb      	ldrb	r3, [r7, #7]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	f43f af4a 	beq.w	8003e40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3770      	adds	r7, #112	; 0x70
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
	...

08003fb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b097      	sub	sp, #92	; 0x5c
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	88fa      	ldrh	r2, [r7, #6]
 8003fd0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	88fa      	ldrh	r2, [r7, #6]
 8003fd8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fea:	d10e      	bne.n	800400a <UART_Start_Receive_IT+0x52>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d105      	bne.n	8004000 <UART_Start_Receive_IT+0x48>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003ffa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ffe:	e02d      	b.n	800405c <UART_Start_Receive_IT+0xa4>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	22ff      	movs	r2, #255	; 0xff
 8004004:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004008:	e028      	b.n	800405c <UART_Start_Receive_IT+0xa4>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10d      	bne.n	800402e <UART_Start_Receive_IT+0x76>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d104      	bne.n	8004024 <UART_Start_Receive_IT+0x6c>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	22ff      	movs	r2, #255	; 0xff
 800401e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004022:	e01b      	b.n	800405c <UART_Start_Receive_IT+0xa4>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	227f      	movs	r2, #127	; 0x7f
 8004028:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800402c:	e016      	b.n	800405c <UART_Start_Receive_IT+0xa4>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004036:	d10d      	bne.n	8004054 <UART_Start_Receive_IT+0x9c>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d104      	bne.n	800404a <UART_Start_Receive_IT+0x92>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	227f      	movs	r2, #127	; 0x7f
 8004044:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004048:	e008      	b.n	800405c <UART_Start_Receive_IT+0xa4>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	223f      	movs	r2, #63	; 0x3f
 800404e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004052:	e003      	b.n	800405c <UART_Start_Receive_IT+0xa4>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2222      	movs	r2, #34	; 0x22
 8004068:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	3308      	adds	r3, #8
 8004070:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004074:	e853 3f00 	ldrex	r3, [r3]
 8004078:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800407a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407c:	f043 0301 	orr.w	r3, r3, #1
 8004080:	657b      	str	r3, [r7, #84]	; 0x54
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	3308      	adds	r3, #8
 8004088:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800408a:	64ba      	str	r2, [r7, #72]	; 0x48
 800408c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004090:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004092:	e841 2300 	strex	r3, r2, [r1]
 8004096:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1e5      	bne.n	800406a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a6:	d107      	bne.n	80040b8 <UART_Start_Receive_IT+0x100>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d103      	bne.n	80040b8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4a24      	ldr	r2, [pc, #144]	; (8004144 <UART_Start_Receive_IT+0x18c>)
 80040b4:	665a      	str	r2, [r3, #100]	; 0x64
 80040b6:	e002      	b.n	80040be <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4a23      	ldr	r2, [pc, #140]	; (8004148 <UART_Start_Receive_IT+0x190>)
 80040bc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d019      	beq.n	8004102 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d6:	e853 3f00 	ldrex	r3, [r3]
 80040da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80040e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	461a      	mov	r2, r3
 80040ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040ec:	637b      	str	r3, [r7, #52]	; 0x34
 80040ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040f4:	e841 2300 	strex	r3, r2, [r1]
 80040f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1e6      	bne.n	80040ce <UART_Start_Receive_IT+0x116>
 8004100:	e018      	b.n	8004134 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	e853 3f00 	ldrex	r3, [r3]
 800410e:	613b      	str	r3, [r7, #16]
   return(result);
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f043 0320 	orr.w	r3, r3, #32
 8004116:	653b      	str	r3, [r7, #80]	; 0x50
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	461a      	mov	r2, r3
 800411e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004120:	623b      	str	r3, [r7, #32]
 8004122:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004124:	69f9      	ldr	r1, [r7, #28]
 8004126:	6a3a      	ldr	r2, [r7, #32]
 8004128:	e841 2300 	strex	r3, r2, [r1]
 800412c:	61bb      	str	r3, [r7, #24]
   return(result);
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1e6      	bne.n	8004102 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	375c      	adds	r7, #92	; 0x5c
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	0800456b 	.word	0x0800456b
 8004148:	0800440b 	.word	0x0800440b

0800414c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800414c:	b480      	push	{r7}
 800414e:	b095      	sub	sp, #84	; 0x54
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800415c:	e853 3f00 	ldrex	r3, [r3]
 8004160:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004164:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004168:	64fb      	str	r3, [r7, #76]	; 0x4c
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	461a      	mov	r2, r3
 8004170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004172:	643b      	str	r3, [r7, #64]	; 0x40
 8004174:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004176:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004178:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800417a:	e841 2300 	strex	r3, r2, [r1]
 800417e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1e6      	bne.n	8004154 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3308      	adds	r3, #8
 800418c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418e:	6a3b      	ldr	r3, [r7, #32]
 8004190:	e853 3f00 	ldrex	r3, [r3]
 8004194:	61fb      	str	r3, [r7, #28]
   return(result);
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	f023 0301 	bic.w	r3, r3, #1
 800419c:	64bb      	str	r3, [r7, #72]	; 0x48
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	3308      	adds	r3, #8
 80041a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041ae:	e841 2300 	strex	r3, r2, [r1]
 80041b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1e5      	bne.n	8004186 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d118      	bne.n	80041f4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	e853 3f00 	ldrex	r3, [r3]
 80041ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	f023 0310 	bic.w	r3, r3, #16
 80041d6:	647b      	str	r3, [r7, #68]	; 0x44
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	461a      	mov	r2, r3
 80041de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041e0:	61bb      	str	r3, [r7, #24]
 80041e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e4:	6979      	ldr	r1, [r7, #20]
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	e841 2300 	strex	r3, r2, [r1]
 80041ec:	613b      	str	r3, [r7, #16]
   return(result);
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1e6      	bne.n	80041c2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2220      	movs	r2, #32
 80041f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004206:	bf00      	nop
 8004208:	3754      	adds	r7, #84	; 0x54
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b084      	sub	sp, #16
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f7ff fa71 	bl	8003718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004236:	bf00      	nop
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800423e:	b480      	push	{r7}
 8004240:	b08f      	sub	sp, #60	; 0x3c
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800424a:	2b21      	cmp	r3, #33	; 0x21
 800424c:	d14d      	bne.n	80042ea <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004254:	b29b      	uxth	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d132      	bne.n	80042c0 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004260:	6a3b      	ldr	r3, [r7, #32]
 8004262:	e853 3f00 	ldrex	r3, [r3]
 8004266:	61fb      	str	r3, [r7, #28]
   return(result);
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800426e:	637b      	str	r3, [r7, #52]	; 0x34
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	461a      	mov	r2, r3
 8004276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800427a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800427e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004280:	e841 2300 	strex	r3, r2, [r1]
 8004284:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1e6      	bne.n	800425a <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	e853 3f00 	ldrex	r3, [r3]
 8004298:	60bb      	str	r3, [r7, #8]
   return(result);
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042a0:	633b      	str	r3, [r7, #48]	; 0x30
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	461a      	mov	r2, r3
 80042a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042aa:	61bb      	str	r3, [r7, #24]
 80042ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ae:	6979      	ldr	r1, [r7, #20]
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	e841 2300 	strex	r3, r2, [r1]
 80042b6:	613b      	str	r3, [r7, #16]
   return(result);
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1e6      	bne.n	800428c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80042be:	e014      	b.n	80042ea <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c4:	781a      	ldrb	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	b292      	uxth	r2, r2
 80042cc:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d2:	1c5a      	adds	r2, r3, #1
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80042de:	b29b      	uxth	r3, r3
 80042e0:	3b01      	subs	r3, #1
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80042ea:	bf00      	nop
 80042ec:	373c      	adds	r7, #60	; 0x3c
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80042f6:	b480      	push	{r7}
 80042f8:	b091      	sub	sp, #68	; 0x44
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004302:	2b21      	cmp	r3, #33	; 0x21
 8004304:	d151      	bne.n	80043aa <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800430c:	b29b      	uxth	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d132      	bne.n	8004378 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431a:	e853 3f00 	ldrex	r3, [r3]
 800431e:	623b      	str	r3, [r7, #32]
   return(result);
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004326:	63bb      	str	r3, [r7, #56]	; 0x38
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	461a      	mov	r2, r3
 800432e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004330:	633b      	str	r3, [r7, #48]	; 0x30
 8004332:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004334:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004336:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004338:	e841 2300 	strex	r3, r2, [r1]
 800433c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800433e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e6      	bne.n	8004312 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	e853 3f00 	ldrex	r3, [r3]
 8004350:	60fb      	str	r3, [r7, #12]
   return(result);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004358:	637b      	str	r3, [r7, #52]	; 0x34
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	461a      	mov	r2, r3
 8004360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004362:	61fb      	str	r3, [r7, #28]
 8004364:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004366:	69b9      	ldr	r1, [r7, #24]
 8004368:	69fa      	ldr	r2, [r7, #28]
 800436a:	e841 2300 	strex	r3, r2, [r1]
 800436e:	617b      	str	r3, [r7, #20]
   return(result);
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1e6      	bne.n	8004344 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004376:	e018      	b.n	80043aa <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800437c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800437e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004380:	881a      	ldrh	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800438a:	b292      	uxth	r2, r2
 800438c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004392:	1c9a      	adds	r2, r3, #2
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800439e:	b29b      	uxth	r3, r3
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80043aa:	bf00      	nop
 80043ac:	3744      	adds	r7, #68	; 0x44
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b088      	sub	sp, #32
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	e853 3f00 	ldrex	r3, [r3]
 80043ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043d2:	61fb      	str	r3, [r7, #28]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	461a      	mov	r2, r3
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	61bb      	str	r3, [r7, #24]
 80043de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e0:	6979      	ldr	r1, [r7, #20]
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	e841 2300 	strex	r3, r2, [r1]
 80043e8:	613b      	str	r3, [r7, #16]
   return(result);
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1e6      	bne.n	80043be <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2220      	movs	r2, #32
 80043f4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7ff f981 	bl	8003704 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004402:	bf00      	nop
 8004404:	3720      	adds	r7, #32
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b096      	sub	sp, #88	; 0x58
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004418:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004420:	2b22      	cmp	r3, #34	; 0x22
 8004422:	f040 8094 	bne.w	800454e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800442c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004430:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004434:	b2d9      	uxtb	r1, r3
 8004436:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800443a:	b2da      	uxtb	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004440:	400a      	ands	r2, r1
 8004442:	b2d2      	uxtb	r2, r2
 8004444:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004456:	b29b      	uxth	r3, r3
 8004458:	3b01      	subs	r3, #1
 800445a:	b29a      	uxth	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004468:	b29b      	uxth	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d179      	bne.n	8004562 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004476:	e853 3f00 	ldrex	r3, [r3]
 800447a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800447c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800447e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004482:	653b      	str	r3, [r7, #80]	; 0x50
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	461a      	mov	r2, r3
 800448a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800448c:	647b      	str	r3, [r7, #68]	; 0x44
 800448e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004490:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004492:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004494:	e841 2300 	strex	r3, r2, [r1]
 8004498:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800449a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1e6      	bne.n	800446e <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3308      	adds	r3, #8
 80044a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	e853 3f00 	ldrex	r3, [r3]
 80044ae:	623b      	str	r3, [r7, #32]
   return(result);
 80044b0:	6a3b      	ldr	r3, [r7, #32]
 80044b2:	f023 0301 	bic.w	r3, r3, #1
 80044b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	3308      	adds	r3, #8
 80044be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044c0:	633a      	str	r2, [r7, #48]	; 0x30
 80044c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044c8:	e841 2300 	strex	r3, r2, [r1]
 80044cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1e5      	bne.n	80044a0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2220      	movs	r2, #32
 80044d8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d12e      	bne.n	8004546 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	e853 3f00 	ldrex	r3, [r3]
 80044fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f023 0310 	bic.w	r3, r3, #16
 8004502:	64bb      	str	r3, [r7, #72]	; 0x48
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	461a      	mov	r2, r3
 800450a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800450c:	61fb      	str	r3, [r7, #28]
 800450e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004510:	69b9      	ldr	r1, [r7, #24]
 8004512:	69fa      	ldr	r2, [r7, #28]
 8004514:	e841 2300 	strex	r3, r2, [r1]
 8004518:	617b      	str	r3, [r7, #20]
   return(result);
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1e6      	bne.n	80044ee <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	f003 0310 	and.w	r3, r3, #16
 800452a:	2b10      	cmp	r3, #16
 800452c:	d103      	bne.n	8004536 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2210      	movs	r2, #16
 8004534:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800453c:	4619      	mov	r1, r3
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7ff f8f4 	bl	800372c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004544:	e00d      	b.n	8004562 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7fc fb18 	bl	8000b7c <HAL_UART_RxCpltCallback>
}
 800454c:	e009      	b.n	8004562 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	8b1b      	ldrh	r3, [r3, #24]
 8004554:	b29a      	uxth	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f042 0208 	orr.w	r2, r2, #8
 800455e:	b292      	uxth	r2, r2
 8004560:	831a      	strh	r2, [r3, #24]
}
 8004562:	bf00      	nop
 8004564:	3758      	adds	r7, #88	; 0x58
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b096      	sub	sp, #88	; 0x58
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004578:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004580:	2b22      	cmp	r3, #34	; 0x22
 8004582:	f040 8094 	bne.w	80046ae <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800458c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004594:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004596:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800459a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800459e:	4013      	ands	r3, r2
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045a4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045aa:	1c9a      	adds	r2, r3, #2
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	3b01      	subs	r3, #1
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d179      	bne.n	80046c2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d6:	e853 3f00 	ldrex	r3, [r3]
 80045da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	461a      	mov	r2, r3
 80045ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ec:	643b      	str	r3, [r7, #64]	; 0x40
 80045ee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045f4:	e841 2300 	strex	r3, r2, [r1]
 80045f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1e6      	bne.n	80045ce <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	3308      	adds	r3, #8
 8004606:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004608:	6a3b      	ldr	r3, [r7, #32]
 800460a:	e853 3f00 	ldrex	r3, [r3]
 800460e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	f023 0301 	bic.w	r3, r3, #1
 8004616:	64bb      	str	r3, [r7, #72]	; 0x48
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	3308      	adds	r3, #8
 800461e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004620:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004622:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004624:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004628:	e841 2300 	strex	r3, r2, [r1]
 800462c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1e5      	bne.n	8004600 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2220      	movs	r2, #32
 8004638:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004644:	2b01      	cmp	r3, #1
 8004646:	d12e      	bne.n	80046a6 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	e853 3f00 	ldrex	r3, [r3]
 800465a:	60bb      	str	r3, [r7, #8]
   return(result);
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f023 0310 	bic.w	r3, r3, #16
 8004662:	647b      	str	r3, [r7, #68]	; 0x44
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	461a      	mov	r2, r3
 800466a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800466c:	61bb      	str	r3, [r7, #24]
 800466e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004670:	6979      	ldr	r1, [r7, #20]
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	e841 2300 	strex	r3, r2, [r1]
 8004678:	613b      	str	r3, [r7, #16]
   return(result);
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1e6      	bne.n	800464e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	f003 0310 	and.w	r3, r3, #16
 800468a:	2b10      	cmp	r3, #16
 800468c:	d103      	bne.n	8004696 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2210      	movs	r2, #16
 8004694:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800469c:	4619      	mov	r1, r3
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7ff f844 	bl	800372c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80046a4:	e00d      	b.n	80046c2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7fc fa68 	bl	8000b7c <HAL_UART_RxCpltCallback>
}
 80046ac:	e009      	b.n	80046c2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	8b1b      	ldrh	r3, [r3, #24]
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0208 	orr.w	r2, r2, #8
 80046be:	b292      	uxth	r2, r2
 80046c0:	831a      	strh	r2, [r3, #24]
}
 80046c2:	bf00      	nop
 80046c4:	3758      	adds	r7, #88	; 0x58
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b083      	sub	sp, #12
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
	...

080046e0 <__errno>:
 80046e0:	4b01      	ldr	r3, [pc, #4]	; (80046e8 <__errno+0x8>)
 80046e2:	6818      	ldr	r0, [r3, #0]
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	2000002c 	.word	0x2000002c

080046ec <__libc_init_array>:
 80046ec:	b570      	push	{r4, r5, r6, lr}
 80046ee:	4d0d      	ldr	r5, [pc, #52]	; (8004724 <__libc_init_array+0x38>)
 80046f0:	4c0d      	ldr	r4, [pc, #52]	; (8004728 <__libc_init_array+0x3c>)
 80046f2:	1b64      	subs	r4, r4, r5
 80046f4:	10a4      	asrs	r4, r4, #2
 80046f6:	2600      	movs	r6, #0
 80046f8:	42a6      	cmp	r6, r4
 80046fa:	d109      	bne.n	8004710 <__libc_init_array+0x24>
 80046fc:	4d0b      	ldr	r5, [pc, #44]	; (800472c <__libc_init_array+0x40>)
 80046fe:	4c0c      	ldr	r4, [pc, #48]	; (8004730 <__libc_init_array+0x44>)
 8004700:	f000 ff76 	bl	80055f0 <_init>
 8004704:	1b64      	subs	r4, r4, r5
 8004706:	10a4      	asrs	r4, r4, #2
 8004708:	2600      	movs	r6, #0
 800470a:	42a6      	cmp	r6, r4
 800470c:	d105      	bne.n	800471a <__libc_init_array+0x2e>
 800470e:	bd70      	pop	{r4, r5, r6, pc}
 8004710:	f855 3b04 	ldr.w	r3, [r5], #4
 8004714:	4798      	blx	r3
 8004716:	3601      	adds	r6, #1
 8004718:	e7ee      	b.n	80046f8 <__libc_init_array+0xc>
 800471a:	f855 3b04 	ldr.w	r3, [r5], #4
 800471e:	4798      	blx	r3
 8004720:	3601      	adds	r6, #1
 8004722:	e7f2      	b.n	800470a <__libc_init_array+0x1e>
 8004724:	0800570c 	.word	0x0800570c
 8004728:	0800570c 	.word	0x0800570c
 800472c:	0800570c 	.word	0x0800570c
 8004730:	08005710 	.word	0x08005710

08004734 <memset>:
 8004734:	4402      	add	r2, r0
 8004736:	4603      	mov	r3, r0
 8004738:	4293      	cmp	r3, r2
 800473a:	d100      	bne.n	800473e <memset+0xa>
 800473c:	4770      	bx	lr
 800473e:	f803 1b01 	strb.w	r1, [r3], #1
 8004742:	e7f9      	b.n	8004738 <memset+0x4>

08004744 <iprintf>:
 8004744:	b40f      	push	{r0, r1, r2, r3}
 8004746:	4b0a      	ldr	r3, [pc, #40]	; (8004770 <iprintf+0x2c>)
 8004748:	b513      	push	{r0, r1, r4, lr}
 800474a:	681c      	ldr	r4, [r3, #0]
 800474c:	b124      	cbz	r4, 8004758 <iprintf+0x14>
 800474e:	69a3      	ldr	r3, [r4, #24]
 8004750:	b913      	cbnz	r3, 8004758 <iprintf+0x14>
 8004752:	4620      	mov	r0, r4
 8004754:	f000 f866 	bl	8004824 <__sinit>
 8004758:	ab05      	add	r3, sp, #20
 800475a:	9a04      	ldr	r2, [sp, #16]
 800475c:	68a1      	ldr	r1, [r4, #8]
 800475e:	9301      	str	r3, [sp, #4]
 8004760:	4620      	mov	r0, r4
 8004762:	f000 f983 	bl	8004a6c <_vfiprintf_r>
 8004766:	b002      	add	sp, #8
 8004768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800476c:	b004      	add	sp, #16
 800476e:	4770      	bx	lr
 8004770:	2000002c 	.word	0x2000002c

08004774 <std>:
 8004774:	2300      	movs	r3, #0
 8004776:	b510      	push	{r4, lr}
 8004778:	4604      	mov	r4, r0
 800477a:	e9c0 3300 	strd	r3, r3, [r0]
 800477e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004782:	6083      	str	r3, [r0, #8]
 8004784:	8181      	strh	r1, [r0, #12]
 8004786:	6643      	str	r3, [r0, #100]	; 0x64
 8004788:	81c2      	strh	r2, [r0, #14]
 800478a:	6183      	str	r3, [r0, #24]
 800478c:	4619      	mov	r1, r3
 800478e:	2208      	movs	r2, #8
 8004790:	305c      	adds	r0, #92	; 0x5c
 8004792:	f7ff ffcf 	bl	8004734 <memset>
 8004796:	4b05      	ldr	r3, [pc, #20]	; (80047ac <std+0x38>)
 8004798:	6263      	str	r3, [r4, #36]	; 0x24
 800479a:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <std+0x3c>)
 800479c:	62a3      	str	r3, [r4, #40]	; 0x28
 800479e:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <std+0x40>)
 80047a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80047a2:	4b05      	ldr	r3, [pc, #20]	; (80047b8 <std+0x44>)
 80047a4:	6224      	str	r4, [r4, #32]
 80047a6:	6323      	str	r3, [r4, #48]	; 0x30
 80047a8:	bd10      	pop	{r4, pc}
 80047aa:	bf00      	nop
 80047ac:	08005015 	.word	0x08005015
 80047b0:	08005037 	.word	0x08005037
 80047b4:	0800506f 	.word	0x0800506f
 80047b8:	08005093 	.word	0x08005093

080047bc <_cleanup_r>:
 80047bc:	4901      	ldr	r1, [pc, #4]	; (80047c4 <_cleanup_r+0x8>)
 80047be:	f000 b8af 	b.w	8004920 <_fwalk_reent>
 80047c2:	bf00      	nop
 80047c4:	0800536d 	.word	0x0800536d

080047c8 <__sfmoreglue>:
 80047c8:	b570      	push	{r4, r5, r6, lr}
 80047ca:	1e4a      	subs	r2, r1, #1
 80047cc:	2568      	movs	r5, #104	; 0x68
 80047ce:	4355      	muls	r5, r2
 80047d0:	460e      	mov	r6, r1
 80047d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80047d6:	f000 f8c5 	bl	8004964 <_malloc_r>
 80047da:	4604      	mov	r4, r0
 80047dc:	b140      	cbz	r0, 80047f0 <__sfmoreglue+0x28>
 80047de:	2100      	movs	r1, #0
 80047e0:	e9c0 1600 	strd	r1, r6, [r0]
 80047e4:	300c      	adds	r0, #12
 80047e6:	60a0      	str	r0, [r4, #8]
 80047e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80047ec:	f7ff ffa2 	bl	8004734 <memset>
 80047f0:	4620      	mov	r0, r4
 80047f2:	bd70      	pop	{r4, r5, r6, pc}

080047f4 <__sfp_lock_acquire>:
 80047f4:	4801      	ldr	r0, [pc, #4]	; (80047fc <__sfp_lock_acquire+0x8>)
 80047f6:	f000 b8b3 	b.w	8004960 <__retarget_lock_acquire_recursive>
 80047fa:	bf00      	nop
 80047fc:	20000164 	.word	0x20000164

08004800 <__sfp_lock_release>:
 8004800:	4801      	ldr	r0, [pc, #4]	; (8004808 <__sfp_lock_release+0x8>)
 8004802:	f000 b8ae 	b.w	8004962 <__retarget_lock_release_recursive>
 8004806:	bf00      	nop
 8004808:	20000164 	.word	0x20000164

0800480c <__sinit_lock_acquire>:
 800480c:	4801      	ldr	r0, [pc, #4]	; (8004814 <__sinit_lock_acquire+0x8>)
 800480e:	f000 b8a7 	b.w	8004960 <__retarget_lock_acquire_recursive>
 8004812:	bf00      	nop
 8004814:	2000015f 	.word	0x2000015f

08004818 <__sinit_lock_release>:
 8004818:	4801      	ldr	r0, [pc, #4]	; (8004820 <__sinit_lock_release+0x8>)
 800481a:	f000 b8a2 	b.w	8004962 <__retarget_lock_release_recursive>
 800481e:	bf00      	nop
 8004820:	2000015f 	.word	0x2000015f

08004824 <__sinit>:
 8004824:	b510      	push	{r4, lr}
 8004826:	4604      	mov	r4, r0
 8004828:	f7ff fff0 	bl	800480c <__sinit_lock_acquire>
 800482c:	69a3      	ldr	r3, [r4, #24]
 800482e:	b11b      	cbz	r3, 8004838 <__sinit+0x14>
 8004830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004834:	f7ff bff0 	b.w	8004818 <__sinit_lock_release>
 8004838:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800483c:	6523      	str	r3, [r4, #80]	; 0x50
 800483e:	4b13      	ldr	r3, [pc, #76]	; (800488c <__sinit+0x68>)
 8004840:	4a13      	ldr	r2, [pc, #76]	; (8004890 <__sinit+0x6c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	62a2      	str	r2, [r4, #40]	; 0x28
 8004846:	42a3      	cmp	r3, r4
 8004848:	bf04      	itt	eq
 800484a:	2301      	moveq	r3, #1
 800484c:	61a3      	streq	r3, [r4, #24]
 800484e:	4620      	mov	r0, r4
 8004850:	f000 f820 	bl	8004894 <__sfp>
 8004854:	6060      	str	r0, [r4, #4]
 8004856:	4620      	mov	r0, r4
 8004858:	f000 f81c 	bl	8004894 <__sfp>
 800485c:	60a0      	str	r0, [r4, #8]
 800485e:	4620      	mov	r0, r4
 8004860:	f000 f818 	bl	8004894 <__sfp>
 8004864:	2200      	movs	r2, #0
 8004866:	60e0      	str	r0, [r4, #12]
 8004868:	2104      	movs	r1, #4
 800486a:	6860      	ldr	r0, [r4, #4]
 800486c:	f7ff ff82 	bl	8004774 <std>
 8004870:	68a0      	ldr	r0, [r4, #8]
 8004872:	2201      	movs	r2, #1
 8004874:	2109      	movs	r1, #9
 8004876:	f7ff ff7d 	bl	8004774 <std>
 800487a:	68e0      	ldr	r0, [r4, #12]
 800487c:	2202      	movs	r2, #2
 800487e:	2112      	movs	r1, #18
 8004880:	f7ff ff78 	bl	8004774 <std>
 8004884:	2301      	movs	r3, #1
 8004886:	61a3      	str	r3, [r4, #24]
 8004888:	e7d2      	b.n	8004830 <__sinit+0xc>
 800488a:	bf00      	nop
 800488c:	0800566c 	.word	0x0800566c
 8004890:	080047bd 	.word	0x080047bd

08004894 <__sfp>:
 8004894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004896:	4607      	mov	r7, r0
 8004898:	f7ff ffac 	bl	80047f4 <__sfp_lock_acquire>
 800489c:	4b1e      	ldr	r3, [pc, #120]	; (8004918 <__sfp+0x84>)
 800489e:	681e      	ldr	r6, [r3, #0]
 80048a0:	69b3      	ldr	r3, [r6, #24]
 80048a2:	b913      	cbnz	r3, 80048aa <__sfp+0x16>
 80048a4:	4630      	mov	r0, r6
 80048a6:	f7ff ffbd 	bl	8004824 <__sinit>
 80048aa:	3648      	adds	r6, #72	; 0x48
 80048ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80048b0:	3b01      	subs	r3, #1
 80048b2:	d503      	bpl.n	80048bc <__sfp+0x28>
 80048b4:	6833      	ldr	r3, [r6, #0]
 80048b6:	b30b      	cbz	r3, 80048fc <__sfp+0x68>
 80048b8:	6836      	ldr	r6, [r6, #0]
 80048ba:	e7f7      	b.n	80048ac <__sfp+0x18>
 80048bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80048c0:	b9d5      	cbnz	r5, 80048f8 <__sfp+0x64>
 80048c2:	4b16      	ldr	r3, [pc, #88]	; (800491c <__sfp+0x88>)
 80048c4:	60e3      	str	r3, [r4, #12]
 80048c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80048ca:	6665      	str	r5, [r4, #100]	; 0x64
 80048cc:	f000 f847 	bl	800495e <__retarget_lock_init_recursive>
 80048d0:	f7ff ff96 	bl	8004800 <__sfp_lock_release>
 80048d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80048d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80048dc:	6025      	str	r5, [r4, #0]
 80048de:	61a5      	str	r5, [r4, #24]
 80048e0:	2208      	movs	r2, #8
 80048e2:	4629      	mov	r1, r5
 80048e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80048e8:	f7ff ff24 	bl	8004734 <memset>
 80048ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80048f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80048f4:	4620      	mov	r0, r4
 80048f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048f8:	3468      	adds	r4, #104	; 0x68
 80048fa:	e7d9      	b.n	80048b0 <__sfp+0x1c>
 80048fc:	2104      	movs	r1, #4
 80048fe:	4638      	mov	r0, r7
 8004900:	f7ff ff62 	bl	80047c8 <__sfmoreglue>
 8004904:	4604      	mov	r4, r0
 8004906:	6030      	str	r0, [r6, #0]
 8004908:	2800      	cmp	r0, #0
 800490a:	d1d5      	bne.n	80048b8 <__sfp+0x24>
 800490c:	f7ff ff78 	bl	8004800 <__sfp_lock_release>
 8004910:	230c      	movs	r3, #12
 8004912:	603b      	str	r3, [r7, #0]
 8004914:	e7ee      	b.n	80048f4 <__sfp+0x60>
 8004916:	bf00      	nop
 8004918:	0800566c 	.word	0x0800566c
 800491c:	ffff0001 	.word	0xffff0001

08004920 <_fwalk_reent>:
 8004920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004924:	4606      	mov	r6, r0
 8004926:	4688      	mov	r8, r1
 8004928:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800492c:	2700      	movs	r7, #0
 800492e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004932:	f1b9 0901 	subs.w	r9, r9, #1
 8004936:	d505      	bpl.n	8004944 <_fwalk_reent+0x24>
 8004938:	6824      	ldr	r4, [r4, #0]
 800493a:	2c00      	cmp	r4, #0
 800493c:	d1f7      	bne.n	800492e <_fwalk_reent+0xe>
 800493e:	4638      	mov	r0, r7
 8004940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004944:	89ab      	ldrh	r3, [r5, #12]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d907      	bls.n	800495a <_fwalk_reent+0x3a>
 800494a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800494e:	3301      	adds	r3, #1
 8004950:	d003      	beq.n	800495a <_fwalk_reent+0x3a>
 8004952:	4629      	mov	r1, r5
 8004954:	4630      	mov	r0, r6
 8004956:	47c0      	blx	r8
 8004958:	4307      	orrs	r7, r0
 800495a:	3568      	adds	r5, #104	; 0x68
 800495c:	e7e9      	b.n	8004932 <_fwalk_reent+0x12>

0800495e <__retarget_lock_init_recursive>:
 800495e:	4770      	bx	lr

08004960 <__retarget_lock_acquire_recursive>:
 8004960:	4770      	bx	lr

08004962 <__retarget_lock_release_recursive>:
 8004962:	4770      	bx	lr

08004964 <_malloc_r>:
 8004964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004966:	1ccd      	adds	r5, r1, #3
 8004968:	f025 0503 	bic.w	r5, r5, #3
 800496c:	3508      	adds	r5, #8
 800496e:	2d0c      	cmp	r5, #12
 8004970:	bf38      	it	cc
 8004972:	250c      	movcc	r5, #12
 8004974:	2d00      	cmp	r5, #0
 8004976:	4606      	mov	r6, r0
 8004978:	db01      	blt.n	800497e <_malloc_r+0x1a>
 800497a:	42a9      	cmp	r1, r5
 800497c:	d903      	bls.n	8004986 <_malloc_r+0x22>
 800497e:	230c      	movs	r3, #12
 8004980:	6033      	str	r3, [r6, #0]
 8004982:	2000      	movs	r0, #0
 8004984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004986:	f000 fda3 	bl	80054d0 <__malloc_lock>
 800498a:	4921      	ldr	r1, [pc, #132]	; (8004a10 <_malloc_r+0xac>)
 800498c:	680a      	ldr	r2, [r1, #0]
 800498e:	4614      	mov	r4, r2
 8004990:	b99c      	cbnz	r4, 80049ba <_malloc_r+0x56>
 8004992:	4f20      	ldr	r7, [pc, #128]	; (8004a14 <_malloc_r+0xb0>)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	b923      	cbnz	r3, 80049a2 <_malloc_r+0x3e>
 8004998:	4621      	mov	r1, r4
 800499a:	4630      	mov	r0, r6
 800499c:	f000 fb2a 	bl	8004ff4 <_sbrk_r>
 80049a0:	6038      	str	r0, [r7, #0]
 80049a2:	4629      	mov	r1, r5
 80049a4:	4630      	mov	r0, r6
 80049a6:	f000 fb25 	bl	8004ff4 <_sbrk_r>
 80049aa:	1c43      	adds	r3, r0, #1
 80049ac:	d123      	bne.n	80049f6 <_malloc_r+0x92>
 80049ae:	230c      	movs	r3, #12
 80049b0:	6033      	str	r3, [r6, #0]
 80049b2:	4630      	mov	r0, r6
 80049b4:	f000 fd92 	bl	80054dc <__malloc_unlock>
 80049b8:	e7e3      	b.n	8004982 <_malloc_r+0x1e>
 80049ba:	6823      	ldr	r3, [r4, #0]
 80049bc:	1b5b      	subs	r3, r3, r5
 80049be:	d417      	bmi.n	80049f0 <_malloc_r+0x8c>
 80049c0:	2b0b      	cmp	r3, #11
 80049c2:	d903      	bls.n	80049cc <_malloc_r+0x68>
 80049c4:	6023      	str	r3, [r4, #0]
 80049c6:	441c      	add	r4, r3
 80049c8:	6025      	str	r5, [r4, #0]
 80049ca:	e004      	b.n	80049d6 <_malloc_r+0x72>
 80049cc:	6863      	ldr	r3, [r4, #4]
 80049ce:	42a2      	cmp	r2, r4
 80049d0:	bf0c      	ite	eq
 80049d2:	600b      	streq	r3, [r1, #0]
 80049d4:	6053      	strne	r3, [r2, #4]
 80049d6:	4630      	mov	r0, r6
 80049d8:	f000 fd80 	bl	80054dc <__malloc_unlock>
 80049dc:	f104 000b 	add.w	r0, r4, #11
 80049e0:	1d23      	adds	r3, r4, #4
 80049e2:	f020 0007 	bic.w	r0, r0, #7
 80049e6:	1ac2      	subs	r2, r0, r3
 80049e8:	d0cc      	beq.n	8004984 <_malloc_r+0x20>
 80049ea:	1a1b      	subs	r3, r3, r0
 80049ec:	50a3      	str	r3, [r4, r2]
 80049ee:	e7c9      	b.n	8004984 <_malloc_r+0x20>
 80049f0:	4622      	mov	r2, r4
 80049f2:	6864      	ldr	r4, [r4, #4]
 80049f4:	e7cc      	b.n	8004990 <_malloc_r+0x2c>
 80049f6:	1cc4      	adds	r4, r0, #3
 80049f8:	f024 0403 	bic.w	r4, r4, #3
 80049fc:	42a0      	cmp	r0, r4
 80049fe:	d0e3      	beq.n	80049c8 <_malloc_r+0x64>
 8004a00:	1a21      	subs	r1, r4, r0
 8004a02:	4630      	mov	r0, r6
 8004a04:	f000 faf6 	bl	8004ff4 <_sbrk_r>
 8004a08:	3001      	adds	r0, #1
 8004a0a:	d1dd      	bne.n	80049c8 <_malloc_r+0x64>
 8004a0c:	e7cf      	b.n	80049ae <_malloc_r+0x4a>
 8004a0e:	bf00      	nop
 8004a10:	200000b4 	.word	0x200000b4
 8004a14:	200000b8 	.word	0x200000b8

08004a18 <__sfputc_r>:
 8004a18:	6893      	ldr	r3, [r2, #8]
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	b410      	push	{r4}
 8004a20:	6093      	str	r3, [r2, #8]
 8004a22:	da08      	bge.n	8004a36 <__sfputc_r+0x1e>
 8004a24:	6994      	ldr	r4, [r2, #24]
 8004a26:	42a3      	cmp	r3, r4
 8004a28:	db01      	blt.n	8004a2e <__sfputc_r+0x16>
 8004a2a:	290a      	cmp	r1, #10
 8004a2c:	d103      	bne.n	8004a36 <__sfputc_r+0x1e>
 8004a2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a32:	f000 bb33 	b.w	800509c <__swbuf_r>
 8004a36:	6813      	ldr	r3, [r2, #0]
 8004a38:	1c58      	adds	r0, r3, #1
 8004a3a:	6010      	str	r0, [r2, #0]
 8004a3c:	7019      	strb	r1, [r3, #0]
 8004a3e:	4608      	mov	r0, r1
 8004a40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <__sfputs_r>:
 8004a46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a48:	4606      	mov	r6, r0
 8004a4a:	460f      	mov	r7, r1
 8004a4c:	4614      	mov	r4, r2
 8004a4e:	18d5      	adds	r5, r2, r3
 8004a50:	42ac      	cmp	r4, r5
 8004a52:	d101      	bne.n	8004a58 <__sfputs_r+0x12>
 8004a54:	2000      	movs	r0, #0
 8004a56:	e007      	b.n	8004a68 <__sfputs_r+0x22>
 8004a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a5c:	463a      	mov	r2, r7
 8004a5e:	4630      	mov	r0, r6
 8004a60:	f7ff ffda 	bl	8004a18 <__sfputc_r>
 8004a64:	1c43      	adds	r3, r0, #1
 8004a66:	d1f3      	bne.n	8004a50 <__sfputs_r+0xa>
 8004a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a6c <_vfiprintf_r>:
 8004a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a70:	460d      	mov	r5, r1
 8004a72:	b09d      	sub	sp, #116	; 0x74
 8004a74:	4614      	mov	r4, r2
 8004a76:	4698      	mov	r8, r3
 8004a78:	4606      	mov	r6, r0
 8004a7a:	b118      	cbz	r0, 8004a84 <_vfiprintf_r+0x18>
 8004a7c:	6983      	ldr	r3, [r0, #24]
 8004a7e:	b90b      	cbnz	r3, 8004a84 <_vfiprintf_r+0x18>
 8004a80:	f7ff fed0 	bl	8004824 <__sinit>
 8004a84:	4b89      	ldr	r3, [pc, #548]	; (8004cac <_vfiprintf_r+0x240>)
 8004a86:	429d      	cmp	r5, r3
 8004a88:	d11b      	bne.n	8004ac2 <_vfiprintf_r+0x56>
 8004a8a:	6875      	ldr	r5, [r6, #4]
 8004a8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a8e:	07d9      	lsls	r1, r3, #31
 8004a90:	d405      	bmi.n	8004a9e <_vfiprintf_r+0x32>
 8004a92:	89ab      	ldrh	r3, [r5, #12]
 8004a94:	059a      	lsls	r2, r3, #22
 8004a96:	d402      	bmi.n	8004a9e <_vfiprintf_r+0x32>
 8004a98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a9a:	f7ff ff61 	bl	8004960 <__retarget_lock_acquire_recursive>
 8004a9e:	89ab      	ldrh	r3, [r5, #12]
 8004aa0:	071b      	lsls	r3, r3, #28
 8004aa2:	d501      	bpl.n	8004aa8 <_vfiprintf_r+0x3c>
 8004aa4:	692b      	ldr	r3, [r5, #16]
 8004aa6:	b9eb      	cbnz	r3, 8004ae4 <_vfiprintf_r+0x78>
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	4630      	mov	r0, r6
 8004aac:	f000 fb5a 	bl	8005164 <__swsetup_r>
 8004ab0:	b1c0      	cbz	r0, 8004ae4 <_vfiprintf_r+0x78>
 8004ab2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ab4:	07dc      	lsls	r4, r3, #31
 8004ab6:	d50e      	bpl.n	8004ad6 <_vfiprintf_r+0x6a>
 8004ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8004abc:	b01d      	add	sp, #116	; 0x74
 8004abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ac2:	4b7b      	ldr	r3, [pc, #492]	; (8004cb0 <_vfiprintf_r+0x244>)
 8004ac4:	429d      	cmp	r5, r3
 8004ac6:	d101      	bne.n	8004acc <_vfiprintf_r+0x60>
 8004ac8:	68b5      	ldr	r5, [r6, #8]
 8004aca:	e7df      	b.n	8004a8c <_vfiprintf_r+0x20>
 8004acc:	4b79      	ldr	r3, [pc, #484]	; (8004cb4 <_vfiprintf_r+0x248>)
 8004ace:	429d      	cmp	r5, r3
 8004ad0:	bf08      	it	eq
 8004ad2:	68f5      	ldreq	r5, [r6, #12]
 8004ad4:	e7da      	b.n	8004a8c <_vfiprintf_r+0x20>
 8004ad6:	89ab      	ldrh	r3, [r5, #12]
 8004ad8:	0598      	lsls	r0, r3, #22
 8004ada:	d4ed      	bmi.n	8004ab8 <_vfiprintf_r+0x4c>
 8004adc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ade:	f7ff ff40 	bl	8004962 <__retarget_lock_release_recursive>
 8004ae2:	e7e9      	b.n	8004ab8 <_vfiprintf_r+0x4c>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ae8:	2320      	movs	r3, #32
 8004aea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004aee:	f8cd 800c 	str.w	r8, [sp, #12]
 8004af2:	2330      	movs	r3, #48	; 0x30
 8004af4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004cb8 <_vfiprintf_r+0x24c>
 8004af8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004afc:	f04f 0901 	mov.w	r9, #1
 8004b00:	4623      	mov	r3, r4
 8004b02:	469a      	mov	sl, r3
 8004b04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b08:	b10a      	cbz	r2, 8004b0e <_vfiprintf_r+0xa2>
 8004b0a:	2a25      	cmp	r2, #37	; 0x25
 8004b0c:	d1f9      	bne.n	8004b02 <_vfiprintf_r+0x96>
 8004b0e:	ebba 0b04 	subs.w	fp, sl, r4
 8004b12:	d00b      	beq.n	8004b2c <_vfiprintf_r+0xc0>
 8004b14:	465b      	mov	r3, fp
 8004b16:	4622      	mov	r2, r4
 8004b18:	4629      	mov	r1, r5
 8004b1a:	4630      	mov	r0, r6
 8004b1c:	f7ff ff93 	bl	8004a46 <__sfputs_r>
 8004b20:	3001      	adds	r0, #1
 8004b22:	f000 80aa 	beq.w	8004c7a <_vfiprintf_r+0x20e>
 8004b26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b28:	445a      	add	r2, fp
 8004b2a:	9209      	str	r2, [sp, #36]	; 0x24
 8004b2c:	f89a 3000 	ldrb.w	r3, [sl]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f000 80a2 	beq.w	8004c7a <_vfiprintf_r+0x20e>
 8004b36:	2300      	movs	r3, #0
 8004b38:	f04f 32ff 	mov.w	r2, #4294967295
 8004b3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b40:	f10a 0a01 	add.w	sl, sl, #1
 8004b44:	9304      	str	r3, [sp, #16]
 8004b46:	9307      	str	r3, [sp, #28]
 8004b48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b4c:	931a      	str	r3, [sp, #104]	; 0x68
 8004b4e:	4654      	mov	r4, sl
 8004b50:	2205      	movs	r2, #5
 8004b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b56:	4858      	ldr	r0, [pc, #352]	; (8004cb8 <_vfiprintf_r+0x24c>)
 8004b58:	f7fb fb42 	bl	80001e0 <memchr>
 8004b5c:	9a04      	ldr	r2, [sp, #16]
 8004b5e:	b9d8      	cbnz	r0, 8004b98 <_vfiprintf_r+0x12c>
 8004b60:	06d1      	lsls	r1, r2, #27
 8004b62:	bf44      	itt	mi
 8004b64:	2320      	movmi	r3, #32
 8004b66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b6a:	0713      	lsls	r3, r2, #28
 8004b6c:	bf44      	itt	mi
 8004b6e:	232b      	movmi	r3, #43	; 0x2b
 8004b70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b74:	f89a 3000 	ldrb.w	r3, [sl]
 8004b78:	2b2a      	cmp	r3, #42	; 0x2a
 8004b7a:	d015      	beq.n	8004ba8 <_vfiprintf_r+0x13c>
 8004b7c:	9a07      	ldr	r2, [sp, #28]
 8004b7e:	4654      	mov	r4, sl
 8004b80:	2000      	movs	r0, #0
 8004b82:	f04f 0c0a 	mov.w	ip, #10
 8004b86:	4621      	mov	r1, r4
 8004b88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b8c:	3b30      	subs	r3, #48	; 0x30
 8004b8e:	2b09      	cmp	r3, #9
 8004b90:	d94e      	bls.n	8004c30 <_vfiprintf_r+0x1c4>
 8004b92:	b1b0      	cbz	r0, 8004bc2 <_vfiprintf_r+0x156>
 8004b94:	9207      	str	r2, [sp, #28]
 8004b96:	e014      	b.n	8004bc2 <_vfiprintf_r+0x156>
 8004b98:	eba0 0308 	sub.w	r3, r0, r8
 8004b9c:	fa09 f303 	lsl.w	r3, r9, r3
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	9304      	str	r3, [sp, #16]
 8004ba4:	46a2      	mov	sl, r4
 8004ba6:	e7d2      	b.n	8004b4e <_vfiprintf_r+0xe2>
 8004ba8:	9b03      	ldr	r3, [sp, #12]
 8004baa:	1d19      	adds	r1, r3, #4
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	9103      	str	r1, [sp, #12]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	bfbb      	ittet	lt
 8004bb4:	425b      	neglt	r3, r3
 8004bb6:	f042 0202 	orrlt.w	r2, r2, #2
 8004bba:	9307      	strge	r3, [sp, #28]
 8004bbc:	9307      	strlt	r3, [sp, #28]
 8004bbe:	bfb8      	it	lt
 8004bc0:	9204      	strlt	r2, [sp, #16]
 8004bc2:	7823      	ldrb	r3, [r4, #0]
 8004bc4:	2b2e      	cmp	r3, #46	; 0x2e
 8004bc6:	d10c      	bne.n	8004be2 <_vfiprintf_r+0x176>
 8004bc8:	7863      	ldrb	r3, [r4, #1]
 8004bca:	2b2a      	cmp	r3, #42	; 0x2a
 8004bcc:	d135      	bne.n	8004c3a <_vfiprintf_r+0x1ce>
 8004bce:	9b03      	ldr	r3, [sp, #12]
 8004bd0:	1d1a      	adds	r2, r3, #4
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	9203      	str	r2, [sp, #12]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	bfb8      	it	lt
 8004bda:	f04f 33ff 	movlt.w	r3, #4294967295
 8004bde:	3402      	adds	r4, #2
 8004be0:	9305      	str	r3, [sp, #20]
 8004be2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004cc8 <_vfiprintf_r+0x25c>
 8004be6:	7821      	ldrb	r1, [r4, #0]
 8004be8:	2203      	movs	r2, #3
 8004bea:	4650      	mov	r0, sl
 8004bec:	f7fb faf8 	bl	80001e0 <memchr>
 8004bf0:	b140      	cbz	r0, 8004c04 <_vfiprintf_r+0x198>
 8004bf2:	2340      	movs	r3, #64	; 0x40
 8004bf4:	eba0 000a 	sub.w	r0, r0, sl
 8004bf8:	fa03 f000 	lsl.w	r0, r3, r0
 8004bfc:	9b04      	ldr	r3, [sp, #16]
 8004bfe:	4303      	orrs	r3, r0
 8004c00:	3401      	adds	r4, #1
 8004c02:	9304      	str	r3, [sp, #16]
 8004c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c08:	482c      	ldr	r0, [pc, #176]	; (8004cbc <_vfiprintf_r+0x250>)
 8004c0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c0e:	2206      	movs	r2, #6
 8004c10:	f7fb fae6 	bl	80001e0 <memchr>
 8004c14:	2800      	cmp	r0, #0
 8004c16:	d03f      	beq.n	8004c98 <_vfiprintf_r+0x22c>
 8004c18:	4b29      	ldr	r3, [pc, #164]	; (8004cc0 <_vfiprintf_r+0x254>)
 8004c1a:	bb1b      	cbnz	r3, 8004c64 <_vfiprintf_r+0x1f8>
 8004c1c:	9b03      	ldr	r3, [sp, #12]
 8004c1e:	3307      	adds	r3, #7
 8004c20:	f023 0307 	bic.w	r3, r3, #7
 8004c24:	3308      	adds	r3, #8
 8004c26:	9303      	str	r3, [sp, #12]
 8004c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c2a:	443b      	add	r3, r7
 8004c2c:	9309      	str	r3, [sp, #36]	; 0x24
 8004c2e:	e767      	b.n	8004b00 <_vfiprintf_r+0x94>
 8004c30:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c34:	460c      	mov	r4, r1
 8004c36:	2001      	movs	r0, #1
 8004c38:	e7a5      	b.n	8004b86 <_vfiprintf_r+0x11a>
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	3401      	adds	r4, #1
 8004c3e:	9305      	str	r3, [sp, #20]
 8004c40:	4619      	mov	r1, r3
 8004c42:	f04f 0c0a 	mov.w	ip, #10
 8004c46:	4620      	mov	r0, r4
 8004c48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c4c:	3a30      	subs	r2, #48	; 0x30
 8004c4e:	2a09      	cmp	r2, #9
 8004c50:	d903      	bls.n	8004c5a <_vfiprintf_r+0x1ee>
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0c5      	beq.n	8004be2 <_vfiprintf_r+0x176>
 8004c56:	9105      	str	r1, [sp, #20]
 8004c58:	e7c3      	b.n	8004be2 <_vfiprintf_r+0x176>
 8004c5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c5e:	4604      	mov	r4, r0
 8004c60:	2301      	movs	r3, #1
 8004c62:	e7f0      	b.n	8004c46 <_vfiprintf_r+0x1da>
 8004c64:	ab03      	add	r3, sp, #12
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	462a      	mov	r2, r5
 8004c6a:	4b16      	ldr	r3, [pc, #88]	; (8004cc4 <_vfiprintf_r+0x258>)
 8004c6c:	a904      	add	r1, sp, #16
 8004c6e:	4630      	mov	r0, r6
 8004c70:	f3af 8000 	nop.w
 8004c74:	4607      	mov	r7, r0
 8004c76:	1c78      	adds	r0, r7, #1
 8004c78:	d1d6      	bne.n	8004c28 <_vfiprintf_r+0x1bc>
 8004c7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c7c:	07d9      	lsls	r1, r3, #31
 8004c7e:	d405      	bmi.n	8004c8c <_vfiprintf_r+0x220>
 8004c80:	89ab      	ldrh	r3, [r5, #12]
 8004c82:	059a      	lsls	r2, r3, #22
 8004c84:	d402      	bmi.n	8004c8c <_vfiprintf_r+0x220>
 8004c86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c88:	f7ff fe6b 	bl	8004962 <__retarget_lock_release_recursive>
 8004c8c:	89ab      	ldrh	r3, [r5, #12]
 8004c8e:	065b      	lsls	r3, r3, #25
 8004c90:	f53f af12 	bmi.w	8004ab8 <_vfiprintf_r+0x4c>
 8004c94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c96:	e711      	b.n	8004abc <_vfiprintf_r+0x50>
 8004c98:	ab03      	add	r3, sp, #12
 8004c9a:	9300      	str	r3, [sp, #0]
 8004c9c:	462a      	mov	r2, r5
 8004c9e:	4b09      	ldr	r3, [pc, #36]	; (8004cc4 <_vfiprintf_r+0x258>)
 8004ca0:	a904      	add	r1, sp, #16
 8004ca2:	4630      	mov	r0, r6
 8004ca4:	f000 f880 	bl	8004da8 <_printf_i>
 8004ca8:	e7e4      	b.n	8004c74 <_vfiprintf_r+0x208>
 8004caa:	bf00      	nop
 8004cac:	08005690 	.word	0x08005690
 8004cb0:	080056b0 	.word	0x080056b0
 8004cb4:	08005670 	.word	0x08005670
 8004cb8:	080056d0 	.word	0x080056d0
 8004cbc:	080056da 	.word	0x080056da
 8004cc0:	00000000 	.word	0x00000000
 8004cc4:	08004a47 	.word	0x08004a47
 8004cc8:	080056d6 	.word	0x080056d6

08004ccc <_printf_common>:
 8004ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cd0:	4616      	mov	r6, r2
 8004cd2:	4699      	mov	r9, r3
 8004cd4:	688a      	ldr	r2, [r1, #8]
 8004cd6:	690b      	ldr	r3, [r1, #16]
 8004cd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	bfb8      	it	lt
 8004ce0:	4613      	movlt	r3, r2
 8004ce2:	6033      	str	r3, [r6, #0]
 8004ce4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ce8:	4607      	mov	r7, r0
 8004cea:	460c      	mov	r4, r1
 8004cec:	b10a      	cbz	r2, 8004cf2 <_printf_common+0x26>
 8004cee:	3301      	adds	r3, #1
 8004cf0:	6033      	str	r3, [r6, #0]
 8004cf2:	6823      	ldr	r3, [r4, #0]
 8004cf4:	0699      	lsls	r1, r3, #26
 8004cf6:	bf42      	ittt	mi
 8004cf8:	6833      	ldrmi	r3, [r6, #0]
 8004cfa:	3302      	addmi	r3, #2
 8004cfc:	6033      	strmi	r3, [r6, #0]
 8004cfe:	6825      	ldr	r5, [r4, #0]
 8004d00:	f015 0506 	ands.w	r5, r5, #6
 8004d04:	d106      	bne.n	8004d14 <_printf_common+0x48>
 8004d06:	f104 0a19 	add.w	sl, r4, #25
 8004d0a:	68e3      	ldr	r3, [r4, #12]
 8004d0c:	6832      	ldr	r2, [r6, #0]
 8004d0e:	1a9b      	subs	r3, r3, r2
 8004d10:	42ab      	cmp	r3, r5
 8004d12:	dc26      	bgt.n	8004d62 <_printf_common+0x96>
 8004d14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d18:	1e13      	subs	r3, r2, #0
 8004d1a:	6822      	ldr	r2, [r4, #0]
 8004d1c:	bf18      	it	ne
 8004d1e:	2301      	movne	r3, #1
 8004d20:	0692      	lsls	r2, r2, #26
 8004d22:	d42b      	bmi.n	8004d7c <_printf_common+0xb0>
 8004d24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d28:	4649      	mov	r1, r9
 8004d2a:	4638      	mov	r0, r7
 8004d2c:	47c0      	blx	r8
 8004d2e:	3001      	adds	r0, #1
 8004d30:	d01e      	beq.n	8004d70 <_printf_common+0xa4>
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	68e5      	ldr	r5, [r4, #12]
 8004d36:	6832      	ldr	r2, [r6, #0]
 8004d38:	f003 0306 	and.w	r3, r3, #6
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	bf08      	it	eq
 8004d40:	1aad      	subeq	r5, r5, r2
 8004d42:	68a3      	ldr	r3, [r4, #8]
 8004d44:	6922      	ldr	r2, [r4, #16]
 8004d46:	bf0c      	ite	eq
 8004d48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d4c:	2500      	movne	r5, #0
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	bfc4      	itt	gt
 8004d52:	1a9b      	subgt	r3, r3, r2
 8004d54:	18ed      	addgt	r5, r5, r3
 8004d56:	2600      	movs	r6, #0
 8004d58:	341a      	adds	r4, #26
 8004d5a:	42b5      	cmp	r5, r6
 8004d5c:	d11a      	bne.n	8004d94 <_printf_common+0xc8>
 8004d5e:	2000      	movs	r0, #0
 8004d60:	e008      	b.n	8004d74 <_printf_common+0xa8>
 8004d62:	2301      	movs	r3, #1
 8004d64:	4652      	mov	r2, sl
 8004d66:	4649      	mov	r1, r9
 8004d68:	4638      	mov	r0, r7
 8004d6a:	47c0      	blx	r8
 8004d6c:	3001      	adds	r0, #1
 8004d6e:	d103      	bne.n	8004d78 <_printf_common+0xac>
 8004d70:	f04f 30ff 	mov.w	r0, #4294967295
 8004d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d78:	3501      	adds	r5, #1
 8004d7a:	e7c6      	b.n	8004d0a <_printf_common+0x3e>
 8004d7c:	18e1      	adds	r1, r4, r3
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	2030      	movs	r0, #48	; 0x30
 8004d82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d86:	4422      	add	r2, r4
 8004d88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d90:	3302      	adds	r3, #2
 8004d92:	e7c7      	b.n	8004d24 <_printf_common+0x58>
 8004d94:	2301      	movs	r3, #1
 8004d96:	4622      	mov	r2, r4
 8004d98:	4649      	mov	r1, r9
 8004d9a:	4638      	mov	r0, r7
 8004d9c:	47c0      	blx	r8
 8004d9e:	3001      	adds	r0, #1
 8004da0:	d0e6      	beq.n	8004d70 <_printf_common+0xa4>
 8004da2:	3601      	adds	r6, #1
 8004da4:	e7d9      	b.n	8004d5a <_printf_common+0x8e>
	...

08004da8 <_printf_i>:
 8004da8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dac:	460c      	mov	r4, r1
 8004dae:	4691      	mov	r9, r2
 8004db0:	7e27      	ldrb	r7, [r4, #24]
 8004db2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004db4:	2f78      	cmp	r7, #120	; 0x78
 8004db6:	4680      	mov	r8, r0
 8004db8:	469a      	mov	sl, r3
 8004dba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dbe:	d807      	bhi.n	8004dd0 <_printf_i+0x28>
 8004dc0:	2f62      	cmp	r7, #98	; 0x62
 8004dc2:	d80a      	bhi.n	8004dda <_printf_i+0x32>
 8004dc4:	2f00      	cmp	r7, #0
 8004dc6:	f000 80d8 	beq.w	8004f7a <_printf_i+0x1d2>
 8004dca:	2f58      	cmp	r7, #88	; 0x58
 8004dcc:	f000 80a3 	beq.w	8004f16 <_printf_i+0x16e>
 8004dd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004dd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004dd8:	e03a      	b.n	8004e50 <_printf_i+0xa8>
 8004dda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004dde:	2b15      	cmp	r3, #21
 8004de0:	d8f6      	bhi.n	8004dd0 <_printf_i+0x28>
 8004de2:	a001      	add	r0, pc, #4	; (adr r0, 8004de8 <_printf_i+0x40>)
 8004de4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004de8:	08004e41 	.word	0x08004e41
 8004dec:	08004e55 	.word	0x08004e55
 8004df0:	08004dd1 	.word	0x08004dd1
 8004df4:	08004dd1 	.word	0x08004dd1
 8004df8:	08004dd1 	.word	0x08004dd1
 8004dfc:	08004dd1 	.word	0x08004dd1
 8004e00:	08004e55 	.word	0x08004e55
 8004e04:	08004dd1 	.word	0x08004dd1
 8004e08:	08004dd1 	.word	0x08004dd1
 8004e0c:	08004dd1 	.word	0x08004dd1
 8004e10:	08004dd1 	.word	0x08004dd1
 8004e14:	08004f61 	.word	0x08004f61
 8004e18:	08004e85 	.word	0x08004e85
 8004e1c:	08004f43 	.word	0x08004f43
 8004e20:	08004dd1 	.word	0x08004dd1
 8004e24:	08004dd1 	.word	0x08004dd1
 8004e28:	08004f83 	.word	0x08004f83
 8004e2c:	08004dd1 	.word	0x08004dd1
 8004e30:	08004e85 	.word	0x08004e85
 8004e34:	08004dd1 	.word	0x08004dd1
 8004e38:	08004dd1 	.word	0x08004dd1
 8004e3c:	08004f4b 	.word	0x08004f4b
 8004e40:	680b      	ldr	r3, [r1, #0]
 8004e42:	1d1a      	adds	r2, r3, #4
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	600a      	str	r2, [r1, #0]
 8004e48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e50:	2301      	movs	r3, #1
 8004e52:	e0a3      	b.n	8004f9c <_printf_i+0x1f4>
 8004e54:	6825      	ldr	r5, [r4, #0]
 8004e56:	6808      	ldr	r0, [r1, #0]
 8004e58:	062e      	lsls	r6, r5, #24
 8004e5a:	f100 0304 	add.w	r3, r0, #4
 8004e5e:	d50a      	bpl.n	8004e76 <_printf_i+0xce>
 8004e60:	6805      	ldr	r5, [r0, #0]
 8004e62:	600b      	str	r3, [r1, #0]
 8004e64:	2d00      	cmp	r5, #0
 8004e66:	da03      	bge.n	8004e70 <_printf_i+0xc8>
 8004e68:	232d      	movs	r3, #45	; 0x2d
 8004e6a:	426d      	negs	r5, r5
 8004e6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e70:	485e      	ldr	r0, [pc, #376]	; (8004fec <_printf_i+0x244>)
 8004e72:	230a      	movs	r3, #10
 8004e74:	e019      	b.n	8004eaa <_printf_i+0x102>
 8004e76:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004e7a:	6805      	ldr	r5, [r0, #0]
 8004e7c:	600b      	str	r3, [r1, #0]
 8004e7e:	bf18      	it	ne
 8004e80:	b22d      	sxthne	r5, r5
 8004e82:	e7ef      	b.n	8004e64 <_printf_i+0xbc>
 8004e84:	680b      	ldr	r3, [r1, #0]
 8004e86:	6825      	ldr	r5, [r4, #0]
 8004e88:	1d18      	adds	r0, r3, #4
 8004e8a:	6008      	str	r0, [r1, #0]
 8004e8c:	0628      	lsls	r0, r5, #24
 8004e8e:	d501      	bpl.n	8004e94 <_printf_i+0xec>
 8004e90:	681d      	ldr	r5, [r3, #0]
 8004e92:	e002      	b.n	8004e9a <_printf_i+0xf2>
 8004e94:	0669      	lsls	r1, r5, #25
 8004e96:	d5fb      	bpl.n	8004e90 <_printf_i+0xe8>
 8004e98:	881d      	ldrh	r5, [r3, #0]
 8004e9a:	4854      	ldr	r0, [pc, #336]	; (8004fec <_printf_i+0x244>)
 8004e9c:	2f6f      	cmp	r7, #111	; 0x6f
 8004e9e:	bf0c      	ite	eq
 8004ea0:	2308      	moveq	r3, #8
 8004ea2:	230a      	movne	r3, #10
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004eaa:	6866      	ldr	r6, [r4, #4]
 8004eac:	60a6      	str	r6, [r4, #8]
 8004eae:	2e00      	cmp	r6, #0
 8004eb0:	bfa2      	ittt	ge
 8004eb2:	6821      	ldrge	r1, [r4, #0]
 8004eb4:	f021 0104 	bicge.w	r1, r1, #4
 8004eb8:	6021      	strge	r1, [r4, #0]
 8004eba:	b90d      	cbnz	r5, 8004ec0 <_printf_i+0x118>
 8004ebc:	2e00      	cmp	r6, #0
 8004ebe:	d04d      	beq.n	8004f5c <_printf_i+0x1b4>
 8004ec0:	4616      	mov	r6, r2
 8004ec2:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ec6:	fb03 5711 	mls	r7, r3, r1, r5
 8004eca:	5dc7      	ldrb	r7, [r0, r7]
 8004ecc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ed0:	462f      	mov	r7, r5
 8004ed2:	42bb      	cmp	r3, r7
 8004ed4:	460d      	mov	r5, r1
 8004ed6:	d9f4      	bls.n	8004ec2 <_printf_i+0x11a>
 8004ed8:	2b08      	cmp	r3, #8
 8004eda:	d10b      	bne.n	8004ef4 <_printf_i+0x14c>
 8004edc:	6823      	ldr	r3, [r4, #0]
 8004ede:	07df      	lsls	r7, r3, #31
 8004ee0:	d508      	bpl.n	8004ef4 <_printf_i+0x14c>
 8004ee2:	6923      	ldr	r3, [r4, #16]
 8004ee4:	6861      	ldr	r1, [r4, #4]
 8004ee6:	4299      	cmp	r1, r3
 8004ee8:	bfde      	ittt	le
 8004eea:	2330      	movle	r3, #48	; 0x30
 8004eec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ef0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ef4:	1b92      	subs	r2, r2, r6
 8004ef6:	6122      	str	r2, [r4, #16]
 8004ef8:	f8cd a000 	str.w	sl, [sp]
 8004efc:	464b      	mov	r3, r9
 8004efe:	aa03      	add	r2, sp, #12
 8004f00:	4621      	mov	r1, r4
 8004f02:	4640      	mov	r0, r8
 8004f04:	f7ff fee2 	bl	8004ccc <_printf_common>
 8004f08:	3001      	adds	r0, #1
 8004f0a:	d14c      	bne.n	8004fa6 <_printf_i+0x1fe>
 8004f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f10:	b004      	add	sp, #16
 8004f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f16:	4835      	ldr	r0, [pc, #212]	; (8004fec <_printf_i+0x244>)
 8004f18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f1c:	6823      	ldr	r3, [r4, #0]
 8004f1e:	680e      	ldr	r6, [r1, #0]
 8004f20:	061f      	lsls	r7, r3, #24
 8004f22:	f856 5b04 	ldr.w	r5, [r6], #4
 8004f26:	600e      	str	r6, [r1, #0]
 8004f28:	d514      	bpl.n	8004f54 <_printf_i+0x1ac>
 8004f2a:	07d9      	lsls	r1, r3, #31
 8004f2c:	bf44      	itt	mi
 8004f2e:	f043 0320 	orrmi.w	r3, r3, #32
 8004f32:	6023      	strmi	r3, [r4, #0]
 8004f34:	b91d      	cbnz	r5, 8004f3e <_printf_i+0x196>
 8004f36:	6823      	ldr	r3, [r4, #0]
 8004f38:	f023 0320 	bic.w	r3, r3, #32
 8004f3c:	6023      	str	r3, [r4, #0]
 8004f3e:	2310      	movs	r3, #16
 8004f40:	e7b0      	b.n	8004ea4 <_printf_i+0xfc>
 8004f42:	6823      	ldr	r3, [r4, #0]
 8004f44:	f043 0320 	orr.w	r3, r3, #32
 8004f48:	6023      	str	r3, [r4, #0]
 8004f4a:	2378      	movs	r3, #120	; 0x78
 8004f4c:	4828      	ldr	r0, [pc, #160]	; (8004ff0 <_printf_i+0x248>)
 8004f4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f52:	e7e3      	b.n	8004f1c <_printf_i+0x174>
 8004f54:	065e      	lsls	r6, r3, #25
 8004f56:	bf48      	it	mi
 8004f58:	b2ad      	uxthmi	r5, r5
 8004f5a:	e7e6      	b.n	8004f2a <_printf_i+0x182>
 8004f5c:	4616      	mov	r6, r2
 8004f5e:	e7bb      	b.n	8004ed8 <_printf_i+0x130>
 8004f60:	680b      	ldr	r3, [r1, #0]
 8004f62:	6826      	ldr	r6, [r4, #0]
 8004f64:	6960      	ldr	r0, [r4, #20]
 8004f66:	1d1d      	adds	r5, r3, #4
 8004f68:	600d      	str	r5, [r1, #0]
 8004f6a:	0635      	lsls	r5, r6, #24
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	d501      	bpl.n	8004f74 <_printf_i+0x1cc>
 8004f70:	6018      	str	r0, [r3, #0]
 8004f72:	e002      	b.n	8004f7a <_printf_i+0x1d2>
 8004f74:	0671      	lsls	r1, r6, #25
 8004f76:	d5fb      	bpl.n	8004f70 <_printf_i+0x1c8>
 8004f78:	8018      	strh	r0, [r3, #0]
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	6123      	str	r3, [r4, #16]
 8004f7e:	4616      	mov	r6, r2
 8004f80:	e7ba      	b.n	8004ef8 <_printf_i+0x150>
 8004f82:	680b      	ldr	r3, [r1, #0]
 8004f84:	1d1a      	adds	r2, r3, #4
 8004f86:	600a      	str	r2, [r1, #0]
 8004f88:	681e      	ldr	r6, [r3, #0]
 8004f8a:	6862      	ldr	r2, [r4, #4]
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	4630      	mov	r0, r6
 8004f90:	f7fb f926 	bl	80001e0 <memchr>
 8004f94:	b108      	cbz	r0, 8004f9a <_printf_i+0x1f2>
 8004f96:	1b80      	subs	r0, r0, r6
 8004f98:	6060      	str	r0, [r4, #4]
 8004f9a:	6863      	ldr	r3, [r4, #4]
 8004f9c:	6123      	str	r3, [r4, #16]
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fa4:	e7a8      	b.n	8004ef8 <_printf_i+0x150>
 8004fa6:	6923      	ldr	r3, [r4, #16]
 8004fa8:	4632      	mov	r2, r6
 8004faa:	4649      	mov	r1, r9
 8004fac:	4640      	mov	r0, r8
 8004fae:	47d0      	blx	sl
 8004fb0:	3001      	adds	r0, #1
 8004fb2:	d0ab      	beq.n	8004f0c <_printf_i+0x164>
 8004fb4:	6823      	ldr	r3, [r4, #0]
 8004fb6:	079b      	lsls	r3, r3, #30
 8004fb8:	d413      	bmi.n	8004fe2 <_printf_i+0x23a>
 8004fba:	68e0      	ldr	r0, [r4, #12]
 8004fbc:	9b03      	ldr	r3, [sp, #12]
 8004fbe:	4298      	cmp	r0, r3
 8004fc0:	bfb8      	it	lt
 8004fc2:	4618      	movlt	r0, r3
 8004fc4:	e7a4      	b.n	8004f10 <_printf_i+0x168>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	4632      	mov	r2, r6
 8004fca:	4649      	mov	r1, r9
 8004fcc:	4640      	mov	r0, r8
 8004fce:	47d0      	blx	sl
 8004fd0:	3001      	adds	r0, #1
 8004fd2:	d09b      	beq.n	8004f0c <_printf_i+0x164>
 8004fd4:	3501      	adds	r5, #1
 8004fd6:	68e3      	ldr	r3, [r4, #12]
 8004fd8:	9903      	ldr	r1, [sp, #12]
 8004fda:	1a5b      	subs	r3, r3, r1
 8004fdc:	42ab      	cmp	r3, r5
 8004fde:	dcf2      	bgt.n	8004fc6 <_printf_i+0x21e>
 8004fe0:	e7eb      	b.n	8004fba <_printf_i+0x212>
 8004fe2:	2500      	movs	r5, #0
 8004fe4:	f104 0619 	add.w	r6, r4, #25
 8004fe8:	e7f5      	b.n	8004fd6 <_printf_i+0x22e>
 8004fea:	bf00      	nop
 8004fec:	080056e1 	.word	0x080056e1
 8004ff0:	080056f2 	.word	0x080056f2

08004ff4 <_sbrk_r>:
 8004ff4:	b538      	push	{r3, r4, r5, lr}
 8004ff6:	4d06      	ldr	r5, [pc, #24]	; (8005010 <_sbrk_r+0x1c>)
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	4604      	mov	r4, r0
 8004ffc:	4608      	mov	r0, r1
 8004ffe:	602b      	str	r3, [r5, #0]
 8005000:	f7fb ff7e 	bl	8000f00 <_sbrk>
 8005004:	1c43      	adds	r3, r0, #1
 8005006:	d102      	bne.n	800500e <_sbrk_r+0x1a>
 8005008:	682b      	ldr	r3, [r5, #0]
 800500a:	b103      	cbz	r3, 800500e <_sbrk_r+0x1a>
 800500c:	6023      	str	r3, [r4, #0]
 800500e:	bd38      	pop	{r3, r4, r5, pc}
 8005010:	20000168 	.word	0x20000168

08005014 <__sread>:
 8005014:	b510      	push	{r4, lr}
 8005016:	460c      	mov	r4, r1
 8005018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800501c:	f000 fab4 	bl	8005588 <_read_r>
 8005020:	2800      	cmp	r0, #0
 8005022:	bfab      	itete	ge
 8005024:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005026:	89a3      	ldrhlt	r3, [r4, #12]
 8005028:	181b      	addge	r3, r3, r0
 800502a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800502e:	bfac      	ite	ge
 8005030:	6563      	strge	r3, [r4, #84]	; 0x54
 8005032:	81a3      	strhlt	r3, [r4, #12]
 8005034:	bd10      	pop	{r4, pc}

08005036 <__swrite>:
 8005036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800503a:	461f      	mov	r7, r3
 800503c:	898b      	ldrh	r3, [r1, #12]
 800503e:	05db      	lsls	r3, r3, #23
 8005040:	4605      	mov	r5, r0
 8005042:	460c      	mov	r4, r1
 8005044:	4616      	mov	r6, r2
 8005046:	d505      	bpl.n	8005054 <__swrite+0x1e>
 8005048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800504c:	2302      	movs	r3, #2
 800504e:	2200      	movs	r2, #0
 8005050:	f000 f9c8 	bl	80053e4 <_lseek_r>
 8005054:	89a3      	ldrh	r3, [r4, #12]
 8005056:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800505a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800505e:	81a3      	strh	r3, [r4, #12]
 8005060:	4632      	mov	r2, r6
 8005062:	463b      	mov	r3, r7
 8005064:	4628      	mov	r0, r5
 8005066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800506a:	f000 b869 	b.w	8005140 <_write_r>

0800506e <__sseek>:
 800506e:	b510      	push	{r4, lr}
 8005070:	460c      	mov	r4, r1
 8005072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005076:	f000 f9b5 	bl	80053e4 <_lseek_r>
 800507a:	1c43      	adds	r3, r0, #1
 800507c:	89a3      	ldrh	r3, [r4, #12]
 800507e:	bf15      	itete	ne
 8005080:	6560      	strne	r0, [r4, #84]	; 0x54
 8005082:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005086:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800508a:	81a3      	strheq	r3, [r4, #12]
 800508c:	bf18      	it	ne
 800508e:	81a3      	strhne	r3, [r4, #12]
 8005090:	bd10      	pop	{r4, pc}

08005092 <__sclose>:
 8005092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005096:	f000 b8d3 	b.w	8005240 <_close_r>
	...

0800509c <__swbuf_r>:
 800509c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800509e:	460e      	mov	r6, r1
 80050a0:	4614      	mov	r4, r2
 80050a2:	4605      	mov	r5, r0
 80050a4:	b118      	cbz	r0, 80050ae <__swbuf_r+0x12>
 80050a6:	6983      	ldr	r3, [r0, #24]
 80050a8:	b90b      	cbnz	r3, 80050ae <__swbuf_r+0x12>
 80050aa:	f7ff fbbb 	bl	8004824 <__sinit>
 80050ae:	4b21      	ldr	r3, [pc, #132]	; (8005134 <__swbuf_r+0x98>)
 80050b0:	429c      	cmp	r4, r3
 80050b2:	d12b      	bne.n	800510c <__swbuf_r+0x70>
 80050b4:	686c      	ldr	r4, [r5, #4]
 80050b6:	69a3      	ldr	r3, [r4, #24]
 80050b8:	60a3      	str	r3, [r4, #8]
 80050ba:	89a3      	ldrh	r3, [r4, #12]
 80050bc:	071a      	lsls	r2, r3, #28
 80050be:	d52f      	bpl.n	8005120 <__swbuf_r+0x84>
 80050c0:	6923      	ldr	r3, [r4, #16]
 80050c2:	b36b      	cbz	r3, 8005120 <__swbuf_r+0x84>
 80050c4:	6923      	ldr	r3, [r4, #16]
 80050c6:	6820      	ldr	r0, [r4, #0]
 80050c8:	1ac0      	subs	r0, r0, r3
 80050ca:	6963      	ldr	r3, [r4, #20]
 80050cc:	b2f6      	uxtb	r6, r6
 80050ce:	4283      	cmp	r3, r0
 80050d0:	4637      	mov	r7, r6
 80050d2:	dc04      	bgt.n	80050de <__swbuf_r+0x42>
 80050d4:	4621      	mov	r1, r4
 80050d6:	4628      	mov	r0, r5
 80050d8:	f000 f948 	bl	800536c <_fflush_r>
 80050dc:	bb30      	cbnz	r0, 800512c <__swbuf_r+0x90>
 80050de:	68a3      	ldr	r3, [r4, #8]
 80050e0:	3b01      	subs	r3, #1
 80050e2:	60a3      	str	r3, [r4, #8]
 80050e4:	6823      	ldr	r3, [r4, #0]
 80050e6:	1c5a      	adds	r2, r3, #1
 80050e8:	6022      	str	r2, [r4, #0]
 80050ea:	701e      	strb	r6, [r3, #0]
 80050ec:	6963      	ldr	r3, [r4, #20]
 80050ee:	3001      	adds	r0, #1
 80050f0:	4283      	cmp	r3, r0
 80050f2:	d004      	beq.n	80050fe <__swbuf_r+0x62>
 80050f4:	89a3      	ldrh	r3, [r4, #12]
 80050f6:	07db      	lsls	r3, r3, #31
 80050f8:	d506      	bpl.n	8005108 <__swbuf_r+0x6c>
 80050fa:	2e0a      	cmp	r6, #10
 80050fc:	d104      	bne.n	8005108 <__swbuf_r+0x6c>
 80050fe:	4621      	mov	r1, r4
 8005100:	4628      	mov	r0, r5
 8005102:	f000 f933 	bl	800536c <_fflush_r>
 8005106:	b988      	cbnz	r0, 800512c <__swbuf_r+0x90>
 8005108:	4638      	mov	r0, r7
 800510a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800510c:	4b0a      	ldr	r3, [pc, #40]	; (8005138 <__swbuf_r+0x9c>)
 800510e:	429c      	cmp	r4, r3
 8005110:	d101      	bne.n	8005116 <__swbuf_r+0x7a>
 8005112:	68ac      	ldr	r4, [r5, #8]
 8005114:	e7cf      	b.n	80050b6 <__swbuf_r+0x1a>
 8005116:	4b09      	ldr	r3, [pc, #36]	; (800513c <__swbuf_r+0xa0>)
 8005118:	429c      	cmp	r4, r3
 800511a:	bf08      	it	eq
 800511c:	68ec      	ldreq	r4, [r5, #12]
 800511e:	e7ca      	b.n	80050b6 <__swbuf_r+0x1a>
 8005120:	4621      	mov	r1, r4
 8005122:	4628      	mov	r0, r5
 8005124:	f000 f81e 	bl	8005164 <__swsetup_r>
 8005128:	2800      	cmp	r0, #0
 800512a:	d0cb      	beq.n	80050c4 <__swbuf_r+0x28>
 800512c:	f04f 37ff 	mov.w	r7, #4294967295
 8005130:	e7ea      	b.n	8005108 <__swbuf_r+0x6c>
 8005132:	bf00      	nop
 8005134:	08005690 	.word	0x08005690
 8005138:	080056b0 	.word	0x080056b0
 800513c:	08005670 	.word	0x08005670

08005140 <_write_r>:
 8005140:	b538      	push	{r3, r4, r5, lr}
 8005142:	4d07      	ldr	r5, [pc, #28]	; (8005160 <_write_r+0x20>)
 8005144:	4604      	mov	r4, r0
 8005146:	4608      	mov	r0, r1
 8005148:	4611      	mov	r1, r2
 800514a:	2200      	movs	r2, #0
 800514c:	602a      	str	r2, [r5, #0]
 800514e:	461a      	mov	r2, r3
 8005150:	f7fb fe85 	bl	8000e5e <_write>
 8005154:	1c43      	adds	r3, r0, #1
 8005156:	d102      	bne.n	800515e <_write_r+0x1e>
 8005158:	682b      	ldr	r3, [r5, #0]
 800515a:	b103      	cbz	r3, 800515e <_write_r+0x1e>
 800515c:	6023      	str	r3, [r4, #0]
 800515e:	bd38      	pop	{r3, r4, r5, pc}
 8005160:	20000168 	.word	0x20000168

08005164 <__swsetup_r>:
 8005164:	4b32      	ldr	r3, [pc, #200]	; (8005230 <__swsetup_r+0xcc>)
 8005166:	b570      	push	{r4, r5, r6, lr}
 8005168:	681d      	ldr	r5, [r3, #0]
 800516a:	4606      	mov	r6, r0
 800516c:	460c      	mov	r4, r1
 800516e:	b125      	cbz	r5, 800517a <__swsetup_r+0x16>
 8005170:	69ab      	ldr	r3, [r5, #24]
 8005172:	b913      	cbnz	r3, 800517a <__swsetup_r+0x16>
 8005174:	4628      	mov	r0, r5
 8005176:	f7ff fb55 	bl	8004824 <__sinit>
 800517a:	4b2e      	ldr	r3, [pc, #184]	; (8005234 <__swsetup_r+0xd0>)
 800517c:	429c      	cmp	r4, r3
 800517e:	d10f      	bne.n	80051a0 <__swsetup_r+0x3c>
 8005180:	686c      	ldr	r4, [r5, #4]
 8005182:	89a3      	ldrh	r3, [r4, #12]
 8005184:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005188:	0719      	lsls	r1, r3, #28
 800518a:	d42c      	bmi.n	80051e6 <__swsetup_r+0x82>
 800518c:	06dd      	lsls	r5, r3, #27
 800518e:	d411      	bmi.n	80051b4 <__swsetup_r+0x50>
 8005190:	2309      	movs	r3, #9
 8005192:	6033      	str	r3, [r6, #0]
 8005194:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005198:	81a3      	strh	r3, [r4, #12]
 800519a:	f04f 30ff 	mov.w	r0, #4294967295
 800519e:	e03e      	b.n	800521e <__swsetup_r+0xba>
 80051a0:	4b25      	ldr	r3, [pc, #148]	; (8005238 <__swsetup_r+0xd4>)
 80051a2:	429c      	cmp	r4, r3
 80051a4:	d101      	bne.n	80051aa <__swsetup_r+0x46>
 80051a6:	68ac      	ldr	r4, [r5, #8]
 80051a8:	e7eb      	b.n	8005182 <__swsetup_r+0x1e>
 80051aa:	4b24      	ldr	r3, [pc, #144]	; (800523c <__swsetup_r+0xd8>)
 80051ac:	429c      	cmp	r4, r3
 80051ae:	bf08      	it	eq
 80051b0:	68ec      	ldreq	r4, [r5, #12]
 80051b2:	e7e6      	b.n	8005182 <__swsetup_r+0x1e>
 80051b4:	0758      	lsls	r0, r3, #29
 80051b6:	d512      	bpl.n	80051de <__swsetup_r+0x7a>
 80051b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051ba:	b141      	cbz	r1, 80051ce <__swsetup_r+0x6a>
 80051bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051c0:	4299      	cmp	r1, r3
 80051c2:	d002      	beq.n	80051ca <__swsetup_r+0x66>
 80051c4:	4630      	mov	r0, r6
 80051c6:	f000 f98f 	bl	80054e8 <_free_r>
 80051ca:	2300      	movs	r3, #0
 80051cc:	6363      	str	r3, [r4, #52]	; 0x34
 80051ce:	89a3      	ldrh	r3, [r4, #12]
 80051d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80051d4:	81a3      	strh	r3, [r4, #12]
 80051d6:	2300      	movs	r3, #0
 80051d8:	6063      	str	r3, [r4, #4]
 80051da:	6923      	ldr	r3, [r4, #16]
 80051dc:	6023      	str	r3, [r4, #0]
 80051de:	89a3      	ldrh	r3, [r4, #12]
 80051e0:	f043 0308 	orr.w	r3, r3, #8
 80051e4:	81a3      	strh	r3, [r4, #12]
 80051e6:	6923      	ldr	r3, [r4, #16]
 80051e8:	b94b      	cbnz	r3, 80051fe <__swsetup_r+0x9a>
 80051ea:	89a3      	ldrh	r3, [r4, #12]
 80051ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80051f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051f4:	d003      	beq.n	80051fe <__swsetup_r+0x9a>
 80051f6:	4621      	mov	r1, r4
 80051f8:	4630      	mov	r0, r6
 80051fa:	f000 f929 	bl	8005450 <__smakebuf_r>
 80051fe:	89a0      	ldrh	r0, [r4, #12]
 8005200:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005204:	f010 0301 	ands.w	r3, r0, #1
 8005208:	d00a      	beq.n	8005220 <__swsetup_r+0xbc>
 800520a:	2300      	movs	r3, #0
 800520c:	60a3      	str	r3, [r4, #8]
 800520e:	6963      	ldr	r3, [r4, #20]
 8005210:	425b      	negs	r3, r3
 8005212:	61a3      	str	r3, [r4, #24]
 8005214:	6923      	ldr	r3, [r4, #16]
 8005216:	b943      	cbnz	r3, 800522a <__swsetup_r+0xc6>
 8005218:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800521c:	d1ba      	bne.n	8005194 <__swsetup_r+0x30>
 800521e:	bd70      	pop	{r4, r5, r6, pc}
 8005220:	0781      	lsls	r1, r0, #30
 8005222:	bf58      	it	pl
 8005224:	6963      	ldrpl	r3, [r4, #20]
 8005226:	60a3      	str	r3, [r4, #8]
 8005228:	e7f4      	b.n	8005214 <__swsetup_r+0xb0>
 800522a:	2000      	movs	r0, #0
 800522c:	e7f7      	b.n	800521e <__swsetup_r+0xba>
 800522e:	bf00      	nop
 8005230:	2000002c 	.word	0x2000002c
 8005234:	08005690 	.word	0x08005690
 8005238:	080056b0 	.word	0x080056b0
 800523c:	08005670 	.word	0x08005670

08005240 <_close_r>:
 8005240:	b538      	push	{r3, r4, r5, lr}
 8005242:	4d06      	ldr	r5, [pc, #24]	; (800525c <_close_r+0x1c>)
 8005244:	2300      	movs	r3, #0
 8005246:	4604      	mov	r4, r0
 8005248:	4608      	mov	r0, r1
 800524a:	602b      	str	r3, [r5, #0]
 800524c:	f7fb fe23 	bl	8000e96 <_close>
 8005250:	1c43      	adds	r3, r0, #1
 8005252:	d102      	bne.n	800525a <_close_r+0x1a>
 8005254:	682b      	ldr	r3, [r5, #0]
 8005256:	b103      	cbz	r3, 800525a <_close_r+0x1a>
 8005258:	6023      	str	r3, [r4, #0]
 800525a:	bd38      	pop	{r3, r4, r5, pc}
 800525c:	20000168 	.word	0x20000168

08005260 <__sflush_r>:
 8005260:	898a      	ldrh	r2, [r1, #12]
 8005262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005266:	4605      	mov	r5, r0
 8005268:	0710      	lsls	r0, r2, #28
 800526a:	460c      	mov	r4, r1
 800526c:	d458      	bmi.n	8005320 <__sflush_r+0xc0>
 800526e:	684b      	ldr	r3, [r1, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	dc05      	bgt.n	8005280 <__sflush_r+0x20>
 8005274:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005276:	2b00      	cmp	r3, #0
 8005278:	dc02      	bgt.n	8005280 <__sflush_r+0x20>
 800527a:	2000      	movs	r0, #0
 800527c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005280:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005282:	2e00      	cmp	r6, #0
 8005284:	d0f9      	beq.n	800527a <__sflush_r+0x1a>
 8005286:	2300      	movs	r3, #0
 8005288:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800528c:	682f      	ldr	r7, [r5, #0]
 800528e:	602b      	str	r3, [r5, #0]
 8005290:	d032      	beq.n	80052f8 <__sflush_r+0x98>
 8005292:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005294:	89a3      	ldrh	r3, [r4, #12]
 8005296:	075a      	lsls	r2, r3, #29
 8005298:	d505      	bpl.n	80052a6 <__sflush_r+0x46>
 800529a:	6863      	ldr	r3, [r4, #4]
 800529c:	1ac0      	subs	r0, r0, r3
 800529e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052a0:	b10b      	cbz	r3, 80052a6 <__sflush_r+0x46>
 80052a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052a4:	1ac0      	subs	r0, r0, r3
 80052a6:	2300      	movs	r3, #0
 80052a8:	4602      	mov	r2, r0
 80052aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052ac:	6a21      	ldr	r1, [r4, #32]
 80052ae:	4628      	mov	r0, r5
 80052b0:	47b0      	blx	r6
 80052b2:	1c43      	adds	r3, r0, #1
 80052b4:	89a3      	ldrh	r3, [r4, #12]
 80052b6:	d106      	bne.n	80052c6 <__sflush_r+0x66>
 80052b8:	6829      	ldr	r1, [r5, #0]
 80052ba:	291d      	cmp	r1, #29
 80052bc:	d82c      	bhi.n	8005318 <__sflush_r+0xb8>
 80052be:	4a2a      	ldr	r2, [pc, #168]	; (8005368 <__sflush_r+0x108>)
 80052c0:	40ca      	lsrs	r2, r1
 80052c2:	07d6      	lsls	r6, r2, #31
 80052c4:	d528      	bpl.n	8005318 <__sflush_r+0xb8>
 80052c6:	2200      	movs	r2, #0
 80052c8:	6062      	str	r2, [r4, #4]
 80052ca:	04d9      	lsls	r1, r3, #19
 80052cc:	6922      	ldr	r2, [r4, #16]
 80052ce:	6022      	str	r2, [r4, #0]
 80052d0:	d504      	bpl.n	80052dc <__sflush_r+0x7c>
 80052d2:	1c42      	adds	r2, r0, #1
 80052d4:	d101      	bne.n	80052da <__sflush_r+0x7a>
 80052d6:	682b      	ldr	r3, [r5, #0]
 80052d8:	b903      	cbnz	r3, 80052dc <__sflush_r+0x7c>
 80052da:	6560      	str	r0, [r4, #84]	; 0x54
 80052dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052de:	602f      	str	r7, [r5, #0]
 80052e0:	2900      	cmp	r1, #0
 80052e2:	d0ca      	beq.n	800527a <__sflush_r+0x1a>
 80052e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052e8:	4299      	cmp	r1, r3
 80052ea:	d002      	beq.n	80052f2 <__sflush_r+0x92>
 80052ec:	4628      	mov	r0, r5
 80052ee:	f000 f8fb 	bl	80054e8 <_free_r>
 80052f2:	2000      	movs	r0, #0
 80052f4:	6360      	str	r0, [r4, #52]	; 0x34
 80052f6:	e7c1      	b.n	800527c <__sflush_r+0x1c>
 80052f8:	6a21      	ldr	r1, [r4, #32]
 80052fa:	2301      	movs	r3, #1
 80052fc:	4628      	mov	r0, r5
 80052fe:	47b0      	blx	r6
 8005300:	1c41      	adds	r1, r0, #1
 8005302:	d1c7      	bne.n	8005294 <__sflush_r+0x34>
 8005304:	682b      	ldr	r3, [r5, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d0c4      	beq.n	8005294 <__sflush_r+0x34>
 800530a:	2b1d      	cmp	r3, #29
 800530c:	d001      	beq.n	8005312 <__sflush_r+0xb2>
 800530e:	2b16      	cmp	r3, #22
 8005310:	d101      	bne.n	8005316 <__sflush_r+0xb6>
 8005312:	602f      	str	r7, [r5, #0]
 8005314:	e7b1      	b.n	800527a <__sflush_r+0x1a>
 8005316:	89a3      	ldrh	r3, [r4, #12]
 8005318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800531c:	81a3      	strh	r3, [r4, #12]
 800531e:	e7ad      	b.n	800527c <__sflush_r+0x1c>
 8005320:	690f      	ldr	r7, [r1, #16]
 8005322:	2f00      	cmp	r7, #0
 8005324:	d0a9      	beq.n	800527a <__sflush_r+0x1a>
 8005326:	0793      	lsls	r3, r2, #30
 8005328:	680e      	ldr	r6, [r1, #0]
 800532a:	bf08      	it	eq
 800532c:	694b      	ldreq	r3, [r1, #20]
 800532e:	600f      	str	r7, [r1, #0]
 8005330:	bf18      	it	ne
 8005332:	2300      	movne	r3, #0
 8005334:	eba6 0807 	sub.w	r8, r6, r7
 8005338:	608b      	str	r3, [r1, #8]
 800533a:	f1b8 0f00 	cmp.w	r8, #0
 800533e:	dd9c      	ble.n	800527a <__sflush_r+0x1a>
 8005340:	6a21      	ldr	r1, [r4, #32]
 8005342:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005344:	4643      	mov	r3, r8
 8005346:	463a      	mov	r2, r7
 8005348:	4628      	mov	r0, r5
 800534a:	47b0      	blx	r6
 800534c:	2800      	cmp	r0, #0
 800534e:	dc06      	bgt.n	800535e <__sflush_r+0xfe>
 8005350:	89a3      	ldrh	r3, [r4, #12]
 8005352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005356:	81a3      	strh	r3, [r4, #12]
 8005358:	f04f 30ff 	mov.w	r0, #4294967295
 800535c:	e78e      	b.n	800527c <__sflush_r+0x1c>
 800535e:	4407      	add	r7, r0
 8005360:	eba8 0800 	sub.w	r8, r8, r0
 8005364:	e7e9      	b.n	800533a <__sflush_r+0xda>
 8005366:	bf00      	nop
 8005368:	20400001 	.word	0x20400001

0800536c <_fflush_r>:
 800536c:	b538      	push	{r3, r4, r5, lr}
 800536e:	690b      	ldr	r3, [r1, #16]
 8005370:	4605      	mov	r5, r0
 8005372:	460c      	mov	r4, r1
 8005374:	b913      	cbnz	r3, 800537c <_fflush_r+0x10>
 8005376:	2500      	movs	r5, #0
 8005378:	4628      	mov	r0, r5
 800537a:	bd38      	pop	{r3, r4, r5, pc}
 800537c:	b118      	cbz	r0, 8005386 <_fflush_r+0x1a>
 800537e:	6983      	ldr	r3, [r0, #24]
 8005380:	b90b      	cbnz	r3, 8005386 <_fflush_r+0x1a>
 8005382:	f7ff fa4f 	bl	8004824 <__sinit>
 8005386:	4b14      	ldr	r3, [pc, #80]	; (80053d8 <_fflush_r+0x6c>)
 8005388:	429c      	cmp	r4, r3
 800538a:	d11b      	bne.n	80053c4 <_fflush_r+0x58>
 800538c:	686c      	ldr	r4, [r5, #4]
 800538e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d0ef      	beq.n	8005376 <_fflush_r+0xa>
 8005396:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005398:	07d0      	lsls	r0, r2, #31
 800539a:	d404      	bmi.n	80053a6 <_fflush_r+0x3a>
 800539c:	0599      	lsls	r1, r3, #22
 800539e:	d402      	bmi.n	80053a6 <_fflush_r+0x3a>
 80053a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053a2:	f7ff fadd 	bl	8004960 <__retarget_lock_acquire_recursive>
 80053a6:	4628      	mov	r0, r5
 80053a8:	4621      	mov	r1, r4
 80053aa:	f7ff ff59 	bl	8005260 <__sflush_r>
 80053ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053b0:	07da      	lsls	r2, r3, #31
 80053b2:	4605      	mov	r5, r0
 80053b4:	d4e0      	bmi.n	8005378 <_fflush_r+0xc>
 80053b6:	89a3      	ldrh	r3, [r4, #12]
 80053b8:	059b      	lsls	r3, r3, #22
 80053ba:	d4dd      	bmi.n	8005378 <_fflush_r+0xc>
 80053bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053be:	f7ff fad0 	bl	8004962 <__retarget_lock_release_recursive>
 80053c2:	e7d9      	b.n	8005378 <_fflush_r+0xc>
 80053c4:	4b05      	ldr	r3, [pc, #20]	; (80053dc <_fflush_r+0x70>)
 80053c6:	429c      	cmp	r4, r3
 80053c8:	d101      	bne.n	80053ce <_fflush_r+0x62>
 80053ca:	68ac      	ldr	r4, [r5, #8]
 80053cc:	e7df      	b.n	800538e <_fflush_r+0x22>
 80053ce:	4b04      	ldr	r3, [pc, #16]	; (80053e0 <_fflush_r+0x74>)
 80053d0:	429c      	cmp	r4, r3
 80053d2:	bf08      	it	eq
 80053d4:	68ec      	ldreq	r4, [r5, #12]
 80053d6:	e7da      	b.n	800538e <_fflush_r+0x22>
 80053d8:	08005690 	.word	0x08005690
 80053dc:	080056b0 	.word	0x080056b0
 80053e0:	08005670 	.word	0x08005670

080053e4 <_lseek_r>:
 80053e4:	b538      	push	{r3, r4, r5, lr}
 80053e6:	4d07      	ldr	r5, [pc, #28]	; (8005404 <_lseek_r+0x20>)
 80053e8:	4604      	mov	r4, r0
 80053ea:	4608      	mov	r0, r1
 80053ec:	4611      	mov	r1, r2
 80053ee:	2200      	movs	r2, #0
 80053f0:	602a      	str	r2, [r5, #0]
 80053f2:	461a      	mov	r2, r3
 80053f4:	f7fb fd76 	bl	8000ee4 <_lseek>
 80053f8:	1c43      	adds	r3, r0, #1
 80053fa:	d102      	bne.n	8005402 <_lseek_r+0x1e>
 80053fc:	682b      	ldr	r3, [r5, #0]
 80053fe:	b103      	cbz	r3, 8005402 <_lseek_r+0x1e>
 8005400:	6023      	str	r3, [r4, #0]
 8005402:	bd38      	pop	{r3, r4, r5, pc}
 8005404:	20000168 	.word	0x20000168

08005408 <__swhatbuf_r>:
 8005408:	b570      	push	{r4, r5, r6, lr}
 800540a:	460e      	mov	r6, r1
 800540c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005410:	2900      	cmp	r1, #0
 8005412:	b096      	sub	sp, #88	; 0x58
 8005414:	4614      	mov	r4, r2
 8005416:	461d      	mov	r5, r3
 8005418:	da07      	bge.n	800542a <__swhatbuf_r+0x22>
 800541a:	2300      	movs	r3, #0
 800541c:	602b      	str	r3, [r5, #0]
 800541e:	89b3      	ldrh	r3, [r6, #12]
 8005420:	061a      	lsls	r2, r3, #24
 8005422:	d410      	bmi.n	8005446 <__swhatbuf_r+0x3e>
 8005424:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005428:	e00e      	b.n	8005448 <__swhatbuf_r+0x40>
 800542a:	466a      	mov	r2, sp
 800542c:	f000 f8be 	bl	80055ac <_fstat_r>
 8005430:	2800      	cmp	r0, #0
 8005432:	dbf2      	blt.n	800541a <__swhatbuf_r+0x12>
 8005434:	9a01      	ldr	r2, [sp, #4]
 8005436:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800543a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800543e:	425a      	negs	r2, r3
 8005440:	415a      	adcs	r2, r3
 8005442:	602a      	str	r2, [r5, #0]
 8005444:	e7ee      	b.n	8005424 <__swhatbuf_r+0x1c>
 8005446:	2340      	movs	r3, #64	; 0x40
 8005448:	2000      	movs	r0, #0
 800544a:	6023      	str	r3, [r4, #0]
 800544c:	b016      	add	sp, #88	; 0x58
 800544e:	bd70      	pop	{r4, r5, r6, pc}

08005450 <__smakebuf_r>:
 8005450:	898b      	ldrh	r3, [r1, #12]
 8005452:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005454:	079d      	lsls	r5, r3, #30
 8005456:	4606      	mov	r6, r0
 8005458:	460c      	mov	r4, r1
 800545a:	d507      	bpl.n	800546c <__smakebuf_r+0x1c>
 800545c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005460:	6023      	str	r3, [r4, #0]
 8005462:	6123      	str	r3, [r4, #16]
 8005464:	2301      	movs	r3, #1
 8005466:	6163      	str	r3, [r4, #20]
 8005468:	b002      	add	sp, #8
 800546a:	bd70      	pop	{r4, r5, r6, pc}
 800546c:	ab01      	add	r3, sp, #4
 800546e:	466a      	mov	r2, sp
 8005470:	f7ff ffca 	bl	8005408 <__swhatbuf_r>
 8005474:	9900      	ldr	r1, [sp, #0]
 8005476:	4605      	mov	r5, r0
 8005478:	4630      	mov	r0, r6
 800547a:	f7ff fa73 	bl	8004964 <_malloc_r>
 800547e:	b948      	cbnz	r0, 8005494 <__smakebuf_r+0x44>
 8005480:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005484:	059a      	lsls	r2, r3, #22
 8005486:	d4ef      	bmi.n	8005468 <__smakebuf_r+0x18>
 8005488:	f023 0303 	bic.w	r3, r3, #3
 800548c:	f043 0302 	orr.w	r3, r3, #2
 8005490:	81a3      	strh	r3, [r4, #12]
 8005492:	e7e3      	b.n	800545c <__smakebuf_r+0xc>
 8005494:	4b0d      	ldr	r3, [pc, #52]	; (80054cc <__smakebuf_r+0x7c>)
 8005496:	62b3      	str	r3, [r6, #40]	; 0x28
 8005498:	89a3      	ldrh	r3, [r4, #12]
 800549a:	6020      	str	r0, [r4, #0]
 800549c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054a0:	81a3      	strh	r3, [r4, #12]
 80054a2:	9b00      	ldr	r3, [sp, #0]
 80054a4:	6163      	str	r3, [r4, #20]
 80054a6:	9b01      	ldr	r3, [sp, #4]
 80054a8:	6120      	str	r0, [r4, #16]
 80054aa:	b15b      	cbz	r3, 80054c4 <__smakebuf_r+0x74>
 80054ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054b0:	4630      	mov	r0, r6
 80054b2:	f000 f88d 	bl	80055d0 <_isatty_r>
 80054b6:	b128      	cbz	r0, 80054c4 <__smakebuf_r+0x74>
 80054b8:	89a3      	ldrh	r3, [r4, #12]
 80054ba:	f023 0303 	bic.w	r3, r3, #3
 80054be:	f043 0301 	orr.w	r3, r3, #1
 80054c2:	81a3      	strh	r3, [r4, #12]
 80054c4:	89a0      	ldrh	r0, [r4, #12]
 80054c6:	4305      	orrs	r5, r0
 80054c8:	81a5      	strh	r5, [r4, #12]
 80054ca:	e7cd      	b.n	8005468 <__smakebuf_r+0x18>
 80054cc:	080047bd 	.word	0x080047bd

080054d0 <__malloc_lock>:
 80054d0:	4801      	ldr	r0, [pc, #4]	; (80054d8 <__malloc_lock+0x8>)
 80054d2:	f7ff ba45 	b.w	8004960 <__retarget_lock_acquire_recursive>
 80054d6:	bf00      	nop
 80054d8:	20000160 	.word	0x20000160

080054dc <__malloc_unlock>:
 80054dc:	4801      	ldr	r0, [pc, #4]	; (80054e4 <__malloc_unlock+0x8>)
 80054de:	f7ff ba40 	b.w	8004962 <__retarget_lock_release_recursive>
 80054e2:	bf00      	nop
 80054e4:	20000160 	.word	0x20000160

080054e8 <_free_r>:
 80054e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054ea:	2900      	cmp	r1, #0
 80054ec:	d048      	beq.n	8005580 <_free_r+0x98>
 80054ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054f2:	9001      	str	r0, [sp, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f1a1 0404 	sub.w	r4, r1, #4
 80054fa:	bfb8      	it	lt
 80054fc:	18e4      	addlt	r4, r4, r3
 80054fe:	f7ff ffe7 	bl	80054d0 <__malloc_lock>
 8005502:	4a20      	ldr	r2, [pc, #128]	; (8005584 <_free_r+0x9c>)
 8005504:	9801      	ldr	r0, [sp, #4]
 8005506:	6813      	ldr	r3, [r2, #0]
 8005508:	4615      	mov	r5, r2
 800550a:	b933      	cbnz	r3, 800551a <_free_r+0x32>
 800550c:	6063      	str	r3, [r4, #4]
 800550e:	6014      	str	r4, [r2, #0]
 8005510:	b003      	add	sp, #12
 8005512:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005516:	f7ff bfe1 	b.w	80054dc <__malloc_unlock>
 800551a:	42a3      	cmp	r3, r4
 800551c:	d90b      	bls.n	8005536 <_free_r+0x4e>
 800551e:	6821      	ldr	r1, [r4, #0]
 8005520:	1862      	adds	r2, r4, r1
 8005522:	4293      	cmp	r3, r2
 8005524:	bf04      	itt	eq
 8005526:	681a      	ldreq	r2, [r3, #0]
 8005528:	685b      	ldreq	r3, [r3, #4]
 800552a:	6063      	str	r3, [r4, #4]
 800552c:	bf04      	itt	eq
 800552e:	1852      	addeq	r2, r2, r1
 8005530:	6022      	streq	r2, [r4, #0]
 8005532:	602c      	str	r4, [r5, #0]
 8005534:	e7ec      	b.n	8005510 <_free_r+0x28>
 8005536:	461a      	mov	r2, r3
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	b10b      	cbz	r3, 8005540 <_free_r+0x58>
 800553c:	42a3      	cmp	r3, r4
 800553e:	d9fa      	bls.n	8005536 <_free_r+0x4e>
 8005540:	6811      	ldr	r1, [r2, #0]
 8005542:	1855      	adds	r5, r2, r1
 8005544:	42a5      	cmp	r5, r4
 8005546:	d10b      	bne.n	8005560 <_free_r+0x78>
 8005548:	6824      	ldr	r4, [r4, #0]
 800554a:	4421      	add	r1, r4
 800554c:	1854      	adds	r4, r2, r1
 800554e:	42a3      	cmp	r3, r4
 8005550:	6011      	str	r1, [r2, #0]
 8005552:	d1dd      	bne.n	8005510 <_free_r+0x28>
 8005554:	681c      	ldr	r4, [r3, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	6053      	str	r3, [r2, #4]
 800555a:	4421      	add	r1, r4
 800555c:	6011      	str	r1, [r2, #0]
 800555e:	e7d7      	b.n	8005510 <_free_r+0x28>
 8005560:	d902      	bls.n	8005568 <_free_r+0x80>
 8005562:	230c      	movs	r3, #12
 8005564:	6003      	str	r3, [r0, #0]
 8005566:	e7d3      	b.n	8005510 <_free_r+0x28>
 8005568:	6825      	ldr	r5, [r4, #0]
 800556a:	1961      	adds	r1, r4, r5
 800556c:	428b      	cmp	r3, r1
 800556e:	bf04      	itt	eq
 8005570:	6819      	ldreq	r1, [r3, #0]
 8005572:	685b      	ldreq	r3, [r3, #4]
 8005574:	6063      	str	r3, [r4, #4]
 8005576:	bf04      	itt	eq
 8005578:	1949      	addeq	r1, r1, r5
 800557a:	6021      	streq	r1, [r4, #0]
 800557c:	6054      	str	r4, [r2, #4]
 800557e:	e7c7      	b.n	8005510 <_free_r+0x28>
 8005580:	b003      	add	sp, #12
 8005582:	bd30      	pop	{r4, r5, pc}
 8005584:	200000b4 	.word	0x200000b4

08005588 <_read_r>:
 8005588:	b538      	push	{r3, r4, r5, lr}
 800558a:	4d07      	ldr	r5, [pc, #28]	; (80055a8 <_read_r+0x20>)
 800558c:	4604      	mov	r4, r0
 800558e:	4608      	mov	r0, r1
 8005590:	4611      	mov	r1, r2
 8005592:	2200      	movs	r2, #0
 8005594:	602a      	str	r2, [r5, #0]
 8005596:	461a      	mov	r2, r3
 8005598:	f7fb fc44 	bl	8000e24 <_read>
 800559c:	1c43      	adds	r3, r0, #1
 800559e:	d102      	bne.n	80055a6 <_read_r+0x1e>
 80055a0:	682b      	ldr	r3, [r5, #0]
 80055a2:	b103      	cbz	r3, 80055a6 <_read_r+0x1e>
 80055a4:	6023      	str	r3, [r4, #0]
 80055a6:	bd38      	pop	{r3, r4, r5, pc}
 80055a8:	20000168 	.word	0x20000168

080055ac <_fstat_r>:
 80055ac:	b538      	push	{r3, r4, r5, lr}
 80055ae:	4d07      	ldr	r5, [pc, #28]	; (80055cc <_fstat_r+0x20>)
 80055b0:	2300      	movs	r3, #0
 80055b2:	4604      	mov	r4, r0
 80055b4:	4608      	mov	r0, r1
 80055b6:	4611      	mov	r1, r2
 80055b8:	602b      	str	r3, [r5, #0]
 80055ba:	f7fb fc78 	bl	8000eae <_fstat>
 80055be:	1c43      	adds	r3, r0, #1
 80055c0:	d102      	bne.n	80055c8 <_fstat_r+0x1c>
 80055c2:	682b      	ldr	r3, [r5, #0]
 80055c4:	b103      	cbz	r3, 80055c8 <_fstat_r+0x1c>
 80055c6:	6023      	str	r3, [r4, #0]
 80055c8:	bd38      	pop	{r3, r4, r5, pc}
 80055ca:	bf00      	nop
 80055cc:	20000168 	.word	0x20000168

080055d0 <_isatty_r>:
 80055d0:	b538      	push	{r3, r4, r5, lr}
 80055d2:	4d06      	ldr	r5, [pc, #24]	; (80055ec <_isatty_r+0x1c>)
 80055d4:	2300      	movs	r3, #0
 80055d6:	4604      	mov	r4, r0
 80055d8:	4608      	mov	r0, r1
 80055da:	602b      	str	r3, [r5, #0]
 80055dc:	f7fb fc77 	bl	8000ece <_isatty>
 80055e0:	1c43      	adds	r3, r0, #1
 80055e2:	d102      	bne.n	80055ea <_isatty_r+0x1a>
 80055e4:	682b      	ldr	r3, [r5, #0]
 80055e6:	b103      	cbz	r3, 80055ea <_isatty_r+0x1a>
 80055e8:	6023      	str	r3, [r4, #0]
 80055ea:	bd38      	pop	{r3, r4, r5, pc}
 80055ec:	20000168 	.word	0x20000168

080055f0 <_init>:
 80055f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f2:	bf00      	nop
 80055f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055f6:	bc08      	pop	{r3}
 80055f8:	469e      	mov	lr, r3
 80055fa:	4770      	bx	lr

080055fc <_fini>:
 80055fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055fe:	bf00      	nop
 8005600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005602:	bc08      	pop	{r3}
 8005604:	469e      	mov	lr, r3
 8005606:	4770      	bx	lr
